#!/usr/bin/env python

def options(opt):
	return

def configure(conf):
	conf.env.append_unique('DEFINES', ['TIER0_DLL_EXPORT', 'CROSS_PLATFORM_VERSION=1'])
	if conf.env.DEST_OS == 'win32':
		conf.env.append_unique('DEFINES', ['THREAD_MUTEX_TRACING_ENABLED'])

def build(bld):
	source = [
		'../unitlib/unitlib.cpp',
		'assert_dialog.cpp',
		'commandline.cpp',
		'cpu.cpp',
		'cpumonitoring.cpp',
		'cputopology.cpp',
		'dbg.cpp',
		'fasttimer.cpp',
		'logging.cpp',
		'mem.cpp',
		'mem_helpers.cpp',
		'memdbg.cpp',
		'memvirt.cpp',
		'memstd.cpp',
		'memvalidate.cpp',
		'dynfunction.cpp',
		'minidump.cpp',
		'tier0_strtools.cpp',			
		'miniprofiler.cpp',			
		'perfstats.cpp',
		'platform_independent.cpp',
		'platwindow.cpp',
		'progressbar.cpp',	
		'security.cpp',
		'stackstats.cpp',
		'stacktools.cpp',
		'systeminformation.cpp',
		'threadtools.cpp',
		'tslist.cpp',
		'vatoms.cpp',
		'vprof.cpp',
		'vtuneinterface.cpp',
		'win32consoleio.cpp'
	]

	if bld.env.DEST_OS == 'win32':
		source += [
			'assert_dialog.rc',
			'etwprof.cpp',
			'memprocessheap.cpp',
			'platform.cpp',
			'pme.cpp',
			'PMELib.cpp',
			'dlmalloc/malloc.cpp'
		]
	else:
		source += [
			'cpu_posix.cpp',
			'platform_posix.cpp',
			'pme_posix.cpp'
		]

	includes = []

	libs = []

	bld.shlib(
		target = 'tier0',
		features = 'c cxx',
		source = source,
		includes = includes,
		use = libs,
		install_path = bld.env.LIBDIR,
		subsystem = bld.env.MSVC_SUBSYSTEM
	)
