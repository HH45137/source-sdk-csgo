// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: base_gcmessages.proto

#include "base_gcmessages.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CGCStorePurchaseInit_LineItem::CGCStorePurchaseInit_LineItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : item_def_id_(0u)
  , quantity_(0u)
  , cost_in_local_currency_(0u)
  , purchase_type_(0u){}
struct CGCStorePurchaseInit_LineItemDefaultTypeInternal {
  constexpr CGCStorePurchaseInit_LineItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGCStorePurchaseInit_LineItemDefaultTypeInternal() {}
  union {
    CGCStorePurchaseInit_LineItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGCStorePurchaseInit_LineItemDefaultTypeInternal _CGCStorePurchaseInit_LineItem_default_instance_;
constexpr CMsgGCStorePurchaseInit::CMsgGCStorePurchaseInit(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : line_items_()
  , country_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , language_(0)
  , currency_(0){}
struct CMsgGCStorePurchaseInitDefaultTypeInternal {
  constexpr CMsgGCStorePurchaseInitDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCStorePurchaseInitDefaultTypeInternal() {}
  union {
    CMsgGCStorePurchaseInit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCStorePurchaseInitDefaultTypeInternal _CMsgGCStorePurchaseInit_default_instance_;
constexpr CMsgGCStorePurchaseInitResponse::CMsgGCStorePurchaseInitResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : item_ids_()
  , url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , txn_id_(uint64_t{0u})
  , result_(0){}
struct CMsgGCStorePurchaseInitResponseDefaultTypeInternal {
  constexpr CMsgGCStorePurchaseInitResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCStorePurchaseInitResponseDefaultTypeInternal() {}
  union {
    CMsgGCStorePurchaseInitResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCStorePurchaseInitResponseDefaultTypeInternal _CMsgGCStorePurchaseInitResponse_default_instance_;
constexpr CSOPartyInvite::CSOPartyInvite(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sender_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , group_id_(uint64_t{0u})
  , sender_id_(uint64_t{0u}){}
struct CSOPartyInviteDefaultTypeInternal {
  constexpr CSOPartyInviteDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSOPartyInviteDefaultTypeInternal() {}
  union {
    CSOPartyInvite _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSOPartyInviteDefaultTypeInternal _CSOPartyInvite_default_instance_;
constexpr CSOLobbyInvite::CSOLobbyInvite(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sender_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , group_id_(uint64_t{0u})
  , sender_id_(uint64_t{0u}){}
struct CSOLobbyInviteDefaultTypeInternal {
  constexpr CSOLobbyInviteDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSOLobbyInviteDefaultTypeInternal() {}
  union {
    CSOLobbyInvite _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSOLobbyInviteDefaultTypeInternal _CSOLobbyInvite_default_instance_;
constexpr CMsgSystemBroadcast::CMsgSystemBroadcast(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CMsgSystemBroadcastDefaultTypeInternal {
  constexpr CMsgSystemBroadcastDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSystemBroadcastDefaultTypeInternal() {}
  union {
    CMsgSystemBroadcast _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSystemBroadcastDefaultTypeInternal _CMsgSystemBroadcast_default_instance_;
constexpr CMsgInviteToParty::CMsgInviteToParty(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steam_id_(uint64_t{0u})
  , client_version_(0u)
  , team_invite_(0u){}
struct CMsgInviteToPartyDefaultTypeInternal {
  constexpr CMsgInviteToPartyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgInviteToPartyDefaultTypeInternal() {}
  union {
    CMsgInviteToParty _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgInviteToPartyDefaultTypeInternal _CMsgInviteToParty_default_instance_;
constexpr CMsgInvitationCreated::CMsgInvitationCreated(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : group_id_(uint64_t{0u})
  , steam_id_(uint64_t{0u}){}
struct CMsgInvitationCreatedDefaultTypeInternal {
  constexpr CMsgInvitationCreatedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgInvitationCreatedDefaultTypeInternal() {}
  union {
    CMsgInvitationCreated _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgInvitationCreatedDefaultTypeInternal _CMsgInvitationCreated_default_instance_;
constexpr CMsgPartyInviteResponse::CMsgPartyInviteResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : party_id_(uint64_t{0u})
  , accept_(false)
  , client_version_(0u)
  , team_invite_(0u){}
struct CMsgPartyInviteResponseDefaultTypeInternal {
  constexpr CMsgPartyInviteResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgPartyInviteResponseDefaultTypeInternal() {}
  union {
    CMsgPartyInviteResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgPartyInviteResponseDefaultTypeInternal _CMsgPartyInviteResponse_default_instance_;
constexpr CMsgKickFromParty::CMsgKickFromParty(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steam_id_(uint64_t{0u}){}
struct CMsgKickFromPartyDefaultTypeInternal {
  constexpr CMsgKickFromPartyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgKickFromPartyDefaultTypeInternal() {}
  union {
    CMsgKickFromParty _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgKickFromPartyDefaultTypeInternal _CMsgKickFromParty_default_instance_;
constexpr CMsgLeaveParty::CMsgLeaveParty(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CMsgLeavePartyDefaultTypeInternal {
  constexpr CMsgLeavePartyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgLeavePartyDefaultTypeInternal() {}
  union {
    CMsgLeaveParty _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgLeavePartyDefaultTypeInternal _CMsgLeaveParty_default_instance_;
constexpr CMsgServerAvailable::CMsgServerAvailable(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CMsgServerAvailableDefaultTypeInternal {
  constexpr CMsgServerAvailableDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgServerAvailableDefaultTypeInternal() {}
  union {
    CMsgServerAvailable _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgServerAvailableDefaultTypeInternal _CMsgServerAvailable_default_instance_;
constexpr CMsgLANServerAvailable::CMsgLANServerAvailable(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : lobby_id_(uint64_t{0u}){}
struct CMsgLANServerAvailableDefaultTypeInternal {
  constexpr CMsgLANServerAvailableDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgLANServerAvailableDefaultTypeInternal() {}
  union {
    CMsgLANServerAvailable _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgLANServerAvailableDefaultTypeInternal _CMsgLANServerAvailable_default_instance_;
constexpr CSOEconGameAccountClient::CSOEconGameAccountClient(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : elevated_timestamp_(0u)
  , additional_backpack_slots_(0u)
  , bonus_xp_timestamp_refresh_(0u)
  , bonus_xp_usedflags_(0u)
  , elevated_state_(0u){}
struct CSOEconGameAccountClientDefaultTypeInternal {
  constexpr CSOEconGameAccountClientDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSOEconGameAccountClientDefaultTypeInternal() {}
  union {
    CSOEconGameAccountClient _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSOEconGameAccountClientDefaultTypeInternal _CSOEconGameAccountClient_default_instance_;
constexpr CSOItemCriteriaCondition::CSOItemCriteriaCondition(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : field_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , string_value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , op_(0)
  , required_(false)
  , float_value_(0){}
struct CSOItemCriteriaConditionDefaultTypeInternal {
  constexpr CSOItemCriteriaConditionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSOItemCriteriaConditionDefaultTypeInternal() {}
  union {
    CSOItemCriteriaCondition _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSOItemCriteriaConditionDefaultTypeInternal _CSOItemCriteriaCondition_default_instance_;
constexpr CSOItemCriteria::CSOItemCriteria(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : conditions_()
  , item_level_(0u)
  , item_quality_(0)
  , initial_inventory_(0u)
  , initial_quantity_(0u)
  , item_level_set_(false)
  , item_quality_set_(false)
  , ignore_enabled_flag_(false)
  , item_rarity_set_(false)
  , item_rarity_(0)
  , recent_only_(false){}
struct CSOItemCriteriaDefaultTypeInternal {
  constexpr CSOItemCriteriaDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSOItemCriteriaDefaultTypeInternal() {}
  union {
    CSOItemCriteria _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSOItemCriteriaDefaultTypeInternal _CSOItemCriteria_default_instance_;
constexpr CSOItemRecipe::CSOItemRecipe(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : input_items_criteria_()
  , output_items_criteria_()
  , input_item_dupe_counts_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , n_a_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , desc_inputs_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , desc_outputs_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , di_a_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , di_b_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , di_c_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , do_a_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , do_b_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , do_c_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , def_index_(0u)
  , requires_all_same_class_(false)
  , requires_all_same_slot_(false)
  , class_usage_for_output_(0)
  , slot_usage_for_output_(0)
  , set_for_output_(0){}
struct CSOItemRecipeDefaultTypeInternal {
  constexpr CSOItemRecipeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSOItemRecipeDefaultTypeInternal() {}
  union {
    CSOItemRecipe _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSOItemRecipeDefaultTypeInternal _CSOItemRecipe_default_instance_;
constexpr CMsgDevNewItemRequest::CMsgDevNewItemRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : criteria_(nullptr)
  , receiver_(uint64_t{0u}){}
struct CMsgDevNewItemRequestDefaultTypeInternal {
  constexpr CMsgDevNewItemRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDevNewItemRequestDefaultTypeInternal() {}
  union {
    CMsgDevNewItemRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDevNewItemRequestDefaultTypeInternal _CMsgDevNewItemRequest_default_instance_;
constexpr CMsgIncrementKillCountAttribute::CMsgIncrementKillCountAttribute(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : killer_account_id_(0u)
  , victim_account_id_(0u)
  , item_id_(uint64_t{0u})
  , event_type_(0u)
  , amount_(0u){}
struct CMsgIncrementKillCountAttributeDefaultTypeInternal {
  constexpr CMsgIncrementKillCountAttributeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgIncrementKillCountAttributeDefaultTypeInternal() {}
  union {
    CMsgIncrementKillCountAttribute _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgIncrementKillCountAttributeDefaultTypeInternal _CMsgIncrementKillCountAttribute_default_instance_;
constexpr CMsgApplySticker::CMsgApplySticker(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sticker_item_id_(uint64_t{0u})
  , item_item_id_(uint64_t{0u})
  , sticker_slot_(0u)
  , baseitem_defidx_(0u)
  , sticker_wear_(0){}
struct CMsgApplyStickerDefaultTypeInternal {
  constexpr CMsgApplyStickerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgApplyStickerDefaultTypeInternal() {}
  union {
    CMsgApplySticker _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgApplyStickerDefaultTypeInternal _CMsgApplySticker_default_instance_;
constexpr CMsgApplyStatTrakSwap::CMsgApplyStatTrakSwap(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tool_item_id_(uint64_t{0u})
  , item_1_item_id_(uint64_t{0u})
  , item_2_item_id_(uint64_t{0u}){}
struct CMsgApplyStatTrakSwapDefaultTypeInternal {
  constexpr CMsgApplyStatTrakSwapDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgApplyStatTrakSwapDefaultTypeInternal() {}
  union {
    CMsgApplyStatTrakSwap _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgApplyStatTrakSwapDefaultTypeInternal _CMsgApplyStatTrakSwap_default_instance_;
constexpr CMsgApplyStrangePart::CMsgApplyStrangePart(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : strange_part_item_id_(uint64_t{0u})
  , item_item_id_(uint64_t{0u}){}
struct CMsgApplyStrangePartDefaultTypeInternal {
  constexpr CMsgApplyStrangePartDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgApplyStrangePartDefaultTypeInternal() {}
  union {
    CMsgApplyStrangePart _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgApplyStrangePartDefaultTypeInternal _CMsgApplyStrangePart_default_instance_;
constexpr CMsgApplyPennantUpgrade::CMsgApplyPennantUpgrade(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : upgrade_item_id_(uint64_t{0u})
  , pennant_item_id_(uint64_t{0u}){}
struct CMsgApplyPennantUpgradeDefaultTypeInternal {
  constexpr CMsgApplyPennantUpgradeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgApplyPennantUpgradeDefaultTypeInternal() {}
  union {
    CMsgApplyPennantUpgrade _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgApplyPennantUpgradeDefaultTypeInternal _CMsgApplyPennantUpgrade_default_instance_;
constexpr CMsgApplyEggEssence::CMsgApplyEggEssence(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : essence_item_id_(uint64_t{0u})
  , egg_item_id_(uint64_t{0u}){}
struct CMsgApplyEggEssenceDefaultTypeInternal {
  constexpr CMsgApplyEggEssenceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgApplyEggEssenceDefaultTypeInternal() {}
  union {
    CMsgApplyEggEssence _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgApplyEggEssenceDefaultTypeInternal _CMsgApplyEggEssence_default_instance_;
constexpr CSOEconItemAttribute::CSOEconItemAttribute(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_bytes_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , def_index_(0u)
  , value_(0u){}
struct CSOEconItemAttributeDefaultTypeInternal {
  constexpr CSOEconItemAttributeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSOEconItemAttributeDefaultTypeInternal() {}
  union {
    CSOEconItemAttribute _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSOEconItemAttributeDefaultTypeInternal _CSOEconItemAttribute_default_instance_;
constexpr CSOEconItemEquipped::CSOEconItemEquipped(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : new_class_(0u)
  , new_slot_(0u){}
struct CSOEconItemEquippedDefaultTypeInternal {
  constexpr CSOEconItemEquippedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSOEconItemEquippedDefaultTypeInternal() {}
  union {
    CSOEconItemEquipped _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSOEconItemEquippedDefaultTypeInternal _CSOEconItemEquipped_default_instance_;
constexpr CSOEconItem::CSOEconItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : attribute_()
  , equipped_state_()
  , custom_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , custom_desc_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , interior_item_(nullptr)
  , id_(uint64_t{0u})
  , account_id_(0u)
  , inventory_(0u)
  , def_index_(0u)
  , quantity_(0u)
  , level_(0u)
  , quality_(0u)
  , flags_(0u)
  , origin_(0u)
  , in_use_(false)
  , style_(0u)
  , original_id_(uint64_t{0u})
  , rarity_(0u){}
struct CSOEconItemDefaultTypeInternal {
  constexpr CSOEconItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSOEconItemDefaultTypeInternal() {}
  union {
    CSOEconItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSOEconItemDefaultTypeInternal _CSOEconItem_default_instance_;
constexpr CMsgAdjustItemEquippedState::CMsgAdjustItemEquippedState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : item_id_(uint64_t{0u})
  , new_class_(0u)
  , new_slot_(0u)
  , swap_(false){}
struct CMsgAdjustItemEquippedStateDefaultTypeInternal {
  constexpr CMsgAdjustItemEquippedStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgAdjustItemEquippedStateDefaultTypeInternal() {}
  union {
    CMsgAdjustItemEquippedState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgAdjustItemEquippedStateDefaultTypeInternal _CMsgAdjustItemEquippedState_default_instance_;
constexpr CMsgSortItems::CMsgSortItems(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sort_type_(0u){}
struct CMsgSortItemsDefaultTypeInternal {
  constexpr CMsgSortItemsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSortItemsDefaultTypeInternal() {}
  union {
    CMsgSortItems _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSortItemsDefaultTypeInternal _CMsgSortItems_default_instance_;
constexpr CSOEconClaimCode::CSOEconClaimCode(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , account_id_(0u)
  , code_type_(0u)
  , time_acquired_(0u){}
struct CSOEconClaimCodeDefaultTypeInternal {
  constexpr CSOEconClaimCodeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSOEconClaimCodeDefaultTypeInternal() {}
  union {
    CSOEconClaimCode _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSOEconClaimCodeDefaultTypeInternal _CSOEconClaimCode_default_instance_;
constexpr CMsgStoreGetUserData::CMsgStoreGetUserData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : price_sheet_version_(0u)
  , currency_(0){}
struct CMsgStoreGetUserDataDefaultTypeInternal {
  constexpr CMsgStoreGetUserDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgStoreGetUserDataDefaultTypeInternal() {}
  union {
    CMsgStoreGetUserData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgStoreGetUserDataDefaultTypeInternal _CMsgStoreGetUserData_default_instance_;
constexpr CMsgStoreGetUserDataResponse::CMsgStoreGetUserDataResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : country_deprecated_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , price_sheet_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , result_(0)
  , currency_deprecated_(0)
  , price_sheet_version_(0u){}
struct CMsgStoreGetUserDataResponseDefaultTypeInternal {
  constexpr CMsgStoreGetUserDataResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgStoreGetUserDataResponseDefaultTypeInternal() {}
  union {
    CMsgStoreGetUserDataResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgStoreGetUserDataResponseDefaultTypeInternal _CMsgStoreGetUserDataResponse_default_instance_;
constexpr CMsgUpdateItemSchema::CMsgUpdateItemSchema(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : items_game_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , items_game_url_deprecated2013_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , items_game_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , item_schema_version_(0u){}
struct CMsgUpdateItemSchemaDefaultTypeInternal {
  constexpr CMsgUpdateItemSchemaDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgUpdateItemSchemaDefaultTypeInternal() {}
  union {
    CMsgUpdateItemSchema _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgUpdateItemSchemaDefaultTypeInternal _CMsgUpdateItemSchema_default_instance_;
constexpr CMsgGCError::CMsgGCError(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : error_text_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CMsgGCErrorDefaultTypeInternal {
  constexpr CMsgGCErrorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCErrorDefaultTypeInternal() {}
  union {
    CMsgGCError _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCErrorDefaultTypeInternal _CMsgGCError_default_instance_;
constexpr CMsgRequestInventoryRefresh::CMsgRequestInventoryRefresh(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CMsgRequestInventoryRefreshDefaultTypeInternal {
  constexpr CMsgRequestInventoryRefreshDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgRequestInventoryRefreshDefaultTypeInternal() {}
  union {
    CMsgRequestInventoryRefresh _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgRequestInventoryRefreshDefaultTypeInternal _CMsgRequestInventoryRefresh_default_instance_;
constexpr CMsgConVarValue::CMsgConVarValue(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CMsgConVarValueDefaultTypeInternal {
  constexpr CMsgConVarValueDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgConVarValueDefaultTypeInternal() {}
  union {
    CMsgConVarValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgConVarValueDefaultTypeInternal _CMsgConVarValue_default_instance_;
constexpr CMsgReplicateConVars::CMsgReplicateConVars(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : convars_(){}
struct CMsgReplicateConVarsDefaultTypeInternal {
  constexpr CMsgReplicateConVarsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgReplicateConVarsDefaultTypeInternal() {}
  union {
    CMsgReplicateConVars _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgReplicateConVarsDefaultTypeInternal _CMsgReplicateConVars_default_instance_;
constexpr CMsgUseItem::CMsgUseItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : gift__potential_targets_()
  , item_id_(uint64_t{0u})
  , target_steam_id_(uint64_t{0u})
  , initiator_steam_id_(uint64_t{0u})
  , duel__class_lock_(0u){}
struct CMsgUseItemDefaultTypeInternal {
  constexpr CMsgUseItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgUseItemDefaultTypeInternal() {}
  union {
    CMsgUseItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgUseItemDefaultTypeInternal _CMsgUseItem_default_instance_;
constexpr CMsgReplayUploadedToYouTube::CMsgReplayUploadedToYouTube(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : youtube_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , youtube_account_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , session_id_(uint64_t{0u}){}
struct CMsgReplayUploadedToYouTubeDefaultTypeInternal {
  constexpr CMsgReplayUploadedToYouTubeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgReplayUploadedToYouTubeDefaultTypeInternal() {}
  union {
    CMsgReplayUploadedToYouTube _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgReplayUploadedToYouTubeDefaultTypeInternal _CMsgReplayUploadedToYouTube_default_instance_;
constexpr CMsgConsumableExhausted::CMsgConsumableExhausted(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : item_def_id_(0){}
struct CMsgConsumableExhaustedDefaultTypeInternal {
  constexpr CMsgConsumableExhaustedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgConsumableExhaustedDefaultTypeInternal() {}
  union {
    CMsgConsumableExhausted _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgConsumableExhaustedDefaultTypeInternal _CMsgConsumableExhausted_default_instance_;
constexpr CMsgItemAcknowledged__DEPRECATED::CMsgItemAcknowledged__DEPRECATED(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_id_(0u)
  , inventory_(0u)
  , def_index_(0u)
  , quality_(0u)
  , rarity_(0u)
  , origin_(0u)
  , item_id_(uint64_t{0u}){}
struct CMsgItemAcknowledged__DEPRECATEDDefaultTypeInternal {
  constexpr CMsgItemAcknowledged__DEPRECATEDDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgItemAcknowledged__DEPRECATEDDefaultTypeInternal() {}
  union {
    CMsgItemAcknowledged__DEPRECATED _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgItemAcknowledged__DEPRECATEDDefaultTypeInternal _CMsgItemAcknowledged__DEPRECATED_default_instance_;
constexpr CMsgSetItemPositions_ItemPosition::CMsgSetItemPositions_ItemPosition(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : legacy_item_id_(0u)
  , position_(0u)
  , item_id_(uint64_t{0u}){}
struct CMsgSetItemPositions_ItemPositionDefaultTypeInternal {
  constexpr CMsgSetItemPositions_ItemPositionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSetItemPositions_ItemPositionDefaultTypeInternal() {}
  union {
    CMsgSetItemPositions_ItemPosition _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSetItemPositions_ItemPositionDefaultTypeInternal _CMsgSetItemPositions_ItemPosition_default_instance_;
constexpr CMsgSetItemPositions::CMsgSetItemPositions(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : item_positions_(){}
struct CMsgSetItemPositionsDefaultTypeInternal {
  constexpr CMsgSetItemPositionsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSetItemPositionsDefaultTypeInternal() {}
  union {
    CMsgSetItemPositions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSetItemPositionsDefaultTypeInternal _CMsgSetItemPositions_default_instance_;
constexpr CMsgGCReportAbuse::CMsgGCReportAbuse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , target_steam_id_(uint64_t{0u})
  , abuse_type_(0u)
  , content_type_(0u)
  , gid_(uint64_t{0u})
  , target_game_server_ip_(0u)
  , target_game_server_port_(0u){}
struct CMsgGCReportAbuseDefaultTypeInternal {
  constexpr CMsgGCReportAbuseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCReportAbuseDefaultTypeInternal() {}
  union {
    CMsgGCReportAbuse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCReportAbuseDefaultTypeInternal _CMsgGCReportAbuse_default_instance_;
constexpr CMsgGCReportAbuseResponse::CMsgGCReportAbuseResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : error_message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , target_steam_id_(uint64_t{0u})
  , result_(0u){}
struct CMsgGCReportAbuseResponseDefaultTypeInternal {
  constexpr CMsgGCReportAbuseResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCReportAbuseResponseDefaultTypeInternal() {}
  union {
    CMsgGCReportAbuseResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCReportAbuseResponseDefaultTypeInternal _CMsgGCReportAbuseResponse_default_instance_;
constexpr CMsgGCNameItemNotification::CMsgGCNameItemNotification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : item_name_custom_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_steamid_(uint64_t{0u})
  , item_def_index_(0u){}
struct CMsgGCNameItemNotificationDefaultTypeInternal {
  constexpr CMsgGCNameItemNotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCNameItemNotificationDefaultTypeInternal() {}
  union {
    CMsgGCNameItemNotification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCNameItemNotificationDefaultTypeInternal _CMsgGCNameItemNotification_default_instance_;
constexpr CMsgGCClientDisplayNotification::CMsgGCClientDisplayNotification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : body_substring_keys_()
  , body_substring_values_()
  , notification_title_localization_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , notification_body_localization_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CMsgGCClientDisplayNotificationDefaultTypeInternal {
  constexpr CMsgGCClientDisplayNotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCClientDisplayNotificationDefaultTypeInternal() {}
  union {
    CMsgGCClientDisplayNotification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCClientDisplayNotificationDefaultTypeInternal _CMsgGCClientDisplayNotification_default_instance_;
constexpr CMsgGCShowItemsPickedUp::CMsgGCShowItemsPickedUp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_steamid_(uint64_t{0u}){}
struct CMsgGCShowItemsPickedUpDefaultTypeInternal {
  constexpr CMsgGCShowItemsPickedUpDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCShowItemsPickedUpDefaultTypeInternal() {}
  union {
    CMsgGCShowItemsPickedUp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCShowItemsPickedUpDefaultTypeInternal _CMsgGCShowItemsPickedUp_default_instance_;
constexpr CMsgGCIncrementKillCountResponse::CMsgGCIncrementKillCountResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : killer_account_id_(0u)
  , num_kills_(0u)
  , item_def_(0u)
  , level_type_(0u){}
struct CMsgGCIncrementKillCountResponseDefaultTypeInternal {
  constexpr CMsgGCIncrementKillCountResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCIncrementKillCountResponseDefaultTypeInternal() {}
  union {
    CMsgGCIncrementKillCountResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCIncrementKillCountResponseDefaultTypeInternal _CMsgGCIncrementKillCountResponse_default_instance_;
constexpr CSOEconItemDropRateBonus::CSOEconItemDropRateBonus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_id_(0u)
  , expiration_date_(0u)
  , bonus_(0)
  , bonus_count_(0u)
  , item_id_(uint64_t{0u})
  , def_index_(0u){}
struct CSOEconItemDropRateBonusDefaultTypeInternal {
  constexpr CSOEconItemDropRateBonusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSOEconItemDropRateBonusDefaultTypeInternal() {}
  union {
    CSOEconItemDropRateBonus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSOEconItemDropRateBonusDefaultTypeInternal _CSOEconItemDropRateBonus_default_instance_;
constexpr CSOEconItemLeagueViewPass::CSOEconItemLeagueViewPass(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_id_(0u)
  , league_id_(0u)
  , admin_(0u)
  , itemindex_(0u){}
struct CSOEconItemLeagueViewPassDefaultTypeInternal {
  constexpr CSOEconItemLeagueViewPassDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSOEconItemLeagueViewPassDefaultTypeInternal() {}
  union {
    CSOEconItemLeagueViewPass _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSOEconItemLeagueViewPassDefaultTypeInternal _CSOEconItemLeagueViewPass_default_instance_;
constexpr CSOEconItemEventTicket::CSOEconItemEventTicket(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_id_(0u)
  , event_id_(0u)
  , item_id_(uint64_t{0u}){}
struct CSOEconItemEventTicketDefaultTypeInternal {
  constexpr CSOEconItemEventTicketDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSOEconItemEventTicketDefaultTypeInternal() {}
  union {
    CSOEconItemEventTicket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSOEconItemEventTicketDefaultTypeInternal _CSOEconItemEventTicket_default_instance_;
constexpr CMsgGCItemPreviewItemBoughtNotification::CMsgGCItemPreviewItemBoughtNotification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : item_def_index_(0u){}
struct CMsgGCItemPreviewItemBoughtNotificationDefaultTypeInternal {
  constexpr CMsgGCItemPreviewItemBoughtNotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCItemPreviewItemBoughtNotificationDefaultTypeInternal() {}
  union {
    CMsgGCItemPreviewItemBoughtNotification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCItemPreviewItemBoughtNotificationDefaultTypeInternal _CMsgGCItemPreviewItemBoughtNotification_default_instance_;
constexpr CMsgGCStorePurchaseCancel::CMsgGCStorePurchaseCancel(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : txn_id_(uint64_t{0u}){}
struct CMsgGCStorePurchaseCancelDefaultTypeInternal {
  constexpr CMsgGCStorePurchaseCancelDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCStorePurchaseCancelDefaultTypeInternal() {}
  union {
    CMsgGCStorePurchaseCancel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCStorePurchaseCancelDefaultTypeInternal _CMsgGCStorePurchaseCancel_default_instance_;
constexpr CMsgGCStorePurchaseCancelResponse::CMsgGCStorePurchaseCancelResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(0u){}
struct CMsgGCStorePurchaseCancelResponseDefaultTypeInternal {
  constexpr CMsgGCStorePurchaseCancelResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCStorePurchaseCancelResponseDefaultTypeInternal() {}
  union {
    CMsgGCStorePurchaseCancelResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCStorePurchaseCancelResponseDefaultTypeInternal _CMsgGCStorePurchaseCancelResponse_default_instance_;
constexpr CMsgGCStorePurchaseFinalize::CMsgGCStorePurchaseFinalize(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : txn_id_(uint64_t{0u}){}
struct CMsgGCStorePurchaseFinalizeDefaultTypeInternal {
  constexpr CMsgGCStorePurchaseFinalizeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCStorePurchaseFinalizeDefaultTypeInternal() {}
  union {
    CMsgGCStorePurchaseFinalize _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCStorePurchaseFinalizeDefaultTypeInternal _CMsgGCStorePurchaseFinalize_default_instance_;
constexpr CMsgGCStorePurchaseFinalizeResponse::CMsgGCStorePurchaseFinalizeResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : item_ids_()
  , result_(0u){}
struct CMsgGCStorePurchaseFinalizeResponseDefaultTypeInternal {
  constexpr CMsgGCStorePurchaseFinalizeResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCStorePurchaseFinalizeResponseDefaultTypeInternal() {}
  union {
    CMsgGCStorePurchaseFinalizeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCStorePurchaseFinalizeResponseDefaultTypeInternal _CMsgGCStorePurchaseFinalizeResponse_default_instance_;
constexpr CMsgGCBannedWordListRequest::CMsgGCBannedWordListRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ban_list_group_id_(0u)
  , word_id_(0u){}
struct CMsgGCBannedWordListRequestDefaultTypeInternal {
  constexpr CMsgGCBannedWordListRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCBannedWordListRequestDefaultTypeInternal() {}
  union {
    CMsgGCBannedWordListRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCBannedWordListRequestDefaultTypeInternal _CMsgGCBannedWordListRequest_default_instance_;
constexpr CMsgGCRequestAnnouncements::CMsgGCRequestAnnouncements(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CMsgGCRequestAnnouncementsDefaultTypeInternal {
  constexpr CMsgGCRequestAnnouncementsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCRequestAnnouncementsDefaultTypeInternal() {}
  union {
    CMsgGCRequestAnnouncements _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCRequestAnnouncementsDefaultTypeInternal _CMsgGCRequestAnnouncements_default_instance_;
constexpr CMsgGCRequestAnnouncementsResponse::CMsgGCRequestAnnouncementsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : announcement_title_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , announcement_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , nextmatch_title_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , nextmatch_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CMsgGCRequestAnnouncementsResponseDefaultTypeInternal {
  constexpr CMsgGCRequestAnnouncementsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCRequestAnnouncementsResponseDefaultTypeInternal() {}
  union {
    CMsgGCRequestAnnouncementsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCRequestAnnouncementsResponseDefaultTypeInternal _CMsgGCRequestAnnouncementsResponse_default_instance_;
constexpr CMsgGCBannedWord::CMsgGCBannedWord(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : word_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , word_id_(0u)
  , word_type_(0)
{}
struct CMsgGCBannedWordDefaultTypeInternal {
  constexpr CMsgGCBannedWordDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCBannedWordDefaultTypeInternal() {}
  union {
    CMsgGCBannedWord _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCBannedWordDefaultTypeInternal _CMsgGCBannedWord_default_instance_;
constexpr CMsgGCBannedWordListResponse::CMsgGCBannedWordListResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : word_list_()
  , ban_list_group_id_(0u){}
struct CMsgGCBannedWordListResponseDefaultTypeInternal {
  constexpr CMsgGCBannedWordListResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCBannedWordListResponseDefaultTypeInternal() {}
  union {
    CMsgGCBannedWordListResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCBannedWordListResponseDefaultTypeInternal _CMsgGCBannedWordListResponse_default_instance_;
constexpr CMsgGCToGCBannedWordListBroadcast::CMsgGCToGCBannedWordListBroadcast(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : broadcast_(nullptr){}
struct CMsgGCToGCBannedWordListBroadcastDefaultTypeInternal {
  constexpr CMsgGCToGCBannedWordListBroadcastDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCToGCBannedWordListBroadcastDefaultTypeInternal() {}
  union {
    CMsgGCToGCBannedWordListBroadcast _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCToGCBannedWordListBroadcastDefaultTypeInternal _CMsgGCToGCBannedWordListBroadcast_default_instance_;
constexpr CMsgGCToGCBannedWordListUpdated::CMsgGCToGCBannedWordListUpdated(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : group_id_(0u){}
struct CMsgGCToGCBannedWordListUpdatedDefaultTypeInternal {
  constexpr CMsgGCToGCBannedWordListUpdatedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCToGCBannedWordListUpdatedDefaultTypeInternal() {}
  union {
    CMsgGCToGCBannedWordListUpdated _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCToGCBannedWordListUpdatedDefaultTypeInternal _CMsgGCToGCBannedWordListUpdated_default_instance_;
constexpr CSOEconDefaultEquippedDefinitionInstanceClient::CSOEconDefaultEquippedDefinitionInstanceClient(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_id_(0u)
  , item_definition_(0u)
  , class_id_(0u)
  , slot_id_(0u){}
struct CSOEconDefaultEquippedDefinitionInstanceClientDefaultTypeInternal {
  constexpr CSOEconDefaultEquippedDefinitionInstanceClientDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSOEconDefaultEquippedDefinitionInstanceClientDefaultTypeInternal() {}
  union {
    CSOEconDefaultEquippedDefinitionInstanceClient _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSOEconDefaultEquippedDefinitionInstanceClientDefaultTypeInternal _CSOEconDefaultEquippedDefinitionInstanceClient_default_instance_;
constexpr CMsgGCToGCDirtySDOCache::CMsgGCToGCDirtySDOCache(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_uint64_(uint64_t{0u})
  , sdo_type_(0u){}
struct CMsgGCToGCDirtySDOCacheDefaultTypeInternal {
  constexpr CMsgGCToGCDirtySDOCacheDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCToGCDirtySDOCacheDefaultTypeInternal() {}
  union {
    CMsgGCToGCDirtySDOCache _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCToGCDirtySDOCacheDefaultTypeInternal _CMsgGCToGCDirtySDOCache_default_instance_;
constexpr CMsgGCToGCDirtyMultipleSDOCache::CMsgGCToGCDirtyMultipleSDOCache(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_uint64_()
  , sdo_type_(0u){}
struct CMsgGCToGCDirtyMultipleSDOCacheDefaultTypeInternal {
  constexpr CMsgGCToGCDirtyMultipleSDOCacheDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCToGCDirtyMultipleSDOCacheDefaultTypeInternal() {}
  union {
    CMsgGCToGCDirtyMultipleSDOCache _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCToGCDirtyMultipleSDOCacheDefaultTypeInternal _CMsgGCToGCDirtyMultipleSDOCache_default_instance_;
constexpr CMsgGCCollectItem::CMsgGCCollectItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : collection_item_id_(uint64_t{0u})
  , subject_item_id_(uint64_t{0u}){}
struct CMsgGCCollectItemDefaultTypeInternal {
  constexpr CMsgGCCollectItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCCollectItemDefaultTypeInternal() {}
  union {
    CMsgGCCollectItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCCollectItemDefaultTypeInternal _CMsgGCCollectItem_default_instance_;
constexpr CMsgSDONoMemcached::CMsgSDONoMemcached(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CMsgSDONoMemcachedDefaultTypeInternal {
  constexpr CMsgSDONoMemcachedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSDONoMemcachedDefaultTypeInternal() {}
  union {
    CMsgSDONoMemcached _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSDONoMemcachedDefaultTypeInternal _CMsgSDONoMemcached_default_instance_;
constexpr CMsgGCToGCUpdateSQLKeyValue::CMsgGCToGCUpdateSQLKeyValue(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CMsgGCToGCUpdateSQLKeyValueDefaultTypeInternal {
  constexpr CMsgGCToGCUpdateSQLKeyValueDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCToGCUpdateSQLKeyValueDefaultTypeInternal() {}
  union {
    CMsgGCToGCUpdateSQLKeyValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCToGCUpdateSQLKeyValueDefaultTypeInternal _CMsgGCToGCUpdateSQLKeyValue_default_instance_;
constexpr CMsgGCToGCIsTrustedServer::CMsgGCToGCIsTrustedServer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steam_id_(uint64_t{0u}){}
struct CMsgGCToGCIsTrustedServerDefaultTypeInternal {
  constexpr CMsgGCToGCIsTrustedServerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCToGCIsTrustedServerDefaultTypeInternal() {}
  union {
    CMsgGCToGCIsTrustedServer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCToGCIsTrustedServerDefaultTypeInternal _CMsgGCToGCIsTrustedServer_default_instance_;
constexpr CMsgGCToGCIsTrustedServerResponse::CMsgGCToGCIsTrustedServerResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : is_trusted_(false){}
struct CMsgGCToGCIsTrustedServerResponseDefaultTypeInternal {
  constexpr CMsgGCToGCIsTrustedServerResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCToGCIsTrustedServerResponseDefaultTypeInternal() {}
  union {
    CMsgGCToGCIsTrustedServerResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCToGCIsTrustedServerResponseDefaultTypeInternal _CMsgGCToGCIsTrustedServerResponse_default_instance_;
constexpr CMsgGCToGCBroadcastConsoleCommand::CMsgGCToGCBroadcastConsoleCommand(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : con_command_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CMsgGCToGCBroadcastConsoleCommandDefaultTypeInternal {
  constexpr CMsgGCToGCBroadcastConsoleCommandDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCToGCBroadcastConsoleCommandDefaultTypeInternal() {}
  union {
    CMsgGCToGCBroadcastConsoleCommand _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCToGCBroadcastConsoleCommandDefaultTypeInternal _CMsgGCToGCBroadcastConsoleCommand_default_instance_;
constexpr CMsgGCServerVersionUpdated::CMsgGCServerVersionUpdated(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : server_version_(0u){}
struct CMsgGCServerVersionUpdatedDefaultTypeInternal {
  constexpr CMsgGCServerVersionUpdatedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCServerVersionUpdatedDefaultTypeInternal() {}
  union {
    CMsgGCServerVersionUpdated _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCServerVersionUpdatedDefaultTypeInternal _CMsgGCServerVersionUpdated_default_instance_;
constexpr CMsgGCClientVersionUpdated::CMsgGCClientVersionUpdated(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : client_version_(0u){}
struct CMsgGCClientVersionUpdatedDefaultTypeInternal {
  constexpr CMsgGCClientVersionUpdatedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCClientVersionUpdatedDefaultTypeInternal() {}
  union {
    CMsgGCClientVersionUpdated _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCClientVersionUpdatedDefaultTypeInternal _CMsgGCClientVersionUpdated_default_instance_;
constexpr CMsgGCToGCWebAPIAccountChanged::CMsgGCToGCWebAPIAccountChanged(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CMsgGCToGCWebAPIAccountChangedDefaultTypeInternal {
  constexpr CMsgGCToGCWebAPIAccountChangedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCToGCWebAPIAccountChangedDefaultTypeInternal() {}
  union {
    CMsgGCToGCWebAPIAccountChanged _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCToGCWebAPIAccountChangedDefaultTypeInternal _CMsgGCToGCWebAPIAccountChanged_default_instance_;
constexpr CMsgGCToGCRequestPassportItemGrant::CMsgGCToGCRequestPassportItemGrant(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steam_id_(uint64_t{0u})
  , league_id_(0u)
  , reward_flag_(0){}
struct CMsgGCToGCRequestPassportItemGrantDefaultTypeInternal {
  constexpr CMsgGCToGCRequestPassportItemGrantDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCToGCRequestPassportItemGrantDefaultTypeInternal() {}
  union {
    CMsgGCToGCRequestPassportItemGrant _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCToGCRequestPassportItemGrantDefaultTypeInternal _CMsgGCToGCRequestPassportItemGrant_default_instance_;
constexpr CMsgGameServerInfo::CMsgGameServerInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : server_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , server_public_ip_addr_(0u)
  , server_private_ip_addr_(0u)
  , server_port_(0u)
  , server_tv_port_(0u)
  , server_hibernation_(false)
  , server_type_(0)

  , server_region_(0u)
  , server_loadavg_(0)
  , server_tv_broadcast_time_(0)
  , server_game_time_(0)
  , server_relay_connected_steam_id_(uint64_t{0u})
  , relay_slots_max_(0u)
  , relays_connected_(0)
  , relayed_game_server_steam_id_(uint64_t{0u})
  , relay_clients_connected_(0)
  , parent_relay_count_(0u)
  , tv_secret_code_(uint64_t{0u}){}
struct CMsgGameServerInfoDefaultTypeInternal {
  constexpr CMsgGameServerInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGameServerInfoDefaultTypeInternal() {}
  union {
    CMsgGameServerInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGameServerInfoDefaultTypeInternal _CMsgGameServerInfo_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_base_5fgcmessages_2eproto[78];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_base_5fgcmessages_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_base_5fgcmessages_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_base_5fgcmessages_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CGCStorePurchaseInit_LineItem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGCStorePurchaseInit_LineItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CGCStorePurchaseInit_LineItem, item_def_id_),
  PROTOBUF_FIELD_OFFSET(::CGCStorePurchaseInit_LineItem, quantity_),
  PROTOBUF_FIELD_OFFSET(::CGCStorePurchaseInit_LineItem, cost_in_local_currency_),
  PROTOBUF_FIELD_OFFSET(::CGCStorePurchaseInit_LineItem, purchase_type_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgGCStorePurchaseInit, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCStorePurchaseInit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCStorePurchaseInit, country_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCStorePurchaseInit, language_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCStorePurchaseInit, currency_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCStorePurchaseInit, line_items_),
  0,
  1,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgGCStorePurchaseInitResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCStorePurchaseInitResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCStorePurchaseInitResponse, result_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCStorePurchaseInitResponse, txn_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCStorePurchaseInitResponse, url_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCStorePurchaseInitResponse, item_ids_),
  2,
  1,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CSOPartyInvite, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSOPartyInvite, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CSOPartyInvite, group_id_),
  PROTOBUF_FIELD_OFFSET(::CSOPartyInvite, sender_id_),
  PROTOBUF_FIELD_OFFSET(::CSOPartyInvite, sender_name_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::CSOLobbyInvite, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSOLobbyInvite, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CSOLobbyInvite, group_id_),
  PROTOBUF_FIELD_OFFSET(::CSOLobbyInvite, sender_id_),
  PROTOBUF_FIELD_OFFSET(::CSOLobbyInvite, sender_name_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgSystemBroadcast, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSystemBroadcast, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgSystemBroadcast, message_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgInviteToParty, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgInviteToParty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgInviteToParty, steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgInviteToParty, client_version_),
  PROTOBUF_FIELD_OFFSET(::CMsgInviteToParty, team_invite_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgInvitationCreated, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgInvitationCreated, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgInvitationCreated, group_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgInvitationCreated, steam_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgPartyInviteResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgPartyInviteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgPartyInviteResponse, party_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgPartyInviteResponse, accept_),
  PROTOBUF_FIELD_OFFSET(::CMsgPartyInviteResponse, client_version_),
  PROTOBUF_FIELD_OFFSET(::CMsgPartyInviteResponse, team_invite_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgKickFromParty, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgKickFromParty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgKickFromParty, steam_id_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgLeaveParty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgServerAvailable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgLANServerAvailable, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgLANServerAvailable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgLANServerAvailable, lobby_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CSOEconGameAccountClient, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSOEconGameAccountClient, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CSOEconGameAccountClient, additional_backpack_slots_),
  PROTOBUF_FIELD_OFFSET(::CSOEconGameAccountClient, bonus_xp_timestamp_refresh_),
  PROTOBUF_FIELD_OFFSET(::CSOEconGameAccountClient, bonus_xp_usedflags_),
  PROTOBUF_FIELD_OFFSET(::CSOEconGameAccountClient, elevated_state_),
  PROTOBUF_FIELD_OFFSET(::CSOEconGameAccountClient, elevated_timestamp_),
  1,
  2,
  3,
  4,
  0,
  PROTOBUF_FIELD_OFFSET(::CSOItemCriteriaCondition, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSOItemCriteriaCondition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CSOItemCriteriaCondition, op_),
  PROTOBUF_FIELD_OFFSET(::CSOItemCriteriaCondition, field_),
  PROTOBUF_FIELD_OFFSET(::CSOItemCriteriaCondition, required_),
  PROTOBUF_FIELD_OFFSET(::CSOItemCriteriaCondition, float_value_),
  PROTOBUF_FIELD_OFFSET(::CSOItemCriteriaCondition, string_value_),
  2,
  0,
  3,
  4,
  1,
  PROTOBUF_FIELD_OFFSET(::CSOItemCriteria, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSOItemCriteria, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CSOItemCriteria, item_level_),
  PROTOBUF_FIELD_OFFSET(::CSOItemCriteria, item_quality_),
  PROTOBUF_FIELD_OFFSET(::CSOItemCriteria, item_level_set_),
  PROTOBUF_FIELD_OFFSET(::CSOItemCriteria, item_quality_set_),
  PROTOBUF_FIELD_OFFSET(::CSOItemCriteria, initial_inventory_),
  PROTOBUF_FIELD_OFFSET(::CSOItemCriteria, initial_quantity_),
  PROTOBUF_FIELD_OFFSET(::CSOItemCriteria, ignore_enabled_flag_),
  PROTOBUF_FIELD_OFFSET(::CSOItemCriteria, conditions_),
  PROTOBUF_FIELD_OFFSET(::CSOItemCriteria, item_rarity_),
  PROTOBUF_FIELD_OFFSET(::CSOItemCriteria, item_rarity_set_),
  PROTOBUF_FIELD_OFFSET(::CSOItemCriteria, recent_only_),
  0,
  1,
  4,
  5,
  2,
  3,
  6,
  ~0u,
  8,
  7,
  9,
  PROTOBUF_FIELD_OFFSET(::CSOItemRecipe, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSOItemRecipe, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CSOItemRecipe, def_index_),
  PROTOBUF_FIELD_OFFSET(::CSOItemRecipe, name_),
  PROTOBUF_FIELD_OFFSET(::CSOItemRecipe, n_a_),
  PROTOBUF_FIELD_OFFSET(::CSOItemRecipe, desc_inputs_),
  PROTOBUF_FIELD_OFFSET(::CSOItemRecipe, desc_outputs_),
  PROTOBUF_FIELD_OFFSET(::CSOItemRecipe, di_a_),
  PROTOBUF_FIELD_OFFSET(::CSOItemRecipe, di_b_),
  PROTOBUF_FIELD_OFFSET(::CSOItemRecipe, di_c_),
  PROTOBUF_FIELD_OFFSET(::CSOItemRecipe, do_a_),
  PROTOBUF_FIELD_OFFSET(::CSOItemRecipe, do_b_),
  PROTOBUF_FIELD_OFFSET(::CSOItemRecipe, do_c_),
  PROTOBUF_FIELD_OFFSET(::CSOItemRecipe, requires_all_same_class_),
  PROTOBUF_FIELD_OFFSET(::CSOItemRecipe, requires_all_same_slot_),
  PROTOBUF_FIELD_OFFSET(::CSOItemRecipe, class_usage_for_output_),
  PROTOBUF_FIELD_OFFSET(::CSOItemRecipe, slot_usage_for_output_),
  PROTOBUF_FIELD_OFFSET(::CSOItemRecipe, set_for_output_),
  PROTOBUF_FIELD_OFFSET(::CSOItemRecipe, input_items_criteria_),
  PROTOBUF_FIELD_OFFSET(::CSOItemRecipe, output_items_criteria_),
  PROTOBUF_FIELD_OFFSET(::CSOItemRecipe, input_item_dupe_counts_),
  10,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  11,
  12,
  13,
  14,
  15,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgDevNewItemRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDevNewItemRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDevNewItemRequest, receiver_),
  PROTOBUF_FIELD_OFFSET(::CMsgDevNewItemRequest, criteria_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgIncrementKillCountAttribute, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgIncrementKillCountAttribute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgIncrementKillCountAttribute, killer_account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgIncrementKillCountAttribute, victim_account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgIncrementKillCountAttribute, item_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgIncrementKillCountAttribute, event_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgIncrementKillCountAttribute, amount_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgApplySticker, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgApplySticker, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgApplySticker, sticker_item_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgApplySticker, item_item_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgApplySticker, sticker_slot_),
  PROTOBUF_FIELD_OFFSET(::CMsgApplySticker, baseitem_defidx_),
  PROTOBUF_FIELD_OFFSET(::CMsgApplySticker, sticker_wear_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgApplyStatTrakSwap, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgApplyStatTrakSwap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgApplyStatTrakSwap, tool_item_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgApplyStatTrakSwap, item_1_item_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgApplyStatTrakSwap, item_2_item_id_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgApplyStrangePart, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgApplyStrangePart, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgApplyStrangePart, strange_part_item_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgApplyStrangePart, item_item_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgApplyPennantUpgrade, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgApplyPennantUpgrade, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgApplyPennantUpgrade, upgrade_item_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgApplyPennantUpgrade, pennant_item_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgApplyEggEssence, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgApplyEggEssence, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgApplyEggEssence, essence_item_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgApplyEggEssence, egg_item_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CSOEconItemAttribute, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItemAttribute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CSOEconItemAttribute, def_index_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItemAttribute, value_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItemAttribute, value_bytes_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::CSOEconItemEquipped, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItemEquipped, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CSOEconItemEquipped, new_class_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItemEquipped, new_slot_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CSOEconItem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CSOEconItem, id_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItem, account_id_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItem, inventory_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItem, def_index_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItem, quantity_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItem, level_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItem, quality_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItem, flags_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItem, origin_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItem, custom_name_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItem, custom_desc_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItem, attribute_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItem, interior_item_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItem, in_use_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItem, style_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItem, original_id_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItem, equipped_state_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItem, rarity_),
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  0,
  1,
  ~0u,
  2,
  12,
  13,
  14,
  ~0u,
  15,
  PROTOBUF_FIELD_OFFSET(::CMsgAdjustItemEquippedState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgAdjustItemEquippedState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgAdjustItemEquippedState, item_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgAdjustItemEquippedState, new_class_),
  PROTOBUF_FIELD_OFFSET(::CMsgAdjustItemEquippedState, new_slot_),
  PROTOBUF_FIELD_OFFSET(::CMsgAdjustItemEquippedState, swap_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgSortItems, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSortItems, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgSortItems, sort_type_),
  0,
  PROTOBUF_FIELD_OFFSET(::CSOEconClaimCode, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSOEconClaimCode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CSOEconClaimCode, account_id_),
  PROTOBUF_FIELD_OFFSET(::CSOEconClaimCode, code_type_),
  PROTOBUF_FIELD_OFFSET(::CSOEconClaimCode, time_acquired_),
  PROTOBUF_FIELD_OFFSET(::CSOEconClaimCode, code_),
  1,
  2,
  3,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgStoreGetUserData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgStoreGetUserData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgStoreGetUserData, price_sheet_version_),
  PROTOBUF_FIELD_OFFSET(::CMsgStoreGetUserData, currency_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgStoreGetUserDataResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgStoreGetUserDataResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgStoreGetUserDataResponse, result_),
  PROTOBUF_FIELD_OFFSET(::CMsgStoreGetUserDataResponse, currency_deprecated_),
  PROTOBUF_FIELD_OFFSET(::CMsgStoreGetUserDataResponse, country_deprecated_),
  PROTOBUF_FIELD_OFFSET(::CMsgStoreGetUserDataResponse, price_sheet_version_),
  PROTOBUF_FIELD_OFFSET(::CMsgStoreGetUserDataResponse, price_sheet_),
  2,
  3,
  0,
  4,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgUpdateItemSchema, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgUpdateItemSchema, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgUpdateItemSchema, items_game_),
  PROTOBUF_FIELD_OFFSET(::CMsgUpdateItemSchema, item_schema_version_),
  PROTOBUF_FIELD_OFFSET(::CMsgUpdateItemSchema, items_game_url_deprecated2013_),
  PROTOBUF_FIELD_OFFSET(::CMsgUpdateItemSchema, items_game_url_),
  0,
  3,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgGCError, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCError, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCError, error_text_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgRequestInventoryRefresh, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgConVarValue, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgConVarValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgConVarValue, name_),
  PROTOBUF_FIELD_OFFSET(::CMsgConVarValue, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgReplicateConVars, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgReplicateConVars, convars_),
  PROTOBUF_FIELD_OFFSET(::CMsgUseItem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgUseItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgUseItem, item_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgUseItem, target_steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgUseItem, gift__potential_targets_),
  PROTOBUF_FIELD_OFFSET(::CMsgUseItem, duel__class_lock_),
  PROTOBUF_FIELD_OFFSET(::CMsgUseItem, initiator_steam_id_),
  0,
  1,
  ~0u,
  3,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgReplayUploadedToYouTube, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgReplayUploadedToYouTube, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgReplayUploadedToYouTube, youtube_url_),
  PROTOBUF_FIELD_OFFSET(::CMsgReplayUploadedToYouTube, youtube_account_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgReplayUploadedToYouTube, session_id_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgConsumableExhausted, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgConsumableExhausted, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgConsumableExhausted, item_def_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgItemAcknowledged__DEPRECATED, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgItemAcknowledged__DEPRECATED, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgItemAcknowledged__DEPRECATED, account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgItemAcknowledged__DEPRECATED, inventory_),
  PROTOBUF_FIELD_OFFSET(::CMsgItemAcknowledged__DEPRECATED, def_index_),
  PROTOBUF_FIELD_OFFSET(::CMsgItemAcknowledged__DEPRECATED, quality_),
  PROTOBUF_FIELD_OFFSET(::CMsgItemAcknowledged__DEPRECATED, rarity_),
  PROTOBUF_FIELD_OFFSET(::CMsgItemAcknowledged__DEPRECATED, origin_),
  PROTOBUF_FIELD_OFFSET(::CMsgItemAcknowledged__DEPRECATED, item_id_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::CMsgSetItemPositions_ItemPosition, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSetItemPositions_ItemPosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgSetItemPositions_ItemPosition, legacy_item_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSetItemPositions_ItemPosition, position_),
  PROTOBUF_FIELD_OFFSET(::CMsgSetItemPositions_ItemPosition, item_id_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgSetItemPositions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgSetItemPositions, item_positions_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCReportAbuse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCReportAbuse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCReportAbuse, target_steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCReportAbuse, description_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCReportAbuse, gid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCReportAbuse, abuse_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCReportAbuse, content_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCReportAbuse, target_game_server_ip_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCReportAbuse, target_game_server_port_),
  1,
  0,
  4,
  2,
  3,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::CMsgGCReportAbuseResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCReportAbuseResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCReportAbuseResponse, target_steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCReportAbuseResponse, result_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCReportAbuseResponse, error_message_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCNameItemNotification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCNameItemNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCNameItemNotification, player_steamid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCNameItemNotification, item_def_index_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCNameItemNotification, item_name_custom_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCClientDisplayNotification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCClientDisplayNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCClientDisplayNotification, notification_title_localization_key_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCClientDisplayNotification, notification_body_localization_key_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCClientDisplayNotification, body_substring_keys_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCClientDisplayNotification, body_substring_values_),
  0,
  1,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgGCShowItemsPickedUp, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCShowItemsPickedUp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCShowItemsPickedUp, player_steamid_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCIncrementKillCountResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCIncrementKillCountResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCIncrementKillCountResponse, killer_account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCIncrementKillCountResponse, num_kills_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCIncrementKillCountResponse, item_def_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCIncrementKillCountResponse, level_type_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CSOEconItemDropRateBonus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItemDropRateBonus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CSOEconItemDropRateBonus, account_id_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItemDropRateBonus, expiration_date_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItemDropRateBonus, bonus_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItemDropRateBonus, bonus_count_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItemDropRateBonus, item_id_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItemDropRateBonus, def_index_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::CSOEconItemLeagueViewPass, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItemLeagueViewPass, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CSOEconItemLeagueViewPass, account_id_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItemLeagueViewPass, league_id_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItemLeagueViewPass, admin_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItemLeagueViewPass, itemindex_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CSOEconItemEventTicket, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItemEventTicket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CSOEconItemEventTicket, account_id_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItemEventTicket, event_id_),
  PROTOBUF_FIELD_OFFSET(::CSOEconItemEventTicket, item_id_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgGCItemPreviewItemBoughtNotification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCItemPreviewItemBoughtNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCItemPreviewItemBoughtNotification, item_def_index_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCStorePurchaseCancel, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCStorePurchaseCancel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCStorePurchaseCancel, txn_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCStorePurchaseCancelResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCStorePurchaseCancelResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCStorePurchaseCancelResponse, result_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCStorePurchaseFinalize, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCStorePurchaseFinalize, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCStorePurchaseFinalize, txn_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCStorePurchaseFinalizeResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCStorePurchaseFinalizeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCStorePurchaseFinalizeResponse, result_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCStorePurchaseFinalizeResponse, item_ids_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgGCBannedWordListRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCBannedWordListRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCBannedWordListRequest, ban_list_group_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCBannedWordListRequest, word_id_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgGCRequestAnnouncements, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCRequestAnnouncementsResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCRequestAnnouncementsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCRequestAnnouncementsResponse, announcement_title_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCRequestAnnouncementsResponse, announcement_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCRequestAnnouncementsResponse, nextmatch_title_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCRequestAnnouncementsResponse, nextmatch_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgGCBannedWord, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCBannedWord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCBannedWord, word_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCBannedWord, word_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCBannedWord, word_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCBannedWordListResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCBannedWordListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCBannedWordListResponse, ban_list_group_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCBannedWordListResponse, word_list_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCBannedWordListBroadcast, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCBannedWordListBroadcast, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCBannedWordListBroadcast, broadcast_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCBannedWordListUpdated, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCBannedWordListUpdated, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCBannedWordListUpdated, group_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CSOEconDefaultEquippedDefinitionInstanceClient, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSOEconDefaultEquippedDefinitionInstanceClient, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CSOEconDefaultEquippedDefinitionInstanceClient, account_id_),
  PROTOBUF_FIELD_OFFSET(::CSOEconDefaultEquippedDefinitionInstanceClient, item_definition_),
  PROTOBUF_FIELD_OFFSET(::CSOEconDefaultEquippedDefinitionInstanceClient, class_id_),
  PROTOBUF_FIELD_OFFSET(::CSOEconDefaultEquippedDefinitionInstanceClient, slot_id_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCDirtySDOCache, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCDirtySDOCache, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCDirtySDOCache, sdo_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCDirtySDOCache, key_uint64_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCDirtyMultipleSDOCache, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCDirtyMultipleSDOCache, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCDirtyMultipleSDOCache, sdo_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCDirtyMultipleSDOCache, key_uint64_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCollectItem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCollectItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCollectItem, collection_item_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCollectItem, subject_item_id_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgSDONoMemcached, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCUpdateSQLKeyValue, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCUpdateSQLKeyValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCUpdateSQLKeyValue, key_name_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCIsTrustedServer, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCIsTrustedServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCIsTrustedServer, steam_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCIsTrustedServerResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCIsTrustedServerResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCIsTrustedServerResponse, is_trusted_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCBroadcastConsoleCommand, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCBroadcastConsoleCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCBroadcastConsoleCommand, con_command_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCServerVersionUpdated, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCServerVersionUpdated, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCServerVersionUpdated, server_version_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCClientVersionUpdated, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCClientVersionUpdated, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCClientVersionUpdated, client_version_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCWebAPIAccountChanged, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCRequestPassportItemGrant, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCRequestPassportItemGrant, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCRequestPassportItemGrant, steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCRequestPassportItemGrant, league_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCRequestPassportItemGrant, reward_flag_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerInfo, server_public_ip_addr_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerInfo, server_private_ip_addr_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerInfo, server_port_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerInfo, server_tv_port_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerInfo, server_key_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerInfo, server_hibernation_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerInfo, server_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerInfo, server_region_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerInfo, server_loadavg_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerInfo, server_tv_broadcast_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerInfo, server_game_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerInfo, server_relay_connected_steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerInfo, relay_slots_max_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerInfo, relays_connected_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerInfo, relay_clients_connected_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerInfo, relayed_game_server_steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerInfo, parent_relay_count_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerInfo, tv_secret_code_),
  1,
  2,
  3,
  4,
  0,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  15,
  14,
  16,
  17,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, -1, sizeof(::CGCStorePurchaseInit_LineItem)},
  { 14, 24, -1, sizeof(::CMsgGCStorePurchaseInit)},
  { 28, 38, -1, sizeof(::CMsgGCStorePurchaseInitResponse)},
  { 42, 51, -1, sizeof(::CSOPartyInvite)},
  { 54, 63, -1, sizeof(::CSOLobbyInvite)},
  { 66, 73, -1, sizeof(::CMsgSystemBroadcast)},
  { 74, 83, -1, sizeof(::CMsgInviteToParty)},
  { 86, 94, -1, sizeof(::CMsgInvitationCreated)},
  { 96, 106, -1, sizeof(::CMsgPartyInviteResponse)},
  { 110, 117, -1, sizeof(::CMsgKickFromParty)},
  { 118, -1, -1, sizeof(::CMsgLeaveParty)},
  { 124, -1, -1, sizeof(::CMsgServerAvailable)},
  { 130, 137, -1, sizeof(::CMsgLANServerAvailable)},
  { 138, 149, -1, sizeof(::CSOEconGameAccountClient)},
  { 154, 165, -1, sizeof(::CSOItemCriteriaCondition)},
  { 170, 187, -1, sizeof(::CSOItemCriteria)},
  { 198, 223, -1, sizeof(::CSOItemRecipe)},
  { 242, 250, -1, sizeof(::CMsgDevNewItemRequest)},
  { 252, 263, -1, sizeof(::CMsgIncrementKillCountAttribute)},
  { 268, 279, -1, sizeof(::CMsgApplySticker)},
  { 284, 293, -1, sizeof(::CMsgApplyStatTrakSwap)},
  { 296, 304, -1, sizeof(::CMsgApplyStrangePart)},
  { 306, 314, -1, sizeof(::CMsgApplyPennantUpgrade)},
  { 316, 324, -1, sizeof(::CMsgApplyEggEssence)},
  { 326, 335, -1, sizeof(::CSOEconItemAttribute)},
  { 338, 346, -1, sizeof(::CSOEconItemEquipped)},
  { 348, 372, -1, sizeof(::CSOEconItem)},
  { 390, 400, -1, sizeof(::CMsgAdjustItemEquippedState)},
  { 404, 411, -1, sizeof(::CMsgSortItems)},
  { 412, 422, -1, sizeof(::CSOEconClaimCode)},
  { 426, 434, -1, sizeof(::CMsgStoreGetUserData)},
  { 436, 447, -1, sizeof(::CMsgStoreGetUserDataResponse)},
  { 452, 462, -1, sizeof(::CMsgUpdateItemSchema)},
  { 466, 473, -1, sizeof(::CMsgGCError)},
  { 474, -1, -1, sizeof(::CMsgRequestInventoryRefresh)},
  { 480, 488, -1, sizeof(::CMsgConVarValue)},
  { 490, -1, -1, sizeof(::CMsgReplicateConVars)},
  { 497, 508, -1, sizeof(::CMsgUseItem)},
  { 513, 522, -1, sizeof(::CMsgReplayUploadedToYouTube)},
  { 525, 532, -1, sizeof(::CMsgConsumableExhausted)},
  { 533, 546, -1, sizeof(::CMsgItemAcknowledged__DEPRECATED)},
  { 553, 562, -1, sizeof(::CMsgSetItemPositions_ItemPosition)},
  { 565, -1, -1, sizeof(::CMsgSetItemPositions)},
  { 572, 585, -1, sizeof(::CMsgGCReportAbuse)},
  { 592, 601, -1, sizeof(::CMsgGCReportAbuseResponse)},
  { 604, 613, -1, sizeof(::CMsgGCNameItemNotification)},
  { 616, 626, -1, sizeof(::CMsgGCClientDisplayNotification)},
  { 630, 637, -1, sizeof(::CMsgGCShowItemsPickedUp)},
  { 638, 648, -1, sizeof(::CMsgGCIncrementKillCountResponse)},
  { 652, 664, -1, sizeof(::CSOEconItemDropRateBonus)},
  { 670, 680, -1, sizeof(::CSOEconItemLeagueViewPass)},
  { 684, 693, -1, sizeof(::CSOEconItemEventTicket)},
  { 696, 703, -1, sizeof(::CMsgGCItemPreviewItemBoughtNotification)},
  { 704, 711, -1, sizeof(::CMsgGCStorePurchaseCancel)},
  { 712, 719, -1, sizeof(::CMsgGCStorePurchaseCancelResponse)},
  { 720, 727, -1, sizeof(::CMsgGCStorePurchaseFinalize)},
  { 728, 736, -1, sizeof(::CMsgGCStorePurchaseFinalizeResponse)},
  { 738, 746, -1, sizeof(::CMsgGCBannedWordListRequest)},
  { 748, -1, -1, sizeof(::CMsgGCRequestAnnouncements)},
  { 754, 764, -1, sizeof(::CMsgGCRequestAnnouncementsResponse)},
  { 768, 777, -1, sizeof(::CMsgGCBannedWord)},
  { 780, 788, -1, sizeof(::CMsgGCBannedWordListResponse)},
  { 790, 797, -1, sizeof(::CMsgGCToGCBannedWordListBroadcast)},
  { 798, 805, -1, sizeof(::CMsgGCToGCBannedWordListUpdated)},
  { 806, 816, -1, sizeof(::CSOEconDefaultEquippedDefinitionInstanceClient)},
  { 820, 828, -1, sizeof(::CMsgGCToGCDirtySDOCache)},
  { 830, 838, -1, sizeof(::CMsgGCToGCDirtyMultipleSDOCache)},
  { 840, 848, -1, sizeof(::CMsgGCCollectItem)},
  { 850, -1, -1, sizeof(::CMsgSDONoMemcached)},
  { 856, 863, -1, sizeof(::CMsgGCToGCUpdateSQLKeyValue)},
  { 864, 871, -1, sizeof(::CMsgGCToGCIsTrustedServer)},
  { 872, 879, -1, sizeof(::CMsgGCToGCIsTrustedServerResponse)},
  { 880, 887, -1, sizeof(::CMsgGCToGCBroadcastConsoleCommand)},
  { 888, 895, -1, sizeof(::CMsgGCServerVersionUpdated)},
  { 896, 903, -1, sizeof(::CMsgGCClientVersionUpdated)},
  { 904, -1, -1, sizeof(::CMsgGCToGCWebAPIAccountChanged)},
  { 910, 919, -1, sizeof(::CMsgGCToGCRequestPassportItemGrant)},
  { 922, 946, -1, sizeof(::CMsgGameServerInfo)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGCStorePurchaseInit_LineItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCStorePurchaseInit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCStorePurchaseInitResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSOPartyInvite_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSOLobbyInvite_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSystemBroadcast_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgInviteToParty_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgInvitationCreated_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgPartyInviteResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgKickFromParty_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgLeaveParty_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgServerAvailable_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgLANServerAvailable_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSOEconGameAccountClient_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSOItemCriteriaCondition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSOItemCriteria_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSOItemRecipe_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDevNewItemRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgIncrementKillCountAttribute_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgApplySticker_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgApplyStatTrakSwap_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgApplyStrangePart_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgApplyPennantUpgrade_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgApplyEggEssence_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSOEconItemAttribute_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSOEconItemEquipped_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSOEconItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgAdjustItemEquippedState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSortItems_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSOEconClaimCode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgStoreGetUserData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgStoreGetUserDataResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgUpdateItemSchema_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCError_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgRequestInventoryRefresh_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgConVarValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgReplicateConVars_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgUseItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgReplayUploadedToYouTube_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgConsumableExhausted_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgItemAcknowledged__DEPRECATED_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSetItemPositions_ItemPosition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSetItemPositions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCReportAbuse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCReportAbuseResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCNameItemNotification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCClientDisplayNotification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCShowItemsPickedUp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCIncrementKillCountResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSOEconItemDropRateBonus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSOEconItemLeagueViewPass_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSOEconItemEventTicket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCItemPreviewItemBoughtNotification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCStorePurchaseCancel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCStorePurchaseCancelResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCStorePurchaseFinalize_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCStorePurchaseFinalizeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCBannedWordListRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCRequestAnnouncements_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCRequestAnnouncementsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCBannedWord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCBannedWordListResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCToGCBannedWordListBroadcast_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCToGCBannedWordListUpdated_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSOEconDefaultEquippedDefinitionInstanceClient_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCToGCDirtySDOCache_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCToGCDirtyMultipleSDOCache_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCCollectItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSDONoMemcached_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCToGCUpdateSQLKeyValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCToGCIsTrustedServer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCToGCIsTrustedServerResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCToGCBroadcastConsoleCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCServerVersionUpdated_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCClientVersionUpdated_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCToGCWebAPIAccountChanged_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCToGCRequestPassportItemGrant_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGameServerInfo_default_instance_),
};

const char descriptor_table_protodef_base_5fgcmessages_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025base_gcmessages.proto\032\023steammessages.p"
  "roto\"}\n\035CGCStorePurchaseInit_LineItem\022\023\n"
  "\013item_def_id\030\001 \001(\r\022\020\n\010quantity\030\002 \001(\r\022\036\n\026"
  "cost_in_local_currency\030\003 \001(\r\022\025\n\rpurchase"
  "_type\030\004 \001(\r\"\202\001\n\027CMsgGCStorePurchaseInit\022"
  "\017\n\007country\030\001 \001(\t\022\020\n\010language\030\002 \001(\005\022\020\n\010cu"
  "rrency\030\003 \001(\005\0222\n\nline_items\030\004 \003(\0132\036.CGCSt"
  "orePurchaseInit_LineItem\"`\n\037CMsgGCStoreP"
  "urchaseInitResponse\022\016\n\006result\030\001 \001(\005\022\016\n\006t"
  "xn_id\030\002 \001(\004\022\013\n\003url\030\003 \001(\t\022\020\n\010item_ids\030\004 \003"
  "(\004\"P\n\016CSOPartyInvite\022\026\n\010group_id\030\001 \001(\004B\004"
  "\200\246\035\001\022\021\n\tsender_id\030\002 \001(\006\022\023\n\013sender_name\030\003"
  " \001(\t\"P\n\016CSOLobbyInvite\022\026\n\010group_id\030\001 \001(\004"
  "B\004\200\246\035\001\022\021\n\tsender_id\030\002 \001(\006\022\023\n\013sender_name"
  "\030\003 \001(\t\"&\n\023CMsgSystemBroadcast\022\017\n\007message"
  "\030\001 \001(\t\"R\n\021CMsgInviteToParty\022\020\n\010steam_id\030"
  "\001 \001(\006\022\026\n\016client_version\030\002 \001(\r\022\023\n\013team_in"
  "vite\030\003 \001(\r\";\n\025CMsgInvitationCreated\022\020\n\010g"
  "roup_id\030\001 \001(\004\022\020\n\010steam_id\030\002 \001(\006\"h\n\027CMsgP"
  "artyInviteResponse\022\020\n\010party_id\030\001 \001(\004\022\016\n\006"
  "accept\030\002 \001(\010\022\026\n\016client_version\030\003 \001(\r\022\023\n\013"
  "team_invite\030\004 \001(\r\"%\n\021CMsgKickFromParty\022\020"
  "\n\010steam_id\030\001 \001(\006\"\020\n\016CMsgLeaveParty\"\025\n\023CM"
  "sgServerAvailable\"*\n\026CMsgLANServerAvaila"
  "ble\022\020\n\010lobby_id\030\001 \001(\006\"\264\001\n\030CSOEconGameAcc"
  "ountClient\022$\n\031additional_backpack_slots\030"
  "\001 \001(\r:\0010\022\"\n\032bonus_xp_timestamp_refresh\030\014"
  " \001(\007\022\032\n\022bonus_xp_usedflags\030\r \001(\r\022\026\n\016elev"
  "ated_state\030\016 \001(\r\022\032\n\022elevated_timestamp\030\017"
  " \001(\r\"r\n\030CSOItemCriteriaCondition\022\n\n\002op\030\001"
  " \001(\005\022\r\n\005field\030\002 \001(\t\022\020\n\010required\030\003 \001(\010\022\023\n"
  "\013float_value\030\004 \001(\002\022\024\n\014string_value\030\005 \001(\t"
  "\"\261\002\n\017CSOItemCriteria\022\022\n\nitem_level\030\001 \001(\r"
  "\022\024\n\014item_quality\030\002 \001(\005\022\026\n\016item_level_set"
  "\030\003 \001(\010\022\030\n\020item_quality_set\030\004 \001(\010\022\031\n\021init"
  "ial_inventory\030\005 \001(\r\022\030\n\020initial_quantity\030"
  "\006 \001(\r\022\033\n\023ignore_enabled_flag\030\010 \001(\010\022-\n\nco"
  "nditions\030\t \003(\0132\031.CSOItemCriteriaConditio"
  "n\022\023\n\013item_rarity\030\n \001(\005\022\027\n\017item_rarity_se"
  "t\030\013 \001(\010\022\023\n\013recent_only\030\014 \001(\010\"\325\003\n\rCSOItem"
  "Recipe\022\021\n\tdef_index\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\022"
  "\013\n\003n_a\030\003 \001(\t\022\023\n\013desc_inputs\030\004 \001(\t\022\024\n\014des"
  "c_outputs\030\005 \001(\t\022\014\n\004di_a\030\006 \001(\t\022\014\n\004di_b\030\007 "
  "\001(\t\022\014\n\004di_c\030\010 \001(\t\022\014\n\004do_a\030\t \001(\t\022\014\n\004do_b\030"
  "\n \001(\t\022\014\n\004do_c\030\013 \001(\t\022\037\n\027requires_all_same"
  "_class\030\014 \001(\010\022\036\n\026requires_all_same_slot\030\r"
  " \001(\010\022\036\n\026class_usage_for_output\030\016 \001(\005\022\035\n\025"
  "slot_usage_for_output\030\017 \001(\005\022\026\n\016set_for_o"
  "utput\030\020 \001(\005\022.\n\024input_items_criteria\030\024 \003("
  "\0132\020.CSOItemCriteria\022/\n\025output_items_crit"
  "eria\030\025 \003(\0132\020.CSOItemCriteria\022\036\n\026input_it"
  "em_dupe_counts\030\026 \003(\r\"M\n\025CMsgDevNewItemRe"
  "quest\022\020\n\010receiver\030\001 \001(\006\022\"\n\010criteria\030\002 \001("
  "\0132\020.CSOItemCriteria\"\214\001\n\037CMsgIncrementKil"
  "lCountAttribute\022\031\n\021killer_account_id\030\001 \001"
  "(\007\022\031\n\021victim_account_id\030\002 \001(\007\022\017\n\007item_id"
  "\030\003 \001(\004\022\022\n\nevent_type\030\004 \001(\r\022\016\n\006amount\030\005 \001"
  "(\r\"\206\001\n\020CMsgApplySticker\022\027\n\017sticker_item_"
  "id\030\001 \001(\004\022\024\n\014item_item_id\030\002 \001(\004\022\024\n\014sticke"
  "r_slot\030\003 \001(\r\022\027\n\017baseitem_defidx\030\004 \001(\r\022\024\n"
  "\014sticker_wear\030\005 \001(\002\"]\n\025CMsgApplyStatTrak"
  "Swap\022\024\n\014tool_item_id\030\001 \001(\004\022\026\n\016item_1_ite"
  "m_id\030\002 \001(\004\022\026\n\016item_2_item_id\030\003 \001(\004\"J\n\024CM"
  "sgApplyStrangePart\022\034\n\024strange_part_item_"
  "id\030\001 \001(\004\022\024\n\014item_item_id\030\002 \001(\004\"K\n\027CMsgAp"
  "plyPennantUpgrade\022\027\n\017upgrade_item_id\030\001 \001"
  "(\004\022\027\n\017pennant_item_id\030\002 \001(\004\"C\n\023CMsgApply"
  "EggEssence\022\027\n\017essence_item_id\030\001 \001(\004\022\023\n\013e"
  "gg_item_id\030\002 \001(\004\"M\n\024CSOEconItemAttribute"
  "\022\021\n\tdef_index\030\001 \001(\r\022\r\n\005value\030\002 \001(\r\022\023\n\013va"
  "lue_bytes\030\003 \001(\014\":\n\023CSOEconItemEquipped\022\021"
  "\n\tnew_class\030\001 \001(\r\022\020\n\010new_slot\030\002 \001(\r\"\237\003\n\013"
  "CSOEconItem\022\n\n\002id\030\001 \001(\004\022\022\n\naccount_id\030\002 "
  "\001(\r\022\021\n\tinventory\030\003 \001(\r\022\021\n\tdef_index\030\004 \001("
  "\r\022\020\n\010quantity\030\005 \001(\r\022\r\n\005level\030\006 \001(\r\022\017\n\007qu"
  "ality\030\007 \001(\r\022\020\n\005flags\030\010 \001(\r:\0010\022\016\n\006origin\030"
  "\t \001(\r\022\023\n\013custom_name\030\n \001(\t\022\023\n\013custom_des"
  "c\030\013 \001(\t\022(\n\tattribute\030\014 \003(\0132\025.CSOEconItem"
  "Attribute\022#\n\rinterior_item\030\r \001(\0132\014.CSOEc"
  "onItem\022\025\n\006in_use\030\016 \001(\010:\005false\022\020\n\005style\030\017"
  " \001(\r:\0010\022\026\n\013original_id\030\020 \001(\004:\0010\022,\n\016equip"
  "ped_state\030\022 \003(\0132\024.CSOEconItemEquipped\022\016\n"
  "\006rarity\030\023 \001(\r\"a\n\033CMsgAdjustItemEquippedS"
  "tate\022\017\n\007item_id\030\001 \001(\004\022\021\n\tnew_class\030\002 \001(\r"
  "\022\020\n\010new_slot\030\003 \001(\r\022\014\n\004swap\030\004 \001(\010\"\"\n\rCMsg"
  "SortItems\022\021\n\tsort_type\030\001 \001(\r\"^\n\020CSOEconC"
  "laimCode\022\022\n\naccount_id\030\001 \001(\r\022\021\n\tcode_typ"
  "e\030\002 \001(\r\022\025\n\rtime_acquired\030\003 \001(\r\022\014\n\004code\030\004"
  " \001(\t\"E\n\024CMsgStoreGetUserData\022\033\n\023price_sh"
  "eet_version\030\001 \001(\007\022\020\n\010currency\030\002 \001(\005\"\231\001\n\034"
  "CMsgStoreGetUserDataResponse\022\016\n\006result\030\001"
  " \001(\005\022\033\n\023currency_deprecated\030\002 \001(\005\022\032\n\022cou"
  "ntry_deprecated\030\003 \001(\t\022\033\n\023price_sheet_ver"
  "sion\030\004 \001(\007\022\023\n\013price_sheet\030\010 \001(\014\"\206\001\n\024CMsg"
  "UpdateItemSchema\022\022\n\nitems_game\030\001 \001(\014\022\033\n\023"
  "item_schema_version\030\002 \001(\007\022%\n\035items_game_"
  "url_DEPRECATED2013\030\003 \001(\t\022\026\n\016items_game_u"
  "rl\030\004 \001(\t\"!\n\013CMsgGCError\022\022\n\nerror_text\030\001 "
  "\001(\t\"\035\n\033CMsgRequestInventoryRefresh\".\n\017CM"
  "sgConVarValue\022\014\n\004name\030\001 \001(\t\022\r\n\005value\030\002 \001"
  "(\t\"9\n\024CMsgReplicateConVars\022!\n\007convars\030\001 "
  "\003(\0132\020.CMsgConVarValue\"\216\001\n\013CMsgUseItem\022\017\n"
  "\007item_id\030\001 \001(\004\022\027\n\017target_steam_id\030\002 \001(\006\022"
  "\037\n\027gift__potential_targets\030\003 \003(\r\022\030\n\020duel"
  "__class_lock\030\004 \001(\r\022\032\n\022initiator_steam_id"
  "\030\005 \001(\006\"d\n\033CMsgReplayUploadedToYouTube\022\023\n"
  "\013youtube_url\030\001 \001(\t\022\034\n\024youtube_account_na"
  "me\030\002 \001(\t\022\022\n\nsession_id\030\003 \001(\004\".\n\027CMsgCons"
  "umableExhausted\022\023\n\013item_def_id\030\001 \001(\005\"\236\001\n"
  " CMsgItemAcknowledged__DEPRECATED\022\022\n\nacc"
  "ount_id\030\001 \001(\r\022\021\n\tinventory\030\002 \001(\r\022\021\n\tdef_"
  "index\030\003 \001(\r\022\017\n\007quality\030\004 \001(\r\022\016\n\006rarity\030\005"
  " \001(\r\022\016\n\006origin\030\006 \001(\r\022\017\n\007item_id\030\007 \001(\004\"\235\001"
  "\n\024CMsgSetItemPositions\022:\n\016item_positions"
  "\030\001 \003(\0132\".CMsgSetItemPositions.ItemPositi"
  "on\032I\n\014ItemPosition\022\026\n\016legacy_item_id\030\001 \001"
  "(\r\022\020\n\010position\030\002 \001(\r\022\017\n\007item_id\030\003 \001(\004\"\270\001"
  "\n\021CMsgGCReportAbuse\022\027\n\017target_steam_id\030\001"
  " \001(\006\022\023\n\013description\030\004 \001(\t\022\013\n\003gid\030\005 \001(\004\022\022"
  "\n\nabuse_type\030\002 \001(\r\022\024\n\014content_type\030\003 \001(\r"
  "\022\035\n\025target_game_server_ip\030\006 \001(\007\022\037\n\027targe"
  "t_game_server_port\030\007 \001(\r\"[\n\031CMsgGCReport"
  "AbuseResponse\022\027\n\017target_steam_id\030\001 \001(\006\022\016"
  "\n\006result\030\002 \001(\r\022\025\n\rerror_message\030\003 \001(\t\"f\n"
  "\032CMsgGCNameItemNotification\022\026\n\016player_st"
  "eamid\030\001 \001(\006\022\026\n\016item_def_index\030\002 \001(\r\022\030\n\020i"
  "tem_name_custom\030\003 \001(\t\"\266\001\n\037CMsgGCClientDi"
  "splayNotification\022+\n#notification_title_"
  "localization_key\030\001 \001(\t\022*\n\"notification_b"
  "ody_localization_key\030\002 \001(\t\022\033\n\023body_subst"
  "ring_keys\030\003 \003(\t\022\035\n\025body_substring_values"
  "\030\004 \003(\t\"1\n\027CMsgGCShowItemsPickedUp\022\026\n\016pla"
  "yer_steamid\030\001 \001(\006\"|\n CMsgGCIncrementKill"
  "CountResponse\022\037\n\021killer_account_id\030\001 \001(\r"
  "B\004\200\246\035\001\022\021\n\tnum_kills\030\002 \001(\r\022\020\n\010item_def\030\003 "
  "\001(\r\022\022\n\nlevel_type\030\004 \001(\r\"\217\001\n\030CSOEconItemD"
  "ropRateBonus\022\022\n\naccount_id\030\001 \001(\r\022\027\n\017expi"
  "ration_date\030\002 \001(\007\022\r\n\005bonus\030\003 \001(\002\022\023\n\013bonu"
  "s_count\030\004 \001(\r\022\017\n\007item_id\030\005 \001(\004\022\021\n\tdef_in"
  "dex\030\006 \001(\r\"p\n\031CSOEconItemLeagueViewPass\022\030"
  "\n\naccount_id\030\001 \001(\rB\004\200\246\035\001\022\027\n\tleague_id\030\002 "
  "\001(\rB\004\200\246\035\001\022\r\n\005admin\030\003 \001(\r\022\021\n\titemindex\030\004 "
  "\001(\r\"O\n\026CSOEconItemEventTicket\022\022\n\naccount"
  "_id\030\001 \001(\r\022\020\n\010event_id\030\002 \001(\r\022\017\n\007item_id\030\003"
  " \001(\004\"A\n\'CMsgGCItemPreviewItemBoughtNotif"
  "ication\022\026\n\016item_def_index\030\001 \001(\r\"+\n\031CMsgG"
  "CStorePurchaseCancel\022\016\n\006txn_id\030\001 \001(\004\"3\n!"
  "CMsgGCStorePurchaseCancelResponse\022\016\n\006res"
  "ult\030\001 \001(\r\"-\n\033CMsgGCStorePurchaseFinalize"
  "\022\016\n\006txn_id\030\001 \001(\004\"G\n#CMsgGCStorePurchaseF"
  "inalizeResponse\022\016\n\006result\030\001 \001(\r\022\020\n\010item_"
  "ids\030\002 \003(\004\"I\n\033CMsgGCBannedWordListRequest"
  "\022\031\n\021ban_list_group_id\030\001 \001(\r\022\017\n\007word_id\030\002"
  " \001(\r\"\034\n\032CMsgGCRequestAnnouncements\"\202\001\n\"C"
  "MsgGCRequestAnnouncementsResponse\022\032\n\022ann"
  "ouncement_title\030\001 \001(\t\022\024\n\014announcement\030\002 "
  "\001(\t\022\027\n\017nextmatch_title\030\003 \001(\t\022\021\n\tnextmatc"
  "h\030\004 \001(\t\"X\n\020CMsgGCBannedWord\022\017\n\007word_id\030\001"
  " \001(\r\022%\n\tword_type\030\002 \001(\0162\022.GC_BannedWordT"
  "ype\022\014\n\004word\030\003 \001(\t\"_\n\034CMsgGCBannedWordLis"
  "tResponse\022\031\n\021ban_list_group_id\030\001 \001(\r\022$\n\t"
  "word_list\030\002 \003(\0132\021.CMsgGCBannedWord\"U\n!CM"
  "sgGCToGCBannedWordListBroadcast\0220\n\tbroad"
  "cast\030\001 \001(\0132\035.CMsgGCBannedWordListRespons"
  "e\"3\n\037CMsgGCToGCBannedWordListUpdated\022\020\n\010"
  "group_id\030\001 \001(\r\"\222\001\n.CSOEconDefaultEquippe"
  "dDefinitionInstanceClient\022\030\n\naccount_id\030"
  "\001 \001(\rB\004\200\246\035\001\022\027\n\017item_definition\030\002 \001(\r\022\026\n\010"
  "class_id\030\003 \001(\rB\004\200\246\035\001\022\025\n\007slot_id\030\004 \001(\rB\004\200"
  "\246\035\001\"\?\n\027CMsgGCToGCDirtySDOCache\022\020\n\010sdo_ty"
  "pe\030\001 \001(\r\022\022\n\nkey_uint64\030\002 \001(\004\"G\n\037CMsgGCTo"
  "GCDirtyMultipleSDOCache\022\020\n\010sdo_type\030\001 \001("
  "\r\022\022\n\nkey_uint64\030\002 \003(\004\"H\n\021CMsgGCCollectIt"
  "em\022\032\n\022collection_item_id\030\001 \001(\004\022\027\n\017subjec"
  "t_item_id\030\002 \001(\004\"\024\n\022CMsgSDONoMemcached\"/\n"
  "\033CMsgGCToGCUpdateSQLKeyValue\022\020\n\010key_name"
  "\030\001 \001(\t\"-\n\031CMsgGCToGCIsTrustedServer\022\020\n\010s"
  "team_id\030\001 \001(\006\"7\n!CMsgGCToGCIsTrustedServ"
  "erResponse\022\022\n\nis_trusted\030\001 \001(\010\"8\n!CMsgGC"
  "ToGCBroadcastConsoleCommand\022\023\n\013con_comma"
  "nd\030\001 \001(\t\"4\n\032CMsgGCServerVersionUpdated\022\026"
  "\n\016server_version\030\001 \001(\r\"4\n\032CMsgGCClientVe"
  "rsionUpdated\022\026\n\016client_version\030\001 \001(\r\" \n\036"
  "CMsgGCToGCWebAPIAccountChanged\"^\n\"CMsgGC"
  "ToGCRequestPassportItemGrant\022\020\n\010steam_id"
  "\030\001 \001(\006\022\021\n\tleague_id\030\002 \001(\r\022\023\n\013reward_flag"
  "\030\003 \001(\005\"\350\004\n\022CMsgGameServerInfo\022\035\n\025server_"
  "public_ip_addr\030\001 \001(\007\022\036\n\026server_private_i"
  "p_addr\030\002 \001(\007\022\023\n\013server_port\030\003 \001(\r\022\026\n\016ser"
  "ver_tv_port\030\004 \001(\r\022\022\n\nserver_key\030\005 \001(\t\022\032\n"
  "\022server_hibernation\030\006 \001(\010\022@\n\013server_type"
  "\030\007 \001(\0162\036.CMsgGameServerInfo.ServerType:\013"
  "UNSPECIFIED\022\025\n\rserver_region\030\010 \001(\r\022\026\n\016se"
  "rver_loadavg\030\t \001(\002\022 \n\030server_tv_broadcas"
  "t_time\030\n \001(\002\022\030\n\020server_game_time\030\013 \001(\002\022\'"
  "\n\037server_relay_connected_steam_id\030\014 \001(\006\022"
  "\027\n\017relay_slots_max\030\r \001(\r\022\030\n\020relays_conne"
  "cted\030\016 \001(\005\022\037\n\027relay_clients_connected\030\017 "
  "\001(\005\022$\n\034relayed_game_server_steam_id\030\020 \001("
  "\006\022\032\n\022parent_relay_count\030\021 \001(\r\022\026\n\016tv_secr"
  "et_code\030\022 \001(\006\"2\n\nServerType\022\017\n\013UNSPECIFI"
  "ED\020\000\022\010\n\004GAME\020\001\022\t\n\005PROXY\020\002*\307\003\n\nEGCBaseMsg"
  "\022\032\n\025k_EMsgGCSystemMessage\020\241\037\022\035\n\030k_EMsgGC"
  "ReplicateConVars\020\242\037\022\032\n\025k_EMsgGCConVarUpd"
  "ated\020\243\037\022\024\n\017k_EMsgGCInQueue\020\250\037\022\032\n\025k_EMsgG"
  "CInviteToParty\020\225#\022\036\n\031k_EMsgGCInvitationC"
  "reated\020\226#\022 \n\033k_EMsgGCPartyInviteResponse"
  "\020\227#\022\032\n\025k_EMsgGCKickFromParty\020\230#\022\027\n\022k_EMs"
  "gGCLeaveParty\020\231#\022\034\n\027k_EMsgGCServerAvaila"
  "ble\020\232#\022\"\n\035k_EMsgGCClientConnectToServer\020"
  "\233#\022\033\n\026k_EMsgGCGameServerInfo\020\234#\022\022\n\rk_EMs"
  "gGCError\020\235#\022%\n k_EMsgGCReplay_UploadedTo"
  "YouTube\020\236#\022\037\n\032k_EMsgGCLANServerAvailable"
  "\020\237#*Y\n\027EGCBaseProtoObjectTypes\022\036\n\031k_EPro"
  "toObjectPartyInvite\020\351\007\022\036\n\031k_EProtoObject"
  "LobbyInvite\020\352\007*T\n\021GC_BannedWordType\022\037\n\033G"
  "C_BANNED_WORD_DISABLE_WORD\020\000\022\036\n\032GC_BANNE"
  "D_WORD_ENABLE_WORD\020\001B\005H\001\200\001\000"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_base_5fgcmessages_2eproto_deps[1] = {
  &::descriptor_table_steammessages_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_base_5fgcmessages_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_base_5fgcmessages_2eproto = {
  false, false, 8707, descriptor_table_protodef_base_5fgcmessages_2eproto, "base_gcmessages.proto", 
  &descriptor_table_base_5fgcmessages_2eproto_once, descriptor_table_base_5fgcmessages_2eproto_deps, 1, 78,
  schemas, file_default_instances, TableStruct_base_5fgcmessages_2eproto::offsets,
  file_level_metadata_base_5fgcmessages_2eproto, file_level_enum_descriptors_base_5fgcmessages_2eproto, file_level_service_descriptors_base_5fgcmessages_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_base_5fgcmessages_2eproto_getter() {
  return &descriptor_table_base_5fgcmessages_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_base_5fgcmessages_2eproto(&descriptor_table_base_5fgcmessages_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgGameServerInfo_ServerType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_base_5fgcmessages_2eproto);
  return file_level_enum_descriptors_base_5fgcmessages_2eproto[0];
}
bool CMsgGameServerInfo_ServerType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CMsgGameServerInfo_ServerType CMsgGameServerInfo::UNSPECIFIED;
constexpr CMsgGameServerInfo_ServerType CMsgGameServerInfo::GAME;
constexpr CMsgGameServerInfo_ServerType CMsgGameServerInfo::PROXY;
constexpr CMsgGameServerInfo_ServerType CMsgGameServerInfo::ServerType_MIN;
constexpr CMsgGameServerInfo_ServerType CMsgGameServerInfo::ServerType_MAX;
constexpr int CMsgGameServerInfo::ServerType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EGCBaseMsg_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_base_5fgcmessages_2eproto);
  return file_level_enum_descriptors_base_5fgcmessages_2eproto[1];
}
bool EGCBaseMsg_IsValid(int value) {
  switch (value) {
    case 4001:
    case 4002:
    case 4003:
    case 4008:
    case 4501:
    case 4502:
    case 4503:
    case 4504:
    case 4505:
    case 4506:
    case 4507:
    case 4508:
    case 4509:
    case 4510:
    case 4511:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EGCBaseProtoObjectTypes_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_base_5fgcmessages_2eproto);
  return file_level_enum_descriptors_base_5fgcmessages_2eproto[2];
}
bool EGCBaseProtoObjectTypes_IsValid(int value) {
  switch (value) {
    case 1001:
    case 1002:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GC_BannedWordType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_base_5fgcmessages_2eproto);
  return file_level_enum_descriptors_base_5fgcmessages_2eproto[3];
}
bool GC_BannedWordType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CGCStorePurchaseInit_LineItem::_Internal {
 public:
  using HasBits = decltype(std::declval<CGCStorePurchaseInit_LineItem>()._has_bits_);
  static void set_has_item_def_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_quantity(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_cost_in_local_currency(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_purchase_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CGCStorePurchaseInit_LineItem::CGCStorePurchaseInit_LineItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CGCStorePurchaseInit_LineItem)
}
CGCStorePurchaseInit_LineItem::CGCStorePurchaseInit_LineItem(const CGCStorePurchaseInit_LineItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&item_def_id_, &from.item_def_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&purchase_type_) -
    reinterpret_cast<char*>(&item_def_id_)) + sizeof(purchase_type_));
  // @@protoc_insertion_point(copy_constructor:CGCStorePurchaseInit_LineItem)
}

void CGCStorePurchaseInit_LineItem::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&item_def_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&purchase_type_) -
    reinterpret_cast<char*>(&item_def_id_)) + sizeof(purchase_type_));
}

CGCStorePurchaseInit_LineItem::~CGCStorePurchaseInit_LineItem() {
  // @@protoc_insertion_point(destructor:CGCStorePurchaseInit_LineItem)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CGCStorePurchaseInit_LineItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGCStorePurchaseInit_LineItem::ArenaDtor(void* object) {
  CGCStorePurchaseInit_LineItem* _this = reinterpret_cast< CGCStorePurchaseInit_LineItem* >(object);
  (void)_this;
}
void CGCStorePurchaseInit_LineItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGCStorePurchaseInit_LineItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGCStorePurchaseInit_LineItem::Clear() {
// @@protoc_insertion_point(message_clear_start:CGCStorePurchaseInit_LineItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&item_def_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&purchase_type_) -
        reinterpret_cast<char*>(&item_def_id_)) + sizeof(purchase_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGCStorePurchaseInit_LineItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 item_def_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_item_def_id(&has_bits);
          item_def_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 quantity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_quantity(&has_bits);
          quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 cost_in_local_currency = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_cost_in_local_currency(&has_bits);
          cost_in_local_currency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 purchase_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_purchase_type(&has_bits);
          purchase_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGCStorePurchaseInit_LineItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGCStorePurchaseInit_LineItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 item_def_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_item_def_id(), target);
  }

  // optional uint32 quantity = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_quantity(), target);
  }

  // optional uint32 cost_in_local_currency = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_cost_in_local_currency(), target);
  }

  // optional uint32 purchase_type = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_purchase_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGCStorePurchaseInit_LineItem)
  return target;
}

size_t CGCStorePurchaseInit_LineItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGCStorePurchaseInit_LineItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 item_def_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_item_def_id());
    }

    // optional uint32 quantity = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_quantity());
    }

    // optional uint32 cost_in_local_currency = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_cost_in_local_currency());
    }

    // optional uint32 purchase_type = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_purchase_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGCStorePurchaseInit_LineItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CGCStorePurchaseInit_LineItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGCStorePurchaseInit_LineItem::GetClassData() const { return &_class_data_; }

void CGCStorePurchaseInit_LineItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CGCStorePurchaseInit_LineItem *>(to)->MergeFrom(
      static_cast<const CGCStorePurchaseInit_LineItem &>(from));
}


void CGCStorePurchaseInit_LineItem::MergeFrom(const CGCStorePurchaseInit_LineItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGCStorePurchaseInit_LineItem)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      item_def_id_ = from.item_def_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      quantity_ = from.quantity_;
    }
    if (cached_has_bits & 0x00000004u) {
      cost_in_local_currency_ = from.cost_in_local_currency_;
    }
    if (cached_has_bits & 0x00000008u) {
      purchase_type_ = from.purchase_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGCStorePurchaseInit_LineItem::CopyFrom(const CGCStorePurchaseInit_LineItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGCStorePurchaseInit_LineItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCStorePurchaseInit_LineItem::IsInitialized() const {
  return true;
}

void CGCStorePurchaseInit_LineItem::InternalSwap(CGCStorePurchaseInit_LineItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGCStorePurchaseInit_LineItem, purchase_type_)
      + sizeof(CGCStorePurchaseInit_LineItem::purchase_type_)
      - PROTOBUF_FIELD_OFFSET(CGCStorePurchaseInit_LineItem, item_def_id_)>(
          reinterpret_cast<char*>(&item_def_id_),
          reinterpret_cast<char*>(&other->item_def_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGCStorePurchaseInit_LineItem::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[0]);
}

// ===================================================================

class CMsgGCStorePurchaseInit::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCStorePurchaseInit>()._has_bits_);
  static void set_has_country(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_language(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_currency(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgGCStorePurchaseInit::CMsgGCStorePurchaseInit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  line_items_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgGCStorePurchaseInit)
}
CMsgGCStorePurchaseInit::CMsgGCStorePurchaseInit(const CMsgGCStorePurchaseInit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      line_items_(from.line_items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  country_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_country()) {
    country_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_country(), 
      GetArenaForAllocation());
  }
  ::memcpy(&language_, &from.language_,
    static_cast<size_t>(reinterpret_cast<char*>(&currency_) -
    reinterpret_cast<char*>(&language_)) + sizeof(currency_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCStorePurchaseInit)
}

void CMsgGCStorePurchaseInit::SharedCtor() {
country_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&language_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&currency_) -
    reinterpret_cast<char*>(&language_)) + sizeof(currency_));
}

CMsgGCStorePurchaseInit::~CMsgGCStorePurchaseInit() {
  // @@protoc_insertion_point(destructor:CMsgGCStorePurchaseInit)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgGCStorePurchaseInit::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  country_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCStorePurchaseInit::ArenaDtor(void* object) {
  CMsgGCStorePurchaseInit* _this = reinterpret_cast< CMsgGCStorePurchaseInit* >(object);
  (void)_this;
}
void CMsgGCStorePurchaseInit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCStorePurchaseInit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCStorePurchaseInit::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCStorePurchaseInit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  line_items_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    country_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&language_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&currency_) -
        reinterpret_cast<char*>(&language_)) + sizeof(currency_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCStorePurchaseInit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string country = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_country();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGCStorePurchaseInit.country");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 language = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_language(&has_bits);
          language_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 currency = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_currency(&has_bits);
          currency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CGCStorePurchaseInit_LineItem line_items = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_line_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCStorePurchaseInit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCStorePurchaseInit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string country = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_country().data(), static_cast<int>(this->_internal_country().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCStorePurchaseInit.country");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_country(), target);
  }

  // optional int32 language = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_language(), target);
  }

  // optional int32 currency = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_currency(), target);
  }

  // repeated .CGCStorePurchaseInit_LineItem line_items = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_line_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_line_items(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCStorePurchaseInit)
  return target;
}

size_t CMsgGCStorePurchaseInit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCStorePurchaseInit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CGCStorePurchaseInit_LineItem line_items = 4;
  total_size += 1UL * this->_internal_line_items_size();
  for (const auto& msg : this->line_items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string country = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_country());
    }

    // optional int32 language = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_language());
    }

    // optional int32 currency = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_currency());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCStorePurchaseInit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgGCStorePurchaseInit::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCStorePurchaseInit::GetClassData() const { return &_class_data_; }

void CMsgGCStorePurchaseInit::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgGCStorePurchaseInit *>(to)->MergeFrom(
      static_cast<const CMsgGCStorePurchaseInit &>(from));
}


void CMsgGCStorePurchaseInit::MergeFrom(const CMsgGCStorePurchaseInit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCStorePurchaseInit)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  line_items_.MergeFrom(from.line_items_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_country(from._internal_country());
    }
    if (cached_has_bits & 0x00000002u) {
      language_ = from.language_;
    }
    if (cached_has_bits & 0x00000004u) {
      currency_ = from.currency_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCStorePurchaseInit::CopyFrom(const CMsgGCStorePurchaseInit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCStorePurchaseInit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCStorePurchaseInit::IsInitialized() const {
  return true;
}

void CMsgGCStorePurchaseInit::InternalSwap(CMsgGCStorePurchaseInit* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  line_items_.InternalSwap(&other->line_items_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &country_, lhs_arena,
      &other->country_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCStorePurchaseInit, currency_)
      + sizeof(CMsgGCStorePurchaseInit::currency_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCStorePurchaseInit, language_)>(
          reinterpret_cast<char*>(&language_),
          reinterpret_cast<char*>(&other->language_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCStorePurchaseInit::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[1]);
}

// ===================================================================

class CMsgGCStorePurchaseInitResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCStorePurchaseInitResponse>()._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_txn_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCStorePurchaseInitResponse::CMsgGCStorePurchaseInitResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  item_ids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgGCStorePurchaseInitResponse)
}
CMsgGCStorePurchaseInitResponse::CMsgGCStorePurchaseInitResponse(const CMsgGCStorePurchaseInitResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      item_ids_(from.item_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_url()) {
    url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_url(), 
      GetArenaForAllocation());
  }
  ::memcpy(&txn_id_, &from.txn_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&txn_id_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCStorePurchaseInitResponse)
}

void CMsgGCStorePurchaseInitResponse::SharedCtor() {
url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&txn_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&txn_id_)) + sizeof(result_));
}

CMsgGCStorePurchaseInitResponse::~CMsgGCStorePurchaseInitResponse() {
  // @@protoc_insertion_point(destructor:CMsgGCStorePurchaseInitResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgGCStorePurchaseInitResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCStorePurchaseInitResponse::ArenaDtor(void* object) {
  CMsgGCStorePurchaseInitResponse* _this = reinterpret_cast< CMsgGCStorePurchaseInitResponse* >(object);
  (void)_this;
}
void CMsgGCStorePurchaseInitResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCStorePurchaseInitResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCStorePurchaseInitResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCStorePurchaseInitResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_ids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    url_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&txn_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&result_) -
        reinterpret_cast<char*>(&txn_id_)) + sizeof(result_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCStorePurchaseInitResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_result(&has_bits);
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 txn_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_txn_id(&has_bits);
          txn_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string url = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGCStorePurchaseInitResponse.url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 item_ids = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_item_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_item_ids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCStorePurchaseInitResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCStorePurchaseInitResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 result = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_result(), target);
  }

  // optional uint64 txn_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_txn_id(), target);
  }

  // optional string url = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCStorePurchaseInitResponse.url");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_url(), target);
  }

  // repeated uint64 item_ids = 4;
  for (int i = 0, n = this->_internal_item_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_item_ids(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCStorePurchaseInitResponse)
  return target;
}

size_t CMsgGCStorePurchaseInitResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCStorePurchaseInitResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 item_ids = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->item_ids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_item_ids_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string url = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url());
    }

    // optional uint64 txn_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_txn_id());
    }

    // optional int32 result = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_result());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCStorePurchaseInitResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgGCStorePurchaseInitResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCStorePurchaseInitResponse::GetClassData() const { return &_class_data_; }

void CMsgGCStorePurchaseInitResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgGCStorePurchaseInitResponse *>(to)->MergeFrom(
      static_cast<const CMsgGCStorePurchaseInitResponse &>(from));
}


void CMsgGCStorePurchaseInitResponse::MergeFrom(const CMsgGCStorePurchaseInitResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCStorePurchaseInitResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_ids_.MergeFrom(from.item_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_url(from._internal_url());
    }
    if (cached_has_bits & 0x00000002u) {
      txn_id_ = from.txn_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCStorePurchaseInitResponse::CopyFrom(const CMsgGCStorePurchaseInitResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCStorePurchaseInitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCStorePurchaseInitResponse::IsInitialized() const {
  return true;
}

void CMsgGCStorePurchaseInitResponse::InternalSwap(CMsgGCStorePurchaseInitResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  item_ids_.InternalSwap(&other->item_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &url_, lhs_arena,
      &other->url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCStorePurchaseInitResponse, result_)
      + sizeof(CMsgGCStorePurchaseInitResponse::result_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCStorePurchaseInitResponse, txn_id_)>(
          reinterpret_cast<char*>(&txn_id_),
          reinterpret_cast<char*>(&other->txn_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCStorePurchaseInitResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[2]);
}

// ===================================================================

class CSOPartyInvite::_Internal {
 public:
  using HasBits = decltype(std::declval<CSOPartyInvite>()._has_bits_);
  static void set_has_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_sender_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_sender_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CSOPartyInvite::CSOPartyInvite(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CSOPartyInvite)
}
CSOPartyInvite::CSOPartyInvite(const CSOPartyInvite& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sender_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_sender_name()) {
    sender_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sender_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&group_id_, &from.group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&sender_id_) -
    reinterpret_cast<char*>(&group_id_)) + sizeof(sender_id_));
  // @@protoc_insertion_point(copy_constructor:CSOPartyInvite)
}

void CSOPartyInvite::SharedCtor() {
sender_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&group_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sender_id_) -
    reinterpret_cast<char*>(&group_id_)) + sizeof(sender_id_));
}

CSOPartyInvite::~CSOPartyInvite() {
  // @@protoc_insertion_point(destructor:CSOPartyInvite)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CSOPartyInvite::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  sender_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CSOPartyInvite::ArenaDtor(void* object) {
  CSOPartyInvite* _this = reinterpret_cast< CSOPartyInvite* >(object);
  (void)_this;
}
void CSOPartyInvite::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSOPartyInvite::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSOPartyInvite::Clear() {
// @@protoc_insertion_point(message_clear_start:CSOPartyInvite)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    sender_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&group_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sender_id_) -
        reinterpret_cast<char*>(&group_id_)) + sizeof(sender_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSOPartyInvite::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 group_id = 1 [(.key_field) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_group_id(&has_bits);
          group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 sender_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_sender_id(&has_bits);
          sender_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else
          goto handle_unusual;
        continue;
      // optional string sender_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_sender_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSOPartyInvite.sender_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSOPartyInvite::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSOPartyInvite)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 group_id = 1 [(.key_field) = true];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_group_id(), target);
  }

  // optional fixed64 sender_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_sender_id(), target);
  }

  // optional string sender_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sender_name().data(), static_cast<int>(this->_internal_sender_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSOPartyInvite.sender_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_sender_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSOPartyInvite)
  return target;
}

size_t CSOPartyInvite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSOPartyInvite)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string sender_name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sender_name());
    }

    // optional uint64 group_id = 1 [(.key_field) = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_group_id());
    }

    // optional fixed64 sender_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSOPartyInvite::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CSOPartyInvite::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSOPartyInvite::GetClassData() const { return &_class_data_; }

void CSOPartyInvite::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CSOPartyInvite *>(to)->MergeFrom(
      static_cast<const CSOPartyInvite &>(from));
}


void CSOPartyInvite::MergeFrom(const CSOPartyInvite& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSOPartyInvite)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_sender_name(from._internal_sender_name());
    }
    if (cached_has_bits & 0x00000002u) {
      group_id_ = from.group_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      sender_id_ = from.sender_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSOPartyInvite::CopyFrom(const CSOPartyInvite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSOPartyInvite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOPartyInvite::IsInitialized() const {
  return true;
}

void CSOPartyInvite::InternalSwap(CSOPartyInvite* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sender_name_, lhs_arena,
      &other->sender_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSOPartyInvite, sender_id_)
      + sizeof(CSOPartyInvite::sender_id_)
      - PROTOBUF_FIELD_OFFSET(CSOPartyInvite, group_id_)>(
          reinterpret_cast<char*>(&group_id_),
          reinterpret_cast<char*>(&other->group_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSOPartyInvite::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[3]);
}

// ===================================================================

class CSOLobbyInvite::_Internal {
 public:
  using HasBits = decltype(std::declval<CSOLobbyInvite>()._has_bits_);
  static void set_has_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_sender_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_sender_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CSOLobbyInvite::CSOLobbyInvite(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CSOLobbyInvite)
}
CSOLobbyInvite::CSOLobbyInvite(const CSOLobbyInvite& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sender_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_sender_name()) {
    sender_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sender_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&group_id_, &from.group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&sender_id_) -
    reinterpret_cast<char*>(&group_id_)) + sizeof(sender_id_));
  // @@protoc_insertion_point(copy_constructor:CSOLobbyInvite)
}

void CSOLobbyInvite::SharedCtor() {
sender_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&group_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sender_id_) -
    reinterpret_cast<char*>(&group_id_)) + sizeof(sender_id_));
}

CSOLobbyInvite::~CSOLobbyInvite() {
  // @@protoc_insertion_point(destructor:CSOLobbyInvite)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CSOLobbyInvite::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  sender_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CSOLobbyInvite::ArenaDtor(void* object) {
  CSOLobbyInvite* _this = reinterpret_cast< CSOLobbyInvite* >(object);
  (void)_this;
}
void CSOLobbyInvite::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSOLobbyInvite::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSOLobbyInvite::Clear() {
// @@protoc_insertion_point(message_clear_start:CSOLobbyInvite)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    sender_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&group_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sender_id_) -
        reinterpret_cast<char*>(&group_id_)) + sizeof(sender_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSOLobbyInvite::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 group_id = 1 [(.key_field) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_group_id(&has_bits);
          group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 sender_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_sender_id(&has_bits);
          sender_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else
          goto handle_unusual;
        continue;
      // optional string sender_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_sender_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSOLobbyInvite.sender_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSOLobbyInvite::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSOLobbyInvite)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 group_id = 1 [(.key_field) = true];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_group_id(), target);
  }

  // optional fixed64 sender_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_sender_id(), target);
  }

  // optional string sender_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sender_name().data(), static_cast<int>(this->_internal_sender_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSOLobbyInvite.sender_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_sender_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSOLobbyInvite)
  return target;
}

size_t CSOLobbyInvite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSOLobbyInvite)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string sender_name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sender_name());
    }

    // optional uint64 group_id = 1 [(.key_field) = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_group_id());
    }

    // optional fixed64 sender_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSOLobbyInvite::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CSOLobbyInvite::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSOLobbyInvite::GetClassData() const { return &_class_data_; }

void CSOLobbyInvite::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CSOLobbyInvite *>(to)->MergeFrom(
      static_cast<const CSOLobbyInvite &>(from));
}


void CSOLobbyInvite::MergeFrom(const CSOLobbyInvite& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSOLobbyInvite)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_sender_name(from._internal_sender_name());
    }
    if (cached_has_bits & 0x00000002u) {
      group_id_ = from.group_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      sender_id_ = from.sender_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSOLobbyInvite::CopyFrom(const CSOLobbyInvite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSOLobbyInvite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOLobbyInvite::IsInitialized() const {
  return true;
}

void CSOLobbyInvite::InternalSwap(CSOLobbyInvite* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sender_name_, lhs_arena,
      &other->sender_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSOLobbyInvite, sender_id_)
      + sizeof(CSOLobbyInvite::sender_id_)
      - PROTOBUF_FIELD_OFFSET(CSOLobbyInvite, group_id_)>(
          reinterpret_cast<char*>(&group_id_),
          reinterpret_cast<char*>(&other->group_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSOLobbyInvite::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[4]);
}

// ===================================================================

class CMsgSystemBroadcast::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSystemBroadcast>()._has_bits_);
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgSystemBroadcast::CMsgSystemBroadcast(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgSystemBroadcast)
}
CMsgSystemBroadcast::CMsgSystemBroadcast(const CMsgSystemBroadcast& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_message()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CMsgSystemBroadcast)
}

void CMsgSystemBroadcast::SharedCtor() {
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CMsgSystemBroadcast::~CMsgSystemBroadcast() {
  // @@protoc_insertion_point(destructor:CMsgSystemBroadcast)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgSystemBroadcast::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgSystemBroadcast::ArenaDtor(void* object) {
  CMsgSystemBroadcast* _this = reinterpret_cast< CMsgSystemBroadcast* >(object);
  (void)_this;
}
void CMsgSystemBroadcast::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSystemBroadcast::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSystemBroadcast::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSystemBroadcast)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    message_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSystemBroadcast::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgSystemBroadcast.message");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSystemBroadcast::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSystemBroadcast)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string message = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgSystemBroadcast.message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSystemBroadcast)
  return target;
}

size_t CMsgSystemBroadcast::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSystemBroadcast)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string message = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgSystemBroadcast::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgSystemBroadcast::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgSystemBroadcast::GetClassData() const { return &_class_data_; }

void CMsgSystemBroadcast::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgSystemBroadcast *>(to)->MergeFrom(
      static_cast<const CMsgSystemBroadcast &>(from));
}


void CMsgSystemBroadcast::MergeFrom(const CMsgSystemBroadcast& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSystemBroadcast)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_message()) {
    _internal_set_message(from._internal_message());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSystemBroadcast::CopyFrom(const CMsgSystemBroadcast& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSystemBroadcast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSystemBroadcast::IsInitialized() const {
  return true;
}

void CMsgSystemBroadcast::InternalSwap(CMsgSystemBroadcast* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &message_, lhs_arena,
      &other->message_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSystemBroadcast::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[5]);
}

// ===================================================================

class CMsgInviteToParty::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgInviteToParty>()._has_bits_);
  static void set_has_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_client_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_team_invite(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgInviteToParty::CMsgInviteToParty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgInviteToParty)
}
CMsgInviteToParty::CMsgInviteToParty(const CMsgInviteToParty& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&steam_id_, &from.steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&team_invite_) -
    reinterpret_cast<char*>(&steam_id_)) + sizeof(team_invite_));
  // @@protoc_insertion_point(copy_constructor:CMsgInviteToParty)
}

void CMsgInviteToParty::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steam_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&team_invite_) -
    reinterpret_cast<char*>(&steam_id_)) + sizeof(team_invite_));
}

CMsgInviteToParty::~CMsgInviteToParty() {
  // @@protoc_insertion_point(destructor:CMsgInviteToParty)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgInviteToParty::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgInviteToParty::ArenaDtor(void* object) {
  CMsgInviteToParty* _this = reinterpret_cast< CMsgInviteToParty* >(object);
  (void)_this;
}
void CMsgInviteToParty::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgInviteToParty::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgInviteToParty::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgInviteToParty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&team_invite_) -
        reinterpret_cast<char*>(&steam_id_)) + sizeof(team_invite_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgInviteToParty::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steam_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_steam_id(&has_bits);
          steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 client_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_client_version(&has_bits);
          client_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 team_invite = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_team_invite(&has_bits);
          team_invite_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgInviteToParty::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgInviteToParty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steam_id(), target);
  }

  // optional uint32 client_version = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_client_version(), target);
  }

  // optional uint32 team_invite = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_team_invite(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgInviteToParty)
  return target;
}

size_t CMsgInviteToParty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgInviteToParty)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional fixed64 steam_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint32 client_version = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_client_version());
    }

    // optional uint32 team_invite = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_team_invite());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgInviteToParty::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgInviteToParty::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgInviteToParty::GetClassData() const { return &_class_data_; }

void CMsgInviteToParty::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgInviteToParty *>(to)->MergeFrom(
      static_cast<const CMsgInviteToParty &>(from));
}


void CMsgInviteToParty::MergeFrom(const CMsgInviteToParty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgInviteToParty)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      steam_id_ = from.steam_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      client_version_ = from.client_version_;
    }
    if (cached_has_bits & 0x00000004u) {
      team_invite_ = from.team_invite_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgInviteToParty::CopyFrom(const CMsgInviteToParty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgInviteToParty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgInviteToParty::IsInitialized() const {
  return true;
}

void CMsgInviteToParty::InternalSwap(CMsgInviteToParty* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgInviteToParty, team_invite_)
      + sizeof(CMsgInviteToParty::team_invite_)
      - PROTOBUF_FIELD_OFFSET(CMsgInviteToParty, steam_id_)>(
          reinterpret_cast<char*>(&steam_id_),
          reinterpret_cast<char*>(&other->steam_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgInviteToParty::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[6]);
}

// ===================================================================

class CMsgInvitationCreated::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgInvitationCreated>()._has_bits_);
  static void set_has_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgInvitationCreated::CMsgInvitationCreated(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgInvitationCreated)
}
CMsgInvitationCreated::CMsgInvitationCreated(const CMsgInvitationCreated& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&group_id_, &from.group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&steam_id_) -
    reinterpret_cast<char*>(&group_id_)) + sizeof(steam_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgInvitationCreated)
}

void CMsgInvitationCreated::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&group_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&steam_id_) -
    reinterpret_cast<char*>(&group_id_)) + sizeof(steam_id_));
}

CMsgInvitationCreated::~CMsgInvitationCreated() {
  // @@protoc_insertion_point(destructor:CMsgInvitationCreated)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgInvitationCreated::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgInvitationCreated::ArenaDtor(void* object) {
  CMsgInvitationCreated* _this = reinterpret_cast< CMsgInvitationCreated* >(object);
  (void)_this;
}
void CMsgInvitationCreated::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgInvitationCreated::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgInvitationCreated::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgInvitationCreated)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&group_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&steam_id_) -
        reinterpret_cast<char*>(&group_id_)) + sizeof(steam_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgInvitationCreated::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 group_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_group_id(&has_bits);
          group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 steam_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_steam_id(&has_bits);
          steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgInvitationCreated::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgInvitationCreated)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_group_id(), target);
  }

  // optional fixed64 steam_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_steam_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgInvitationCreated)
  return target;
}

size_t CMsgInvitationCreated::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgInvitationCreated)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 group_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_group_id());
    }

    // optional fixed64 steam_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgInvitationCreated::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgInvitationCreated::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgInvitationCreated::GetClassData() const { return &_class_data_; }

void CMsgInvitationCreated::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgInvitationCreated *>(to)->MergeFrom(
      static_cast<const CMsgInvitationCreated &>(from));
}


void CMsgInvitationCreated::MergeFrom(const CMsgInvitationCreated& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgInvitationCreated)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      group_id_ = from.group_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      steam_id_ = from.steam_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgInvitationCreated::CopyFrom(const CMsgInvitationCreated& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgInvitationCreated)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgInvitationCreated::IsInitialized() const {
  return true;
}

void CMsgInvitationCreated::InternalSwap(CMsgInvitationCreated* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgInvitationCreated, steam_id_)
      + sizeof(CMsgInvitationCreated::steam_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgInvitationCreated, group_id_)>(
          reinterpret_cast<char*>(&group_id_),
          reinterpret_cast<char*>(&other->group_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgInvitationCreated::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[7]);
}

// ===================================================================

class CMsgPartyInviteResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgPartyInviteResponse>()._has_bits_);
  static void set_has_party_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_accept(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_client_version(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_team_invite(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgPartyInviteResponse::CMsgPartyInviteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgPartyInviteResponse)
}
CMsgPartyInviteResponse::CMsgPartyInviteResponse(const CMsgPartyInviteResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&party_id_, &from.party_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&team_invite_) -
    reinterpret_cast<char*>(&party_id_)) + sizeof(team_invite_));
  // @@protoc_insertion_point(copy_constructor:CMsgPartyInviteResponse)
}

void CMsgPartyInviteResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&party_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&team_invite_) -
    reinterpret_cast<char*>(&party_id_)) + sizeof(team_invite_));
}

CMsgPartyInviteResponse::~CMsgPartyInviteResponse() {
  // @@protoc_insertion_point(destructor:CMsgPartyInviteResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgPartyInviteResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgPartyInviteResponse::ArenaDtor(void* object) {
  CMsgPartyInviteResponse* _this = reinterpret_cast< CMsgPartyInviteResponse* >(object);
  (void)_this;
}
void CMsgPartyInviteResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgPartyInviteResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgPartyInviteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPartyInviteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&party_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&team_invite_) -
        reinterpret_cast<char*>(&party_id_)) + sizeof(team_invite_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgPartyInviteResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 party_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_party_id(&has_bits);
          party_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool accept = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_accept(&has_bits);
          accept_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 client_version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_client_version(&has_bits);
          client_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 team_invite = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_team_invite(&has_bits);
          team_invite_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgPartyInviteResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPartyInviteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 party_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_party_id(), target);
  }

  // optional bool accept = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_accept(), target);
  }

  // optional uint32 client_version = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_client_version(), target);
  }

  // optional uint32 team_invite = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_team_invite(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPartyInviteResponse)
  return target;
}

size_t CMsgPartyInviteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPartyInviteResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint64 party_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_party_id());
    }

    // optional bool accept = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional uint32 client_version = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_client_version());
    }

    // optional uint32 team_invite = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_team_invite());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgPartyInviteResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgPartyInviteResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgPartyInviteResponse::GetClassData() const { return &_class_data_; }

void CMsgPartyInviteResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgPartyInviteResponse *>(to)->MergeFrom(
      static_cast<const CMsgPartyInviteResponse &>(from));
}


void CMsgPartyInviteResponse::MergeFrom(const CMsgPartyInviteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgPartyInviteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      party_id_ = from.party_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      accept_ = from.accept_;
    }
    if (cached_has_bits & 0x00000004u) {
      client_version_ = from.client_version_;
    }
    if (cached_has_bits & 0x00000008u) {
      team_invite_ = from.team_invite_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgPartyInviteResponse::CopyFrom(const CMsgPartyInviteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPartyInviteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPartyInviteResponse::IsInitialized() const {
  return true;
}

void CMsgPartyInviteResponse::InternalSwap(CMsgPartyInviteResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgPartyInviteResponse, team_invite_)
      + sizeof(CMsgPartyInviteResponse::team_invite_)
      - PROTOBUF_FIELD_OFFSET(CMsgPartyInviteResponse, party_id_)>(
          reinterpret_cast<char*>(&party_id_),
          reinterpret_cast<char*>(&other->party_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgPartyInviteResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[8]);
}

// ===================================================================

class CMsgKickFromParty::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgKickFromParty>()._has_bits_);
  static void set_has_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgKickFromParty::CMsgKickFromParty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgKickFromParty)
}
CMsgKickFromParty::CMsgKickFromParty(const CMsgKickFromParty& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  steam_id_ = from.steam_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgKickFromParty)
}

void CMsgKickFromParty::SharedCtor() {
steam_id_ = uint64_t{0u};
}

CMsgKickFromParty::~CMsgKickFromParty() {
  // @@protoc_insertion_point(destructor:CMsgKickFromParty)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgKickFromParty::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgKickFromParty::ArenaDtor(void* object) {
  CMsgKickFromParty* _this = reinterpret_cast< CMsgKickFromParty* >(object);
  (void)_this;
}
void CMsgKickFromParty::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgKickFromParty::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgKickFromParty::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgKickFromParty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  steam_id_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgKickFromParty::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steam_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_steam_id(&has_bits);
          steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgKickFromParty::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgKickFromParty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steam_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgKickFromParty)
  return target;
}

size_t CMsgKickFromParty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgKickFromParty)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 steam_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgKickFromParty::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgKickFromParty::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgKickFromParty::GetClassData() const { return &_class_data_; }

void CMsgKickFromParty::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgKickFromParty *>(to)->MergeFrom(
      static_cast<const CMsgKickFromParty &>(from));
}


void CMsgKickFromParty::MergeFrom(const CMsgKickFromParty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgKickFromParty)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_steam_id()) {
    _internal_set_steam_id(from._internal_steam_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgKickFromParty::CopyFrom(const CMsgKickFromParty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgKickFromParty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgKickFromParty::IsInitialized() const {
  return true;
}

void CMsgKickFromParty::InternalSwap(CMsgKickFromParty* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steam_id_, other->steam_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgKickFromParty::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[9]);
}

// ===================================================================

class CMsgLeaveParty::_Internal {
 public:
};

CMsgLeaveParty::CMsgLeaveParty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CMsgLeaveParty)
}
CMsgLeaveParty::CMsgLeaveParty(const CMsgLeaveParty& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgLeaveParty)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgLeaveParty::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgLeaveParty::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CMsgLeaveParty::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[10]);
}

// ===================================================================

class CMsgServerAvailable::_Internal {
 public:
};

CMsgServerAvailable::CMsgServerAvailable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CMsgServerAvailable)
}
CMsgServerAvailable::CMsgServerAvailable(const CMsgServerAvailable& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgServerAvailable)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgServerAvailable::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgServerAvailable::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerAvailable::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[11]);
}

// ===================================================================

class CMsgLANServerAvailable::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgLANServerAvailable>()._has_bits_);
  static void set_has_lobby_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgLANServerAvailable::CMsgLANServerAvailable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgLANServerAvailable)
}
CMsgLANServerAvailable::CMsgLANServerAvailable(const CMsgLANServerAvailable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  lobby_id_ = from.lobby_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgLANServerAvailable)
}

void CMsgLANServerAvailable::SharedCtor() {
lobby_id_ = uint64_t{0u};
}

CMsgLANServerAvailable::~CMsgLANServerAvailable() {
  // @@protoc_insertion_point(destructor:CMsgLANServerAvailable)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgLANServerAvailable::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgLANServerAvailable::ArenaDtor(void* object) {
  CMsgLANServerAvailable* _this = reinterpret_cast< CMsgLANServerAvailable* >(object);
  (void)_this;
}
void CMsgLANServerAvailable::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgLANServerAvailable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgLANServerAvailable::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgLANServerAvailable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lobby_id_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgLANServerAvailable::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 lobby_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_lobby_id(&has_bits);
          lobby_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgLANServerAvailable::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgLANServerAvailable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 lobby_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_lobby_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgLANServerAvailable)
  return target;
}

size_t CMsgLANServerAvailable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgLANServerAvailable)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 lobby_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgLANServerAvailable::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgLANServerAvailable::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgLANServerAvailable::GetClassData() const { return &_class_data_; }

void CMsgLANServerAvailable::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgLANServerAvailable *>(to)->MergeFrom(
      static_cast<const CMsgLANServerAvailable &>(from));
}


void CMsgLANServerAvailable::MergeFrom(const CMsgLANServerAvailable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgLANServerAvailable)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_lobby_id()) {
    _internal_set_lobby_id(from._internal_lobby_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgLANServerAvailable::CopyFrom(const CMsgLANServerAvailable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgLANServerAvailable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLANServerAvailable::IsInitialized() const {
  return true;
}

void CMsgLANServerAvailable::InternalSwap(CMsgLANServerAvailable* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(lobby_id_, other->lobby_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgLANServerAvailable::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[12]);
}

// ===================================================================

class CSOEconGameAccountClient::_Internal {
 public:
  using HasBits = decltype(std::declval<CSOEconGameAccountClient>()._has_bits_);
  static void set_has_additional_backpack_slots(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_bonus_xp_timestamp_refresh(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_bonus_xp_usedflags(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_elevated_state(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_elevated_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CSOEconGameAccountClient::CSOEconGameAccountClient(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CSOEconGameAccountClient)
}
CSOEconGameAccountClient::CSOEconGameAccountClient(const CSOEconGameAccountClient& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&elevated_timestamp_, &from.elevated_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&elevated_state_) -
    reinterpret_cast<char*>(&elevated_timestamp_)) + sizeof(elevated_state_));
  // @@protoc_insertion_point(copy_constructor:CSOEconGameAccountClient)
}

void CSOEconGameAccountClient::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&elevated_timestamp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&elevated_state_) -
    reinterpret_cast<char*>(&elevated_timestamp_)) + sizeof(elevated_state_));
}

CSOEconGameAccountClient::~CSOEconGameAccountClient() {
  // @@protoc_insertion_point(destructor:CSOEconGameAccountClient)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CSOEconGameAccountClient::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CSOEconGameAccountClient::ArenaDtor(void* object) {
  CSOEconGameAccountClient* _this = reinterpret_cast< CSOEconGameAccountClient* >(object);
  (void)_this;
}
void CSOEconGameAccountClient::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSOEconGameAccountClient::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSOEconGameAccountClient::Clear() {
// @@protoc_insertion_point(message_clear_start:CSOEconGameAccountClient)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&elevated_timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&elevated_state_) -
        reinterpret_cast<char*>(&elevated_timestamp_)) + sizeof(elevated_state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSOEconGameAccountClient::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 additional_backpack_slots = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_additional_backpack_slots(&has_bits);
          additional_backpack_slots_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed32 bonus_xp_timestamp_refresh = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_bonus_xp_timestamp_refresh(&has_bits);
          bonus_xp_timestamp_refresh_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 bonus_xp_usedflags = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_bonus_xp_usedflags(&has_bits);
          bonus_xp_usedflags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 elevated_state = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_elevated_state(&has_bits);
          elevated_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 elevated_timestamp = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_elevated_timestamp(&has_bits);
          elevated_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSOEconGameAccountClient::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSOEconGameAccountClient)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 additional_backpack_slots = 1 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_additional_backpack_slots(), target);
  }

  // optional fixed32 bonus_xp_timestamp_refresh = 12;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(12, this->_internal_bonus_xp_timestamp_refresh(), target);
  }

  // optional uint32 bonus_xp_usedflags = 13;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_bonus_xp_usedflags(), target);
  }

  // optional uint32 elevated_state = 14;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_elevated_state(), target);
  }

  // optional uint32 elevated_timestamp = 15;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_elevated_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSOEconGameAccountClient)
  return target;
}

size_t CSOEconGameAccountClient::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSOEconGameAccountClient)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 elevated_timestamp = 15;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_elevated_timestamp());
    }

    // optional uint32 additional_backpack_slots = 1 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_additional_backpack_slots());
    }

    // optional fixed32 bonus_xp_timestamp_refresh = 12;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional uint32 bonus_xp_usedflags = 13;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_bonus_xp_usedflags());
    }

    // optional uint32 elevated_state = 14;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_elevated_state());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSOEconGameAccountClient::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CSOEconGameAccountClient::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSOEconGameAccountClient::GetClassData() const { return &_class_data_; }

void CSOEconGameAccountClient::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CSOEconGameAccountClient *>(to)->MergeFrom(
      static_cast<const CSOEconGameAccountClient &>(from));
}


void CSOEconGameAccountClient::MergeFrom(const CSOEconGameAccountClient& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSOEconGameAccountClient)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      elevated_timestamp_ = from.elevated_timestamp_;
    }
    if (cached_has_bits & 0x00000002u) {
      additional_backpack_slots_ = from.additional_backpack_slots_;
    }
    if (cached_has_bits & 0x00000004u) {
      bonus_xp_timestamp_refresh_ = from.bonus_xp_timestamp_refresh_;
    }
    if (cached_has_bits & 0x00000008u) {
      bonus_xp_usedflags_ = from.bonus_xp_usedflags_;
    }
    if (cached_has_bits & 0x00000010u) {
      elevated_state_ = from.elevated_state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSOEconGameAccountClient::CopyFrom(const CSOEconGameAccountClient& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSOEconGameAccountClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOEconGameAccountClient::IsInitialized() const {
  return true;
}

void CSOEconGameAccountClient::InternalSwap(CSOEconGameAccountClient* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSOEconGameAccountClient, elevated_state_)
      + sizeof(CSOEconGameAccountClient::elevated_state_)
      - PROTOBUF_FIELD_OFFSET(CSOEconGameAccountClient, elevated_timestamp_)>(
          reinterpret_cast<char*>(&elevated_timestamp_),
          reinterpret_cast<char*>(&other->elevated_timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSOEconGameAccountClient::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[13]);
}

// ===================================================================

class CSOItemCriteriaCondition::_Internal {
 public:
  using HasBits = decltype(std::declval<CSOItemCriteriaCondition>()._has_bits_);
  static void set_has_op(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_field(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_required(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_float_value(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_string_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CSOItemCriteriaCondition::CSOItemCriteriaCondition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CSOItemCriteriaCondition)
}
CSOItemCriteriaCondition::CSOItemCriteriaCondition(const CSOItemCriteriaCondition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  field_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field()) {
    field_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_field(), 
      GetArenaForAllocation());
  }
  string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_string_value()) {
    string_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_string_value(), 
      GetArenaForAllocation());
  }
  ::memcpy(&op_, &from.op_,
    static_cast<size_t>(reinterpret_cast<char*>(&float_value_) -
    reinterpret_cast<char*>(&op_)) + sizeof(float_value_));
  // @@protoc_insertion_point(copy_constructor:CSOItemCriteriaCondition)
}

void CSOItemCriteriaCondition::SharedCtor() {
field_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&op_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&float_value_) -
    reinterpret_cast<char*>(&op_)) + sizeof(float_value_));
}

CSOItemCriteriaCondition::~CSOItemCriteriaCondition() {
  // @@protoc_insertion_point(destructor:CSOItemCriteriaCondition)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CSOItemCriteriaCondition::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  field_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  string_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CSOItemCriteriaCondition::ArenaDtor(void* object) {
  CSOItemCriteriaCondition* _this = reinterpret_cast< CSOItemCriteriaCondition* >(object);
  (void)_this;
}
void CSOItemCriteriaCondition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSOItemCriteriaCondition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSOItemCriteriaCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:CSOItemCriteriaCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      field_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      string_value_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&op_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&float_value_) -
        reinterpret_cast<char*>(&op_)) + sizeof(float_value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSOItemCriteriaCondition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 op = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_op(&has_bits);
          op_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string field = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_field();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSOItemCriteriaCondition.field");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool required = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_required(&has_bits);
          required_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float float_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_float_value(&has_bits);
          float_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional string string_value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_string_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSOItemCriteriaCondition.string_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSOItemCriteriaCondition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSOItemCriteriaCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 op = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_op(), target);
  }

  // optional string field = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field().data(), static_cast<int>(this->_internal_field().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSOItemCriteriaCondition.field");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_field(), target);
  }

  // optional bool required = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_required(), target);
  }

  // optional float float_value = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_float_value(), target);
  }

  // optional string string_value = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_string_value().data(), static_cast<int>(this->_internal_string_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSOItemCriteriaCondition.string_value");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_string_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSOItemCriteriaCondition)
  return target;
}

size_t CSOItemCriteriaCondition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSOItemCriteriaCondition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string field = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field());
    }

    // optional string string_value = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_string_value());
    }

    // optional int32 op = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_op());
    }

    // optional bool required = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional float float_value = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSOItemCriteriaCondition::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CSOItemCriteriaCondition::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSOItemCriteriaCondition::GetClassData() const { return &_class_data_; }

void CSOItemCriteriaCondition::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CSOItemCriteriaCondition *>(to)->MergeFrom(
      static_cast<const CSOItemCriteriaCondition &>(from));
}


void CSOItemCriteriaCondition::MergeFrom(const CSOItemCriteriaCondition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSOItemCriteriaCondition)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_field(from._internal_field());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_string_value(from._internal_string_value());
    }
    if (cached_has_bits & 0x00000004u) {
      op_ = from.op_;
    }
    if (cached_has_bits & 0x00000008u) {
      required_ = from.required_;
    }
    if (cached_has_bits & 0x00000010u) {
      float_value_ = from.float_value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSOItemCriteriaCondition::CopyFrom(const CSOItemCriteriaCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSOItemCriteriaCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOItemCriteriaCondition::IsInitialized() const {
  return true;
}

void CSOItemCriteriaCondition::InternalSwap(CSOItemCriteriaCondition* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &field_, lhs_arena,
      &other->field_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &string_value_, lhs_arena,
      &other->string_value_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSOItemCriteriaCondition, float_value_)
      + sizeof(CSOItemCriteriaCondition::float_value_)
      - PROTOBUF_FIELD_OFFSET(CSOItemCriteriaCondition, op_)>(
          reinterpret_cast<char*>(&op_),
          reinterpret_cast<char*>(&other->op_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSOItemCriteriaCondition::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[14]);
}

// ===================================================================

class CSOItemCriteria::_Internal {
 public:
  using HasBits = decltype(std::declval<CSOItemCriteria>()._has_bits_);
  static void set_has_item_level(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_item_quality(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_item_level_set(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_item_quality_set(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_initial_inventory(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_initial_quantity(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ignore_enabled_flag(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_item_rarity(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_item_rarity_set(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_recent_only(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

CSOItemCriteria::CSOItemCriteria(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  conditions_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CSOItemCriteria)
}
CSOItemCriteria::CSOItemCriteria(const CSOItemCriteria& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      conditions_(from.conditions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&item_level_, &from.item_level_,
    static_cast<size_t>(reinterpret_cast<char*>(&recent_only_) -
    reinterpret_cast<char*>(&item_level_)) + sizeof(recent_only_));
  // @@protoc_insertion_point(copy_constructor:CSOItemCriteria)
}

void CSOItemCriteria::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&item_level_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&recent_only_) -
    reinterpret_cast<char*>(&item_level_)) + sizeof(recent_only_));
}

CSOItemCriteria::~CSOItemCriteria() {
  // @@protoc_insertion_point(destructor:CSOItemCriteria)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CSOItemCriteria::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CSOItemCriteria::ArenaDtor(void* object) {
  CSOItemCriteria* _this = reinterpret_cast< CSOItemCriteria* >(object);
  (void)_this;
}
void CSOItemCriteria::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSOItemCriteria::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSOItemCriteria::Clear() {
// @@protoc_insertion_point(message_clear_start:CSOItemCriteria)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  conditions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&item_level_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&item_rarity_set_) -
        reinterpret_cast<char*>(&item_level_)) + sizeof(item_rarity_set_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&item_rarity_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&recent_only_) -
        reinterpret_cast<char*>(&item_rarity_)) + sizeof(recent_only_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSOItemCriteria::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 item_level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_item_level(&has_bits);
          item_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 item_quality = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_item_quality(&has_bits);
          item_quality_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool item_level_set = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_item_level_set(&has_bits);
          item_level_set_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool item_quality_set = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_item_quality_set(&has_bits);
          item_quality_set_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 initial_inventory = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_initial_inventory(&has_bits);
          initial_inventory_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 initial_quantity = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_initial_quantity(&has_bits);
          initial_quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool ignore_enabled_flag = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_ignore_enabled_flag(&has_bits);
          ignore_enabled_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CSOItemCriteriaCondition conditions = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_conditions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional int32 item_rarity = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_item_rarity(&has_bits);
          item_rarity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool item_rarity_set = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_item_rarity_set(&has_bits);
          item_rarity_set_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool recent_only = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_recent_only(&has_bits);
          recent_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSOItemCriteria::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSOItemCriteria)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 item_level = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_item_level(), target);
  }

  // optional int32 item_quality = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_item_quality(), target);
  }

  // optional bool item_level_set = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_item_level_set(), target);
  }

  // optional bool item_quality_set = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_item_quality_set(), target);
  }

  // optional uint32 initial_inventory = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_initial_inventory(), target);
  }

  // optional uint32 initial_quantity = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_initial_quantity(), target);
  }

  // optional bool ignore_enabled_flag = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_ignore_enabled_flag(), target);
  }

  // repeated .CSOItemCriteriaCondition conditions = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_conditions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_conditions(i), target, stream);
  }

  // optional int32 item_rarity = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_item_rarity(), target);
  }

  // optional bool item_rarity_set = 11;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_item_rarity_set(), target);
  }

  // optional bool recent_only = 12;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_recent_only(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSOItemCriteria)
  return target;
}

size_t CSOItemCriteria::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSOItemCriteria)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CSOItemCriteriaCondition conditions = 9;
  total_size += 1UL * this->_internal_conditions_size();
  for (const auto& msg : this->conditions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 item_level = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_item_level());
    }

    // optional int32 item_quality = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_item_quality());
    }

    // optional uint32 initial_inventory = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_initial_inventory());
    }

    // optional uint32 initial_quantity = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_initial_quantity());
    }

    // optional bool item_level_set = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool item_quality_set = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool ignore_enabled_flag = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool item_rarity_set = 11;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional int32 item_rarity = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_item_rarity());
    }

    // optional bool recent_only = 12;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSOItemCriteria::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CSOItemCriteria::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSOItemCriteria::GetClassData() const { return &_class_data_; }

void CSOItemCriteria::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CSOItemCriteria *>(to)->MergeFrom(
      static_cast<const CSOItemCriteria &>(from));
}


void CSOItemCriteria::MergeFrom(const CSOItemCriteria& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSOItemCriteria)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  conditions_.MergeFrom(from.conditions_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      item_level_ = from.item_level_;
    }
    if (cached_has_bits & 0x00000002u) {
      item_quality_ = from.item_quality_;
    }
    if (cached_has_bits & 0x00000004u) {
      initial_inventory_ = from.initial_inventory_;
    }
    if (cached_has_bits & 0x00000008u) {
      initial_quantity_ = from.initial_quantity_;
    }
    if (cached_has_bits & 0x00000010u) {
      item_level_set_ = from.item_level_set_;
    }
    if (cached_has_bits & 0x00000020u) {
      item_quality_set_ = from.item_quality_set_;
    }
    if (cached_has_bits & 0x00000040u) {
      ignore_enabled_flag_ = from.ignore_enabled_flag_;
    }
    if (cached_has_bits & 0x00000080u) {
      item_rarity_set_ = from.item_rarity_set_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      item_rarity_ = from.item_rarity_;
    }
    if (cached_has_bits & 0x00000200u) {
      recent_only_ = from.recent_only_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSOItemCriteria::CopyFrom(const CSOItemCriteria& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSOItemCriteria)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOItemCriteria::IsInitialized() const {
  return true;
}

void CSOItemCriteria::InternalSwap(CSOItemCriteria* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  conditions_.InternalSwap(&other->conditions_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSOItemCriteria, recent_only_)
      + sizeof(CSOItemCriteria::recent_only_)
      - PROTOBUF_FIELD_OFFSET(CSOItemCriteria, item_level_)>(
          reinterpret_cast<char*>(&item_level_),
          reinterpret_cast<char*>(&other->item_level_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSOItemCriteria::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[15]);
}

// ===================================================================

class CSOItemRecipe::_Internal {
 public:
  using HasBits = decltype(std::declval<CSOItemRecipe>()._has_bits_);
  static void set_has_def_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_n_a(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_desc_inputs(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_desc_outputs(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_di_a(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_di_b(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_di_c(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_do_a(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_do_b(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_do_c(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_requires_all_same_class(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_requires_all_same_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_class_usage_for_output(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_slot_usage_for_output(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_set_for_output(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
};

CSOItemRecipe::CSOItemRecipe(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  input_items_criteria_(arena),
  output_items_criteria_(arena),
  input_item_dupe_counts_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CSOItemRecipe)
}
CSOItemRecipe::CSOItemRecipe(const CSOItemRecipe& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      input_items_criteria_(from.input_items_criteria_),
      output_items_criteria_(from.output_items_criteria_),
      input_item_dupe_counts_(from.input_item_dupe_counts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  n_a_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_n_a()) {
    n_a_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_n_a(), 
      GetArenaForAllocation());
  }
  desc_inputs_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_desc_inputs()) {
    desc_inputs_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_desc_inputs(), 
      GetArenaForAllocation());
  }
  desc_outputs_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_desc_outputs()) {
    desc_outputs_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_desc_outputs(), 
      GetArenaForAllocation());
  }
  di_a_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_di_a()) {
    di_a_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_di_a(), 
      GetArenaForAllocation());
  }
  di_b_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_di_b()) {
    di_b_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_di_b(), 
      GetArenaForAllocation());
  }
  di_c_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_di_c()) {
    di_c_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_di_c(), 
      GetArenaForAllocation());
  }
  do_a_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_do_a()) {
    do_a_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_do_a(), 
      GetArenaForAllocation());
  }
  do_b_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_do_b()) {
    do_b_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_do_b(), 
      GetArenaForAllocation());
  }
  do_c_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_do_c()) {
    do_c_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_do_c(), 
      GetArenaForAllocation());
  }
  ::memcpy(&def_index_, &from.def_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&set_for_output_) -
    reinterpret_cast<char*>(&def_index_)) + sizeof(set_for_output_));
  // @@protoc_insertion_point(copy_constructor:CSOItemRecipe)
}

void CSOItemRecipe::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
n_a_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
desc_inputs_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
desc_outputs_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
di_a_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
di_b_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
di_c_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
do_a_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
do_b_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
do_c_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&def_index_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&set_for_output_) -
    reinterpret_cast<char*>(&def_index_)) + sizeof(set_for_output_));
}

CSOItemRecipe::~CSOItemRecipe() {
  // @@protoc_insertion_point(destructor:CSOItemRecipe)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CSOItemRecipe::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  n_a_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  desc_inputs_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  desc_outputs_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  di_a_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  di_b_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  di_c_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  do_a_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  do_b_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  do_c_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CSOItemRecipe::ArenaDtor(void* object) {
  CSOItemRecipe* _this = reinterpret_cast< CSOItemRecipe* >(object);
  (void)_this;
}
void CSOItemRecipe::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSOItemRecipe::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSOItemRecipe::Clear() {
// @@protoc_insertion_point(message_clear_start:CSOItemRecipe)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  input_items_criteria_.Clear();
  output_items_criteria_.Clear();
  input_item_dupe_counts_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      n_a_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      desc_inputs_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      desc_outputs_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      di_a_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      di_b_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      di_c_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      do_a_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      do_b_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000200u) {
      do_c_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000fc00u) {
    ::memset(&def_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&set_for_output_) -
        reinterpret_cast<char*>(&def_index_)) + sizeof(set_for_output_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSOItemRecipe::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 def_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_def_index(&has_bits);
          def_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSOItemRecipe.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string n_a = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_n_a();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSOItemRecipe.n_a");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string desc_inputs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_desc_inputs();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSOItemRecipe.desc_inputs");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string desc_outputs = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_desc_outputs();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSOItemRecipe.desc_outputs");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string di_a = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_di_a();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSOItemRecipe.di_a");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string di_b = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_di_b();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSOItemRecipe.di_b");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string di_c = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_di_c();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSOItemRecipe.di_c");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string do_a = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_do_a();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSOItemRecipe.do_a");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string do_b = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_do_b();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSOItemRecipe.do_b");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string do_c = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_do_c();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSOItemRecipe.do_c");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool requires_all_same_class = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_requires_all_same_class(&has_bits);
          requires_all_same_class_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool requires_all_same_slot = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_requires_all_same_slot(&has_bits);
          requires_all_same_slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 class_usage_for_output = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_class_usage_for_output(&has_bits);
          class_usage_for_output_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 slot_usage_for_output = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_slot_usage_for_output(&has_bits);
          slot_usage_for_output_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 set_for_output = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_set_for_output(&has_bits);
          set_for_output_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CSOItemCriteria input_items_criteria = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_input_items_criteria(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .CSOItemCriteria output_items_criteria = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_output_items_criteria(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<170>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 input_item_dupe_counts = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_input_item_dupe_counts(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<176>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_input_item_dupe_counts(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSOItemRecipe::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSOItemRecipe)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 def_index = 1;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_def_index(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSOItemRecipe.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // optional string n_a = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_n_a().data(), static_cast<int>(this->_internal_n_a().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSOItemRecipe.n_a");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_n_a(), target);
  }

  // optional string desc_inputs = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_desc_inputs().data(), static_cast<int>(this->_internal_desc_inputs().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSOItemRecipe.desc_inputs");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_desc_inputs(), target);
  }

  // optional string desc_outputs = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_desc_outputs().data(), static_cast<int>(this->_internal_desc_outputs().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSOItemRecipe.desc_outputs");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_desc_outputs(), target);
  }

  // optional string di_a = 6;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_di_a().data(), static_cast<int>(this->_internal_di_a().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSOItemRecipe.di_a");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_di_a(), target);
  }

  // optional string di_b = 7;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_di_b().data(), static_cast<int>(this->_internal_di_b().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSOItemRecipe.di_b");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_di_b(), target);
  }

  // optional string di_c = 8;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_di_c().data(), static_cast<int>(this->_internal_di_c().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSOItemRecipe.di_c");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_di_c(), target);
  }

  // optional string do_a = 9;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_do_a().data(), static_cast<int>(this->_internal_do_a().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSOItemRecipe.do_a");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_do_a(), target);
  }

  // optional string do_b = 10;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_do_b().data(), static_cast<int>(this->_internal_do_b().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSOItemRecipe.do_b");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_do_b(), target);
  }

  // optional string do_c = 11;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_do_c().data(), static_cast<int>(this->_internal_do_c().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSOItemRecipe.do_c");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_do_c(), target);
  }

  // optional bool requires_all_same_class = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_requires_all_same_class(), target);
  }

  // optional bool requires_all_same_slot = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_requires_all_same_slot(), target);
  }

  // optional int32 class_usage_for_output = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_class_usage_for_output(), target);
  }

  // optional int32 slot_usage_for_output = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_slot_usage_for_output(), target);
  }

  // optional int32 set_for_output = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->_internal_set_for_output(), target);
  }

  // repeated .CSOItemCriteria input_items_criteria = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_input_items_criteria_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, this->_internal_input_items_criteria(i), target, stream);
  }

  // repeated .CSOItemCriteria output_items_criteria = 21;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_output_items_criteria_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, this->_internal_output_items_criteria(i), target, stream);
  }

  // repeated uint32 input_item_dupe_counts = 22;
  for (int i = 0, n = this->_internal_input_item_dupe_counts_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(22, this->_internal_input_item_dupe_counts(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSOItemRecipe)
  return target;
}

size_t CSOItemRecipe::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSOItemRecipe)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CSOItemCriteria input_items_criteria = 20;
  total_size += 2UL * this->_internal_input_items_criteria_size();
  for (const auto& msg : this->input_items_criteria_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CSOItemCriteria output_items_criteria = 21;
  total_size += 2UL * this->_internal_output_items_criteria_size();
  for (const auto& msg : this->output_items_criteria_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 input_item_dupe_counts = 22;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->input_item_dupe_counts_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_input_item_dupe_counts_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string n_a = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_n_a());
    }

    // optional string desc_inputs = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_desc_inputs());
    }

    // optional string desc_outputs = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_desc_outputs());
    }

    // optional string di_a = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_di_a());
    }

    // optional string di_b = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_di_b());
    }

    // optional string di_c = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_di_c());
    }

    // optional string do_a = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_do_a());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional string do_b = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_do_b());
    }

    // optional string do_c = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_do_c());
    }

    // optional uint32 def_index = 1;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_def_index());
    }

    // optional bool requires_all_same_class = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional bool requires_all_same_slot = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional int32 class_usage_for_output = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_class_usage_for_output());
    }

    // optional int32 slot_usage_for_output = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_slot_usage_for_output());
    }

    // optional int32 set_for_output = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_set_for_output());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSOItemRecipe::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CSOItemRecipe::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSOItemRecipe::GetClassData() const { return &_class_data_; }

void CSOItemRecipe::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CSOItemRecipe *>(to)->MergeFrom(
      static_cast<const CSOItemRecipe &>(from));
}


void CSOItemRecipe::MergeFrom(const CSOItemRecipe& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSOItemRecipe)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  input_items_criteria_.MergeFrom(from.input_items_criteria_);
  output_items_criteria_.MergeFrom(from.output_items_criteria_);
  input_item_dupe_counts_.MergeFrom(from.input_item_dupe_counts_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_n_a(from._internal_n_a());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_desc_inputs(from._internal_desc_inputs());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_desc_outputs(from._internal_desc_outputs());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_di_a(from._internal_di_a());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_di_b(from._internal_di_b());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_di_c(from._internal_di_c());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_set_do_a(from._internal_do_a());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_set_do_b(from._internal_do_b());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_set_do_c(from._internal_do_c());
    }
    if (cached_has_bits & 0x00000400u) {
      def_index_ = from.def_index_;
    }
    if (cached_has_bits & 0x00000800u) {
      requires_all_same_class_ = from.requires_all_same_class_;
    }
    if (cached_has_bits & 0x00001000u) {
      requires_all_same_slot_ = from.requires_all_same_slot_;
    }
    if (cached_has_bits & 0x00002000u) {
      class_usage_for_output_ = from.class_usage_for_output_;
    }
    if (cached_has_bits & 0x00004000u) {
      slot_usage_for_output_ = from.slot_usage_for_output_;
    }
    if (cached_has_bits & 0x00008000u) {
      set_for_output_ = from.set_for_output_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSOItemRecipe::CopyFrom(const CSOItemRecipe& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSOItemRecipe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOItemRecipe::IsInitialized() const {
  return true;
}

void CSOItemRecipe::InternalSwap(CSOItemRecipe* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  input_items_criteria_.InternalSwap(&other->input_items_criteria_);
  output_items_criteria_.InternalSwap(&other->output_items_criteria_);
  input_item_dupe_counts_.InternalSwap(&other->input_item_dupe_counts_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &n_a_, lhs_arena,
      &other->n_a_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &desc_inputs_, lhs_arena,
      &other->desc_inputs_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &desc_outputs_, lhs_arena,
      &other->desc_outputs_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &di_a_, lhs_arena,
      &other->di_a_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &di_b_, lhs_arena,
      &other->di_b_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &di_c_, lhs_arena,
      &other->di_c_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &do_a_, lhs_arena,
      &other->do_a_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &do_b_, lhs_arena,
      &other->do_b_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &do_c_, lhs_arena,
      &other->do_c_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSOItemRecipe, set_for_output_)
      + sizeof(CSOItemRecipe::set_for_output_)
      - PROTOBUF_FIELD_OFFSET(CSOItemRecipe, def_index_)>(
          reinterpret_cast<char*>(&def_index_),
          reinterpret_cast<char*>(&other->def_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSOItemRecipe::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[16]);
}

// ===================================================================

class CMsgDevNewItemRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDevNewItemRequest>()._has_bits_);
  static void set_has_receiver(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CSOItemCriteria& criteria(const CMsgDevNewItemRequest* msg);
  static void set_has_criteria(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CSOItemCriteria&
CMsgDevNewItemRequest::_Internal::criteria(const CMsgDevNewItemRequest* msg) {
  return *msg->criteria_;
}
CMsgDevNewItemRequest::CMsgDevNewItemRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgDevNewItemRequest)
}
CMsgDevNewItemRequest::CMsgDevNewItemRequest(const CMsgDevNewItemRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_criteria()) {
    criteria_ = new ::CSOItemCriteria(*from.criteria_);
  } else {
    criteria_ = nullptr;
  }
  receiver_ = from.receiver_;
  // @@protoc_insertion_point(copy_constructor:CMsgDevNewItemRequest)
}

void CMsgDevNewItemRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&criteria_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&receiver_) -
    reinterpret_cast<char*>(&criteria_)) + sizeof(receiver_));
}

CMsgDevNewItemRequest::~CMsgDevNewItemRequest() {
  // @@protoc_insertion_point(destructor:CMsgDevNewItemRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgDevNewItemRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete criteria_;
}

void CMsgDevNewItemRequest::ArenaDtor(void* object) {
  CMsgDevNewItemRequest* _this = reinterpret_cast< CMsgDevNewItemRequest* >(object);
  (void)_this;
}
void CMsgDevNewItemRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDevNewItemRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDevNewItemRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDevNewItemRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(criteria_ != nullptr);
    criteria_->Clear();
  }
  receiver_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDevNewItemRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 receiver = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_receiver(&has_bits);
          receiver_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else
          goto handle_unusual;
        continue;
      // optional .CSOItemCriteria criteria = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_criteria(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDevNewItemRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDevNewItemRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 receiver = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_receiver(), target);
  }

  // optional .CSOItemCriteria criteria = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::criteria(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDevNewItemRequest)
  return target;
}

size_t CMsgDevNewItemRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDevNewItemRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CSOItemCriteria criteria = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *criteria_);
    }

    // optional fixed64 receiver = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDevNewItemRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgDevNewItemRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDevNewItemRequest::GetClassData() const { return &_class_data_; }

void CMsgDevNewItemRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgDevNewItemRequest *>(to)->MergeFrom(
      static_cast<const CMsgDevNewItemRequest &>(from));
}


void CMsgDevNewItemRequest::MergeFrom(const CMsgDevNewItemRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDevNewItemRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_criteria()->::CSOItemCriteria::MergeFrom(from._internal_criteria());
    }
    if (cached_has_bits & 0x00000002u) {
      receiver_ = from.receiver_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDevNewItemRequest::CopyFrom(const CMsgDevNewItemRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDevNewItemRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDevNewItemRequest::IsInitialized() const {
  return true;
}

void CMsgDevNewItemRequest::InternalSwap(CMsgDevNewItemRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDevNewItemRequest, receiver_)
      + sizeof(CMsgDevNewItemRequest::receiver_)
      - PROTOBUF_FIELD_OFFSET(CMsgDevNewItemRequest, criteria_)>(
          reinterpret_cast<char*>(&criteria_),
          reinterpret_cast<char*>(&other->criteria_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDevNewItemRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[17]);
}

// ===================================================================

class CMsgIncrementKillCountAttribute::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgIncrementKillCountAttribute>()._has_bits_);
  static void set_has_killer_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_victim_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_event_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_amount(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgIncrementKillCountAttribute::CMsgIncrementKillCountAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgIncrementKillCountAttribute)
}
CMsgIncrementKillCountAttribute::CMsgIncrementKillCountAttribute(const CMsgIncrementKillCountAttribute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&killer_account_id_, &from.killer_account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&amount_) -
    reinterpret_cast<char*>(&killer_account_id_)) + sizeof(amount_));
  // @@protoc_insertion_point(copy_constructor:CMsgIncrementKillCountAttribute)
}

void CMsgIncrementKillCountAttribute::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&killer_account_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&amount_) -
    reinterpret_cast<char*>(&killer_account_id_)) + sizeof(amount_));
}

CMsgIncrementKillCountAttribute::~CMsgIncrementKillCountAttribute() {
  // @@protoc_insertion_point(destructor:CMsgIncrementKillCountAttribute)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgIncrementKillCountAttribute::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgIncrementKillCountAttribute::ArenaDtor(void* object) {
  CMsgIncrementKillCountAttribute* _this = reinterpret_cast< CMsgIncrementKillCountAttribute* >(object);
  (void)_this;
}
void CMsgIncrementKillCountAttribute::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgIncrementKillCountAttribute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgIncrementKillCountAttribute::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgIncrementKillCountAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&killer_account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&amount_) -
        reinterpret_cast<char*>(&killer_account_id_)) + sizeof(amount_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgIncrementKillCountAttribute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed32 killer_account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_killer_account_id(&has_bits);
          killer_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else
          goto handle_unusual;
        continue;
      // optional fixed32 victim_account_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_victim_account_id(&has_bits);
          victim_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 item_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_item_id(&has_bits);
          item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 event_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_event_type(&has_bits);
          event_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 amount = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_amount(&has_bits);
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgIncrementKillCountAttribute::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgIncrementKillCountAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 killer_account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(1, this->_internal_killer_account_id(), target);
  }

  // optional fixed32 victim_account_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(2, this->_internal_victim_account_id(), target);
  }

  // optional uint64 item_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_item_id(), target);
  }

  // optional uint32 event_type = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_event_type(), target);
  }

  // optional uint32 amount = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgIncrementKillCountAttribute)
  return target;
}

size_t CMsgIncrementKillCountAttribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgIncrementKillCountAttribute)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional fixed32 killer_account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional fixed32 victim_account_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional uint64 item_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_item_id());
    }

    // optional uint32 event_type = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_event_type());
    }

    // optional uint32 amount = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_amount());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgIncrementKillCountAttribute::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgIncrementKillCountAttribute::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgIncrementKillCountAttribute::GetClassData() const { return &_class_data_; }

void CMsgIncrementKillCountAttribute::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgIncrementKillCountAttribute *>(to)->MergeFrom(
      static_cast<const CMsgIncrementKillCountAttribute &>(from));
}


void CMsgIncrementKillCountAttribute::MergeFrom(const CMsgIncrementKillCountAttribute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgIncrementKillCountAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      killer_account_id_ = from.killer_account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      victim_account_id_ = from.victim_account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      item_id_ = from.item_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      event_type_ = from.event_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      amount_ = from.amount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgIncrementKillCountAttribute::CopyFrom(const CMsgIncrementKillCountAttribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgIncrementKillCountAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgIncrementKillCountAttribute::IsInitialized() const {
  return true;
}

void CMsgIncrementKillCountAttribute::InternalSwap(CMsgIncrementKillCountAttribute* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgIncrementKillCountAttribute, amount_)
      + sizeof(CMsgIncrementKillCountAttribute::amount_)
      - PROTOBUF_FIELD_OFFSET(CMsgIncrementKillCountAttribute, killer_account_id_)>(
          reinterpret_cast<char*>(&killer_account_id_),
          reinterpret_cast<char*>(&other->killer_account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgIncrementKillCountAttribute::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[18]);
}

// ===================================================================

class CMsgApplySticker::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgApplySticker>()._has_bits_);
  static void set_has_sticker_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_item_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_sticker_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_baseitem_defidx(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_sticker_wear(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgApplySticker::CMsgApplySticker(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgApplySticker)
}
CMsgApplySticker::CMsgApplySticker(const CMsgApplySticker& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&sticker_item_id_, &from.sticker_item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&sticker_wear_) -
    reinterpret_cast<char*>(&sticker_item_id_)) + sizeof(sticker_wear_));
  // @@protoc_insertion_point(copy_constructor:CMsgApplySticker)
}

void CMsgApplySticker::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&sticker_item_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sticker_wear_) -
    reinterpret_cast<char*>(&sticker_item_id_)) + sizeof(sticker_wear_));
}

CMsgApplySticker::~CMsgApplySticker() {
  // @@protoc_insertion_point(destructor:CMsgApplySticker)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgApplySticker::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgApplySticker::ArenaDtor(void* object) {
  CMsgApplySticker* _this = reinterpret_cast< CMsgApplySticker* >(object);
  (void)_this;
}
void CMsgApplySticker::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgApplySticker::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgApplySticker::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgApplySticker)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&sticker_item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sticker_wear_) -
        reinterpret_cast<char*>(&sticker_item_id_)) + sizeof(sticker_wear_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgApplySticker::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 sticker_item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_sticker_item_id(&has_bits);
          sticker_item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 item_item_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_item_item_id(&has_bits);
          item_item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 sticker_slot = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_sticker_slot(&has_bits);
          sticker_slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 baseitem_defidx = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_baseitem_defidx(&has_bits);
          baseitem_defidx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float sticker_wear = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_sticker_wear(&has_bits);
          sticker_wear_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgApplySticker::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgApplySticker)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 sticker_item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_sticker_item_id(), target);
  }

  // optional uint64 item_item_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_item_item_id(), target);
  }

  // optional uint32 sticker_slot = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_sticker_slot(), target);
  }

  // optional uint32 baseitem_defidx = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_baseitem_defidx(), target);
  }

  // optional float sticker_wear = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_sticker_wear(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgApplySticker)
  return target;
}

size_t CMsgApplySticker::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgApplySticker)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint64 sticker_item_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_sticker_item_id());
    }

    // optional uint64 item_item_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_item_item_id());
    }

    // optional uint32 sticker_slot = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_sticker_slot());
    }

    // optional uint32 baseitem_defidx = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_baseitem_defidx());
    }

    // optional float sticker_wear = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgApplySticker::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgApplySticker::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgApplySticker::GetClassData() const { return &_class_data_; }

void CMsgApplySticker::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgApplySticker *>(to)->MergeFrom(
      static_cast<const CMsgApplySticker &>(from));
}


void CMsgApplySticker::MergeFrom(const CMsgApplySticker& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgApplySticker)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      sticker_item_id_ = from.sticker_item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      item_item_id_ = from.item_item_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      sticker_slot_ = from.sticker_slot_;
    }
    if (cached_has_bits & 0x00000008u) {
      baseitem_defidx_ = from.baseitem_defidx_;
    }
    if (cached_has_bits & 0x00000010u) {
      sticker_wear_ = from.sticker_wear_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgApplySticker::CopyFrom(const CMsgApplySticker& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgApplySticker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgApplySticker::IsInitialized() const {
  return true;
}

void CMsgApplySticker::InternalSwap(CMsgApplySticker* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgApplySticker, sticker_wear_)
      + sizeof(CMsgApplySticker::sticker_wear_)
      - PROTOBUF_FIELD_OFFSET(CMsgApplySticker, sticker_item_id_)>(
          reinterpret_cast<char*>(&sticker_item_id_),
          reinterpret_cast<char*>(&other->sticker_item_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgApplySticker::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[19]);
}

// ===================================================================

class CMsgApplyStatTrakSwap::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgApplyStatTrakSwap>()._has_bits_);
  static void set_has_tool_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_item_1_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_item_2_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgApplyStatTrakSwap::CMsgApplyStatTrakSwap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgApplyStatTrakSwap)
}
CMsgApplyStatTrakSwap::CMsgApplyStatTrakSwap(const CMsgApplyStatTrakSwap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&tool_item_id_, &from.tool_item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&item_2_item_id_) -
    reinterpret_cast<char*>(&tool_item_id_)) + sizeof(item_2_item_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgApplyStatTrakSwap)
}

void CMsgApplyStatTrakSwap::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&tool_item_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&item_2_item_id_) -
    reinterpret_cast<char*>(&tool_item_id_)) + sizeof(item_2_item_id_));
}

CMsgApplyStatTrakSwap::~CMsgApplyStatTrakSwap() {
  // @@protoc_insertion_point(destructor:CMsgApplyStatTrakSwap)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgApplyStatTrakSwap::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgApplyStatTrakSwap::ArenaDtor(void* object) {
  CMsgApplyStatTrakSwap* _this = reinterpret_cast< CMsgApplyStatTrakSwap* >(object);
  (void)_this;
}
void CMsgApplyStatTrakSwap::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgApplyStatTrakSwap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgApplyStatTrakSwap::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgApplyStatTrakSwap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&tool_item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&item_2_item_id_) -
        reinterpret_cast<char*>(&tool_item_id_)) + sizeof(item_2_item_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgApplyStatTrakSwap::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 tool_item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_tool_item_id(&has_bits);
          tool_item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 item_1_item_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_item_1_item_id(&has_bits);
          item_1_item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 item_2_item_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_item_2_item_id(&has_bits);
          item_2_item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgApplyStatTrakSwap::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgApplyStatTrakSwap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 tool_item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_tool_item_id(), target);
  }

  // optional uint64 item_1_item_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_item_1_item_id(), target);
  }

  // optional uint64 item_2_item_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_item_2_item_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgApplyStatTrakSwap)
  return target;
}

size_t CMsgApplyStatTrakSwap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgApplyStatTrakSwap)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 tool_item_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_tool_item_id());
    }

    // optional uint64 item_1_item_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_item_1_item_id());
    }

    // optional uint64 item_2_item_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_item_2_item_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgApplyStatTrakSwap::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgApplyStatTrakSwap::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgApplyStatTrakSwap::GetClassData() const { return &_class_data_; }

void CMsgApplyStatTrakSwap::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgApplyStatTrakSwap *>(to)->MergeFrom(
      static_cast<const CMsgApplyStatTrakSwap &>(from));
}


void CMsgApplyStatTrakSwap::MergeFrom(const CMsgApplyStatTrakSwap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgApplyStatTrakSwap)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      tool_item_id_ = from.tool_item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      item_1_item_id_ = from.item_1_item_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      item_2_item_id_ = from.item_2_item_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgApplyStatTrakSwap::CopyFrom(const CMsgApplyStatTrakSwap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgApplyStatTrakSwap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgApplyStatTrakSwap::IsInitialized() const {
  return true;
}

void CMsgApplyStatTrakSwap::InternalSwap(CMsgApplyStatTrakSwap* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgApplyStatTrakSwap, item_2_item_id_)
      + sizeof(CMsgApplyStatTrakSwap::item_2_item_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgApplyStatTrakSwap, tool_item_id_)>(
          reinterpret_cast<char*>(&tool_item_id_),
          reinterpret_cast<char*>(&other->tool_item_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgApplyStatTrakSwap::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[20]);
}

// ===================================================================

class CMsgApplyStrangePart::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgApplyStrangePart>()._has_bits_);
  static void set_has_strange_part_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_item_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgApplyStrangePart::CMsgApplyStrangePart(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgApplyStrangePart)
}
CMsgApplyStrangePart::CMsgApplyStrangePart(const CMsgApplyStrangePart& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&strange_part_item_id_, &from.strange_part_item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&item_item_id_) -
    reinterpret_cast<char*>(&strange_part_item_id_)) + sizeof(item_item_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgApplyStrangePart)
}

void CMsgApplyStrangePart::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&strange_part_item_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&item_item_id_) -
    reinterpret_cast<char*>(&strange_part_item_id_)) + sizeof(item_item_id_));
}

CMsgApplyStrangePart::~CMsgApplyStrangePart() {
  // @@protoc_insertion_point(destructor:CMsgApplyStrangePart)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgApplyStrangePart::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgApplyStrangePart::ArenaDtor(void* object) {
  CMsgApplyStrangePart* _this = reinterpret_cast< CMsgApplyStrangePart* >(object);
  (void)_this;
}
void CMsgApplyStrangePart::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgApplyStrangePart::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgApplyStrangePart::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgApplyStrangePart)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&strange_part_item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&item_item_id_) -
        reinterpret_cast<char*>(&strange_part_item_id_)) + sizeof(item_item_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgApplyStrangePart::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 strange_part_item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_strange_part_item_id(&has_bits);
          strange_part_item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 item_item_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_item_item_id(&has_bits);
          item_item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgApplyStrangePart::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgApplyStrangePart)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 strange_part_item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_strange_part_item_id(), target);
  }

  // optional uint64 item_item_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_item_item_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgApplyStrangePart)
  return target;
}

size_t CMsgApplyStrangePart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgApplyStrangePart)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 strange_part_item_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_strange_part_item_id());
    }

    // optional uint64 item_item_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_item_item_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgApplyStrangePart::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgApplyStrangePart::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgApplyStrangePart::GetClassData() const { return &_class_data_; }

void CMsgApplyStrangePart::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgApplyStrangePart *>(to)->MergeFrom(
      static_cast<const CMsgApplyStrangePart &>(from));
}


void CMsgApplyStrangePart::MergeFrom(const CMsgApplyStrangePart& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgApplyStrangePart)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      strange_part_item_id_ = from.strange_part_item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      item_item_id_ = from.item_item_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgApplyStrangePart::CopyFrom(const CMsgApplyStrangePart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgApplyStrangePart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgApplyStrangePart::IsInitialized() const {
  return true;
}

void CMsgApplyStrangePart::InternalSwap(CMsgApplyStrangePart* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgApplyStrangePart, item_item_id_)
      + sizeof(CMsgApplyStrangePart::item_item_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgApplyStrangePart, strange_part_item_id_)>(
          reinterpret_cast<char*>(&strange_part_item_id_),
          reinterpret_cast<char*>(&other->strange_part_item_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgApplyStrangePart::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[21]);
}

// ===================================================================

class CMsgApplyPennantUpgrade::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgApplyPennantUpgrade>()._has_bits_);
  static void set_has_upgrade_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pennant_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgApplyPennantUpgrade::CMsgApplyPennantUpgrade(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgApplyPennantUpgrade)
}
CMsgApplyPennantUpgrade::CMsgApplyPennantUpgrade(const CMsgApplyPennantUpgrade& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&upgrade_item_id_, &from.upgrade_item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&pennant_item_id_) -
    reinterpret_cast<char*>(&upgrade_item_id_)) + sizeof(pennant_item_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgApplyPennantUpgrade)
}

void CMsgApplyPennantUpgrade::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&upgrade_item_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&pennant_item_id_) -
    reinterpret_cast<char*>(&upgrade_item_id_)) + sizeof(pennant_item_id_));
}

CMsgApplyPennantUpgrade::~CMsgApplyPennantUpgrade() {
  // @@protoc_insertion_point(destructor:CMsgApplyPennantUpgrade)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgApplyPennantUpgrade::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgApplyPennantUpgrade::ArenaDtor(void* object) {
  CMsgApplyPennantUpgrade* _this = reinterpret_cast< CMsgApplyPennantUpgrade* >(object);
  (void)_this;
}
void CMsgApplyPennantUpgrade::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgApplyPennantUpgrade::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgApplyPennantUpgrade::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgApplyPennantUpgrade)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&upgrade_item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pennant_item_id_) -
        reinterpret_cast<char*>(&upgrade_item_id_)) + sizeof(pennant_item_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgApplyPennantUpgrade::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 upgrade_item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_upgrade_item_id(&has_bits);
          upgrade_item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 pennant_item_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_pennant_item_id(&has_bits);
          pennant_item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgApplyPennantUpgrade::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgApplyPennantUpgrade)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 upgrade_item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_upgrade_item_id(), target);
  }

  // optional uint64 pennant_item_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_pennant_item_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgApplyPennantUpgrade)
  return target;
}

size_t CMsgApplyPennantUpgrade::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgApplyPennantUpgrade)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 upgrade_item_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_upgrade_item_id());
    }

    // optional uint64 pennant_item_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_pennant_item_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgApplyPennantUpgrade::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgApplyPennantUpgrade::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgApplyPennantUpgrade::GetClassData() const { return &_class_data_; }

void CMsgApplyPennantUpgrade::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgApplyPennantUpgrade *>(to)->MergeFrom(
      static_cast<const CMsgApplyPennantUpgrade &>(from));
}


void CMsgApplyPennantUpgrade::MergeFrom(const CMsgApplyPennantUpgrade& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgApplyPennantUpgrade)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      upgrade_item_id_ = from.upgrade_item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      pennant_item_id_ = from.pennant_item_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgApplyPennantUpgrade::CopyFrom(const CMsgApplyPennantUpgrade& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgApplyPennantUpgrade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgApplyPennantUpgrade::IsInitialized() const {
  return true;
}

void CMsgApplyPennantUpgrade::InternalSwap(CMsgApplyPennantUpgrade* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgApplyPennantUpgrade, pennant_item_id_)
      + sizeof(CMsgApplyPennantUpgrade::pennant_item_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgApplyPennantUpgrade, upgrade_item_id_)>(
          reinterpret_cast<char*>(&upgrade_item_id_),
          reinterpret_cast<char*>(&other->upgrade_item_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgApplyPennantUpgrade::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[22]);
}

// ===================================================================

class CMsgApplyEggEssence::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgApplyEggEssence>()._has_bits_);
  static void set_has_essence_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_egg_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgApplyEggEssence::CMsgApplyEggEssence(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgApplyEggEssence)
}
CMsgApplyEggEssence::CMsgApplyEggEssence(const CMsgApplyEggEssence& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&essence_item_id_, &from.essence_item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&egg_item_id_) -
    reinterpret_cast<char*>(&essence_item_id_)) + sizeof(egg_item_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgApplyEggEssence)
}

void CMsgApplyEggEssence::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&essence_item_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&egg_item_id_) -
    reinterpret_cast<char*>(&essence_item_id_)) + sizeof(egg_item_id_));
}

CMsgApplyEggEssence::~CMsgApplyEggEssence() {
  // @@protoc_insertion_point(destructor:CMsgApplyEggEssence)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgApplyEggEssence::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgApplyEggEssence::ArenaDtor(void* object) {
  CMsgApplyEggEssence* _this = reinterpret_cast< CMsgApplyEggEssence* >(object);
  (void)_this;
}
void CMsgApplyEggEssence::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgApplyEggEssence::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgApplyEggEssence::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgApplyEggEssence)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&essence_item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&egg_item_id_) -
        reinterpret_cast<char*>(&essence_item_id_)) + sizeof(egg_item_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgApplyEggEssence::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 essence_item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_essence_item_id(&has_bits);
          essence_item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 egg_item_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_egg_item_id(&has_bits);
          egg_item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgApplyEggEssence::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgApplyEggEssence)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 essence_item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_essence_item_id(), target);
  }

  // optional uint64 egg_item_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_egg_item_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgApplyEggEssence)
  return target;
}

size_t CMsgApplyEggEssence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgApplyEggEssence)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 essence_item_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_essence_item_id());
    }

    // optional uint64 egg_item_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_egg_item_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgApplyEggEssence::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgApplyEggEssence::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgApplyEggEssence::GetClassData() const { return &_class_data_; }

void CMsgApplyEggEssence::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgApplyEggEssence *>(to)->MergeFrom(
      static_cast<const CMsgApplyEggEssence &>(from));
}


void CMsgApplyEggEssence::MergeFrom(const CMsgApplyEggEssence& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgApplyEggEssence)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      essence_item_id_ = from.essence_item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      egg_item_id_ = from.egg_item_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgApplyEggEssence::CopyFrom(const CMsgApplyEggEssence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgApplyEggEssence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgApplyEggEssence::IsInitialized() const {
  return true;
}

void CMsgApplyEggEssence::InternalSwap(CMsgApplyEggEssence* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgApplyEggEssence, egg_item_id_)
      + sizeof(CMsgApplyEggEssence::egg_item_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgApplyEggEssence, essence_item_id_)>(
          reinterpret_cast<char*>(&essence_item_id_),
          reinterpret_cast<char*>(&other->essence_item_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgApplyEggEssence::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[23]);
}

// ===================================================================

class CSOEconItemAttribute::_Internal {
 public:
  using HasBits = decltype(std::declval<CSOEconItemAttribute>()._has_bits_);
  static void set_has_def_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_value_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CSOEconItemAttribute::CSOEconItemAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CSOEconItemAttribute)
}
CSOEconItemAttribute::CSOEconItemAttribute(const CSOEconItemAttribute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_value_bytes()) {
    value_bytes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value_bytes(), 
      GetArenaForAllocation());
  }
  ::memcpy(&def_index_, &from.def_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&def_index_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:CSOEconItemAttribute)
}

void CSOEconItemAttribute::SharedCtor() {
value_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&def_index_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&def_index_)) + sizeof(value_));
}

CSOEconItemAttribute::~CSOEconItemAttribute() {
  // @@protoc_insertion_point(destructor:CSOEconItemAttribute)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CSOEconItemAttribute::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  value_bytes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CSOEconItemAttribute::ArenaDtor(void* object) {
  CSOEconItemAttribute* _this = reinterpret_cast< CSOEconItemAttribute* >(object);
  (void)_this;
}
void CSOEconItemAttribute::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSOEconItemAttribute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSOEconItemAttribute::Clear() {
// @@protoc_insertion_point(message_clear_start:CSOEconItemAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    value_bytes_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&def_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&value_) -
        reinterpret_cast<char*>(&def_index_)) + sizeof(value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSOEconItemAttribute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 def_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_def_index(&has_bits);
          def_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes value_bytes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_value_bytes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSOEconItemAttribute::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSOEconItemAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 def_index = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_def_index(), target);
  }

  // optional uint32 value = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_value(), target);
  }

  // optional bytes value_bytes = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_value_bytes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSOEconItemAttribute)
  return target;
}

size_t CSOEconItemAttribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSOEconItemAttribute)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes value_bytes = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_value_bytes());
    }

    // optional uint32 def_index = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_def_index());
    }

    // optional uint32 value = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_value());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSOEconItemAttribute::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CSOEconItemAttribute::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSOEconItemAttribute::GetClassData() const { return &_class_data_; }

void CSOEconItemAttribute::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CSOEconItemAttribute *>(to)->MergeFrom(
      static_cast<const CSOEconItemAttribute &>(from));
}


void CSOEconItemAttribute::MergeFrom(const CSOEconItemAttribute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSOEconItemAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_value_bytes(from._internal_value_bytes());
    }
    if (cached_has_bits & 0x00000002u) {
      def_index_ = from.def_index_;
    }
    if (cached_has_bits & 0x00000004u) {
      value_ = from.value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSOEconItemAttribute::CopyFrom(const CSOEconItemAttribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSOEconItemAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOEconItemAttribute::IsInitialized() const {
  return true;
}

void CSOEconItemAttribute::InternalSwap(CSOEconItemAttribute* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_bytes_, lhs_arena,
      &other->value_bytes_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSOEconItemAttribute, value_)
      + sizeof(CSOEconItemAttribute::value_)
      - PROTOBUF_FIELD_OFFSET(CSOEconItemAttribute, def_index_)>(
          reinterpret_cast<char*>(&def_index_),
          reinterpret_cast<char*>(&other->def_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSOEconItemAttribute::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[24]);
}

// ===================================================================

class CSOEconItemEquipped::_Internal {
 public:
  using HasBits = decltype(std::declval<CSOEconItemEquipped>()._has_bits_);
  static void set_has_new_class(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_new_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CSOEconItemEquipped::CSOEconItemEquipped(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CSOEconItemEquipped)
}
CSOEconItemEquipped::CSOEconItemEquipped(const CSOEconItemEquipped& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&new_class_, &from.new_class_,
    static_cast<size_t>(reinterpret_cast<char*>(&new_slot_) -
    reinterpret_cast<char*>(&new_class_)) + sizeof(new_slot_));
  // @@protoc_insertion_point(copy_constructor:CSOEconItemEquipped)
}

void CSOEconItemEquipped::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&new_class_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&new_slot_) -
    reinterpret_cast<char*>(&new_class_)) + sizeof(new_slot_));
}

CSOEconItemEquipped::~CSOEconItemEquipped() {
  // @@protoc_insertion_point(destructor:CSOEconItemEquipped)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CSOEconItemEquipped::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CSOEconItemEquipped::ArenaDtor(void* object) {
  CSOEconItemEquipped* _this = reinterpret_cast< CSOEconItemEquipped* >(object);
  (void)_this;
}
void CSOEconItemEquipped::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSOEconItemEquipped::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSOEconItemEquipped::Clear() {
// @@protoc_insertion_point(message_clear_start:CSOEconItemEquipped)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&new_class_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&new_slot_) -
        reinterpret_cast<char*>(&new_class_)) + sizeof(new_slot_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSOEconItemEquipped::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 new_class = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_new_class(&has_bits);
          new_class_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 new_slot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_new_slot(&has_bits);
          new_slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSOEconItemEquipped::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSOEconItemEquipped)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 new_class = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_new_class(), target);
  }

  // optional uint32 new_slot = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_new_slot(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSOEconItemEquipped)
  return target;
}

size_t CSOEconItemEquipped::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSOEconItemEquipped)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 new_class = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_new_class());
    }

    // optional uint32 new_slot = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_new_slot());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSOEconItemEquipped::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CSOEconItemEquipped::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSOEconItemEquipped::GetClassData() const { return &_class_data_; }

void CSOEconItemEquipped::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CSOEconItemEquipped *>(to)->MergeFrom(
      static_cast<const CSOEconItemEquipped &>(from));
}


void CSOEconItemEquipped::MergeFrom(const CSOEconItemEquipped& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSOEconItemEquipped)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      new_class_ = from.new_class_;
    }
    if (cached_has_bits & 0x00000002u) {
      new_slot_ = from.new_slot_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSOEconItemEquipped::CopyFrom(const CSOEconItemEquipped& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSOEconItemEquipped)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOEconItemEquipped::IsInitialized() const {
  return true;
}

void CSOEconItemEquipped::InternalSwap(CSOEconItemEquipped* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSOEconItemEquipped, new_slot_)
      + sizeof(CSOEconItemEquipped::new_slot_)
      - PROTOBUF_FIELD_OFFSET(CSOEconItemEquipped, new_class_)>(
          reinterpret_cast<char*>(&new_class_),
          reinterpret_cast<char*>(&other->new_class_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSOEconItemEquipped::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[25]);
}

// ===================================================================

class CSOEconItem::_Internal {
 public:
  using HasBits = decltype(std::declval<CSOEconItem>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_inventory(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_def_index(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_quantity(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_quality(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_origin(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_custom_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_custom_desc(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CSOEconItem& interior_item(const CSOEconItem* msg);
  static void set_has_interior_item(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_in_use(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_style(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_original_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_rarity(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
};

const ::CSOEconItem&
CSOEconItem::_Internal::interior_item(const CSOEconItem* msg) {
  return *msg->interior_item_;
}
CSOEconItem::CSOEconItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  attribute_(arena),
  equipped_state_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CSOEconItem)
}
CSOEconItem::CSOEconItem(const CSOEconItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      attribute_(from.attribute_),
      equipped_state_(from.equipped_state_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  custom_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_custom_name()) {
    custom_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_custom_name(), 
      GetArenaForAllocation());
  }
  custom_desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_custom_desc()) {
    custom_desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_custom_desc(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_interior_item()) {
    interior_item_ = new ::CSOEconItem(*from.interior_item_);
  } else {
    interior_item_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&rarity_) -
    reinterpret_cast<char*>(&id_)) + sizeof(rarity_));
  // @@protoc_insertion_point(copy_constructor:CSOEconItem)
}

void CSOEconItem::SharedCtor() {
custom_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
custom_desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&interior_item_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&rarity_) -
    reinterpret_cast<char*>(&interior_item_)) + sizeof(rarity_));
}

CSOEconItem::~CSOEconItem() {
  // @@protoc_insertion_point(destructor:CSOEconItem)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CSOEconItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  custom_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  custom_desc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete interior_item_;
}

void CSOEconItem::ArenaDtor(void* object) {
  CSOEconItem* _this = reinterpret_cast< CSOEconItem* >(object);
  (void)_this;
}
void CSOEconItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSOEconItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSOEconItem::Clear() {
// @@protoc_insertion_point(message_clear_start:CSOEconItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attribute_.Clear();
  equipped_state_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      custom_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      custom_desc_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(interior_item_ != nullptr);
      interior_item_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&quantity_) -
        reinterpret_cast<char*>(&id_)) + sizeof(quantity_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&level_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rarity_) -
        reinterpret_cast<char*>(&level_)) + sizeof(rarity_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSOEconItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 account_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 inventory = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_inventory(&has_bits);
          inventory_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 def_index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_def_index(&has_bits);
          def_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 quantity = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_quantity(&has_bits);
          quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 level = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_level(&has_bits);
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 quality = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_quality(&has_bits);
          quality_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 flags = 8 [default = 0];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_flags(&has_bits);
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 origin = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_origin(&has_bits);
          origin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string custom_name = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_custom_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSOEconItem.custom_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string custom_desc = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_custom_desc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSOEconItem.custom_desc");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CSOEconItemAttribute attribute = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attribute(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .CSOEconItem interior_item = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_interior_item(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool in_use = 14 [default = false];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_in_use(&has_bits);
          in_use_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 style = 15 [default = 0];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_style(&has_bits);
          style_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 original_id = 16 [default = 0];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_original_id(&has_bits);
          original_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CSOEconItemEquipped equipped_state = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_equipped_state(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 rarity = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_rarity(&has_bits);
          rarity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSOEconItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSOEconItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // optional uint32 account_id = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_account_id(), target);
  }

  // optional uint32 inventory = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_inventory(), target);
  }

  // optional uint32 def_index = 4;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_def_index(), target);
  }

  // optional uint32 quantity = 5;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_quantity(), target);
  }

  // optional uint32 level = 6;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_level(), target);
  }

  // optional uint32 quality = 7;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_quality(), target);
  }

  // optional uint32 flags = 8 [default = 0];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_flags(), target);
  }

  // optional uint32 origin = 9;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_origin(), target);
  }

  // optional string custom_name = 10;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_custom_name().data(), static_cast<int>(this->_internal_custom_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSOEconItem.custom_name");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_custom_name(), target);
  }

  // optional string custom_desc = 11;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_custom_desc().data(), static_cast<int>(this->_internal_custom_desc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSOEconItem.custom_desc");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_custom_desc(), target);
  }

  // repeated .CSOEconItemAttribute attribute = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attribute_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_attribute(i), target, stream);
  }

  // optional .CSOEconItem interior_item = 13;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::interior_item(this), target, stream);
  }

  // optional bool in_use = 14 [default = false];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_in_use(), target);
  }

  // optional uint32 style = 15 [default = 0];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_style(), target);
  }

  // optional uint64 original_id = 16 [default = 0];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(16, this->_internal_original_id(), target);
  }

  // repeated .CSOEconItemEquipped equipped_state = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_equipped_state_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, this->_internal_equipped_state(i), target, stream);
  }

  // optional uint32 rarity = 19;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(19, this->_internal_rarity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSOEconItem)
  return target;
}

size_t CSOEconItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSOEconItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CSOEconItemAttribute attribute = 12;
  total_size += 1UL * this->_internal_attribute_size();
  for (const auto& msg : this->attribute_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CSOEconItemEquipped equipped_state = 18;
  total_size += 2UL * this->_internal_equipped_state_size();
  for (const auto& msg : this->equipped_state_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string custom_name = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_custom_name());
    }

    // optional string custom_desc = 11;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_custom_desc());
    }

    // optional .CSOEconItem interior_item = 13;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *interior_item_);
    }

    // optional uint64 id = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_id());
    }

    // optional uint32 account_id = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

    // optional uint32 inventory = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_inventory());
    }

    // optional uint32 def_index = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_def_index());
    }

    // optional uint32 quantity = 5;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_quantity());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 level = 6;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_level());
    }

    // optional uint32 quality = 7;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_quality());
    }

    // optional uint32 flags = 8 [default = 0];
    if (cached_has_bits & 0x00000400u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_flags());
    }

    // optional uint32 origin = 9;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_origin());
    }

    // optional bool in_use = 14 [default = false];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional uint32 style = 15 [default = 0];
    if (cached_has_bits & 0x00002000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_style());
    }

    // optional uint64 original_id = 16 [default = 0];
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_original_id());
    }

    // optional uint32 rarity = 19;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rarity());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSOEconItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CSOEconItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSOEconItem::GetClassData() const { return &_class_data_; }

void CSOEconItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CSOEconItem *>(to)->MergeFrom(
      static_cast<const CSOEconItem &>(from));
}


void CSOEconItem::MergeFrom(const CSOEconItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSOEconItem)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attribute_.MergeFrom(from.attribute_);
  equipped_state_.MergeFrom(from.equipped_state_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_custom_name(from._internal_custom_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_custom_desc(from._internal_custom_desc());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_interior_item()->::CSOEconItem::MergeFrom(from._internal_interior_item());
    }
    if (cached_has_bits & 0x00000008u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000010u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      inventory_ = from.inventory_;
    }
    if (cached_has_bits & 0x00000040u) {
      def_index_ = from.def_index_;
    }
    if (cached_has_bits & 0x00000080u) {
      quantity_ = from.quantity_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00000200u) {
      quality_ = from.quality_;
    }
    if (cached_has_bits & 0x00000400u) {
      flags_ = from.flags_;
    }
    if (cached_has_bits & 0x00000800u) {
      origin_ = from.origin_;
    }
    if (cached_has_bits & 0x00001000u) {
      in_use_ = from.in_use_;
    }
    if (cached_has_bits & 0x00002000u) {
      style_ = from.style_;
    }
    if (cached_has_bits & 0x00004000u) {
      original_id_ = from.original_id_;
    }
    if (cached_has_bits & 0x00008000u) {
      rarity_ = from.rarity_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSOEconItem::CopyFrom(const CSOEconItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSOEconItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOEconItem::IsInitialized() const {
  return true;
}

void CSOEconItem::InternalSwap(CSOEconItem* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  attribute_.InternalSwap(&other->attribute_);
  equipped_state_.InternalSwap(&other->equipped_state_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &custom_name_, lhs_arena,
      &other->custom_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &custom_desc_, lhs_arena,
      &other->custom_desc_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSOEconItem, rarity_)
      + sizeof(CSOEconItem::rarity_)
      - PROTOBUF_FIELD_OFFSET(CSOEconItem, interior_item_)>(
          reinterpret_cast<char*>(&interior_item_),
          reinterpret_cast<char*>(&other->interior_item_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSOEconItem::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[26]);
}

// ===================================================================

class CMsgAdjustItemEquippedState::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgAdjustItemEquippedState>()._has_bits_);
  static void set_has_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_new_class(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_new_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_swap(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgAdjustItemEquippedState::CMsgAdjustItemEquippedState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgAdjustItemEquippedState)
}
CMsgAdjustItemEquippedState::CMsgAdjustItemEquippedState(const CMsgAdjustItemEquippedState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&item_id_, &from.item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&swap_) -
    reinterpret_cast<char*>(&item_id_)) + sizeof(swap_));
  // @@protoc_insertion_point(copy_constructor:CMsgAdjustItemEquippedState)
}

void CMsgAdjustItemEquippedState::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&item_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&swap_) -
    reinterpret_cast<char*>(&item_id_)) + sizeof(swap_));
}

CMsgAdjustItemEquippedState::~CMsgAdjustItemEquippedState() {
  // @@protoc_insertion_point(destructor:CMsgAdjustItemEquippedState)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgAdjustItemEquippedState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgAdjustItemEquippedState::ArenaDtor(void* object) {
  CMsgAdjustItemEquippedState* _this = reinterpret_cast< CMsgAdjustItemEquippedState* >(object);
  (void)_this;
}
void CMsgAdjustItemEquippedState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgAdjustItemEquippedState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgAdjustItemEquippedState::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgAdjustItemEquippedState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&swap_) -
        reinterpret_cast<char*>(&item_id_)) + sizeof(swap_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgAdjustItemEquippedState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_item_id(&has_bits);
          item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 new_class = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_new_class(&has_bits);
          new_class_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 new_slot = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_new_slot(&has_bits);
          new_slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool swap = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_swap(&has_bits);
          swap_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgAdjustItemEquippedState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgAdjustItemEquippedState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_item_id(), target);
  }

  // optional uint32 new_class = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_new_class(), target);
  }

  // optional uint32 new_slot = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_new_slot(), target);
  }

  // optional bool swap = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_swap(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgAdjustItemEquippedState)
  return target;
}

size_t CMsgAdjustItemEquippedState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgAdjustItemEquippedState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint64 item_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_item_id());
    }

    // optional uint32 new_class = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_new_class());
    }

    // optional uint32 new_slot = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_new_slot());
    }

    // optional bool swap = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgAdjustItemEquippedState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgAdjustItemEquippedState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgAdjustItemEquippedState::GetClassData() const { return &_class_data_; }

void CMsgAdjustItemEquippedState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgAdjustItemEquippedState *>(to)->MergeFrom(
      static_cast<const CMsgAdjustItemEquippedState &>(from));
}


void CMsgAdjustItemEquippedState::MergeFrom(const CMsgAdjustItemEquippedState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgAdjustItemEquippedState)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      item_id_ = from.item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      new_class_ = from.new_class_;
    }
    if (cached_has_bits & 0x00000004u) {
      new_slot_ = from.new_slot_;
    }
    if (cached_has_bits & 0x00000008u) {
      swap_ = from.swap_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgAdjustItemEquippedState::CopyFrom(const CMsgAdjustItemEquippedState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgAdjustItemEquippedState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAdjustItemEquippedState::IsInitialized() const {
  return true;
}

void CMsgAdjustItemEquippedState::InternalSwap(CMsgAdjustItemEquippedState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgAdjustItemEquippedState, swap_)
      + sizeof(CMsgAdjustItemEquippedState::swap_)
      - PROTOBUF_FIELD_OFFSET(CMsgAdjustItemEquippedState, item_id_)>(
          reinterpret_cast<char*>(&item_id_),
          reinterpret_cast<char*>(&other->item_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgAdjustItemEquippedState::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[27]);
}

// ===================================================================

class CMsgSortItems::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSortItems>()._has_bits_);
  static void set_has_sort_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgSortItems::CMsgSortItems(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgSortItems)
}
CMsgSortItems::CMsgSortItems(const CMsgSortItems& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sort_type_ = from.sort_type_;
  // @@protoc_insertion_point(copy_constructor:CMsgSortItems)
}

void CMsgSortItems::SharedCtor() {
sort_type_ = 0u;
}

CMsgSortItems::~CMsgSortItems() {
  // @@protoc_insertion_point(destructor:CMsgSortItems)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgSortItems::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgSortItems::ArenaDtor(void* object) {
  CMsgSortItems* _this = reinterpret_cast< CMsgSortItems* >(object);
  (void)_this;
}
void CMsgSortItems::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSortItems::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSortItems::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSortItems)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sort_type_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSortItems::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 sort_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_sort_type(&has_bits);
          sort_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSortItems::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSortItems)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 sort_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_sort_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSortItems)
  return target;
}

size_t CMsgSortItems::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSortItems)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 sort_type = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_sort_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgSortItems::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgSortItems::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgSortItems::GetClassData() const { return &_class_data_; }

void CMsgSortItems::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgSortItems *>(to)->MergeFrom(
      static_cast<const CMsgSortItems &>(from));
}


void CMsgSortItems::MergeFrom(const CMsgSortItems& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSortItems)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_sort_type()) {
    _internal_set_sort_type(from._internal_sort_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSortItems::CopyFrom(const CMsgSortItems& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSortItems)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSortItems::IsInitialized() const {
  return true;
}

void CMsgSortItems::InternalSwap(CMsgSortItems* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(sort_type_, other->sort_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSortItems::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[28]);
}

// ===================================================================

class CSOEconClaimCode::_Internal {
 public:
  using HasBits = decltype(std::declval<CSOEconClaimCode>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_code_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_time_acquired(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CSOEconClaimCode::CSOEconClaimCode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CSOEconClaimCode)
}
CSOEconClaimCode::CSOEconClaimCode(const CSOEconClaimCode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_code()) {
    code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_code(), 
      GetArenaForAllocation());
  }
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_acquired_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(time_acquired_));
  // @@protoc_insertion_point(copy_constructor:CSOEconClaimCode)
}

void CSOEconClaimCode::SharedCtor() {
code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&account_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&time_acquired_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(time_acquired_));
}

CSOEconClaimCode::~CSOEconClaimCode() {
  // @@protoc_insertion_point(destructor:CSOEconClaimCode)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CSOEconClaimCode::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CSOEconClaimCode::ArenaDtor(void* object) {
  CSOEconClaimCode* _this = reinterpret_cast< CSOEconClaimCode* >(object);
  (void)_this;
}
void CSOEconClaimCode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSOEconClaimCode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSOEconClaimCode::Clear() {
// @@protoc_insertion_point(message_clear_start:CSOEconClaimCode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    code_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&time_acquired_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(time_acquired_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSOEconClaimCode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 code_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_code_type(&has_bits);
          code_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 time_acquired = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_time_acquired(&has_bits);
          time_acquired_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string code = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSOEconClaimCode.code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSOEconClaimCode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSOEconClaimCode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional uint32 code_type = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_code_type(), target);
  }

  // optional uint32 time_acquired = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_time_acquired(), target);
  }

  // optional string code = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSOEconClaimCode.code");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSOEconClaimCode)
  return target;
}

size_t CSOEconClaimCode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSOEconClaimCode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string code = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_code());
    }

    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

    // optional uint32 code_type = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_code_type());
    }

    // optional uint32 time_acquired = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_time_acquired());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSOEconClaimCode::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CSOEconClaimCode::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSOEconClaimCode::GetClassData() const { return &_class_data_; }

void CSOEconClaimCode::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CSOEconClaimCode *>(to)->MergeFrom(
      static_cast<const CSOEconClaimCode &>(from));
}


void CSOEconClaimCode::MergeFrom(const CSOEconClaimCode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSOEconClaimCode)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_code(from._internal_code());
    }
    if (cached_has_bits & 0x00000002u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      code_type_ = from.code_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      time_acquired_ = from.time_acquired_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSOEconClaimCode::CopyFrom(const CSOEconClaimCode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSOEconClaimCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOEconClaimCode::IsInitialized() const {
  return true;
}

void CSOEconClaimCode::InternalSwap(CSOEconClaimCode* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &code_, lhs_arena,
      &other->code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSOEconClaimCode, time_acquired_)
      + sizeof(CSOEconClaimCode::time_acquired_)
      - PROTOBUF_FIELD_OFFSET(CSOEconClaimCode, account_id_)>(
          reinterpret_cast<char*>(&account_id_),
          reinterpret_cast<char*>(&other->account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSOEconClaimCode::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[29]);
}

// ===================================================================

class CMsgStoreGetUserData::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgStoreGetUserData>()._has_bits_);
  static void set_has_price_sheet_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_currency(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgStoreGetUserData::CMsgStoreGetUserData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgStoreGetUserData)
}
CMsgStoreGetUserData::CMsgStoreGetUserData(const CMsgStoreGetUserData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&price_sheet_version_, &from.price_sheet_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&currency_) -
    reinterpret_cast<char*>(&price_sheet_version_)) + sizeof(currency_));
  // @@protoc_insertion_point(copy_constructor:CMsgStoreGetUserData)
}

void CMsgStoreGetUserData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&price_sheet_version_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&currency_) -
    reinterpret_cast<char*>(&price_sheet_version_)) + sizeof(currency_));
}

CMsgStoreGetUserData::~CMsgStoreGetUserData() {
  // @@protoc_insertion_point(destructor:CMsgStoreGetUserData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgStoreGetUserData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgStoreGetUserData::ArenaDtor(void* object) {
  CMsgStoreGetUserData* _this = reinterpret_cast< CMsgStoreGetUserData* >(object);
  (void)_this;
}
void CMsgStoreGetUserData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgStoreGetUserData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgStoreGetUserData::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgStoreGetUserData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&price_sheet_version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&currency_) -
        reinterpret_cast<char*>(&price_sheet_version_)) + sizeof(currency_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgStoreGetUserData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed32 price_sheet_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_price_sheet_version(&has_bits);
          price_sheet_version_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else
          goto handle_unusual;
        continue;
      // optional int32 currency = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_currency(&has_bits);
          currency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgStoreGetUserData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgStoreGetUserData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 price_sheet_version = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(1, this->_internal_price_sheet_version(), target);
  }

  // optional int32 currency = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_currency(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgStoreGetUserData)
  return target;
}

size_t CMsgStoreGetUserData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgStoreGetUserData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed32 price_sheet_version = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional int32 currency = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_currency());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgStoreGetUserData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgStoreGetUserData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgStoreGetUserData::GetClassData() const { return &_class_data_; }

void CMsgStoreGetUserData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgStoreGetUserData *>(to)->MergeFrom(
      static_cast<const CMsgStoreGetUserData &>(from));
}


void CMsgStoreGetUserData::MergeFrom(const CMsgStoreGetUserData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgStoreGetUserData)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      price_sheet_version_ = from.price_sheet_version_;
    }
    if (cached_has_bits & 0x00000002u) {
      currency_ = from.currency_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgStoreGetUserData::CopyFrom(const CMsgStoreGetUserData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgStoreGetUserData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgStoreGetUserData::IsInitialized() const {
  return true;
}

void CMsgStoreGetUserData::InternalSwap(CMsgStoreGetUserData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgStoreGetUserData, currency_)
      + sizeof(CMsgStoreGetUserData::currency_)
      - PROTOBUF_FIELD_OFFSET(CMsgStoreGetUserData, price_sheet_version_)>(
          reinterpret_cast<char*>(&price_sheet_version_),
          reinterpret_cast<char*>(&other->price_sheet_version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgStoreGetUserData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[30]);
}

// ===================================================================

class CMsgStoreGetUserDataResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgStoreGetUserDataResponse>()._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_currency_deprecated(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_country_deprecated(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_price_sheet_version(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_price_sheet(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgStoreGetUserDataResponse::CMsgStoreGetUserDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgStoreGetUserDataResponse)
}
CMsgStoreGetUserDataResponse::CMsgStoreGetUserDataResponse(const CMsgStoreGetUserDataResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  country_deprecated_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_country_deprecated()) {
    country_deprecated_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_country_deprecated(), 
      GetArenaForAllocation());
  }
  price_sheet_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_price_sheet()) {
    price_sheet_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_price_sheet(), 
      GetArenaForAllocation());
  }
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&price_sheet_version_) -
    reinterpret_cast<char*>(&result_)) + sizeof(price_sheet_version_));
  // @@protoc_insertion_point(copy_constructor:CMsgStoreGetUserDataResponse)
}

void CMsgStoreGetUserDataResponse::SharedCtor() {
country_deprecated_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
price_sheet_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&price_sheet_version_) -
    reinterpret_cast<char*>(&result_)) + sizeof(price_sheet_version_));
}

CMsgStoreGetUserDataResponse::~CMsgStoreGetUserDataResponse() {
  // @@protoc_insertion_point(destructor:CMsgStoreGetUserDataResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgStoreGetUserDataResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  country_deprecated_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  price_sheet_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgStoreGetUserDataResponse::ArenaDtor(void* object) {
  CMsgStoreGetUserDataResponse* _this = reinterpret_cast< CMsgStoreGetUserDataResponse* >(object);
  (void)_this;
}
void CMsgStoreGetUserDataResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgStoreGetUserDataResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgStoreGetUserDataResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgStoreGetUserDataResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      country_deprecated_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      price_sheet_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&result_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&price_sheet_version_) -
        reinterpret_cast<char*>(&result_)) + sizeof(price_sheet_version_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgStoreGetUserDataResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_result(&has_bits);
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 currency_deprecated = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_currency_deprecated(&has_bits);
          currency_deprecated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string country_deprecated = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_country_deprecated();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgStoreGetUserDataResponse.country_deprecated");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed32 price_sheet_version = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_price_sheet_version(&has_bits);
          price_sheet_version_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else
          goto handle_unusual;
        continue;
      // optional bytes price_sheet = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_price_sheet();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgStoreGetUserDataResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgStoreGetUserDataResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 result = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_result(), target);
  }

  // optional int32 currency_deprecated = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_currency_deprecated(), target);
  }

  // optional string country_deprecated = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_country_deprecated().data(), static_cast<int>(this->_internal_country_deprecated().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgStoreGetUserDataResponse.country_deprecated");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_country_deprecated(), target);
  }

  // optional fixed32 price_sheet_version = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(4, this->_internal_price_sheet_version(), target);
  }

  // optional bytes price_sheet = 8;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_price_sheet(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgStoreGetUserDataResponse)
  return target;
}

size_t CMsgStoreGetUserDataResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgStoreGetUserDataResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string country_deprecated = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_country_deprecated());
    }

    // optional bytes price_sheet = 8;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_price_sheet());
    }

    // optional int32 result = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_result());
    }

    // optional int32 currency_deprecated = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_currency_deprecated());
    }

    // optional fixed32 price_sheet_version = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgStoreGetUserDataResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgStoreGetUserDataResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgStoreGetUserDataResponse::GetClassData() const { return &_class_data_; }

void CMsgStoreGetUserDataResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgStoreGetUserDataResponse *>(to)->MergeFrom(
      static_cast<const CMsgStoreGetUserDataResponse &>(from));
}


void CMsgStoreGetUserDataResponse::MergeFrom(const CMsgStoreGetUserDataResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgStoreGetUserDataResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_country_deprecated(from._internal_country_deprecated());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_price_sheet(from._internal_price_sheet());
    }
    if (cached_has_bits & 0x00000004u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000008u) {
      currency_deprecated_ = from.currency_deprecated_;
    }
    if (cached_has_bits & 0x00000010u) {
      price_sheet_version_ = from.price_sheet_version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgStoreGetUserDataResponse::CopyFrom(const CMsgStoreGetUserDataResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgStoreGetUserDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgStoreGetUserDataResponse::IsInitialized() const {
  return true;
}

void CMsgStoreGetUserDataResponse::InternalSwap(CMsgStoreGetUserDataResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &country_deprecated_, lhs_arena,
      &other->country_deprecated_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &price_sheet_, lhs_arena,
      &other->price_sheet_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgStoreGetUserDataResponse, price_sheet_version_)
      + sizeof(CMsgStoreGetUserDataResponse::price_sheet_version_)
      - PROTOBUF_FIELD_OFFSET(CMsgStoreGetUserDataResponse, result_)>(
          reinterpret_cast<char*>(&result_),
          reinterpret_cast<char*>(&other->result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgStoreGetUserDataResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[31]);
}

// ===================================================================

class CMsgUpdateItemSchema::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgUpdateItemSchema>()._has_bits_);
  static void set_has_items_game(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_item_schema_version(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_items_game_url_deprecated2013(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_items_game_url(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgUpdateItemSchema::CMsgUpdateItemSchema(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgUpdateItemSchema)
}
CMsgUpdateItemSchema::CMsgUpdateItemSchema(const CMsgUpdateItemSchema& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  items_game_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_items_game()) {
    items_game_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_items_game(), 
      GetArenaForAllocation());
  }
  items_game_url_deprecated2013_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_items_game_url_deprecated2013()) {
    items_game_url_deprecated2013_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_items_game_url_deprecated2013(), 
      GetArenaForAllocation());
  }
  items_game_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_items_game_url()) {
    items_game_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_items_game_url(), 
      GetArenaForAllocation());
  }
  item_schema_version_ = from.item_schema_version_;
  // @@protoc_insertion_point(copy_constructor:CMsgUpdateItemSchema)
}

void CMsgUpdateItemSchema::SharedCtor() {
items_game_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
items_game_url_deprecated2013_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
items_game_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
item_schema_version_ = 0u;
}

CMsgUpdateItemSchema::~CMsgUpdateItemSchema() {
  // @@protoc_insertion_point(destructor:CMsgUpdateItemSchema)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgUpdateItemSchema::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  items_game_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  items_game_url_deprecated2013_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  items_game_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgUpdateItemSchema::ArenaDtor(void* object) {
  CMsgUpdateItemSchema* _this = reinterpret_cast< CMsgUpdateItemSchema* >(object);
  (void)_this;
}
void CMsgUpdateItemSchema::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgUpdateItemSchema::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgUpdateItemSchema::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgUpdateItemSchema)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      items_game_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      items_game_url_deprecated2013_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      items_game_url_.ClearNonDefaultToEmpty();
    }
  }
  item_schema_version_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgUpdateItemSchema::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes items_game = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_items_game();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed32 item_schema_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_item_schema_version(&has_bits);
          item_schema_version_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else
          goto handle_unusual;
        continue;
      // optional string items_game_url_DEPRECATED2013 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_items_game_url_deprecated2013();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgUpdateItemSchema.items_game_url_DEPRECATED2013");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string items_game_url = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_items_game_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgUpdateItemSchema.items_game_url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgUpdateItemSchema::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgUpdateItemSchema)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes items_game = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_items_game(), target);
  }

  // optional fixed32 item_schema_version = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(2, this->_internal_item_schema_version(), target);
  }

  // optional string items_game_url_DEPRECATED2013 = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_items_game_url_deprecated2013().data(), static_cast<int>(this->_internal_items_game_url_deprecated2013().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgUpdateItemSchema.items_game_url_DEPRECATED2013");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_items_game_url_deprecated2013(), target);
  }

  // optional string items_game_url = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_items_game_url().data(), static_cast<int>(this->_internal_items_game_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgUpdateItemSchema.items_game_url");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_items_game_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgUpdateItemSchema)
  return target;
}

size_t CMsgUpdateItemSchema::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgUpdateItemSchema)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes items_game = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_items_game());
    }

    // optional string items_game_url_DEPRECATED2013 = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_items_game_url_deprecated2013());
    }

    // optional string items_game_url = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_items_game_url());
    }

    // optional fixed32 item_schema_version = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgUpdateItemSchema::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgUpdateItemSchema::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgUpdateItemSchema::GetClassData() const { return &_class_data_; }

void CMsgUpdateItemSchema::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgUpdateItemSchema *>(to)->MergeFrom(
      static_cast<const CMsgUpdateItemSchema &>(from));
}


void CMsgUpdateItemSchema::MergeFrom(const CMsgUpdateItemSchema& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgUpdateItemSchema)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_items_game(from._internal_items_game());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_items_game_url_deprecated2013(from._internal_items_game_url_deprecated2013());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_items_game_url(from._internal_items_game_url());
    }
    if (cached_has_bits & 0x00000008u) {
      item_schema_version_ = from.item_schema_version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgUpdateItemSchema::CopyFrom(const CMsgUpdateItemSchema& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgUpdateItemSchema)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgUpdateItemSchema::IsInitialized() const {
  return true;
}

void CMsgUpdateItemSchema::InternalSwap(CMsgUpdateItemSchema* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &items_game_, lhs_arena,
      &other->items_game_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &items_game_url_deprecated2013_, lhs_arena,
      &other->items_game_url_deprecated2013_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &items_game_url_, lhs_arena,
      &other->items_game_url_, rhs_arena
  );
  swap(item_schema_version_, other->item_schema_version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgUpdateItemSchema::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[32]);
}

// ===================================================================

class CMsgGCError::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCError>()._has_bits_);
  static void set_has_error_text(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCError::CMsgGCError(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgGCError)
}
CMsgGCError::CMsgGCError(const CMsgGCError& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  error_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_error_text()) {
    error_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_error_text(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CMsgGCError)
}

void CMsgGCError::SharedCtor() {
error_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CMsgGCError::~CMsgGCError() {
  // @@protoc_insertion_point(destructor:CMsgGCError)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgGCError::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  error_text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCError::ArenaDtor(void* object) {
  CMsgGCError* _this = reinterpret_cast< CMsgGCError* >(object);
  (void)_this;
}
void CMsgGCError::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCError::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCError::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCError)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    error_text_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCError::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string error_text = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_error_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGCError.error_text");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCError::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCError)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string error_text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_error_text().data(), static_cast<int>(this->_internal_error_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCError.error_text");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_error_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCError)
  return target;
}

size_t CMsgGCError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCError)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string error_text = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_text());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCError::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgGCError::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCError::GetClassData() const { return &_class_data_; }

void CMsgGCError::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgGCError *>(to)->MergeFrom(
      static_cast<const CMsgGCError &>(from));
}


void CMsgGCError::MergeFrom(const CMsgGCError& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCError)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_error_text()) {
    _internal_set_error_text(from._internal_error_text());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCError::CopyFrom(const CMsgGCError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCError::IsInitialized() const {
  return true;
}

void CMsgGCError::InternalSwap(CMsgGCError* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &error_text_, lhs_arena,
      &other->error_text_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCError::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[33]);
}

// ===================================================================

class CMsgRequestInventoryRefresh::_Internal {
 public:
};

CMsgRequestInventoryRefresh::CMsgRequestInventoryRefresh(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CMsgRequestInventoryRefresh)
}
CMsgRequestInventoryRefresh::CMsgRequestInventoryRefresh(const CMsgRequestInventoryRefresh& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgRequestInventoryRefresh)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgRequestInventoryRefresh::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgRequestInventoryRefresh::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CMsgRequestInventoryRefresh::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[34]);
}

// ===================================================================

class CMsgConVarValue::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgConVarValue>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgConVarValue::CMsgConVarValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgConVarValue)
}
CMsgConVarValue::CMsgConVarValue(const CMsgConVarValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_value()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CMsgConVarValue)
}

void CMsgConVarValue::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CMsgConVarValue::~CMsgConVarValue() {
  // @@protoc_insertion_point(destructor:CMsgConVarValue)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgConVarValue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgConVarValue::ArenaDtor(void* object) {
  CMsgConVarValue* _this = reinterpret_cast< CMsgConVarValue* >(object);
  (void)_this;
}
void CMsgConVarValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgConVarValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgConVarValue::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgConVarValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      value_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgConVarValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgConVarValue.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgConVarValue.value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgConVarValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgConVarValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgConVarValue.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgConVarValue.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgConVarValue)
  return target;
}

size_t CMsgConVarValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgConVarValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_value());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgConVarValue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgConVarValue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgConVarValue::GetClassData() const { return &_class_data_; }

void CMsgConVarValue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgConVarValue *>(to)->MergeFrom(
      static_cast<const CMsgConVarValue &>(from));
}


void CMsgConVarValue::MergeFrom(const CMsgConVarValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgConVarValue)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_value(from._internal_value());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgConVarValue::CopyFrom(const CMsgConVarValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgConVarValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgConVarValue::IsInitialized() const {
  return true;
}

void CMsgConVarValue::InternalSwap(CMsgConVarValue* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, lhs_arena,
      &other->value_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgConVarValue::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[35]);
}

// ===================================================================

class CMsgReplicateConVars::_Internal {
 public:
};

CMsgReplicateConVars::CMsgReplicateConVars(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  convars_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgReplicateConVars)
}
CMsgReplicateConVars::CMsgReplicateConVars(const CMsgReplicateConVars& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      convars_(from.convars_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgReplicateConVars)
}

void CMsgReplicateConVars::SharedCtor() {
}

CMsgReplicateConVars::~CMsgReplicateConVars() {
  // @@protoc_insertion_point(destructor:CMsgReplicateConVars)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgReplicateConVars::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgReplicateConVars::ArenaDtor(void* object) {
  CMsgReplicateConVars* _this = reinterpret_cast< CMsgReplicateConVars* >(object);
  (void)_this;
}
void CMsgReplicateConVars::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgReplicateConVars::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgReplicateConVars::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgReplicateConVars)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  convars_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgReplicateConVars::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgConVarValue convars = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_convars(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgReplicateConVars::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgReplicateConVars)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgConVarValue convars = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_convars_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_convars(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgReplicateConVars)
  return target;
}

size_t CMsgReplicateConVars::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgReplicateConVars)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgConVarValue convars = 1;
  total_size += 1UL * this->_internal_convars_size();
  for (const auto& msg : this->convars_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgReplicateConVars::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgReplicateConVars::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgReplicateConVars::GetClassData() const { return &_class_data_; }

void CMsgReplicateConVars::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgReplicateConVars *>(to)->MergeFrom(
      static_cast<const CMsgReplicateConVars &>(from));
}


void CMsgReplicateConVars::MergeFrom(const CMsgReplicateConVars& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgReplicateConVars)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  convars_.MergeFrom(from.convars_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgReplicateConVars::CopyFrom(const CMsgReplicateConVars& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgReplicateConVars)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgReplicateConVars::IsInitialized() const {
  return true;
}

void CMsgReplicateConVars::InternalSwap(CMsgReplicateConVars* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  convars_.InternalSwap(&other->convars_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgReplicateConVars::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[36]);
}

// ===================================================================

class CMsgUseItem::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgUseItem>()._has_bits_);
  static void set_has_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_target_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_duel__class_lock(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_initiator_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgUseItem::CMsgUseItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  gift__potential_targets_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgUseItem)
}
CMsgUseItem::CMsgUseItem(const CMsgUseItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      gift__potential_targets_(from.gift__potential_targets_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&item_id_, &from.item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&duel__class_lock_) -
    reinterpret_cast<char*>(&item_id_)) + sizeof(duel__class_lock_));
  // @@protoc_insertion_point(copy_constructor:CMsgUseItem)
}

void CMsgUseItem::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&item_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&duel__class_lock_) -
    reinterpret_cast<char*>(&item_id_)) + sizeof(duel__class_lock_));
}

CMsgUseItem::~CMsgUseItem() {
  // @@protoc_insertion_point(destructor:CMsgUseItem)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgUseItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgUseItem::ArenaDtor(void* object) {
  CMsgUseItem* _this = reinterpret_cast< CMsgUseItem* >(object);
  (void)_this;
}
void CMsgUseItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgUseItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgUseItem::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgUseItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gift__potential_targets_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&duel__class_lock_) -
        reinterpret_cast<char*>(&item_id_)) + sizeof(duel__class_lock_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgUseItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_item_id(&has_bits);
          item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 target_steam_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_target_steam_id(&has_bits);
          target_steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 gift__potential_targets = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_gift__potential_targets(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_gift__potential_targets(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 duel__class_lock = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_duel__class_lock(&has_bits);
          duel__class_lock_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 initiator_steam_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_initiator_steam_id(&has_bits);
          initiator_steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgUseItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgUseItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_item_id(), target);
  }

  // optional fixed64 target_steam_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_target_steam_id(), target);
  }

  // repeated uint32 gift__potential_targets = 3;
  for (int i = 0, n = this->_internal_gift__potential_targets_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_gift__potential_targets(i), target);
  }

  // optional uint32 duel__class_lock = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_duel__class_lock(), target);
  }

  // optional fixed64 initiator_steam_id = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(5, this->_internal_initiator_steam_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgUseItem)
  return target;
}

size_t CMsgUseItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgUseItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 gift__potential_targets = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->gift__potential_targets_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_gift__potential_targets_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint64 item_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_item_id());
    }

    // optional fixed64 target_steam_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional fixed64 initiator_steam_id = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional uint32 duel__class_lock = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_duel__class_lock());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgUseItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgUseItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgUseItem::GetClassData() const { return &_class_data_; }

void CMsgUseItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgUseItem *>(to)->MergeFrom(
      static_cast<const CMsgUseItem &>(from));
}


void CMsgUseItem::MergeFrom(const CMsgUseItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgUseItem)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  gift__potential_targets_.MergeFrom(from.gift__potential_targets_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      item_id_ = from.item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      target_steam_id_ = from.target_steam_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      initiator_steam_id_ = from.initiator_steam_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      duel__class_lock_ = from.duel__class_lock_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgUseItem::CopyFrom(const CMsgUseItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgUseItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgUseItem::IsInitialized() const {
  return true;
}

void CMsgUseItem::InternalSwap(CMsgUseItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  gift__potential_targets_.InternalSwap(&other->gift__potential_targets_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgUseItem, duel__class_lock_)
      + sizeof(CMsgUseItem::duel__class_lock_)
      - PROTOBUF_FIELD_OFFSET(CMsgUseItem, item_id_)>(
          reinterpret_cast<char*>(&item_id_),
          reinterpret_cast<char*>(&other->item_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgUseItem::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[37]);
}

// ===================================================================

class CMsgReplayUploadedToYouTube::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgReplayUploadedToYouTube>()._has_bits_);
  static void set_has_youtube_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_youtube_account_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgReplayUploadedToYouTube::CMsgReplayUploadedToYouTube(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgReplayUploadedToYouTube)
}
CMsgReplayUploadedToYouTube::CMsgReplayUploadedToYouTube(const CMsgReplayUploadedToYouTube& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  youtube_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_youtube_url()) {
    youtube_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_youtube_url(), 
      GetArenaForAllocation());
  }
  youtube_account_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_youtube_account_name()) {
    youtube_account_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_youtube_account_name(), 
      GetArenaForAllocation());
  }
  session_id_ = from.session_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgReplayUploadedToYouTube)
}

void CMsgReplayUploadedToYouTube::SharedCtor() {
youtube_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
youtube_account_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
session_id_ = uint64_t{0u};
}

CMsgReplayUploadedToYouTube::~CMsgReplayUploadedToYouTube() {
  // @@protoc_insertion_point(destructor:CMsgReplayUploadedToYouTube)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgReplayUploadedToYouTube::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  youtube_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  youtube_account_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgReplayUploadedToYouTube::ArenaDtor(void* object) {
  CMsgReplayUploadedToYouTube* _this = reinterpret_cast< CMsgReplayUploadedToYouTube* >(object);
  (void)_this;
}
void CMsgReplayUploadedToYouTube::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgReplayUploadedToYouTube::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgReplayUploadedToYouTube::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgReplayUploadedToYouTube)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      youtube_url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      youtube_account_name_.ClearNonDefaultToEmpty();
    }
  }
  session_id_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgReplayUploadedToYouTube::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string youtube_url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_youtube_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgReplayUploadedToYouTube.youtube_url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string youtube_account_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_youtube_account_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgReplayUploadedToYouTube.youtube_account_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 session_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_session_id(&has_bits);
          session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgReplayUploadedToYouTube::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgReplayUploadedToYouTube)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string youtube_url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_youtube_url().data(), static_cast<int>(this->_internal_youtube_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgReplayUploadedToYouTube.youtube_url");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_youtube_url(), target);
  }

  // optional string youtube_account_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_youtube_account_name().data(), static_cast<int>(this->_internal_youtube_account_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgReplayUploadedToYouTube.youtube_account_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_youtube_account_name(), target);
  }

  // optional uint64 session_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_session_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgReplayUploadedToYouTube)
  return target;
}

size_t CMsgReplayUploadedToYouTube::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgReplayUploadedToYouTube)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string youtube_url = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_youtube_url());
    }

    // optional string youtube_account_name = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_youtube_account_name());
    }

    // optional uint64 session_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_session_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgReplayUploadedToYouTube::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgReplayUploadedToYouTube::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgReplayUploadedToYouTube::GetClassData() const { return &_class_data_; }

void CMsgReplayUploadedToYouTube::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgReplayUploadedToYouTube *>(to)->MergeFrom(
      static_cast<const CMsgReplayUploadedToYouTube &>(from));
}


void CMsgReplayUploadedToYouTube::MergeFrom(const CMsgReplayUploadedToYouTube& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgReplayUploadedToYouTube)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_youtube_url(from._internal_youtube_url());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_youtube_account_name(from._internal_youtube_account_name());
    }
    if (cached_has_bits & 0x00000004u) {
      session_id_ = from.session_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgReplayUploadedToYouTube::CopyFrom(const CMsgReplayUploadedToYouTube& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgReplayUploadedToYouTube)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgReplayUploadedToYouTube::IsInitialized() const {
  return true;
}

void CMsgReplayUploadedToYouTube::InternalSwap(CMsgReplayUploadedToYouTube* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &youtube_url_, lhs_arena,
      &other->youtube_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &youtube_account_name_, lhs_arena,
      &other->youtube_account_name_, rhs_arena
  );
  swap(session_id_, other->session_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgReplayUploadedToYouTube::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[38]);
}

// ===================================================================

class CMsgConsumableExhausted::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgConsumableExhausted>()._has_bits_);
  static void set_has_item_def_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgConsumableExhausted::CMsgConsumableExhausted(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgConsumableExhausted)
}
CMsgConsumableExhausted::CMsgConsumableExhausted(const CMsgConsumableExhausted& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  item_def_id_ = from.item_def_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgConsumableExhausted)
}

void CMsgConsumableExhausted::SharedCtor() {
item_def_id_ = 0;
}

CMsgConsumableExhausted::~CMsgConsumableExhausted() {
  // @@protoc_insertion_point(destructor:CMsgConsumableExhausted)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgConsumableExhausted::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgConsumableExhausted::ArenaDtor(void* object) {
  CMsgConsumableExhausted* _this = reinterpret_cast< CMsgConsumableExhausted* >(object);
  (void)_this;
}
void CMsgConsumableExhausted::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgConsumableExhausted::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgConsumableExhausted::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgConsumableExhausted)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_def_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgConsumableExhausted::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 item_def_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_item_def_id(&has_bits);
          item_def_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgConsumableExhausted::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgConsumableExhausted)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 item_def_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_item_def_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgConsumableExhausted)
  return target;
}

size_t CMsgConsumableExhausted::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgConsumableExhausted)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 item_def_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_item_def_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgConsumableExhausted::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgConsumableExhausted::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgConsumableExhausted::GetClassData() const { return &_class_data_; }

void CMsgConsumableExhausted::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgConsumableExhausted *>(to)->MergeFrom(
      static_cast<const CMsgConsumableExhausted &>(from));
}


void CMsgConsumableExhausted::MergeFrom(const CMsgConsumableExhausted& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgConsumableExhausted)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_item_def_id()) {
    _internal_set_item_def_id(from._internal_item_def_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgConsumableExhausted::CopyFrom(const CMsgConsumableExhausted& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgConsumableExhausted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgConsumableExhausted::IsInitialized() const {
  return true;
}

void CMsgConsumableExhausted::InternalSwap(CMsgConsumableExhausted* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(item_def_id_, other->item_def_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgConsumableExhausted::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[39]);
}

// ===================================================================

class CMsgItemAcknowledged__DEPRECATED::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgItemAcknowledged__DEPRECATED>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_inventory(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_def_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_quality(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_rarity(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_origin(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

CMsgItemAcknowledged__DEPRECATED::CMsgItemAcknowledged__DEPRECATED(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgItemAcknowledged__DEPRECATED)
}
CMsgItemAcknowledged__DEPRECATED::CMsgItemAcknowledged__DEPRECATED(const CMsgItemAcknowledged__DEPRECATED& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&item_id_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(item_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgItemAcknowledged__DEPRECATED)
}

void CMsgItemAcknowledged__DEPRECATED::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&account_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&item_id_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(item_id_));
}

CMsgItemAcknowledged__DEPRECATED::~CMsgItemAcknowledged__DEPRECATED() {
  // @@protoc_insertion_point(destructor:CMsgItemAcknowledged__DEPRECATED)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgItemAcknowledged__DEPRECATED::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgItemAcknowledged__DEPRECATED::ArenaDtor(void* object) {
  CMsgItemAcknowledged__DEPRECATED* _this = reinterpret_cast< CMsgItemAcknowledged__DEPRECATED* >(object);
  (void)_this;
}
void CMsgItemAcknowledged__DEPRECATED::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgItemAcknowledged__DEPRECATED::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgItemAcknowledged__DEPRECATED::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgItemAcknowledged__DEPRECATED)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&item_id_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(item_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgItemAcknowledged__DEPRECATED::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 inventory = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_inventory(&has_bits);
          inventory_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 def_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_def_index(&has_bits);
          def_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 quality = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_quality(&has_bits);
          quality_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 rarity = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_rarity(&has_bits);
          rarity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 origin = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_origin(&has_bits);
          origin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 item_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_item_id(&has_bits);
          item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgItemAcknowledged__DEPRECATED::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgItemAcknowledged__DEPRECATED)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional uint32 inventory = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_inventory(), target);
  }

  // optional uint32 def_index = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_def_index(), target);
  }

  // optional uint32 quality = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_quality(), target);
  }

  // optional uint32 rarity = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_rarity(), target);
  }

  // optional uint32 origin = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_origin(), target);
  }

  // optional uint64 item_id = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_item_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgItemAcknowledged__DEPRECATED)
  return target;
}

size_t CMsgItemAcknowledged__DEPRECATED::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgItemAcknowledged__DEPRECATED)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

    // optional uint32 inventory = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_inventory());
    }

    // optional uint32 def_index = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_def_index());
    }

    // optional uint32 quality = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_quality());
    }

    // optional uint32 rarity = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_rarity());
    }

    // optional uint32 origin = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_origin());
    }

    // optional uint64 item_id = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_item_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgItemAcknowledged__DEPRECATED::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgItemAcknowledged__DEPRECATED::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgItemAcknowledged__DEPRECATED::GetClassData() const { return &_class_data_; }

void CMsgItemAcknowledged__DEPRECATED::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgItemAcknowledged__DEPRECATED *>(to)->MergeFrom(
      static_cast<const CMsgItemAcknowledged__DEPRECATED &>(from));
}


void CMsgItemAcknowledged__DEPRECATED::MergeFrom(const CMsgItemAcknowledged__DEPRECATED& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgItemAcknowledged__DEPRECATED)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      inventory_ = from.inventory_;
    }
    if (cached_has_bits & 0x00000004u) {
      def_index_ = from.def_index_;
    }
    if (cached_has_bits & 0x00000008u) {
      quality_ = from.quality_;
    }
    if (cached_has_bits & 0x00000010u) {
      rarity_ = from.rarity_;
    }
    if (cached_has_bits & 0x00000020u) {
      origin_ = from.origin_;
    }
    if (cached_has_bits & 0x00000040u) {
      item_id_ = from.item_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgItemAcknowledged__DEPRECATED::CopyFrom(const CMsgItemAcknowledged__DEPRECATED& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgItemAcknowledged__DEPRECATED)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgItemAcknowledged__DEPRECATED::IsInitialized() const {
  return true;
}

void CMsgItemAcknowledged__DEPRECATED::InternalSwap(CMsgItemAcknowledged__DEPRECATED* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgItemAcknowledged__DEPRECATED, item_id_)
      + sizeof(CMsgItemAcknowledged__DEPRECATED::item_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgItemAcknowledged__DEPRECATED, account_id_)>(
          reinterpret_cast<char*>(&account_id_),
          reinterpret_cast<char*>(&other->account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgItemAcknowledged__DEPRECATED::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[40]);
}

// ===================================================================

class CMsgSetItemPositions_ItemPosition::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSetItemPositions_ItemPosition>()._has_bits_);
  static void set_has_legacy_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgSetItemPositions_ItemPosition::CMsgSetItemPositions_ItemPosition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgSetItemPositions.ItemPosition)
}
CMsgSetItemPositions_ItemPosition::CMsgSetItemPositions_ItemPosition(const CMsgSetItemPositions_ItemPosition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&legacy_item_id_, &from.legacy_item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&item_id_) -
    reinterpret_cast<char*>(&legacy_item_id_)) + sizeof(item_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgSetItemPositions.ItemPosition)
}

void CMsgSetItemPositions_ItemPosition::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&legacy_item_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&item_id_) -
    reinterpret_cast<char*>(&legacy_item_id_)) + sizeof(item_id_));
}

CMsgSetItemPositions_ItemPosition::~CMsgSetItemPositions_ItemPosition() {
  // @@protoc_insertion_point(destructor:CMsgSetItemPositions.ItemPosition)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgSetItemPositions_ItemPosition::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgSetItemPositions_ItemPosition::ArenaDtor(void* object) {
  CMsgSetItemPositions_ItemPosition* _this = reinterpret_cast< CMsgSetItemPositions_ItemPosition* >(object);
  (void)_this;
}
void CMsgSetItemPositions_ItemPosition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSetItemPositions_ItemPosition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSetItemPositions_ItemPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSetItemPositions.ItemPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&legacy_item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&item_id_) -
        reinterpret_cast<char*>(&legacy_item_id_)) + sizeof(item_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSetItemPositions_ItemPosition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 legacy_item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_legacy_item_id(&has_bits);
          legacy_item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_position(&has_bits);
          position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 item_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_item_id(&has_bits);
          item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSetItemPositions_ItemPosition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSetItemPositions.ItemPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 legacy_item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_legacy_item_id(), target);
  }

  // optional uint32 position = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_position(), target);
  }

  // optional uint64 item_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_item_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSetItemPositions.ItemPosition)
  return target;
}

size_t CMsgSetItemPositions_ItemPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSetItemPositions.ItemPosition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 legacy_item_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_legacy_item_id());
    }

    // optional uint32 position = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_position());
    }

    // optional uint64 item_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_item_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgSetItemPositions_ItemPosition::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgSetItemPositions_ItemPosition::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgSetItemPositions_ItemPosition::GetClassData() const { return &_class_data_; }

void CMsgSetItemPositions_ItemPosition::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgSetItemPositions_ItemPosition *>(to)->MergeFrom(
      static_cast<const CMsgSetItemPositions_ItemPosition &>(from));
}


void CMsgSetItemPositions_ItemPosition::MergeFrom(const CMsgSetItemPositions_ItemPosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSetItemPositions.ItemPosition)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      legacy_item_id_ = from.legacy_item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      position_ = from.position_;
    }
    if (cached_has_bits & 0x00000004u) {
      item_id_ = from.item_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSetItemPositions_ItemPosition::CopyFrom(const CMsgSetItemPositions_ItemPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSetItemPositions.ItemPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSetItemPositions_ItemPosition::IsInitialized() const {
  return true;
}

void CMsgSetItemPositions_ItemPosition::InternalSwap(CMsgSetItemPositions_ItemPosition* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSetItemPositions_ItemPosition, item_id_)
      + sizeof(CMsgSetItemPositions_ItemPosition::item_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgSetItemPositions_ItemPosition, legacy_item_id_)>(
          reinterpret_cast<char*>(&legacy_item_id_),
          reinterpret_cast<char*>(&other->legacy_item_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSetItemPositions_ItemPosition::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[41]);
}

// ===================================================================

class CMsgSetItemPositions::_Internal {
 public:
};

CMsgSetItemPositions::CMsgSetItemPositions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  item_positions_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgSetItemPositions)
}
CMsgSetItemPositions::CMsgSetItemPositions(const CMsgSetItemPositions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      item_positions_(from.item_positions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgSetItemPositions)
}

void CMsgSetItemPositions::SharedCtor() {
}

CMsgSetItemPositions::~CMsgSetItemPositions() {
  // @@protoc_insertion_point(destructor:CMsgSetItemPositions)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgSetItemPositions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgSetItemPositions::ArenaDtor(void* object) {
  CMsgSetItemPositions* _this = reinterpret_cast< CMsgSetItemPositions* >(object);
  (void)_this;
}
void CMsgSetItemPositions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSetItemPositions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSetItemPositions::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSetItemPositions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_positions_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSetItemPositions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgSetItemPositions.ItemPosition item_positions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_item_positions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSetItemPositions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSetItemPositions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgSetItemPositions.ItemPosition item_positions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_item_positions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_item_positions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSetItemPositions)
  return target;
}

size_t CMsgSetItemPositions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSetItemPositions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgSetItemPositions.ItemPosition item_positions = 1;
  total_size += 1UL * this->_internal_item_positions_size();
  for (const auto& msg : this->item_positions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgSetItemPositions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgSetItemPositions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgSetItemPositions::GetClassData() const { return &_class_data_; }

void CMsgSetItemPositions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgSetItemPositions *>(to)->MergeFrom(
      static_cast<const CMsgSetItemPositions &>(from));
}


void CMsgSetItemPositions::MergeFrom(const CMsgSetItemPositions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSetItemPositions)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_positions_.MergeFrom(from.item_positions_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSetItemPositions::CopyFrom(const CMsgSetItemPositions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSetItemPositions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSetItemPositions::IsInitialized() const {
  return true;
}

void CMsgSetItemPositions::InternalSwap(CMsgSetItemPositions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  item_positions_.InternalSwap(&other->item_positions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSetItemPositions::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[42]);
}

// ===================================================================

class CMsgGCReportAbuse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCReportAbuse>()._has_bits_);
  static void set_has_target_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_description(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_gid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_abuse_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_content_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_target_game_server_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_target_game_server_port(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

CMsgGCReportAbuse::CMsgGCReportAbuse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgGCReportAbuse)
}
CMsgGCReportAbuse::CMsgGCReportAbuse(const CMsgGCReportAbuse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_description()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArenaForAllocation());
  }
  ::memcpy(&target_steam_id_, &from.target_steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&target_game_server_port_) -
    reinterpret_cast<char*>(&target_steam_id_)) + sizeof(target_game_server_port_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCReportAbuse)
}

void CMsgGCReportAbuse::SharedCtor() {
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&target_steam_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&target_game_server_port_) -
    reinterpret_cast<char*>(&target_steam_id_)) + sizeof(target_game_server_port_));
}

CMsgGCReportAbuse::~CMsgGCReportAbuse() {
  // @@protoc_insertion_point(destructor:CMsgGCReportAbuse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgGCReportAbuse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCReportAbuse::ArenaDtor(void* object) {
  CMsgGCReportAbuse* _this = reinterpret_cast< CMsgGCReportAbuse* >(object);
  (void)_this;
}
void CMsgGCReportAbuse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCReportAbuse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCReportAbuse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCReportAbuse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    description_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&target_steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&target_game_server_port_) -
        reinterpret_cast<char*>(&target_steam_id_)) + sizeof(target_game_server_port_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCReportAbuse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 target_steam_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_target_steam_id(&has_bits);
          target_steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 abuse_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_abuse_type(&has_bits);
          abuse_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 content_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_content_type(&has_bits);
          content_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string description = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGCReportAbuse.description");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 gid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_gid(&has_bits);
          gid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed32 target_game_server_ip = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_target_game_server_ip(&has_bits);
          target_game_server_ip_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 target_game_server_port = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_target_game_server_port(&has_bits);
          target_game_server_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCReportAbuse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCReportAbuse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 target_steam_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_target_steam_id(), target);
  }

  // optional uint32 abuse_type = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_abuse_type(), target);
  }

  // optional uint32 content_type = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_content_type(), target);
  }

  // optional string description = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCReportAbuse.description");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_description(), target);
  }

  // optional uint64 gid = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_gid(), target);
  }

  // optional fixed32 target_game_server_ip = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(6, this->_internal_target_game_server_ip(), target);
  }

  // optional uint32 target_game_server_port = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_target_game_server_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCReportAbuse)
  return target;
}

size_t CMsgGCReportAbuse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCReportAbuse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string description = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_description());
    }

    // optional fixed64 target_steam_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint32 abuse_type = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_abuse_type());
    }

    // optional uint32 content_type = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_content_type());
    }

    // optional uint64 gid = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_gid());
    }

    // optional fixed32 target_game_server_ip = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional uint32 target_game_server_port = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_target_game_server_port());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCReportAbuse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgGCReportAbuse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCReportAbuse::GetClassData() const { return &_class_data_; }

void CMsgGCReportAbuse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgGCReportAbuse *>(to)->MergeFrom(
      static_cast<const CMsgGCReportAbuse &>(from));
}


void CMsgGCReportAbuse::MergeFrom(const CMsgGCReportAbuse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCReportAbuse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_description(from._internal_description());
    }
    if (cached_has_bits & 0x00000002u) {
      target_steam_id_ = from.target_steam_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      abuse_type_ = from.abuse_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      content_type_ = from.content_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      gid_ = from.gid_;
    }
    if (cached_has_bits & 0x00000020u) {
      target_game_server_ip_ = from.target_game_server_ip_;
    }
    if (cached_has_bits & 0x00000040u) {
      target_game_server_port_ = from.target_game_server_port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCReportAbuse::CopyFrom(const CMsgGCReportAbuse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCReportAbuse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCReportAbuse::IsInitialized() const {
  return true;
}

void CMsgGCReportAbuse::InternalSwap(CMsgGCReportAbuse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &description_, lhs_arena,
      &other->description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCReportAbuse, target_game_server_port_)
      + sizeof(CMsgGCReportAbuse::target_game_server_port_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCReportAbuse, target_steam_id_)>(
          reinterpret_cast<char*>(&target_steam_id_),
          reinterpret_cast<char*>(&other->target_steam_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCReportAbuse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[43]);
}

// ===================================================================

class CMsgGCReportAbuseResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCReportAbuseResponse>()._has_bits_);
  static void set_has_target_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_error_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCReportAbuseResponse::CMsgGCReportAbuseResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgGCReportAbuseResponse)
}
CMsgGCReportAbuseResponse::CMsgGCReportAbuseResponse(const CMsgGCReportAbuseResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_error_message()) {
    error_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_error_message(), 
      GetArenaForAllocation());
  }
  ::memcpy(&target_steam_id_, &from.target_steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&target_steam_id_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCReportAbuseResponse)
}

void CMsgGCReportAbuseResponse::SharedCtor() {
error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&target_steam_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&target_steam_id_)) + sizeof(result_));
}

CMsgGCReportAbuseResponse::~CMsgGCReportAbuseResponse() {
  // @@protoc_insertion_point(destructor:CMsgGCReportAbuseResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgGCReportAbuseResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  error_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCReportAbuseResponse::ArenaDtor(void* object) {
  CMsgGCReportAbuseResponse* _this = reinterpret_cast< CMsgGCReportAbuseResponse* >(object);
  (void)_this;
}
void CMsgGCReportAbuseResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCReportAbuseResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCReportAbuseResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCReportAbuseResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    error_message_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&target_steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&result_) -
        reinterpret_cast<char*>(&target_steam_id_)) + sizeof(result_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCReportAbuseResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 target_steam_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_target_steam_id(&has_bits);
          target_steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_result(&has_bits);
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string error_message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_error_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGCReportAbuseResponse.error_message");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCReportAbuseResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCReportAbuseResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 target_steam_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_target_steam_id(), target);
  }

  // optional uint32 result = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_result(), target);
  }

  // optional string error_message = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_error_message().data(), static_cast<int>(this->_internal_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCReportAbuseResponse.error_message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_error_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCReportAbuseResponse)
  return target;
}

size_t CMsgGCReportAbuseResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCReportAbuseResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string error_message = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_error_message());
    }

    // optional fixed64 target_steam_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint32 result = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_result());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCReportAbuseResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgGCReportAbuseResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCReportAbuseResponse::GetClassData() const { return &_class_data_; }

void CMsgGCReportAbuseResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgGCReportAbuseResponse *>(to)->MergeFrom(
      static_cast<const CMsgGCReportAbuseResponse &>(from));
}


void CMsgGCReportAbuseResponse::MergeFrom(const CMsgGCReportAbuseResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCReportAbuseResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_error_message(from._internal_error_message());
    }
    if (cached_has_bits & 0x00000002u) {
      target_steam_id_ = from.target_steam_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCReportAbuseResponse::CopyFrom(const CMsgGCReportAbuseResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCReportAbuseResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCReportAbuseResponse::IsInitialized() const {
  return true;
}

void CMsgGCReportAbuseResponse::InternalSwap(CMsgGCReportAbuseResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &error_message_, lhs_arena,
      &other->error_message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCReportAbuseResponse, result_)
      + sizeof(CMsgGCReportAbuseResponse::result_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCReportAbuseResponse, target_steam_id_)>(
          reinterpret_cast<char*>(&target_steam_id_),
          reinterpret_cast<char*>(&other->target_steam_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCReportAbuseResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[44]);
}

// ===================================================================

class CMsgGCNameItemNotification::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCNameItemNotification>()._has_bits_);
  static void set_has_player_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_item_def_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_item_name_custom(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCNameItemNotification::CMsgGCNameItemNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgGCNameItemNotification)
}
CMsgGCNameItemNotification::CMsgGCNameItemNotification(const CMsgGCNameItemNotification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  item_name_custom_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_item_name_custom()) {
    item_name_custom_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_item_name_custom(), 
      GetArenaForAllocation());
  }
  ::memcpy(&player_steamid_, &from.player_steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&item_def_index_) -
    reinterpret_cast<char*>(&player_steamid_)) + sizeof(item_def_index_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCNameItemNotification)
}

void CMsgGCNameItemNotification::SharedCtor() {
item_name_custom_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_steamid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&item_def_index_) -
    reinterpret_cast<char*>(&player_steamid_)) + sizeof(item_def_index_));
}

CMsgGCNameItemNotification::~CMsgGCNameItemNotification() {
  // @@protoc_insertion_point(destructor:CMsgGCNameItemNotification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgGCNameItemNotification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  item_name_custom_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCNameItemNotification::ArenaDtor(void* object) {
  CMsgGCNameItemNotification* _this = reinterpret_cast< CMsgGCNameItemNotification* >(object);
  (void)_this;
}
void CMsgGCNameItemNotification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCNameItemNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCNameItemNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCNameItemNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    item_name_custom_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&player_steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&item_def_index_) -
        reinterpret_cast<char*>(&player_steamid_)) + sizeof(item_def_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCNameItemNotification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 player_steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_player_steamid(&has_bits);
          player_steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 item_def_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_item_def_index(&has_bits);
          item_def_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string item_name_custom = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_item_name_custom();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGCNameItemNotification.item_name_custom");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCNameItemNotification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCNameItemNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 player_steamid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_player_steamid(), target);
  }

  // optional uint32 item_def_index = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_item_def_index(), target);
  }

  // optional string item_name_custom = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_item_name_custom().data(), static_cast<int>(this->_internal_item_name_custom().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCNameItemNotification.item_name_custom");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_item_name_custom(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCNameItemNotification)
  return target;
}

size_t CMsgGCNameItemNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCNameItemNotification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string item_name_custom = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_item_name_custom());
    }

    // optional fixed64 player_steamid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint32 item_def_index = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_item_def_index());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCNameItemNotification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgGCNameItemNotification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCNameItemNotification::GetClassData() const { return &_class_data_; }

void CMsgGCNameItemNotification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgGCNameItemNotification *>(to)->MergeFrom(
      static_cast<const CMsgGCNameItemNotification &>(from));
}


void CMsgGCNameItemNotification::MergeFrom(const CMsgGCNameItemNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCNameItemNotification)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_item_name_custom(from._internal_item_name_custom());
    }
    if (cached_has_bits & 0x00000002u) {
      player_steamid_ = from.player_steamid_;
    }
    if (cached_has_bits & 0x00000004u) {
      item_def_index_ = from.item_def_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCNameItemNotification::CopyFrom(const CMsgGCNameItemNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCNameItemNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCNameItemNotification::IsInitialized() const {
  return true;
}

void CMsgGCNameItemNotification::InternalSwap(CMsgGCNameItemNotification* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &item_name_custom_, lhs_arena,
      &other->item_name_custom_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCNameItemNotification, item_def_index_)
      + sizeof(CMsgGCNameItemNotification::item_def_index_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCNameItemNotification, player_steamid_)>(
          reinterpret_cast<char*>(&player_steamid_),
          reinterpret_cast<char*>(&other->player_steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCNameItemNotification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[45]);
}

// ===================================================================

class CMsgGCClientDisplayNotification::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCClientDisplayNotification>()._has_bits_);
  static void set_has_notification_title_localization_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_notification_body_localization_key(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGCClientDisplayNotification::CMsgGCClientDisplayNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  body_substring_keys_(arena),
  body_substring_values_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgGCClientDisplayNotification)
}
CMsgGCClientDisplayNotification::CMsgGCClientDisplayNotification(const CMsgGCClientDisplayNotification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      body_substring_keys_(from.body_substring_keys_),
      body_substring_values_(from.body_substring_values_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  notification_title_localization_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_notification_title_localization_key()) {
    notification_title_localization_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_notification_title_localization_key(), 
      GetArenaForAllocation());
  }
  notification_body_localization_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_notification_body_localization_key()) {
    notification_body_localization_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_notification_body_localization_key(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CMsgGCClientDisplayNotification)
}

void CMsgGCClientDisplayNotification::SharedCtor() {
notification_title_localization_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
notification_body_localization_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CMsgGCClientDisplayNotification::~CMsgGCClientDisplayNotification() {
  // @@protoc_insertion_point(destructor:CMsgGCClientDisplayNotification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgGCClientDisplayNotification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  notification_title_localization_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  notification_body_localization_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCClientDisplayNotification::ArenaDtor(void* object) {
  CMsgGCClientDisplayNotification* _this = reinterpret_cast< CMsgGCClientDisplayNotification* >(object);
  (void)_this;
}
void CMsgGCClientDisplayNotification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCClientDisplayNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCClientDisplayNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCClientDisplayNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  body_substring_keys_.Clear();
  body_substring_values_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      notification_title_localization_key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      notification_body_localization_key_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCClientDisplayNotification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string notification_title_localization_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_notification_title_localization_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGCClientDisplayNotification.notification_title_localization_key");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string notification_body_localization_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_notification_body_localization_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGCClientDisplayNotification.notification_body_localization_key");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string body_substring_keys = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_body_substring_keys();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGCClientDisplayNotification.body_substring_keys");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string body_substring_values = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_body_substring_values();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGCClientDisplayNotification.body_substring_values");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCClientDisplayNotification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCClientDisplayNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string notification_title_localization_key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_notification_title_localization_key().data(), static_cast<int>(this->_internal_notification_title_localization_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCClientDisplayNotification.notification_title_localization_key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_notification_title_localization_key(), target);
  }

  // optional string notification_body_localization_key = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_notification_body_localization_key().data(), static_cast<int>(this->_internal_notification_body_localization_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCClientDisplayNotification.notification_body_localization_key");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_notification_body_localization_key(), target);
  }

  // repeated string body_substring_keys = 3;
  for (int i = 0, n = this->_internal_body_substring_keys_size(); i < n; i++) {
    const auto& s = this->_internal_body_substring_keys(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCClientDisplayNotification.body_substring_keys");
    target = stream->WriteString(3, s, target);
  }

  // repeated string body_substring_values = 4;
  for (int i = 0, n = this->_internal_body_substring_values_size(); i < n; i++) {
    const auto& s = this->_internal_body_substring_values(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCClientDisplayNotification.body_substring_values");
    target = stream->WriteString(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCClientDisplayNotification)
  return target;
}

size_t CMsgGCClientDisplayNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCClientDisplayNotification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string body_substring_keys = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(body_substring_keys_.size());
  for (int i = 0, n = body_substring_keys_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      body_substring_keys_.Get(i));
  }

  // repeated string body_substring_values = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(body_substring_values_.size());
  for (int i = 0, n = body_substring_values_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      body_substring_values_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string notification_title_localization_key = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_notification_title_localization_key());
    }

    // optional string notification_body_localization_key = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_notification_body_localization_key());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCClientDisplayNotification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgGCClientDisplayNotification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCClientDisplayNotification::GetClassData() const { return &_class_data_; }

void CMsgGCClientDisplayNotification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgGCClientDisplayNotification *>(to)->MergeFrom(
      static_cast<const CMsgGCClientDisplayNotification &>(from));
}


void CMsgGCClientDisplayNotification::MergeFrom(const CMsgGCClientDisplayNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCClientDisplayNotification)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  body_substring_keys_.MergeFrom(from.body_substring_keys_);
  body_substring_values_.MergeFrom(from.body_substring_values_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_notification_title_localization_key(from._internal_notification_title_localization_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_notification_body_localization_key(from._internal_notification_body_localization_key());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCClientDisplayNotification::CopyFrom(const CMsgGCClientDisplayNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCClientDisplayNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCClientDisplayNotification::IsInitialized() const {
  return true;
}

void CMsgGCClientDisplayNotification::InternalSwap(CMsgGCClientDisplayNotification* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  body_substring_keys_.InternalSwap(&other->body_substring_keys_);
  body_substring_values_.InternalSwap(&other->body_substring_values_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &notification_title_localization_key_, lhs_arena,
      &other->notification_title_localization_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &notification_body_localization_key_, lhs_arena,
      &other->notification_body_localization_key_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCClientDisplayNotification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[46]);
}

// ===================================================================

class CMsgGCShowItemsPickedUp::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCShowItemsPickedUp>()._has_bits_);
  static void set_has_player_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCShowItemsPickedUp::CMsgGCShowItemsPickedUp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgGCShowItemsPickedUp)
}
CMsgGCShowItemsPickedUp::CMsgGCShowItemsPickedUp(const CMsgGCShowItemsPickedUp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  player_steamid_ = from.player_steamid_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCShowItemsPickedUp)
}

void CMsgGCShowItemsPickedUp::SharedCtor() {
player_steamid_ = uint64_t{0u};
}

CMsgGCShowItemsPickedUp::~CMsgGCShowItemsPickedUp() {
  // @@protoc_insertion_point(destructor:CMsgGCShowItemsPickedUp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgGCShowItemsPickedUp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCShowItemsPickedUp::ArenaDtor(void* object) {
  CMsgGCShowItemsPickedUp* _this = reinterpret_cast< CMsgGCShowItemsPickedUp* >(object);
  (void)_this;
}
void CMsgGCShowItemsPickedUp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCShowItemsPickedUp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCShowItemsPickedUp::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCShowItemsPickedUp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_steamid_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCShowItemsPickedUp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 player_steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_player_steamid(&has_bits);
          player_steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCShowItemsPickedUp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCShowItemsPickedUp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 player_steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_player_steamid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCShowItemsPickedUp)
  return target;
}

size_t CMsgGCShowItemsPickedUp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCShowItemsPickedUp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 player_steamid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCShowItemsPickedUp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgGCShowItemsPickedUp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCShowItemsPickedUp::GetClassData() const { return &_class_data_; }

void CMsgGCShowItemsPickedUp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgGCShowItemsPickedUp *>(to)->MergeFrom(
      static_cast<const CMsgGCShowItemsPickedUp &>(from));
}


void CMsgGCShowItemsPickedUp::MergeFrom(const CMsgGCShowItemsPickedUp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCShowItemsPickedUp)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_player_steamid()) {
    _internal_set_player_steamid(from._internal_player_steamid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCShowItemsPickedUp::CopyFrom(const CMsgGCShowItemsPickedUp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCShowItemsPickedUp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCShowItemsPickedUp::IsInitialized() const {
  return true;
}

void CMsgGCShowItemsPickedUp::InternalSwap(CMsgGCShowItemsPickedUp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(player_steamid_, other->player_steamid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCShowItemsPickedUp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[47]);
}

// ===================================================================

class CMsgGCIncrementKillCountResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCIncrementKillCountResponse>()._has_bits_);
  static void set_has_killer_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_num_kills(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_item_def(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_level_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgGCIncrementKillCountResponse::CMsgGCIncrementKillCountResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgGCIncrementKillCountResponse)
}
CMsgGCIncrementKillCountResponse::CMsgGCIncrementKillCountResponse(const CMsgGCIncrementKillCountResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&killer_account_id_, &from.killer_account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&level_type_) -
    reinterpret_cast<char*>(&killer_account_id_)) + sizeof(level_type_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCIncrementKillCountResponse)
}

void CMsgGCIncrementKillCountResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&killer_account_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&level_type_) -
    reinterpret_cast<char*>(&killer_account_id_)) + sizeof(level_type_));
}

CMsgGCIncrementKillCountResponse::~CMsgGCIncrementKillCountResponse() {
  // @@protoc_insertion_point(destructor:CMsgGCIncrementKillCountResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgGCIncrementKillCountResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCIncrementKillCountResponse::ArenaDtor(void* object) {
  CMsgGCIncrementKillCountResponse* _this = reinterpret_cast< CMsgGCIncrementKillCountResponse* >(object);
  (void)_this;
}
void CMsgGCIncrementKillCountResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCIncrementKillCountResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCIncrementKillCountResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCIncrementKillCountResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&killer_account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&level_type_) -
        reinterpret_cast<char*>(&killer_account_id_)) + sizeof(level_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCIncrementKillCountResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 killer_account_id = 1 [(.key_field) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_killer_account_id(&has_bits);
          killer_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 num_kills = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_num_kills(&has_bits);
          num_kills_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 item_def = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_item_def(&has_bits);
          item_def_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 level_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_level_type(&has_bits);
          level_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCIncrementKillCountResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCIncrementKillCountResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 killer_account_id = 1 [(.key_field) = true];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_killer_account_id(), target);
  }

  // optional uint32 num_kills = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_num_kills(), target);
  }

  // optional uint32 item_def = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_item_def(), target);
  }

  // optional uint32 level_type = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_level_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCIncrementKillCountResponse)
  return target;
}

size_t CMsgGCIncrementKillCountResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCIncrementKillCountResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 killer_account_id = 1 [(.key_field) = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_killer_account_id());
    }

    // optional uint32 num_kills = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_num_kills());
    }

    // optional uint32 item_def = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_item_def());
    }

    // optional uint32 level_type = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_level_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCIncrementKillCountResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgGCIncrementKillCountResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCIncrementKillCountResponse::GetClassData() const { return &_class_data_; }

void CMsgGCIncrementKillCountResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgGCIncrementKillCountResponse *>(to)->MergeFrom(
      static_cast<const CMsgGCIncrementKillCountResponse &>(from));
}


void CMsgGCIncrementKillCountResponse::MergeFrom(const CMsgGCIncrementKillCountResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCIncrementKillCountResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      killer_account_id_ = from.killer_account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      num_kills_ = from.num_kills_;
    }
    if (cached_has_bits & 0x00000004u) {
      item_def_ = from.item_def_;
    }
    if (cached_has_bits & 0x00000008u) {
      level_type_ = from.level_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCIncrementKillCountResponse::CopyFrom(const CMsgGCIncrementKillCountResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCIncrementKillCountResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCIncrementKillCountResponse::IsInitialized() const {
  return true;
}

void CMsgGCIncrementKillCountResponse::InternalSwap(CMsgGCIncrementKillCountResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCIncrementKillCountResponse, level_type_)
      + sizeof(CMsgGCIncrementKillCountResponse::level_type_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCIncrementKillCountResponse, killer_account_id_)>(
          reinterpret_cast<char*>(&killer_account_id_),
          reinterpret_cast<char*>(&other->killer_account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCIncrementKillCountResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[48]);
}

// ===================================================================

class CSOEconItemDropRateBonus::_Internal {
 public:
  using HasBits = decltype(std::declval<CSOEconItemDropRateBonus>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_expiration_date(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_bonus(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_bonus_count(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_def_index(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CSOEconItemDropRateBonus::CSOEconItemDropRateBonus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CSOEconItemDropRateBonus)
}
CSOEconItemDropRateBonus::CSOEconItemDropRateBonus(const CSOEconItemDropRateBonus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&def_index_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(def_index_));
  // @@protoc_insertion_point(copy_constructor:CSOEconItemDropRateBonus)
}

void CSOEconItemDropRateBonus::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&account_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&def_index_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(def_index_));
}

CSOEconItemDropRateBonus::~CSOEconItemDropRateBonus() {
  // @@protoc_insertion_point(destructor:CSOEconItemDropRateBonus)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CSOEconItemDropRateBonus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CSOEconItemDropRateBonus::ArenaDtor(void* object) {
  CSOEconItemDropRateBonus* _this = reinterpret_cast< CSOEconItemDropRateBonus* >(object);
  (void)_this;
}
void CSOEconItemDropRateBonus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSOEconItemDropRateBonus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSOEconItemDropRateBonus::Clear() {
// @@protoc_insertion_point(message_clear_start:CSOEconItemDropRateBonus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&def_index_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(def_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSOEconItemDropRateBonus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed32 expiration_date = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_expiration_date(&has_bits);
          expiration_date_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else
          goto handle_unusual;
        continue;
      // optional float bonus = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_bonus(&has_bits);
          bonus_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 bonus_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_bonus_count(&has_bits);
          bonus_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 item_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_item_id(&has_bits);
          item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 def_index = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_def_index(&has_bits);
          def_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSOEconItemDropRateBonus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSOEconItemDropRateBonus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional fixed32 expiration_date = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(2, this->_internal_expiration_date(), target);
  }

  // optional float bonus = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_bonus(), target);
  }

  // optional uint32 bonus_count = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_bonus_count(), target);
  }

  // optional uint64 item_id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_item_id(), target);
  }

  // optional uint32 def_index = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_def_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSOEconItemDropRateBonus)
  return target;
}

size_t CSOEconItemDropRateBonus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSOEconItemDropRateBonus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

    // optional fixed32 expiration_date = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float bonus = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional uint32 bonus_count = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_bonus_count());
    }

    // optional uint64 item_id = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_item_id());
    }

    // optional uint32 def_index = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_def_index());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSOEconItemDropRateBonus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CSOEconItemDropRateBonus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSOEconItemDropRateBonus::GetClassData() const { return &_class_data_; }

void CSOEconItemDropRateBonus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CSOEconItemDropRateBonus *>(to)->MergeFrom(
      static_cast<const CSOEconItemDropRateBonus &>(from));
}


void CSOEconItemDropRateBonus::MergeFrom(const CSOEconItemDropRateBonus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSOEconItemDropRateBonus)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      expiration_date_ = from.expiration_date_;
    }
    if (cached_has_bits & 0x00000004u) {
      bonus_ = from.bonus_;
    }
    if (cached_has_bits & 0x00000008u) {
      bonus_count_ = from.bonus_count_;
    }
    if (cached_has_bits & 0x00000010u) {
      item_id_ = from.item_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      def_index_ = from.def_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSOEconItemDropRateBonus::CopyFrom(const CSOEconItemDropRateBonus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSOEconItemDropRateBonus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOEconItemDropRateBonus::IsInitialized() const {
  return true;
}

void CSOEconItemDropRateBonus::InternalSwap(CSOEconItemDropRateBonus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSOEconItemDropRateBonus, def_index_)
      + sizeof(CSOEconItemDropRateBonus::def_index_)
      - PROTOBUF_FIELD_OFFSET(CSOEconItemDropRateBonus, account_id_)>(
          reinterpret_cast<char*>(&account_id_),
          reinterpret_cast<char*>(&other->account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSOEconItemDropRateBonus::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[49]);
}

// ===================================================================

class CSOEconItemLeagueViewPass::_Internal {
 public:
  using HasBits = decltype(std::declval<CSOEconItemLeagueViewPass>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_league_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_admin(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_itemindex(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CSOEconItemLeagueViewPass::CSOEconItemLeagueViewPass(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CSOEconItemLeagueViewPass)
}
CSOEconItemLeagueViewPass::CSOEconItemLeagueViewPass(const CSOEconItemLeagueViewPass& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&itemindex_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(itemindex_));
  // @@protoc_insertion_point(copy_constructor:CSOEconItemLeagueViewPass)
}

void CSOEconItemLeagueViewPass::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&account_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&itemindex_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(itemindex_));
}

CSOEconItemLeagueViewPass::~CSOEconItemLeagueViewPass() {
  // @@protoc_insertion_point(destructor:CSOEconItemLeagueViewPass)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CSOEconItemLeagueViewPass::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CSOEconItemLeagueViewPass::ArenaDtor(void* object) {
  CSOEconItemLeagueViewPass* _this = reinterpret_cast< CSOEconItemLeagueViewPass* >(object);
  (void)_this;
}
void CSOEconItemLeagueViewPass::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSOEconItemLeagueViewPass::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSOEconItemLeagueViewPass::Clear() {
// @@protoc_insertion_point(message_clear_start:CSOEconItemLeagueViewPass)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&itemindex_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(itemindex_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSOEconItemLeagueViewPass::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1 [(.key_field) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 league_id = 2 [(.key_field) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_league_id(&has_bits);
          league_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 admin = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_admin(&has_bits);
          admin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 itemindex = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_itemindex(&has_bits);
          itemindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSOEconItemLeagueViewPass::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSOEconItemLeagueViewPass)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1 [(.key_field) = true];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional uint32 league_id = 2 [(.key_field) = true];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_league_id(), target);
  }

  // optional uint32 admin = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_admin(), target);
  }

  // optional uint32 itemindex = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_itemindex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSOEconItemLeagueViewPass)
  return target;
}

size_t CSOEconItemLeagueViewPass::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSOEconItemLeagueViewPass)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 account_id = 1 [(.key_field) = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

    // optional uint32 league_id = 2 [(.key_field) = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_league_id());
    }

    // optional uint32 admin = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_admin());
    }

    // optional uint32 itemindex = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_itemindex());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSOEconItemLeagueViewPass::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CSOEconItemLeagueViewPass::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSOEconItemLeagueViewPass::GetClassData() const { return &_class_data_; }

void CSOEconItemLeagueViewPass::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CSOEconItemLeagueViewPass *>(to)->MergeFrom(
      static_cast<const CSOEconItemLeagueViewPass &>(from));
}


void CSOEconItemLeagueViewPass::MergeFrom(const CSOEconItemLeagueViewPass& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSOEconItemLeagueViewPass)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      league_id_ = from.league_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      admin_ = from.admin_;
    }
    if (cached_has_bits & 0x00000008u) {
      itemindex_ = from.itemindex_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSOEconItemLeagueViewPass::CopyFrom(const CSOEconItemLeagueViewPass& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSOEconItemLeagueViewPass)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOEconItemLeagueViewPass::IsInitialized() const {
  return true;
}

void CSOEconItemLeagueViewPass::InternalSwap(CSOEconItemLeagueViewPass* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSOEconItemLeagueViewPass, itemindex_)
      + sizeof(CSOEconItemLeagueViewPass::itemindex_)
      - PROTOBUF_FIELD_OFFSET(CSOEconItemLeagueViewPass, account_id_)>(
          reinterpret_cast<char*>(&account_id_),
          reinterpret_cast<char*>(&other->account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSOEconItemLeagueViewPass::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[50]);
}

// ===================================================================

class CSOEconItemEventTicket::_Internal {
 public:
  using HasBits = decltype(std::declval<CSOEconItemEventTicket>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CSOEconItemEventTicket::CSOEconItemEventTicket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CSOEconItemEventTicket)
}
CSOEconItemEventTicket::CSOEconItemEventTicket(const CSOEconItemEventTicket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&item_id_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(item_id_));
  // @@protoc_insertion_point(copy_constructor:CSOEconItemEventTicket)
}

void CSOEconItemEventTicket::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&account_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&item_id_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(item_id_));
}

CSOEconItemEventTicket::~CSOEconItemEventTicket() {
  // @@protoc_insertion_point(destructor:CSOEconItemEventTicket)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CSOEconItemEventTicket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CSOEconItemEventTicket::ArenaDtor(void* object) {
  CSOEconItemEventTicket* _this = reinterpret_cast< CSOEconItemEventTicket* >(object);
  (void)_this;
}
void CSOEconItemEventTicket::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSOEconItemEventTicket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSOEconItemEventTicket::Clear() {
// @@protoc_insertion_point(message_clear_start:CSOEconItemEventTicket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&item_id_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(item_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSOEconItemEventTicket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 event_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_event_id(&has_bits);
          event_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 item_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_item_id(&has_bits);
          item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSOEconItemEventTicket::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSOEconItemEventTicket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional uint32 event_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_event_id(), target);
  }

  // optional uint64 item_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_item_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSOEconItemEventTicket)
  return target;
}

size_t CSOEconItemEventTicket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSOEconItemEventTicket)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

    // optional uint32 event_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_event_id());
    }

    // optional uint64 item_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_item_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSOEconItemEventTicket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CSOEconItemEventTicket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSOEconItemEventTicket::GetClassData() const { return &_class_data_; }

void CSOEconItemEventTicket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CSOEconItemEventTicket *>(to)->MergeFrom(
      static_cast<const CSOEconItemEventTicket &>(from));
}


void CSOEconItemEventTicket::MergeFrom(const CSOEconItemEventTicket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSOEconItemEventTicket)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      event_id_ = from.event_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      item_id_ = from.item_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSOEconItemEventTicket::CopyFrom(const CSOEconItemEventTicket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSOEconItemEventTicket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOEconItemEventTicket::IsInitialized() const {
  return true;
}

void CSOEconItemEventTicket::InternalSwap(CSOEconItemEventTicket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSOEconItemEventTicket, item_id_)
      + sizeof(CSOEconItemEventTicket::item_id_)
      - PROTOBUF_FIELD_OFFSET(CSOEconItemEventTicket, account_id_)>(
          reinterpret_cast<char*>(&account_id_),
          reinterpret_cast<char*>(&other->account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSOEconItemEventTicket::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[51]);
}

// ===================================================================

class CMsgGCItemPreviewItemBoughtNotification::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCItemPreviewItemBoughtNotification>()._has_bits_);
  static void set_has_item_def_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCItemPreviewItemBoughtNotification::CMsgGCItemPreviewItemBoughtNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgGCItemPreviewItemBoughtNotification)
}
CMsgGCItemPreviewItemBoughtNotification::CMsgGCItemPreviewItemBoughtNotification(const CMsgGCItemPreviewItemBoughtNotification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  item_def_index_ = from.item_def_index_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCItemPreviewItemBoughtNotification)
}

void CMsgGCItemPreviewItemBoughtNotification::SharedCtor() {
item_def_index_ = 0u;
}

CMsgGCItemPreviewItemBoughtNotification::~CMsgGCItemPreviewItemBoughtNotification() {
  // @@protoc_insertion_point(destructor:CMsgGCItemPreviewItemBoughtNotification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgGCItemPreviewItemBoughtNotification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCItemPreviewItemBoughtNotification::ArenaDtor(void* object) {
  CMsgGCItemPreviewItemBoughtNotification* _this = reinterpret_cast< CMsgGCItemPreviewItemBoughtNotification* >(object);
  (void)_this;
}
void CMsgGCItemPreviewItemBoughtNotification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCItemPreviewItemBoughtNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCItemPreviewItemBoughtNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCItemPreviewItemBoughtNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_def_index_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCItemPreviewItemBoughtNotification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 item_def_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_item_def_index(&has_bits);
          item_def_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCItemPreviewItemBoughtNotification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCItemPreviewItemBoughtNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 item_def_index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_item_def_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCItemPreviewItemBoughtNotification)
  return target;
}

size_t CMsgGCItemPreviewItemBoughtNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCItemPreviewItemBoughtNotification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 item_def_index = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_item_def_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCItemPreviewItemBoughtNotification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgGCItemPreviewItemBoughtNotification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCItemPreviewItemBoughtNotification::GetClassData() const { return &_class_data_; }

void CMsgGCItemPreviewItemBoughtNotification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgGCItemPreviewItemBoughtNotification *>(to)->MergeFrom(
      static_cast<const CMsgGCItemPreviewItemBoughtNotification &>(from));
}


void CMsgGCItemPreviewItemBoughtNotification::MergeFrom(const CMsgGCItemPreviewItemBoughtNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCItemPreviewItemBoughtNotification)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_item_def_index()) {
    _internal_set_item_def_index(from._internal_item_def_index());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCItemPreviewItemBoughtNotification::CopyFrom(const CMsgGCItemPreviewItemBoughtNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCItemPreviewItemBoughtNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCItemPreviewItemBoughtNotification::IsInitialized() const {
  return true;
}

void CMsgGCItemPreviewItemBoughtNotification::InternalSwap(CMsgGCItemPreviewItemBoughtNotification* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(item_def_index_, other->item_def_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCItemPreviewItemBoughtNotification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[52]);
}

// ===================================================================

class CMsgGCStorePurchaseCancel::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCStorePurchaseCancel>()._has_bits_);
  static void set_has_txn_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCStorePurchaseCancel::CMsgGCStorePurchaseCancel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgGCStorePurchaseCancel)
}
CMsgGCStorePurchaseCancel::CMsgGCStorePurchaseCancel(const CMsgGCStorePurchaseCancel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  txn_id_ = from.txn_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCStorePurchaseCancel)
}

void CMsgGCStorePurchaseCancel::SharedCtor() {
txn_id_ = uint64_t{0u};
}

CMsgGCStorePurchaseCancel::~CMsgGCStorePurchaseCancel() {
  // @@protoc_insertion_point(destructor:CMsgGCStorePurchaseCancel)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgGCStorePurchaseCancel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCStorePurchaseCancel::ArenaDtor(void* object) {
  CMsgGCStorePurchaseCancel* _this = reinterpret_cast< CMsgGCStorePurchaseCancel* >(object);
  (void)_this;
}
void CMsgGCStorePurchaseCancel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCStorePurchaseCancel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCStorePurchaseCancel::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCStorePurchaseCancel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  txn_id_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCStorePurchaseCancel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 txn_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_txn_id(&has_bits);
          txn_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCStorePurchaseCancel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCStorePurchaseCancel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 txn_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_txn_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCStorePurchaseCancel)
  return target;
}

size_t CMsgGCStorePurchaseCancel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCStorePurchaseCancel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 txn_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_txn_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCStorePurchaseCancel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgGCStorePurchaseCancel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCStorePurchaseCancel::GetClassData() const { return &_class_data_; }

void CMsgGCStorePurchaseCancel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgGCStorePurchaseCancel *>(to)->MergeFrom(
      static_cast<const CMsgGCStorePurchaseCancel &>(from));
}


void CMsgGCStorePurchaseCancel::MergeFrom(const CMsgGCStorePurchaseCancel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCStorePurchaseCancel)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_txn_id()) {
    _internal_set_txn_id(from._internal_txn_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCStorePurchaseCancel::CopyFrom(const CMsgGCStorePurchaseCancel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCStorePurchaseCancel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCStorePurchaseCancel::IsInitialized() const {
  return true;
}

void CMsgGCStorePurchaseCancel::InternalSwap(CMsgGCStorePurchaseCancel* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(txn_id_, other->txn_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCStorePurchaseCancel::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[53]);
}

// ===================================================================

class CMsgGCStorePurchaseCancelResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCStorePurchaseCancelResponse>()._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCStorePurchaseCancelResponse::CMsgGCStorePurchaseCancelResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgGCStorePurchaseCancelResponse)
}
CMsgGCStorePurchaseCancelResponse::CMsgGCStorePurchaseCancelResponse(const CMsgGCStorePurchaseCancelResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCStorePurchaseCancelResponse)
}

void CMsgGCStorePurchaseCancelResponse::SharedCtor() {
result_ = 0u;
}

CMsgGCStorePurchaseCancelResponse::~CMsgGCStorePurchaseCancelResponse() {
  // @@protoc_insertion_point(destructor:CMsgGCStorePurchaseCancelResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgGCStorePurchaseCancelResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCStorePurchaseCancelResponse::ArenaDtor(void* object) {
  CMsgGCStorePurchaseCancelResponse* _this = reinterpret_cast< CMsgGCStorePurchaseCancelResponse* >(object);
  (void)_this;
}
void CMsgGCStorePurchaseCancelResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCStorePurchaseCancelResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCStorePurchaseCancelResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCStorePurchaseCancelResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCStorePurchaseCancelResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_result(&has_bits);
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCStorePurchaseCancelResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCStorePurchaseCancelResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCStorePurchaseCancelResponse)
  return target;
}

size_t CMsgGCStorePurchaseCancelResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCStorePurchaseCancelResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 result = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCStorePurchaseCancelResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgGCStorePurchaseCancelResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCStorePurchaseCancelResponse::GetClassData() const { return &_class_data_; }

void CMsgGCStorePurchaseCancelResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgGCStorePurchaseCancelResponse *>(to)->MergeFrom(
      static_cast<const CMsgGCStorePurchaseCancelResponse &>(from));
}


void CMsgGCStorePurchaseCancelResponse::MergeFrom(const CMsgGCStorePurchaseCancelResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCStorePurchaseCancelResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_result()) {
    _internal_set_result(from._internal_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCStorePurchaseCancelResponse::CopyFrom(const CMsgGCStorePurchaseCancelResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCStorePurchaseCancelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCStorePurchaseCancelResponse::IsInitialized() const {
  return true;
}

void CMsgGCStorePurchaseCancelResponse::InternalSwap(CMsgGCStorePurchaseCancelResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCStorePurchaseCancelResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[54]);
}

// ===================================================================

class CMsgGCStorePurchaseFinalize::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCStorePurchaseFinalize>()._has_bits_);
  static void set_has_txn_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCStorePurchaseFinalize::CMsgGCStorePurchaseFinalize(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgGCStorePurchaseFinalize)
}
CMsgGCStorePurchaseFinalize::CMsgGCStorePurchaseFinalize(const CMsgGCStorePurchaseFinalize& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  txn_id_ = from.txn_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCStorePurchaseFinalize)
}

void CMsgGCStorePurchaseFinalize::SharedCtor() {
txn_id_ = uint64_t{0u};
}

CMsgGCStorePurchaseFinalize::~CMsgGCStorePurchaseFinalize() {
  // @@protoc_insertion_point(destructor:CMsgGCStorePurchaseFinalize)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgGCStorePurchaseFinalize::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCStorePurchaseFinalize::ArenaDtor(void* object) {
  CMsgGCStorePurchaseFinalize* _this = reinterpret_cast< CMsgGCStorePurchaseFinalize* >(object);
  (void)_this;
}
void CMsgGCStorePurchaseFinalize::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCStorePurchaseFinalize::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCStorePurchaseFinalize::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCStorePurchaseFinalize)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  txn_id_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCStorePurchaseFinalize::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 txn_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_txn_id(&has_bits);
          txn_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCStorePurchaseFinalize::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCStorePurchaseFinalize)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 txn_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_txn_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCStorePurchaseFinalize)
  return target;
}

size_t CMsgGCStorePurchaseFinalize::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCStorePurchaseFinalize)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 txn_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_txn_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCStorePurchaseFinalize::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgGCStorePurchaseFinalize::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCStorePurchaseFinalize::GetClassData() const { return &_class_data_; }

void CMsgGCStorePurchaseFinalize::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgGCStorePurchaseFinalize *>(to)->MergeFrom(
      static_cast<const CMsgGCStorePurchaseFinalize &>(from));
}


void CMsgGCStorePurchaseFinalize::MergeFrom(const CMsgGCStorePurchaseFinalize& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCStorePurchaseFinalize)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_txn_id()) {
    _internal_set_txn_id(from._internal_txn_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCStorePurchaseFinalize::CopyFrom(const CMsgGCStorePurchaseFinalize& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCStorePurchaseFinalize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCStorePurchaseFinalize::IsInitialized() const {
  return true;
}

void CMsgGCStorePurchaseFinalize::InternalSwap(CMsgGCStorePurchaseFinalize* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(txn_id_, other->txn_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCStorePurchaseFinalize::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[55]);
}

// ===================================================================

class CMsgGCStorePurchaseFinalizeResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCStorePurchaseFinalizeResponse>()._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCStorePurchaseFinalizeResponse::CMsgGCStorePurchaseFinalizeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  item_ids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgGCStorePurchaseFinalizeResponse)
}
CMsgGCStorePurchaseFinalizeResponse::CMsgGCStorePurchaseFinalizeResponse(const CMsgGCStorePurchaseFinalizeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      item_ids_(from.item_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCStorePurchaseFinalizeResponse)
}

void CMsgGCStorePurchaseFinalizeResponse::SharedCtor() {
result_ = 0u;
}

CMsgGCStorePurchaseFinalizeResponse::~CMsgGCStorePurchaseFinalizeResponse() {
  // @@protoc_insertion_point(destructor:CMsgGCStorePurchaseFinalizeResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgGCStorePurchaseFinalizeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCStorePurchaseFinalizeResponse::ArenaDtor(void* object) {
  CMsgGCStorePurchaseFinalizeResponse* _this = reinterpret_cast< CMsgGCStorePurchaseFinalizeResponse* >(object);
  (void)_this;
}
void CMsgGCStorePurchaseFinalizeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCStorePurchaseFinalizeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCStorePurchaseFinalizeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCStorePurchaseFinalizeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_ids_.Clear();
  result_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCStorePurchaseFinalizeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_result(&has_bits);
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 item_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_item_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_item_ids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCStorePurchaseFinalizeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCStorePurchaseFinalizeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_result(), target);
  }

  // repeated uint64 item_ids = 2;
  for (int i = 0, n = this->_internal_item_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_item_ids(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCStorePurchaseFinalizeResponse)
  return target;
}

size_t CMsgGCStorePurchaseFinalizeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCStorePurchaseFinalizeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 item_ids = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->item_ids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_item_ids_size());
    total_size += data_size;
  }

  // optional uint32 result = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCStorePurchaseFinalizeResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgGCStorePurchaseFinalizeResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCStorePurchaseFinalizeResponse::GetClassData() const { return &_class_data_; }

void CMsgGCStorePurchaseFinalizeResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgGCStorePurchaseFinalizeResponse *>(to)->MergeFrom(
      static_cast<const CMsgGCStorePurchaseFinalizeResponse &>(from));
}


void CMsgGCStorePurchaseFinalizeResponse::MergeFrom(const CMsgGCStorePurchaseFinalizeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCStorePurchaseFinalizeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_ids_.MergeFrom(from.item_ids_);
  if (from._internal_has_result()) {
    _internal_set_result(from._internal_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCStorePurchaseFinalizeResponse::CopyFrom(const CMsgGCStorePurchaseFinalizeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCStorePurchaseFinalizeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCStorePurchaseFinalizeResponse::IsInitialized() const {
  return true;
}

void CMsgGCStorePurchaseFinalizeResponse::InternalSwap(CMsgGCStorePurchaseFinalizeResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  item_ids_.InternalSwap(&other->item_ids_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCStorePurchaseFinalizeResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[56]);
}

// ===================================================================

class CMsgGCBannedWordListRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCBannedWordListRequest>()._has_bits_);
  static void set_has_ban_list_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_word_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGCBannedWordListRequest::CMsgGCBannedWordListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgGCBannedWordListRequest)
}
CMsgGCBannedWordListRequest::CMsgGCBannedWordListRequest(const CMsgGCBannedWordListRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&ban_list_group_id_, &from.ban_list_group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&word_id_) -
    reinterpret_cast<char*>(&ban_list_group_id_)) + sizeof(word_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCBannedWordListRequest)
}

void CMsgGCBannedWordListRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ban_list_group_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&word_id_) -
    reinterpret_cast<char*>(&ban_list_group_id_)) + sizeof(word_id_));
}

CMsgGCBannedWordListRequest::~CMsgGCBannedWordListRequest() {
  // @@protoc_insertion_point(destructor:CMsgGCBannedWordListRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgGCBannedWordListRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCBannedWordListRequest::ArenaDtor(void* object) {
  CMsgGCBannedWordListRequest* _this = reinterpret_cast< CMsgGCBannedWordListRequest* >(object);
  (void)_this;
}
void CMsgGCBannedWordListRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCBannedWordListRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCBannedWordListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCBannedWordListRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&ban_list_group_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&word_id_) -
        reinterpret_cast<char*>(&ban_list_group_id_)) + sizeof(word_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCBannedWordListRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 ban_list_group_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ban_list_group_id(&has_bits);
          ban_list_group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 word_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_word_id(&has_bits);
          word_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCBannedWordListRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCBannedWordListRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ban_list_group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_ban_list_group_id(), target);
  }

  // optional uint32 word_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_word_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCBannedWordListRequest)
  return target;
}

size_t CMsgGCBannedWordListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCBannedWordListRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 ban_list_group_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_ban_list_group_id());
    }

    // optional uint32 word_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_word_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCBannedWordListRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgGCBannedWordListRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCBannedWordListRequest::GetClassData() const { return &_class_data_; }

void CMsgGCBannedWordListRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgGCBannedWordListRequest *>(to)->MergeFrom(
      static_cast<const CMsgGCBannedWordListRequest &>(from));
}


void CMsgGCBannedWordListRequest::MergeFrom(const CMsgGCBannedWordListRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCBannedWordListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ban_list_group_id_ = from.ban_list_group_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      word_id_ = from.word_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCBannedWordListRequest::CopyFrom(const CMsgGCBannedWordListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCBannedWordListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCBannedWordListRequest::IsInitialized() const {
  return true;
}

void CMsgGCBannedWordListRequest::InternalSwap(CMsgGCBannedWordListRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCBannedWordListRequest, word_id_)
      + sizeof(CMsgGCBannedWordListRequest::word_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCBannedWordListRequest, ban_list_group_id_)>(
          reinterpret_cast<char*>(&ban_list_group_id_),
          reinterpret_cast<char*>(&other->ban_list_group_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCBannedWordListRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[57]);
}

// ===================================================================

class CMsgGCRequestAnnouncements::_Internal {
 public:
};

CMsgGCRequestAnnouncements::CMsgGCRequestAnnouncements(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CMsgGCRequestAnnouncements)
}
CMsgGCRequestAnnouncements::CMsgGCRequestAnnouncements(const CMsgGCRequestAnnouncements& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGCRequestAnnouncements)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCRequestAnnouncements::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCRequestAnnouncements::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCRequestAnnouncements::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[58]);
}

// ===================================================================

class CMsgGCRequestAnnouncementsResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCRequestAnnouncementsResponse>()._has_bits_);
  static void set_has_announcement_title(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_announcement(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_nextmatch_title(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_nextmatch(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgGCRequestAnnouncementsResponse::CMsgGCRequestAnnouncementsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgGCRequestAnnouncementsResponse)
}
CMsgGCRequestAnnouncementsResponse::CMsgGCRequestAnnouncementsResponse(const CMsgGCRequestAnnouncementsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  announcement_title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_announcement_title()) {
    announcement_title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_announcement_title(), 
      GetArenaForAllocation());
  }
  announcement_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_announcement()) {
    announcement_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_announcement(), 
      GetArenaForAllocation());
  }
  nextmatch_title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_nextmatch_title()) {
    nextmatch_title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nextmatch_title(), 
      GetArenaForAllocation());
  }
  nextmatch_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_nextmatch()) {
    nextmatch_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nextmatch(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CMsgGCRequestAnnouncementsResponse)
}

void CMsgGCRequestAnnouncementsResponse::SharedCtor() {
announcement_title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
announcement_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
nextmatch_title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
nextmatch_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CMsgGCRequestAnnouncementsResponse::~CMsgGCRequestAnnouncementsResponse() {
  // @@protoc_insertion_point(destructor:CMsgGCRequestAnnouncementsResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgGCRequestAnnouncementsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  announcement_title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  announcement_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nextmatch_title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nextmatch_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCRequestAnnouncementsResponse::ArenaDtor(void* object) {
  CMsgGCRequestAnnouncementsResponse* _this = reinterpret_cast< CMsgGCRequestAnnouncementsResponse* >(object);
  (void)_this;
}
void CMsgGCRequestAnnouncementsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCRequestAnnouncementsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCRequestAnnouncementsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCRequestAnnouncementsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      announcement_title_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      announcement_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      nextmatch_title_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      nextmatch_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCRequestAnnouncementsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string announcement_title = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_announcement_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGCRequestAnnouncementsResponse.announcement_title");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string announcement = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_announcement();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGCRequestAnnouncementsResponse.announcement");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string nextmatch_title = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_nextmatch_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGCRequestAnnouncementsResponse.nextmatch_title");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string nextmatch = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_nextmatch();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGCRequestAnnouncementsResponse.nextmatch");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCRequestAnnouncementsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCRequestAnnouncementsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string announcement_title = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_announcement_title().data(), static_cast<int>(this->_internal_announcement_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCRequestAnnouncementsResponse.announcement_title");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_announcement_title(), target);
  }

  // optional string announcement = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_announcement().data(), static_cast<int>(this->_internal_announcement().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCRequestAnnouncementsResponse.announcement");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_announcement(), target);
  }

  // optional string nextmatch_title = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_nextmatch_title().data(), static_cast<int>(this->_internal_nextmatch_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCRequestAnnouncementsResponse.nextmatch_title");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_nextmatch_title(), target);
  }

  // optional string nextmatch = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_nextmatch().data(), static_cast<int>(this->_internal_nextmatch().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCRequestAnnouncementsResponse.nextmatch");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_nextmatch(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCRequestAnnouncementsResponse)
  return target;
}

size_t CMsgGCRequestAnnouncementsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCRequestAnnouncementsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string announcement_title = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_announcement_title());
    }

    // optional string announcement = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_announcement());
    }

    // optional string nextmatch_title = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_nextmatch_title());
    }

    // optional string nextmatch = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_nextmatch());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCRequestAnnouncementsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgGCRequestAnnouncementsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCRequestAnnouncementsResponse::GetClassData() const { return &_class_data_; }

void CMsgGCRequestAnnouncementsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgGCRequestAnnouncementsResponse *>(to)->MergeFrom(
      static_cast<const CMsgGCRequestAnnouncementsResponse &>(from));
}


void CMsgGCRequestAnnouncementsResponse::MergeFrom(const CMsgGCRequestAnnouncementsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCRequestAnnouncementsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_announcement_title(from._internal_announcement_title());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_announcement(from._internal_announcement());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_nextmatch_title(from._internal_nextmatch_title());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_nextmatch(from._internal_nextmatch());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCRequestAnnouncementsResponse::CopyFrom(const CMsgGCRequestAnnouncementsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCRequestAnnouncementsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCRequestAnnouncementsResponse::IsInitialized() const {
  return true;
}

void CMsgGCRequestAnnouncementsResponse::InternalSwap(CMsgGCRequestAnnouncementsResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &announcement_title_, lhs_arena,
      &other->announcement_title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &announcement_, lhs_arena,
      &other->announcement_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &nextmatch_title_, lhs_arena,
      &other->nextmatch_title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &nextmatch_, lhs_arena,
      &other->nextmatch_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCRequestAnnouncementsResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[59]);
}

// ===================================================================

class CMsgGCBannedWord::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCBannedWord>()._has_bits_);
  static void set_has_word_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_word_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_word(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCBannedWord::CMsgGCBannedWord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgGCBannedWord)
}
CMsgGCBannedWord::CMsgGCBannedWord(const CMsgGCBannedWord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  word_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_word()) {
    word_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_word(), 
      GetArenaForAllocation());
  }
  ::memcpy(&word_id_, &from.word_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&word_type_) -
    reinterpret_cast<char*>(&word_id_)) + sizeof(word_type_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCBannedWord)
}

void CMsgGCBannedWord::SharedCtor() {
word_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&word_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&word_type_) -
    reinterpret_cast<char*>(&word_id_)) + sizeof(word_type_));
}

CMsgGCBannedWord::~CMsgGCBannedWord() {
  // @@protoc_insertion_point(destructor:CMsgGCBannedWord)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgGCBannedWord::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  word_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCBannedWord::ArenaDtor(void* object) {
  CMsgGCBannedWord* _this = reinterpret_cast< CMsgGCBannedWord* >(object);
  (void)_this;
}
void CMsgGCBannedWord::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCBannedWord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCBannedWord::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCBannedWord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    word_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&word_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&word_type_) -
        reinterpret_cast<char*>(&word_id_)) + sizeof(word_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCBannedWord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 word_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_word_id(&has_bits);
          word_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .GC_BannedWordType word_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::GC_BannedWordType_IsValid(val))) {
            _internal_set_word_type(static_cast<::GC_BannedWordType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string word = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_word();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGCBannedWord.word");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCBannedWord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCBannedWord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 word_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_word_id(), target);
  }

  // optional .GC_BannedWordType word_type = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_word_type(), target);
  }

  // optional string word = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_word().data(), static_cast<int>(this->_internal_word().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCBannedWord.word");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_word(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCBannedWord)
  return target;
}

size_t CMsgGCBannedWord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCBannedWord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string word = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_word());
    }

    // optional uint32 word_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_word_id());
    }

    // optional .GC_BannedWordType word_type = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_word_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCBannedWord::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgGCBannedWord::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCBannedWord::GetClassData() const { return &_class_data_; }

void CMsgGCBannedWord::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgGCBannedWord *>(to)->MergeFrom(
      static_cast<const CMsgGCBannedWord &>(from));
}


void CMsgGCBannedWord::MergeFrom(const CMsgGCBannedWord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCBannedWord)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_word(from._internal_word());
    }
    if (cached_has_bits & 0x00000002u) {
      word_id_ = from.word_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      word_type_ = from.word_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCBannedWord::CopyFrom(const CMsgGCBannedWord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCBannedWord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCBannedWord::IsInitialized() const {
  return true;
}

void CMsgGCBannedWord::InternalSwap(CMsgGCBannedWord* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &word_, lhs_arena,
      &other->word_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCBannedWord, word_type_)
      + sizeof(CMsgGCBannedWord::word_type_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCBannedWord, word_id_)>(
          reinterpret_cast<char*>(&word_id_),
          reinterpret_cast<char*>(&other->word_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCBannedWord::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[60]);
}

// ===================================================================

class CMsgGCBannedWordListResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCBannedWordListResponse>()._has_bits_);
  static void set_has_ban_list_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCBannedWordListResponse::CMsgGCBannedWordListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  word_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgGCBannedWordListResponse)
}
CMsgGCBannedWordListResponse::CMsgGCBannedWordListResponse(const CMsgGCBannedWordListResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      word_list_(from.word_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ban_list_group_id_ = from.ban_list_group_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCBannedWordListResponse)
}

void CMsgGCBannedWordListResponse::SharedCtor() {
ban_list_group_id_ = 0u;
}

CMsgGCBannedWordListResponse::~CMsgGCBannedWordListResponse() {
  // @@protoc_insertion_point(destructor:CMsgGCBannedWordListResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgGCBannedWordListResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCBannedWordListResponse::ArenaDtor(void* object) {
  CMsgGCBannedWordListResponse* _this = reinterpret_cast< CMsgGCBannedWordListResponse* >(object);
  (void)_this;
}
void CMsgGCBannedWordListResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCBannedWordListResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCBannedWordListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCBannedWordListResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  word_list_.Clear();
  ban_list_group_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCBannedWordListResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 ban_list_group_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ban_list_group_id(&has_bits);
          ban_list_group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgGCBannedWord word_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_word_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCBannedWordListResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCBannedWordListResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ban_list_group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_ban_list_group_id(), target);
  }

  // repeated .CMsgGCBannedWord word_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_word_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_word_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCBannedWordListResponse)
  return target;
}

size_t CMsgGCBannedWordListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCBannedWordListResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgGCBannedWord word_list = 2;
  total_size += 1UL * this->_internal_word_list_size();
  for (const auto& msg : this->word_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 ban_list_group_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_ban_list_group_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCBannedWordListResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgGCBannedWordListResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCBannedWordListResponse::GetClassData() const { return &_class_data_; }

void CMsgGCBannedWordListResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgGCBannedWordListResponse *>(to)->MergeFrom(
      static_cast<const CMsgGCBannedWordListResponse &>(from));
}


void CMsgGCBannedWordListResponse::MergeFrom(const CMsgGCBannedWordListResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCBannedWordListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  word_list_.MergeFrom(from.word_list_);
  if (from._internal_has_ban_list_group_id()) {
    _internal_set_ban_list_group_id(from._internal_ban_list_group_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCBannedWordListResponse::CopyFrom(const CMsgGCBannedWordListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCBannedWordListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCBannedWordListResponse::IsInitialized() const {
  return true;
}

void CMsgGCBannedWordListResponse::InternalSwap(CMsgGCBannedWordListResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  word_list_.InternalSwap(&other->word_list_);
  swap(ban_list_group_id_, other->ban_list_group_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCBannedWordListResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[61]);
}

// ===================================================================

class CMsgGCToGCBannedWordListBroadcast::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToGCBannedWordListBroadcast>()._has_bits_);
  static const ::CMsgGCBannedWordListResponse& broadcast(const CMsgGCToGCBannedWordListBroadcast* msg);
  static void set_has_broadcast(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgGCBannedWordListResponse&
CMsgGCToGCBannedWordListBroadcast::_Internal::broadcast(const CMsgGCToGCBannedWordListBroadcast* msg) {
  return *msg->broadcast_;
}
CMsgGCToGCBannedWordListBroadcast::CMsgGCToGCBannedWordListBroadcast(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgGCToGCBannedWordListBroadcast)
}
CMsgGCToGCBannedWordListBroadcast::CMsgGCToGCBannedWordListBroadcast(const CMsgGCToGCBannedWordListBroadcast& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_broadcast()) {
    broadcast_ = new ::CMsgGCBannedWordListResponse(*from.broadcast_);
  } else {
    broadcast_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCBannedWordListBroadcast)
}

void CMsgGCToGCBannedWordListBroadcast::SharedCtor() {
broadcast_ = nullptr;
}

CMsgGCToGCBannedWordListBroadcast::~CMsgGCToGCBannedWordListBroadcast() {
  // @@protoc_insertion_point(destructor:CMsgGCToGCBannedWordListBroadcast)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgGCToGCBannedWordListBroadcast::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete broadcast_;
}

void CMsgGCToGCBannedWordListBroadcast::ArenaDtor(void* object) {
  CMsgGCToGCBannedWordListBroadcast* _this = reinterpret_cast< CMsgGCToGCBannedWordListBroadcast* >(object);
  (void)_this;
}
void CMsgGCToGCBannedWordListBroadcast::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCToGCBannedWordListBroadcast::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCToGCBannedWordListBroadcast::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToGCBannedWordListBroadcast)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(broadcast_ != nullptr);
    broadcast_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToGCBannedWordListBroadcast::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgGCBannedWordListResponse broadcast = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_broadcast(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCToGCBannedWordListBroadcast::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToGCBannedWordListBroadcast)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgGCBannedWordListResponse broadcast = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::broadcast(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToGCBannedWordListBroadcast)
  return target;
}

size_t CMsgGCToGCBannedWordListBroadcast::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToGCBannedWordListBroadcast)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CMsgGCBannedWordListResponse broadcast = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *broadcast_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCToGCBannedWordListBroadcast::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgGCToGCBannedWordListBroadcast::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCToGCBannedWordListBroadcast::GetClassData() const { return &_class_data_; }

void CMsgGCToGCBannedWordListBroadcast::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgGCToGCBannedWordListBroadcast *>(to)->MergeFrom(
      static_cast<const CMsgGCToGCBannedWordListBroadcast &>(from));
}


void CMsgGCToGCBannedWordListBroadcast::MergeFrom(const CMsgGCToGCBannedWordListBroadcast& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToGCBannedWordListBroadcast)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_broadcast()) {
    _internal_mutable_broadcast()->::CMsgGCBannedWordListResponse::MergeFrom(from._internal_broadcast());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCToGCBannedWordListBroadcast::CopyFrom(const CMsgGCToGCBannedWordListBroadcast& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToGCBannedWordListBroadcast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCBannedWordListBroadcast::IsInitialized() const {
  return true;
}

void CMsgGCToGCBannedWordListBroadcast::InternalSwap(CMsgGCToGCBannedWordListBroadcast* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(broadcast_, other->broadcast_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToGCBannedWordListBroadcast::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[62]);
}

// ===================================================================

class CMsgGCToGCBannedWordListUpdated::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToGCBannedWordListUpdated>()._has_bits_);
  static void set_has_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCToGCBannedWordListUpdated::CMsgGCToGCBannedWordListUpdated(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgGCToGCBannedWordListUpdated)
}
CMsgGCToGCBannedWordListUpdated::CMsgGCToGCBannedWordListUpdated(const CMsgGCToGCBannedWordListUpdated& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  group_id_ = from.group_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCBannedWordListUpdated)
}

void CMsgGCToGCBannedWordListUpdated::SharedCtor() {
group_id_ = 0u;
}

CMsgGCToGCBannedWordListUpdated::~CMsgGCToGCBannedWordListUpdated() {
  // @@protoc_insertion_point(destructor:CMsgGCToGCBannedWordListUpdated)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgGCToGCBannedWordListUpdated::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCToGCBannedWordListUpdated::ArenaDtor(void* object) {
  CMsgGCToGCBannedWordListUpdated* _this = reinterpret_cast< CMsgGCToGCBannedWordListUpdated* >(object);
  (void)_this;
}
void CMsgGCToGCBannedWordListUpdated::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCToGCBannedWordListUpdated::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCToGCBannedWordListUpdated::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToGCBannedWordListUpdated)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  group_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToGCBannedWordListUpdated::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 group_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_group_id(&has_bits);
          group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCToGCBannedWordListUpdated::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToGCBannedWordListUpdated)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_group_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToGCBannedWordListUpdated)
  return target;
}

size_t CMsgGCToGCBannedWordListUpdated::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToGCBannedWordListUpdated)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 group_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_group_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCToGCBannedWordListUpdated::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgGCToGCBannedWordListUpdated::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCToGCBannedWordListUpdated::GetClassData() const { return &_class_data_; }

void CMsgGCToGCBannedWordListUpdated::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgGCToGCBannedWordListUpdated *>(to)->MergeFrom(
      static_cast<const CMsgGCToGCBannedWordListUpdated &>(from));
}


void CMsgGCToGCBannedWordListUpdated::MergeFrom(const CMsgGCToGCBannedWordListUpdated& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToGCBannedWordListUpdated)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_group_id()) {
    _internal_set_group_id(from._internal_group_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCToGCBannedWordListUpdated::CopyFrom(const CMsgGCToGCBannedWordListUpdated& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToGCBannedWordListUpdated)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCBannedWordListUpdated::IsInitialized() const {
  return true;
}

void CMsgGCToGCBannedWordListUpdated::InternalSwap(CMsgGCToGCBannedWordListUpdated* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(group_id_, other->group_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToGCBannedWordListUpdated::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[63]);
}

// ===================================================================

class CSOEconDefaultEquippedDefinitionInstanceClient::_Internal {
 public:
  using HasBits = decltype(std::declval<CSOEconDefaultEquippedDefinitionInstanceClient>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_item_definition(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_class_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_slot_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CSOEconDefaultEquippedDefinitionInstanceClient::CSOEconDefaultEquippedDefinitionInstanceClient(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CSOEconDefaultEquippedDefinitionInstanceClient)
}
CSOEconDefaultEquippedDefinitionInstanceClient::CSOEconDefaultEquippedDefinitionInstanceClient(const CSOEconDefaultEquippedDefinitionInstanceClient& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&slot_id_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(slot_id_));
  // @@protoc_insertion_point(copy_constructor:CSOEconDefaultEquippedDefinitionInstanceClient)
}

void CSOEconDefaultEquippedDefinitionInstanceClient::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&account_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&slot_id_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(slot_id_));
}

CSOEconDefaultEquippedDefinitionInstanceClient::~CSOEconDefaultEquippedDefinitionInstanceClient() {
  // @@protoc_insertion_point(destructor:CSOEconDefaultEquippedDefinitionInstanceClient)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CSOEconDefaultEquippedDefinitionInstanceClient::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CSOEconDefaultEquippedDefinitionInstanceClient::ArenaDtor(void* object) {
  CSOEconDefaultEquippedDefinitionInstanceClient* _this = reinterpret_cast< CSOEconDefaultEquippedDefinitionInstanceClient* >(object);
  (void)_this;
}
void CSOEconDefaultEquippedDefinitionInstanceClient::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSOEconDefaultEquippedDefinitionInstanceClient::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSOEconDefaultEquippedDefinitionInstanceClient::Clear() {
// @@protoc_insertion_point(message_clear_start:CSOEconDefaultEquippedDefinitionInstanceClient)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&slot_id_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(slot_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSOEconDefaultEquippedDefinitionInstanceClient::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1 [(.key_field) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 item_definition = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_item_definition(&has_bits);
          item_definition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 class_id = 3 [(.key_field) = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_class_id(&has_bits);
          class_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 slot_id = 4 [(.key_field) = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_slot_id(&has_bits);
          slot_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSOEconDefaultEquippedDefinitionInstanceClient::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSOEconDefaultEquippedDefinitionInstanceClient)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1 [(.key_field) = true];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional uint32 item_definition = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_item_definition(), target);
  }

  // optional uint32 class_id = 3 [(.key_field) = true];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_class_id(), target);
  }

  // optional uint32 slot_id = 4 [(.key_field) = true];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_slot_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSOEconDefaultEquippedDefinitionInstanceClient)
  return target;
}

size_t CSOEconDefaultEquippedDefinitionInstanceClient::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSOEconDefaultEquippedDefinitionInstanceClient)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 account_id = 1 [(.key_field) = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

    // optional uint32 item_definition = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_item_definition());
    }

    // optional uint32 class_id = 3 [(.key_field) = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_class_id());
    }

    // optional uint32 slot_id = 4 [(.key_field) = true];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_slot_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSOEconDefaultEquippedDefinitionInstanceClient::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CSOEconDefaultEquippedDefinitionInstanceClient::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSOEconDefaultEquippedDefinitionInstanceClient::GetClassData() const { return &_class_data_; }

void CSOEconDefaultEquippedDefinitionInstanceClient::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CSOEconDefaultEquippedDefinitionInstanceClient *>(to)->MergeFrom(
      static_cast<const CSOEconDefaultEquippedDefinitionInstanceClient &>(from));
}


void CSOEconDefaultEquippedDefinitionInstanceClient::MergeFrom(const CSOEconDefaultEquippedDefinitionInstanceClient& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSOEconDefaultEquippedDefinitionInstanceClient)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      item_definition_ = from.item_definition_;
    }
    if (cached_has_bits & 0x00000004u) {
      class_id_ = from.class_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      slot_id_ = from.slot_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSOEconDefaultEquippedDefinitionInstanceClient::CopyFrom(const CSOEconDefaultEquippedDefinitionInstanceClient& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSOEconDefaultEquippedDefinitionInstanceClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOEconDefaultEquippedDefinitionInstanceClient::IsInitialized() const {
  return true;
}

void CSOEconDefaultEquippedDefinitionInstanceClient::InternalSwap(CSOEconDefaultEquippedDefinitionInstanceClient* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSOEconDefaultEquippedDefinitionInstanceClient, slot_id_)
      + sizeof(CSOEconDefaultEquippedDefinitionInstanceClient::slot_id_)
      - PROTOBUF_FIELD_OFFSET(CSOEconDefaultEquippedDefinitionInstanceClient, account_id_)>(
          reinterpret_cast<char*>(&account_id_),
          reinterpret_cast<char*>(&other->account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSOEconDefaultEquippedDefinitionInstanceClient::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[64]);
}

// ===================================================================

class CMsgGCToGCDirtySDOCache::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToGCDirtySDOCache>()._has_bits_);
  static void set_has_sdo_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_key_uint64(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCToGCDirtySDOCache::CMsgGCToGCDirtySDOCache(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgGCToGCDirtySDOCache)
}
CMsgGCToGCDirtySDOCache::CMsgGCToGCDirtySDOCache(const CMsgGCToGCDirtySDOCache& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&key_uint64_, &from.key_uint64_,
    static_cast<size_t>(reinterpret_cast<char*>(&sdo_type_) -
    reinterpret_cast<char*>(&key_uint64_)) + sizeof(sdo_type_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCDirtySDOCache)
}

void CMsgGCToGCDirtySDOCache::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&key_uint64_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sdo_type_) -
    reinterpret_cast<char*>(&key_uint64_)) + sizeof(sdo_type_));
}

CMsgGCToGCDirtySDOCache::~CMsgGCToGCDirtySDOCache() {
  // @@protoc_insertion_point(destructor:CMsgGCToGCDirtySDOCache)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgGCToGCDirtySDOCache::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCToGCDirtySDOCache::ArenaDtor(void* object) {
  CMsgGCToGCDirtySDOCache* _this = reinterpret_cast< CMsgGCToGCDirtySDOCache* >(object);
  (void)_this;
}
void CMsgGCToGCDirtySDOCache::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCToGCDirtySDOCache::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCToGCDirtySDOCache::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToGCDirtySDOCache)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&key_uint64_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sdo_type_) -
        reinterpret_cast<char*>(&key_uint64_)) + sizeof(sdo_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToGCDirtySDOCache::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 sdo_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_sdo_type(&has_bits);
          sdo_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 key_uint64 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_key_uint64(&has_bits);
          key_uint64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCToGCDirtySDOCache::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToGCDirtySDOCache)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 sdo_type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_sdo_type(), target);
  }

  // optional uint64 key_uint64 = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_key_uint64(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToGCDirtySDOCache)
  return target;
}

size_t CMsgGCToGCDirtySDOCache::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToGCDirtySDOCache)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 key_uint64 = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_key_uint64());
    }

    // optional uint32 sdo_type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_sdo_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCToGCDirtySDOCache::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgGCToGCDirtySDOCache::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCToGCDirtySDOCache::GetClassData() const { return &_class_data_; }

void CMsgGCToGCDirtySDOCache::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgGCToGCDirtySDOCache *>(to)->MergeFrom(
      static_cast<const CMsgGCToGCDirtySDOCache &>(from));
}


void CMsgGCToGCDirtySDOCache::MergeFrom(const CMsgGCToGCDirtySDOCache& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToGCDirtySDOCache)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      key_uint64_ = from.key_uint64_;
    }
    if (cached_has_bits & 0x00000002u) {
      sdo_type_ = from.sdo_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCToGCDirtySDOCache::CopyFrom(const CMsgGCToGCDirtySDOCache& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToGCDirtySDOCache)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCDirtySDOCache::IsInitialized() const {
  return true;
}

void CMsgGCToGCDirtySDOCache::InternalSwap(CMsgGCToGCDirtySDOCache* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCToGCDirtySDOCache, sdo_type_)
      + sizeof(CMsgGCToGCDirtySDOCache::sdo_type_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCToGCDirtySDOCache, key_uint64_)>(
          reinterpret_cast<char*>(&key_uint64_),
          reinterpret_cast<char*>(&other->key_uint64_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToGCDirtySDOCache::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[65]);
}

// ===================================================================

class CMsgGCToGCDirtyMultipleSDOCache::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToGCDirtyMultipleSDOCache>()._has_bits_);
  static void set_has_sdo_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCToGCDirtyMultipleSDOCache::CMsgGCToGCDirtyMultipleSDOCache(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  key_uint64_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgGCToGCDirtyMultipleSDOCache)
}
CMsgGCToGCDirtyMultipleSDOCache::CMsgGCToGCDirtyMultipleSDOCache(const CMsgGCToGCDirtyMultipleSDOCache& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      key_uint64_(from.key_uint64_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sdo_type_ = from.sdo_type_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCDirtyMultipleSDOCache)
}

void CMsgGCToGCDirtyMultipleSDOCache::SharedCtor() {
sdo_type_ = 0u;
}

CMsgGCToGCDirtyMultipleSDOCache::~CMsgGCToGCDirtyMultipleSDOCache() {
  // @@protoc_insertion_point(destructor:CMsgGCToGCDirtyMultipleSDOCache)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgGCToGCDirtyMultipleSDOCache::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCToGCDirtyMultipleSDOCache::ArenaDtor(void* object) {
  CMsgGCToGCDirtyMultipleSDOCache* _this = reinterpret_cast< CMsgGCToGCDirtyMultipleSDOCache* >(object);
  (void)_this;
}
void CMsgGCToGCDirtyMultipleSDOCache::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCToGCDirtyMultipleSDOCache::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCToGCDirtyMultipleSDOCache::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToGCDirtyMultipleSDOCache)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_uint64_.Clear();
  sdo_type_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToGCDirtyMultipleSDOCache::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 sdo_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_sdo_type(&has_bits);
          sdo_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 key_uint64 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_key_uint64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_key_uint64(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCToGCDirtyMultipleSDOCache::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToGCDirtyMultipleSDOCache)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 sdo_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_sdo_type(), target);
  }

  // repeated uint64 key_uint64 = 2;
  for (int i = 0, n = this->_internal_key_uint64_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_key_uint64(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToGCDirtyMultipleSDOCache)
  return target;
}

size_t CMsgGCToGCDirtyMultipleSDOCache::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToGCDirtyMultipleSDOCache)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 key_uint64 = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->key_uint64_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_key_uint64_size());
    total_size += data_size;
  }

  // optional uint32 sdo_type = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_sdo_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCToGCDirtyMultipleSDOCache::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgGCToGCDirtyMultipleSDOCache::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCToGCDirtyMultipleSDOCache::GetClassData() const { return &_class_data_; }

void CMsgGCToGCDirtyMultipleSDOCache::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgGCToGCDirtyMultipleSDOCache *>(to)->MergeFrom(
      static_cast<const CMsgGCToGCDirtyMultipleSDOCache &>(from));
}


void CMsgGCToGCDirtyMultipleSDOCache::MergeFrom(const CMsgGCToGCDirtyMultipleSDOCache& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToGCDirtyMultipleSDOCache)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  key_uint64_.MergeFrom(from.key_uint64_);
  if (from._internal_has_sdo_type()) {
    _internal_set_sdo_type(from._internal_sdo_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCToGCDirtyMultipleSDOCache::CopyFrom(const CMsgGCToGCDirtyMultipleSDOCache& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToGCDirtyMultipleSDOCache)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCDirtyMultipleSDOCache::IsInitialized() const {
  return true;
}

void CMsgGCToGCDirtyMultipleSDOCache::InternalSwap(CMsgGCToGCDirtyMultipleSDOCache* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  key_uint64_.InternalSwap(&other->key_uint64_);
  swap(sdo_type_, other->sdo_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToGCDirtyMultipleSDOCache::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[66]);
}

// ===================================================================

class CMsgGCCollectItem::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCollectItem>()._has_bits_);
  static void set_has_collection_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_subject_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGCCollectItem::CMsgGCCollectItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgGCCollectItem)
}
CMsgGCCollectItem::CMsgGCCollectItem(const CMsgGCCollectItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&collection_item_id_, &from.collection_item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&subject_item_id_) -
    reinterpret_cast<char*>(&collection_item_id_)) + sizeof(subject_item_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCollectItem)
}

void CMsgGCCollectItem::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&collection_item_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&subject_item_id_) -
    reinterpret_cast<char*>(&collection_item_id_)) + sizeof(subject_item_id_));
}

CMsgGCCollectItem::~CMsgGCCollectItem() {
  // @@protoc_insertion_point(destructor:CMsgGCCollectItem)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgGCCollectItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCCollectItem::ArenaDtor(void* object) {
  CMsgGCCollectItem* _this = reinterpret_cast< CMsgGCCollectItem* >(object);
  (void)_this;
}
void CMsgGCCollectItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCCollectItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCCollectItem::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCollectItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&collection_item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&subject_item_id_) -
        reinterpret_cast<char*>(&collection_item_id_)) + sizeof(subject_item_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCollectItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 collection_item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_collection_item_id(&has_bits);
          collection_item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 subject_item_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_subject_item_id(&has_bits);
          subject_item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCCollectItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCollectItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 collection_item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_collection_item_id(), target);
  }

  // optional uint64 subject_item_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_subject_item_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCollectItem)
  return target;
}

size_t CMsgGCCollectItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCollectItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 collection_item_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_collection_item_id());
    }

    // optional uint64 subject_item_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_subject_item_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCCollectItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgGCCollectItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCCollectItem::GetClassData() const { return &_class_data_; }

void CMsgGCCollectItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgGCCollectItem *>(to)->MergeFrom(
      static_cast<const CMsgGCCollectItem &>(from));
}


void CMsgGCCollectItem::MergeFrom(const CMsgGCCollectItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCollectItem)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      collection_item_id_ = from.collection_item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      subject_item_id_ = from.subject_item_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCCollectItem::CopyFrom(const CMsgGCCollectItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCollectItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCollectItem::IsInitialized() const {
  return true;
}

void CMsgGCCollectItem::InternalSwap(CMsgGCCollectItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCollectItem, subject_item_id_)
      + sizeof(CMsgGCCollectItem::subject_item_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCollectItem, collection_item_id_)>(
          reinterpret_cast<char*>(&collection_item_id_),
          reinterpret_cast<char*>(&other->collection_item_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCollectItem::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[67]);
}

// ===================================================================

class CMsgSDONoMemcached::_Internal {
 public:
};

CMsgSDONoMemcached::CMsgSDONoMemcached(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CMsgSDONoMemcached)
}
CMsgSDONoMemcached::CMsgSDONoMemcached(const CMsgSDONoMemcached& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgSDONoMemcached)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgSDONoMemcached::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgSDONoMemcached::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CMsgSDONoMemcached::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[68]);
}

// ===================================================================

class CMsgGCToGCUpdateSQLKeyValue::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToGCUpdateSQLKeyValue>()._has_bits_);
  static void set_has_key_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCToGCUpdateSQLKeyValue::CMsgGCToGCUpdateSQLKeyValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgGCToGCUpdateSQLKeyValue)
}
CMsgGCToGCUpdateSQLKeyValue::CMsgGCToGCUpdateSQLKeyValue(const CMsgGCToGCUpdateSQLKeyValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_key_name()) {
    key_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCUpdateSQLKeyValue)
}

void CMsgGCToGCUpdateSQLKeyValue::SharedCtor() {
key_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CMsgGCToGCUpdateSQLKeyValue::~CMsgGCToGCUpdateSQLKeyValue() {
  // @@protoc_insertion_point(destructor:CMsgGCToGCUpdateSQLKeyValue)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgGCToGCUpdateSQLKeyValue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  key_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCToGCUpdateSQLKeyValue::ArenaDtor(void* object) {
  CMsgGCToGCUpdateSQLKeyValue* _this = reinterpret_cast< CMsgGCToGCUpdateSQLKeyValue* >(object);
  (void)_this;
}
void CMsgGCToGCUpdateSQLKeyValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCToGCUpdateSQLKeyValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCToGCUpdateSQLKeyValue::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToGCUpdateSQLKeyValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    key_name_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToGCUpdateSQLKeyValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string key_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGCToGCUpdateSQLKeyValue.key_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCToGCUpdateSQLKeyValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToGCUpdateSQLKeyValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string key_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_key_name().data(), static_cast<int>(this->_internal_key_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCToGCUpdateSQLKeyValue.key_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToGCUpdateSQLKeyValue)
  return target;
}

size_t CMsgGCToGCUpdateSQLKeyValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToGCUpdateSQLKeyValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string key_name = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCToGCUpdateSQLKeyValue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgGCToGCUpdateSQLKeyValue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCToGCUpdateSQLKeyValue::GetClassData() const { return &_class_data_; }

void CMsgGCToGCUpdateSQLKeyValue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgGCToGCUpdateSQLKeyValue *>(to)->MergeFrom(
      static_cast<const CMsgGCToGCUpdateSQLKeyValue &>(from));
}


void CMsgGCToGCUpdateSQLKeyValue::MergeFrom(const CMsgGCToGCUpdateSQLKeyValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToGCUpdateSQLKeyValue)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_key_name()) {
    _internal_set_key_name(from._internal_key_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCToGCUpdateSQLKeyValue::CopyFrom(const CMsgGCToGCUpdateSQLKeyValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToGCUpdateSQLKeyValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCUpdateSQLKeyValue::IsInitialized() const {
  return true;
}

void CMsgGCToGCUpdateSQLKeyValue::InternalSwap(CMsgGCToGCUpdateSQLKeyValue* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &key_name_, lhs_arena,
      &other->key_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToGCUpdateSQLKeyValue::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[69]);
}

// ===================================================================

class CMsgGCToGCIsTrustedServer::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToGCIsTrustedServer>()._has_bits_);
  static void set_has_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCToGCIsTrustedServer::CMsgGCToGCIsTrustedServer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgGCToGCIsTrustedServer)
}
CMsgGCToGCIsTrustedServer::CMsgGCToGCIsTrustedServer(const CMsgGCToGCIsTrustedServer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  steam_id_ = from.steam_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCIsTrustedServer)
}

void CMsgGCToGCIsTrustedServer::SharedCtor() {
steam_id_ = uint64_t{0u};
}

CMsgGCToGCIsTrustedServer::~CMsgGCToGCIsTrustedServer() {
  // @@protoc_insertion_point(destructor:CMsgGCToGCIsTrustedServer)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgGCToGCIsTrustedServer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCToGCIsTrustedServer::ArenaDtor(void* object) {
  CMsgGCToGCIsTrustedServer* _this = reinterpret_cast< CMsgGCToGCIsTrustedServer* >(object);
  (void)_this;
}
void CMsgGCToGCIsTrustedServer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCToGCIsTrustedServer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCToGCIsTrustedServer::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToGCIsTrustedServer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  steam_id_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToGCIsTrustedServer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steam_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_steam_id(&has_bits);
          steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCToGCIsTrustedServer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToGCIsTrustedServer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steam_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToGCIsTrustedServer)
  return target;
}

size_t CMsgGCToGCIsTrustedServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToGCIsTrustedServer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 steam_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCToGCIsTrustedServer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgGCToGCIsTrustedServer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCToGCIsTrustedServer::GetClassData() const { return &_class_data_; }

void CMsgGCToGCIsTrustedServer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgGCToGCIsTrustedServer *>(to)->MergeFrom(
      static_cast<const CMsgGCToGCIsTrustedServer &>(from));
}


void CMsgGCToGCIsTrustedServer::MergeFrom(const CMsgGCToGCIsTrustedServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToGCIsTrustedServer)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_steam_id()) {
    _internal_set_steam_id(from._internal_steam_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCToGCIsTrustedServer::CopyFrom(const CMsgGCToGCIsTrustedServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToGCIsTrustedServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCIsTrustedServer::IsInitialized() const {
  return true;
}

void CMsgGCToGCIsTrustedServer::InternalSwap(CMsgGCToGCIsTrustedServer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steam_id_, other->steam_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToGCIsTrustedServer::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[70]);
}

// ===================================================================

class CMsgGCToGCIsTrustedServerResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToGCIsTrustedServerResponse>()._has_bits_);
  static void set_has_is_trusted(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCToGCIsTrustedServerResponse::CMsgGCToGCIsTrustedServerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgGCToGCIsTrustedServerResponse)
}
CMsgGCToGCIsTrustedServerResponse::CMsgGCToGCIsTrustedServerResponse(const CMsgGCToGCIsTrustedServerResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  is_trusted_ = from.is_trusted_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCIsTrustedServerResponse)
}

void CMsgGCToGCIsTrustedServerResponse::SharedCtor() {
is_trusted_ = false;
}

CMsgGCToGCIsTrustedServerResponse::~CMsgGCToGCIsTrustedServerResponse() {
  // @@protoc_insertion_point(destructor:CMsgGCToGCIsTrustedServerResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgGCToGCIsTrustedServerResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCToGCIsTrustedServerResponse::ArenaDtor(void* object) {
  CMsgGCToGCIsTrustedServerResponse* _this = reinterpret_cast< CMsgGCToGCIsTrustedServerResponse* >(object);
  (void)_this;
}
void CMsgGCToGCIsTrustedServerResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCToGCIsTrustedServerResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCToGCIsTrustedServerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToGCIsTrustedServerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  is_trusted_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToGCIsTrustedServerResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool is_trusted = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_is_trusted(&has_bits);
          is_trusted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCToGCIsTrustedServerResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToGCIsTrustedServerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_trusted = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_trusted(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToGCIsTrustedServerResponse)
  return target;
}

size_t CMsgGCToGCIsTrustedServerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToGCIsTrustedServerResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool is_trusted = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCToGCIsTrustedServerResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgGCToGCIsTrustedServerResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCToGCIsTrustedServerResponse::GetClassData() const { return &_class_data_; }

void CMsgGCToGCIsTrustedServerResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgGCToGCIsTrustedServerResponse *>(to)->MergeFrom(
      static_cast<const CMsgGCToGCIsTrustedServerResponse &>(from));
}


void CMsgGCToGCIsTrustedServerResponse::MergeFrom(const CMsgGCToGCIsTrustedServerResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToGCIsTrustedServerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_is_trusted()) {
    _internal_set_is_trusted(from._internal_is_trusted());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCToGCIsTrustedServerResponse::CopyFrom(const CMsgGCToGCIsTrustedServerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToGCIsTrustedServerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCIsTrustedServerResponse::IsInitialized() const {
  return true;
}

void CMsgGCToGCIsTrustedServerResponse::InternalSwap(CMsgGCToGCIsTrustedServerResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(is_trusted_, other->is_trusted_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToGCIsTrustedServerResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[71]);
}

// ===================================================================

class CMsgGCToGCBroadcastConsoleCommand::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToGCBroadcastConsoleCommand>()._has_bits_);
  static void set_has_con_command(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCToGCBroadcastConsoleCommand::CMsgGCToGCBroadcastConsoleCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgGCToGCBroadcastConsoleCommand)
}
CMsgGCToGCBroadcastConsoleCommand::CMsgGCToGCBroadcastConsoleCommand(const CMsgGCToGCBroadcastConsoleCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  con_command_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_con_command()) {
    con_command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_con_command(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCBroadcastConsoleCommand)
}

void CMsgGCToGCBroadcastConsoleCommand::SharedCtor() {
con_command_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CMsgGCToGCBroadcastConsoleCommand::~CMsgGCToGCBroadcastConsoleCommand() {
  // @@protoc_insertion_point(destructor:CMsgGCToGCBroadcastConsoleCommand)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgGCToGCBroadcastConsoleCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  con_command_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCToGCBroadcastConsoleCommand::ArenaDtor(void* object) {
  CMsgGCToGCBroadcastConsoleCommand* _this = reinterpret_cast< CMsgGCToGCBroadcastConsoleCommand* >(object);
  (void)_this;
}
void CMsgGCToGCBroadcastConsoleCommand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCToGCBroadcastConsoleCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCToGCBroadcastConsoleCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToGCBroadcastConsoleCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    con_command_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToGCBroadcastConsoleCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string con_command = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_con_command();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGCToGCBroadcastConsoleCommand.con_command");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCToGCBroadcastConsoleCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToGCBroadcastConsoleCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string con_command = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_con_command().data(), static_cast<int>(this->_internal_con_command().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCToGCBroadcastConsoleCommand.con_command");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_con_command(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToGCBroadcastConsoleCommand)
  return target;
}

size_t CMsgGCToGCBroadcastConsoleCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToGCBroadcastConsoleCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string con_command = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_con_command());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCToGCBroadcastConsoleCommand::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgGCToGCBroadcastConsoleCommand::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCToGCBroadcastConsoleCommand::GetClassData() const { return &_class_data_; }

void CMsgGCToGCBroadcastConsoleCommand::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgGCToGCBroadcastConsoleCommand *>(to)->MergeFrom(
      static_cast<const CMsgGCToGCBroadcastConsoleCommand &>(from));
}


void CMsgGCToGCBroadcastConsoleCommand::MergeFrom(const CMsgGCToGCBroadcastConsoleCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToGCBroadcastConsoleCommand)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_con_command()) {
    _internal_set_con_command(from._internal_con_command());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCToGCBroadcastConsoleCommand::CopyFrom(const CMsgGCToGCBroadcastConsoleCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToGCBroadcastConsoleCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCBroadcastConsoleCommand::IsInitialized() const {
  return true;
}

void CMsgGCToGCBroadcastConsoleCommand::InternalSwap(CMsgGCToGCBroadcastConsoleCommand* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &con_command_, lhs_arena,
      &other->con_command_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToGCBroadcastConsoleCommand::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[72]);
}

// ===================================================================

class CMsgGCServerVersionUpdated::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCServerVersionUpdated>()._has_bits_);
  static void set_has_server_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCServerVersionUpdated::CMsgGCServerVersionUpdated(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgGCServerVersionUpdated)
}
CMsgGCServerVersionUpdated::CMsgGCServerVersionUpdated(const CMsgGCServerVersionUpdated& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  server_version_ = from.server_version_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCServerVersionUpdated)
}

void CMsgGCServerVersionUpdated::SharedCtor() {
server_version_ = 0u;
}

CMsgGCServerVersionUpdated::~CMsgGCServerVersionUpdated() {
  // @@protoc_insertion_point(destructor:CMsgGCServerVersionUpdated)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgGCServerVersionUpdated::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCServerVersionUpdated::ArenaDtor(void* object) {
  CMsgGCServerVersionUpdated* _this = reinterpret_cast< CMsgGCServerVersionUpdated* >(object);
  (void)_this;
}
void CMsgGCServerVersionUpdated::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCServerVersionUpdated::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCServerVersionUpdated::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCServerVersionUpdated)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  server_version_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCServerVersionUpdated::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 server_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_server_version(&has_bits);
          server_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCServerVersionUpdated::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCServerVersionUpdated)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 server_version = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_server_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCServerVersionUpdated)
  return target;
}

size_t CMsgGCServerVersionUpdated::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCServerVersionUpdated)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 server_version = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_server_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCServerVersionUpdated::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgGCServerVersionUpdated::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCServerVersionUpdated::GetClassData() const { return &_class_data_; }

void CMsgGCServerVersionUpdated::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgGCServerVersionUpdated *>(to)->MergeFrom(
      static_cast<const CMsgGCServerVersionUpdated &>(from));
}


void CMsgGCServerVersionUpdated::MergeFrom(const CMsgGCServerVersionUpdated& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCServerVersionUpdated)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_server_version()) {
    _internal_set_server_version(from._internal_server_version());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCServerVersionUpdated::CopyFrom(const CMsgGCServerVersionUpdated& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCServerVersionUpdated)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCServerVersionUpdated::IsInitialized() const {
  return true;
}

void CMsgGCServerVersionUpdated::InternalSwap(CMsgGCServerVersionUpdated* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(server_version_, other->server_version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCServerVersionUpdated::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[73]);
}

// ===================================================================

class CMsgGCClientVersionUpdated::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCClientVersionUpdated>()._has_bits_);
  static void set_has_client_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCClientVersionUpdated::CMsgGCClientVersionUpdated(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgGCClientVersionUpdated)
}
CMsgGCClientVersionUpdated::CMsgGCClientVersionUpdated(const CMsgGCClientVersionUpdated& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  client_version_ = from.client_version_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCClientVersionUpdated)
}

void CMsgGCClientVersionUpdated::SharedCtor() {
client_version_ = 0u;
}

CMsgGCClientVersionUpdated::~CMsgGCClientVersionUpdated() {
  // @@protoc_insertion_point(destructor:CMsgGCClientVersionUpdated)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgGCClientVersionUpdated::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCClientVersionUpdated::ArenaDtor(void* object) {
  CMsgGCClientVersionUpdated* _this = reinterpret_cast< CMsgGCClientVersionUpdated* >(object);
  (void)_this;
}
void CMsgGCClientVersionUpdated::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCClientVersionUpdated::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCClientVersionUpdated::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCClientVersionUpdated)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  client_version_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCClientVersionUpdated::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 client_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_client_version(&has_bits);
          client_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCClientVersionUpdated::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCClientVersionUpdated)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 client_version = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_client_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCClientVersionUpdated)
  return target;
}

size_t CMsgGCClientVersionUpdated::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCClientVersionUpdated)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 client_version = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_client_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCClientVersionUpdated::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgGCClientVersionUpdated::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCClientVersionUpdated::GetClassData() const { return &_class_data_; }

void CMsgGCClientVersionUpdated::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgGCClientVersionUpdated *>(to)->MergeFrom(
      static_cast<const CMsgGCClientVersionUpdated &>(from));
}


void CMsgGCClientVersionUpdated::MergeFrom(const CMsgGCClientVersionUpdated& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCClientVersionUpdated)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_client_version()) {
    _internal_set_client_version(from._internal_client_version());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCClientVersionUpdated::CopyFrom(const CMsgGCClientVersionUpdated& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCClientVersionUpdated)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCClientVersionUpdated::IsInitialized() const {
  return true;
}

void CMsgGCClientVersionUpdated::InternalSwap(CMsgGCClientVersionUpdated* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(client_version_, other->client_version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCClientVersionUpdated::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[74]);
}

// ===================================================================

class CMsgGCToGCWebAPIAccountChanged::_Internal {
 public:
};

CMsgGCToGCWebAPIAccountChanged::CMsgGCToGCWebAPIAccountChanged(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CMsgGCToGCWebAPIAccountChanged)
}
CMsgGCToGCWebAPIAccountChanged::CMsgGCToGCWebAPIAccountChanged(const CMsgGCToGCWebAPIAccountChanged& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCWebAPIAccountChanged)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCToGCWebAPIAccountChanged::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCToGCWebAPIAccountChanged::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToGCWebAPIAccountChanged::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[75]);
}

// ===================================================================

class CMsgGCToGCRequestPassportItemGrant::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToGCRequestPassportItemGrant>()._has_bits_);
  static void set_has_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_league_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_reward_flag(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgGCToGCRequestPassportItemGrant::CMsgGCToGCRequestPassportItemGrant(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgGCToGCRequestPassportItemGrant)
}
CMsgGCToGCRequestPassportItemGrant::CMsgGCToGCRequestPassportItemGrant(const CMsgGCToGCRequestPassportItemGrant& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&steam_id_, &from.steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&reward_flag_) -
    reinterpret_cast<char*>(&steam_id_)) + sizeof(reward_flag_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCRequestPassportItemGrant)
}

void CMsgGCToGCRequestPassportItemGrant::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steam_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&reward_flag_) -
    reinterpret_cast<char*>(&steam_id_)) + sizeof(reward_flag_));
}

CMsgGCToGCRequestPassportItemGrant::~CMsgGCToGCRequestPassportItemGrant() {
  // @@protoc_insertion_point(destructor:CMsgGCToGCRequestPassportItemGrant)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgGCToGCRequestPassportItemGrant::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCToGCRequestPassportItemGrant::ArenaDtor(void* object) {
  CMsgGCToGCRequestPassportItemGrant* _this = reinterpret_cast< CMsgGCToGCRequestPassportItemGrant* >(object);
  (void)_this;
}
void CMsgGCToGCRequestPassportItemGrant::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCToGCRequestPassportItemGrant::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCToGCRequestPassportItemGrant::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToGCRequestPassportItemGrant)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&reward_flag_) -
        reinterpret_cast<char*>(&steam_id_)) + sizeof(reward_flag_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToGCRequestPassportItemGrant::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steam_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_steam_id(&has_bits);
          steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 league_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_league_id(&has_bits);
          league_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 reward_flag = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_reward_flag(&has_bits);
          reward_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCToGCRequestPassportItemGrant::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToGCRequestPassportItemGrant)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steam_id(), target);
  }

  // optional uint32 league_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_league_id(), target);
  }

  // optional int32 reward_flag = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_reward_flag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToGCRequestPassportItemGrant)
  return target;
}

size_t CMsgGCToGCRequestPassportItemGrant::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToGCRequestPassportItemGrant)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional fixed64 steam_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint32 league_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_league_id());
    }

    // optional int32 reward_flag = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_reward_flag());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCToGCRequestPassportItemGrant::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgGCToGCRequestPassportItemGrant::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCToGCRequestPassportItemGrant::GetClassData() const { return &_class_data_; }

void CMsgGCToGCRequestPassportItemGrant::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgGCToGCRequestPassportItemGrant *>(to)->MergeFrom(
      static_cast<const CMsgGCToGCRequestPassportItemGrant &>(from));
}


void CMsgGCToGCRequestPassportItemGrant::MergeFrom(const CMsgGCToGCRequestPassportItemGrant& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToGCRequestPassportItemGrant)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      steam_id_ = from.steam_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      league_id_ = from.league_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      reward_flag_ = from.reward_flag_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCToGCRequestPassportItemGrant::CopyFrom(const CMsgGCToGCRequestPassportItemGrant& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToGCRequestPassportItemGrant)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCRequestPassportItemGrant::IsInitialized() const {
  return true;
}

void CMsgGCToGCRequestPassportItemGrant::InternalSwap(CMsgGCToGCRequestPassportItemGrant* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCToGCRequestPassportItemGrant, reward_flag_)
      + sizeof(CMsgGCToGCRequestPassportItemGrant::reward_flag_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCToGCRequestPassportItemGrant, steam_id_)>(
          reinterpret_cast<char*>(&steam_id_),
          reinterpret_cast<char*>(&other->steam_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToGCRequestPassportItemGrant::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[76]);
}

// ===================================================================

class CMsgGameServerInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGameServerInfo>()._has_bits_);
  static void set_has_server_public_ip_addr(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_server_private_ip_addr(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_server_port(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_server_tv_port(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_server_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_server_hibernation(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_server_type(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_server_region(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_server_loadavg(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_server_tv_broadcast_time(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_server_game_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_server_relay_connected_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_relay_slots_max(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_relays_connected(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_relay_clients_connected(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_relayed_game_server_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_parent_relay_count(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_tv_secret_code(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
};

CMsgGameServerInfo::CMsgGameServerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgGameServerInfo)
}
CMsgGameServerInfo::CMsgGameServerInfo(const CMsgGameServerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  server_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_server_key()) {
    server_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_server_key(), 
      GetArenaForAllocation());
  }
  ::memcpy(&server_public_ip_addr_, &from.server_public_ip_addr_,
    static_cast<size_t>(reinterpret_cast<char*>(&tv_secret_code_) -
    reinterpret_cast<char*>(&server_public_ip_addr_)) + sizeof(tv_secret_code_));
  // @@protoc_insertion_point(copy_constructor:CMsgGameServerInfo)
}

void CMsgGameServerInfo::SharedCtor() {
server_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&server_public_ip_addr_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&tv_secret_code_) -
    reinterpret_cast<char*>(&server_public_ip_addr_)) + sizeof(tv_secret_code_));
}

CMsgGameServerInfo::~CMsgGameServerInfo() {
  // @@protoc_insertion_point(destructor:CMsgGameServerInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgGameServerInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  server_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgGameServerInfo::ArenaDtor(void* object) {
  CMsgGameServerInfo* _this = reinterpret_cast< CMsgGameServerInfo* >(object);
  (void)_this;
}
void CMsgGameServerInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGameServerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGameServerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGameServerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    server_key_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&server_public_ip_addr_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&server_region_) -
        reinterpret_cast<char*>(&server_public_ip_addr_)) + sizeof(server_region_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&server_loadavg_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&relay_clients_connected_) -
        reinterpret_cast<char*>(&server_loadavg_)) + sizeof(relay_clients_connected_));
  }
  if (cached_has_bits & 0x00030000u) {
    ::memset(&parent_relay_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tv_secret_code_) -
        reinterpret_cast<char*>(&parent_relay_count_)) + sizeof(tv_secret_code_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGameServerInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed32 server_public_ip_addr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_server_public_ip_addr(&has_bits);
          server_public_ip_addr_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else
          goto handle_unusual;
        continue;
      // optional fixed32 server_private_ip_addr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_server_private_ip_addr(&has_bits);
          server_private_ip_addr_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 server_port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_server_port(&has_bits);
          server_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 server_tv_port = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_server_tv_port(&has_bits);
          server_tv_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string server_key = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_server_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGameServerInfo.server_key");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool server_hibernation = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_server_hibernation(&has_bits);
          server_hibernation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgGameServerInfo.ServerType server_type = 7 [default = UNSPECIFIED];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgGameServerInfo_ServerType_IsValid(val))) {
            _internal_set_server_type(static_cast<::CMsgGameServerInfo_ServerType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 server_region = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_server_region(&has_bits);
          server_region_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float server_loadavg = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_server_loadavg(&has_bits);
          server_loadavg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float server_tv_broadcast_time = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_server_tv_broadcast_time(&has_bits);
          server_tv_broadcast_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float server_game_time = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_server_game_time(&has_bits);
          server_game_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 server_relay_connected_steam_id = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          _Internal::set_has_server_relay_connected_steam_id(&has_bits);
          server_relay_connected_steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 relay_slots_max = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_relay_slots_max(&has_bits);
          relay_slots_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 relays_connected = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_relays_connected(&has_bits);
          relays_connected_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 relay_clients_connected = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_relay_clients_connected(&has_bits);
          relay_clients_connected_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 relayed_game_server_steam_id = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 129)) {
          _Internal::set_has_relayed_game_server_steam_id(&has_bits);
          relayed_game_server_steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 parent_relay_count = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_parent_relay_count(&has_bits);
          parent_relay_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 tv_secret_code = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 145)) {
          _Internal::set_has_tv_secret_code(&has_bits);
          tv_secret_code_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGameServerInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGameServerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 server_public_ip_addr = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(1, this->_internal_server_public_ip_addr(), target);
  }

  // optional fixed32 server_private_ip_addr = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(2, this->_internal_server_private_ip_addr(), target);
  }

  // optional uint32 server_port = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_server_port(), target);
  }

  // optional uint32 server_tv_port = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_server_tv_port(), target);
  }

  // optional string server_key = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_server_key().data(), static_cast<int>(this->_internal_server_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGameServerInfo.server_key");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_server_key(), target);
  }

  // optional bool server_hibernation = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_server_hibernation(), target);
  }

  // optional .CMsgGameServerInfo.ServerType server_type = 7 [default = UNSPECIFIED];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_server_type(), target);
  }

  // optional uint32 server_region = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_server_region(), target);
  }

  // optional float server_loadavg = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_server_loadavg(), target);
  }

  // optional float server_tv_broadcast_time = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_server_tv_broadcast_time(), target);
  }

  // optional float server_game_time = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_server_game_time(), target);
  }

  // optional fixed64 server_relay_connected_steam_id = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(12, this->_internal_server_relay_connected_steam_id(), target);
  }

  // optional uint32 relay_slots_max = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_relay_slots_max(), target);
  }

  // optional int32 relays_connected = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_relays_connected(), target);
  }

  // optional int32 relay_clients_connected = 15;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_relay_clients_connected(), target);
  }

  // optional fixed64 relayed_game_server_steam_id = 16;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(16, this->_internal_relayed_game_server_steam_id(), target);
  }

  // optional uint32 parent_relay_count = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_parent_relay_count(), target);
  }

  // optional fixed64 tv_secret_code = 18;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(18, this->_internal_tv_secret_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGameServerInfo)
  return target;
}

size_t CMsgGameServerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGameServerInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string server_key = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_server_key());
    }

    // optional fixed32 server_public_ip_addr = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional fixed32 server_private_ip_addr = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional uint32 server_port = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_server_port());
    }

    // optional uint32 server_tv_port = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_server_tv_port());
    }

    // optional bool server_hibernation = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional .CMsgGameServerInfo.ServerType server_type = 7 [default = UNSPECIFIED];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_server_type());
    }

    // optional uint32 server_region = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_server_region());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional float server_loadavg = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional float server_tv_broadcast_time = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

    // optional float server_game_time = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

    // optional fixed64 server_relay_connected_steam_id = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

    // optional uint32 relay_slots_max = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_relay_slots_max());
    }

    // optional int32 relays_connected = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_relays_connected());
    }

    // optional fixed64 relayed_game_server_steam_id = 16;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 8;
    }

    // optional int32 relay_clients_connected = 15;
    if (cached_has_bits & 0x00008000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_relay_clients_connected());
    }

  }
  if (cached_has_bits & 0x00030000u) {
    // optional uint32 parent_relay_count = 17;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_parent_relay_count());
    }

    // optional fixed64 tv_secret_code = 18;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGameServerInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgGameServerInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGameServerInfo::GetClassData() const { return &_class_data_; }

void CMsgGameServerInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgGameServerInfo *>(to)->MergeFrom(
      static_cast<const CMsgGameServerInfo &>(from));
}


void CMsgGameServerInfo::MergeFrom(const CMsgGameServerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGameServerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_server_key(from._internal_server_key());
    }
    if (cached_has_bits & 0x00000002u) {
      server_public_ip_addr_ = from.server_public_ip_addr_;
    }
    if (cached_has_bits & 0x00000004u) {
      server_private_ip_addr_ = from.server_private_ip_addr_;
    }
    if (cached_has_bits & 0x00000008u) {
      server_port_ = from.server_port_;
    }
    if (cached_has_bits & 0x00000010u) {
      server_tv_port_ = from.server_tv_port_;
    }
    if (cached_has_bits & 0x00000020u) {
      server_hibernation_ = from.server_hibernation_;
    }
    if (cached_has_bits & 0x00000040u) {
      server_type_ = from.server_type_;
    }
    if (cached_has_bits & 0x00000080u) {
      server_region_ = from.server_region_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      server_loadavg_ = from.server_loadavg_;
    }
    if (cached_has_bits & 0x00000200u) {
      server_tv_broadcast_time_ = from.server_tv_broadcast_time_;
    }
    if (cached_has_bits & 0x00000400u) {
      server_game_time_ = from.server_game_time_;
    }
    if (cached_has_bits & 0x00000800u) {
      server_relay_connected_steam_id_ = from.server_relay_connected_steam_id_;
    }
    if (cached_has_bits & 0x00001000u) {
      relay_slots_max_ = from.relay_slots_max_;
    }
    if (cached_has_bits & 0x00002000u) {
      relays_connected_ = from.relays_connected_;
    }
    if (cached_has_bits & 0x00004000u) {
      relayed_game_server_steam_id_ = from.relayed_game_server_steam_id_;
    }
    if (cached_has_bits & 0x00008000u) {
      relay_clients_connected_ = from.relay_clients_connected_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00030000u) {
    if (cached_has_bits & 0x00010000u) {
      parent_relay_count_ = from.parent_relay_count_;
    }
    if (cached_has_bits & 0x00020000u) {
      tv_secret_code_ = from.tv_secret_code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGameServerInfo::CopyFrom(const CMsgGameServerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGameServerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameServerInfo::IsInitialized() const {
  return true;
}

void CMsgGameServerInfo::InternalSwap(CMsgGameServerInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &server_key_, lhs_arena,
      &other->server_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGameServerInfo, tv_secret_code_)
      + sizeof(CMsgGameServerInfo::tv_secret_code_)
      - PROTOBUF_FIELD_OFFSET(CMsgGameServerInfo, server_public_ip_addr_)>(
          reinterpret_cast<char*>(&server_public_ip_addr_),
          reinterpret_cast<char*>(&other->server_public_ip_addr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGameServerInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_base_5fgcmessages_2eproto_getter, &descriptor_table_base_5fgcmessages_2eproto_once,
      file_level_metadata_base_5fgcmessages_2eproto[77]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CGCStorePurchaseInit_LineItem* Arena::CreateMaybeMessage< ::CGCStorePurchaseInit_LineItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGCStorePurchaseInit_LineItem >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCStorePurchaseInit* Arena::CreateMaybeMessage< ::CMsgGCStorePurchaseInit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCStorePurchaseInit >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCStorePurchaseInitResponse* Arena::CreateMaybeMessage< ::CMsgGCStorePurchaseInitResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCStorePurchaseInitResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CSOPartyInvite* Arena::CreateMaybeMessage< ::CSOPartyInvite >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSOPartyInvite >(arena);
}
template<> PROTOBUF_NOINLINE ::CSOLobbyInvite* Arena::CreateMaybeMessage< ::CSOLobbyInvite >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSOLobbyInvite >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSystemBroadcast* Arena::CreateMaybeMessage< ::CMsgSystemBroadcast >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSystemBroadcast >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgInviteToParty* Arena::CreateMaybeMessage< ::CMsgInviteToParty >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgInviteToParty >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgInvitationCreated* Arena::CreateMaybeMessage< ::CMsgInvitationCreated >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgInvitationCreated >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgPartyInviteResponse* Arena::CreateMaybeMessage< ::CMsgPartyInviteResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPartyInviteResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgKickFromParty* Arena::CreateMaybeMessage< ::CMsgKickFromParty >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgKickFromParty >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgLeaveParty* Arena::CreateMaybeMessage< ::CMsgLeaveParty >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgLeaveParty >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerAvailable* Arena::CreateMaybeMessage< ::CMsgServerAvailable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerAvailable >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgLANServerAvailable* Arena::CreateMaybeMessage< ::CMsgLANServerAvailable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgLANServerAvailable >(arena);
}
template<> PROTOBUF_NOINLINE ::CSOEconGameAccountClient* Arena::CreateMaybeMessage< ::CSOEconGameAccountClient >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSOEconGameAccountClient >(arena);
}
template<> PROTOBUF_NOINLINE ::CSOItemCriteriaCondition* Arena::CreateMaybeMessage< ::CSOItemCriteriaCondition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSOItemCriteriaCondition >(arena);
}
template<> PROTOBUF_NOINLINE ::CSOItemCriteria* Arena::CreateMaybeMessage< ::CSOItemCriteria >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSOItemCriteria >(arena);
}
template<> PROTOBUF_NOINLINE ::CSOItemRecipe* Arena::CreateMaybeMessage< ::CSOItemRecipe >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSOItemRecipe >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDevNewItemRequest* Arena::CreateMaybeMessage< ::CMsgDevNewItemRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDevNewItemRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgIncrementKillCountAttribute* Arena::CreateMaybeMessage< ::CMsgIncrementKillCountAttribute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgIncrementKillCountAttribute >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgApplySticker* Arena::CreateMaybeMessage< ::CMsgApplySticker >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgApplySticker >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgApplyStatTrakSwap* Arena::CreateMaybeMessage< ::CMsgApplyStatTrakSwap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgApplyStatTrakSwap >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgApplyStrangePart* Arena::CreateMaybeMessage< ::CMsgApplyStrangePart >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgApplyStrangePart >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgApplyPennantUpgrade* Arena::CreateMaybeMessage< ::CMsgApplyPennantUpgrade >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgApplyPennantUpgrade >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgApplyEggEssence* Arena::CreateMaybeMessage< ::CMsgApplyEggEssence >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgApplyEggEssence >(arena);
}
template<> PROTOBUF_NOINLINE ::CSOEconItemAttribute* Arena::CreateMaybeMessage< ::CSOEconItemAttribute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSOEconItemAttribute >(arena);
}
template<> PROTOBUF_NOINLINE ::CSOEconItemEquipped* Arena::CreateMaybeMessage< ::CSOEconItemEquipped >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSOEconItemEquipped >(arena);
}
template<> PROTOBUF_NOINLINE ::CSOEconItem* Arena::CreateMaybeMessage< ::CSOEconItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSOEconItem >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgAdjustItemEquippedState* Arena::CreateMaybeMessage< ::CMsgAdjustItemEquippedState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgAdjustItemEquippedState >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSortItems* Arena::CreateMaybeMessage< ::CMsgSortItems >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSortItems >(arena);
}
template<> PROTOBUF_NOINLINE ::CSOEconClaimCode* Arena::CreateMaybeMessage< ::CSOEconClaimCode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSOEconClaimCode >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgStoreGetUserData* Arena::CreateMaybeMessage< ::CMsgStoreGetUserData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgStoreGetUserData >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgStoreGetUserDataResponse* Arena::CreateMaybeMessage< ::CMsgStoreGetUserDataResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgStoreGetUserDataResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgUpdateItemSchema* Arena::CreateMaybeMessage< ::CMsgUpdateItemSchema >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgUpdateItemSchema >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCError* Arena::CreateMaybeMessage< ::CMsgGCError >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCError >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgRequestInventoryRefresh* Arena::CreateMaybeMessage< ::CMsgRequestInventoryRefresh >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgRequestInventoryRefresh >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgConVarValue* Arena::CreateMaybeMessage< ::CMsgConVarValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgConVarValue >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgReplicateConVars* Arena::CreateMaybeMessage< ::CMsgReplicateConVars >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgReplicateConVars >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgUseItem* Arena::CreateMaybeMessage< ::CMsgUseItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgUseItem >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgReplayUploadedToYouTube* Arena::CreateMaybeMessage< ::CMsgReplayUploadedToYouTube >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgReplayUploadedToYouTube >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgConsumableExhausted* Arena::CreateMaybeMessage< ::CMsgConsumableExhausted >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgConsumableExhausted >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgItemAcknowledged__DEPRECATED* Arena::CreateMaybeMessage< ::CMsgItemAcknowledged__DEPRECATED >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgItemAcknowledged__DEPRECATED >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSetItemPositions_ItemPosition* Arena::CreateMaybeMessage< ::CMsgSetItemPositions_ItemPosition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSetItemPositions_ItemPosition >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSetItemPositions* Arena::CreateMaybeMessage< ::CMsgSetItemPositions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSetItemPositions >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCReportAbuse* Arena::CreateMaybeMessage< ::CMsgGCReportAbuse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCReportAbuse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCReportAbuseResponse* Arena::CreateMaybeMessage< ::CMsgGCReportAbuseResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCReportAbuseResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCNameItemNotification* Arena::CreateMaybeMessage< ::CMsgGCNameItemNotification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCNameItemNotification >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCClientDisplayNotification* Arena::CreateMaybeMessage< ::CMsgGCClientDisplayNotification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCClientDisplayNotification >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCShowItemsPickedUp* Arena::CreateMaybeMessage< ::CMsgGCShowItemsPickedUp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCShowItemsPickedUp >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCIncrementKillCountResponse* Arena::CreateMaybeMessage< ::CMsgGCIncrementKillCountResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCIncrementKillCountResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CSOEconItemDropRateBonus* Arena::CreateMaybeMessage< ::CSOEconItemDropRateBonus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSOEconItemDropRateBonus >(arena);
}
template<> PROTOBUF_NOINLINE ::CSOEconItemLeagueViewPass* Arena::CreateMaybeMessage< ::CSOEconItemLeagueViewPass >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSOEconItemLeagueViewPass >(arena);
}
template<> PROTOBUF_NOINLINE ::CSOEconItemEventTicket* Arena::CreateMaybeMessage< ::CSOEconItemEventTicket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSOEconItemEventTicket >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCItemPreviewItemBoughtNotification* Arena::CreateMaybeMessage< ::CMsgGCItemPreviewItemBoughtNotification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCItemPreviewItemBoughtNotification >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCStorePurchaseCancel* Arena::CreateMaybeMessage< ::CMsgGCStorePurchaseCancel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCStorePurchaseCancel >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCStorePurchaseCancelResponse* Arena::CreateMaybeMessage< ::CMsgGCStorePurchaseCancelResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCStorePurchaseCancelResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCStorePurchaseFinalize* Arena::CreateMaybeMessage< ::CMsgGCStorePurchaseFinalize >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCStorePurchaseFinalize >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCStorePurchaseFinalizeResponse* Arena::CreateMaybeMessage< ::CMsgGCStorePurchaseFinalizeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCStorePurchaseFinalizeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCBannedWordListRequest* Arena::CreateMaybeMessage< ::CMsgGCBannedWordListRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCBannedWordListRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCRequestAnnouncements* Arena::CreateMaybeMessage< ::CMsgGCRequestAnnouncements >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCRequestAnnouncements >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCRequestAnnouncementsResponse* Arena::CreateMaybeMessage< ::CMsgGCRequestAnnouncementsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCRequestAnnouncementsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCBannedWord* Arena::CreateMaybeMessage< ::CMsgGCBannedWord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCBannedWord >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCBannedWordListResponse* Arena::CreateMaybeMessage< ::CMsgGCBannedWordListResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCBannedWordListResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToGCBannedWordListBroadcast* Arena::CreateMaybeMessage< ::CMsgGCToGCBannedWordListBroadcast >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToGCBannedWordListBroadcast >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToGCBannedWordListUpdated* Arena::CreateMaybeMessage< ::CMsgGCToGCBannedWordListUpdated >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToGCBannedWordListUpdated >(arena);
}
template<> PROTOBUF_NOINLINE ::CSOEconDefaultEquippedDefinitionInstanceClient* Arena::CreateMaybeMessage< ::CSOEconDefaultEquippedDefinitionInstanceClient >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSOEconDefaultEquippedDefinitionInstanceClient >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToGCDirtySDOCache* Arena::CreateMaybeMessage< ::CMsgGCToGCDirtySDOCache >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToGCDirtySDOCache >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToGCDirtyMultipleSDOCache* Arena::CreateMaybeMessage< ::CMsgGCToGCDirtyMultipleSDOCache >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToGCDirtyMultipleSDOCache >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCollectItem* Arena::CreateMaybeMessage< ::CMsgGCCollectItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCollectItem >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSDONoMemcached* Arena::CreateMaybeMessage< ::CMsgSDONoMemcached >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSDONoMemcached >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToGCUpdateSQLKeyValue* Arena::CreateMaybeMessage< ::CMsgGCToGCUpdateSQLKeyValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToGCUpdateSQLKeyValue >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToGCIsTrustedServer* Arena::CreateMaybeMessage< ::CMsgGCToGCIsTrustedServer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToGCIsTrustedServer >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToGCIsTrustedServerResponse* Arena::CreateMaybeMessage< ::CMsgGCToGCIsTrustedServerResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToGCIsTrustedServerResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToGCBroadcastConsoleCommand* Arena::CreateMaybeMessage< ::CMsgGCToGCBroadcastConsoleCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToGCBroadcastConsoleCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCServerVersionUpdated* Arena::CreateMaybeMessage< ::CMsgGCServerVersionUpdated >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCServerVersionUpdated >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCClientVersionUpdated* Arena::CreateMaybeMessage< ::CMsgGCClientVersionUpdated >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCClientVersionUpdated >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToGCWebAPIAccountChanged* Arena::CreateMaybeMessage< ::CMsgGCToGCWebAPIAccountChanged >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToGCWebAPIAccountChanged >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToGCRequestPassportItemGrant* Arena::CreateMaybeMessage< ::CMsgGCToGCRequestPassportItemGrant >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToGCRequestPassportItemGrant >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGameServerInfo* Arena::CreateMaybeMessage< ::CMsgGameServerInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGameServerInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
