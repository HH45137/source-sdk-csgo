// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cstrike15_usermessages.proto

#include "cstrike15_usermessages.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CCSUsrMsg_VGUIMenu_Subkey::CCSUsrMsg_VGUIMenu_Subkey(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , str_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CCSUsrMsg_VGUIMenu_SubkeyDefaultTypeInternal {
  constexpr CCSUsrMsg_VGUIMenu_SubkeyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCSUsrMsg_VGUIMenu_SubkeyDefaultTypeInternal() {}
  union {
    CCSUsrMsg_VGUIMenu_Subkey _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCSUsrMsg_VGUIMenu_SubkeyDefaultTypeInternal _CCSUsrMsg_VGUIMenu_Subkey_default_instance_;
constexpr CCSUsrMsg_VGUIMenu::CCSUsrMsg_VGUIMenu(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : subkeys_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , show_(false){}
struct CCSUsrMsg_VGUIMenuDefaultTypeInternal {
  constexpr CCSUsrMsg_VGUIMenuDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCSUsrMsg_VGUIMenuDefaultTypeInternal() {}
  union {
    CCSUsrMsg_VGUIMenu _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCSUsrMsg_VGUIMenuDefaultTypeInternal _CCSUsrMsg_VGUIMenu_default_instance_;
constexpr CCSUsrMsg_Geiger::CCSUsrMsg_Geiger(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : range_(0){}
struct CCSUsrMsg_GeigerDefaultTypeInternal {
  constexpr CCSUsrMsg_GeigerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCSUsrMsg_GeigerDefaultTypeInternal() {}
  union {
    CCSUsrMsg_Geiger _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCSUsrMsg_GeigerDefaultTypeInternal _CCSUsrMsg_Geiger_default_instance_;
constexpr CCSUsrMsg_Train::CCSUsrMsg_Train(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : train_(0){}
struct CCSUsrMsg_TrainDefaultTypeInternal {
  constexpr CCSUsrMsg_TrainDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCSUsrMsg_TrainDefaultTypeInternal() {}
  union {
    CCSUsrMsg_Train _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCSUsrMsg_TrainDefaultTypeInternal _CCSUsrMsg_Train_default_instance_;
constexpr CCSUsrMsg_HudText::CCSUsrMsg_HudText(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : text_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CCSUsrMsg_HudTextDefaultTypeInternal {
  constexpr CCSUsrMsg_HudTextDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCSUsrMsg_HudTextDefaultTypeInternal() {}
  union {
    CCSUsrMsg_HudText _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCSUsrMsg_HudTextDefaultTypeInternal _CCSUsrMsg_HudText_default_instance_;
constexpr CCSUsrMsg_SayText::CCSUsrMsg_SayText(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : text_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ent_idx_(0)
  , chat_(false)
  , textallchat_(false){}
struct CCSUsrMsg_SayTextDefaultTypeInternal {
  constexpr CCSUsrMsg_SayTextDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCSUsrMsg_SayTextDefaultTypeInternal() {}
  union {
    CCSUsrMsg_SayText _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCSUsrMsg_SayTextDefaultTypeInternal _CCSUsrMsg_SayText_default_instance_;
constexpr CCSUsrMsg_SayText2::CCSUsrMsg_SayText2(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : params_()
  , msg_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ent_idx_(0)
  , chat_(false)
  , textallchat_(false){}
struct CCSUsrMsg_SayText2DefaultTypeInternal {
  constexpr CCSUsrMsg_SayText2DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCSUsrMsg_SayText2DefaultTypeInternal() {}
  union {
    CCSUsrMsg_SayText2 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCSUsrMsg_SayText2DefaultTypeInternal _CCSUsrMsg_SayText2_default_instance_;
constexpr CCSUsrMsg_TextMsg::CCSUsrMsg_TextMsg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : params_()
  , msg_dst_(0){}
struct CCSUsrMsg_TextMsgDefaultTypeInternal {
  constexpr CCSUsrMsg_TextMsgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCSUsrMsg_TextMsgDefaultTypeInternal() {}
  union {
    CCSUsrMsg_TextMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCSUsrMsg_TextMsgDefaultTypeInternal _CCSUsrMsg_TextMsg_default_instance_;
constexpr CCSUsrMsg_HudMsg::CCSUsrMsg_HudMsg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : text_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , pos_(nullptr)
  , clr1_(nullptr)
  , clr2_(nullptr)
  , channel_(0)
  , effect_(0)
  , fade_in_time_(0)
  , fade_out_time_(0)
  , hold_time_(0)
  , fx_time_(0){}
struct CCSUsrMsg_HudMsgDefaultTypeInternal {
  constexpr CCSUsrMsg_HudMsgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCSUsrMsg_HudMsgDefaultTypeInternal() {}
  union {
    CCSUsrMsg_HudMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCSUsrMsg_HudMsgDefaultTypeInternal _CCSUsrMsg_HudMsg_default_instance_;
constexpr CCSUsrMsg_Shake::CCSUsrMsg_Shake(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : command_(0)
  , local_amplitude_(0)
  , frequency_(0)
  , duration_(0){}
struct CCSUsrMsg_ShakeDefaultTypeInternal {
  constexpr CCSUsrMsg_ShakeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCSUsrMsg_ShakeDefaultTypeInternal() {}
  union {
    CCSUsrMsg_Shake _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCSUsrMsg_ShakeDefaultTypeInternal _CCSUsrMsg_Shake_default_instance_;
constexpr CCSUsrMsg_Fade::CCSUsrMsg_Fade(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : clr_(nullptr)
  , duration_(0)
  , hold_time_(0)
  , flags_(0){}
struct CCSUsrMsg_FadeDefaultTypeInternal {
  constexpr CCSUsrMsg_FadeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCSUsrMsg_FadeDefaultTypeInternal() {}
  union {
    CCSUsrMsg_Fade _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCSUsrMsg_FadeDefaultTypeInternal _CCSUsrMsg_Fade_default_instance_;
constexpr CCSUsrMsg_Rumble::CCSUsrMsg_Rumble(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : index_(0)
  , data_(0)
  , flags_(0){}
struct CCSUsrMsg_RumbleDefaultTypeInternal {
  constexpr CCSUsrMsg_RumbleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCSUsrMsg_RumbleDefaultTypeInternal() {}
  union {
    CCSUsrMsg_Rumble _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCSUsrMsg_RumbleDefaultTypeInternal _CCSUsrMsg_Rumble_default_instance_;
constexpr CCSUsrMsg_CloseCaption::CCSUsrMsg_CloseCaption(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hash_(0u)
  , duration_(0)
  , from_player_(false){}
struct CCSUsrMsg_CloseCaptionDefaultTypeInternal {
  constexpr CCSUsrMsg_CloseCaptionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCSUsrMsg_CloseCaptionDefaultTypeInternal() {}
  union {
    CCSUsrMsg_CloseCaption _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCSUsrMsg_CloseCaptionDefaultTypeInternal _CCSUsrMsg_CloseCaption_default_instance_;
constexpr CCSUsrMsg_CloseCaptionDirect::CCSUsrMsg_CloseCaptionDirect(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hash_(0u)
  , duration_(0)
  , from_player_(false){}
struct CCSUsrMsg_CloseCaptionDirectDefaultTypeInternal {
  constexpr CCSUsrMsg_CloseCaptionDirectDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCSUsrMsg_CloseCaptionDirectDefaultTypeInternal() {}
  union {
    CCSUsrMsg_CloseCaptionDirect _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCSUsrMsg_CloseCaptionDirectDefaultTypeInternal _CCSUsrMsg_CloseCaptionDirect_default_instance_;
constexpr CCSUsrMsg_SendAudio::CCSUsrMsg_SendAudio(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : radio_sound_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CCSUsrMsg_SendAudioDefaultTypeInternal {
  constexpr CCSUsrMsg_SendAudioDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCSUsrMsg_SendAudioDefaultTypeInternal() {}
  union {
    CCSUsrMsg_SendAudio _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCSUsrMsg_SendAudioDefaultTypeInternal _CCSUsrMsg_SendAudio_default_instance_;
constexpr CCSUsrMsg_RawAudio::CCSUsrMsg_RawAudio(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : voice_filename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , pitch_(0)
  , entidx_(0)
  , duration_(0){}
struct CCSUsrMsg_RawAudioDefaultTypeInternal {
  constexpr CCSUsrMsg_RawAudioDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCSUsrMsg_RawAudioDefaultTypeInternal() {}
  union {
    CCSUsrMsg_RawAudio _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCSUsrMsg_RawAudioDefaultTypeInternal _CCSUsrMsg_RawAudio_default_instance_;
constexpr CCSUsrMsg_VoiceMask_PlayerMask::CCSUsrMsg_VoiceMask_PlayerMask(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : game_rules_mask_(0)
  , ban_masks_(0){}
struct CCSUsrMsg_VoiceMask_PlayerMaskDefaultTypeInternal {
  constexpr CCSUsrMsg_VoiceMask_PlayerMaskDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCSUsrMsg_VoiceMask_PlayerMaskDefaultTypeInternal() {}
  union {
    CCSUsrMsg_VoiceMask_PlayerMask _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCSUsrMsg_VoiceMask_PlayerMaskDefaultTypeInternal _CCSUsrMsg_VoiceMask_PlayerMask_default_instance_;
constexpr CCSUsrMsg_VoiceMask::CCSUsrMsg_VoiceMask(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_masks_()
  , player_mod_enable_(false){}
struct CCSUsrMsg_VoiceMaskDefaultTypeInternal {
  constexpr CCSUsrMsg_VoiceMaskDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCSUsrMsg_VoiceMaskDefaultTypeInternal() {}
  union {
    CCSUsrMsg_VoiceMask _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCSUsrMsg_VoiceMaskDefaultTypeInternal _CCSUsrMsg_VoiceMask_default_instance_;
constexpr CCSUsrMsg_Damage::CCSUsrMsg_Damage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : inflictor_world_pos_(nullptr)
  , amount_(0)
  , victim_entindex_(0){}
struct CCSUsrMsg_DamageDefaultTypeInternal {
  constexpr CCSUsrMsg_DamageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCSUsrMsg_DamageDefaultTypeInternal() {}
  union {
    CCSUsrMsg_Damage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCSUsrMsg_DamageDefaultTypeInternal _CCSUsrMsg_Damage_default_instance_;
constexpr CCSUsrMsg_RadioText::CCSUsrMsg_RadioText(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : params_()
  , msg_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , msg_dst_(0)
  , client_(0){}
struct CCSUsrMsg_RadioTextDefaultTypeInternal {
  constexpr CCSUsrMsg_RadioTextDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCSUsrMsg_RadioTextDefaultTypeInternal() {}
  union {
    CCSUsrMsg_RadioText _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCSUsrMsg_RadioTextDefaultTypeInternal _CCSUsrMsg_RadioText_default_instance_;
constexpr CCSUsrMsg_HintText::CCSUsrMsg_HintText(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : text_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CCSUsrMsg_HintTextDefaultTypeInternal {
  constexpr CCSUsrMsg_HintTextDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCSUsrMsg_HintTextDefaultTypeInternal() {}
  union {
    CCSUsrMsg_HintText _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCSUsrMsg_HintTextDefaultTypeInternal _CCSUsrMsg_HintText_default_instance_;
constexpr CCSUsrMsg_KeyHintText::CCSUsrMsg_KeyHintText(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hints_(){}
struct CCSUsrMsg_KeyHintTextDefaultTypeInternal {
  constexpr CCSUsrMsg_KeyHintTextDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCSUsrMsg_KeyHintTextDefaultTypeInternal() {}
  union {
    CCSUsrMsg_KeyHintText _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCSUsrMsg_KeyHintTextDefaultTypeInternal _CCSUsrMsg_KeyHintText_default_instance_;
constexpr CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate::CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : entity_idx_(0)
  , class_id_(0)
  , origin_x_(0)
  , origin_y_(0)
  , origin_z_(0)
  , angle_y_(0)
  , defuser_(false)
  , player_has_defuser_(false)
  , player_has_c4_(false){}
struct CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdateDefaultTypeInternal {
  constexpr CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdateDefaultTypeInternal() {}
  union {
    CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdateDefaultTypeInternal _CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate_default_instance_;
constexpr CCSUsrMsg_ProcessSpottedEntityUpdate::CCSUsrMsg_ProcessSpottedEntityUpdate(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : entity_updates_()
  , new_update_(false){}
struct CCSUsrMsg_ProcessSpottedEntityUpdateDefaultTypeInternal {
  constexpr CCSUsrMsg_ProcessSpottedEntityUpdateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCSUsrMsg_ProcessSpottedEntityUpdateDefaultTypeInternal() {}
  union {
    CCSUsrMsg_ProcessSpottedEntityUpdate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCSUsrMsg_ProcessSpottedEntityUpdateDefaultTypeInternal _CCSUsrMsg_ProcessSpottedEntityUpdate_default_instance_;
constexpr CCSUsrMsg_SendPlayerItemDrops::CCSUsrMsg_SendPlayerItemDrops(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : entity_updates_(){}
struct CCSUsrMsg_SendPlayerItemDropsDefaultTypeInternal {
  constexpr CCSUsrMsg_SendPlayerItemDropsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCSUsrMsg_SendPlayerItemDropsDefaultTypeInternal() {}
  union {
    CCSUsrMsg_SendPlayerItemDrops _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCSUsrMsg_SendPlayerItemDropsDefaultTypeInternal _CCSUsrMsg_SendPlayerItemDrops_default_instance_;
constexpr CCSUsrMsg_SendPlayerItemFound::CCSUsrMsg_SendPlayerItemFound(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : iteminfo_(nullptr)
  , entindex_(0){}
struct CCSUsrMsg_SendPlayerItemFoundDefaultTypeInternal {
  constexpr CCSUsrMsg_SendPlayerItemFoundDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCSUsrMsg_SendPlayerItemFoundDefaultTypeInternal() {}
  union {
    CCSUsrMsg_SendPlayerItemFound _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCSUsrMsg_SendPlayerItemFoundDefaultTypeInternal _CCSUsrMsg_SendPlayerItemFound_default_instance_;
constexpr CCSUsrMsg_ReloadEffect::CCSUsrMsg_ReloadEffect(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : entidx_(0)
  , actanim_(0)
  , origin_x_(0)
  , origin_y_(0)
  , origin_z_(0){}
struct CCSUsrMsg_ReloadEffectDefaultTypeInternal {
  constexpr CCSUsrMsg_ReloadEffectDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCSUsrMsg_ReloadEffectDefaultTypeInternal() {}
  union {
    CCSUsrMsg_ReloadEffect _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCSUsrMsg_ReloadEffectDefaultTypeInternal _CCSUsrMsg_ReloadEffect_default_instance_;
constexpr CCSUsrMsg_AdjustMoney::CCSUsrMsg_AdjustMoney(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : amount_(0){}
struct CCSUsrMsg_AdjustMoneyDefaultTypeInternal {
  constexpr CCSUsrMsg_AdjustMoneyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCSUsrMsg_AdjustMoneyDefaultTypeInternal() {}
  union {
    CCSUsrMsg_AdjustMoney _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCSUsrMsg_AdjustMoneyDefaultTypeInternal _CCSUsrMsg_AdjustMoney_default_instance_;
constexpr CCSUsrMsg_ReportHit::CCSUsrMsg_ReportHit(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pos_x_(0)
  , pos_y_(0)
  , pos_z_(0)
  , timestamp_(0){}
struct CCSUsrMsg_ReportHitDefaultTypeInternal {
  constexpr CCSUsrMsg_ReportHitDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCSUsrMsg_ReportHitDefaultTypeInternal() {}
  union {
    CCSUsrMsg_ReportHit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCSUsrMsg_ReportHitDefaultTypeInternal _CCSUsrMsg_ReportHit_default_instance_;
constexpr CCSUsrMsg_KillCam::CCSUsrMsg_KillCam(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : obs_mode_(0)
  , first_target_(0)
  , second_target_(0){}
struct CCSUsrMsg_KillCamDefaultTypeInternal {
  constexpr CCSUsrMsg_KillCamDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCSUsrMsg_KillCamDefaultTypeInternal() {}
  union {
    CCSUsrMsg_KillCam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCSUsrMsg_KillCamDefaultTypeInternal _CCSUsrMsg_KillCam_default_instance_;
constexpr CCSUsrMsg_DesiredTimescale::CCSUsrMsg_DesiredTimescale(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : desired_timescale_(0)
  , duration_realtime_sec_(0)
  , interpolator_type_(0)
  , start_blend_time_(0){}
struct CCSUsrMsg_DesiredTimescaleDefaultTypeInternal {
  constexpr CCSUsrMsg_DesiredTimescaleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCSUsrMsg_DesiredTimescaleDefaultTypeInternal() {}
  union {
    CCSUsrMsg_DesiredTimescale _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCSUsrMsg_DesiredTimescaleDefaultTypeInternal _CCSUsrMsg_DesiredTimescale_default_instance_;
constexpr CCSUsrMsg_CurrentTimescale::CCSUsrMsg_CurrentTimescale(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cur_timescale_(0){}
struct CCSUsrMsg_CurrentTimescaleDefaultTypeInternal {
  constexpr CCSUsrMsg_CurrentTimescaleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCSUsrMsg_CurrentTimescaleDefaultTypeInternal() {}
  union {
    CCSUsrMsg_CurrentTimescale _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCSUsrMsg_CurrentTimescaleDefaultTypeInternal _CCSUsrMsg_CurrentTimescale_default_instance_;
constexpr CCSUsrMsg_AchievementEvent::CCSUsrMsg_AchievementEvent(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : achievement_(0)
  , count_(0)
  , user_id_(0){}
struct CCSUsrMsg_AchievementEventDefaultTypeInternal {
  constexpr CCSUsrMsg_AchievementEventDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCSUsrMsg_AchievementEventDefaultTypeInternal() {}
  union {
    CCSUsrMsg_AchievementEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCSUsrMsg_AchievementEventDefaultTypeInternal _CCSUsrMsg_AchievementEvent_default_instance_;
constexpr CCSUsrMsg_MatchEndConditions::CCSUsrMsg_MatchEndConditions(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : fraglimit_(0)
  , mp_maxrounds_(0)
  , mp_winlimit_(0)
  , mp_timelimit_(0){}
struct CCSUsrMsg_MatchEndConditionsDefaultTypeInternal {
  constexpr CCSUsrMsg_MatchEndConditionsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCSUsrMsg_MatchEndConditionsDefaultTypeInternal() {}
  union {
    CCSUsrMsg_MatchEndConditions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCSUsrMsg_MatchEndConditionsDefaultTypeInternal _CCSUsrMsg_MatchEndConditions_default_instance_;
constexpr CCSUsrMsg_PlayerStatsUpdate_Stat::CCSUsrMsg_PlayerStatsUpdate_Stat(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : idx_(0)
  , delta_(0){}
struct CCSUsrMsg_PlayerStatsUpdate_StatDefaultTypeInternal {
  constexpr CCSUsrMsg_PlayerStatsUpdate_StatDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCSUsrMsg_PlayerStatsUpdate_StatDefaultTypeInternal() {}
  union {
    CCSUsrMsg_PlayerStatsUpdate_Stat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCSUsrMsg_PlayerStatsUpdate_StatDefaultTypeInternal _CCSUsrMsg_PlayerStatsUpdate_Stat_default_instance_;
constexpr CCSUsrMsg_PlayerStatsUpdate::CCSUsrMsg_PlayerStatsUpdate(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stats_()
  , version_(0)
  , user_id_(0)
  , crc_(0){}
struct CCSUsrMsg_PlayerStatsUpdateDefaultTypeInternal {
  constexpr CCSUsrMsg_PlayerStatsUpdateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCSUsrMsg_PlayerStatsUpdateDefaultTypeInternal() {}
  union {
    CCSUsrMsg_PlayerStatsUpdate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCSUsrMsg_PlayerStatsUpdateDefaultTypeInternal _CCSUsrMsg_PlayerStatsUpdate_default_instance_;
constexpr CCSUsrMsg_DisplayInventory::CCSUsrMsg_DisplayInventory(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : display_(false)
  , user_id_(0){}
struct CCSUsrMsg_DisplayInventoryDefaultTypeInternal {
  constexpr CCSUsrMsg_DisplayInventoryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCSUsrMsg_DisplayInventoryDefaultTypeInternal() {}
  union {
    CCSUsrMsg_DisplayInventory _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCSUsrMsg_DisplayInventoryDefaultTypeInternal _CCSUsrMsg_DisplayInventory_default_instance_;
constexpr CCSUsrMsg_QuestProgress::CCSUsrMsg_QuestProgress(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : quest_id_(0u)
  , normal_points_(0u)
  , bonus_points_(0u)
  , is_event_quest_(false){}
struct CCSUsrMsg_QuestProgressDefaultTypeInternal {
  constexpr CCSUsrMsg_QuestProgressDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCSUsrMsg_QuestProgressDefaultTypeInternal() {}
  union {
    CCSUsrMsg_QuestProgress _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCSUsrMsg_QuestProgressDefaultTypeInternal _CCSUsrMsg_QuestProgress_default_instance_;
constexpr CCSUsrMsg_ScoreLeaderboardData::CCSUsrMsg_ScoreLeaderboardData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_(nullptr){}
struct CCSUsrMsg_ScoreLeaderboardDataDefaultTypeInternal {
  constexpr CCSUsrMsg_ScoreLeaderboardDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCSUsrMsg_ScoreLeaderboardDataDefaultTypeInternal() {}
  union {
    CCSUsrMsg_ScoreLeaderboardData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCSUsrMsg_ScoreLeaderboardDataDefaultTypeInternal _CCSUsrMsg_ScoreLeaderboardData_default_instance_;
constexpr CCSUsrMsg_PlayerDecalDigitalSignature::CCSUsrMsg_PlayerDecalDigitalSignature(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_(nullptr){}
struct CCSUsrMsg_PlayerDecalDigitalSignatureDefaultTypeInternal {
  constexpr CCSUsrMsg_PlayerDecalDigitalSignatureDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCSUsrMsg_PlayerDecalDigitalSignatureDefaultTypeInternal() {}
  union {
    CCSUsrMsg_PlayerDecalDigitalSignature _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCSUsrMsg_PlayerDecalDigitalSignatureDefaultTypeInternal _CCSUsrMsg_PlayerDecalDigitalSignature_default_instance_;
constexpr CCSUsrMsg_XRankGet::CCSUsrMsg_XRankGet(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : mode_idx_(0)
  , controller_(0){}
struct CCSUsrMsg_XRankGetDefaultTypeInternal {
  constexpr CCSUsrMsg_XRankGetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCSUsrMsg_XRankGetDefaultTypeInternal() {}
  union {
    CCSUsrMsg_XRankGet _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCSUsrMsg_XRankGetDefaultTypeInternal _CCSUsrMsg_XRankGet_default_instance_;
constexpr CCSUsrMsg_XRankUpd::CCSUsrMsg_XRankUpd(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : mode_idx_(0)
  , controller_(0)
  , ranking_(0){}
struct CCSUsrMsg_XRankUpdDefaultTypeInternal {
  constexpr CCSUsrMsg_XRankUpdDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCSUsrMsg_XRankUpdDefaultTypeInternal() {}
  union {
    CCSUsrMsg_XRankUpd _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCSUsrMsg_XRankUpdDefaultTypeInternal _CCSUsrMsg_XRankUpd_default_instance_;
constexpr CCSUsrMsg_CallVoteFailed::CCSUsrMsg_CallVoteFailed(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : reason_(0)
  , time_(0){}
struct CCSUsrMsg_CallVoteFailedDefaultTypeInternal {
  constexpr CCSUsrMsg_CallVoteFailedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCSUsrMsg_CallVoteFailedDefaultTypeInternal() {}
  union {
    CCSUsrMsg_CallVoteFailed _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCSUsrMsg_CallVoteFailedDefaultTypeInternal _CCSUsrMsg_CallVoteFailed_default_instance_;
constexpr CCSUsrMsg_VoteStart::CCSUsrMsg_VoteStart(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : disp_str_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , details_str_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , other_team_str_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , team_(0)
  , ent_idx_(0)
  , vote_type_(0)
  , is_yes_no_vote_(false){}
struct CCSUsrMsg_VoteStartDefaultTypeInternal {
  constexpr CCSUsrMsg_VoteStartDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCSUsrMsg_VoteStartDefaultTypeInternal() {}
  union {
    CCSUsrMsg_VoteStart _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCSUsrMsg_VoteStartDefaultTypeInternal _CCSUsrMsg_VoteStart_default_instance_;
constexpr CCSUsrMsg_VotePass::CCSUsrMsg_VotePass(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : disp_str_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , details_str_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , team_(0)
  , vote_type_(0){}
struct CCSUsrMsg_VotePassDefaultTypeInternal {
  constexpr CCSUsrMsg_VotePassDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCSUsrMsg_VotePassDefaultTypeInternal() {}
  union {
    CCSUsrMsg_VotePass _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCSUsrMsg_VotePassDefaultTypeInternal _CCSUsrMsg_VotePass_default_instance_;
constexpr CCSUsrMsg_VoteFailed::CCSUsrMsg_VoteFailed(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : team_(0)
  , reason_(0){}
struct CCSUsrMsg_VoteFailedDefaultTypeInternal {
  constexpr CCSUsrMsg_VoteFailedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCSUsrMsg_VoteFailedDefaultTypeInternal() {}
  union {
    CCSUsrMsg_VoteFailed _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCSUsrMsg_VoteFailedDefaultTypeInternal _CCSUsrMsg_VoteFailed_default_instance_;
constexpr CCSUsrMsg_VoteSetup::CCSUsrMsg_VoteSetup(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : potential_issues_(){}
struct CCSUsrMsg_VoteSetupDefaultTypeInternal {
  constexpr CCSUsrMsg_VoteSetupDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCSUsrMsg_VoteSetupDefaultTypeInternal() {}
  union {
    CCSUsrMsg_VoteSetup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCSUsrMsg_VoteSetupDefaultTypeInternal _CCSUsrMsg_VoteSetup_default_instance_;
constexpr CCSUsrMsg_SendLastKillerDamageToClient::CCSUsrMsg_SendLastKillerDamageToClient(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : num_hits_given_(0)
  , damage_given_(0)
  , num_hits_taken_(0)
  , damage_taken_(0){}
struct CCSUsrMsg_SendLastKillerDamageToClientDefaultTypeInternal {
  constexpr CCSUsrMsg_SendLastKillerDamageToClientDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCSUsrMsg_SendLastKillerDamageToClientDefaultTypeInternal() {}
  union {
    CCSUsrMsg_SendLastKillerDamageToClient _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCSUsrMsg_SendLastKillerDamageToClientDefaultTypeInternal _CCSUsrMsg_SendLastKillerDamageToClient_default_instance_;
constexpr CCSUsrMsg_ServerRankUpdate_RankUpdate::CCSUsrMsg_ServerRankUpdate_RankUpdate(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_id_(0)
  , rank_old_(0)
  , rank_new_(0)
  , num_wins_(0)
  , rank_change_(0){}
struct CCSUsrMsg_ServerRankUpdate_RankUpdateDefaultTypeInternal {
  constexpr CCSUsrMsg_ServerRankUpdate_RankUpdateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCSUsrMsg_ServerRankUpdate_RankUpdateDefaultTypeInternal() {}
  union {
    CCSUsrMsg_ServerRankUpdate_RankUpdate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCSUsrMsg_ServerRankUpdate_RankUpdateDefaultTypeInternal _CCSUsrMsg_ServerRankUpdate_RankUpdate_default_instance_;
constexpr CCSUsrMsg_ServerRankUpdate::CCSUsrMsg_ServerRankUpdate(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rank_update_(){}
struct CCSUsrMsg_ServerRankUpdateDefaultTypeInternal {
  constexpr CCSUsrMsg_ServerRankUpdateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCSUsrMsg_ServerRankUpdateDefaultTypeInternal() {}
  union {
    CCSUsrMsg_ServerRankUpdate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCSUsrMsg_ServerRankUpdateDefaultTypeInternal _CCSUsrMsg_ServerRankUpdate_default_instance_;
constexpr CCSUsrMsg_XpUpdate::CCSUsrMsg_XpUpdate(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_(nullptr){}
struct CCSUsrMsg_XpUpdateDefaultTypeInternal {
  constexpr CCSUsrMsg_XpUpdateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCSUsrMsg_XpUpdateDefaultTypeInternal() {}
  union {
    CCSUsrMsg_XpUpdate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCSUsrMsg_XpUpdateDefaultTypeInternal _CCSUsrMsg_XpUpdate_default_instance_;
constexpr CCSUsrMsg_ItemPickup::CCSUsrMsg_ItemPickup(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : item_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CCSUsrMsg_ItemPickupDefaultTypeInternal {
  constexpr CCSUsrMsg_ItemPickupDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCSUsrMsg_ItemPickupDefaultTypeInternal() {}
  union {
    CCSUsrMsg_ItemPickup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCSUsrMsg_ItemPickupDefaultTypeInternal _CCSUsrMsg_ItemPickup_default_instance_;
constexpr CCSUsrMsg_ShowMenu::CCSUsrMsg_ShowMenu(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : menu_string_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , bits_valid_slots_(0)
  , display_time_(0){}
struct CCSUsrMsg_ShowMenuDefaultTypeInternal {
  constexpr CCSUsrMsg_ShowMenuDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCSUsrMsg_ShowMenuDefaultTypeInternal() {}
  union {
    CCSUsrMsg_ShowMenu _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCSUsrMsg_ShowMenuDefaultTypeInternal _CCSUsrMsg_ShowMenu_default_instance_;
constexpr CCSUsrMsg_BarTime::CCSUsrMsg_BarTime(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : time_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CCSUsrMsg_BarTimeDefaultTypeInternal {
  constexpr CCSUsrMsg_BarTimeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCSUsrMsg_BarTimeDefaultTypeInternal() {}
  union {
    CCSUsrMsg_BarTime _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCSUsrMsg_BarTimeDefaultTypeInternal _CCSUsrMsg_BarTime_default_instance_;
constexpr CCSUsrMsg_AmmoDenied::CCSUsrMsg_AmmoDenied(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ammoidx_(0){}
struct CCSUsrMsg_AmmoDeniedDefaultTypeInternal {
  constexpr CCSUsrMsg_AmmoDeniedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCSUsrMsg_AmmoDeniedDefaultTypeInternal() {}
  union {
    CCSUsrMsg_AmmoDenied _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCSUsrMsg_AmmoDeniedDefaultTypeInternal _CCSUsrMsg_AmmoDenied_default_instance_;
constexpr CCSUsrMsg_MarkAchievement::CCSUsrMsg_MarkAchievement(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : achievement_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CCSUsrMsg_MarkAchievementDefaultTypeInternal {
  constexpr CCSUsrMsg_MarkAchievementDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCSUsrMsg_MarkAchievementDefaultTypeInternal() {}
  union {
    CCSUsrMsg_MarkAchievement _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCSUsrMsg_MarkAchievementDefaultTypeInternal _CCSUsrMsg_MarkAchievement_default_instance_;
constexpr CCSUsrMsg_MatchStatsUpdate::CCSUsrMsg_MatchStatsUpdate(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : update_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CCSUsrMsg_MatchStatsUpdateDefaultTypeInternal {
  constexpr CCSUsrMsg_MatchStatsUpdateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCSUsrMsg_MatchStatsUpdateDefaultTypeInternal() {}
  union {
    CCSUsrMsg_MatchStatsUpdate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCSUsrMsg_MatchStatsUpdateDefaultTypeInternal _CCSUsrMsg_MatchStatsUpdate_default_instance_;
constexpr CCSUsrMsg_ItemDrop::CCSUsrMsg_ItemDrop(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : itemid_(int64_t{0})
  , death_(false){}
struct CCSUsrMsg_ItemDropDefaultTypeInternal {
  constexpr CCSUsrMsg_ItemDropDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCSUsrMsg_ItemDropDefaultTypeInternal() {}
  union {
    CCSUsrMsg_ItemDrop _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCSUsrMsg_ItemDropDefaultTypeInternal _CCSUsrMsg_ItemDrop_default_instance_;
constexpr CCSUsrMsg_GlowPropTurnOff::CCSUsrMsg_GlowPropTurnOff(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : entidx_(0){}
struct CCSUsrMsg_GlowPropTurnOffDefaultTypeInternal {
  constexpr CCSUsrMsg_GlowPropTurnOffDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCSUsrMsg_GlowPropTurnOffDefaultTypeInternal() {}
  union {
    CCSUsrMsg_GlowPropTurnOff _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCSUsrMsg_GlowPropTurnOffDefaultTypeInternal _CCSUsrMsg_GlowPropTurnOff_default_instance_;
constexpr CCSUsrMsg_RoundBackupFilenames::CCSUsrMsg_RoundBackupFilenames(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : filename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , nicename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , count_(0)
  , index_(0){}
struct CCSUsrMsg_RoundBackupFilenamesDefaultTypeInternal {
  constexpr CCSUsrMsg_RoundBackupFilenamesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCSUsrMsg_RoundBackupFilenamesDefaultTypeInternal() {}
  union {
    CCSUsrMsg_RoundBackupFilenames _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCSUsrMsg_RoundBackupFilenamesDefaultTypeInternal _CCSUsrMsg_RoundBackupFilenames_default_instance_;
constexpr CCSUsrMsg_ResetHud::CCSUsrMsg_ResetHud(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : reset_(false){}
struct CCSUsrMsg_ResetHudDefaultTypeInternal {
  constexpr CCSUsrMsg_ResetHudDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCSUsrMsg_ResetHudDefaultTypeInternal() {}
  union {
    CCSUsrMsg_ResetHud _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCSUsrMsg_ResetHudDefaultTypeInternal _CCSUsrMsg_ResetHud_default_instance_;
constexpr CCSUsrMsg_GameTitle::CCSUsrMsg_GameTitle(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : dummy_(0){}
struct CCSUsrMsg_GameTitleDefaultTypeInternal {
  constexpr CCSUsrMsg_GameTitleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCSUsrMsg_GameTitleDefaultTypeInternal() {}
  union {
    CCSUsrMsg_GameTitle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCSUsrMsg_GameTitleDefaultTypeInternal _CCSUsrMsg_GameTitle_default_instance_;
constexpr CCSUsrMsg_RequestState::CCSUsrMsg_RequestState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : dummy_(0){}
struct CCSUsrMsg_RequestStateDefaultTypeInternal {
  constexpr CCSUsrMsg_RequestStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCSUsrMsg_RequestStateDefaultTypeInternal() {}
  union {
    CCSUsrMsg_RequestState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCSUsrMsg_RequestStateDefaultTypeInternal _CCSUsrMsg_RequestState_default_instance_;
constexpr CCSUsrMsg_StopSpectatorMode::CCSUsrMsg_StopSpectatorMode(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : dummy_(0){}
struct CCSUsrMsg_StopSpectatorModeDefaultTypeInternal {
  constexpr CCSUsrMsg_StopSpectatorModeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCSUsrMsg_StopSpectatorModeDefaultTypeInternal() {}
  union {
    CCSUsrMsg_StopSpectatorMode _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCSUsrMsg_StopSpectatorModeDefaultTypeInternal _CCSUsrMsg_StopSpectatorMode_default_instance_;
constexpr CCSUsrMsg_DisconnectToLobby::CCSUsrMsg_DisconnectToLobby(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : dummy_(0){}
struct CCSUsrMsg_DisconnectToLobbyDefaultTypeInternal {
  constexpr CCSUsrMsg_DisconnectToLobbyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCSUsrMsg_DisconnectToLobbyDefaultTypeInternal() {}
  union {
    CCSUsrMsg_DisconnectToLobby _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCSUsrMsg_DisconnectToLobbyDefaultTypeInternal _CCSUsrMsg_DisconnectToLobby_default_instance_;
constexpr CCSUsrMsg_WarmupHasEnded::CCSUsrMsg_WarmupHasEnded(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : dummy_(0){}
struct CCSUsrMsg_WarmupHasEndedDefaultTypeInternal {
  constexpr CCSUsrMsg_WarmupHasEndedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCSUsrMsg_WarmupHasEndedDefaultTypeInternal() {}
  union {
    CCSUsrMsg_WarmupHasEnded _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCSUsrMsg_WarmupHasEndedDefaultTypeInternal _CCSUsrMsg_WarmupHasEnded_default_instance_;
constexpr CCSUsrMsg_ClientInfo::CCSUsrMsg_ClientInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : dummy_(0){}
struct CCSUsrMsg_ClientInfoDefaultTypeInternal {
  constexpr CCSUsrMsg_ClientInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCSUsrMsg_ClientInfoDefaultTypeInternal() {}
  union {
    CCSUsrMsg_ClientInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCSUsrMsg_ClientInfoDefaultTypeInternal _CCSUsrMsg_ClientInfo_default_instance_;
constexpr CCSUsrMsg_ServerRankRevealAll::CCSUsrMsg_ServerRankRevealAll(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : seconds_till_shutdown_(0){}
struct CCSUsrMsg_ServerRankRevealAllDefaultTypeInternal {
  constexpr CCSUsrMsg_ServerRankRevealAllDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCSUsrMsg_ServerRankRevealAllDefaultTypeInternal() {}
  union {
    CCSUsrMsg_ServerRankRevealAll _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCSUsrMsg_ServerRankRevealAllDefaultTypeInternal _CCSUsrMsg_ServerRankRevealAll_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_cstrike15_5fusermessages_2eproto[68];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_cstrike15_5fusermessages_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_cstrike15_5fusermessages_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_cstrike15_5fusermessages_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_VGUIMenu_Subkey, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_VGUIMenu_Subkey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_VGUIMenu_Subkey, name_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_VGUIMenu_Subkey, str_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_VGUIMenu, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_VGUIMenu, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_VGUIMenu, name_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_VGUIMenu, show_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_VGUIMenu, subkeys_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_Geiger, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_Geiger, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_Geiger, range_),
  0,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_Train, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_Train, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_Train, train_),
  0,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_HudText, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_HudText, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_HudText, text_),
  0,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_SayText, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_SayText, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_SayText, ent_idx_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_SayText, text_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_SayText, chat_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_SayText, textallchat_),
  1,
  0,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_SayText2, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_SayText2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_SayText2, ent_idx_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_SayText2, chat_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_SayText2, msg_name_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_SayText2, params_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_SayText2, textallchat_),
  1,
  2,
  0,
  ~0u,
  3,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_TextMsg, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_TextMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_TextMsg, msg_dst_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_TextMsg, params_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_HudMsg, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_HudMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_HudMsg, channel_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_HudMsg, pos_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_HudMsg, clr1_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_HudMsg, clr2_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_HudMsg, effect_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_HudMsg, fade_in_time_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_HudMsg, fade_out_time_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_HudMsg, hold_time_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_HudMsg, fx_time_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_HudMsg, text_),
  4,
  1,
  2,
  3,
  5,
  6,
  7,
  8,
  9,
  0,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_Shake, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_Shake, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_Shake, command_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_Shake, local_amplitude_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_Shake, frequency_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_Shake, duration_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_Fade, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_Fade, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_Fade, duration_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_Fade, hold_time_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_Fade, flags_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_Fade, clr_),
  1,
  2,
  3,
  0,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_Rumble, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_Rumble, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_Rumble, index_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_Rumble, data_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_Rumble, flags_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_CloseCaption, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_CloseCaption, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_CloseCaption, hash_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_CloseCaption, duration_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_CloseCaption, from_player_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_CloseCaptionDirect, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_CloseCaptionDirect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_CloseCaptionDirect, hash_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_CloseCaptionDirect, duration_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_CloseCaptionDirect, from_player_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_SendAudio, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_SendAudio, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_SendAudio, radio_sound_),
  0,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_RawAudio, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_RawAudio, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_RawAudio, pitch_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_RawAudio, entidx_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_RawAudio, duration_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_RawAudio, voice_filename_),
  1,
  2,
  3,
  0,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_VoiceMask_PlayerMask, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_VoiceMask_PlayerMask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_VoiceMask_PlayerMask, game_rules_mask_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_VoiceMask_PlayerMask, ban_masks_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_VoiceMask, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_VoiceMask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_VoiceMask, player_masks_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_VoiceMask, player_mod_enable_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_Damage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_Damage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_Damage, amount_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_Damage, inflictor_world_pos_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_Damage, victim_entindex_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_RadioText, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_RadioText, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_RadioText, msg_dst_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_RadioText, client_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_RadioText, msg_name_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_RadioText, params_),
  1,
  2,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_HintText, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_HintText, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_HintText, text_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_KeyHintText, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_KeyHintText, hints_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate, entity_idx_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate, class_id_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate, origin_x_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate, origin_y_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate, origin_z_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate, angle_y_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate, defuser_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate, player_has_defuser_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate, player_has_c4_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ProcessSpottedEntityUpdate, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ProcessSpottedEntityUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ProcessSpottedEntityUpdate, new_update_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ProcessSpottedEntityUpdate, entity_updates_),
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_SendPlayerItemDrops, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_SendPlayerItemDrops, entity_updates_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_SendPlayerItemFound, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_SendPlayerItemFound, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_SendPlayerItemFound, iteminfo_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_SendPlayerItemFound, entindex_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ReloadEffect, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ReloadEffect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ReloadEffect, entidx_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ReloadEffect, actanim_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ReloadEffect, origin_x_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ReloadEffect, origin_y_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ReloadEffect, origin_z_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_AdjustMoney, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_AdjustMoney, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_AdjustMoney, amount_),
  0,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ReportHit, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ReportHit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ReportHit, pos_x_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ReportHit, pos_y_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ReportHit, timestamp_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ReportHit, pos_z_),
  0,
  1,
  3,
  2,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_KillCam, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_KillCam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_KillCam, obs_mode_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_KillCam, first_target_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_KillCam, second_target_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_DesiredTimescale, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_DesiredTimescale, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_DesiredTimescale, desired_timescale_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_DesiredTimescale, duration_realtime_sec_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_DesiredTimescale, interpolator_type_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_DesiredTimescale, start_blend_time_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_CurrentTimescale, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_CurrentTimescale, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_CurrentTimescale, cur_timescale_),
  0,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_AchievementEvent, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_AchievementEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_AchievementEvent, achievement_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_AchievementEvent, count_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_AchievementEvent, user_id_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_MatchEndConditions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_MatchEndConditions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_MatchEndConditions, fraglimit_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_MatchEndConditions, mp_maxrounds_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_MatchEndConditions, mp_winlimit_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_MatchEndConditions, mp_timelimit_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_PlayerStatsUpdate_Stat, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_PlayerStatsUpdate_Stat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_PlayerStatsUpdate_Stat, idx_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_PlayerStatsUpdate_Stat, delta_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_PlayerStatsUpdate, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_PlayerStatsUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_PlayerStatsUpdate, version_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_PlayerStatsUpdate, stats_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_PlayerStatsUpdate, user_id_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_PlayerStatsUpdate, crc_),
  0,
  ~0u,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_DisplayInventory, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_DisplayInventory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_DisplayInventory, display_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_DisplayInventory, user_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_QuestProgress, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_QuestProgress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_QuestProgress, quest_id_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_QuestProgress, normal_points_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_QuestProgress, bonus_points_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_QuestProgress, is_event_quest_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ScoreLeaderboardData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ScoreLeaderboardData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ScoreLeaderboardData, data_),
  0,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_PlayerDecalDigitalSignature, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_PlayerDecalDigitalSignature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_PlayerDecalDigitalSignature, data_),
  0,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_XRankGet, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_XRankGet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_XRankGet, mode_idx_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_XRankGet, controller_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_XRankUpd, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_XRankUpd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_XRankUpd, mode_idx_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_XRankUpd, controller_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_XRankUpd, ranking_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_CallVoteFailed, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_CallVoteFailed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_CallVoteFailed, reason_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_CallVoteFailed, time_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_VoteStart, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_VoteStart, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_VoteStart, team_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_VoteStart, ent_idx_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_VoteStart, vote_type_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_VoteStart, disp_str_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_VoteStart, details_str_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_VoteStart, other_team_str_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_VoteStart, is_yes_no_vote_),
  3,
  4,
  5,
  0,
  1,
  2,
  6,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_VotePass, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_VotePass, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_VotePass, team_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_VotePass, vote_type_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_VotePass, disp_str_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_VotePass, details_str_),
  2,
  3,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_VoteFailed, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_VoteFailed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_VoteFailed, team_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_VoteFailed, reason_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_VoteSetup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_VoteSetup, potential_issues_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_SendLastKillerDamageToClient, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_SendLastKillerDamageToClient, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_SendLastKillerDamageToClient, num_hits_given_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_SendLastKillerDamageToClient, damage_given_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_SendLastKillerDamageToClient, num_hits_taken_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_SendLastKillerDamageToClient, damage_taken_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ServerRankUpdate_RankUpdate, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ServerRankUpdate_RankUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ServerRankUpdate_RankUpdate, account_id_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ServerRankUpdate_RankUpdate, rank_old_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ServerRankUpdate_RankUpdate, rank_new_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ServerRankUpdate_RankUpdate, num_wins_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ServerRankUpdate_RankUpdate, rank_change_),
  0,
  1,
  2,
  3,
  4,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ServerRankUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ServerRankUpdate, rank_update_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_XpUpdate, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_XpUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_XpUpdate, data_),
  0,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ItemPickup, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ItemPickup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ItemPickup, item_),
  0,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ShowMenu, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ShowMenu, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ShowMenu, bits_valid_slots_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ShowMenu, display_time_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ShowMenu, menu_string_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_BarTime, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_BarTime, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_BarTime, time_),
  0,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_AmmoDenied, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_AmmoDenied, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_AmmoDenied, ammoidx_),
  0,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_MarkAchievement, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_MarkAchievement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_MarkAchievement, achievement_),
  0,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_MatchStatsUpdate, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_MatchStatsUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_MatchStatsUpdate, update_),
  0,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ItemDrop, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ItemDrop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ItemDrop, itemid_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ItemDrop, death_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_GlowPropTurnOff, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_GlowPropTurnOff, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_GlowPropTurnOff, entidx_),
  0,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_RoundBackupFilenames, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_RoundBackupFilenames, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_RoundBackupFilenames, count_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_RoundBackupFilenames, index_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_RoundBackupFilenames, filename_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_RoundBackupFilenames, nicename_),
  2,
  3,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ResetHud, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ResetHud, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ResetHud, reset_),
  0,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_GameTitle, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_GameTitle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_GameTitle, dummy_),
  0,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_RequestState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_RequestState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_RequestState, dummy_),
  0,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_StopSpectatorMode, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_StopSpectatorMode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_StopSpectatorMode, dummy_),
  0,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_DisconnectToLobby, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_DisconnectToLobby, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_DisconnectToLobby, dummy_),
  0,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_WarmupHasEnded, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_WarmupHasEnded, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_WarmupHasEnded, dummy_),
  0,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ClientInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ClientInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ClientInfo, dummy_),
  0,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ServerRankRevealAll, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ServerRankRevealAll, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ServerRankRevealAll, seconds_till_shutdown_),
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::CCSUsrMsg_VGUIMenu_Subkey)},
  { 10, 19, -1, sizeof(::CCSUsrMsg_VGUIMenu)},
  { 22, 29, -1, sizeof(::CCSUsrMsg_Geiger)},
  { 30, 37, -1, sizeof(::CCSUsrMsg_Train)},
  { 38, 45, -1, sizeof(::CCSUsrMsg_HudText)},
  { 46, 56, -1, sizeof(::CCSUsrMsg_SayText)},
  { 60, 71, -1, sizeof(::CCSUsrMsg_SayText2)},
  { 76, 84, -1, sizeof(::CCSUsrMsg_TextMsg)},
  { 86, 102, -1, sizeof(::CCSUsrMsg_HudMsg)},
  { 112, 122, -1, sizeof(::CCSUsrMsg_Shake)},
  { 126, 136, -1, sizeof(::CCSUsrMsg_Fade)},
  { 140, 149, -1, sizeof(::CCSUsrMsg_Rumble)},
  { 152, 161, -1, sizeof(::CCSUsrMsg_CloseCaption)},
  { 164, 173, -1, sizeof(::CCSUsrMsg_CloseCaptionDirect)},
  { 176, 183, -1, sizeof(::CCSUsrMsg_SendAudio)},
  { 184, 194, -1, sizeof(::CCSUsrMsg_RawAudio)},
  { 198, 206, -1, sizeof(::CCSUsrMsg_VoiceMask_PlayerMask)},
  { 208, 216, -1, sizeof(::CCSUsrMsg_VoiceMask)},
  { 218, 227, -1, sizeof(::CCSUsrMsg_Damage)},
  { 230, 240, -1, sizeof(::CCSUsrMsg_RadioText)},
  { 244, 251, -1, sizeof(::CCSUsrMsg_HintText)},
  { 252, -1, -1, sizeof(::CCSUsrMsg_KeyHintText)},
  { 259, 274, -1, sizeof(::CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate)},
  { 283, 291, -1, sizeof(::CCSUsrMsg_ProcessSpottedEntityUpdate)},
  { 293, -1, -1, sizeof(::CCSUsrMsg_SendPlayerItemDrops)},
  { 300, 308, -1, sizeof(::CCSUsrMsg_SendPlayerItemFound)},
  { 310, 321, -1, sizeof(::CCSUsrMsg_ReloadEffect)},
  { 326, 333, -1, sizeof(::CCSUsrMsg_AdjustMoney)},
  { 334, 344, -1, sizeof(::CCSUsrMsg_ReportHit)},
  { 348, 357, -1, sizeof(::CCSUsrMsg_KillCam)},
  { 360, 370, -1, sizeof(::CCSUsrMsg_DesiredTimescale)},
  { 374, 381, -1, sizeof(::CCSUsrMsg_CurrentTimescale)},
  { 382, 391, -1, sizeof(::CCSUsrMsg_AchievementEvent)},
  { 394, 404, -1, sizeof(::CCSUsrMsg_MatchEndConditions)},
  { 408, 416, -1, sizeof(::CCSUsrMsg_PlayerStatsUpdate_Stat)},
  { 418, 428, -1, sizeof(::CCSUsrMsg_PlayerStatsUpdate)},
  { 432, 440, -1, sizeof(::CCSUsrMsg_DisplayInventory)},
  { 442, 452, -1, sizeof(::CCSUsrMsg_QuestProgress)},
  { 456, 463, -1, sizeof(::CCSUsrMsg_ScoreLeaderboardData)},
  { 464, 471, -1, sizeof(::CCSUsrMsg_PlayerDecalDigitalSignature)},
  { 472, 480, -1, sizeof(::CCSUsrMsg_XRankGet)},
  { 482, 491, -1, sizeof(::CCSUsrMsg_XRankUpd)},
  { 494, 502, -1, sizeof(::CCSUsrMsg_CallVoteFailed)},
  { 504, 517, -1, sizeof(::CCSUsrMsg_VoteStart)},
  { 524, 534, -1, sizeof(::CCSUsrMsg_VotePass)},
  { 538, 546, -1, sizeof(::CCSUsrMsg_VoteFailed)},
  { 548, -1, -1, sizeof(::CCSUsrMsg_VoteSetup)},
  { 555, 565, -1, sizeof(::CCSUsrMsg_SendLastKillerDamageToClient)},
  { 569, 580, -1, sizeof(::CCSUsrMsg_ServerRankUpdate_RankUpdate)},
  { 585, -1, -1, sizeof(::CCSUsrMsg_ServerRankUpdate)},
  { 592, 599, -1, sizeof(::CCSUsrMsg_XpUpdate)},
  { 600, 607, -1, sizeof(::CCSUsrMsg_ItemPickup)},
  { 608, 617, -1, sizeof(::CCSUsrMsg_ShowMenu)},
  { 620, 627, -1, sizeof(::CCSUsrMsg_BarTime)},
  { 628, 635, -1, sizeof(::CCSUsrMsg_AmmoDenied)},
  { 636, 643, -1, sizeof(::CCSUsrMsg_MarkAchievement)},
  { 644, 651, -1, sizeof(::CCSUsrMsg_MatchStatsUpdate)},
  { 652, 660, -1, sizeof(::CCSUsrMsg_ItemDrop)},
  { 662, 669, -1, sizeof(::CCSUsrMsg_GlowPropTurnOff)},
  { 670, 680, -1, sizeof(::CCSUsrMsg_RoundBackupFilenames)},
  { 684, 691, -1, sizeof(::CCSUsrMsg_ResetHud)},
  { 692, 699, -1, sizeof(::CCSUsrMsg_GameTitle)},
  { 700, 707, -1, sizeof(::CCSUsrMsg_RequestState)},
  { 708, 715, -1, sizeof(::CCSUsrMsg_StopSpectatorMode)},
  { 716, 723, -1, sizeof(::CCSUsrMsg_DisconnectToLobby)},
  { 724, 731, -1, sizeof(::CCSUsrMsg_WarmupHasEnded)},
  { 732, 739, -1, sizeof(::CCSUsrMsg_ClientInfo)},
  { 740, 747, -1, sizeof(::CCSUsrMsg_ServerRankRevealAll)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCSUsrMsg_VGUIMenu_Subkey_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCSUsrMsg_VGUIMenu_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCSUsrMsg_Geiger_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCSUsrMsg_Train_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCSUsrMsg_HudText_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCSUsrMsg_SayText_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCSUsrMsg_SayText2_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCSUsrMsg_TextMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCSUsrMsg_HudMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCSUsrMsg_Shake_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCSUsrMsg_Fade_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCSUsrMsg_Rumble_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCSUsrMsg_CloseCaption_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCSUsrMsg_CloseCaptionDirect_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCSUsrMsg_SendAudio_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCSUsrMsg_RawAudio_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCSUsrMsg_VoiceMask_PlayerMask_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCSUsrMsg_VoiceMask_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCSUsrMsg_Damage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCSUsrMsg_RadioText_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCSUsrMsg_HintText_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCSUsrMsg_KeyHintText_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCSUsrMsg_ProcessSpottedEntityUpdate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCSUsrMsg_SendPlayerItemDrops_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCSUsrMsg_SendPlayerItemFound_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCSUsrMsg_ReloadEffect_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCSUsrMsg_AdjustMoney_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCSUsrMsg_ReportHit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCSUsrMsg_KillCam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCSUsrMsg_DesiredTimescale_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCSUsrMsg_CurrentTimescale_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCSUsrMsg_AchievementEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCSUsrMsg_MatchEndConditions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCSUsrMsg_PlayerStatsUpdate_Stat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCSUsrMsg_PlayerStatsUpdate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCSUsrMsg_DisplayInventory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCSUsrMsg_QuestProgress_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCSUsrMsg_ScoreLeaderboardData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCSUsrMsg_PlayerDecalDigitalSignature_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCSUsrMsg_XRankGet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCSUsrMsg_XRankUpd_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCSUsrMsg_CallVoteFailed_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCSUsrMsg_VoteStart_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCSUsrMsg_VotePass_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCSUsrMsg_VoteFailed_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCSUsrMsg_VoteSetup_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCSUsrMsg_SendLastKillerDamageToClient_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCSUsrMsg_ServerRankUpdate_RankUpdate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCSUsrMsg_ServerRankUpdate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCSUsrMsg_XpUpdate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCSUsrMsg_ItemPickup_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCSUsrMsg_ShowMenu_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCSUsrMsg_BarTime_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCSUsrMsg_AmmoDenied_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCSUsrMsg_MarkAchievement_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCSUsrMsg_MatchStatsUpdate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCSUsrMsg_ItemDrop_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCSUsrMsg_GlowPropTurnOff_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCSUsrMsg_RoundBackupFilenames_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCSUsrMsg_ResetHud_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCSUsrMsg_GameTitle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCSUsrMsg_RequestState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCSUsrMsg_StopSpectatorMode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCSUsrMsg_DisconnectToLobby_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCSUsrMsg_WarmupHasEnded_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCSUsrMsg_ClientInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCSUsrMsg_ServerRankRevealAll_default_instance_),
};

const char descriptor_table_protodef_cstrike15_5fusermessages_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\034cstrike15_usermessages.proto\032 google/p"
  "rotobuf/descriptor.proto\032\021netmessages.pr"
  "oto\032\032cstrike15_gcmessages.proto\"\202\001\n\022CCSU"
  "srMsg_VGUIMenu\022\014\n\004name\030\001 \001(\t\022\014\n\004show\030\002 \001"
  "(\010\022+\n\007subkeys\030\003 \003(\0132\032.CCSUsrMsg_VGUIMenu"
  ".Subkey\032#\n\006Subkey\022\014\n\004name\030\001 \001(\t\022\013\n\003str\030\002"
  " \001(\t\"!\n\020CCSUsrMsg_Geiger\022\r\n\005range\030\001 \001(\005\""
  " \n\017CCSUsrMsg_Train\022\r\n\005train\030\001 \001(\005\"!\n\021CCS"
  "UsrMsg_HudText\022\014\n\004text\030\001 \001(\t\"U\n\021CCSUsrMs"
  "g_SayText\022\017\n\007ent_idx\030\001 \001(\005\022\014\n\004text\030\002 \001(\t"
  "\022\014\n\004chat\030\003 \001(\010\022\023\n\013textallchat\030\004 \001(\010\"j\n\022C"
  "CSUsrMsg_SayText2\022\017\n\007ent_idx\030\001 \001(\005\022\014\n\004ch"
  "at\030\002 \001(\010\022\020\n\010msg_name\030\003 \001(\t\022\016\n\006params\030\004 \003"
  "(\t\022\023\n\013textallchat\030\005 \001(\010\"4\n\021CCSUsrMsg_Tex"
  "tMsg\022\017\n\007msg_dst\030\001 \001(\005\022\016\n\006params\030\003 \003(\t\"\340\001"
  "\n\020CCSUsrMsg_HudMsg\022\017\n\007channel\030\001 \001(\005\022\032\n\003p"
  "os\030\002 \001(\0132\r.CMsgVector2D\022\027\n\004clr1\030\003 \001(\0132\t."
  "CMsgRGBA\022\027\n\004clr2\030\004 \001(\0132\t.CMsgRGBA\022\016\n\006eff"
  "ect\030\005 \001(\005\022\024\n\014fade_in_time\030\006 \001(\002\022\025\n\rfade_"
  "out_time\030\007 \001(\002\022\021\n\thold_time\030\t \001(\002\022\017\n\007fx_"
  "time\030\n \001(\002\022\014\n\004text\030\013 \001(\t\"`\n\017CCSUsrMsg_Sh"
  "ake\022\017\n\007command\030\001 \001(\005\022\027\n\017local_amplitude\030"
  "\002 \001(\002\022\021\n\tfrequency\030\003 \001(\002\022\020\n\010duration\030\004 \001"
  "(\002\"\\\n\016CCSUsrMsg_Fade\022\020\n\010duration\030\001 \001(\005\022\021"
  "\n\thold_time\030\002 \001(\005\022\r\n\005flags\030\003 \001(\005\022\026\n\003clr\030"
  "\004 \001(\0132\t.CMsgRGBA\">\n\020CCSUsrMsg_Rumble\022\r\n\005"
  "index\030\001 \001(\005\022\014\n\004data\030\002 \001(\005\022\r\n\005flags\030\003 \001(\005"
  "\"M\n\026CCSUsrMsg_CloseCaption\022\014\n\004hash\030\001 \001(\r"
  "\022\020\n\010duration\030\002 \001(\005\022\023\n\013from_player\030\003 \001(\010\""
  "S\n\034CCSUsrMsg_CloseCaptionDirect\022\014\n\004hash\030"
  "\001 \001(\r\022\020\n\010duration\030\002 \001(\005\022\023\n\013from_player\030\003"
  " \001(\010\"*\n\023CCSUsrMsg_SendAudio\022\023\n\013radio_sou"
  "nd\030\001 \001(\t\"]\n\022CCSUsrMsg_RawAudio\022\r\n\005pitch\030"
  "\001 \001(\005\022\016\n\006entidx\030\002 \001(\005\022\020\n\010duration\030\003 \001(\002\022"
  "\026\n\016voice_filename\030\004 \001(\t\"\241\001\n\023CCSUsrMsg_Vo"
  "iceMask\0225\n\014player_masks\030\001 \003(\0132\037.CCSUsrMs"
  "g_VoiceMask.PlayerMask\022\031\n\021player_mod_ena"
  "ble\030\002 \001(\010\0328\n\nPlayerMask\022\027\n\017game_rules_ma"
  "sk\030\001 \001(\005\022\021\n\tban_masks\030\002 \001(\005\"e\n\020CCSUsrMsg"
  "_Damage\022\016\n\006amount\030\001 \001(\005\022(\n\023inflictor_wor"
  "ld_pos\030\002 \001(\0132\013.CMsgVector\022\027\n\017victim_enti"
  "ndex\030\003 \001(\005\"X\n\023CCSUsrMsg_RadioText\022\017\n\007msg"
  "_dst\030\001 \001(\005\022\016\n\006client\030\002 \001(\005\022\020\n\010msg_name\030\003"
  " \001(\t\022\016\n\006params\030\004 \003(\t\"\"\n\022CCSUsrMsg_HintTe"
  "xt\022\014\n\004text\030\001 \001(\t\"&\n\025CCSUsrMsg_KeyHintTex"
  "t\022\r\n\005hints\030\001 \003(\t\"\326\002\n$CCSUsrMsg_ProcessSp"
  "ottedEntityUpdate\022\022\n\nnew_update\030\001 \001(\010\022Q\n"
  "\016entity_updates\030\002 \003(\01329.CCSUsrMsg_Proces"
  "sSpottedEntityUpdate.SpottedEntityUpdate"
  "\032\306\001\n\023SpottedEntityUpdate\022\022\n\nentity_idx\030\001"
  " \001(\005\022\020\n\010class_id\030\002 \001(\005\022\020\n\010origin_x\030\003 \001(\005"
  "\022\020\n\010origin_y\030\004 \001(\005\022\020\n\010origin_z\030\005 \001(\005\022\017\n\007"
  "angle_y\030\006 \001(\005\022\017\n\007defuser\030\007 \001(\010\022\032\n\022player"
  "_has_defuser\030\010 \001(\010\022\025\n\rplayer_has_c4\030\t \001("
  "\010\"S\n\035CCSUsrMsg_SendPlayerItemDrops\0222\n\016en"
  "tity_updates\030\001 \003(\0132\032.CEconItemPreviewDat"
  "aBlock\"_\n\035CCSUsrMsg_SendPlayerItemFound\022"
  ",\n\010iteminfo\030\001 \001(\0132\032.CEconItemPreviewData"
  "Block\022\020\n\010entindex\030\002 \001(\005\"o\n\026CCSUsrMsg_Rel"
  "oadEffect\022\016\n\006entidx\030\001 \001(\005\022\017\n\007actanim\030\002 \001"
  "(\005\022\020\n\010origin_x\030\003 \001(\002\022\020\n\010origin_y\030\004 \001(\002\022\020"
  "\n\010origin_z\030\005 \001(\002\"\'\n\025CCSUsrMsg_AdjustMone"
  "y\022\016\n\006amount\030\001 \001(\005\"U\n\023CCSUsrMsg_ReportHit"
  "\022\r\n\005pos_x\030\001 \001(\002\022\r\n\005pos_y\030\002 \001(\002\022\021\n\ttimest"
  "amp\030\004 \001(\002\022\r\n\005pos_z\030\003 \001(\002\"R\n\021CCSUsrMsg_Ki"
  "llCam\022\020\n\010obs_mode\030\001 \001(\005\022\024\n\014first_target\030"
  "\002 \001(\005\022\025\n\rsecond_target\030\003 \001(\005\"\213\001\n\032CCSUsrM"
  "sg_DesiredTimescale\022\031\n\021desired_timescale"
  "\030\001 \001(\002\022\035\n\025duration_realtime_sec\030\002 \001(\002\022\031\n"
  "\021interpolator_type\030\003 \001(\005\022\030\n\020start_blend_"
  "time\030\004 \001(\002\"3\n\032CCSUsrMsg_CurrentTimescale"
  "\022\025\n\rcur_timescale\030\001 \001(\002\"Q\n\032CCSUsrMsg_Ach"
  "ievementEvent\022\023\n\013achievement\030\001 \001(\005\022\r\n\005co"
  "unt\030\002 \001(\005\022\017\n\007user_id\030\003 \001(\005\"r\n\034CCSUsrMsg_"
  "MatchEndConditions\022\021\n\tfraglimit\030\001 \001(\005\022\024\n"
  "\014mp_maxrounds\030\002 \001(\005\022\023\n\013mp_winlimit\030\003 \001(\005"
  "\022\024\n\014mp_timelimit\030\004 \001(\005\"\242\001\n\033CCSUsrMsg_Pla"
  "yerStatsUpdate\022\017\n\007version\030\001 \001(\005\0220\n\005stats"
  "\030\004 \003(\0132!.CCSUsrMsg_PlayerStatsUpdate.Sta"
  "t\022\017\n\007user_id\030\005 \001(\005\022\013\n\003crc\030\006 \001(\005\032\"\n\004Stat\022"
  "\013\n\003idx\030\001 \001(\005\022\r\n\005delta\030\002 \001(\005\">\n\032CCSUsrMsg"
  "_DisplayInventory\022\017\n\007display\030\001 \001(\010\022\017\n\007us"
  "er_id\030\002 \001(\005\"p\n\027CCSUsrMsg_QuestProgress\022\020"
  "\n\010quest_id\030\001 \001(\r\022\025\n\rnormal_points\030\002 \001(\r\022"
  "\024\n\014bonus_points\030\003 \001(\r\022\026\n\016is_event_quest\030"
  "\004 \001(\010\"E\n\036CCSUsrMsg_ScoreLeaderboardData\022"
  "#\n\004data\030\001 \001(\0132\025.ScoreLeaderboardData\"S\n%"
  "CCSUsrMsg_PlayerDecalDigitalSignature\022*\n"
  "\004data\030\001 \001(\0132\034.PlayerDecalDigitalSignatur"
  "e\":\n\022CCSUsrMsg_XRankGet\022\020\n\010mode_idx\030\001 \001("
  "\005\022\022\n\ncontroller\030\002 \001(\005\"K\n\022CCSUsrMsg_XRank"
  "Upd\022\020\n\010mode_idx\030\001 \001(\005\022\022\n\ncontroller\030\002 \001("
  "\005\022\017\n\007ranking\030\003 \001(\005\"8\n\030CCSUsrMsg_CallVote"
  "Failed\022\016\n\006reason\030\001 \001(\005\022\014\n\004time\030\002 \001(\005\"\236\001\n"
  "\023CCSUsrMsg_VoteStart\022\014\n\004team\030\001 \001(\005\022\017\n\007en"
  "t_idx\030\002 \001(\005\022\021\n\tvote_type\030\003 \001(\005\022\020\n\010disp_s"
  "tr\030\004 \001(\t\022\023\n\013details_str\030\005 \001(\t\022\026\n\016other_t"
  "eam_str\030\006 \001(\t\022\026\n\016is_yes_no_vote\030\007 \001(\010\"\\\n"
  "\022CCSUsrMsg_VotePass\022\014\n\004team\030\001 \001(\005\022\021\n\tvot"
  "e_type\030\002 \001(\005\022\020\n\010disp_str\030\003 \001(\t\022\023\n\013detail"
  "s_str\030\004 \001(\t\"4\n\024CCSUsrMsg_VoteFailed\022\014\n\004t"
  "eam\030\001 \001(\005\022\016\n\006reason\030\002 \001(\005\"/\n\023CCSUsrMsg_V"
  "oteSetup\022\030\n\020potential_issues\030\001 \003(\t\"\204\001\n&C"
  "CSUsrMsg_SendLastKillerDamageToClient\022\026\n"
  "\016num_hits_given\030\001 \001(\005\022\024\n\014damage_given\030\002 "
  "\001(\005\022\026\n\016num_hits_taken\030\003 \001(\005\022\024\n\014damage_ta"
  "ken\030\004 \001(\005\"\306\001\n\032CCSUsrMsg_ServerRankUpdate"
  "\022;\n\013rank_update\030\001 \003(\0132&.CCSUsrMsg_Server"
  "RankUpdate.RankUpdate\032k\n\nRankUpdate\022\022\n\na"
  "ccount_id\030\001 \001(\005\022\020\n\010rank_old\030\002 \001(\005\022\020\n\010ran"
  "k_new\030\003 \001(\005\022\020\n\010num_wins\030\004 \001(\005\022\023\n\013rank_ch"
  "ange\030\005 \001(\002\"Q\n\022CCSUsrMsg_XpUpdate\022;\n\004data"
  "\030\001 \001(\0132-.CMsgGCCstrike15_v2_GC2ServerNot"
  "ifyXPRewarded\"$\n\024CCSUsrMsg_ItemPickup\022\014\n"
  "\004item\030\001 \001(\t\"Y\n\022CCSUsrMsg_ShowMenu\022\030\n\020bit"
  "s_valid_slots\030\001 \001(\005\022\024\n\014display_time\030\002 \001("
  "\005\022\023\n\013menu_string\030\003 \001(\t\"!\n\021CCSUsrMsg_BarT"
  "ime\022\014\n\004time\030\001 \001(\t\"\'\n\024CCSUsrMsg_AmmoDenie"
  "d\022\017\n\007ammoIdx\030\001 \001(\005\"0\n\031CCSUsrMsg_MarkAchi"
  "evement\022\023\n\013achievement\030\001 \001(\t\",\n\032CCSUsrMs"
  "g_MatchStatsUpdate\022\016\n\006update\030\001 \001(\t\"3\n\022CC"
  "SUsrMsg_ItemDrop\022\016\n\006itemid\030\001 \001(\003\022\r\n\005deat"
  "h\030\002 \001(\010\"+\n\031CCSUsrMsg_GlowPropTurnOff\022\016\n\006"
  "entidx\030\001 \001(\005\"b\n\036CCSUsrMsg_RoundBackupFil"
  "enames\022\r\n\005count\030\001 \001(\005\022\r\n\005index\030\002 \001(\005\022\020\n\010"
  "filename\030\003 \001(\t\022\020\n\010nicename\030\004 \001(\t\"#\n\022CCSU"
  "srMsg_ResetHud\022\r\n\005reset\030\001 \001(\010\"$\n\023CCSUsrM"
  "sg_GameTitle\022\r\n\005dummy\030\001 \001(\005\"\'\n\026CCSUsrMsg"
  "_RequestState\022\r\n\005dummy\030\001 \001(\005\",\n\033CCSUsrMs"
  "g_StopSpectatorMode\022\r\n\005dummy\030\001 \001(\005\",\n\033CC"
  "SUsrMsg_DisconnectToLobby\022\r\n\005dummy\030\001 \001(\005"
  "\")\n\030CCSUsrMsg_WarmupHasEnded\022\r\n\005dummy\030\001 "
  "\001(\005\"%\n\024CCSUsrMsg_ClientInfo\022\r\n\005dummy\030\001 \001"
  "(\005\">\n\035CCSUsrMsg_ServerRankRevealAll\022\035\n\025s"
  "econds_till_shutdown\030\001 \001(\005*\231\014\n\026ECstrike1"
  "5UserMessages\022\022\n\016CS_UM_VGUIMenu\020\001\022\020\n\014CS_"
  "UM_Geiger\020\002\022\017\n\013CS_UM_Train\020\003\022\021\n\rCS_UM_Hu"
  "dText\020\004\022\021\n\rCS_UM_SayText\020\005\022\022\n\016CS_UM_SayT"
  "ext2\020\006\022\021\n\rCS_UM_TextMsg\020\007\022\020\n\014CS_UM_HudMs"
  "g\020\010\022\022\n\016CS_UM_ResetHud\020\t\022\023\n\017CS_UM_GameTit"
  "le\020\n\022\017\n\013CS_UM_Shake\020\014\022\016\n\nCS_UM_Fade\020\r\022\020\n"
  "\014CS_UM_Rumble\020\016\022\026\n\022CS_UM_CloseCaption\020\017\022"
  "\034\n\030CS_UM_CloseCaptionDirect\020\020\022\023\n\017CS_UM_S"
  "endAudio\020\021\022\022\n\016CS_UM_RawAudio\020\022\022\023\n\017CS_UM_"
  "VoiceMask\020\023\022\026\n\022CS_UM_RequestState\020\024\022\020\n\014C"
  "S_UM_Damage\020\025\022\023\n\017CS_UM_RadioText\020\026\022\022\n\016CS"
  "_UM_HintText\020\027\022\025\n\021CS_UM_KeyHintText\020\030\022$\n"
  " CS_UM_ProcessSpottedEntityUpdate\020\031\022\026\n\022C"
  "S_UM_ReloadEffect\020\032\022\025\n\021CS_UM_AdjustMoney"
  "\020\033\022\031\n\025CS_UM_UpdateTeamMoney\020\034\022\033\n\027CS_UM_S"
  "topSpectatorMode\020\035\022\021\n\rCS_UM_KillCam\020\036\022\032\n"
  "\026CS_UM_DesiredTimescale\020\037\022\032\n\026CS_UM_Curre"
  "ntTimescale\020 \022\032\n\026CS_UM_AchievementEvent\020"
  "!\022\034\n\030CS_UM_MatchEndConditions\020\"\022\033\n\027CS_UM"
  "_DisconnectToLobby\020#\022\033\n\027CS_UM_PlayerStat"
  "sUpdate\020$\022\032\n\026CS_UM_DisplayInventory\020%\022\030\n"
  "\024CS_UM_WarmupHasEnded\020&\022\024\n\020CS_UM_ClientI"
  "nfo\020\'\022\022\n\016CS_UM_XRankGet\020(\022\022\n\016CS_UM_XRank"
  "Upd\020)\022\030\n\024CS_UM_CallVoteFailed\020-\022\023\n\017CS_UM"
  "_VoteStart\020.\022\022\n\016CS_UM_VotePass\020/\022\024\n\020CS_U"
  "M_VoteFailed\0200\022\023\n\017CS_UM_VoteSetup\0201\022\035\n\031C"
  "S_UM_ServerRankRevealAll\0202\022&\n\"CS_UM_Send"
  "LastKillerDamageToClient\0203\022\032\n\026CS_UM_Serv"
  "erRankUpdate\0204\022\024\n\020CS_UM_ItemPickup\0205\022\022\n\016"
  "CS_UM_ShowMenu\0206\022\021\n\rCS_UM_BarTime\0207\022\024\n\020C"
  "S_UM_AmmoDenied\0208\022\031\n\025CS_UM_MarkAchieveme"
  "nt\0209\022\032\n\026CS_UM_MatchStatsUpdate\020:\022\022\n\016CS_U"
  "M_ItemDrop\020;\022\031\n\025CS_UM_GlowPropTurnOff\020<\022"
  "\035\n\031CS_UM_SendPlayerItemDrops\020=\022\036\n\032CS_UM_"
  "RoundBackupFilenames\020>\022\035\n\031CS_UM_SendPlay"
  "erItemFound\020\?\022\023\n\017CS_UM_ReportHit\020@\022\022\n\016CS"
  "_UM_XpUpdate\020A\022\027\n\023CS_UM_QuestProgress\020B\022"
  "\036\n\032CS_UM_ScoreLeaderboardData\020C\022%\n!CS_UM"
  "_PlayerDecalDigitalSignature\020DB\005H\001\200\001\000"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_cstrike15_5fusermessages_2eproto_deps[3] = {
  &::descriptor_table_cstrike15_5fgcmessages_2eproto,
  &::descriptor_table_google_2fprotobuf_2fdescriptor_2eproto,
  &::descriptor_table_netmessages_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_cstrike15_5fusermessages_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cstrike15_5fusermessages_2eproto = {
  false, false, 6957, descriptor_table_protodef_cstrike15_5fusermessages_2eproto, "cstrike15_usermessages.proto", 
  &descriptor_table_cstrike15_5fusermessages_2eproto_once, descriptor_table_cstrike15_5fusermessages_2eproto_deps, 3, 68,
  schemas, file_default_instances, TableStruct_cstrike15_5fusermessages_2eproto::offsets,
  file_level_metadata_cstrike15_5fusermessages_2eproto, file_level_enum_descriptors_cstrike15_5fusermessages_2eproto, file_level_service_descriptors_cstrike15_5fusermessages_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_cstrike15_5fusermessages_2eproto_getter() {
  return &descriptor_table_cstrike15_5fusermessages_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_cstrike15_5fusermessages_2eproto(&descriptor_table_cstrike15_5fusermessages_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ECstrike15UserMessages_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_cstrike15_5fusermessages_2eproto);
  return file_level_enum_descriptors_cstrike15_5fusermessages_2eproto[0];
}
bool ECstrike15UserMessages_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CCSUsrMsg_VGUIMenu_Subkey::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_VGUIMenu_Subkey>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_str(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CCSUsrMsg_VGUIMenu_Subkey::CCSUsrMsg_VGUIMenu_Subkey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_VGUIMenu.Subkey)
}
CCSUsrMsg_VGUIMenu_Subkey::CCSUsrMsg_VGUIMenu_Subkey(const CCSUsrMsg_VGUIMenu_Subkey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_str()) {
    str_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_str(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_VGUIMenu.Subkey)
}

void CCSUsrMsg_VGUIMenu_Subkey::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CCSUsrMsg_VGUIMenu_Subkey::~CCSUsrMsg_VGUIMenu_Subkey() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_VGUIMenu.Subkey)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCSUsrMsg_VGUIMenu_Subkey::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  str_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CCSUsrMsg_VGUIMenu_Subkey::ArenaDtor(void* object) {
  CCSUsrMsg_VGUIMenu_Subkey* _this = reinterpret_cast< CCSUsrMsg_VGUIMenu_Subkey* >(object);
  (void)_this;
}
void CCSUsrMsg_VGUIMenu_Subkey::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCSUsrMsg_VGUIMenu_Subkey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCSUsrMsg_VGUIMenu_Subkey::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_VGUIMenu.Subkey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      str_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_VGUIMenu_Subkey::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCSUsrMsg_VGUIMenu.Subkey.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string str = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_str();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCSUsrMsg_VGUIMenu.Subkey.str");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCSUsrMsg_VGUIMenu_Subkey::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_VGUIMenu.Subkey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCSUsrMsg_VGUIMenu.Subkey.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional string str = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_str().data(), static_cast<int>(this->_internal_str().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCSUsrMsg_VGUIMenu.Subkey.str");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_str(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_VGUIMenu.Subkey)
  return target;
}

size_t CCSUsrMsg_VGUIMenu_Subkey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_VGUIMenu.Subkey)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string str = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_str());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_VGUIMenu_Subkey::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCSUsrMsg_VGUIMenu_Subkey::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_VGUIMenu_Subkey::GetClassData() const { return &_class_data_; }

void CCSUsrMsg_VGUIMenu_Subkey::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCSUsrMsg_VGUIMenu_Subkey *>(to)->MergeFrom(
      static_cast<const CCSUsrMsg_VGUIMenu_Subkey &>(from));
}


void CCSUsrMsg_VGUIMenu_Subkey::MergeFrom(const CCSUsrMsg_VGUIMenu_Subkey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_VGUIMenu.Subkey)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_str(from._internal_str());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_VGUIMenu_Subkey::CopyFrom(const CCSUsrMsg_VGUIMenu_Subkey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_VGUIMenu.Subkey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_VGUIMenu_Subkey::IsInitialized() const {
  return true;
}

void CCSUsrMsg_VGUIMenu_Subkey::InternalSwap(CCSUsrMsg_VGUIMenu_Subkey* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &str_, lhs_arena,
      &other->str_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_VGUIMenu_Subkey::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[0]);
}

// ===================================================================

class CCSUsrMsg_VGUIMenu::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_VGUIMenu>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_show(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CCSUsrMsg_VGUIMenu::CCSUsrMsg_VGUIMenu(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  subkeys_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_VGUIMenu)
}
CCSUsrMsg_VGUIMenu::CCSUsrMsg_VGUIMenu(const CCSUsrMsg_VGUIMenu& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      subkeys_(from.subkeys_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  show_ = from.show_;
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_VGUIMenu)
}

void CCSUsrMsg_VGUIMenu::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
show_ = false;
}

CCSUsrMsg_VGUIMenu::~CCSUsrMsg_VGUIMenu() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_VGUIMenu)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCSUsrMsg_VGUIMenu::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CCSUsrMsg_VGUIMenu::ArenaDtor(void* object) {
  CCSUsrMsg_VGUIMenu* _this = reinterpret_cast< CCSUsrMsg_VGUIMenu* >(object);
  (void)_this;
}
void CCSUsrMsg_VGUIMenu::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCSUsrMsg_VGUIMenu::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCSUsrMsg_VGUIMenu::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_VGUIMenu)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  subkeys_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  show_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_VGUIMenu::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCSUsrMsg_VGUIMenu.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool show = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_show(&has_bits);
          show_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CCSUsrMsg_VGUIMenu.Subkey subkeys = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_subkeys(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCSUsrMsg_VGUIMenu::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_VGUIMenu)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCSUsrMsg_VGUIMenu.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional bool show = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_show(), target);
  }

  // repeated .CCSUsrMsg_VGUIMenu.Subkey subkeys = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_subkeys_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_subkeys(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_VGUIMenu)
  return target;
}

size_t CCSUsrMsg_VGUIMenu::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_VGUIMenu)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CCSUsrMsg_VGUIMenu.Subkey subkeys = 3;
  total_size += 1UL * this->_internal_subkeys_size();
  for (const auto& msg : this->subkeys_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional bool show = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_VGUIMenu::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCSUsrMsg_VGUIMenu::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_VGUIMenu::GetClassData() const { return &_class_data_; }

void CCSUsrMsg_VGUIMenu::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCSUsrMsg_VGUIMenu *>(to)->MergeFrom(
      static_cast<const CCSUsrMsg_VGUIMenu &>(from));
}


void CCSUsrMsg_VGUIMenu::MergeFrom(const CCSUsrMsg_VGUIMenu& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_VGUIMenu)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  subkeys_.MergeFrom(from.subkeys_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      show_ = from.show_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_VGUIMenu::CopyFrom(const CCSUsrMsg_VGUIMenu& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_VGUIMenu)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_VGUIMenu::IsInitialized() const {
  return true;
}

void CCSUsrMsg_VGUIMenu::InternalSwap(CCSUsrMsg_VGUIMenu* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  subkeys_.InternalSwap(&other->subkeys_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  swap(show_, other->show_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_VGUIMenu::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[1]);
}

// ===================================================================

class CCSUsrMsg_Geiger::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_Geiger>()._has_bits_);
  static void set_has_range(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCSUsrMsg_Geiger::CCSUsrMsg_Geiger(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_Geiger)
}
CCSUsrMsg_Geiger::CCSUsrMsg_Geiger(const CCSUsrMsg_Geiger& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  range_ = from.range_;
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_Geiger)
}

void CCSUsrMsg_Geiger::SharedCtor() {
range_ = 0;
}

CCSUsrMsg_Geiger::~CCSUsrMsg_Geiger() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_Geiger)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCSUsrMsg_Geiger::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCSUsrMsg_Geiger::ArenaDtor(void* object) {
  CCSUsrMsg_Geiger* _this = reinterpret_cast< CCSUsrMsg_Geiger* >(object);
  (void)_this;
}
void CCSUsrMsg_Geiger::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCSUsrMsg_Geiger::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCSUsrMsg_Geiger::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_Geiger)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  range_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_Geiger::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 range = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_range(&has_bits);
          range_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCSUsrMsg_Geiger::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_Geiger)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 range = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_range(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_Geiger)
  return target;
}

size_t CCSUsrMsg_Geiger::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_Geiger)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 range = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_range());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_Geiger::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCSUsrMsg_Geiger::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_Geiger::GetClassData() const { return &_class_data_; }

void CCSUsrMsg_Geiger::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCSUsrMsg_Geiger *>(to)->MergeFrom(
      static_cast<const CCSUsrMsg_Geiger &>(from));
}


void CCSUsrMsg_Geiger::MergeFrom(const CCSUsrMsg_Geiger& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_Geiger)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_range()) {
    _internal_set_range(from._internal_range());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_Geiger::CopyFrom(const CCSUsrMsg_Geiger& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_Geiger)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_Geiger::IsInitialized() const {
  return true;
}

void CCSUsrMsg_Geiger::InternalSwap(CCSUsrMsg_Geiger* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(range_, other->range_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_Geiger::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[2]);
}

// ===================================================================

class CCSUsrMsg_Train::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_Train>()._has_bits_);
  static void set_has_train(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCSUsrMsg_Train::CCSUsrMsg_Train(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_Train)
}
CCSUsrMsg_Train::CCSUsrMsg_Train(const CCSUsrMsg_Train& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  train_ = from.train_;
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_Train)
}

void CCSUsrMsg_Train::SharedCtor() {
train_ = 0;
}

CCSUsrMsg_Train::~CCSUsrMsg_Train() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_Train)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCSUsrMsg_Train::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCSUsrMsg_Train::ArenaDtor(void* object) {
  CCSUsrMsg_Train* _this = reinterpret_cast< CCSUsrMsg_Train* >(object);
  (void)_this;
}
void CCSUsrMsg_Train::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCSUsrMsg_Train::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCSUsrMsg_Train::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_Train)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  train_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_Train::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 train = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_train(&has_bits);
          train_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCSUsrMsg_Train::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_Train)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 train = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_train(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_Train)
  return target;
}

size_t CCSUsrMsg_Train::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_Train)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 train = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_train());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_Train::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCSUsrMsg_Train::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_Train::GetClassData() const { return &_class_data_; }

void CCSUsrMsg_Train::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCSUsrMsg_Train *>(to)->MergeFrom(
      static_cast<const CCSUsrMsg_Train &>(from));
}


void CCSUsrMsg_Train::MergeFrom(const CCSUsrMsg_Train& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_Train)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_train()) {
    _internal_set_train(from._internal_train());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_Train::CopyFrom(const CCSUsrMsg_Train& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_Train)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_Train::IsInitialized() const {
  return true;
}

void CCSUsrMsg_Train::InternalSwap(CCSUsrMsg_Train* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(train_, other->train_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_Train::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[3]);
}

// ===================================================================

class CCSUsrMsg_HudText::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_HudText>()._has_bits_);
  static void set_has_text(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCSUsrMsg_HudText::CCSUsrMsg_HudText(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_HudText)
}
CCSUsrMsg_HudText::CCSUsrMsg_HudText(const CCSUsrMsg_HudText& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_text()) {
    text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_text(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_HudText)
}

void CCSUsrMsg_HudText::SharedCtor() {
text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CCSUsrMsg_HudText::~CCSUsrMsg_HudText() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_HudText)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCSUsrMsg_HudText::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CCSUsrMsg_HudText::ArenaDtor(void* object) {
  CCSUsrMsg_HudText* _this = reinterpret_cast< CCSUsrMsg_HudText* >(object);
  (void)_this;
}
void CCSUsrMsg_HudText::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCSUsrMsg_HudText::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCSUsrMsg_HudText::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_HudText)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    text_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_HudText::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string text = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCSUsrMsg_HudText.text");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCSUsrMsg_HudText::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_HudText)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCSUsrMsg_HudText.text");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_HudText)
  return target;
}

size_t CCSUsrMsg_HudText::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_HudText)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string text = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_HudText::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCSUsrMsg_HudText::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_HudText::GetClassData() const { return &_class_data_; }

void CCSUsrMsg_HudText::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCSUsrMsg_HudText *>(to)->MergeFrom(
      static_cast<const CCSUsrMsg_HudText &>(from));
}


void CCSUsrMsg_HudText::MergeFrom(const CCSUsrMsg_HudText& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_HudText)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_text()) {
    _internal_set_text(from._internal_text());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_HudText::CopyFrom(const CCSUsrMsg_HudText& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_HudText)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_HudText::IsInitialized() const {
  return true;
}

void CCSUsrMsg_HudText::InternalSwap(CCSUsrMsg_HudText* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &text_, lhs_arena,
      &other->text_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_HudText::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[4]);
}

// ===================================================================

class CCSUsrMsg_SayText::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_SayText>()._has_bits_);
  static void set_has_ent_idx(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_text(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_chat(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_textallchat(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CCSUsrMsg_SayText::CCSUsrMsg_SayText(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_SayText)
}
CCSUsrMsg_SayText::CCSUsrMsg_SayText(const CCSUsrMsg_SayText& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_text()) {
    text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_text(), 
      GetArenaForAllocation());
  }
  ::memcpy(&ent_idx_, &from.ent_idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&textallchat_) -
    reinterpret_cast<char*>(&ent_idx_)) + sizeof(textallchat_));
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_SayText)
}

void CCSUsrMsg_SayText::SharedCtor() {
text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ent_idx_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&textallchat_) -
    reinterpret_cast<char*>(&ent_idx_)) + sizeof(textallchat_));
}

CCSUsrMsg_SayText::~CCSUsrMsg_SayText() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_SayText)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCSUsrMsg_SayText::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CCSUsrMsg_SayText::ArenaDtor(void* object) {
  CCSUsrMsg_SayText* _this = reinterpret_cast< CCSUsrMsg_SayText* >(object);
  (void)_this;
}
void CCSUsrMsg_SayText::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCSUsrMsg_SayText::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCSUsrMsg_SayText::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_SayText)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    text_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&ent_idx_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&textallchat_) -
        reinterpret_cast<char*>(&ent_idx_)) + sizeof(textallchat_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_SayText::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 ent_idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ent_idx(&has_bits);
          ent_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCSUsrMsg_SayText.text");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool chat = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_chat(&has_bits);
          chat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool textallchat = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_textallchat(&has_bits);
          textallchat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCSUsrMsg_SayText::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_SayText)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ent_idx = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ent_idx(), target);
  }

  // optional string text = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCSUsrMsg_SayText.text");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_text(), target);
  }

  // optional bool chat = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_chat(), target);
  }

  // optional bool textallchat = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_textallchat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_SayText)
  return target;
}

size_t CCSUsrMsg_SayText::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_SayText)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string text = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_text());
    }

    // optional int32 ent_idx = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_ent_idx());
    }

    // optional bool chat = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool textallchat = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_SayText::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCSUsrMsg_SayText::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_SayText::GetClassData() const { return &_class_data_; }

void CCSUsrMsg_SayText::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCSUsrMsg_SayText *>(to)->MergeFrom(
      static_cast<const CCSUsrMsg_SayText &>(from));
}


void CCSUsrMsg_SayText::MergeFrom(const CCSUsrMsg_SayText& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_SayText)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_text(from._internal_text());
    }
    if (cached_has_bits & 0x00000002u) {
      ent_idx_ = from.ent_idx_;
    }
    if (cached_has_bits & 0x00000004u) {
      chat_ = from.chat_;
    }
    if (cached_has_bits & 0x00000008u) {
      textallchat_ = from.textallchat_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_SayText::CopyFrom(const CCSUsrMsg_SayText& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_SayText)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_SayText::IsInitialized() const {
  return true;
}

void CCSUsrMsg_SayText::InternalSwap(CCSUsrMsg_SayText* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &text_, lhs_arena,
      &other->text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCSUsrMsg_SayText, textallchat_)
      + sizeof(CCSUsrMsg_SayText::textallchat_)
      - PROTOBUF_FIELD_OFFSET(CCSUsrMsg_SayText, ent_idx_)>(
          reinterpret_cast<char*>(&ent_idx_),
          reinterpret_cast<char*>(&other->ent_idx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_SayText::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[5]);
}

// ===================================================================

class CCSUsrMsg_SayText2::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_SayText2>()._has_bits_);
  static void set_has_ent_idx(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_chat(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_msg_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_textallchat(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CCSUsrMsg_SayText2::CCSUsrMsg_SayText2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  params_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_SayText2)
}
CCSUsrMsg_SayText2::CCSUsrMsg_SayText2(const CCSUsrMsg_SayText2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      params_(from.params_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_msg_name()) {
    msg_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&ent_idx_, &from.ent_idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&textallchat_) -
    reinterpret_cast<char*>(&ent_idx_)) + sizeof(textallchat_));
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_SayText2)
}

void CCSUsrMsg_SayText2::SharedCtor() {
msg_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ent_idx_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&textallchat_) -
    reinterpret_cast<char*>(&ent_idx_)) + sizeof(textallchat_));
}

CCSUsrMsg_SayText2::~CCSUsrMsg_SayText2() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_SayText2)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCSUsrMsg_SayText2::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  msg_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CCSUsrMsg_SayText2::ArenaDtor(void* object) {
  CCSUsrMsg_SayText2* _this = reinterpret_cast< CCSUsrMsg_SayText2* >(object);
  (void)_this;
}
void CCSUsrMsg_SayText2::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCSUsrMsg_SayText2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCSUsrMsg_SayText2::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_SayText2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  params_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    msg_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&ent_idx_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&textallchat_) -
        reinterpret_cast<char*>(&ent_idx_)) + sizeof(textallchat_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_SayText2::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 ent_idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ent_idx(&has_bits);
          ent_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool chat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_chat(&has_bits);
          chat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string msg_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_msg_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCSUsrMsg_SayText2.msg_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string params = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_params();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCSUsrMsg_SayText2.params");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool textallchat = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_textallchat(&has_bits);
          textallchat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCSUsrMsg_SayText2::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_SayText2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ent_idx = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ent_idx(), target);
  }

  // optional bool chat = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_chat(), target);
  }

  // optional string msg_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_msg_name().data(), static_cast<int>(this->_internal_msg_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCSUsrMsg_SayText2.msg_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_msg_name(), target);
  }

  // repeated string params = 4;
  for (int i = 0, n = this->_internal_params_size(); i < n; i++) {
    const auto& s = this->_internal_params(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCSUsrMsg_SayText2.params");
    target = stream->WriteString(4, s, target);
  }

  // optional bool textallchat = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_textallchat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_SayText2)
  return target;
}

size_t CCSUsrMsg_SayText2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_SayText2)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string params = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(params_.size());
  for (int i = 0, n = params_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      params_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string msg_name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_msg_name());
    }

    // optional int32 ent_idx = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_ent_idx());
    }

    // optional bool chat = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool textallchat = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_SayText2::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCSUsrMsg_SayText2::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_SayText2::GetClassData() const { return &_class_data_; }

void CCSUsrMsg_SayText2::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCSUsrMsg_SayText2 *>(to)->MergeFrom(
      static_cast<const CCSUsrMsg_SayText2 &>(from));
}


void CCSUsrMsg_SayText2::MergeFrom(const CCSUsrMsg_SayText2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_SayText2)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  params_.MergeFrom(from.params_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_msg_name(from._internal_msg_name());
    }
    if (cached_has_bits & 0x00000002u) {
      ent_idx_ = from.ent_idx_;
    }
    if (cached_has_bits & 0x00000004u) {
      chat_ = from.chat_;
    }
    if (cached_has_bits & 0x00000008u) {
      textallchat_ = from.textallchat_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_SayText2::CopyFrom(const CCSUsrMsg_SayText2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_SayText2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_SayText2::IsInitialized() const {
  return true;
}

void CCSUsrMsg_SayText2::InternalSwap(CCSUsrMsg_SayText2* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  params_.InternalSwap(&other->params_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &msg_name_, lhs_arena,
      &other->msg_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCSUsrMsg_SayText2, textallchat_)
      + sizeof(CCSUsrMsg_SayText2::textallchat_)
      - PROTOBUF_FIELD_OFFSET(CCSUsrMsg_SayText2, ent_idx_)>(
          reinterpret_cast<char*>(&ent_idx_),
          reinterpret_cast<char*>(&other->ent_idx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_SayText2::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[6]);
}

// ===================================================================

class CCSUsrMsg_TextMsg::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_TextMsg>()._has_bits_);
  static void set_has_msg_dst(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCSUsrMsg_TextMsg::CCSUsrMsg_TextMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  params_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_TextMsg)
}
CCSUsrMsg_TextMsg::CCSUsrMsg_TextMsg(const CCSUsrMsg_TextMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      params_(from.params_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_dst_ = from.msg_dst_;
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_TextMsg)
}

void CCSUsrMsg_TextMsg::SharedCtor() {
msg_dst_ = 0;
}

CCSUsrMsg_TextMsg::~CCSUsrMsg_TextMsg() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_TextMsg)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCSUsrMsg_TextMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCSUsrMsg_TextMsg::ArenaDtor(void* object) {
  CCSUsrMsg_TextMsg* _this = reinterpret_cast< CCSUsrMsg_TextMsg* >(object);
  (void)_this;
}
void CCSUsrMsg_TextMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCSUsrMsg_TextMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCSUsrMsg_TextMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_TextMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  params_.Clear();
  msg_dst_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_TextMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 msg_dst = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_msg_dst(&has_bits);
          msg_dst_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string params = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_params();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCSUsrMsg_TextMsg.params");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCSUsrMsg_TextMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_TextMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 msg_dst = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_msg_dst(), target);
  }

  // repeated string params = 3;
  for (int i = 0, n = this->_internal_params_size(); i < n; i++) {
    const auto& s = this->_internal_params(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCSUsrMsg_TextMsg.params");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_TextMsg)
  return target;
}

size_t CCSUsrMsg_TextMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_TextMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string params = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(params_.size());
  for (int i = 0, n = params_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      params_.Get(i));
  }

  // optional int32 msg_dst = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_msg_dst());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_TextMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCSUsrMsg_TextMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_TextMsg::GetClassData() const { return &_class_data_; }

void CCSUsrMsg_TextMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCSUsrMsg_TextMsg *>(to)->MergeFrom(
      static_cast<const CCSUsrMsg_TextMsg &>(from));
}


void CCSUsrMsg_TextMsg::MergeFrom(const CCSUsrMsg_TextMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_TextMsg)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  params_.MergeFrom(from.params_);
  if (from._internal_has_msg_dst()) {
    _internal_set_msg_dst(from._internal_msg_dst());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_TextMsg::CopyFrom(const CCSUsrMsg_TextMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_TextMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_TextMsg::IsInitialized() const {
  return true;
}

void CCSUsrMsg_TextMsg::InternalSwap(CCSUsrMsg_TextMsg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  params_.InternalSwap(&other->params_);
  swap(msg_dst_, other->msg_dst_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_TextMsg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[7]);
}

// ===================================================================

class CCSUsrMsg_HudMsg::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_HudMsg>()._has_bits_);
  static void set_has_channel(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::CMsgVector2D& pos(const CCSUsrMsg_HudMsg* msg);
  static void set_has_pos(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgRGBA& clr1(const CCSUsrMsg_HudMsg* msg);
  static void set_has_clr1(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CMsgRGBA& clr2(const CCSUsrMsg_HudMsg* msg);
  static void set_has_clr2(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_effect(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_fade_in_time(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_fade_out_time(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_hold_time(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_fx_time(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_text(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgVector2D&
CCSUsrMsg_HudMsg::_Internal::pos(const CCSUsrMsg_HudMsg* msg) {
  return *msg->pos_;
}
const ::CMsgRGBA&
CCSUsrMsg_HudMsg::_Internal::clr1(const CCSUsrMsg_HudMsg* msg) {
  return *msg->clr1_;
}
const ::CMsgRGBA&
CCSUsrMsg_HudMsg::_Internal::clr2(const CCSUsrMsg_HudMsg* msg) {
  return *msg->clr2_;
}
void CCSUsrMsg_HudMsg::clear_pos() {
  if (pos_ != nullptr) pos_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CCSUsrMsg_HudMsg::clear_clr1() {
  if (clr1_ != nullptr) clr1_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void CCSUsrMsg_HudMsg::clear_clr2() {
  if (clr2_ != nullptr) clr2_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
CCSUsrMsg_HudMsg::CCSUsrMsg_HudMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_HudMsg)
}
CCSUsrMsg_HudMsg::CCSUsrMsg_HudMsg(const CCSUsrMsg_HudMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_text()) {
    text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_text(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_pos()) {
    pos_ = new ::CMsgVector2D(*from.pos_);
  } else {
    pos_ = nullptr;
  }
  if (from._internal_has_clr1()) {
    clr1_ = new ::CMsgRGBA(*from.clr1_);
  } else {
    clr1_ = nullptr;
  }
  if (from._internal_has_clr2()) {
    clr2_ = new ::CMsgRGBA(*from.clr2_);
  } else {
    clr2_ = nullptr;
  }
  ::memcpy(&channel_, &from.channel_,
    static_cast<size_t>(reinterpret_cast<char*>(&fx_time_) -
    reinterpret_cast<char*>(&channel_)) + sizeof(fx_time_));
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_HudMsg)
}

void CCSUsrMsg_HudMsg::SharedCtor() {
text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pos_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&fx_time_) -
    reinterpret_cast<char*>(&pos_)) + sizeof(fx_time_));
}

CCSUsrMsg_HudMsg::~CCSUsrMsg_HudMsg() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_HudMsg)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCSUsrMsg_HudMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pos_;
  if (this != internal_default_instance()) delete clr1_;
  if (this != internal_default_instance()) delete clr2_;
}

void CCSUsrMsg_HudMsg::ArenaDtor(void* object) {
  CCSUsrMsg_HudMsg* _this = reinterpret_cast< CCSUsrMsg_HudMsg* >(object);
  (void)_this;
}
void CCSUsrMsg_HudMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCSUsrMsg_HudMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCSUsrMsg_HudMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_HudMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      text_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(pos_ != nullptr);
      pos_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(clr1_ != nullptr);
      clr1_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(clr2_ != nullptr);
      clr2_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&channel_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fade_out_time_) -
        reinterpret_cast<char*>(&channel_)) + sizeof(fade_out_time_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&hold_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fx_time_) -
        reinterpret_cast<char*>(&hold_time_)) + sizeof(fx_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_HudMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 channel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_channel(&has_bits);
          channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgVector2D pos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgRGBA clr1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_clr1(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgRGBA clr2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_clr2(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 effect = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_effect(&has_bits);
          effect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float fade_in_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_fade_in_time(&has_bits);
          fade_in_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float fade_out_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_fade_out_time(&has_bits);
          fade_out_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float hold_time = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_hold_time(&has_bits);
          hold_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float fx_time = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_fx_time(&has_bits);
          fx_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional string text = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCSUsrMsg_HudMsg.text");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCSUsrMsg_HudMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_HudMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 channel = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_channel(), target);
  }

  // optional .CMsgVector2D pos = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::pos(this), target, stream);
  }

  // optional .CMsgRGBA clr1 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::clr1(this), target, stream);
  }

  // optional .CMsgRGBA clr2 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::clr2(this), target, stream);
  }

  // optional int32 effect = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_effect(), target);
  }

  // optional float fade_in_time = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_fade_in_time(), target);
  }

  // optional float fade_out_time = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_fade_out_time(), target);
  }

  // optional float hold_time = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_hold_time(), target);
  }

  // optional float fx_time = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_fx_time(), target);
  }

  // optional string text = 11;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCSUsrMsg_HudMsg.text");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_HudMsg)
  return target;
}

size_t CCSUsrMsg_HudMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_HudMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string text = 11;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_text());
    }

    // optional .CMsgVector2D pos = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pos_);
    }

    // optional .CMsgRGBA clr1 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *clr1_);
    }

    // optional .CMsgRGBA clr2 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *clr2_);
    }

    // optional int32 channel = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_channel());
    }

    // optional int32 effect = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_effect());
    }

    // optional float fade_in_time = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float fade_out_time = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional float hold_time = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional float fx_time = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_HudMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCSUsrMsg_HudMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_HudMsg::GetClassData() const { return &_class_data_; }

void CCSUsrMsg_HudMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCSUsrMsg_HudMsg *>(to)->MergeFrom(
      static_cast<const CCSUsrMsg_HudMsg &>(from));
}


void CCSUsrMsg_HudMsg::MergeFrom(const CCSUsrMsg_HudMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_HudMsg)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_text(from._internal_text());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_pos()->::CMsgVector2D::MergeFrom(from._internal_pos());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_clr1()->::CMsgRGBA::MergeFrom(from._internal_clr1());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_clr2()->::CMsgRGBA::MergeFrom(from._internal_clr2());
    }
    if (cached_has_bits & 0x00000010u) {
      channel_ = from.channel_;
    }
    if (cached_has_bits & 0x00000020u) {
      effect_ = from.effect_;
    }
    if (cached_has_bits & 0x00000040u) {
      fade_in_time_ = from.fade_in_time_;
    }
    if (cached_has_bits & 0x00000080u) {
      fade_out_time_ = from.fade_out_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      hold_time_ = from.hold_time_;
    }
    if (cached_has_bits & 0x00000200u) {
      fx_time_ = from.fx_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_HudMsg::CopyFrom(const CCSUsrMsg_HudMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_HudMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_HudMsg::IsInitialized() const {
  return true;
}

void CCSUsrMsg_HudMsg::InternalSwap(CCSUsrMsg_HudMsg* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &text_, lhs_arena,
      &other->text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCSUsrMsg_HudMsg, fx_time_)
      + sizeof(CCSUsrMsg_HudMsg::fx_time_)
      - PROTOBUF_FIELD_OFFSET(CCSUsrMsg_HudMsg, pos_)>(
          reinterpret_cast<char*>(&pos_),
          reinterpret_cast<char*>(&other->pos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_HudMsg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[8]);
}

// ===================================================================

class CCSUsrMsg_Shake::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_Shake>()._has_bits_);
  static void set_has_command(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_local_amplitude(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_frequency(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CCSUsrMsg_Shake::CCSUsrMsg_Shake(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_Shake)
}
CCSUsrMsg_Shake::CCSUsrMsg_Shake(const CCSUsrMsg_Shake& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&command_, &from.command_,
    static_cast<size_t>(reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&command_)) + sizeof(duration_));
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_Shake)
}

void CCSUsrMsg_Shake::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&command_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&command_)) + sizeof(duration_));
}

CCSUsrMsg_Shake::~CCSUsrMsg_Shake() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_Shake)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCSUsrMsg_Shake::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCSUsrMsg_Shake::ArenaDtor(void* object) {
  CCSUsrMsg_Shake* _this = reinterpret_cast< CCSUsrMsg_Shake* >(object);
  (void)_this;
}
void CCSUsrMsg_Shake::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCSUsrMsg_Shake::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCSUsrMsg_Shake::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_Shake)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&command_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&duration_) -
        reinterpret_cast<char*>(&command_)) + sizeof(duration_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_Shake::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 command = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_command(&has_bits);
          command_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float local_amplitude = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_local_amplitude(&has_bits);
          local_amplitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float frequency = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_frequency(&has_bits);
          frequency_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float duration = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_duration(&has_bits);
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCSUsrMsg_Shake::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_Shake)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 command = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_command(), target);
  }

  // optional float local_amplitude = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_local_amplitude(), target);
  }

  // optional float frequency = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_frequency(), target);
  }

  // optional float duration = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_duration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_Shake)
  return target;
}

size_t CCSUsrMsg_Shake::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_Shake)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int32 command = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_command());
    }

    // optional float local_amplitude = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float frequency = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float duration = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_Shake::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCSUsrMsg_Shake::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_Shake::GetClassData() const { return &_class_data_; }

void CCSUsrMsg_Shake::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCSUsrMsg_Shake *>(to)->MergeFrom(
      static_cast<const CCSUsrMsg_Shake &>(from));
}


void CCSUsrMsg_Shake::MergeFrom(const CCSUsrMsg_Shake& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_Shake)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      command_ = from.command_;
    }
    if (cached_has_bits & 0x00000002u) {
      local_amplitude_ = from.local_amplitude_;
    }
    if (cached_has_bits & 0x00000004u) {
      frequency_ = from.frequency_;
    }
    if (cached_has_bits & 0x00000008u) {
      duration_ = from.duration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_Shake::CopyFrom(const CCSUsrMsg_Shake& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_Shake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_Shake::IsInitialized() const {
  return true;
}

void CCSUsrMsg_Shake::InternalSwap(CCSUsrMsg_Shake* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCSUsrMsg_Shake, duration_)
      + sizeof(CCSUsrMsg_Shake::duration_)
      - PROTOBUF_FIELD_OFFSET(CCSUsrMsg_Shake, command_)>(
          reinterpret_cast<char*>(&command_),
          reinterpret_cast<char*>(&other->command_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_Shake::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[9]);
}

// ===================================================================

class CCSUsrMsg_Fade::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_Fade>()._has_bits_);
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_hold_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::CMsgRGBA& clr(const CCSUsrMsg_Fade* msg);
  static void set_has_clr(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgRGBA&
CCSUsrMsg_Fade::_Internal::clr(const CCSUsrMsg_Fade* msg) {
  return *msg->clr_;
}
void CCSUsrMsg_Fade::clear_clr() {
  if (clr_ != nullptr) clr_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
CCSUsrMsg_Fade::CCSUsrMsg_Fade(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_Fade)
}
CCSUsrMsg_Fade::CCSUsrMsg_Fade(const CCSUsrMsg_Fade& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_clr()) {
    clr_ = new ::CMsgRGBA(*from.clr_);
  } else {
    clr_ = nullptr;
  }
  ::memcpy(&duration_, &from.duration_,
    static_cast<size_t>(reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&duration_)) + sizeof(flags_));
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_Fade)
}

void CCSUsrMsg_Fade::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&clr_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&clr_)) + sizeof(flags_));
}

CCSUsrMsg_Fade::~CCSUsrMsg_Fade() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_Fade)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCSUsrMsg_Fade::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete clr_;
}

void CCSUsrMsg_Fade::ArenaDtor(void* object) {
  CCSUsrMsg_Fade* _this = reinterpret_cast< CCSUsrMsg_Fade* >(object);
  (void)_this;
}
void CCSUsrMsg_Fade::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCSUsrMsg_Fade::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCSUsrMsg_Fade::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_Fade)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(clr_ != nullptr);
    clr_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&duration_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&flags_) -
        reinterpret_cast<char*>(&duration_)) + sizeof(flags_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_Fade::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 duration = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_duration(&has_bits);
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 hold_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_hold_time(&has_bits);
          hold_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 flags = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_flags(&has_bits);
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgRGBA clr = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_clr(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCSUsrMsg_Fade::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_Fade)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 duration = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_duration(), target);
  }

  // optional int32 hold_time = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_hold_time(), target);
  }

  // optional int32 flags = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_flags(), target);
  }

  // optional .CMsgRGBA clr = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::clr(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_Fade)
  return target;
}

size_t CCSUsrMsg_Fade::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_Fade)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .CMsgRGBA clr = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *clr_);
    }

    // optional int32 duration = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_duration());
    }

    // optional int32 hold_time = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_hold_time());
    }

    // optional int32 flags = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_flags());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_Fade::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCSUsrMsg_Fade::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_Fade::GetClassData() const { return &_class_data_; }

void CCSUsrMsg_Fade::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCSUsrMsg_Fade *>(to)->MergeFrom(
      static_cast<const CCSUsrMsg_Fade &>(from));
}


void CCSUsrMsg_Fade::MergeFrom(const CCSUsrMsg_Fade& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_Fade)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_clr()->::CMsgRGBA::MergeFrom(from._internal_clr());
    }
    if (cached_has_bits & 0x00000002u) {
      duration_ = from.duration_;
    }
    if (cached_has_bits & 0x00000004u) {
      hold_time_ = from.hold_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      flags_ = from.flags_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_Fade::CopyFrom(const CCSUsrMsg_Fade& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_Fade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_Fade::IsInitialized() const {
  return true;
}

void CCSUsrMsg_Fade::InternalSwap(CCSUsrMsg_Fade* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCSUsrMsg_Fade, flags_)
      + sizeof(CCSUsrMsg_Fade::flags_)
      - PROTOBUF_FIELD_OFFSET(CCSUsrMsg_Fade, clr_)>(
          reinterpret_cast<char*>(&clr_),
          reinterpret_cast<char*>(&other->clr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_Fade::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[10]);
}

// ===================================================================

class CCSUsrMsg_Rumble::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_Rumble>()._has_bits_);
  static void set_has_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CCSUsrMsg_Rumble::CCSUsrMsg_Rumble(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_Rumble)
}
CCSUsrMsg_Rumble::CCSUsrMsg_Rumble(const CCSUsrMsg_Rumble& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&index_)) + sizeof(flags_));
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_Rumble)
}

void CCSUsrMsg_Rumble::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&index_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&index_)) + sizeof(flags_));
}

CCSUsrMsg_Rumble::~CCSUsrMsg_Rumble() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_Rumble)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCSUsrMsg_Rumble::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCSUsrMsg_Rumble::ArenaDtor(void* object) {
  CCSUsrMsg_Rumble* _this = reinterpret_cast< CCSUsrMsg_Rumble* >(object);
  (void)_this;
}
void CCSUsrMsg_Rumble::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCSUsrMsg_Rumble::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCSUsrMsg_Rumble::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_Rumble)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&flags_) -
        reinterpret_cast<char*>(&index_)) + sizeof(flags_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_Rumble::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_index(&has_bits);
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_data(&has_bits);
          data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 flags = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_flags(&has_bits);
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCSUsrMsg_Rumble::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_Rumble)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_index(), target);
  }

  // optional int32 data = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_data(), target);
  }

  // optional int32 flags = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_flags(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_Rumble)
  return target;
}

size_t CCSUsrMsg_Rumble::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_Rumble)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 index = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_index());
    }

    // optional int32 data = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_data());
    }

    // optional int32 flags = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_flags());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_Rumble::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCSUsrMsg_Rumble::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_Rumble::GetClassData() const { return &_class_data_; }

void CCSUsrMsg_Rumble::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCSUsrMsg_Rumble *>(to)->MergeFrom(
      static_cast<const CCSUsrMsg_Rumble &>(from));
}


void CCSUsrMsg_Rumble::MergeFrom(const CCSUsrMsg_Rumble& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_Rumble)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      index_ = from.index_;
    }
    if (cached_has_bits & 0x00000002u) {
      data_ = from.data_;
    }
    if (cached_has_bits & 0x00000004u) {
      flags_ = from.flags_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_Rumble::CopyFrom(const CCSUsrMsg_Rumble& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_Rumble)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_Rumble::IsInitialized() const {
  return true;
}

void CCSUsrMsg_Rumble::InternalSwap(CCSUsrMsg_Rumble* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCSUsrMsg_Rumble, flags_)
      + sizeof(CCSUsrMsg_Rumble::flags_)
      - PROTOBUF_FIELD_OFFSET(CCSUsrMsg_Rumble, index_)>(
          reinterpret_cast<char*>(&index_),
          reinterpret_cast<char*>(&other->index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_Rumble::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[11]);
}

// ===================================================================

class CCSUsrMsg_CloseCaption::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_CloseCaption>()._has_bits_);
  static void set_has_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_from_player(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CCSUsrMsg_CloseCaption::CCSUsrMsg_CloseCaption(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_CloseCaption)
}
CCSUsrMsg_CloseCaption::CCSUsrMsg_CloseCaption(const CCSUsrMsg_CloseCaption& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&hash_, &from.hash_,
    static_cast<size_t>(reinterpret_cast<char*>(&from_player_) -
    reinterpret_cast<char*>(&hash_)) + sizeof(from_player_));
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_CloseCaption)
}

void CCSUsrMsg_CloseCaption::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&hash_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&from_player_) -
    reinterpret_cast<char*>(&hash_)) + sizeof(from_player_));
}

CCSUsrMsg_CloseCaption::~CCSUsrMsg_CloseCaption() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_CloseCaption)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCSUsrMsg_CloseCaption::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCSUsrMsg_CloseCaption::ArenaDtor(void* object) {
  CCSUsrMsg_CloseCaption* _this = reinterpret_cast< CCSUsrMsg_CloseCaption* >(object);
  (void)_this;
}
void CCSUsrMsg_CloseCaption::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCSUsrMsg_CloseCaption::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCSUsrMsg_CloseCaption::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_CloseCaption)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&hash_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&from_player_) -
        reinterpret_cast<char*>(&hash_)) + sizeof(from_player_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_CloseCaption::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_hash(&has_bits);
          hash_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 duration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_duration(&has_bits);
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool from_player = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_from_player(&has_bits);
          from_player_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCSUsrMsg_CloseCaption::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_CloseCaption)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 hash = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_hash(), target);
  }

  // optional int32 duration = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_duration(), target);
  }

  // optional bool from_player = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_from_player(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_CloseCaption)
  return target;
}

size_t CCSUsrMsg_CloseCaption::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_CloseCaption)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 hash = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_hash());
    }

    // optional int32 duration = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_duration());
    }

    // optional bool from_player = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_CloseCaption::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCSUsrMsg_CloseCaption::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_CloseCaption::GetClassData() const { return &_class_data_; }

void CCSUsrMsg_CloseCaption::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCSUsrMsg_CloseCaption *>(to)->MergeFrom(
      static_cast<const CCSUsrMsg_CloseCaption &>(from));
}


void CCSUsrMsg_CloseCaption::MergeFrom(const CCSUsrMsg_CloseCaption& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_CloseCaption)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      hash_ = from.hash_;
    }
    if (cached_has_bits & 0x00000002u) {
      duration_ = from.duration_;
    }
    if (cached_has_bits & 0x00000004u) {
      from_player_ = from.from_player_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_CloseCaption::CopyFrom(const CCSUsrMsg_CloseCaption& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_CloseCaption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_CloseCaption::IsInitialized() const {
  return true;
}

void CCSUsrMsg_CloseCaption::InternalSwap(CCSUsrMsg_CloseCaption* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCSUsrMsg_CloseCaption, from_player_)
      + sizeof(CCSUsrMsg_CloseCaption::from_player_)
      - PROTOBUF_FIELD_OFFSET(CCSUsrMsg_CloseCaption, hash_)>(
          reinterpret_cast<char*>(&hash_),
          reinterpret_cast<char*>(&other->hash_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_CloseCaption::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[12]);
}

// ===================================================================

class CCSUsrMsg_CloseCaptionDirect::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_CloseCaptionDirect>()._has_bits_);
  static void set_has_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_from_player(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CCSUsrMsg_CloseCaptionDirect::CCSUsrMsg_CloseCaptionDirect(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_CloseCaptionDirect)
}
CCSUsrMsg_CloseCaptionDirect::CCSUsrMsg_CloseCaptionDirect(const CCSUsrMsg_CloseCaptionDirect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&hash_, &from.hash_,
    static_cast<size_t>(reinterpret_cast<char*>(&from_player_) -
    reinterpret_cast<char*>(&hash_)) + sizeof(from_player_));
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_CloseCaptionDirect)
}

void CCSUsrMsg_CloseCaptionDirect::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&hash_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&from_player_) -
    reinterpret_cast<char*>(&hash_)) + sizeof(from_player_));
}

CCSUsrMsg_CloseCaptionDirect::~CCSUsrMsg_CloseCaptionDirect() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_CloseCaptionDirect)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCSUsrMsg_CloseCaptionDirect::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCSUsrMsg_CloseCaptionDirect::ArenaDtor(void* object) {
  CCSUsrMsg_CloseCaptionDirect* _this = reinterpret_cast< CCSUsrMsg_CloseCaptionDirect* >(object);
  (void)_this;
}
void CCSUsrMsg_CloseCaptionDirect::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCSUsrMsg_CloseCaptionDirect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCSUsrMsg_CloseCaptionDirect::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_CloseCaptionDirect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&hash_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&from_player_) -
        reinterpret_cast<char*>(&hash_)) + sizeof(from_player_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_CloseCaptionDirect::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_hash(&has_bits);
          hash_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 duration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_duration(&has_bits);
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool from_player = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_from_player(&has_bits);
          from_player_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCSUsrMsg_CloseCaptionDirect::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_CloseCaptionDirect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 hash = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_hash(), target);
  }

  // optional int32 duration = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_duration(), target);
  }

  // optional bool from_player = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_from_player(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_CloseCaptionDirect)
  return target;
}

size_t CCSUsrMsg_CloseCaptionDirect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_CloseCaptionDirect)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 hash = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_hash());
    }

    // optional int32 duration = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_duration());
    }

    // optional bool from_player = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_CloseCaptionDirect::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCSUsrMsg_CloseCaptionDirect::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_CloseCaptionDirect::GetClassData() const { return &_class_data_; }

void CCSUsrMsg_CloseCaptionDirect::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCSUsrMsg_CloseCaptionDirect *>(to)->MergeFrom(
      static_cast<const CCSUsrMsg_CloseCaptionDirect &>(from));
}


void CCSUsrMsg_CloseCaptionDirect::MergeFrom(const CCSUsrMsg_CloseCaptionDirect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_CloseCaptionDirect)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      hash_ = from.hash_;
    }
    if (cached_has_bits & 0x00000002u) {
      duration_ = from.duration_;
    }
    if (cached_has_bits & 0x00000004u) {
      from_player_ = from.from_player_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_CloseCaptionDirect::CopyFrom(const CCSUsrMsg_CloseCaptionDirect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_CloseCaptionDirect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_CloseCaptionDirect::IsInitialized() const {
  return true;
}

void CCSUsrMsg_CloseCaptionDirect::InternalSwap(CCSUsrMsg_CloseCaptionDirect* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCSUsrMsg_CloseCaptionDirect, from_player_)
      + sizeof(CCSUsrMsg_CloseCaptionDirect::from_player_)
      - PROTOBUF_FIELD_OFFSET(CCSUsrMsg_CloseCaptionDirect, hash_)>(
          reinterpret_cast<char*>(&hash_),
          reinterpret_cast<char*>(&other->hash_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_CloseCaptionDirect::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[13]);
}

// ===================================================================

class CCSUsrMsg_SendAudio::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_SendAudio>()._has_bits_);
  static void set_has_radio_sound(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCSUsrMsg_SendAudio::CCSUsrMsg_SendAudio(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_SendAudio)
}
CCSUsrMsg_SendAudio::CCSUsrMsg_SendAudio(const CCSUsrMsg_SendAudio& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  radio_sound_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_radio_sound()) {
    radio_sound_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_radio_sound(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_SendAudio)
}

void CCSUsrMsg_SendAudio::SharedCtor() {
radio_sound_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CCSUsrMsg_SendAudio::~CCSUsrMsg_SendAudio() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_SendAudio)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCSUsrMsg_SendAudio::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  radio_sound_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CCSUsrMsg_SendAudio::ArenaDtor(void* object) {
  CCSUsrMsg_SendAudio* _this = reinterpret_cast< CCSUsrMsg_SendAudio* >(object);
  (void)_this;
}
void CCSUsrMsg_SendAudio::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCSUsrMsg_SendAudio::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCSUsrMsg_SendAudio::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_SendAudio)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    radio_sound_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_SendAudio::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string radio_sound = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_radio_sound();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCSUsrMsg_SendAudio.radio_sound");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCSUsrMsg_SendAudio::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_SendAudio)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string radio_sound = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_radio_sound().data(), static_cast<int>(this->_internal_radio_sound().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCSUsrMsg_SendAudio.radio_sound");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_radio_sound(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_SendAudio)
  return target;
}

size_t CCSUsrMsg_SendAudio::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_SendAudio)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string radio_sound = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_radio_sound());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_SendAudio::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCSUsrMsg_SendAudio::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_SendAudio::GetClassData() const { return &_class_data_; }

void CCSUsrMsg_SendAudio::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCSUsrMsg_SendAudio *>(to)->MergeFrom(
      static_cast<const CCSUsrMsg_SendAudio &>(from));
}


void CCSUsrMsg_SendAudio::MergeFrom(const CCSUsrMsg_SendAudio& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_SendAudio)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_radio_sound()) {
    _internal_set_radio_sound(from._internal_radio_sound());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_SendAudio::CopyFrom(const CCSUsrMsg_SendAudio& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_SendAudio)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_SendAudio::IsInitialized() const {
  return true;
}

void CCSUsrMsg_SendAudio::InternalSwap(CCSUsrMsg_SendAudio* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &radio_sound_, lhs_arena,
      &other->radio_sound_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_SendAudio::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[14]);
}

// ===================================================================

class CCSUsrMsg_RawAudio::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_RawAudio>()._has_bits_);
  static void set_has_pitch(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_entidx(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_voice_filename(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCSUsrMsg_RawAudio::CCSUsrMsg_RawAudio(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_RawAudio)
}
CCSUsrMsg_RawAudio::CCSUsrMsg_RawAudio(const CCSUsrMsg_RawAudio& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  voice_filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_voice_filename()) {
    voice_filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_voice_filename(), 
      GetArenaForAllocation());
  }
  ::memcpy(&pitch_, &from.pitch_,
    static_cast<size_t>(reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&pitch_)) + sizeof(duration_));
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_RawAudio)
}

void CCSUsrMsg_RawAudio::SharedCtor() {
voice_filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pitch_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&pitch_)) + sizeof(duration_));
}

CCSUsrMsg_RawAudio::~CCSUsrMsg_RawAudio() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_RawAudio)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCSUsrMsg_RawAudio::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  voice_filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CCSUsrMsg_RawAudio::ArenaDtor(void* object) {
  CCSUsrMsg_RawAudio* _this = reinterpret_cast< CCSUsrMsg_RawAudio* >(object);
  (void)_this;
}
void CCSUsrMsg_RawAudio::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCSUsrMsg_RawAudio::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCSUsrMsg_RawAudio::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_RawAudio)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    voice_filename_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&pitch_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&duration_) -
        reinterpret_cast<char*>(&pitch_)) + sizeof(duration_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_RawAudio::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 pitch = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_pitch(&has_bits);
          pitch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 entidx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_entidx(&has_bits);
          entidx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float duration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_duration(&has_bits);
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional string voice_filename = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_voice_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCSUsrMsg_RawAudio.voice_filename");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCSUsrMsg_RawAudio::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_RawAudio)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 pitch = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_pitch(), target);
  }

  // optional int32 entidx = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_entidx(), target);
  }

  // optional float duration = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_duration(), target);
  }

  // optional string voice_filename = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_voice_filename().data(), static_cast<int>(this->_internal_voice_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCSUsrMsg_RawAudio.voice_filename");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_voice_filename(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_RawAudio)
  return target;
}

size_t CCSUsrMsg_RawAudio::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_RawAudio)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string voice_filename = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_voice_filename());
    }

    // optional int32 pitch = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_pitch());
    }

    // optional int32 entidx = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_entidx());
    }

    // optional float duration = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_RawAudio::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCSUsrMsg_RawAudio::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_RawAudio::GetClassData() const { return &_class_data_; }

void CCSUsrMsg_RawAudio::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCSUsrMsg_RawAudio *>(to)->MergeFrom(
      static_cast<const CCSUsrMsg_RawAudio &>(from));
}


void CCSUsrMsg_RawAudio::MergeFrom(const CCSUsrMsg_RawAudio& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_RawAudio)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_voice_filename(from._internal_voice_filename());
    }
    if (cached_has_bits & 0x00000002u) {
      pitch_ = from.pitch_;
    }
    if (cached_has_bits & 0x00000004u) {
      entidx_ = from.entidx_;
    }
    if (cached_has_bits & 0x00000008u) {
      duration_ = from.duration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_RawAudio::CopyFrom(const CCSUsrMsg_RawAudio& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_RawAudio)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_RawAudio::IsInitialized() const {
  return true;
}

void CCSUsrMsg_RawAudio::InternalSwap(CCSUsrMsg_RawAudio* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &voice_filename_, lhs_arena,
      &other->voice_filename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCSUsrMsg_RawAudio, duration_)
      + sizeof(CCSUsrMsg_RawAudio::duration_)
      - PROTOBUF_FIELD_OFFSET(CCSUsrMsg_RawAudio, pitch_)>(
          reinterpret_cast<char*>(&pitch_),
          reinterpret_cast<char*>(&other->pitch_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_RawAudio::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[15]);
}

// ===================================================================

class CCSUsrMsg_VoiceMask_PlayerMask::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_VoiceMask_PlayerMask>()._has_bits_);
  static void set_has_game_rules_mask(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ban_masks(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CCSUsrMsg_VoiceMask_PlayerMask::CCSUsrMsg_VoiceMask_PlayerMask(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_VoiceMask.PlayerMask)
}
CCSUsrMsg_VoiceMask_PlayerMask::CCSUsrMsg_VoiceMask_PlayerMask(const CCSUsrMsg_VoiceMask_PlayerMask& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&game_rules_mask_, &from.game_rules_mask_,
    static_cast<size_t>(reinterpret_cast<char*>(&ban_masks_) -
    reinterpret_cast<char*>(&game_rules_mask_)) + sizeof(ban_masks_));
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_VoiceMask.PlayerMask)
}

void CCSUsrMsg_VoiceMask_PlayerMask::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&game_rules_mask_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ban_masks_) -
    reinterpret_cast<char*>(&game_rules_mask_)) + sizeof(ban_masks_));
}

CCSUsrMsg_VoiceMask_PlayerMask::~CCSUsrMsg_VoiceMask_PlayerMask() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_VoiceMask.PlayerMask)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCSUsrMsg_VoiceMask_PlayerMask::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCSUsrMsg_VoiceMask_PlayerMask::ArenaDtor(void* object) {
  CCSUsrMsg_VoiceMask_PlayerMask* _this = reinterpret_cast< CCSUsrMsg_VoiceMask_PlayerMask* >(object);
  (void)_this;
}
void CCSUsrMsg_VoiceMask_PlayerMask::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCSUsrMsg_VoiceMask_PlayerMask::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCSUsrMsg_VoiceMask_PlayerMask::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_VoiceMask.PlayerMask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&game_rules_mask_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ban_masks_) -
        reinterpret_cast<char*>(&game_rules_mask_)) + sizeof(ban_masks_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_VoiceMask_PlayerMask::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 game_rules_mask = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_game_rules_mask(&has_bits);
          game_rules_mask_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 ban_masks = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_ban_masks(&has_bits);
          ban_masks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCSUsrMsg_VoiceMask_PlayerMask::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_VoiceMask.PlayerMask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 game_rules_mask = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_game_rules_mask(), target);
  }

  // optional int32 ban_masks = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_ban_masks(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_VoiceMask.PlayerMask)
  return target;
}

size_t CCSUsrMsg_VoiceMask_PlayerMask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_VoiceMask.PlayerMask)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 game_rules_mask = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_game_rules_mask());
    }

    // optional int32 ban_masks = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_ban_masks());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_VoiceMask_PlayerMask::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCSUsrMsg_VoiceMask_PlayerMask::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_VoiceMask_PlayerMask::GetClassData() const { return &_class_data_; }

void CCSUsrMsg_VoiceMask_PlayerMask::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCSUsrMsg_VoiceMask_PlayerMask *>(to)->MergeFrom(
      static_cast<const CCSUsrMsg_VoiceMask_PlayerMask &>(from));
}


void CCSUsrMsg_VoiceMask_PlayerMask::MergeFrom(const CCSUsrMsg_VoiceMask_PlayerMask& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_VoiceMask.PlayerMask)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      game_rules_mask_ = from.game_rules_mask_;
    }
    if (cached_has_bits & 0x00000002u) {
      ban_masks_ = from.ban_masks_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_VoiceMask_PlayerMask::CopyFrom(const CCSUsrMsg_VoiceMask_PlayerMask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_VoiceMask.PlayerMask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_VoiceMask_PlayerMask::IsInitialized() const {
  return true;
}

void CCSUsrMsg_VoiceMask_PlayerMask::InternalSwap(CCSUsrMsg_VoiceMask_PlayerMask* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCSUsrMsg_VoiceMask_PlayerMask, ban_masks_)
      + sizeof(CCSUsrMsg_VoiceMask_PlayerMask::ban_masks_)
      - PROTOBUF_FIELD_OFFSET(CCSUsrMsg_VoiceMask_PlayerMask, game_rules_mask_)>(
          reinterpret_cast<char*>(&game_rules_mask_),
          reinterpret_cast<char*>(&other->game_rules_mask_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_VoiceMask_PlayerMask::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[16]);
}

// ===================================================================

class CCSUsrMsg_VoiceMask::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_VoiceMask>()._has_bits_);
  static void set_has_player_mod_enable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCSUsrMsg_VoiceMask::CCSUsrMsg_VoiceMask(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  player_masks_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_VoiceMask)
}
CCSUsrMsg_VoiceMask::CCSUsrMsg_VoiceMask(const CCSUsrMsg_VoiceMask& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      player_masks_(from.player_masks_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  player_mod_enable_ = from.player_mod_enable_;
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_VoiceMask)
}

void CCSUsrMsg_VoiceMask::SharedCtor() {
player_mod_enable_ = false;
}

CCSUsrMsg_VoiceMask::~CCSUsrMsg_VoiceMask() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_VoiceMask)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCSUsrMsg_VoiceMask::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCSUsrMsg_VoiceMask::ArenaDtor(void* object) {
  CCSUsrMsg_VoiceMask* _this = reinterpret_cast< CCSUsrMsg_VoiceMask* >(object);
  (void)_this;
}
void CCSUsrMsg_VoiceMask::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCSUsrMsg_VoiceMask::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCSUsrMsg_VoiceMask::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_VoiceMask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_masks_.Clear();
  player_mod_enable_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_VoiceMask::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CCSUsrMsg_VoiceMask.PlayerMask player_masks = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_player_masks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool player_mod_enable = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_player_mod_enable(&has_bits);
          player_mod_enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCSUsrMsg_VoiceMask::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_VoiceMask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CCSUsrMsg_VoiceMask.PlayerMask player_masks = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_player_masks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_player_masks(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool player_mod_enable = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_player_mod_enable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_VoiceMask)
  return target;
}

size_t CCSUsrMsg_VoiceMask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_VoiceMask)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CCSUsrMsg_VoiceMask.PlayerMask player_masks = 1;
  total_size += 1UL * this->_internal_player_masks_size();
  for (const auto& msg : this->player_masks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional bool player_mod_enable = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_VoiceMask::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCSUsrMsg_VoiceMask::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_VoiceMask::GetClassData() const { return &_class_data_; }

void CCSUsrMsg_VoiceMask::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCSUsrMsg_VoiceMask *>(to)->MergeFrom(
      static_cast<const CCSUsrMsg_VoiceMask &>(from));
}


void CCSUsrMsg_VoiceMask::MergeFrom(const CCSUsrMsg_VoiceMask& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_VoiceMask)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  player_masks_.MergeFrom(from.player_masks_);
  if (from._internal_has_player_mod_enable()) {
    _internal_set_player_mod_enable(from._internal_player_mod_enable());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_VoiceMask::CopyFrom(const CCSUsrMsg_VoiceMask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_VoiceMask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_VoiceMask::IsInitialized() const {
  return true;
}

void CCSUsrMsg_VoiceMask::InternalSwap(CCSUsrMsg_VoiceMask* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  player_masks_.InternalSwap(&other->player_masks_);
  swap(player_mod_enable_, other->player_mod_enable_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_VoiceMask::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[17]);
}

// ===================================================================

class CCSUsrMsg_Damage::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_Damage>()._has_bits_);
  static void set_has_amount(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgVector& inflictor_world_pos(const CCSUsrMsg_Damage* msg);
  static void set_has_inflictor_world_pos(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_victim_entindex(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::CMsgVector&
CCSUsrMsg_Damage::_Internal::inflictor_world_pos(const CCSUsrMsg_Damage* msg) {
  return *msg->inflictor_world_pos_;
}
void CCSUsrMsg_Damage::clear_inflictor_world_pos() {
  if (inflictor_world_pos_ != nullptr) inflictor_world_pos_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
CCSUsrMsg_Damage::CCSUsrMsg_Damage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_Damage)
}
CCSUsrMsg_Damage::CCSUsrMsg_Damage(const CCSUsrMsg_Damage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_inflictor_world_pos()) {
    inflictor_world_pos_ = new ::CMsgVector(*from.inflictor_world_pos_);
  } else {
    inflictor_world_pos_ = nullptr;
  }
  ::memcpy(&amount_, &from.amount_,
    static_cast<size_t>(reinterpret_cast<char*>(&victim_entindex_) -
    reinterpret_cast<char*>(&amount_)) + sizeof(victim_entindex_));
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_Damage)
}

void CCSUsrMsg_Damage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&inflictor_world_pos_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&victim_entindex_) -
    reinterpret_cast<char*>(&inflictor_world_pos_)) + sizeof(victim_entindex_));
}

CCSUsrMsg_Damage::~CCSUsrMsg_Damage() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_Damage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCSUsrMsg_Damage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete inflictor_world_pos_;
}

void CCSUsrMsg_Damage::ArenaDtor(void* object) {
  CCSUsrMsg_Damage* _this = reinterpret_cast< CCSUsrMsg_Damage* >(object);
  (void)_this;
}
void CCSUsrMsg_Damage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCSUsrMsg_Damage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCSUsrMsg_Damage::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_Damage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(inflictor_world_pos_ != nullptr);
    inflictor_world_pos_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&amount_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&victim_entindex_) -
        reinterpret_cast<char*>(&amount_)) + sizeof(victim_entindex_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_Damage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 amount = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_amount(&has_bits);
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgVector inflictor_world_pos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_inflictor_world_pos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 victim_entindex = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_victim_entindex(&has_bits);
          victim_entindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCSUsrMsg_Damage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_Damage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 amount = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_amount(), target);
  }

  // optional .CMsgVector inflictor_world_pos = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::inflictor_world_pos(this), target, stream);
  }

  // optional int32 victim_entindex = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_victim_entindex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_Damage)
  return target;
}

size_t CCSUsrMsg_Damage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_Damage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .CMsgVector inflictor_world_pos = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *inflictor_world_pos_);
    }

    // optional int32 amount = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_amount());
    }

    // optional int32 victim_entindex = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_victim_entindex());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_Damage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCSUsrMsg_Damage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_Damage::GetClassData() const { return &_class_data_; }

void CCSUsrMsg_Damage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCSUsrMsg_Damage *>(to)->MergeFrom(
      static_cast<const CCSUsrMsg_Damage &>(from));
}


void CCSUsrMsg_Damage::MergeFrom(const CCSUsrMsg_Damage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_Damage)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_inflictor_world_pos()->::CMsgVector::MergeFrom(from._internal_inflictor_world_pos());
    }
    if (cached_has_bits & 0x00000002u) {
      amount_ = from.amount_;
    }
    if (cached_has_bits & 0x00000004u) {
      victim_entindex_ = from.victim_entindex_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_Damage::CopyFrom(const CCSUsrMsg_Damage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_Damage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_Damage::IsInitialized() const {
  return true;
}

void CCSUsrMsg_Damage::InternalSwap(CCSUsrMsg_Damage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCSUsrMsg_Damage, victim_entindex_)
      + sizeof(CCSUsrMsg_Damage::victim_entindex_)
      - PROTOBUF_FIELD_OFFSET(CCSUsrMsg_Damage, inflictor_world_pos_)>(
          reinterpret_cast<char*>(&inflictor_world_pos_),
          reinterpret_cast<char*>(&other->inflictor_world_pos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_Damage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[18]);
}

// ===================================================================

class CCSUsrMsg_RadioText::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_RadioText>()._has_bits_);
  static void set_has_msg_dst(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_client(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_msg_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCSUsrMsg_RadioText::CCSUsrMsg_RadioText(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  params_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_RadioText)
}
CCSUsrMsg_RadioText::CCSUsrMsg_RadioText(const CCSUsrMsg_RadioText& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      params_(from.params_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_msg_name()) {
    msg_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&msg_dst_, &from.msg_dst_,
    static_cast<size_t>(reinterpret_cast<char*>(&client_) -
    reinterpret_cast<char*>(&msg_dst_)) + sizeof(client_));
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_RadioText)
}

void CCSUsrMsg_RadioText::SharedCtor() {
msg_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&msg_dst_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&client_) -
    reinterpret_cast<char*>(&msg_dst_)) + sizeof(client_));
}

CCSUsrMsg_RadioText::~CCSUsrMsg_RadioText() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_RadioText)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCSUsrMsg_RadioText::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  msg_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CCSUsrMsg_RadioText::ArenaDtor(void* object) {
  CCSUsrMsg_RadioText* _this = reinterpret_cast< CCSUsrMsg_RadioText* >(object);
  (void)_this;
}
void CCSUsrMsg_RadioText::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCSUsrMsg_RadioText::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCSUsrMsg_RadioText::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_RadioText)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  params_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    msg_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&msg_dst_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&client_) -
        reinterpret_cast<char*>(&msg_dst_)) + sizeof(client_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_RadioText::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 msg_dst = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_msg_dst(&has_bits);
          msg_dst_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 client = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_client(&has_bits);
          client_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string msg_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_msg_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCSUsrMsg_RadioText.msg_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string params = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_params();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCSUsrMsg_RadioText.params");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCSUsrMsg_RadioText::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_RadioText)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 msg_dst = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_msg_dst(), target);
  }

  // optional int32 client = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_client(), target);
  }

  // optional string msg_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_msg_name().data(), static_cast<int>(this->_internal_msg_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCSUsrMsg_RadioText.msg_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_msg_name(), target);
  }

  // repeated string params = 4;
  for (int i = 0, n = this->_internal_params_size(); i < n; i++) {
    const auto& s = this->_internal_params(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCSUsrMsg_RadioText.params");
    target = stream->WriteString(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_RadioText)
  return target;
}

size_t CCSUsrMsg_RadioText::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_RadioText)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string params = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(params_.size());
  for (int i = 0, n = params_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      params_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string msg_name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_msg_name());
    }

    // optional int32 msg_dst = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_msg_dst());
    }

    // optional int32 client = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_client());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_RadioText::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCSUsrMsg_RadioText::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_RadioText::GetClassData() const { return &_class_data_; }

void CCSUsrMsg_RadioText::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCSUsrMsg_RadioText *>(to)->MergeFrom(
      static_cast<const CCSUsrMsg_RadioText &>(from));
}


void CCSUsrMsg_RadioText::MergeFrom(const CCSUsrMsg_RadioText& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_RadioText)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  params_.MergeFrom(from.params_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_msg_name(from._internal_msg_name());
    }
    if (cached_has_bits & 0x00000002u) {
      msg_dst_ = from.msg_dst_;
    }
    if (cached_has_bits & 0x00000004u) {
      client_ = from.client_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_RadioText::CopyFrom(const CCSUsrMsg_RadioText& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_RadioText)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_RadioText::IsInitialized() const {
  return true;
}

void CCSUsrMsg_RadioText::InternalSwap(CCSUsrMsg_RadioText* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  params_.InternalSwap(&other->params_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &msg_name_, lhs_arena,
      &other->msg_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCSUsrMsg_RadioText, client_)
      + sizeof(CCSUsrMsg_RadioText::client_)
      - PROTOBUF_FIELD_OFFSET(CCSUsrMsg_RadioText, msg_dst_)>(
          reinterpret_cast<char*>(&msg_dst_),
          reinterpret_cast<char*>(&other->msg_dst_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_RadioText::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[19]);
}

// ===================================================================

class CCSUsrMsg_HintText::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_HintText>()._has_bits_);
  static void set_has_text(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCSUsrMsg_HintText::CCSUsrMsg_HintText(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_HintText)
}
CCSUsrMsg_HintText::CCSUsrMsg_HintText(const CCSUsrMsg_HintText& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_text()) {
    text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_text(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_HintText)
}

void CCSUsrMsg_HintText::SharedCtor() {
text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CCSUsrMsg_HintText::~CCSUsrMsg_HintText() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_HintText)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCSUsrMsg_HintText::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CCSUsrMsg_HintText::ArenaDtor(void* object) {
  CCSUsrMsg_HintText* _this = reinterpret_cast< CCSUsrMsg_HintText* >(object);
  (void)_this;
}
void CCSUsrMsg_HintText::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCSUsrMsg_HintText::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCSUsrMsg_HintText::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_HintText)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    text_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_HintText::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string text = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCSUsrMsg_HintText.text");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCSUsrMsg_HintText::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_HintText)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCSUsrMsg_HintText.text");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_HintText)
  return target;
}

size_t CCSUsrMsg_HintText::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_HintText)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string text = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_HintText::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCSUsrMsg_HintText::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_HintText::GetClassData() const { return &_class_data_; }

void CCSUsrMsg_HintText::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCSUsrMsg_HintText *>(to)->MergeFrom(
      static_cast<const CCSUsrMsg_HintText &>(from));
}


void CCSUsrMsg_HintText::MergeFrom(const CCSUsrMsg_HintText& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_HintText)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_text()) {
    _internal_set_text(from._internal_text());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_HintText::CopyFrom(const CCSUsrMsg_HintText& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_HintText)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_HintText::IsInitialized() const {
  return true;
}

void CCSUsrMsg_HintText::InternalSwap(CCSUsrMsg_HintText* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &text_, lhs_arena,
      &other->text_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_HintText::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[20]);
}

// ===================================================================

class CCSUsrMsg_KeyHintText::_Internal {
 public:
};

CCSUsrMsg_KeyHintText::CCSUsrMsg_KeyHintText(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  hints_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_KeyHintText)
}
CCSUsrMsg_KeyHintText::CCSUsrMsg_KeyHintText(const CCSUsrMsg_KeyHintText& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      hints_(from.hints_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_KeyHintText)
}

void CCSUsrMsg_KeyHintText::SharedCtor() {
}

CCSUsrMsg_KeyHintText::~CCSUsrMsg_KeyHintText() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_KeyHintText)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCSUsrMsg_KeyHintText::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCSUsrMsg_KeyHintText::ArenaDtor(void* object) {
  CCSUsrMsg_KeyHintText* _this = reinterpret_cast< CCSUsrMsg_KeyHintText* >(object);
  (void)_this;
}
void CCSUsrMsg_KeyHintText::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCSUsrMsg_KeyHintText::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCSUsrMsg_KeyHintText::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_KeyHintText)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hints_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_KeyHintText::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string hints = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_hints();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCSUsrMsg_KeyHintText.hints");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCSUsrMsg_KeyHintText::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_KeyHintText)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string hints = 1;
  for (int i = 0, n = this->_internal_hints_size(); i < n; i++) {
    const auto& s = this->_internal_hints(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCSUsrMsg_KeyHintText.hints");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_KeyHintText)
  return target;
}

size_t CCSUsrMsg_KeyHintText::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_KeyHintText)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string hints = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(hints_.size());
  for (int i = 0, n = hints_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      hints_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_KeyHintText::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCSUsrMsg_KeyHintText::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_KeyHintText::GetClassData() const { return &_class_data_; }

void CCSUsrMsg_KeyHintText::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCSUsrMsg_KeyHintText *>(to)->MergeFrom(
      static_cast<const CCSUsrMsg_KeyHintText &>(from));
}


void CCSUsrMsg_KeyHintText::MergeFrom(const CCSUsrMsg_KeyHintText& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_KeyHintText)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hints_.MergeFrom(from.hints_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_KeyHintText::CopyFrom(const CCSUsrMsg_KeyHintText& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_KeyHintText)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_KeyHintText::IsInitialized() const {
  return true;
}

void CCSUsrMsg_KeyHintText::InternalSwap(CCSUsrMsg_KeyHintText* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  hints_.InternalSwap(&other->hints_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_KeyHintText::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[21]);
}

// ===================================================================

class CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate>()._has_bits_);
  static void set_has_entity_idx(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_class_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_origin_x(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_origin_y(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_origin_z(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_angle_y(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_defuser(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_player_has_defuser(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_player_has_c4(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate::CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_ProcessSpottedEntityUpdate.SpottedEntityUpdate)
}
CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate::CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate(const CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&entity_idx_, &from.entity_idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&player_has_c4_) -
    reinterpret_cast<char*>(&entity_idx_)) + sizeof(player_has_c4_));
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_ProcessSpottedEntityUpdate.SpottedEntityUpdate)
}

void CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&entity_idx_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&player_has_c4_) -
    reinterpret_cast<char*>(&entity_idx_)) + sizeof(player_has_c4_));
}

CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate::~CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_ProcessSpottedEntityUpdate.SpottedEntityUpdate)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate::ArenaDtor(void* object) {
  CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate* _this = reinterpret_cast< CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate* >(object);
  (void)_this;
}
void CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_ProcessSpottedEntityUpdate.SpottedEntityUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&entity_idx_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&player_has_defuser_) -
        reinterpret_cast<char*>(&entity_idx_)) + sizeof(player_has_defuser_));
  }
  player_has_c4_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 entity_idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_entity_idx(&has_bits);
          entity_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 class_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_class_id(&has_bits);
          class_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 origin_x = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_origin_x(&has_bits);
          origin_x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 origin_y = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_origin_y(&has_bits);
          origin_y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 origin_z = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_origin_z(&has_bits);
          origin_z_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 angle_y = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_angle_y(&has_bits);
          angle_y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool defuser = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_defuser(&has_bits);
          defuser_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool player_has_defuser = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_player_has_defuser(&has_bits);
          player_has_defuser_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool player_has_c4 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_player_has_c4(&has_bits);
          player_has_c4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_ProcessSpottedEntityUpdate.SpottedEntityUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 entity_idx = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_entity_idx(), target);
  }

  // optional int32 class_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_class_id(), target);
  }

  // optional int32 origin_x = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_origin_x(), target);
  }

  // optional int32 origin_y = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_origin_y(), target);
  }

  // optional int32 origin_z = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_origin_z(), target);
  }

  // optional int32 angle_y = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_angle_y(), target);
  }

  // optional bool defuser = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_defuser(), target);
  }

  // optional bool player_has_defuser = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_player_has_defuser(), target);
  }

  // optional bool player_has_c4 = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_player_has_c4(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_ProcessSpottedEntityUpdate.SpottedEntityUpdate)
  return target;
}

size_t CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_ProcessSpottedEntityUpdate.SpottedEntityUpdate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional int32 entity_idx = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_entity_idx());
    }

    // optional int32 class_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_class_id());
    }

    // optional int32 origin_x = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_origin_x());
    }

    // optional int32 origin_y = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_origin_y());
    }

    // optional int32 origin_z = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_origin_z());
    }

    // optional int32 angle_y = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_angle_y());
    }

    // optional bool defuser = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool player_has_defuser = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  // optional bool player_has_c4 = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate::GetClassData() const { return &_class_data_; }

void CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate *>(to)->MergeFrom(
      static_cast<const CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate &>(from));
}


void CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate::MergeFrom(const CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_ProcessSpottedEntityUpdate.SpottedEntityUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      entity_idx_ = from.entity_idx_;
    }
    if (cached_has_bits & 0x00000002u) {
      class_id_ = from.class_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      origin_x_ = from.origin_x_;
    }
    if (cached_has_bits & 0x00000008u) {
      origin_y_ = from.origin_y_;
    }
    if (cached_has_bits & 0x00000010u) {
      origin_z_ = from.origin_z_;
    }
    if (cached_has_bits & 0x00000020u) {
      angle_y_ = from.angle_y_;
    }
    if (cached_has_bits & 0x00000040u) {
      defuser_ = from.defuser_;
    }
    if (cached_has_bits & 0x00000080u) {
      player_has_defuser_ = from.player_has_defuser_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_player_has_c4(from._internal_player_has_c4());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate::CopyFrom(const CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_ProcessSpottedEntityUpdate.SpottedEntityUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate::IsInitialized() const {
  return true;
}

void CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate::InternalSwap(CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate, player_has_c4_)
      + sizeof(CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate::player_has_c4_)
      - PROTOBUF_FIELD_OFFSET(CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate, entity_idx_)>(
          reinterpret_cast<char*>(&entity_idx_),
          reinterpret_cast<char*>(&other->entity_idx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[22]);
}

// ===================================================================

class CCSUsrMsg_ProcessSpottedEntityUpdate::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_ProcessSpottedEntityUpdate>()._has_bits_);
  static void set_has_new_update(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCSUsrMsg_ProcessSpottedEntityUpdate::CCSUsrMsg_ProcessSpottedEntityUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  entity_updates_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_ProcessSpottedEntityUpdate)
}
CCSUsrMsg_ProcessSpottedEntityUpdate::CCSUsrMsg_ProcessSpottedEntityUpdate(const CCSUsrMsg_ProcessSpottedEntityUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      entity_updates_(from.entity_updates_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  new_update_ = from.new_update_;
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_ProcessSpottedEntityUpdate)
}

void CCSUsrMsg_ProcessSpottedEntityUpdate::SharedCtor() {
new_update_ = false;
}

CCSUsrMsg_ProcessSpottedEntityUpdate::~CCSUsrMsg_ProcessSpottedEntityUpdate() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_ProcessSpottedEntityUpdate)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCSUsrMsg_ProcessSpottedEntityUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCSUsrMsg_ProcessSpottedEntityUpdate::ArenaDtor(void* object) {
  CCSUsrMsg_ProcessSpottedEntityUpdate* _this = reinterpret_cast< CCSUsrMsg_ProcessSpottedEntityUpdate* >(object);
  (void)_this;
}
void CCSUsrMsg_ProcessSpottedEntityUpdate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCSUsrMsg_ProcessSpottedEntityUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCSUsrMsg_ProcessSpottedEntityUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_ProcessSpottedEntityUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entity_updates_.Clear();
  new_update_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_ProcessSpottedEntityUpdate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool new_update = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_new_update(&has_bits);
          new_update_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CCSUsrMsg_ProcessSpottedEntityUpdate.SpottedEntityUpdate entity_updates = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entity_updates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCSUsrMsg_ProcessSpottedEntityUpdate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_ProcessSpottedEntityUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool new_update = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_new_update(), target);
  }

  // repeated .CCSUsrMsg_ProcessSpottedEntityUpdate.SpottedEntityUpdate entity_updates = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_entity_updates_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_entity_updates(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_ProcessSpottedEntityUpdate)
  return target;
}

size_t CCSUsrMsg_ProcessSpottedEntityUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_ProcessSpottedEntityUpdate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CCSUsrMsg_ProcessSpottedEntityUpdate.SpottedEntityUpdate entity_updates = 2;
  total_size += 1UL * this->_internal_entity_updates_size();
  for (const auto& msg : this->entity_updates_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional bool new_update = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_ProcessSpottedEntityUpdate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCSUsrMsg_ProcessSpottedEntityUpdate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_ProcessSpottedEntityUpdate::GetClassData() const { return &_class_data_; }

void CCSUsrMsg_ProcessSpottedEntityUpdate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCSUsrMsg_ProcessSpottedEntityUpdate *>(to)->MergeFrom(
      static_cast<const CCSUsrMsg_ProcessSpottedEntityUpdate &>(from));
}


void CCSUsrMsg_ProcessSpottedEntityUpdate::MergeFrom(const CCSUsrMsg_ProcessSpottedEntityUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_ProcessSpottedEntityUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entity_updates_.MergeFrom(from.entity_updates_);
  if (from._internal_has_new_update()) {
    _internal_set_new_update(from._internal_new_update());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_ProcessSpottedEntityUpdate::CopyFrom(const CCSUsrMsg_ProcessSpottedEntityUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_ProcessSpottedEntityUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_ProcessSpottedEntityUpdate::IsInitialized() const {
  return true;
}

void CCSUsrMsg_ProcessSpottedEntityUpdate::InternalSwap(CCSUsrMsg_ProcessSpottedEntityUpdate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  entity_updates_.InternalSwap(&other->entity_updates_);
  swap(new_update_, other->new_update_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_ProcessSpottedEntityUpdate::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[23]);
}

// ===================================================================

class CCSUsrMsg_SendPlayerItemDrops::_Internal {
 public:
};

void CCSUsrMsg_SendPlayerItemDrops::clear_entity_updates() {
  entity_updates_.Clear();
}
CCSUsrMsg_SendPlayerItemDrops::CCSUsrMsg_SendPlayerItemDrops(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  entity_updates_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_SendPlayerItemDrops)
}
CCSUsrMsg_SendPlayerItemDrops::CCSUsrMsg_SendPlayerItemDrops(const CCSUsrMsg_SendPlayerItemDrops& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      entity_updates_(from.entity_updates_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_SendPlayerItemDrops)
}

void CCSUsrMsg_SendPlayerItemDrops::SharedCtor() {
}

CCSUsrMsg_SendPlayerItemDrops::~CCSUsrMsg_SendPlayerItemDrops() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_SendPlayerItemDrops)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCSUsrMsg_SendPlayerItemDrops::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCSUsrMsg_SendPlayerItemDrops::ArenaDtor(void* object) {
  CCSUsrMsg_SendPlayerItemDrops* _this = reinterpret_cast< CCSUsrMsg_SendPlayerItemDrops* >(object);
  (void)_this;
}
void CCSUsrMsg_SendPlayerItemDrops::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCSUsrMsg_SendPlayerItemDrops::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCSUsrMsg_SendPlayerItemDrops::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_SendPlayerItemDrops)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entity_updates_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_SendPlayerItemDrops::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CEconItemPreviewDataBlock entity_updates = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entity_updates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCSUsrMsg_SendPlayerItemDrops::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_SendPlayerItemDrops)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CEconItemPreviewDataBlock entity_updates = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_entity_updates_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_entity_updates(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_SendPlayerItemDrops)
  return target;
}

size_t CCSUsrMsg_SendPlayerItemDrops::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_SendPlayerItemDrops)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CEconItemPreviewDataBlock entity_updates = 1;
  total_size += 1UL * this->_internal_entity_updates_size();
  for (const auto& msg : this->entity_updates_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_SendPlayerItemDrops::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCSUsrMsg_SendPlayerItemDrops::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_SendPlayerItemDrops::GetClassData() const { return &_class_data_; }

void CCSUsrMsg_SendPlayerItemDrops::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCSUsrMsg_SendPlayerItemDrops *>(to)->MergeFrom(
      static_cast<const CCSUsrMsg_SendPlayerItemDrops &>(from));
}


void CCSUsrMsg_SendPlayerItemDrops::MergeFrom(const CCSUsrMsg_SendPlayerItemDrops& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_SendPlayerItemDrops)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entity_updates_.MergeFrom(from.entity_updates_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_SendPlayerItemDrops::CopyFrom(const CCSUsrMsg_SendPlayerItemDrops& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_SendPlayerItemDrops)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_SendPlayerItemDrops::IsInitialized() const {
  return true;
}

void CCSUsrMsg_SendPlayerItemDrops::InternalSwap(CCSUsrMsg_SendPlayerItemDrops* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  entity_updates_.InternalSwap(&other->entity_updates_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_SendPlayerItemDrops::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[24]);
}

// ===================================================================

class CCSUsrMsg_SendPlayerItemFound::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_SendPlayerItemFound>()._has_bits_);
  static const ::CEconItemPreviewDataBlock& iteminfo(const CCSUsrMsg_SendPlayerItemFound* msg);
  static void set_has_iteminfo(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_entindex(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::CEconItemPreviewDataBlock&
CCSUsrMsg_SendPlayerItemFound::_Internal::iteminfo(const CCSUsrMsg_SendPlayerItemFound* msg) {
  return *msg->iteminfo_;
}
void CCSUsrMsg_SendPlayerItemFound::clear_iteminfo() {
  if (iteminfo_ != nullptr) iteminfo_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
CCSUsrMsg_SendPlayerItemFound::CCSUsrMsg_SendPlayerItemFound(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_SendPlayerItemFound)
}
CCSUsrMsg_SendPlayerItemFound::CCSUsrMsg_SendPlayerItemFound(const CCSUsrMsg_SendPlayerItemFound& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_iteminfo()) {
    iteminfo_ = new ::CEconItemPreviewDataBlock(*from.iteminfo_);
  } else {
    iteminfo_ = nullptr;
  }
  entindex_ = from.entindex_;
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_SendPlayerItemFound)
}

void CCSUsrMsg_SendPlayerItemFound::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&iteminfo_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&entindex_) -
    reinterpret_cast<char*>(&iteminfo_)) + sizeof(entindex_));
}

CCSUsrMsg_SendPlayerItemFound::~CCSUsrMsg_SendPlayerItemFound() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_SendPlayerItemFound)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCSUsrMsg_SendPlayerItemFound::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete iteminfo_;
}

void CCSUsrMsg_SendPlayerItemFound::ArenaDtor(void* object) {
  CCSUsrMsg_SendPlayerItemFound* _this = reinterpret_cast< CCSUsrMsg_SendPlayerItemFound* >(object);
  (void)_this;
}
void CCSUsrMsg_SendPlayerItemFound::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCSUsrMsg_SendPlayerItemFound::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCSUsrMsg_SendPlayerItemFound::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_SendPlayerItemFound)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(iteminfo_ != nullptr);
    iteminfo_->Clear();
  }
  entindex_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_SendPlayerItemFound::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CEconItemPreviewDataBlock iteminfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_iteminfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 entindex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_entindex(&has_bits);
          entindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCSUsrMsg_SendPlayerItemFound::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_SendPlayerItemFound)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CEconItemPreviewDataBlock iteminfo = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::iteminfo(this), target, stream);
  }

  // optional int32 entindex = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_entindex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_SendPlayerItemFound)
  return target;
}

size_t CCSUsrMsg_SendPlayerItemFound::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_SendPlayerItemFound)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CEconItemPreviewDataBlock iteminfo = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *iteminfo_);
    }

    // optional int32 entindex = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_entindex());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_SendPlayerItemFound::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCSUsrMsg_SendPlayerItemFound::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_SendPlayerItemFound::GetClassData() const { return &_class_data_; }

void CCSUsrMsg_SendPlayerItemFound::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCSUsrMsg_SendPlayerItemFound *>(to)->MergeFrom(
      static_cast<const CCSUsrMsg_SendPlayerItemFound &>(from));
}


void CCSUsrMsg_SendPlayerItemFound::MergeFrom(const CCSUsrMsg_SendPlayerItemFound& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_SendPlayerItemFound)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_iteminfo()->::CEconItemPreviewDataBlock::MergeFrom(from._internal_iteminfo());
    }
    if (cached_has_bits & 0x00000002u) {
      entindex_ = from.entindex_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_SendPlayerItemFound::CopyFrom(const CCSUsrMsg_SendPlayerItemFound& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_SendPlayerItemFound)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_SendPlayerItemFound::IsInitialized() const {
  return true;
}

void CCSUsrMsg_SendPlayerItemFound::InternalSwap(CCSUsrMsg_SendPlayerItemFound* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCSUsrMsg_SendPlayerItemFound, entindex_)
      + sizeof(CCSUsrMsg_SendPlayerItemFound::entindex_)
      - PROTOBUF_FIELD_OFFSET(CCSUsrMsg_SendPlayerItemFound, iteminfo_)>(
          reinterpret_cast<char*>(&iteminfo_),
          reinterpret_cast<char*>(&other->iteminfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_SendPlayerItemFound::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[25]);
}

// ===================================================================

class CCSUsrMsg_ReloadEffect::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_ReloadEffect>()._has_bits_);
  static void set_has_entidx(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_actanim(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_origin_x(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_origin_y(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_origin_z(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CCSUsrMsg_ReloadEffect::CCSUsrMsg_ReloadEffect(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_ReloadEffect)
}
CCSUsrMsg_ReloadEffect::CCSUsrMsg_ReloadEffect(const CCSUsrMsg_ReloadEffect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&entidx_, &from.entidx_,
    static_cast<size_t>(reinterpret_cast<char*>(&origin_z_) -
    reinterpret_cast<char*>(&entidx_)) + sizeof(origin_z_));
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_ReloadEffect)
}

void CCSUsrMsg_ReloadEffect::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&entidx_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&origin_z_) -
    reinterpret_cast<char*>(&entidx_)) + sizeof(origin_z_));
}

CCSUsrMsg_ReloadEffect::~CCSUsrMsg_ReloadEffect() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_ReloadEffect)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCSUsrMsg_ReloadEffect::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCSUsrMsg_ReloadEffect::ArenaDtor(void* object) {
  CCSUsrMsg_ReloadEffect* _this = reinterpret_cast< CCSUsrMsg_ReloadEffect* >(object);
  (void)_this;
}
void CCSUsrMsg_ReloadEffect::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCSUsrMsg_ReloadEffect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCSUsrMsg_ReloadEffect::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_ReloadEffect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&entidx_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&origin_z_) -
        reinterpret_cast<char*>(&entidx_)) + sizeof(origin_z_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_ReloadEffect::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 entidx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_entidx(&has_bits);
          entidx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 actanim = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_actanim(&has_bits);
          actanim_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float origin_x = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_origin_x(&has_bits);
          origin_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float origin_y = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_origin_y(&has_bits);
          origin_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float origin_z = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_origin_z(&has_bits);
          origin_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCSUsrMsg_ReloadEffect::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_ReloadEffect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 entidx = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_entidx(), target);
  }

  // optional int32 actanim = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_actanim(), target);
  }

  // optional float origin_x = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_origin_x(), target);
  }

  // optional float origin_y = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_origin_y(), target);
  }

  // optional float origin_z = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_origin_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_ReloadEffect)
  return target;
}

size_t CCSUsrMsg_ReloadEffect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_ReloadEffect)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional int32 entidx = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_entidx());
    }

    // optional int32 actanim = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_actanim());
    }

    // optional float origin_x = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float origin_y = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float origin_z = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_ReloadEffect::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCSUsrMsg_ReloadEffect::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_ReloadEffect::GetClassData() const { return &_class_data_; }

void CCSUsrMsg_ReloadEffect::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCSUsrMsg_ReloadEffect *>(to)->MergeFrom(
      static_cast<const CCSUsrMsg_ReloadEffect &>(from));
}


void CCSUsrMsg_ReloadEffect::MergeFrom(const CCSUsrMsg_ReloadEffect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_ReloadEffect)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      entidx_ = from.entidx_;
    }
    if (cached_has_bits & 0x00000002u) {
      actanim_ = from.actanim_;
    }
    if (cached_has_bits & 0x00000004u) {
      origin_x_ = from.origin_x_;
    }
    if (cached_has_bits & 0x00000008u) {
      origin_y_ = from.origin_y_;
    }
    if (cached_has_bits & 0x00000010u) {
      origin_z_ = from.origin_z_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_ReloadEffect::CopyFrom(const CCSUsrMsg_ReloadEffect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_ReloadEffect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_ReloadEffect::IsInitialized() const {
  return true;
}

void CCSUsrMsg_ReloadEffect::InternalSwap(CCSUsrMsg_ReloadEffect* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCSUsrMsg_ReloadEffect, origin_z_)
      + sizeof(CCSUsrMsg_ReloadEffect::origin_z_)
      - PROTOBUF_FIELD_OFFSET(CCSUsrMsg_ReloadEffect, entidx_)>(
          reinterpret_cast<char*>(&entidx_),
          reinterpret_cast<char*>(&other->entidx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_ReloadEffect::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[26]);
}

// ===================================================================

class CCSUsrMsg_AdjustMoney::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_AdjustMoney>()._has_bits_);
  static void set_has_amount(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCSUsrMsg_AdjustMoney::CCSUsrMsg_AdjustMoney(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_AdjustMoney)
}
CCSUsrMsg_AdjustMoney::CCSUsrMsg_AdjustMoney(const CCSUsrMsg_AdjustMoney& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  amount_ = from.amount_;
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_AdjustMoney)
}

void CCSUsrMsg_AdjustMoney::SharedCtor() {
amount_ = 0;
}

CCSUsrMsg_AdjustMoney::~CCSUsrMsg_AdjustMoney() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_AdjustMoney)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCSUsrMsg_AdjustMoney::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCSUsrMsg_AdjustMoney::ArenaDtor(void* object) {
  CCSUsrMsg_AdjustMoney* _this = reinterpret_cast< CCSUsrMsg_AdjustMoney* >(object);
  (void)_this;
}
void CCSUsrMsg_AdjustMoney::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCSUsrMsg_AdjustMoney::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCSUsrMsg_AdjustMoney::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_AdjustMoney)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  amount_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_AdjustMoney::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 amount = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_amount(&has_bits);
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCSUsrMsg_AdjustMoney::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_AdjustMoney)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 amount = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_AdjustMoney)
  return target;
}

size_t CCSUsrMsg_AdjustMoney::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_AdjustMoney)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 amount = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_amount());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_AdjustMoney::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCSUsrMsg_AdjustMoney::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_AdjustMoney::GetClassData() const { return &_class_data_; }

void CCSUsrMsg_AdjustMoney::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCSUsrMsg_AdjustMoney *>(to)->MergeFrom(
      static_cast<const CCSUsrMsg_AdjustMoney &>(from));
}


void CCSUsrMsg_AdjustMoney::MergeFrom(const CCSUsrMsg_AdjustMoney& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_AdjustMoney)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_amount()) {
    _internal_set_amount(from._internal_amount());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_AdjustMoney::CopyFrom(const CCSUsrMsg_AdjustMoney& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_AdjustMoney)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_AdjustMoney::IsInitialized() const {
  return true;
}

void CCSUsrMsg_AdjustMoney::InternalSwap(CCSUsrMsg_AdjustMoney* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(amount_, other->amount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_AdjustMoney::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[27]);
}

// ===================================================================

class CCSUsrMsg_ReportHit::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_ReportHit>()._has_bits_);
  static void set_has_pos_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pos_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_pos_z(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CCSUsrMsg_ReportHit::CCSUsrMsg_ReportHit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_ReportHit)
}
CCSUsrMsg_ReportHit::CCSUsrMsg_ReportHit(const CCSUsrMsg_ReportHit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&pos_x_, &from.pos_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&pos_x_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_ReportHit)
}

void CCSUsrMsg_ReportHit::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pos_x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&pos_x_)) + sizeof(timestamp_));
}

CCSUsrMsg_ReportHit::~CCSUsrMsg_ReportHit() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_ReportHit)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCSUsrMsg_ReportHit::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCSUsrMsg_ReportHit::ArenaDtor(void* object) {
  CCSUsrMsg_ReportHit* _this = reinterpret_cast< CCSUsrMsg_ReportHit* >(object);
  (void)_this;
}
void CCSUsrMsg_ReportHit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCSUsrMsg_ReportHit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCSUsrMsg_ReportHit::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_ReportHit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&pos_x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timestamp_) -
        reinterpret_cast<char*>(&pos_x_)) + sizeof(timestamp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_ReportHit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float pos_x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_pos_x(&has_bits);
          pos_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float pos_y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_pos_y(&has_bits);
          pos_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float pos_z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_pos_z(&has_bits);
          pos_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCSUsrMsg_ReportHit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_ReportHit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float pos_x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_pos_x(), target);
  }

  // optional float pos_y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_pos_y(), target);
  }

  // optional float pos_z = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_pos_z(), target);
  }

  // optional float timestamp = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_ReportHit)
  return target;
}

size_t CCSUsrMsg_ReportHit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_ReportHit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional float pos_x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float pos_y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float pos_z = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float timestamp = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_ReportHit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCSUsrMsg_ReportHit::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_ReportHit::GetClassData() const { return &_class_data_; }

void CCSUsrMsg_ReportHit::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCSUsrMsg_ReportHit *>(to)->MergeFrom(
      static_cast<const CCSUsrMsg_ReportHit &>(from));
}


void CCSUsrMsg_ReportHit::MergeFrom(const CCSUsrMsg_ReportHit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_ReportHit)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      pos_x_ = from.pos_x_;
    }
    if (cached_has_bits & 0x00000002u) {
      pos_y_ = from.pos_y_;
    }
    if (cached_has_bits & 0x00000004u) {
      pos_z_ = from.pos_z_;
    }
    if (cached_has_bits & 0x00000008u) {
      timestamp_ = from.timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_ReportHit::CopyFrom(const CCSUsrMsg_ReportHit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_ReportHit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_ReportHit::IsInitialized() const {
  return true;
}

void CCSUsrMsg_ReportHit::InternalSwap(CCSUsrMsg_ReportHit* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCSUsrMsg_ReportHit, timestamp_)
      + sizeof(CCSUsrMsg_ReportHit::timestamp_)
      - PROTOBUF_FIELD_OFFSET(CCSUsrMsg_ReportHit, pos_x_)>(
          reinterpret_cast<char*>(&pos_x_),
          reinterpret_cast<char*>(&other->pos_x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_ReportHit::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[28]);
}

// ===================================================================

class CCSUsrMsg_KillCam::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_KillCam>()._has_bits_);
  static void set_has_obs_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_first_target(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_second_target(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CCSUsrMsg_KillCam::CCSUsrMsg_KillCam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_KillCam)
}
CCSUsrMsg_KillCam::CCSUsrMsg_KillCam(const CCSUsrMsg_KillCam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&obs_mode_, &from.obs_mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&second_target_) -
    reinterpret_cast<char*>(&obs_mode_)) + sizeof(second_target_));
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_KillCam)
}

void CCSUsrMsg_KillCam::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&obs_mode_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&second_target_) -
    reinterpret_cast<char*>(&obs_mode_)) + sizeof(second_target_));
}

CCSUsrMsg_KillCam::~CCSUsrMsg_KillCam() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_KillCam)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCSUsrMsg_KillCam::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCSUsrMsg_KillCam::ArenaDtor(void* object) {
  CCSUsrMsg_KillCam* _this = reinterpret_cast< CCSUsrMsg_KillCam* >(object);
  (void)_this;
}
void CCSUsrMsg_KillCam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCSUsrMsg_KillCam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCSUsrMsg_KillCam::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_KillCam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&obs_mode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&second_target_) -
        reinterpret_cast<char*>(&obs_mode_)) + sizeof(second_target_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_KillCam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 obs_mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_obs_mode(&has_bits);
          obs_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 first_target = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_first_target(&has_bits);
          first_target_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 second_target = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_second_target(&has_bits);
          second_target_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCSUsrMsg_KillCam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_KillCam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 obs_mode = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_obs_mode(), target);
  }

  // optional int32 first_target = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_first_target(), target);
  }

  // optional int32 second_target = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_second_target(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_KillCam)
  return target;
}

size_t CCSUsrMsg_KillCam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_KillCam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 obs_mode = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_obs_mode());
    }

    // optional int32 first_target = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_first_target());
    }

    // optional int32 second_target = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_second_target());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_KillCam::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCSUsrMsg_KillCam::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_KillCam::GetClassData() const { return &_class_data_; }

void CCSUsrMsg_KillCam::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCSUsrMsg_KillCam *>(to)->MergeFrom(
      static_cast<const CCSUsrMsg_KillCam &>(from));
}


void CCSUsrMsg_KillCam::MergeFrom(const CCSUsrMsg_KillCam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_KillCam)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      obs_mode_ = from.obs_mode_;
    }
    if (cached_has_bits & 0x00000002u) {
      first_target_ = from.first_target_;
    }
    if (cached_has_bits & 0x00000004u) {
      second_target_ = from.second_target_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_KillCam::CopyFrom(const CCSUsrMsg_KillCam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_KillCam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_KillCam::IsInitialized() const {
  return true;
}

void CCSUsrMsg_KillCam::InternalSwap(CCSUsrMsg_KillCam* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCSUsrMsg_KillCam, second_target_)
      + sizeof(CCSUsrMsg_KillCam::second_target_)
      - PROTOBUF_FIELD_OFFSET(CCSUsrMsg_KillCam, obs_mode_)>(
          reinterpret_cast<char*>(&obs_mode_),
          reinterpret_cast<char*>(&other->obs_mode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_KillCam::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[29]);
}

// ===================================================================

class CCSUsrMsg_DesiredTimescale::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_DesiredTimescale>()._has_bits_);
  static void set_has_desired_timescale(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_duration_realtime_sec(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_interpolator_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_start_blend_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CCSUsrMsg_DesiredTimescale::CCSUsrMsg_DesiredTimescale(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_DesiredTimescale)
}
CCSUsrMsg_DesiredTimescale::CCSUsrMsg_DesiredTimescale(const CCSUsrMsg_DesiredTimescale& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&desired_timescale_, &from.desired_timescale_,
    static_cast<size_t>(reinterpret_cast<char*>(&start_blend_time_) -
    reinterpret_cast<char*>(&desired_timescale_)) + sizeof(start_blend_time_));
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_DesiredTimescale)
}

void CCSUsrMsg_DesiredTimescale::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&desired_timescale_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&start_blend_time_) -
    reinterpret_cast<char*>(&desired_timescale_)) + sizeof(start_blend_time_));
}

CCSUsrMsg_DesiredTimescale::~CCSUsrMsg_DesiredTimescale() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_DesiredTimescale)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCSUsrMsg_DesiredTimescale::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCSUsrMsg_DesiredTimescale::ArenaDtor(void* object) {
  CCSUsrMsg_DesiredTimescale* _this = reinterpret_cast< CCSUsrMsg_DesiredTimescale* >(object);
  (void)_this;
}
void CCSUsrMsg_DesiredTimescale::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCSUsrMsg_DesiredTimescale::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCSUsrMsg_DesiredTimescale::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_DesiredTimescale)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&desired_timescale_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&start_blend_time_) -
        reinterpret_cast<char*>(&desired_timescale_)) + sizeof(start_blend_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_DesiredTimescale::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float desired_timescale = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_desired_timescale(&has_bits);
          desired_timescale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float duration_realtime_sec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_duration_realtime_sec(&has_bits);
          duration_realtime_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional int32 interpolator_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_interpolator_type(&has_bits);
          interpolator_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float start_blend_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_start_blend_time(&has_bits);
          start_blend_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCSUsrMsg_DesiredTimescale::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_DesiredTimescale)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float desired_timescale = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_desired_timescale(), target);
  }

  // optional float duration_realtime_sec = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_duration_realtime_sec(), target);
  }

  // optional int32 interpolator_type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_interpolator_type(), target);
  }

  // optional float start_blend_time = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_start_blend_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_DesiredTimescale)
  return target;
}

size_t CCSUsrMsg_DesiredTimescale::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_DesiredTimescale)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional float desired_timescale = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float duration_realtime_sec = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional int32 interpolator_type = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_interpolator_type());
    }

    // optional float start_blend_time = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_DesiredTimescale::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCSUsrMsg_DesiredTimescale::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_DesiredTimescale::GetClassData() const { return &_class_data_; }

void CCSUsrMsg_DesiredTimescale::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCSUsrMsg_DesiredTimescale *>(to)->MergeFrom(
      static_cast<const CCSUsrMsg_DesiredTimescale &>(from));
}


void CCSUsrMsg_DesiredTimescale::MergeFrom(const CCSUsrMsg_DesiredTimescale& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_DesiredTimescale)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      desired_timescale_ = from.desired_timescale_;
    }
    if (cached_has_bits & 0x00000002u) {
      duration_realtime_sec_ = from.duration_realtime_sec_;
    }
    if (cached_has_bits & 0x00000004u) {
      interpolator_type_ = from.interpolator_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      start_blend_time_ = from.start_blend_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_DesiredTimescale::CopyFrom(const CCSUsrMsg_DesiredTimescale& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_DesiredTimescale)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_DesiredTimescale::IsInitialized() const {
  return true;
}

void CCSUsrMsg_DesiredTimescale::InternalSwap(CCSUsrMsg_DesiredTimescale* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCSUsrMsg_DesiredTimescale, start_blend_time_)
      + sizeof(CCSUsrMsg_DesiredTimescale::start_blend_time_)
      - PROTOBUF_FIELD_OFFSET(CCSUsrMsg_DesiredTimescale, desired_timescale_)>(
          reinterpret_cast<char*>(&desired_timescale_),
          reinterpret_cast<char*>(&other->desired_timescale_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_DesiredTimescale::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[30]);
}

// ===================================================================

class CCSUsrMsg_CurrentTimescale::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_CurrentTimescale>()._has_bits_);
  static void set_has_cur_timescale(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCSUsrMsg_CurrentTimescale::CCSUsrMsg_CurrentTimescale(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_CurrentTimescale)
}
CCSUsrMsg_CurrentTimescale::CCSUsrMsg_CurrentTimescale(const CCSUsrMsg_CurrentTimescale& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  cur_timescale_ = from.cur_timescale_;
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_CurrentTimescale)
}

void CCSUsrMsg_CurrentTimescale::SharedCtor() {
cur_timescale_ = 0;
}

CCSUsrMsg_CurrentTimescale::~CCSUsrMsg_CurrentTimescale() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_CurrentTimescale)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCSUsrMsg_CurrentTimescale::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCSUsrMsg_CurrentTimescale::ArenaDtor(void* object) {
  CCSUsrMsg_CurrentTimescale* _this = reinterpret_cast< CCSUsrMsg_CurrentTimescale* >(object);
  (void)_this;
}
void CCSUsrMsg_CurrentTimescale::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCSUsrMsg_CurrentTimescale::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCSUsrMsg_CurrentTimescale::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_CurrentTimescale)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cur_timescale_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_CurrentTimescale::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float cur_timescale = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_cur_timescale(&has_bits);
          cur_timescale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCSUsrMsg_CurrentTimescale::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_CurrentTimescale)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float cur_timescale = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_cur_timescale(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_CurrentTimescale)
  return target;
}

size_t CCSUsrMsg_CurrentTimescale::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_CurrentTimescale)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional float cur_timescale = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_CurrentTimescale::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCSUsrMsg_CurrentTimescale::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_CurrentTimescale::GetClassData() const { return &_class_data_; }

void CCSUsrMsg_CurrentTimescale::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCSUsrMsg_CurrentTimescale *>(to)->MergeFrom(
      static_cast<const CCSUsrMsg_CurrentTimescale &>(from));
}


void CCSUsrMsg_CurrentTimescale::MergeFrom(const CCSUsrMsg_CurrentTimescale& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_CurrentTimescale)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_cur_timescale()) {
    _internal_set_cur_timescale(from._internal_cur_timescale());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_CurrentTimescale::CopyFrom(const CCSUsrMsg_CurrentTimescale& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_CurrentTimescale)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_CurrentTimescale::IsInitialized() const {
  return true;
}

void CCSUsrMsg_CurrentTimescale::InternalSwap(CCSUsrMsg_CurrentTimescale* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(cur_timescale_, other->cur_timescale_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_CurrentTimescale::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[31]);
}

// ===================================================================

class CCSUsrMsg_AchievementEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_AchievementEvent>()._has_bits_);
  static void set_has_achievement(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CCSUsrMsg_AchievementEvent::CCSUsrMsg_AchievementEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_AchievementEvent)
}
CCSUsrMsg_AchievementEvent::CCSUsrMsg_AchievementEvent(const CCSUsrMsg_AchievementEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&achievement_, &from.achievement_,
    static_cast<size_t>(reinterpret_cast<char*>(&user_id_) -
    reinterpret_cast<char*>(&achievement_)) + sizeof(user_id_));
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_AchievementEvent)
}

void CCSUsrMsg_AchievementEvent::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&achievement_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&user_id_) -
    reinterpret_cast<char*>(&achievement_)) + sizeof(user_id_));
}

CCSUsrMsg_AchievementEvent::~CCSUsrMsg_AchievementEvent() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_AchievementEvent)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCSUsrMsg_AchievementEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCSUsrMsg_AchievementEvent::ArenaDtor(void* object) {
  CCSUsrMsg_AchievementEvent* _this = reinterpret_cast< CCSUsrMsg_AchievementEvent* >(object);
  (void)_this;
}
void CCSUsrMsg_AchievementEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCSUsrMsg_AchievementEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCSUsrMsg_AchievementEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_AchievementEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&achievement_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&user_id_) -
        reinterpret_cast<char*>(&achievement_)) + sizeof(user_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_AchievementEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 achievement = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_achievement(&has_bits);
          achievement_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_count(&has_bits);
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 user_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_user_id(&has_bits);
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCSUsrMsg_AchievementEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_AchievementEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 achievement = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_achievement(), target);
  }

  // optional int32 count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  // optional int32 user_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_AchievementEvent)
  return target;
}

size_t CCSUsrMsg_AchievementEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_AchievementEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 achievement = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_achievement());
    }

    // optional int32 count = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_count());
    }

    // optional int32 user_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_user_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_AchievementEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCSUsrMsg_AchievementEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_AchievementEvent::GetClassData() const { return &_class_data_; }

void CCSUsrMsg_AchievementEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCSUsrMsg_AchievementEvent *>(to)->MergeFrom(
      static_cast<const CCSUsrMsg_AchievementEvent &>(from));
}


void CCSUsrMsg_AchievementEvent::MergeFrom(const CCSUsrMsg_AchievementEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_AchievementEvent)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      achievement_ = from.achievement_;
    }
    if (cached_has_bits & 0x00000002u) {
      count_ = from.count_;
    }
    if (cached_has_bits & 0x00000004u) {
      user_id_ = from.user_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_AchievementEvent::CopyFrom(const CCSUsrMsg_AchievementEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_AchievementEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_AchievementEvent::IsInitialized() const {
  return true;
}

void CCSUsrMsg_AchievementEvent::InternalSwap(CCSUsrMsg_AchievementEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCSUsrMsg_AchievementEvent, user_id_)
      + sizeof(CCSUsrMsg_AchievementEvent::user_id_)
      - PROTOBUF_FIELD_OFFSET(CCSUsrMsg_AchievementEvent, achievement_)>(
          reinterpret_cast<char*>(&achievement_),
          reinterpret_cast<char*>(&other->achievement_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_AchievementEvent::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[32]);
}

// ===================================================================

class CCSUsrMsg_MatchEndConditions::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_MatchEndConditions>()._has_bits_);
  static void set_has_fraglimit(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mp_maxrounds(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mp_winlimit(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_mp_timelimit(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CCSUsrMsg_MatchEndConditions::CCSUsrMsg_MatchEndConditions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_MatchEndConditions)
}
CCSUsrMsg_MatchEndConditions::CCSUsrMsg_MatchEndConditions(const CCSUsrMsg_MatchEndConditions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&fraglimit_, &from.fraglimit_,
    static_cast<size_t>(reinterpret_cast<char*>(&mp_timelimit_) -
    reinterpret_cast<char*>(&fraglimit_)) + sizeof(mp_timelimit_));
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_MatchEndConditions)
}

void CCSUsrMsg_MatchEndConditions::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&fraglimit_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&mp_timelimit_) -
    reinterpret_cast<char*>(&fraglimit_)) + sizeof(mp_timelimit_));
}

CCSUsrMsg_MatchEndConditions::~CCSUsrMsg_MatchEndConditions() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_MatchEndConditions)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCSUsrMsg_MatchEndConditions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCSUsrMsg_MatchEndConditions::ArenaDtor(void* object) {
  CCSUsrMsg_MatchEndConditions* _this = reinterpret_cast< CCSUsrMsg_MatchEndConditions* >(object);
  (void)_this;
}
void CCSUsrMsg_MatchEndConditions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCSUsrMsg_MatchEndConditions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCSUsrMsg_MatchEndConditions::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_MatchEndConditions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&fraglimit_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mp_timelimit_) -
        reinterpret_cast<char*>(&fraglimit_)) + sizeof(mp_timelimit_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_MatchEndConditions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 fraglimit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_fraglimit(&has_bits);
          fraglimit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 mp_maxrounds = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_mp_maxrounds(&has_bits);
          mp_maxrounds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 mp_winlimit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_mp_winlimit(&has_bits);
          mp_winlimit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 mp_timelimit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_mp_timelimit(&has_bits);
          mp_timelimit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCSUsrMsg_MatchEndConditions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_MatchEndConditions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 fraglimit = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_fraglimit(), target);
  }

  // optional int32 mp_maxrounds = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_mp_maxrounds(), target);
  }

  // optional int32 mp_winlimit = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_mp_winlimit(), target);
  }

  // optional int32 mp_timelimit = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_mp_timelimit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_MatchEndConditions)
  return target;
}

size_t CCSUsrMsg_MatchEndConditions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_MatchEndConditions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int32 fraglimit = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_fraglimit());
    }

    // optional int32 mp_maxrounds = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_mp_maxrounds());
    }

    // optional int32 mp_winlimit = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_mp_winlimit());
    }

    // optional int32 mp_timelimit = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_mp_timelimit());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_MatchEndConditions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCSUsrMsg_MatchEndConditions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_MatchEndConditions::GetClassData() const { return &_class_data_; }

void CCSUsrMsg_MatchEndConditions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCSUsrMsg_MatchEndConditions *>(to)->MergeFrom(
      static_cast<const CCSUsrMsg_MatchEndConditions &>(from));
}


void CCSUsrMsg_MatchEndConditions::MergeFrom(const CCSUsrMsg_MatchEndConditions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_MatchEndConditions)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      fraglimit_ = from.fraglimit_;
    }
    if (cached_has_bits & 0x00000002u) {
      mp_maxrounds_ = from.mp_maxrounds_;
    }
    if (cached_has_bits & 0x00000004u) {
      mp_winlimit_ = from.mp_winlimit_;
    }
    if (cached_has_bits & 0x00000008u) {
      mp_timelimit_ = from.mp_timelimit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_MatchEndConditions::CopyFrom(const CCSUsrMsg_MatchEndConditions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_MatchEndConditions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_MatchEndConditions::IsInitialized() const {
  return true;
}

void CCSUsrMsg_MatchEndConditions::InternalSwap(CCSUsrMsg_MatchEndConditions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCSUsrMsg_MatchEndConditions, mp_timelimit_)
      + sizeof(CCSUsrMsg_MatchEndConditions::mp_timelimit_)
      - PROTOBUF_FIELD_OFFSET(CCSUsrMsg_MatchEndConditions, fraglimit_)>(
          reinterpret_cast<char*>(&fraglimit_),
          reinterpret_cast<char*>(&other->fraglimit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_MatchEndConditions::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[33]);
}

// ===================================================================

class CCSUsrMsg_PlayerStatsUpdate_Stat::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_PlayerStatsUpdate_Stat>()._has_bits_);
  static void set_has_idx(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_delta(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CCSUsrMsg_PlayerStatsUpdate_Stat::CCSUsrMsg_PlayerStatsUpdate_Stat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_PlayerStatsUpdate.Stat)
}
CCSUsrMsg_PlayerStatsUpdate_Stat::CCSUsrMsg_PlayerStatsUpdate_Stat(const CCSUsrMsg_PlayerStatsUpdate_Stat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&idx_, &from.idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&delta_) -
    reinterpret_cast<char*>(&idx_)) + sizeof(delta_));
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_PlayerStatsUpdate.Stat)
}

void CCSUsrMsg_PlayerStatsUpdate_Stat::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&idx_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&delta_) -
    reinterpret_cast<char*>(&idx_)) + sizeof(delta_));
}

CCSUsrMsg_PlayerStatsUpdate_Stat::~CCSUsrMsg_PlayerStatsUpdate_Stat() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_PlayerStatsUpdate.Stat)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCSUsrMsg_PlayerStatsUpdate_Stat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCSUsrMsg_PlayerStatsUpdate_Stat::ArenaDtor(void* object) {
  CCSUsrMsg_PlayerStatsUpdate_Stat* _this = reinterpret_cast< CCSUsrMsg_PlayerStatsUpdate_Stat* >(object);
  (void)_this;
}
void CCSUsrMsg_PlayerStatsUpdate_Stat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCSUsrMsg_PlayerStatsUpdate_Stat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCSUsrMsg_PlayerStatsUpdate_Stat::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_PlayerStatsUpdate.Stat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&idx_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&delta_) -
        reinterpret_cast<char*>(&idx_)) + sizeof(delta_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_PlayerStatsUpdate_Stat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_idx(&has_bits);
          idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 delta = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_delta(&has_bits);
          delta_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCSUsrMsg_PlayerStatsUpdate_Stat::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_PlayerStatsUpdate.Stat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 idx = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_idx(), target);
  }

  // optional int32 delta = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_delta(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_PlayerStatsUpdate.Stat)
  return target;
}

size_t CCSUsrMsg_PlayerStatsUpdate_Stat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_PlayerStatsUpdate.Stat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 idx = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_idx());
    }

    // optional int32 delta = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_delta());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_PlayerStatsUpdate_Stat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCSUsrMsg_PlayerStatsUpdate_Stat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_PlayerStatsUpdate_Stat::GetClassData() const { return &_class_data_; }

void CCSUsrMsg_PlayerStatsUpdate_Stat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCSUsrMsg_PlayerStatsUpdate_Stat *>(to)->MergeFrom(
      static_cast<const CCSUsrMsg_PlayerStatsUpdate_Stat &>(from));
}


void CCSUsrMsg_PlayerStatsUpdate_Stat::MergeFrom(const CCSUsrMsg_PlayerStatsUpdate_Stat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_PlayerStatsUpdate.Stat)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      idx_ = from.idx_;
    }
    if (cached_has_bits & 0x00000002u) {
      delta_ = from.delta_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_PlayerStatsUpdate_Stat::CopyFrom(const CCSUsrMsg_PlayerStatsUpdate_Stat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_PlayerStatsUpdate.Stat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_PlayerStatsUpdate_Stat::IsInitialized() const {
  return true;
}

void CCSUsrMsg_PlayerStatsUpdate_Stat::InternalSwap(CCSUsrMsg_PlayerStatsUpdate_Stat* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCSUsrMsg_PlayerStatsUpdate_Stat, delta_)
      + sizeof(CCSUsrMsg_PlayerStatsUpdate_Stat::delta_)
      - PROTOBUF_FIELD_OFFSET(CCSUsrMsg_PlayerStatsUpdate_Stat, idx_)>(
          reinterpret_cast<char*>(&idx_),
          reinterpret_cast<char*>(&other->idx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_PlayerStatsUpdate_Stat::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[34]);
}

// ===================================================================

class CCSUsrMsg_PlayerStatsUpdate::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_PlayerStatsUpdate>()._has_bits_);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_crc(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CCSUsrMsg_PlayerStatsUpdate::CCSUsrMsg_PlayerStatsUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  stats_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_PlayerStatsUpdate)
}
CCSUsrMsg_PlayerStatsUpdate::CCSUsrMsg_PlayerStatsUpdate(const CCSUsrMsg_PlayerStatsUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      stats_(from.stats_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&crc_) -
    reinterpret_cast<char*>(&version_)) + sizeof(crc_));
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_PlayerStatsUpdate)
}

void CCSUsrMsg_PlayerStatsUpdate::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&version_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&crc_) -
    reinterpret_cast<char*>(&version_)) + sizeof(crc_));
}

CCSUsrMsg_PlayerStatsUpdate::~CCSUsrMsg_PlayerStatsUpdate() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_PlayerStatsUpdate)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCSUsrMsg_PlayerStatsUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCSUsrMsg_PlayerStatsUpdate::ArenaDtor(void* object) {
  CCSUsrMsg_PlayerStatsUpdate* _this = reinterpret_cast< CCSUsrMsg_PlayerStatsUpdate* >(object);
  (void)_this;
}
void CCSUsrMsg_PlayerStatsUpdate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCSUsrMsg_PlayerStatsUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCSUsrMsg_PlayerStatsUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_PlayerStatsUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stats_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&crc_) -
        reinterpret_cast<char*>(&version_)) + sizeof(crc_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_PlayerStatsUpdate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_version(&has_bits);
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CCSUsrMsg_PlayerStatsUpdate.Stat stats = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional int32 user_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_user_id(&has_bits);
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 crc = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_crc(&has_bits);
          crc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCSUsrMsg_PlayerStatsUpdate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_PlayerStatsUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 version = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_version(), target);
  }

  // repeated .CCSUsrMsg_PlayerStatsUpdate.Stat stats = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stats_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_stats(i), target, stream);
  }

  // optional int32 user_id = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_user_id(), target);
  }

  // optional int32 crc = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_crc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_PlayerStatsUpdate)
  return target;
}

size_t CCSUsrMsg_PlayerStatsUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_PlayerStatsUpdate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CCSUsrMsg_PlayerStatsUpdate.Stat stats = 4;
  total_size += 1UL * this->_internal_stats_size();
  for (const auto& msg : this->stats_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 version = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_version());
    }

    // optional int32 user_id = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_user_id());
    }

    // optional int32 crc = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_crc());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_PlayerStatsUpdate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCSUsrMsg_PlayerStatsUpdate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_PlayerStatsUpdate::GetClassData() const { return &_class_data_; }

void CCSUsrMsg_PlayerStatsUpdate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCSUsrMsg_PlayerStatsUpdate *>(to)->MergeFrom(
      static_cast<const CCSUsrMsg_PlayerStatsUpdate &>(from));
}


void CCSUsrMsg_PlayerStatsUpdate::MergeFrom(const CCSUsrMsg_PlayerStatsUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_PlayerStatsUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stats_.MergeFrom(from.stats_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000002u) {
      user_id_ = from.user_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      crc_ = from.crc_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_PlayerStatsUpdate::CopyFrom(const CCSUsrMsg_PlayerStatsUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_PlayerStatsUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_PlayerStatsUpdate::IsInitialized() const {
  return true;
}

void CCSUsrMsg_PlayerStatsUpdate::InternalSwap(CCSUsrMsg_PlayerStatsUpdate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  stats_.InternalSwap(&other->stats_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCSUsrMsg_PlayerStatsUpdate, crc_)
      + sizeof(CCSUsrMsg_PlayerStatsUpdate::crc_)
      - PROTOBUF_FIELD_OFFSET(CCSUsrMsg_PlayerStatsUpdate, version_)>(
          reinterpret_cast<char*>(&version_),
          reinterpret_cast<char*>(&other->version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_PlayerStatsUpdate::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[35]);
}

// ===================================================================

class CCSUsrMsg_DisplayInventory::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_DisplayInventory>()._has_bits_);
  static void set_has_display(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CCSUsrMsg_DisplayInventory::CCSUsrMsg_DisplayInventory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_DisplayInventory)
}
CCSUsrMsg_DisplayInventory::CCSUsrMsg_DisplayInventory(const CCSUsrMsg_DisplayInventory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&display_, &from.display_,
    static_cast<size_t>(reinterpret_cast<char*>(&user_id_) -
    reinterpret_cast<char*>(&display_)) + sizeof(user_id_));
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_DisplayInventory)
}

void CCSUsrMsg_DisplayInventory::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&display_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&user_id_) -
    reinterpret_cast<char*>(&display_)) + sizeof(user_id_));
}

CCSUsrMsg_DisplayInventory::~CCSUsrMsg_DisplayInventory() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_DisplayInventory)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCSUsrMsg_DisplayInventory::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCSUsrMsg_DisplayInventory::ArenaDtor(void* object) {
  CCSUsrMsg_DisplayInventory* _this = reinterpret_cast< CCSUsrMsg_DisplayInventory* >(object);
  (void)_this;
}
void CCSUsrMsg_DisplayInventory::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCSUsrMsg_DisplayInventory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCSUsrMsg_DisplayInventory::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_DisplayInventory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&display_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&user_id_) -
        reinterpret_cast<char*>(&display_)) + sizeof(user_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_DisplayInventory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool display = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_display(&has_bits);
          display_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_user_id(&has_bits);
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCSUsrMsg_DisplayInventory::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_DisplayInventory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool display = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_display(), target);
  }

  // optional int32 user_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_DisplayInventory)
  return target;
}

size_t CCSUsrMsg_DisplayInventory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_DisplayInventory)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool display = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional int32 user_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_user_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_DisplayInventory::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCSUsrMsg_DisplayInventory::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_DisplayInventory::GetClassData() const { return &_class_data_; }

void CCSUsrMsg_DisplayInventory::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCSUsrMsg_DisplayInventory *>(to)->MergeFrom(
      static_cast<const CCSUsrMsg_DisplayInventory &>(from));
}


void CCSUsrMsg_DisplayInventory::MergeFrom(const CCSUsrMsg_DisplayInventory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_DisplayInventory)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      display_ = from.display_;
    }
    if (cached_has_bits & 0x00000002u) {
      user_id_ = from.user_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_DisplayInventory::CopyFrom(const CCSUsrMsg_DisplayInventory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_DisplayInventory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_DisplayInventory::IsInitialized() const {
  return true;
}

void CCSUsrMsg_DisplayInventory::InternalSwap(CCSUsrMsg_DisplayInventory* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCSUsrMsg_DisplayInventory, user_id_)
      + sizeof(CCSUsrMsg_DisplayInventory::user_id_)
      - PROTOBUF_FIELD_OFFSET(CCSUsrMsg_DisplayInventory, display_)>(
          reinterpret_cast<char*>(&display_),
          reinterpret_cast<char*>(&other->display_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_DisplayInventory::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[36]);
}

// ===================================================================

class CCSUsrMsg_QuestProgress::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_QuestProgress>()._has_bits_);
  static void set_has_quest_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_normal_points(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_bonus_points(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_event_quest(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CCSUsrMsg_QuestProgress::CCSUsrMsg_QuestProgress(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_QuestProgress)
}
CCSUsrMsg_QuestProgress::CCSUsrMsg_QuestProgress(const CCSUsrMsg_QuestProgress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&quest_id_, &from.quest_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_event_quest_) -
    reinterpret_cast<char*>(&quest_id_)) + sizeof(is_event_quest_));
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_QuestProgress)
}

void CCSUsrMsg_QuestProgress::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&quest_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_event_quest_) -
    reinterpret_cast<char*>(&quest_id_)) + sizeof(is_event_quest_));
}

CCSUsrMsg_QuestProgress::~CCSUsrMsg_QuestProgress() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_QuestProgress)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCSUsrMsg_QuestProgress::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCSUsrMsg_QuestProgress::ArenaDtor(void* object) {
  CCSUsrMsg_QuestProgress* _this = reinterpret_cast< CCSUsrMsg_QuestProgress* >(object);
  (void)_this;
}
void CCSUsrMsg_QuestProgress::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCSUsrMsg_QuestProgress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCSUsrMsg_QuestProgress::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_QuestProgress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&quest_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_event_quest_) -
        reinterpret_cast<char*>(&quest_id_)) + sizeof(is_event_quest_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_QuestProgress::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 quest_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_quest_id(&has_bits);
          quest_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 normal_points = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_normal_points(&has_bits);
          normal_points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 bonus_points = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_bonus_points(&has_bits);
          bonus_points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_event_quest = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_is_event_quest(&has_bits);
          is_event_quest_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCSUsrMsg_QuestProgress::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_QuestProgress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 quest_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_quest_id(), target);
  }

  // optional uint32 normal_points = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_normal_points(), target);
  }

  // optional uint32 bonus_points = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_bonus_points(), target);
  }

  // optional bool is_event_quest = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_is_event_quest(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_QuestProgress)
  return target;
}

size_t CCSUsrMsg_QuestProgress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_QuestProgress)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 quest_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_quest_id());
    }

    // optional uint32 normal_points = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_normal_points());
    }

    // optional uint32 bonus_points = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_bonus_points());
    }

    // optional bool is_event_quest = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_QuestProgress::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCSUsrMsg_QuestProgress::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_QuestProgress::GetClassData() const { return &_class_data_; }

void CCSUsrMsg_QuestProgress::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCSUsrMsg_QuestProgress *>(to)->MergeFrom(
      static_cast<const CCSUsrMsg_QuestProgress &>(from));
}


void CCSUsrMsg_QuestProgress::MergeFrom(const CCSUsrMsg_QuestProgress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_QuestProgress)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      quest_id_ = from.quest_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      normal_points_ = from.normal_points_;
    }
    if (cached_has_bits & 0x00000004u) {
      bonus_points_ = from.bonus_points_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_event_quest_ = from.is_event_quest_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_QuestProgress::CopyFrom(const CCSUsrMsg_QuestProgress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_QuestProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_QuestProgress::IsInitialized() const {
  return true;
}

void CCSUsrMsg_QuestProgress::InternalSwap(CCSUsrMsg_QuestProgress* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCSUsrMsg_QuestProgress, is_event_quest_)
      + sizeof(CCSUsrMsg_QuestProgress::is_event_quest_)
      - PROTOBUF_FIELD_OFFSET(CCSUsrMsg_QuestProgress, quest_id_)>(
          reinterpret_cast<char*>(&quest_id_),
          reinterpret_cast<char*>(&other->quest_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_QuestProgress::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[37]);
}

// ===================================================================

class CCSUsrMsg_ScoreLeaderboardData::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_ScoreLeaderboardData>()._has_bits_);
  static const ::ScoreLeaderboardData& data(const CCSUsrMsg_ScoreLeaderboardData* msg);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ScoreLeaderboardData&
CCSUsrMsg_ScoreLeaderboardData::_Internal::data(const CCSUsrMsg_ScoreLeaderboardData* msg) {
  return *msg->data_;
}
void CCSUsrMsg_ScoreLeaderboardData::clear_data() {
  if (data_ != nullptr) data_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
CCSUsrMsg_ScoreLeaderboardData::CCSUsrMsg_ScoreLeaderboardData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_ScoreLeaderboardData)
}
CCSUsrMsg_ScoreLeaderboardData::CCSUsrMsg_ScoreLeaderboardData(const CCSUsrMsg_ScoreLeaderboardData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data()) {
    data_ = new ::ScoreLeaderboardData(*from.data_);
  } else {
    data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_ScoreLeaderboardData)
}

void CCSUsrMsg_ScoreLeaderboardData::SharedCtor() {
data_ = nullptr;
}

CCSUsrMsg_ScoreLeaderboardData::~CCSUsrMsg_ScoreLeaderboardData() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_ScoreLeaderboardData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCSUsrMsg_ScoreLeaderboardData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete data_;
}

void CCSUsrMsg_ScoreLeaderboardData::ArenaDtor(void* object) {
  CCSUsrMsg_ScoreLeaderboardData* _this = reinterpret_cast< CCSUsrMsg_ScoreLeaderboardData* >(object);
  (void)_this;
}
void CCSUsrMsg_ScoreLeaderboardData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCSUsrMsg_ScoreLeaderboardData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCSUsrMsg_ScoreLeaderboardData::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_ScoreLeaderboardData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(data_ != nullptr);
    data_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_ScoreLeaderboardData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .ScoreLeaderboardData data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCSUsrMsg_ScoreLeaderboardData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_ScoreLeaderboardData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ScoreLeaderboardData data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_ScoreLeaderboardData)
  return target;
}

size_t CCSUsrMsg_ScoreLeaderboardData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_ScoreLeaderboardData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .ScoreLeaderboardData data = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_ScoreLeaderboardData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCSUsrMsg_ScoreLeaderboardData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_ScoreLeaderboardData::GetClassData() const { return &_class_data_; }

void CCSUsrMsg_ScoreLeaderboardData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCSUsrMsg_ScoreLeaderboardData *>(to)->MergeFrom(
      static_cast<const CCSUsrMsg_ScoreLeaderboardData &>(from));
}


void CCSUsrMsg_ScoreLeaderboardData::MergeFrom(const CCSUsrMsg_ScoreLeaderboardData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_ScoreLeaderboardData)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_data()) {
    _internal_mutable_data()->::ScoreLeaderboardData::MergeFrom(from._internal_data());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_ScoreLeaderboardData::CopyFrom(const CCSUsrMsg_ScoreLeaderboardData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_ScoreLeaderboardData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_ScoreLeaderboardData::IsInitialized() const {
  return true;
}

void CCSUsrMsg_ScoreLeaderboardData::InternalSwap(CCSUsrMsg_ScoreLeaderboardData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(data_, other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_ScoreLeaderboardData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[38]);
}

// ===================================================================

class CCSUsrMsg_PlayerDecalDigitalSignature::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_PlayerDecalDigitalSignature>()._has_bits_);
  static const ::PlayerDecalDigitalSignature& data(const CCSUsrMsg_PlayerDecalDigitalSignature* msg);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::PlayerDecalDigitalSignature&
CCSUsrMsg_PlayerDecalDigitalSignature::_Internal::data(const CCSUsrMsg_PlayerDecalDigitalSignature* msg) {
  return *msg->data_;
}
void CCSUsrMsg_PlayerDecalDigitalSignature::clear_data() {
  if (data_ != nullptr) data_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
CCSUsrMsg_PlayerDecalDigitalSignature::CCSUsrMsg_PlayerDecalDigitalSignature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_PlayerDecalDigitalSignature)
}
CCSUsrMsg_PlayerDecalDigitalSignature::CCSUsrMsg_PlayerDecalDigitalSignature(const CCSUsrMsg_PlayerDecalDigitalSignature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data()) {
    data_ = new ::PlayerDecalDigitalSignature(*from.data_);
  } else {
    data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_PlayerDecalDigitalSignature)
}

void CCSUsrMsg_PlayerDecalDigitalSignature::SharedCtor() {
data_ = nullptr;
}

CCSUsrMsg_PlayerDecalDigitalSignature::~CCSUsrMsg_PlayerDecalDigitalSignature() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_PlayerDecalDigitalSignature)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCSUsrMsg_PlayerDecalDigitalSignature::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete data_;
}

void CCSUsrMsg_PlayerDecalDigitalSignature::ArenaDtor(void* object) {
  CCSUsrMsg_PlayerDecalDigitalSignature* _this = reinterpret_cast< CCSUsrMsg_PlayerDecalDigitalSignature* >(object);
  (void)_this;
}
void CCSUsrMsg_PlayerDecalDigitalSignature::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCSUsrMsg_PlayerDecalDigitalSignature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCSUsrMsg_PlayerDecalDigitalSignature::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_PlayerDecalDigitalSignature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(data_ != nullptr);
    data_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_PlayerDecalDigitalSignature::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .PlayerDecalDigitalSignature data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCSUsrMsg_PlayerDecalDigitalSignature::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_PlayerDecalDigitalSignature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .PlayerDecalDigitalSignature data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_PlayerDecalDigitalSignature)
  return target;
}

size_t CCSUsrMsg_PlayerDecalDigitalSignature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_PlayerDecalDigitalSignature)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .PlayerDecalDigitalSignature data = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_PlayerDecalDigitalSignature::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCSUsrMsg_PlayerDecalDigitalSignature::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_PlayerDecalDigitalSignature::GetClassData() const { return &_class_data_; }

void CCSUsrMsg_PlayerDecalDigitalSignature::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCSUsrMsg_PlayerDecalDigitalSignature *>(to)->MergeFrom(
      static_cast<const CCSUsrMsg_PlayerDecalDigitalSignature &>(from));
}


void CCSUsrMsg_PlayerDecalDigitalSignature::MergeFrom(const CCSUsrMsg_PlayerDecalDigitalSignature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_PlayerDecalDigitalSignature)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_data()) {
    _internal_mutable_data()->::PlayerDecalDigitalSignature::MergeFrom(from._internal_data());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_PlayerDecalDigitalSignature::CopyFrom(const CCSUsrMsg_PlayerDecalDigitalSignature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_PlayerDecalDigitalSignature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_PlayerDecalDigitalSignature::IsInitialized() const {
  return true;
}

void CCSUsrMsg_PlayerDecalDigitalSignature::InternalSwap(CCSUsrMsg_PlayerDecalDigitalSignature* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(data_, other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_PlayerDecalDigitalSignature::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[39]);
}

// ===================================================================

class CCSUsrMsg_XRankGet::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_XRankGet>()._has_bits_);
  static void set_has_mode_idx(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_controller(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CCSUsrMsg_XRankGet::CCSUsrMsg_XRankGet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_XRankGet)
}
CCSUsrMsg_XRankGet::CCSUsrMsg_XRankGet(const CCSUsrMsg_XRankGet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&mode_idx_, &from.mode_idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&controller_) -
    reinterpret_cast<char*>(&mode_idx_)) + sizeof(controller_));
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_XRankGet)
}

void CCSUsrMsg_XRankGet::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&mode_idx_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&controller_) -
    reinterpret_cast<char*>(&mode_idx_)) + sizeof(controller_));
}

CCSUsrMsg_XRankGet::~CCSUsrMsg_XRankGet() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_XRankGet)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCSUsrMsg_XRankGet::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCSUsrMsg_XRankGet::ArenaDtor(void* object) {
  CCSUsrMsg_XRankGet* _this = reinterpret_cast< CCSUsrMsg_XRankGet* >(object);
  (void)_this;
}
void CCSUsrMsg_XRankGet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCSUsrMsg_XRankGet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCSUsrMsg_XRankGet::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_XRankGet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&mode_idx_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&controller_) -
        reinterpret_cast<char*>(&mode_idx_)) + sizeof(controller_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_XRankGet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 mode_idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_mode_idx(&has_bits);
          mode_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 controller = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_controller(&has_bits);
          controller_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCSUsrMsg_XRankGet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_XRankGet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 mode_idx = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_mode_idx(), target);
  }

  // optional int32 controller = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_controller(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_XRankGet)
  return target;
}

size_t CCSUsrMsg_XRankGet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_XRankGet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 mode_idx = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_mode_idx());
    }

    // optional int32 controller = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_controller());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_XRankGet::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCSUsrMsg_XRankGet::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_XRankGet::GetClassData() const { return &_class_data_; }

void CCSUsrMsg_XRankGet::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCSUsrMsg_XRankGet *>(to)->MergeFrom(
      static_cast<const CCSUsrMsg_XRankGet &>(from));
}


void CCSUsrMsg_XRankGet::MergeFrom(const CCSUsrMsg_XRankGet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_XRankGet)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mode_idx_ = from.mode_idx_;
    }
    if (cached_has_bits & 0x00000002u) {
      controller_ = from.controller_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_XRankGet::CopyFrom(const CCSUsrMsg_XRankGet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_XRankGet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_XRankGet::IsInitialized() const {
  return true;
}

void CCSUsrMsg_XRankGet::InternalSwap(CCSUsrMsg_XRankGet* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCSUsrMsg_XRankGet, controller_)
      + sizeof(CCSUsrMsg_XRankGet::controller_)
      - PROTOBUF_FIELD_OFFSET(CCSUsrMsg_XRankGet, mode_idx_)>(
          reinterpret_cast<char*>(&mode_idx_),
          reinterpret_cast<char*>(&other->mode_idx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_XRankGet::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[40]);
}

// ===================================================================

class CCSUsrMsg_XRankUpd::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_XRankUpd>()._has_bits_);
  static void set_has_mode_idx(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_controller(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ranking(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CCSUsrMsg_XRankUpd::CCSUsrMsg_XRankUpd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_XRankUpd)
}
CCSUsrMsg_XRankUpd::CCSUsrMsg_XRankUpd(const CCSUsrMsg_XRankUpd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&mode_idx_, &from.mode_idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&ranking_) -
    reinterpret_cast<char*>(&mode_idx_)) + sizeof(ranking_));
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_XRankUpd)
}

void CCSUsrMsg_XRankUpd::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&mode_idx_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ranking_) -
    reinterpret_cast<char*>(&mode_idx_)) + sizeof(ranking_));
}

CCSUsrMsg_XRankUpd::~CCSUsrMsg_XRankUpd() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_XRankUpd)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCSUsrMsg_XRankUpd::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCSUsrMsg_XRankUpd::ArenaDtor(void* object) {
  CCSUsrMsg_XRankUpd* _this = reinterpret_cast< CCSUsrMsg_XRankUpd* >(object);
  (void)_this;
}
void CCSUsrMsg_XRankUpd::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCSUsrMsg_XRankUpd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCSUsrMsg_XRankUpd::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_XRankUpd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&mode_idx_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ranking_) -
        reinterpret_cast<char*>(&mode_idx_)) + sizeof(ranking_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_XRankUpd::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 mode_idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_mode_idx(&has_bits);
          mode_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 controller = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_controller(&has_bits);
          controller_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 ranking = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_ranking(&has_bits);
          ranking_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCSUsrMsg_XRankUpd::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_XRankUpd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 mode_idx = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_mode_idx(), target);
  }

  // optional int32 controller = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_controller(), target);
  }

  // optional int32 ranking = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_ranking(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_XRankUpd)
  return target;
}

size_t CCSUsrMsg_XRankUpd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_XRankUpd)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 mode_idx = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_mode_idx());
    }

    // optional int32 controller = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_controller());
    }

    // optional int32 ranking = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_ranking());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_XRankUpd::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCSUsrMsg_XRankUpd::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_XRankUpd::GetClassData() const { return &_class_data_; }

void CCSUsrMsg_XRankUpd::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCSUsrMsg_XRankUpd *>(to)->MergeFrom(
      static_cast<const CCSUsrMsg_XRankUpd &>(from));
}


void CCSUsrMsg_XRankUpd::MergeFrom(const CCSUsrMsg_XRankUpd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_XRankUpd)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mode_idx_ = from.mode_idx_;
    }
    if (cached_has_bits & 0x00000002u) {
      controller_ = from.controller_;
    }
    if (cached_has_bits & 0x00000004u) {
      ranking_ = from.ranking_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_XRankUpd::CopyFrom(const CCSUsrMsg_XRankUpd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_XRankUpd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_XRankUpd::IsInitialized() const {
  return true;
}

void CCSUsrMsg_XRankUpd::InternalSwap(CCSUsrMsg_XRankUpd* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCSUsrMsg_XRankUpd, ranking_)
      + sizeof(CCSUsrMsg_XRankUpd::ranking_)
      - PROTOBUF_FIELD_OFFSET(CCSUsrMsg_XRankUpd, mode_idx_)>(
          reinterpret_cast<char*>(&mode_idx_),
          reinterpret_cast<char*>(&other->mode_idx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_XRankUpd::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[41]);
}

// ===================================================================

class CCSUsrMsg_CallVoteFailed::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_CallVoteFailed>()._has_bits_);
  static void set_has_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CCSUsrMsg_CallVoteFailed::CCSUsrMsg_CallVoteFailed(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_CallVoteFailed)
}
CCSUsrMsg_CallVoteFailed::CCSUsrMsg_CallVoteFailed(const CCSUsrMsg_CallVoteFailed& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&reason_, &from.reason_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_) -
    reinterpret_cast<char*>(&reason_)) + sizeof(time_));
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_CallVoteFailed)
}

void CCSUsrMsg_CallVoteFailed::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&reason_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&time_) -
    reinterpret_cast<char*>(&reason_)) + sizeof(time_));
}

CCSUsrMsg_CallVoteFailed::~CCSUsrMsg_CallVoteFailed() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_CallVoteFailed)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCSUsrMsg_CallVoteFailed::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCSUsrMsg_CallVoteFailed::ArenaDtor(void* object) {
  CCSUsrMsg_CallVoteFailed* _this = reinterpret_cast< CCSUsrMsg_CallVoteFailed* >(object);
  (void)_this;
}
void CCSUsrMsg_CallVoteFailed::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCSUsrMsg_CallVoteFailed::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCSUsrMsg_CallVoteFailed::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_CallVoteFailed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&reason_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&time_) -
        reinterpret_cast<char*>(&reason_)) + sizeof(time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_CallVoteFailed::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 reason = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_reason(&has_bits);
          reason_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_time(&has_bits);
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCSUsrMsg_CallVoteFailed::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_CallVoteFailed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 reason = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_reason(), target);
  }

  // optional int32 time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_CallVoteFailed)
  return target;
}

size_t CCSUsrMsg_CallVoteFailed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_CallVoteFailed)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 reason = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_reason());
    }

    // optional int32 time = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_time());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_CallVoteFailed::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCSUsrMsg_CallVoteFailed::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_CallVoteFailed::GetClassData() const { return &_class_data_; }

void CCSUsrMsg_CallVoteFailed::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCSUsrMsg_CallVoteFailed *>(to)->MergeFrom(
      static_cast<const CCSUsrMsg_CallVoteFailed &>(from));
}


void CCSUsrMsg_CallVoteFailed::MergeFrom(const CCSUsrMsg_CallVoteFailed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_CallVoteFailed)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      reason_ = from.reason_;
    }
    if (cached_has_bits & 0x00000002u) {
      time_ = from.time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_CallVoteFailed::CopyFrom(const CCSUsrMsg_CallVoteFailed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_CallVoteFailed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_CallVoteFailed::IsInitialized() const {
  return true;
}

void CCSUsrMsg_CallVoteFailed::InternalSwap(CCSUsrMsg_CallVoteFailed* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCSUsrMsg_CallVoteFailed, time_)
      + sizeof(CCSUsrMsg_CallVoteFailed::time_)
      - PROTOBUF_FIELD_OFFSET(CCSUsrMsg_CallVoteFailed, reason_)>(
          reinterpret_cast<char*>(&reason_),
          reinterpret_cast<char*>(&other->reason_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_CallVoteFailed::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[42]);
}

// ===================================================================

class CCSUsrMsg_VoteStart::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_VoteStart>()._has_bits_);
  static void set_has_team(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ent_idx(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_vote_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_disp_str(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_details_str(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_other_team_str(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_yes_no_vote(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

CCSUsrMsg_VoteStart::CCSUsrMsg_VoteStart(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_VoteStart)
}
CCSUsrMsg_VoteStart::CCSUsrMsg_VoteStart(const CCSUsrMsg_VoteStart& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  disp_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_disp_str()) {
    disp_str_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_disp_str(), 
      GetArenaForAllocation());
  }
  details_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_details_str()) {
    details_str_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_details_str(), 
      GetArenaForAllocation());
  }
  other_team_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_other_team_str()) {
    other_team_str_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_other_team_str(), 
      GetArenaForAllocation());
  }
  ::memcpy(&team_, &from.team_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_yes_no_vote_) -
    reinterpret_cast<char*>(&team_)) + sizeof(is_yes_no_vote_));
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_VoteStart)
}

void CCSUsrMsg_VoteStart::SharedCtor() {
disp_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
details_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
other_team_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&team_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_yes_no_vote_) -
    reinterpret_cast<char*>(&team_)) + sizeof(is_yes_no_vote_));
}

CCSUsrMsg_VoteStart::~CCSUsrMsg_VoteStart() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_VoteStart)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCSUsrMsg_VoteStart::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  disp_str_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  details_str_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  other_team_str_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CCSUsrMsg_VoteStart::ArenaDtor(void* object) {
  CCSUsrMsg_VoteStart* _this = reinterpret_cast< CCSUsrMsg_VoteStart* >(object);
  (void)_this;
}
void CCSUsrMsg_VoteStart::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCSUsrMsg_VoteStart::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCSUsrMsg_VoteStart::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_VoteStart)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      disp_str_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      details_str_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      other_team_str_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000078u) {
    ::memset(&team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_yes_no_vote_) -
        reinterpret_cast<char*>(&team_)) + sizeof(is_yes_no_vote_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_VoteStart::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 team = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_team(&has_bits);
          team_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 ent_idx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_ent_idx(&has_bits);
          ent_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 vote_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_vote_type(&has_bits);
          vote_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string disp_str = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_disp_str();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCSUsrMsg_VoteStart.disp_str");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string details_str = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_details_str();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCSUsrMsg_VoteStart.details_str");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string other_team_str = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_other_team_str();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCSUsrMsg_VoteStart.other_team_str");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_yes_no_vote = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_is_yes_no_vote(&has_bits);
          is_yes_no_vote_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCSUsrMsg_VoteStart::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_VoteStart)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 team = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_team(), target);
  }

  // optional int32 ent_idx = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_ent_idx(), target);
  }

  // optional int32 vote_type = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_vote_type(), target);
  }

  // optional string disp_str = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_disp_str().data(), static_cast<int>(this->_internal_disp_str().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCSUsrMsg_VoteStart.disp_str");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_disp_str(), target);
  }

  // optional string details_str = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_details_str().data(), static_cast<int>(this->_internal_details_str().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCSUsrMsg_VoteStart.details_str");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_details_str(), target);
  }

  // optional string other_team_str = 6;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_other_team_str().data(), static_cast<int>(this->_internal_other_team_str().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCSUsrMsg_VoteStart.other_team_str");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_other_team_str(), target);
  }

  // optional bool is_yes_no_vote = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_is_yes_no_vote(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_VoteStart)
  return target;
}

size_t CCSUsrMsg_VoteStart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_VoteStart)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string disp_str = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_disp_str());
    }

    // optional string details_str = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_details_str());
    }

    // optional string other_team_str = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_other_team_str());
    }

    // optional int32 team = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_team());
    }

    // optional int32 ent_idx = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_ent_idx());
    }

    // optional int32 vote_type = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_vote_type());
    }

    // optional bool is_yes_no_vote = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_VoteStart::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCSUsrMsg_VoteStart::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_VoteStart::GetClassData() const { return &_class_data_; }

void CCSUsrMsg_VoteStart::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCSUsrMsg_VoteStart *>(to)->MergeFrom(
      static_cast<const CCSUsrMsg_VoteStart &>(from));
}


void CCSUsrMsg_VoteStart::MergeFrom(const CCSUsrMsg_VoteStart& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_VoteStart)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_disp_str(from._internal_disp_str());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_details_str(from._internal_details_str());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_other_team_str(from._internal_other_team_str());
    }
    if (cached_has_bits & 0x00000008u) {
      team_ = from.team_;
    }
    if (cached_has_bits & 0x00000010u) {
      ent_idx_ = from.ent_idx_;
    }
    if (cached_has_bits & 0x00000020u) {
      vote_type_ = from.vote_type_;
    }
    if (cached_has_bits & 0x00000040u) {
      is_yes_no_vote_ = from.is_yes_no_vote_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_VoteStart::CopyFrom(const CCSUsrMsg_VoteStart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_VoteStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_VoteStart::IsInitialized() const {
  return true;
}

void CCSUsrMsg_VoteStart::InternalSwap(CCSUsrMsg_VoteStart* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &disp_str_, lhs_arena,
      &other->disp_str_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &details_str_, lhs_arena,
      &other->details_str_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &other_team_str_, lhs_arena,
      &other->other_team_str_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCSUsrMsg_VoteStart, is_yes_no_vote_)
      + sizeof(CCSUsrMsg_VoteStart::is_yes_no_vote_)
      - PROTOBUF_FIELD_OFFSET(CCSUsrMsg_VoteStart, team_)>(
          reinterpret_cast<char*>(&team_),
          reinterpret_cast<char*>(&other->team_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_VoteStart::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[43]);
}

// ===================================================================

class CCSUsrMsg_VotePass::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_VotePass>()._has_bits_);
  static void set_has_team(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_vote_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_disp_str(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_details_str(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CCSUsrMsg_VotePass::CCSUsrMsg_VotePass(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_VotePass)
}
CCSUsrMsg_VotePass::CCSUsrMsg_VotePass(const CCSUsrMsg_VotePass& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  disp_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_disp_str()) {
    disp_str_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_disp_str(), 
      GetArenaForAllocation());
  }
  details_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_details_str()) {
    details_str_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_details_str(), 
      GetArenaForAllocation());
  }
  ::memcpy(&team_, &from.team_,
    static_cast<size_t>(reinterpret_cast<char*>(&vote_type_) -
    reinterpret_cast<char*>(&team_)) + sizeof(vote_type_));
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_VotePass)
}

void CCSUsrMsg_VotePass::SharedCtor() {
disp_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
details_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&team_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&vote_type_) -
    reinterpret_cast<char*>(&team_)) + sizeof(vote_type_));
}

CCSUsrMsg_VotePass::~CCSUsrMsg_VotePass() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_VotePass)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCSUsrMsg_VotePass::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  disp_str_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  details_str_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CCSUsrMsg_VotePass::ArenaDtor(void* object) {
  CCSUsrMsg_VotePass* _this = reinterpret_cast< CCSUsrMsg_VotePass* >(object);
  (void)_this;
}
void CCSUsrMsg_VotePass::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCSUsrMsg_VotePass::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCSUsrMsg_VotePass::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_VotePass)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      disp_str_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      details_str_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&vote_type_) -
        reinterpret_cast<char*>(&team_)) + sizeof(vote_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_VotePass::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 team = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_team(&has_bits);
          team_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 vote_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_vote_type(&has_bits);
          vote_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string disp_str = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_disp_str();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCSUsrMsg_VotePass.disp_str");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string details_str = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_details_str();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCSUsrMsg_VotePass.details_str");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCSUsrMsg_VotePass::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_VotePass)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 team = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_team(), target);
  }

  // optional int32 vote_type = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_vote_type(), target);
  }

  // optional string disp_str = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_disp_str().data(), static_cast<int>(this->_internal_disp_str().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCSUsrMsg_VotePass.disp_str");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_disp_str(), target);
  }

  // optional string details_str = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_details_str().data(), static_cast<int>(this->_internal_details_str().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCSUsrMsg_VotePass.details_str");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_details_str(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_VotePass)
  return target;
}

size_t CCSUsrMsg_VotePass::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_VotePass)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string disp_str = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_disp_str());
    }

    // optional string details_str = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_details_str());
    }

    // optional int32 team = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_team());
    }

    // optional int32 vote_type = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_vote_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_VotePass::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCSUsrMsg_VotePass::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_VotePass::GetClassData() const { return &_class_data_; }

void CCSUsrMsg_VotePass::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCSUsrMsg_VotePass *>(to)->MergeFrom(
      static_cast<const CCSUsrMsg_VotePass &>(from));
}


void CCSUsrMsg_VotePass::MergeFrom(const CCSUsrMsg_VotePass& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_VotePass)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_disp_str(from._internal_disp_str());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_details_str(from._internal_details_str());
    }
    if (cached_has_bits & 0x00000004u) {
      team_ = from.team_;
    }
    if (cached_has_bits & 0x00000008u) {
      vote_type_ = from.vote_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_VotePass::CopyFrom(const CCSUsrMsg_VotePass& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_VotePass)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_VotePass::IsInitialized() const {
  return true;
}

void CCSUsrMsg_VotePass::InternalSwap(CCSUsrMsg_VotePass* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &disp_str_, lhs_arena,
      &other->disp_str_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &details_str_, lhs_arena,
      &other->details_str_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCSUsrMsg_VotePass, vote_type_)
      + sizeof(CCSUsrMsg_VotePass::vote_type_)
      - PROTOBUF_FIELD_OFFSET(CCSUsrMsg_VotePass, team_)>(
          reinterpret_cast<char*>(&team_),
          reinterpret_cast<char*>(&other->team_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_VotePass::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[44]);
}

// ===================================================================

class CCSUsrMsg_VoteFailed::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_VoteFailed>()._has_bits_);
  static void set_has_team(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CCSUsrMsg_VoteFailed::CCSUsrMsg_VoteFailed(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_VoteFailed)
}
CCSUsrMsg_VoteFailed::CCSUsrMsg_VoteFailed(const CCSUsrMsg_VoteFailed& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&team_, &from.team_,
    static_cast<size_t>(reinterpret_cast<char*>(&reason_) -
    reinterpret_cast<char*>(&team_)) + sizeof(reason_));
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_VoteFailed)
}

void CCSUsrMsg_VoteFailed::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&team_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&reason_) -
    reinterpret_cast<char*>(&team_)) + sizeof(reason_));
}

CCSUsrMsg_VoteFailed::~CCSUsrMsg_VoteFailed() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_VoteFailed)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCSUsrMsg_VoteFailed::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCSUsrMsg_VoteFailed::ArenaDtor(void* object) {
  CCSUsrMsg_VoteFailed* _this = reinterpret_cast< CCSUsrMsg_VoteFailed* >(object);
  (void)_this;
}
void CCSUsrMsg_VoteFailed::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCSUsrMsg_VoteFailed::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCSUsrMsg_VoteFailed::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_VoteFailed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&reason_) -
        reinterpret_cast<char*>(&team_)) + sizeof(reason_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_VoteFailed::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 team = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_team(&has_bits);
          team_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 reason = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_reason(&has_bits);
          reason_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCSUsrMsg_VoteFailed::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_VoteFailed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 team = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_team(), target);
  }

  // optional int32 reason = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_VoteFailed)
  return target;
}

size_t CCSUsrMsg_VoteFailed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_VoteFailed)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 team = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_team());
    }

    // optional int32 reason = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_reason());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_VoteFailed::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCSUsrMsg_VoteFailed::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_VoteFailed::GetClassData() const { return &_class_data_; }

void CCSUsrMsg_VoteFailed::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCSUsrMsg_VoteFailed *>(to)->MergeFrom(
      static_cast<const CCSUsrMsg_VoteFailed &>(from));
}


void CCSUsrMsg_VoteFailed::MergeFrom(const CCSUsrMsg_VoteFailed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_VoteFailed)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      team_ = from.team_;
    }
    if (cached_has_bits & 0x00000002u) {
      reason_ = from.reason_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_VoteFailed::CopyFrom(const CCSUsrMsg_VoteFailed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_VoteFailed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_VoteFailed::IsInitialized() const {
  return true;
}

void CCSUsrMsg_VoteFailed::InternalSwap(CCSUsrMsg_VoteFailed* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCSUsrMsg_VoteFailed, reason_)
      + sizeof(CCSUsrMsg_VoteFailed::reason_)
      - PROTOBUF_FIELD_OFFSET(CCSUsrMsg_VoteFailed, team_)>(
          reinterpret_cast<char*>(&team_),
          reinterpret_cast<char*>(&other->team_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_VoteFailed::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[45]);
}

// ===================================================================

class CCSUsrMsg_VoteSetup::_Internal {
 public:
};

CCSUsrMsg_VoteSetup::CCSUsrMsg_VoteSetup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  potential_issues_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_VoteSetup)
}
CCSUsrMsg_VoteSetup::CCSUsrMsg_VoteSetup(const CCSUsrMsg_VoteSetup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      potential_issues_(from.potential_issues_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_VoteSetup)
}

void CCSUsrMsg_VoteSetup::SharedCtor() {
}

CCSUsrMsg_VoteSetup::~CCSUsrMsg_VoteSetup() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_VoteSetup)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCSUsrMsg_VoteSetup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCSUsrMsg_VoteSetup::ArenaDtor(void* object) {
  CCSUsrMsg_VoteSetup* _this = reinterpret_cast< CCSUsrMsg_VoteSetup* >(object);
  (void)_this;
}
void CCSUsrMsg_VoteSetup::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCSUsrMsg_VoteSetup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCSUsrMsg_VoteSetup::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_VoteSetup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  potential_issues_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_VoteSetup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string potential_issues = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_potential_issues();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCSUsrMsg_VoteSetup.potential_issues");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCSUsrMsg_VoteSetup::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_VoteSetup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string potential_issues = 1;
  for (int i = 0, n = this->_internal_potential_issues_size(); i < n; i++) {
    const auto& s = this->_internal_potential_issues(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCSUsrMsg_VoteSetup.potential_issues");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_VoteSetup)
  return target;
}

size_t CCSUsrMsg_VoteSetup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_VoteSetup)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string potential_issues = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(potential_issues_.size());
  for (int i = 0, n = potential_issues_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      potential_issues_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_VoteSetup::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCSUsrMsg_VoteSetup::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_VoteSetup::GetClassData() const { return &_class_data_; }

void CCSUsrMsg_VoteSetup::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCSUsrMsg_VoteSetup *>(to)->MergeFrom(
      static_cast<const CCSUsrMsg_VoteSetup &>(from));
}


void CCSUsrMsg_VoteSetup::MergeFrom(const CCSUsrMsg_VoteSetup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_VoteSetup)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  potential_issues_.MergeFrom(from.potential_issues_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_VoteSetup::CopyFrom(const CCSUsrMsg_VoteSetup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_VoteSetup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_VoteSetup::IsInitialized() const {
  return true;
}

void CCSUsrMsg_VoteSetup::InternalSwap(CCSUsrMsg_VoteSetup* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  potential_issues_.InternalSwap(&other->potential_issues_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_VoteSetup::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[46]);
}

// ===================================================================

class CCSUsrMsg_SendLastKillerDamageToClient::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_SendLastKillerDamageToClient>()._has_bits_);
  static void set_has_num_hits_given(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_damage_given(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_num_hits_taken(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_damage_taken(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CCSUsrMsg_SendLastKillerDamageToClient::CCSUsrMsg_SendLastKillerDamageToClient(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_SendLastKillerDamageToClient)
}
CCSUsrMsg_SendLastKillerDamageToClient::CCSUsrMsg_SendLastKillerDamageToClient(const CCSUsrMsg_SendLastKillerDamageToClient& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&num_hits_given_, &from.num_hits_given_,
    static_cast<size_t>(reinterpret_cast<char*>(&damage_taken_) -
    reinterpret_cast<char*>(&num_hits_given_)) + sizeof(damage_taken_));
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_SendLastKillerDamageToClient)
}

void CCSUsrMsg_SendLastKillerDamageToClient::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&num_hits_given_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&damage_taken_) -
    reinterpret_cast<char*>(&num_hits_given_)) + sizeof(damage_taken_));
}

CCSUsrMsg_SendLastKillerDamageToClient::~CCSUsrMsg_SendLastKillerDamageToClient() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_SendLastKillerDamageToClient)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCSUsrMsg_SendLastKillerDamageToClient::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCSUsrMsg_SendLastKillerDamageToClient::ArenaDtor(void* object) {
  CCSUsrMsg_SendLastKillerDamageToClient* _this = reinterpret_cast< CCSUsrMsg_SendLastKillerDamageToClient* >(object);
  (void)_this;
}
void CCSUsrMsg_SendLastKillerDamageToClient::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCSUsrMsg_SendLastKillerDamageToClient::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCSUsrMsg_SendLastKillerDamageToClient::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_SendLastKillerDamageToClient)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&num_hits_given_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&damage_taken_) -
        reinterpret_cast<char*>(&num_hits_given_)) + sizeof(damage_taken_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_SendLastKillerDamageToClient::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 num_hits_given = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_num_hits_given(&has_bits);
          num_hits_given_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 damage_given = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_damage_given(&has_bits);
          damage_given_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 num_hits_taken = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_num_hits_taken(&has_bits);
          num_hits_taken_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 damage_taken = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_damage_taken(&has_bits);
          damage_taken_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCSUsrMsg_SendLastKillerDamageToClient::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_SendLastKillerDamageToClient)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 num_hits_given = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_num_hits_given(), target);
  }

  // optional int32 damage_given = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_damage_given(), target);
  }

  // optional int32 num_hits_taken = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_num_hits_taken(), target);
  }

  // optional int32 damage_taken = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_damage_taken(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_SendLastKillerDamageToClient)
  return target;
}

size_t CCSUsrMsg_SendLastKillerDamageToClient::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_SendLastKillerDamageToClient)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int32 num_hits_given = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_num_hits_given());
    }

    // optional int32 damage_given = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_damage_given());
    }

    // optional int32 num_hits_taken = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_num_hits_taken());
    }

    // optional int32 damage_taken = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_damage_taken());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_SendLastKillerDamageToClient::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCSUsrMsg_SendLastKillerDamageToClient::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_SendLastKillerDamageToClient::GetClassData() const { return &_class_data_; }

void CCSUsrMsg_SendLastKillerDamageToClient::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCSUsrMsg_SendLastKillerDamageToClient *>(to)->MergeFrom(
      static_cast<const CCSUsrMsg_SendLastKillerDamageToClient &>(from));
}


void CCSUsrMsg_SendLastKillerDamageToClient::MergeFrom(const CCSUsrMsg_SendLastKillerDamageToClient& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_SendLastKillerDamageToClient)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      num_hits_given_ = from.num_hits_given_;
    }
    if (cached_has_bits & 0x00000002u) {
      damage_given_ = from.damage_given_;
    }
    if (cached_has_bits & 0x00000004u) {
      num_hits_taken_ = from.num_hits_taken_;
    }
    if (cached_has_bits & 0x00000008u) {
      damage_taken_ = from.damage_taken_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_SendLastKillerDamageToClient::CopyFrom(const CCSUsrMsg_SendLastKillerDamageToClient& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_SendLastKillerDamageToClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_SendLastKillerDamageToClient::IsInitialized() const {
  return true;
}

void CCSUsrMsg_SendLastKillerDamageToClient::InternalSwap(CCSUsrMsg_SendLastKillerDamageToClient* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCSUsrMsg_SendLastKillerDamageToClient, damage_taken_)
      + sizeof(CCSUsrMsg_SendLastKillerDamageToClient::damage_taken_)
      - PROTOBUF_FIELD_OFFSET(CCSUsrMsg_SendLastKillerDamageToClient, num_hits_given_)>(
          reinterpret_cast<char*>(&num_hits_given_),
          reinterpret_cast<char*>(&other->num_hits_given_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_SendLastKillerDamageToClient::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[47]);
}

// ===================================================================

class CCSUsrMsg_ServerRankUpdate_RankUpdate::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_ServerRankUpdate_RankUpdate>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_rank_old(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_rank_new(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_num_wins(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_rank_change(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CCSUsrMsg_ServerRankUpdate_RankUpdate::CCSUsrMsg_ServerRankUpdate_RankUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_ServerRankUpdate.RankUpdate)
}
CCSUsrMsg_ServerRankUpdate_RankUpdate::CCSUsrMsg_ServerRankUpdate_RankUpdate(const CCSUsrMsg_ServerRankUpdate_RankUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&rank_change_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(rank_change_));
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_ServerRankUpdate.RankUpdate)
}

void CCSUsrMsg_ServerRankUpdate_RankUpdate::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&account_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&rank_change_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(rank_change_));
}

CCSUsrMsg_ServerRankUpdate_RankUpdate::~CCSUsrMsg_ServerRankUpdate_RankUpdate() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_ServerRankUpdate.RankUpdate)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCSUsrMsg_ServerRankUpdate_RankUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCSUsrMsg_ServerRankUpdate_RankUpdate::ArenaDtor(void* object) {
  CCSUsrMsg_ServerRankUpdate_RankUpdate* _this = reinterpret_cast< CCSUsrMsg_ServerRankUpdate_RankUpdate* >(object);
  (void)_this;
}
void CCSUsrMsg_ServerRankUpdate_RankUpdate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCSUsrMsg_ServerRankUpdate_RankUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCSUsrMsg_ServerRankUpdate_RankUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_ServerRankUpdate.RankUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rank_change_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(rank_change_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_ServerRankUpdate_RankUpdate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 rank_old = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_rank_old(&has_bits);
          rank_old_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 rank_new = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_rank_new(&has_bits);
          rank_new_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 num_wins = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_num_wins(&has_bits);
          num_wins_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float rank_change = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_rank_change(&has_bits);
          rank_change_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCSUsrMsg_ServerRankUpdate_RankUpdate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_ServerRankUpdate.RankUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional int32 rank_old = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_rank_old(), target);
  }

  // optional int32 rank_new = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_rank_new(), target);
  }

  // optional int32 num_wins = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_num_wins(), target);
  }

  // optional float rank_change = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_rank_change(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_ServerRankUpdate.RankUpdate)
  return target;
}

size_t CCSUsrMsg_ServerRankUpdate_RankUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_ServerRankUpdate.RankUpdate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional int32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_account_id());
    }

    // optional int32 rank_old = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_rank_old());
    }

    // optional int32 rank_new = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_rank_new());
    }

    // optional int32 num_wins = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_num_wins());
    }

    // optional float rank_change = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_ServerRankUpdate_RankUpdate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCSUsrMsg_ServerRankUpdate_RankUpdate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_ServerRankUpdate_RankUpdate::GetClassData() const { return &_class_data_; }

void CCSUsrMsg_ServerRankUpdate_RankUpdate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCSUsrMsg_ServerRankUpdate_RankUpdate *>(to)->MergeFrom(
      static_cast<const CCSUsrMsg_ServerRankUpdate_RankUpdate &>(from));
}


void CCSUsrMsg_ServerRankUpdate_RankUpdate::MergeFrom(const CCSUsrMsg_ServerRankUpdate_RankUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_ServerRankUpdate.RankUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      rank_old_ = from.rank_old_;
    }
    if (cached_has_bits & 0x00000004u) {
      rank_new_ = from.rank_new_;
    }
    if (cached_has_bits & 0x00000008u) {
      num_wins_ = from.num_wins_;
    }
    if (cached_has_bits & 0x00000010u) {
      rank_change_ = from.rank_change_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_ServerRankUpdate_RankUpdate::CopyFrom(const CCSUsrMsg_ServerRankUpdate_RankUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_ServerRankUpdate.RankUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_ServerRankUpdate_RankUpdate::IsInitialized() const {
  return true;
}

void CCSUsrMsg_ServerRankUpdate_RankUpdate::InternalSwap(CCSUsrMsg_ServerRankUpdate_RankUpdate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCSUsrMsg_ServerRankUpdate_RankUpdate, rank_change_)
      + sizeof(CCSUsrMsg_ServerRankUpdate_RankUpdate::rank_change_)
      - PROTOBUF_FIELD_OFFSET(CCSUsrMsg_ServerRankUpdate_RankUpdate, account_id_)>(
          reinterpret_cast<char*>(&account_id_),
          reinterpret_cast<char*>(&other->account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_ServerRankUpdate_RankUpdate::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[48]);
}

// ===================================================================

class CCSUsrMsg_ServerRankUpdate::_Internal {
 public:
};

CCSUsrMsg_ServerRankUpdate::CCSUsrMsg_ServerRankUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  rank_update_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_ServerRankUpdate)
}
CCSUsrMsg_ServerRankUpdate::CCSUsrMsg_ServerRankUpdate(const CCSUsrMsg_ServerRankUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      rank_update_(from.rank_update_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_ServerRankUpdate)
}

void CCSUsrMsg_ServerRankUpdate::SharedCtor() {
}

CCSUsrMsg_ServerRankUpdate::~CCSUsrMsg_ServerRankUpdate() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_ServerRankUpdate)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCSUsrMsg_ServerRankUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCSUsrMsg_ServerRankUpdate::ArenaDtor(void* object) {
  CCSUsrMsg_ServerRankUpdate* _this = reinterpret_cast< CCSUsrMsg_ServerRankUpdate* >(object);
  (void)_this;
}
void CCSUsrMsg_ServerRankUpdate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCSUsrMsg_ServerRankUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCSUsrMsg_ServerRankUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_ServerRankUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rank_update_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_ServerRankUpdate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CCSUsrMsg_ServerRankUpdate.RankUpdate rank_update = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rank_update(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCSUsrMsg_ServerRankUpdate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_ServerRankUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CCSUsrMsg_ServerRankUpdate.RankUpdate rank_update = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rank_update_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_rank_update(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_ServerRankUpdate)
  return target;
}

size_t CCSUsrMsg_ServerRankUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_ServerRankUpdate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CCSUsrMsg_ServerRankUpdate.RankUpdate rank_update = 1;
  total_size += 1UL * this->_internal_rank_update_size();
  for (const auto& msg : this->rank_update_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_ServerRankUpdate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCSUsrMsg_ServerRankUpdate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_ServerRankUpdate::GetClassData() const { return &_class_data_; }

void CCSUsrMsg_ServerRankUpdate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCSUsrMsg_ServerRankUpdate *>(to)->MergeFrom(
      static_cast<const CCSUsrMsg_ServerRankUpdate &>(from));
}


void CCSUsrMsg_ServerRankUpdate::MergeFrom(const CCSUsrMsg_ServerRankUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_ServerRankUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rank_update_.MergeFrom(from.rank_update_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_ServerRankUpdate::CopyFrom(const CCSUsrMsg_ServerRankUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_ServerRankUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_ServerRankUpdate::IsInitialized() const {
  return true;
}

void CCSUsrMsg_ServerRankUpdate::InternalSwap(CCSUsrMsg_ServerRankUpdate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  rank_update_.InternalSwap(&other->rank_update_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_ServerRankUpdate::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[49]);
}

// ===================================================================

class CCSUsrMsg_XpUpdate::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_XpUpdate>()._has_bits_);
  static const ::CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded& data(const CCSUsrMsg_XpUpdate* msg);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded&
CCSUsrMsg_XpUpdate::_Internal::data(const CCSUsrMsg_XpUpdate* msg) {
  return *msg->data_;
}
void CCSUsrMsg_XpUpdate::clear_data() {
  if (data_ != nullptr) data_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
CCSUsrMsg_XpUpdate::CCSUsrMsg_XpUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_XpUpdate)
}
CCSUsrMsg_XpUpdate::CCSUsrMsg_XpUpdate(const CCSUsrMsg_XpUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data()) {
    data_ = new ::CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded(*from.data_);
  } else {
    data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_XpUpdate)
}

void CCSUsrMsg_XpUpdate::SharedCtor() {
data_ = nullptr;
}

CCSUsrMsg_XpUpdate::~CCSUsrMsg_XpUpdate() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_XpUpdate)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCSUsrMsg_XpUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete data_;
}

void CCSUsrMsg_XpUpdate::ArenaDtor(void* object) {
  CCSUsrMsg_XpUpdate* _this = reinterpret_cast< CCSUsrMsg_XpUpdate* >(object);
  (void)_this;
}
void CCSUsrMsg_XpUpdate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCSUsrMsg_XpUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCSUsrMsg_XpUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_XpUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(data_ != nullptr);
    data_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_XpUpdate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCSUsrMsg_XpUpdate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_XpUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_XpUpdate)
  return target;
}

size_t CCSUsrMsg_XpUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_XpUpdate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded data = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_XpUpdate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCSUsrMsg_XpUpdate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_XpUpdate::GetClassData() const { return &_class_data_; }

void CCSUsrMsg_XpUpdate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCSUsrMsg_XpUpdate *>(to)->MergeFrom(
      static_cast<const CCSUsrMsg_XpUpdate &>(from));
}


void CCSUsrMsg_XpUpdate::MergeFrom(const CCSUsrMsg_XpUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_XpUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_data()) {
    _internal_mutable_data()->::CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::MergeFrom(from._internal_data());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_XpUpdate::CopyFrom(const CCSUsrMsg_XpUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_XpUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_XpUpdate::IsInitialized() const {
  return true;
}

void CCSUsrMsg_XpUpdate::InternalSwap(CCSUsrMsg_XpUpdate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(data_, other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_XpUpdate::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[50]);
}

// ===================================================================

class CCSUsrMsg_ItemPickup::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_ItemPickup>()._has_bits_);
  static void set_has_item(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCSUsrMsg_ItemPickup::CCSUsrMsg_ItemPickup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_ItemPickup)
}
CCSUsrMsg_ItemPickup::CCSUsrMsg_ItemPickup(const CCSUsrMsg_ItemPickup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  item_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_item()) {
    item_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_item(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_ItemPickup)
}

void CCSUsrMsg_ItemPickup::SharedCtor() {
item_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CCSUsrMsg_ItemPickup::~CCSUsrMsg_ItemPickup() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_ItemPickup)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCSUsrMsg_ItemPickup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  item_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CCSUsrMsg_ItemPickup::ArenaDtor(void* object) {
  CCSUsrMsg_ItemPickup* _this = reinterpret_cast< CCSUsrMsg_ItemPickup* >(object);
  (void)_this;
}
void CCSUsrMsg_ItemPickup::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCSUsrMsg_ItemPickup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCSUsrMsg_ItemPickup::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_ItemPickup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    item_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_ItemPickup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string item = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_item();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCSUsrMsg_ItemPickup.item");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCSUsrMsg_ItemPickup::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_ItemPickup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string item = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_item().data(), static_cast<int>(this->_internal_item().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCSUsrMsg_ItemPickup.item");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_item(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_ItemPickup)
  return target;
}

size_t CCSUsrMsg_ItemPickup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_ItemPickup)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string item = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_item());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_ItemPickup::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCSUsrMsg_ItemPickup::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_ItemPickup::GetClassData() const { return &_class_data_; }

void CCSUsrMsg_ItemPickup::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCSUsrMsg_ItemPickup *>(to)->MergeFrom(
      static_cast<const CCSUsrMsg_ItemPickup &>(from));
}


void CCSUsrMsg_ItemPickup::MergeFrom(const CCSUsrMsg_ItemPickup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_ItemPickup)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_item()) {
    _internal_set_item(from._internal_item());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_ItemPickup::CopyFrom(const CCSUsrMsg_ItemPickup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_ItemPickup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_ItemPickup::IsInitialized() const {
  return true;
}

void CCSUsrMsg_ItemPickup::InternalSwap(CCSUsrMsg_ItemPickup* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &item_, lhs_arena,
      &other->item_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_ItemPickup::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[51]);
}

// ===================================================================

class CCSUsrMsg_ShowMenu::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_ShowMenu>()._has_bits_);
  static void set_has_bits_valid_slots(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_display_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_menu_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCSUsrMsg_ShowMenu::CCSUsrMsg_ShowMenu(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_ShowMenu)
}
CCSUsrMsg_ShowMenu::CCSUsrMsg_ShowMenu(const CCSUsrMsg_ShowMenu& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  menu_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_menu_string()) {
    menu_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_menu_string(), 
      GetArenaForAllocation());
  }
  ::memcpy(&bits_valid_slots_, &from.bits_valid_slots_,
    static_cast<size_t>(reinterpret_cast<char*>(&display_time_) -
    reinterpret_cast<char*>(&bits_valid_slots_)) + sizeof(display_time_));
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_ShowMenu)
}

void CCSUsrMsg_ShowMenu::SharedCtor() {
menu_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&bits_valid_slots_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&display_time_) -
    reinterpret_cast<char*>(&bits_valid_slots_)) + sizeof(display_time_));
}

CCSUsrMsg_ShowMenu::~CCSUsrMsg_ShowMenu() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_ShowMenu)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCSUsrMsg_ShowMenu::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  menu_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CCSUsrMsg_ShowMenu::ArenaDtor(void* object) {
  CCSUsrMsg_ShowMenu* _this = reinterpret_cast< CCSUsrMsg_ShowMenu* >(object);
  (void)_this;
}
void CCSUsrMsg_ShowMenu::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCSUsrMsg_ShowMenu::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCSUsrMsg_ShowMenu::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_ShowMenu)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    menu_string_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&bits_valid_slots_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&display_time_) -
        reinterpret_cast<char*>(&bits_valid_slots_)) + sizeof(display_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_ShowMenu::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 bits_valid_slots = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_bits_valid_slots(&has_bits);
          bits_valid_slots_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 display_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_display_time(&has_bits);
          display_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string menu_string = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_menu_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCSUsrMsg_ShowMenu.menu_string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCSUsrMsg_ShowMenu::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_ShowMenu)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 bits_valid_slots = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_bits_valid_slots(), target);
  }

  // optional int32 display_time = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_display_time(), target);
  }

  // optional string menu_string = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_menu_string().data(), static_cast<int>(this->_internal_menu_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCSUsrMsg_ShowMenu.menu_string");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_menu_string(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_ShowMenu)
  return target;
}

size_t CCSUsrMsg_ShowMenu::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_ShowMenu)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string menu_string = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_menu_string());
    }

    // optional int32 bits_valid_slots = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_bits_valid_slots());
    }

    // optional int32 display_time = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_display_time());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_ShowMenu::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCSUsrMsg_ShowMenu::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_ShowMenu::GetClassData() const { return &_class_data_; }

void CCSUsrMsg_ShowMenu::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCSUsrMsg_ShowMenu *>(to)->MergeFrom(
      static_cast<const CCSUsrMsg_ShowMenu &>(from));
}


void CCSUsrMsg_ShowMenu::MergeFrom(const CCSUsrMsg_ShowMenu& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_ShowMenu)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_menu_string(from._internal_menu_string());
    }
    if (cached_has_bits & 0x00000002u) {
      bits_valid_slots_ = from.bits_valid_slots_;
    }
    if (cached_has_bits & 0x00000004u) {
      display_time_ = from.display_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_ShowMenu::CopyFrom(const CCSUsrMsg_ShowMenu& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_ShowMenu)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_ShowMenu::IsInitialized() const {
  return true;
}

void CCSUsrMsg_ShowMenu::InternalSwap(CCSUsrMsg_ShowMenu* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &menu_string_, lhs_arena,
      &other->menu_string_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCSUsrMsg_ShowMenu, display_time_)
      + sizeof(CCSUsrMsg_ShowMenu::display_time_)
      - PROTOBUF_FIELD_OFFSET(CCSUsrMsg_ShowMenu, bits_valid_slots_)>(
          reinterpret_cast<char*>(&bits_valid_slots_),
          reinterpret_cast<char*>(&other->bits_valid_slots_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_ShowMenu::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[52]);
}

// ===================================================================

class CCSUsrMsg_BarTime::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_BarTime>()._has_bits_);
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCSUsrMsg_BarTime::CCSUsrMsg_BarTime(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_BarTime)
}
CCSUsrMsg_BarTime::CCSUsrMsg_BarTime(const CCSUsrMsg_BarTime& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_time()) {
    time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_time(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_BarTime)
}

void CCSUsrMsg_BarTime::SharedCtor() {
time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CCSUsrMsg_BarTime::~CCSUsrMsg_BarTime() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_BarTime)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCSUsrMsg_BarTime::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  time_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CCSUsrMsg_BarTime::ArenaDtor(void* object) {
  CCSUsrMsg_BarTime* _this = reinterpret_cast< CCSUsrMsg_BarTime* >(object);
  (void)_this;
}
void CCSUsrMsg_BarTime::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCSUsrMsg_BarTime::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCSUsrMsg_BarTime::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_BarTime)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    time_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_BarTime::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_time();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCSUsrMsg_BarTime.time");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCSUsrMsg_BarTime::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_BarTime)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string time = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_time().data(), static_cast<int>(this->_internal_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCSUsrMsg_BarTime.time");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_BarTime)
  return target;
}

size_t CCSUsrMsg_BarTime::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_BarTime)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string time = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_time());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_BarTime::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCSUsrMsg_BarTime::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_BarTime::GetClassData() const { return &_class_data_; }

void CCSUsrMsg_BarTime::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCSUsrMsg_BarTime *>(to)->MergeFrom(
      static_cast<const CCSUsrMsg_BarTime &>(from));
}


void CCSUsrMsg_BarTime::MergeFrom(const CCSUsrMsg_BarTime& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_BarTime)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_time()) {
    _internal_set_time(from._internal_time());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_BarTime::CopyFrom(const CCSUsrMsg_BarTime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_BarTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_BarTime::IsInitialized() const {
  return true;
}

void CCSUsrMsg_BarTime::InternalSwap(CCSUsrMsg_BarTime* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &time_, lhs_arena,
      &other->time_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_BarTime::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[53]);
}

// ===================================================================

class CCSUsrMsg_AmmoDenied::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_AmmoDenied>()._has_bits_);
  static void set_has_ammoidx(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCSUsrMsg_AmmoDenied::CCSUsrMsg_AmmoDenied(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_AmmoDenied)
}
CCSUsrMsg_AmmoDenied::CCSUsrMsg_AmmoDenied(const CCSUsrMsg_AmmoDenied& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ammoidx_ = from.ammoidx_;
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_AmmoDenied)
}

void CCSUsrMsg_AmmoDenied::SharedCtor() {
ammoidx_ = 0;
}

CCSUsrMsg_AmmoDenied::~CCSUsrMsg_AmmoDenied() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_AmmoDenied)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCSUsrMsg_AmmoDenied::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCSUsrMsg_AmmoDenied::ArenaDtor(void* object) {
  CCSUsrMsg_AmmoDenied* _this = reinterpret_cast< CCSUsrMsg_AmmoDenied* >(object);
  (void)_this;
}
void CCSUsrMsg_AmmoDenied::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCSUsrMsg_AmmoDenied::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCSUsrMsg_AmmoDenied::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_AmmoDenied)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ammoidx_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_AmmoDenied::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 ammoIdx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ammoidx(&has_bits);
          ammoidx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCSUsrMsg_AmmoDenied::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_AmmoDenied)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ammoIdx = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ammoidx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_AmmoDenied)
  return target;
}

size_t CCSUsrMsg_AmmoDenied::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_AmmoDenied)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 ammoIdx = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_ammoidx());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_AmmoDenied::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCSUsrMsg_AmmoDenied::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_AmmoDenied::GetClassData() const { return &_class_data_; }

void CCSUsrMsg_AmmoDenied::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCSUsrMsg_AmmoDenied *>(to)->MergeFrom(
      static_cast<const CCSUsrMsg_AmmoDenied &>(from));
}


void CCSUsrMsg_AmmoDenied::MergeFrom(const CCSUsrMsg_AmmoDenied& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_AmmoDenied)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_ammoidx()) {
    _internal_set_ammoidx(from._internal_ammoidx());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_AmmoDenied::CopyFrom(const CCSUsrMsg_AmmoDenied& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_AmmoDenied)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_AmmoDenied::IsInitialized() const {
  return true;
}

void CCSUsrMsg_AmmoDenied::InternalSwap(CCSUsrMsg_AmmoDenied* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ammoidx_, other->ammoidx_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_AmmoDenied::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[54]);
}

// ===================================================================

class CCSUsrMsg_MarkAchievement::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_MarkAchievement>()._has_bits_);
  static void set_has_achievement(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCSUsrMsg_MarkAchievement::CCSUsrMsg_MarkAchievement(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_MarkAchievement)
}
CCSUsrMsg_MarkAchievement::CCSUsrMsg_MarkAchievement(const CCSUsrMsg_MarkAchievement& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  achievement_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_achievement()) {
    achievement_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_achievement(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_MarkAchievement)
}

void CCSUsrMsg_MarkAchievement::SharedCtor() {
achievement_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CCSUsrMsg_MarkAchievement::~CCSUsrMsg_MarkAchievement() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_MarkAchievement)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCSUsrMsg_MarkAchievement::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  achievement_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CCSUsrMsg_MarkAchievement::ArenaDtor(void* object) {
  CCSUsrMsg_MarkAchievement* _this = reinterpret_cast< CCSUsrMsg_MarkAchievement* >(object);
  (void)_this;
}
void CCSUsrMsg_MarkAchievement::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCSUsrMsg_MarkAchievement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCSUsrMsg_MarkAchievement::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_MarkAchievement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    achievement_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_MarkAchievement::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string achievement = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_achievement();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCSUsrMsg_MarkAchievement.achievement");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCSUsrMsg_MarkAchievement::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_MarkAchievement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string achievement = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_achievement().data(), static_cast<int>(this->_internal_achievement().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCSUsrMsg_MarkAchievement.achievement");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_achievement(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_MarkAchievement)
  return target;
}

size_t CCSUsrMsg_MarkAchievement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_MarkAchievement)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string achievement = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_achievement());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_MarkAchievement::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCSUsrMsg_MarkAchievement::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_MarkAchievement::GetClassData() const { return &_class_data_; }

void CCSUsrMsg_MarkAchievement::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCSUsrMsg_MarkAchievement *>(to)->MergeFrom(
      static_cast<const CCSUsrMsg_MarkAchievement &>(from));
}


void CCSUsrMsg_MarkAchievement::MergeFrom(const CCSUsrMsg_MarkAchievement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_MarkAchievement)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_achievement()) {
    _internal_set_achievement(from._internal_achievement());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_MarkAchievement::CopyFrom(const CCSUsrMsg_MarkAchievement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_MarkAchievement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_MarkAchievement::IsInitialized() const {
  return true;
}

void CCSUsrMsg_MarkAchievement::InternalSwap(CCSUsrMsg_MarkAchievement* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &achievement_, lhs_arena,
      &other->achievement_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_MarkAchievement::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[55]);
}

// ===================================================================

class CCSUsrMsg_MatchStatsUpdate::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_MatchStatsUpdate>()._has_bits_);
  static void set_has_update(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCSUsrMsg_MatchStatsUpdate::CCSUsrMsg_MatchStatsUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_MatchStatsUpdate)
}
CCSUsrMsg_MatchStatsUpdate::CCSUsrMsg_MatchStatsUpdate(const CCSUsrMsg_MatchStatsUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  update_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_update()) {
    update_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_update(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_MatchStatsUpdate)
}

void CCSUsrMsg_MatchStatsUpdate::SharedCtor() {
update_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CCSUsrMsg_MatchStatsUpdate::~CCSUsrMsg_MatchStatsUpdate() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_MatchStatsUpdate)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCSUsrMsg_MatchStatsUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  update_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CCSUsrMsg_MatchStatsUpdate::ArenaDtor(void* object) {
  CCSUsrMsg_MatchStatsUpdate* _this = reinterpret_cast< CCSUsrMsg_MatchStatsUpdate* >(object);
  (void)_this;
}
void CCSUsrMsg_MatchStatsUpdate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCSUsrMsg_MatchStatsUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCSUsrMsg_MatchStatsUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_MatchStatsUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    update_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_MatchStatsUpdate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string update = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_update();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCSUsrMsg_MatchStatsUpdate.update");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCSUsrMsg_MatchStatsUpdate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_MatchStatsUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string update = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_update().data(), static_cast<int>(this->_internal_update().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCSUsrMsg_MatchStatsUpdate.update");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_update(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_MatchStatsUpdate)
  return target;
}

size_t CCSUsrMsg_MatchStatsUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_MatchStatsUpdate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string update = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_update());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_MatchStatsUpdate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCSUsrMsg_MatchStatsUpdate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_MatchStatsUpdate::GetClassData() const { return &_class_data_; }

void CCSUsrMsg_MatchStatsUpdate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCSUsrMsg_MatchStatsUpdate *>(to)->MergeFrom(
      static_cast<const CCSUsrMsg_MatchStatsUpdate &>(from));
}


void CCSUsrMsg_MatchStatsUpdate::MergeFrom(const CCSUsrMsg_MatchStatsUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_MatchStatsUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_update()) {
    _internal_set_update(from._internal_update());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_MatchStatsUpdate::CopyFrom(const CCSUsrMsg_MatchStatsUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_MatchStatsUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_MatchStatsUpdate::IsInitialized() const {
  return true;
}

void CCSUsrMsg_MatchStatsUpdate::InternalSwap(CCSUsrMsg_MatchStatsUpdate* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &update_, lhs_arena,
      &other->update_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_MatchStatsUpdate::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[56]);
}

// ===================================================================

class CCSUsrMsg_ItemDrop::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_ItemDrop>()._has_bits_);
  static void set_has_itemid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_death(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CCSUsrMsg_ItemDrop::CCSUsrMsg_ItemDrop(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_ItemDrop)
}
CCSUsrMsg_ItemDrop::CCSUsrMsg_ItemDrop(const CCSUsrMsg_ItemDrop& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&itemid_, &from.itemid_,
    static_cast<size_t>(reinterpret_cast<char*>(&death_) -
    reinterpret_cast<char*>(&itemid_)) + sizeof(death_));
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_ItemDrop)
}

void CCSUsrMsg_ItemDrop::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&itemid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&death_) -
    reinterpret_cast<char*>(&itemid_)) + sizeof(death_));
}

CCSUsrMsg_ItemDrop::~CCSUsrMsg_ItemDrop() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_ItemDrop)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCSUsrMsg_ItemDrop::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCSUsrMsg_ItemDrop::ArenaDtor(void* object) {
  CCSUsrMsg_ItemDrop* _this = reinterpret_cast< CCSUsrMsg_ItemDrop* >(object);
  (void)_this;
}
void CCSUsrMsg_ItemDrop::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCSUsrMsg_ItemDrop::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCSUsrMsg_ItemDrop::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_ItemDrop)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&itemid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&death_) -
        reinterpret_cast<char*>(&itemid_)) + sizeof(death_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_ItemDrop::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 itemid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_itemid(&has_bits);
          itemid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool death = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_death(&has_bits);
          death_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCSUsrMsg_ItemDrop::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_ItemDrop)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 itemid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_itemid(), target);
  }

  // optional bool death = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_death(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_ItemDrop)
  return target;
}

size_t CCSUsrMsg_ItemDrop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_ItemDrop)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 itemid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_itemid());
    }

    // optional bool death = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_ItemDrop::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCSUsrMsg_ItemDrop::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_ItemDrop::GetClassData() const { return &_class_data_; }

void CCSUsrMsg_ItemDrop::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCSUsrMsg_ItemDrop *>(to)->MergeFrom(
      static_cast<const CCSUsrMsg_ItemDrop &>(from));
}


void CCSUsrMsg_ItemDrop::MergeFrom(const CCSUsrMsg_ItemDrop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_ItemDrop)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      itemid_ = from.itemid_;
    }
    if (cached_has_bits & 0x00000002u) {
      death_ = from.death_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_ItemDrop::CopyFrom(const CCSUsrMsg_ItemDrop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_ItemDrop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_ItemDrop::IsInitialized() const {
  return true;
}

void CCSUsrMsg_ItemDrop::InternalSwap(CCSUsrMsg_ItemDrop* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCSUsrMsg_ItemDrop, death_)
      + sizeof(CCSUsrMsg_ItemDrop::death_)
      - PROTOBUF_FIELD_OFFSET(CCSUsrMsg_ItemDrop, itemid_)>(
          reinterpret_cast<char*>(&itemid_),
          reinterpret_cast<char*>(&other->itemid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_ItemDrop::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[57]);
}

// ===================================================================

class CCSUsrMsg_GlowPropTurnOff::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_GlowPropTurnOff>()._has_bits_);
  static void set_has_entidx(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCSUsrMsg_GlowPropTurnOff::CCSUsrMsg_GlowPropTurnOff(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_GlowPropTurnOff)
}
CCSUsrMsg_GlowPropTurnOff::CCSUsrMsg_GlowPropTurnOff(const CCSUsrMsg_GlowPropTurnOff& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  entidx_ = from.entidx_;
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_GlowPropTurnOff)
}

void CCSUsrMsg_GlowPropTurnOff::SharedCtor() {
entidx_ = 0;
}

CCSUsrMsg_GlowPropTurnOff::~CCSUsrMsg_GlowPropTurnOff() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_GlowPropTurnOff)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCSUsrMsg_GlowPropTurnOff::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCSUsrMsg_GlowPropTurnOff::ArenaDtor(void* object) {
  CCSUsrMsg_GlowPropTurnOff* _this = reinterpret_cast< CCSUsrMsg_GlowPropTurnOff* >(object);
  (void)_this;
}
void CCSUsrMsg_GlowPropTurnOff::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCSUsrMsg_GlowPropTurnOff::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCSUsrMsg_GlowPropTurnOff::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_GlowPropTurnOff)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entidx_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_GlowPropTurnOff::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 entidx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_entidx(&has_bits);
          entidx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCSUsrMsg_GlowPropTurnOff::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_GlowPropTurnOff)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 entidx = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_entidx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_GlowPropTurnOff)
  return target;
}

size_t CCSUsrMsg_GlowPropTurnOff::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_GlowPropTurnOff)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 entidx = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_entidx());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_GlowPropTurnOff::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCSUsrMsg_GlowPropTurnOff::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_GlowPropTurnOff::GetClassData() const { return &_class_data_; }

void CCSUsrMsg_GlowPropTurnOff::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCSUsrMsg_GlowPropTurnOff *>(to)->MergeFrom(
      static_cast<const CCSUsrMsg_GlowPropTurnOff &>(from));
}


void CCSUsrMsg_GlowPropTurnOff::MergeFrom(const CCSUsrMsg_GlowPropTurnOff& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_GlowPropTurnOff)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_entidx()) {
    _internal_set_entidx(from._internal_entidx());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_GlowPropTurnOff::CopyFrom(const CCSUsrMsg_GlowPropTurnOff& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_GlowPropTurnOff)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_GlowPropTurnOff::IsInitialized() const {
  return true;
}

void CCSUsrMsg_GlowPropTurnOff::InternalSwap(CCSUsrMsg_GlowPropTurnOff* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(entidx_, other->entidx_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_GlowPropTurnOff::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[58]);
}

// ===================================================================

class CCSUsrMsg_RoundBackupFilenames::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_RoundBackupFilenames>()._has_bits_);
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_index(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_filename(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_nicename(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CCSUsrMsg_RoundBackupFilenames::CCSUsrMsg_RoundBackupFilenames(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_RoundBackupFilenames)
}
CCSUsrMsg_RoundBackupFilenames::CCSUsrMsg_RoundBackupFilenames(const CCSUsrMsg_RoundBackupFilenames& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_filename()) {
    filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_filename(), 
      GetArenaForAllocation());
  }
  nicename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_nicename()) {
    nicename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nicename(), 
      GetArenaForAllocation());
  }
  ::memcpy(&count_, &from.count_,
    static_cast<size_t>(reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&count_)) + sizeof(index_));
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_RoundBackupFilenames)
}

void CCSUsrMsg_RoundBackupFilenames::SharedCtor() {
filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
nicename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&count_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&count_)) + sizeof(index_));
}

CCSUsrMsg_RoundBackupFilenames::~CCSUsrMsg_RoundBackupFilenames() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_RoundBackupFilenames)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCSUsrMsg_RoundBackupFilenames::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nicename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CCSUsrMsg_RoundBackupFilenames::ArenaDtor(void* object) {
  CCSUsrMsg_RoundBackupFilenames* _this = reinterpret_cast< CCSUsrMsg_RoundBackupFilenames* >(object);
  (void)_this;
}
void CCSUsrMsg_RoundBackupFilenames::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCSUsrMsg_RoundBackupFilenames::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCSUsrMsg_RoundBackupFilenames::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_RoundBackupFilenames)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      filename_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      nicename_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&index_) -
        reinterpret_cast<char*>(&count_)) + sizeof(index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_RoundBackupFilenames::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_count(&has_bits);
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_index(&has_bits);
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string filename = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCSUsrMsg_RoundBackupFilenames.filename");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string nicename = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_nicename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCSUsrMsg_RoundBackupFilenames.nicename");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCSUsrMsg_RoundBackupFilenames::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_RoundBackupFilenames)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 count = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_count(), target);
  }

  // optional int32 index = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_index(), target);
  }

  // optional string filename = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_filename().data(), static_cast<int>(this->_internal_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCSUsrMsg_RoundBackupFilenames.filename");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_filename(), target);
  }

  // optional string nicename = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_nicename().data(), static_cast<int>(this->_internal_nicename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCSUsrMsg_RoundBackupFilenames.nicename");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_nicename(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_RoundBackupFilenames)
  return target;
}

size_t CCSUsrMsg_RoundBackupFilenames::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_RoundBackupFilenames)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string filename = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_filename());
    }

    // optional string nicename = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_nicename());
    }

    // optional int32 count = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_count());
    }

    // optional int32 index = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_index());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_RoundBackupFilenames::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCSUsrMsg_RoundBackupFilenames::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_RoundBackupFilenames::GetClassData() const { return &_class_data_; }

void CCSUsrMsg_RoundBackupFilenames::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCSUsrMsg_RoundBackupFilenames *>(to)->MergeFrom(
      static_cast<const CCSUsrMsg_RoundBackupFilenames &>(from));
}


void CCSUsrMsg_RoundBackupFilenames::MergeFrom(const CCSUsrMsg_RoundBackupFilenames& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_RoundBackupFilenames)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_filename(from._internal_filename());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_nicename(from._internal_nicename());
    }
    if (cached_has_bits & 0x00000004u) {
      count_ = from.count_;
    }
    if (cached_has_bits & 0x00000008u) {
      index_ = from.index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_RoundBackupFilenames::CopyFrom(const CCSUsrMsg_RoundBackupFilenames& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_RoundBackupFilenames)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_RoundBackupFilenames::IsInitialized() const {
  return true;
}

void CCSUsrMsg_RoundBackupFilenames::InternalSwap(CCSUsrMsg_RoundBackupFilenames* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &filename_, lhs_arena,
      &other->filename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &nicename_, lhs_arena,
      &other->nicename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCSUsrMsg_RoundBackupFilenames, index_)
      + sizeof(CCSUsrMsg_RoundBackupFilenames::index_)
      - PROTOBUF_FIELD_OFFSET(CCSUsrMsg_RoundBackupFilenames, count_)>(
          reinterpret_cast<char*>(&count_),
          reinterpret_cast<char*>(&other->count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_RoundBackupFilenames::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[59]);
}

// ===================================================================

class CCSUsrMsg_ResetHud::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_ResetHud>()._has_bits_);
  static void set_has_reset(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCSUsrMsg_ResetHud::CCSUsrMsg_ResetHud(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_ResetHud)
}
CCSUsrMsg_ResetHud::CCSUsrMsg_ResetHud(const CCSUsrMsg_ResetHud& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  reset_ = from.reset_;
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_ResetHud)
}

void CCSUsrMsg_ResetHud::SharedCtor() {
reset_ = false;
}

CCSUsrMsg_ResetHud::~CCSUsrMsg_ResetHud() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_ResetHud)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCSUsrMsg_ResetHud::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCSUsrMsg_ResetHud::ArenaDtor(void* object) {
  CCSUsrMsg_ResetHud* _this = reinterpret_cast< CCSUsrMsg_ResetHud* >(object);
  (void)_this;
}
void CCSUsrMsg_ResetHud::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCSUsrMsg_ResetHud::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCSUsrMsg_ResetHud::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_ResetHud)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reset_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_ResetHud::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool reset = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_reset(&has_bits);
          reset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCSUsrMsg_ResetHud::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_ResetHud)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool reset = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_reset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_ResetHud)
  return target;
}

size_t CCSUsrMsg_ResetHud::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_ResetHud)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool reset = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_ResetHud::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCSUsrMsg_ResetHud::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_ResetHud::GetClassData() const { return &_class_data_; }

void CCSUsrMsg_ResetHud::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCSUsrMsg_ResetHud *>(to)->MergeFrom(
      static_cast<const CCSUsrMsg_ResetHud &>(from));
}


void CCSUsrMsg_ResetHud::MergeFrom(const CCSUsrMsg_ResetHud& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_ResetHud)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_reset()) {
    _internal_set_reset(from._internal_reset());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_ResetHud::CopyFrom(const CCSUsrMsg_ResetHud& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_ResetHud)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_ResetHud::IsInitialized() const {
  return true;
}

void CCSUsrMsg_ResetHud::InternalSwap(CCSUsrMsg_ResetHud* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(reset_, other->reset_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_ResetHud::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[60]);
}

// ===================================================================

class CCSUsrMsg_GameTitle::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_GameTitle>()._has_bits_);
  static void set_has_dummy(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCSUsrMsg_GameTitle::CCSUsrMsg_GameTitle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_GameTitle)
}
CCSUsrMsg_GameTitle::CCSUsrMsg_GameTitle(const CCSUsrMsg_GameTitle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  dummy_ = from.dummy_;
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_GameTitle)
}

void CCSUsrMsg_GameTitle::SharedCtor() {
dummy_ = 0;
}

CCSUsrMsg_GameTitle::~CCSUsrMsg_GameTitle() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_GameTitle)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCSUsrMsg_GameTitle::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCSUsrMsg_GameTitle::ArenaDtor(void* object) {
  CCSUsrMsg_GameTitle* _this = reinterpret_cast< CCSUsrMsg_GameTitle* >(object);
  (void)_this;
}
void CCSUsrMsg_GameTitle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCSUsrMsg_GameTitle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCSUsrMsg_GameTitle::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_GameTitle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dummy_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_GameTitle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 dummy = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_dummy(&has_bits);
          dummy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCSUsrMsg_GameTitle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_GameTitle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 dummy = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_dummy(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_GameTitle)
  return target;
}

size_t CCSUsrMsg_GameTitle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_GameTitle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 dummy = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_dummy());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_GameTitle::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCSUsrMsg_GameTitle::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_GameTitle::GetClassData() const { return &_class_data_; }

void CCSUsrMsg_GameTitle::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCSUsrMsg_GameTitle *>(to)->MergeFrom(
      static_cast<const CCSUsrMsg_GameTitle &>(from));
}


void CCSUsrMsg_GameTitle::MergeFrom(const CCSUsrMsg_GameTitle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_GameTitle)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_dummy()) {
    _internal_set_dummy(from._internal_dummy());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_GameTitle::CopyFrom(const CCSUsrMsg_GameTitle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_GameTitle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_GameTitle::IsInitialized() const {
  return true;
}

void CCSUsrMsg_GameTitle::InternalSwap(CCSUsrMsg_GameTitle* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(dummy_, other->dummy_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_GameTitle::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[61]);
}

// ===================================================================

class CCSUsrMsg_RequestState::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_RequestState>()._has_bits_);
  static void set_has_dummy(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCSUsrMsg_RequestState::CCSUsrMsg_RequestState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_RequestState)
}
CCSUsrMsg_RequestState::CCSUsrMsg_RequestState(const CCSUsrMsg_RequestState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  dummy_ = from.dummy_;
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_RequestState)
}

void CCSUsrMsg_RequestState::SharedCtor() {
dummy_ = 0;
}

CCSUsrMsg_RequestState::~CCSUsrMsg_RequestState() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_RequestState)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCSUsrMsg_RequestState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCSUsrMsg_RequestState::ArenaDtor(void* object) {
  CCSUsrMsg_RequestState* _this = reinterpret_cast< CCSUsrMsg_RequestState* >(object);
  (void)_this;
}
void CCSUsrMsg_RequestState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCSUsrMsg_RequestState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCSUsrMsg_RequestState::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_RequestState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dummy_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_RequestState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 dummy = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_dummy(&has_bits);
          dummy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCSUsrMsg_RequestState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_RequestState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 dummy = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_dummy(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_RequestState)
  return target;
}

size_t CCSUsrMsg_RequestState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_RequestState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 dummy = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_dummy());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_RequestState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCSUsrMsg_RequestState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_RequestState::GetClassData() const { return &_class_data_; }

void CCSUsrMsg_RequestState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCSUsrMsg_RequestState *>(to)->MergeFrom(
      static_cast<const CCSUsrMsg_RequestState &>(from));
}


void CCSUsrMsg_RequestState::MergeFrom(const CCSUsrMsg_RequestState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_RequestState)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_dummy()) {
    _internal_set_dummy(from._internal_dummy());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_RequestState::CopyFrom(const CCSUsrMsg_RequestState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_RequestState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_RequestState::IsInitialized() const {
  return true;
}

void CCSUsrMsg_RequestState::InternalSwap(CCSUsrMsg_RequestState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(dummy_, other->dummy_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_RequestState::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[62]);
}

// ===================================================================

class CCSUsrMsg_StopSpectatorMode::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_StopSpectatorMode>()._has_bits_);
  static void set_has_dummy(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCSUsrMsg_StopSpectatorMode::CCSUsrMsg_StopSpectatorMode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_StopSpectatorMode)
}
CCSUsrMsg_StopSpectatorMode::CCSUsrMsg_StopSpectatorMode(const CCSUsrMsg_StopSpectatorMode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  dummy_ = from.dummy_;
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_StopSpectatorMode)
}

void CCSUsrMsg_StopSpectatorMode::SharedCtor() {
dummy_ = 0;
}

CCSUsrMsg_StopSpectatorMode::~CCSUsrMsg_StopSpectatorMode() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_StopSpectatorMode)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCSUsrMsg_StopSpectatorMode::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCSUsrMsg_StopSpectatorMode::ArenaDtor(void* object) {
  CCSUsrMsg_StopSpectatorMode* _this = reinterpret_cast< CCSUsrMsg_StopSpectatorMode* >(object);
  (void)_this;
}
void CCSUsrMsg_StopSpectatorMode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCSUsrMsg_StopSpectatorMode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCSUsrMsg_StopSpectatorMode::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_StopSpectatorMode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dummy_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_StopSpectatorMode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 dummy = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_dummy(&has_bits);
          dummy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCSUsrMsg_StopSpectatorMode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_StopSpectatorMode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 dummy = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_dummy(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_StopSpectatorMode)
  return target;
}

size_t CCSUsrMsg_StopSpectatorMode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_StopSpectatorMode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 dummy = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_dummy());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_StopSpectatorMode::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCSUsrMsg_StopSpectatorMode::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_StopSpectatorMode::GetClassData() const { return &_class_data_; }

void CCSUsrMsg_StopSpectatorMode::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCSUsrMsg_StopSpectatorMode *>(to)->MergeFrom(
      static_cast<const CCSUsrMsg_StopSpectatorMode &>(from));
}


void CCSUsrMsg_StopSpectatorMode::MergeFrom(const CCSUsrMsg_StopSpectatorMode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_StopSpectatorMode)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_dummy()) {
    _internal_set_dummy(from._internal_dummy());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_StopSpectatorMode::CopyFrom(const CCSUsrMsg_StopSpectatorMode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_StopSpectatorMode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_StopSpectatorMode::IsInitialized() const {
  return true;
}

void CCSUsrMsg_StopSpectatorMode::InternalSwap(CCSUsrMsg_StopSpectatorMode* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(dummy_, other->dummy_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_StopSpectatorMode::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[63]);
}

// ===================================================================

class CCSUsrMsg_DisconnectToLobby::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_DisconnectToLobby>()._has_bits_);
  static void set_has_dummy(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCSUsrMsg_DisconnectToLobby::CCSUsrMsg_DisconnectToLobby(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_DisconnectToLobby)
}
CCSUsrMsg_DisconnectToLobby::CCSUsrMsg_DisconnectToLobby(const CCSUsrMsg_DisconnectToLobby& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  dummy_ = from.dummy_;
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_DisconnectToLobby)
}

void CCSUsrMsg_DisconnectToLobby::SharedCtor() {
dummy_ = 0;
}

CCSUsrMsg_DisconnectToLobby::~CCSUsrMsg_DisconnectToLobby() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_DisconnectToLobby)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCSUsrMsg_DisconnectToLobby::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCSUsrMsg_DisconnectToLobby::ArenaDtor(void* object) {
  CCSUsrMsg_DisconnectToLobby* _this = reinterpret_cast< CCSUsrMsg_DisconnectToLobby* >(object);
  (void)_this;
}
void CCSUsrMsg_DisconnectToLobby::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCSUsrMsg_DisconnectToLobby::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCSUsrMsg_DisconnectToLobby::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_DisconnectToLobby)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dummy_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_DisconnectToLobby::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 dummy = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_dummy(&has_bits);
          dummy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCSUsrMsg_DisconnectToLobby::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_DisconnectToLobby)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 dummy = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_dummy(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_DisconnectToLobby)
  return target;
}

size_t CCSUsrMsg_DisconnectToLobby::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_DisconnectToLobby)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 dummy = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_dummy());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_DisconnectToLobby::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCSUsrMsg_DisconnectToLobby::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_DisconnectToLobby::GetClassData() const { return &_class_data_; }

void CCSUsrMsg_DisconnectToLobby::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCSUsrMsg_DisconnectToLobby *>(to)->MergeFrom(
      static_cast<const CCSUsrMsg_DisconnectToLobby &>(from));
}


void CCSUsrMsg_DisconnectToLobby::MergeFrom(const CCSUsrMsg_DisconnectToLobby& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_DisconnectToLobby)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_dummy()) {
    _internal_set_dummy(from._internal_dummy());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_DisconnectToLobby::CopyFrom(const CCSUsrMsg_DisconnectToLobby& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_DisconnectToLobby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_DisconnectToLobby::IsInitialized() const {
  return true;
}

void CCSUsrMsg_DisconnectToLobby::InternalSwap(CCSUsrMsg_DisconnectToLobby* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(dummy_, other->dummy_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_DisconnectToLobby::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[64]);
}

// ===================================================================

class CCSUsrMsg_WarmupHasEnded::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_WarmupHasEnded>()._has_bits_);
  static void set_has_dummy(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCSUsrMsg_WarmupHasEnded::CCSUsrMsg_WarmupHasEnded(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_WarmupHasEnded)
}
CCSUsrMsg_WarmupHasEnded::CCSUsrMsg_WarmupHasEnded(const CCSUsrMsg_WarmupHasEnded& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  dummy_ = from.dummy_;
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_WarmupHasEnded)
}

void CCSUsrMsg_WarmupHasEnded::SharedCtor() {
dummy_ = 0;
}

CCSUsrMsg_WarmupHasEnded::~CCSUsrMsg_WarmupHasEnded() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_WarmupHasEnded)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCSUsrMsg_WarmupHasEnded::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCSUsrMsg_WarmupHasEnded::ArenaDtor(void* object) {
  CCSUsrMsg_WarmupHasEnded* _this = reinterpret_cast< CCSUsrMsg_WarmupHasEnded* >(object);
  (void)_this;
}
void CCSUsrMsg_WarmupHasEnded::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCSUsrMsg_WarmupHasEnded::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCSUsrMsg_WarmupHasEnded::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_WarmupHasEnded)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dummy_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_WarmupHasEnded::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 dummy = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_dummy(&has_bits);
          dummy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCSUsrMsg_WarmupHasEnded::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_WarmupHasEnded)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 dummy = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_dummy(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_WarmupHasEnded)
  return target;
}

size_t CCSUsrMsg_WarmupHasEnded::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_WarmupHasEnded)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 dummy = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_dummy());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_WarmupHasEnded::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCSUsrMsg_WarmupHasEnded::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_WarmupHasEnded::GetClassData() const { return &_class_data_; }

void CCSUsrMsg_WarmupHasEnded::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCSUsrMsg_WarmupHasEnded *>(to)->MergeFrom(
      static_cast<const CCSUsrMsg_WarmupHasEnded &>(from));
}


void CCSUsrMsg_WarmupHasEnded::MergeFrom(const CCSUsrMsg_WarmupHasEnded& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_WarmupHasEnded)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_dummy()) {
    _internal_set_dummy(from._internal_dummy());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_WarmupHasEnded::CopyFrom(const CCSUsrMsg_WarmupHasEnded& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_WarmupHasEnded)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_WarmupHasEnded::IsInitialized() const {
  return true;
}

void CCSUsrMsg_WarmupHasEnded::InternalSwap(CCSUsrMsg_WarmupHasEnded* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(dummy_, other->dummy_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_WarmupHasEnded::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[65]);
}

// ===================================================================

class CCSUsrMsg_ClientInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_ClientInfo>()._has_bits_);
  static void set_has_dummy(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCSUsrMsg_ClientInfo::CCSUsrMsg_ClientInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_ClientInfo)
}
CCSUsrMsg_ClientInfo::CCSUsrMsg_ClientInfo(const CCSUsrMsg_ClientInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  dummy_ = from.dummy_;
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_ClientInfo)
}

void CCSUsrMsg_ClientInfo::SharedCtor() {
dummy_ = 0;
}

CCSUsrMsg_ClientInfo::~CCSUsrMsg_ClientInfo() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_ClientInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCSUsrMsg_ClientInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCSUsrMsg_ClientInfo::ArenaDtor(void* object) {
  CCSUsrMsg_ClientInfo* _this = reinterpret_cast< CCSUsrMsg_ClientInfo* >(object);
  (void)_this;
}
void CCSUsrMsg_ClientInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCSUsrMsg_ClientInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCSUsrMsg_ClientInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_ClientInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dummy_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_ClientInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 dummy = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_dummy(&has_bits);
          dummy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCSUsrMsg_ClientInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_ClientInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 dummy = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_dummy(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_ClientInfo)
  return target;
}

size_t CCSUsrMsg_ClientInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_ClientInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 dummy = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_dummy());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_ClientInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCSUsrMsg_ClientInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_ClientInfo::GetClassData() const { return &_class_data_; }

void CCSUsrMsg_ClientInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCSUsrMsg_ClientInfo *>(to)->MergeFrom(
      static_cast<const CCSUsrMsg_ClientInfo &>(from));
}


void CCSUsrMsg_ClientInfo::MergeFrom(const CCSUsrMsg_ClientInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_ClientInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_dummy()) {
    _internal_set_dummy(from._internal_dummy());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_ClientInfo::CopyFrom(const CCSUsrMsg_ClientInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_ClientInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_ClientInfo::IsInitialized() const {
  return true;
}

void CCSUsrMsg_ClientInfo::InternalSwap(CCSUsrMsg_ClientInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(dummy_, other->dummy_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_ClientInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[66]);
}

// ===================================================================

class CCSUsrMsg_ServerRankRevealAll::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_ServerRankRevealAll>()._has_bits_);
  static void set_has_seconds_till_shutdown(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCSUsrMsg_ServerRankRevealAll::CCSUsrMsg_ServerRankRevealAll(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_ServerRankRevealAll)
}
CCSUsrMsg_ServerRankRevealAll::CCSUsrMsg_ServerRankRevealAll(const CCSUsrMsg_ServerRankRevealAll& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  seconds_till_shutdown_ = from.seconds_till_shutdown_;
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_ServerRankRevealAll)
}

void CCSUsrMsg_ServerRankRevealAll::SharedCtor() {
seconds_till_shutdown_ = 0;
}

CCSUsrMsg_ServerRankRevealAll::~CCSUsrMsg_ServerRankRevealAll() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_ServerRankRevealAll)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCSUsrMsg_ServerRankRevealAll::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCSUsrMsg_ServerRankRevealAll::ArenaDtor(void* object) {
  CCSUsrMsg_ServerRankRevealAll* _this = reinterpret_cast< CCSUsrMsg_ServerRankRevealAll* >(object);
  (void)_this;
}
void CCSUsrMsg_ServerRankRevealAll::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCSUsrMsg_ServerRankRevealAll::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCSUsrMsg_ServerRankRevealAll::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_ServerRankRevealAll)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  seconds_till_shutdown_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_ServerRankRevealAll::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 seconds_till_shutdown = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_seconds_till_shutdown(&has_bits);
          seconds_till_shutdown_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCSUsrMsg_ServerRankRevealAll::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_ServerRankRevealAll)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 seconds_till_shutdown = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_seconds_till_shutdown(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_ServerRankRevealAll)
  return target;
}

size_t CCSUsrMsg_ServerRankRevealAll::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_ServerRankRevealAll)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 seconds_till_shutdown = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_seconds_till_shutdown());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_ServerRankRevealAll::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCSUsrMsg_ServerRankRevealAll::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_ServerRankRevealAll::GetClassData() const { return &_class_data_; }

void CCSUsrMsg_ServerRankRevealAll::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCSUsrMsg_ServerRankRevealAll *>(to)->MergeFrom(
      static_cast<const CCSUsrMsg_ServerRankRevealAll &>(from));
}


void CCSUsrMsg_ServerRankRevealAll::MergeFrom(const CCSUsrMsg_ServerRankRevealAll& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_ServerRankRevealAll)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_seconds_till_shutdown()) {
    _internal_set_seconds_till_shutdown(from._internal_seconds_till_shutdown());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_ServerRankRevealAll::CopyFrom(const CCSUsrMsg_ServerRankRevealAll& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_ServerRankRevealAll)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_ServerRankRevealAll::IsInitialized() const {
  return true;
}

void CCSUsrMsg_ServerRankRevealAll::InternalSwap(CCSUsrMsg_ServerRankRevealAll* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(seconds_till_shutdown_, other->seconds_till_shutdown_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_ServerRankRevealAll::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[67]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_VGUIMenu_Subkey* Arena::CreateMaybeMessage< ::CCSUsrMsg_VGUIMenu_Subkey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_VGUIMenu_Subkey >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_VGUIMenu* Arena::CreateMaybeMessage< ::CCSUsrMsg_VGUIMenu >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_VGUIMenu >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_Geiger* Arena::CreateMaybeMessage< ::CCSUsrMsg_Geiger >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_Geiger >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_Train* Arena::CreateMaybeMessage< ::CCSUsrMsg_Train >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_Train >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_HudText* Arena::CreateMaybeMessage< ::CCSUsrMsg_HudText >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_HudText >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_SayText* Arena::CreateMaybeMessage< ::CCSUsrMsg_SayText >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_SayText >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_SayText2* Arena::CreateMaybeMessage< ::CCSUsrMsg_SayText2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_SayText2 >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_TextMsg* Arena::CreateMaybeMessage< ::CCSUsrMsg_TextMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_TextMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_HudMsg* Arena::CreateMaybeMessage< ::CCSUsrMsg_HudMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_HudMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_Shake* Arena::CreateMaybeMessage< ::CCSUsrMsg_Shake >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_Shake >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_Fade* Arena::CreateMaybeMessage< ::CCSUsrMsg_Fade >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_Fade >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_Rumble* Arena::CreateMaybeMessage< ::CCSUsrMsg_Rumble >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_Rumble >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_CloseCaption* Arena::CreateMaybeMessage< ::CCSUsrMsg_CloseCaption >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_CloseCaption >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_CloseCaptionDirect* Arena::CreateMaybeMessage< ::CCSUsrMsg_CloseCaptionDirect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_CloseCaptionDirect >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_SendAudio* Arena::CreateMaybeMessage< ::CCSUsrMsg_SendAudio >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_SendAudio >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_RawAudio* Arena::CreateMaybeMessage< ::CCSUsrMsg_RawAudio >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_RawAudio >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_VoiceMask_PlayerMask* Arena::CreateMaybeMessage< ::CCSUsrMsg_VoiceMask_PlayerMask >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_VoiceMask_PlayerMask >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_VoiceMask* Arena::CreateMaybeMessage< ::CCSUsrMsg_VoiceMask >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_VoiceMask >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_Damage* Arena::CreateMaybeMessage< ::CCSUsrMsg_Damage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_Damage >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_RadioText* Arena::CreateMaybeMessage< ::CCSUsrMsg_RadioText >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_RadioText >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_HintText* Arena::CreateMaybeMessage< ::CCSUsrMsg_HintText >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_HintText >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_KeyHintText* Arena::CreateMaybeMessage< ::CCSUsrMsg_KeyHintText >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_KeyHintText >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate* Arena::CreateMaybeMessage< ::CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_ProcessSpottedEntityUpdate* Arena::CreateMaybeMessage< ::CCSUsrMsg_ProcessSpottedEntityUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_ProcessSpottedEntityUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_SendPlayerItemDrops* Arena::CreateMaybeMessage< ::CCSUsrMsg_SendPlayerItemDrops >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_SendPlayerItemDrops >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_SendPlayerItemFound* Arena::CreateMaybeMessage< ::CCSUsrMsg_SendPlayerItemFound >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_SendPlayerItemFound >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_ReloadEffect* Arena::CreateMaybeMessage< ::CCSUsrMsg_ReloadEffect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_ReloadEffect >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_AdjustMoney* Arena::CreateMaybeMessage< ::CCSUsrMsg_AdjustMoney >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_AdjustMoney >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_ReportHit* Arena::CreateMaybeMessage< ::CCSUsrMsg_ReportHit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_ReportHit >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_KillCam* Arena::CreateMaybeMessage< ::CCSUsrMsg_KillCam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_KillCam >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_DesiredTimescale* Arena::CreateMaybeMessage< ::CCSUsrMsg_DesiredTimescale >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_DesiredTimescale >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_CurrentTimescale* Arena::CreateMaybeMessage< ::CCSUsrMsg_CurrentTimescale >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_CurrentTimescale >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_AchievementEvent* Arena::CreateMaybeMessage< ::CCSUsrMsg_AchievementEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_AchievementEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_MatchEndConditions* Arena::CreateMaybeMessage< ::CCSUsrMsg_MatchEndConditions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_MatchEndConditions >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_PlayerStatsUpdate_Stat* Arena::CreateMaybeMessage< ::CCSUsrMsg_PlayerStatsUpdate_Stat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_PlayerStatsUpdate_Stat >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_PlayerStatsUpdate* Arena::CreateMaybeMessage< ::CCSUsrMsg_PlayerStatsUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_PlayerStatsUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_DisplayInventory* Arena::CreateMaybeMessage< ::CCSUsrMsg_DisplayInventory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_DisplayInventory >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_QuestProgress* Arena::CreateMaybeMessage< ::CCSUsrMsg_QuestProgress >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_QuestProgress >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_ScoreLeaderboardData* Arena::CreateMaybeMessage< ::CCSUsrMsg_ScoreLeaderboardData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_ScoreLeaderboardData >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_PlayerDecalDigitalSignature* Arena::CreateMaybeMessage< ::CCSUsrMsg_PlayerDecalDigitalSignature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_PlayerDecalDigitalSignature >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_XRankGet* Arena::CreateMaybeMessage< ::CCSUsrMsg_XRankGet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_XRankGet >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_XRankUpd* Arena::CreateMaybeMessage< ::CCSUsrMsg_XRankUpd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_XRankUpd >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_CallVoteFailed* Arena::CreateMaybeMessage< ::CCSUsrMsg_CallVoteFailed >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_CallVoteFailed >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_VoteStart* Arena::CreateMaybeMessage< ::CCSUsrMsg_VoteStart >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_VoteStart >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_VotePass* Arena::CreateMaybeMessage< ::CCSUsrMsg_VotePass >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_VotePass >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_VoteFailed* Arena::CreateMaybeMessage< ::CCSUsrMsg_VoteFailed >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_VoteFailed >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_VoteSetup* Arena::CreateMaybeMessage< ::CCSUsrMsg_VoteSetup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_VoteSetup >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_SendLastKillerDamageToClient* Arena::CreateMaybeMessage< ::CCSUsrMsg_SendLastKillerDamageToClient >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_SendLastKillerDamageToClient >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_ServerRankUpdate_RankUpdate* Arena::CreateMaybeMessage< ::CCSUsrMsg_ServerRankUpdate_RankUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_ServerRankUpdate_RankUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_ServerRankUpdate* Arena::CreateMaybeMessage< ::CCSUsrMsg_ServerRankUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_ServerRankUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_XpUpdate* Arena::CreateMaybeMessage< ::CCSUsrMsg_XpUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_XpUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_ItemPickup* Arena::CreateMaybeMessage< ::CCSUsrMsg_ItemPickup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_ItemPickup >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_ShowMenu* Arena::CreateMaybeMessage< ::CCSUsrMsg_ShowMenu >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_ShowMenu >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_BarTime* Arena::CreateMaybeMessage< ::CCSUsrMsg_BarTime >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_BarTime >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_AmmoDenied* Arena::CreateMaybeMessage< ::CCSUsrMsg_AmmoDenied >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_AmmoDenied >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_MarkAchievement* Arena::CreateMaybeMessage< ::CCSUsrMsg_MarkAchievement >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_MarkAchievement >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_MatchStatsUpdate* Arena::CreateMaybeMessage< ::CCSUsrMsg_MatchStatsUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_MatchStatsUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_ItemDrop* Arena::CreateMaybeMessage< ::CCSUsrMsg_ItemDrop >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_ItemDrop >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_GlowPropTurnOff* Arena::CreateMaybeMessage< ::CCSUsrMsg_GlowPropTurnOff >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_GlowPropTurnOff >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_RoundBackupFilenames* Arena::CreateMaybeMessage< ::CCSUsrMsg_RoundBackupFilenames >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_RoundBackupFilenames >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_ResetHud* Arena::CreateMaybeMessage< ::CCSUsrMsg_ResetHud >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_ResetHud >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_GameTitle* Arena::CreateMaybeMessage< ::CCSUsrMsg_GameTitle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_GameTitle >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_RequestState* Arena::CreateMaybeMessage< ::CCSUsrMsg_RequestState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_RequestState >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_StopSpectatorMode* Arena::CreateMaybeMessage< ::CCSUsrMsg_StopSpectatorMode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_StopSpectatorMode >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_DisconnectToLobby* Arena::CreateMaybeMessage< ::CCSUsrMsg_DisconnectToLobby >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_DisconnectToLobby >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_WarmupHasEnded* Arena::CreateMaybeMessage< ::CCSUsrMsg_WarmupHasEnded >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_WarmupHasEnded >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_ClientInfo* Arena::CreateMaybeMessage< ::CCSUsrMsg_ClientInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_ClientInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_ServerRankRevealAll* Arena::CreateMaybeMessage< ::CCSUsrMsg_ServerRankRevealAll >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_ServerRankRevealAll >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
