// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: netmessages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "netmessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
class CMsgVectorDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgVector> {
} _CMsgVector_default_instance_;
class CMsgVector2DDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgVector2D> {
} _CMsgVector2D_default_instance_;
class CMsgQAngleDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgQAngle> {
} _CMsgQAngle_default_instance_;
class CMsgRGBADefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgRGBA> {
} _CMsgRGBA_default_instance_;
class CNETMsg_TickDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CNETMsg_Tick> {
} _CNETMsg_Tick_default_instance_;
class CNETMsg_StringCmdDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CNETMsg_StringCmd> {
} _CNETMsg_StringCmd_default_instance_;
class CNETMsg_SignonStateDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CNETMsg_SignonState> {
} _CNETMsg_SignonState_default_instance_;
class CMsg_CVars_CVarDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsg_CVars_CVar> {
} _CMsg_CVars_CVar_default_instance_;
class CMsg_CVarsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsg_CVars> {
} _CMsg_CVars_default_instance_;
class CNETMsg_SetConVarDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CNETMsg_SetConVar> {
} _CNETMsg_SetConVar_default_instance_;
class CNETMsg_NOPDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CNETMsg_NOP> {
} _CNETMsg_NOP_default_instance_;
class CNETMsg_DisconnectDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CNETMsg_Disconnect> {
} _CNETMsg_Disconnect_default_instance_;
class CNETMsg_FileDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CNETMsg_File> {
} _CNETMsg_File_default_instance_;
class CNETMsg_SplitScreenUserDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CNETMsg_SplitScreenUser> {
} _CNETMsg_SplitScreenUser_default_instance_;
class CNETMsg_PlayerAvatarDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CNETMsg_PlayerAvatarData> {
} _CNETMsg_PlayerAvatarData_default_instance_;
class CCLCMsg_ClientInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CCLCMsg_ClientInfo> {
} _CCLCMsg_ClientInfo_default_instance_;
class CCLCMsg_MoveDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CCLCMsg_Move> {
} _CCLCMsg_Move_default_instance_;
class CCLCMsg_VoiceDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CCLCMsg_VoiceData> {
} _CCLCMsg_VoiceData_default_instance_;
class CCLCMsg_BaselineAckDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CCLCMsg_BaselineAck> {
} _CCLCMsg_BaselineAck_default_instance_;
class CCLCMsg_ListenEventsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CCLCMsg_ListenEvents> {
} _CCLCMsg_ListenEvents_default_instance_;
class CCLCMsg_RespondCvarValueDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CCLCMsg_RespondCvarValue> {
} _CCLCMsg_RespondCvarValue_default_instance_;
class CCLCMsg_FileCRCCheckDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CCLCMsg_FileCRCCheck> {
} _CCLCMsg_FileCRCCheck_default_instance_;
class CCLCMsg_LoadingProgressDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CCLCMsg_LoadingProgress> {
} _CCLCMsg_LoadingProgress_default_instance_;
class CCLCMsg_SplitPlayerConnectDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CCLCMsg_SplitPlayerConnect> {
} _CCLCMsg_SplitPlayerConnect_default_instance_;
class CCLCMsg_CmdKeyValuesDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CCLCMsg_CmdKeyValues> {
} _CCLCMsg_CmdKeyValues_default_instance_;
class CSVCMsg_ServerInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CSVCMsg_ServerInfo> {
} _CSVCMsg_ServerInfo_default_instance_;
class CSVCMsg_ClassInfo_class_tDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CSVCMsg_ClassInfo_class_t> {
} _CSVCMsg_ClassInfo_class_t_default_instance_;
class CSVCMsg_ClassInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CSVCMsg_ClassInfo> {
} _CSVCMsg_ClassInfo_default_instance_;
class CSVCMsg_SendTable_sendprop_tDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CSVCMsg_SendTable_sendprop_t> {
} _CSVCMsg_SendTable_sendprop_t_default_instance_;
class CSVCMsg_SendTableDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CSVCMsg_SendTable> {
} _CSVCMsg_SendTable_default_instance_;
class CSVCMsg_PrintDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CSVCMsg_Print> {
} _CSVCMsg_Print_default_instance_;
class CSVCMsg_SetPauseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CSVCMsg_SetPause> {
} _CSVCMsg_SetPause_default_instance_;
class CSVCMsg_SetViewDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CSVCMsg_SetView> {
} _CSVCMsg_SetView_default_instance_;
class CSVCMsg_CreateStringTableDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CSVCMsg_CreateStringTable> {
} _CSVCMsg_CreateStringTable_default_instance_;
class CSVCMsg_UpdateStringTableDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CSVCMsg_UpdateStringTable> {
} _CSVCMsg_UpdateStringTable_default_instance_;
class CSVCMsg_VoiceInitDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CSVCMsg_VoiceInit> {
} _CSVCMsg_VoiceInit_default_instance_;
class CSVCMsg_VoiceDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CSVCMsg_VoiceData> {
} _CSVCMsg_VoiceData_default_instance_;
class CSVCMsg_FixAngleDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CSVCMsg_FixAngle> {
} _CSVCMsg_FixAngle_default_instance_;
class CSVCMsg_CrosshairAngleDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CSVCMsg_CrosshairAngle> {
} _CSVCMsg_CrosshairAngle_default_instance_;
class CSVCMsg_PrefetchDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CSVCMsg_Prefetch> {
} _CSVCMsg_Prefetch_default_instance_;
class CSVCMsg_BSPDecalDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CSVCMsg_BSPDecal> {
} _CSVCMsg_BSPDecal_default_instance_;
class CSVCMsg_SplitScreenDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CSVCMsg_SplitScreen> {
} _CSVCMsg_SplitScreen_default_instance_;
class CSVCMsg_GetCvarValueDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CSVCMsg_GetCvarValue> {
} _CSVCMsg_GetCvarValue_default_instance_;
class CSVCMsg_MenuDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CSVCMsg_Menu> {
} _CSVCMsg_Menu_default_instance_;
class CSVCMsg_UserMessageDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CSVCMsg_UserMessage> {
} _CSVCMsg_UserMessage_default_instance_;
class CSVCMsg_PaintmapDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CSVCMsg_PaintmapData> {
} _CSVCMsg_PaintmapData_default_instance_;
class CSVCMsg_GameEvent_key_tDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CSVCMsg_GameEvent_key_t> {
} _CSVCMsg_GameEvent_key_t_default_instance_;
class CSVCMsg_GameEventDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CSVCMsg_GameEvent> {
} _CSVCMsg_GameEvent_default_instance_;
class CSVCMsg_GameEventList_key_tDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CSVCMsg_GameEventList_key_t> {
} _CSVCMsg_GameEventList_key_t_default_instance_;
class CSVCMsg_GameEventList_descriptor_tDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CSVCMsg_GameEventList_descriptor_t> {
} _CSVCMsg_GameEventList_descriptor_t_default_instance_;
class CSVCMsg_GameEventListDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CSVCMsg_GameEventList> {
} _CSVCMsg_GameEventList_default_instance_;
class CSVCMsg_TempEntitiesDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CSVCMsg_TempEntities> {
} _CSVCMsg_TempEntities_default_instance_;
class CSVCMsg_PacketEntitiesDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CSVCMsg_PacketEntities> {
} _CSVCMsg_PacketEntities_default_instance_;
class CSVCMsg_Sounds_sounddata_tDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CSVCMsg_Sounds_sounddata_t> {
} _CSVCMsg_Sounds_sounddata_t_default_instance_;
class CSVCMsg_SoundsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CSVCMsg_Sounds> {
} _CSVCMsg_Sounds_default_instance_;
class CSVCMsg_EntityMsgDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CSVCMsg_EntityMsg> {
} _CSVCMsg_EntityMsg_default_instance_;
class CSVCMsg_CmdKeyValuesDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CSVCMsg_CmdKeyValues> {
} _CSVCMsg_CmdKeyValues_default_instance_;
class CSVCMsg_EncryptedDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CSVCMsg_EncryptedData> {
} _CSVCMsg_EncryptedData_default_instance_;
class CSVCMsg_HltvReplayDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CSVCMsg_HltvReplay> {
} _CSVCMsg_HltvReplay_default_instance_;
class CCLCMsg_HltvReplayDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CCLCMsg_HltvReplay> {
} _CCLCMsg_HltvReplay_default_instance_;
class CSVCMsg_Broadcast_CommandDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CSVCMsg_Broadcast_Command> {
} _CSVCMsg_Broadcast_Command_default_instance_;

namespace protobuf_netmessages_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[61];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[6];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgVector, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgVector, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgVector, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgVector, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgVector, z_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgVector2D, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgVector2D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgVector2D, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgVector2D, y_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQAngle, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQAngle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQAngle, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQAngle, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQAngle, z_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRGBA, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRGBA, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRGBA, r_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRGBA, g_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRGBA, b_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRGBA, a_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNETMsg_Tick, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNETMsg_Tick, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNETMsg_Tick, tick_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNETMsg_Tick, host_computationtime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNETMsg_Tick, host_computationtime_std_deviation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNETMsg_Tick, host_framestarttime_std_deviation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNETMsg_Tick, hltv_replay_flags_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNETMsg_StringCmd, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNETMsg_StringCmd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNETMsg_StringCmd, command_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNETMsg_SignonState, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNETMsg_SignonState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNETMsg_SignonState, signon_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNETMsg_SignonState, spawn_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNETMsg_SignonState, num_server_players_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNETMsg_SignonState, players_networkids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNETMsg_SignonState, map_name_),
  1,
  2,
  3,
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsg_CVars_CVar, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsg_CVars_CVar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsg_CVars_CVar, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsg_CVars_CVar, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsg_CVars_CVar, dictionary_name_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsg_CVars, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsg_CVars, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsg_CVars, cvars_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNETMsg_SetConVar, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNETMsg_SetConVar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNETMsg_SetConVar, convars_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNETMsg_NOP, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNETMsg_NOP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNETMsg_Disconnect, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNETMsg_Disconnect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNETMsg_Disconnect, text_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNETMsg_File, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNETMsg_File, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNETMsg_File, transfer_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNETMsg_File, file_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNETMsg_File, is_replay_demo_file_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNETMsg_File, deny_),
  1,
  0,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNETMsg_SplitScreenUser, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNETMsg_SplitScreenUser, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNETMsg_SplitScreenUser, slot_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNETMsg_PlayerAvatarData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNETMsg_PlayerAvatarData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNETMsg_PlayerAvatarData, accountid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CNETMsg_PlayerAvatarData, rgb_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCLCMsg_ClientInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCLCMsg_ClientInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCLCMsg_ClientInfo, send_table_crc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCLCMsg_ClientInfo, server_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCLCMsg_ClientInfo, is_hltv_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCLCMsg_ClientInfo, is_replay_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCLCMsg_ClientInfo, friends_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCLCMsg_ClientInfo, friends_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCLCMsg_ClientInfo, custom_files_),
  1,
  2,
  3,
  4,
  5,
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCLCMsg_Move, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCLCMsg_Move, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCLCMsg_Move, num_backup_commands_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCLCMsg_Move, num_new_commands_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCLCMsg_Move, data_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCLCMsg_VoiceData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCLCMsg_VoiceData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCLCMsg_VoiceData, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCLCMsg_VoiceData, xuid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCLCMsg_VoiceData, format_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCLCMsg_VoiceData, sequence_bytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCLCMsg_VoiceData, section_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCLCMsg_VoiceData, uncompressed_sample_offset_),
  0,
  1,
  5,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCLCMsg_BaselineAck, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCLCMsg_BaselineAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCLCMsg_BaselineAck, baseline_tick_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCLCMsg_BaselineAck, baseline_nr_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCLCMsg_ListenEvents, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCLCMsg_ListenEvents, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCLCMsg_ListenEvents, event_mask_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCLCMsg_RespondCvarValue, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCLCMsg_RespondCvarValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCLCMsg_RespondCvarValue, cookie_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCLCMsg_RespondCvarValue, status_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCLCMsg_RespondCvarValue, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCLCMsg_RespondCvarValue, value_),
  2,
  3,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCLCMsg_FileCRCCheck, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCLCMsg_FileCRCCheck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCLCMsg_FileCRCCheck, code_path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCLCMsg_FileCRCCheck, path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCLCMsg_FileCRCCheck, code_filename_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCLCMsg_FileCRCCheck, filename_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCLCMsg_FileCRCCheck, file_fraction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCLCMsg_FileCRCCheck, md5_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCLCMsg_FileCRCCheck, crc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCLCMsg_FileCRCCheck, file_hash_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCLCMsg_FileCRCCheck, file_len_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCLCMsg_FileCRCCheck, pack_file_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCLCMsg_FileCRCCheck, pack_file_number_),
  3,
  0,
  4,
  1,
  5,
  2,
  6,
  7,
  8,
  9,
  10,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCLCMsg_LoadingProgress, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCLCMsg_LoadingProgress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCLCMsg_LoadingProgress, progress_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCLCMsg_SplitPlayerConnect, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCLCMsg_SplitPlayerConnect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCLCMsg_SplitPlayerConnect, convars_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCLCMsg_CmdKeyValues, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCLCMsg_CmdKeyValues, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCLCMsg_CmdKeyValues, keyvalues_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_ServerInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_ServerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_ServerInfo, protocol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_ServerInfo, server_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_ServerInfo, is_dedicated_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_ServerInfo, is_official_valve_server_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_ServerInfo, is_hltv_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_ServerInfo, is_replay_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_ServerInfo, is_redirecting_to_proxy_relay_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_ServerInfo, c_os_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_ServerInfo, map_crc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_ServerInfo, client_crc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_ServerInfo, string_table_crc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_ServerInfo, max_clients_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_ServerInfo, max_classes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_ServerInfo, player_slot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_ServerInfo, tick_interval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_ServerInfo, game_dir_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_ServerInfo, map_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_ServerInfo, map_group_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_ServerInfo, sky_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_ServerInfo, host_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_ServerInfo, public_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_ServerInfo, ugc_map_id_),
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  0,
  1,
  2,
  3,
  4,
  21,
  20,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_ClassInfo_class_t, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_ClassInfo_class_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_ClassInfo_class_t, class_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_ClassInfo_class_t, data_table_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_ClassInfo_class_t, class_name_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_ClassInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_ClassInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_ClassInfo, create_on_client_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_ClassInfo, classes_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_SendTable_sendprop_t, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_SendTable_sendprop_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_SendTable_sendprop_t, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_SendTable_sendprop_t, var_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_SendTable_sendprop_t, flags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_SendTable_sendprop_t, priority_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_SendTable_sendprop_t, dt_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_SendTable_sendprop_t, num_elements_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_SendTable_sendprop_t, low_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_SendTable_sendprop_t, high_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_SendTable_sendprop_t, num_bits_),
  2,
  0,
  3,
  4,
  1,
  5,
  6,
  7,
  8,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_SendTable, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_SendTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_SendTable, is_end_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_SendTable, net_table_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_SendTable, needs_decoder_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_SendTable, props_),
  1,
  0,
  2,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_Print, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_Print, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_Print, text_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_SetPause, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_SetPause, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_SetPause, paused_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_SetView, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_SetView, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_SetView, entity_index_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_CreateStringTable, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_CreateStringTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_CreateStringTable, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_CreateStringTable, max_entries_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_CreateStringTable, num_entries_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_CreateStringTable, user_data_fixed_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_CreateStringTable, user_data_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_CreateStringTable, user_data_size_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_CreateStringTable, flags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_CreateStringTable, string_data_),
  0,
  2,
  3,
  4,
  5,
  6,
  7,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_UpdateStringTable, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_UpdateStringTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_UpdateStringTable, table_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_UpdateStringTable, num_changed_entries_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_UpdateStringTable, string_data_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_VoiceInit, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_VoiceInit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_VoiceInit, quality_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_VoiceInit, codec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_VoiceInit, version_),
  1,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_VoiceData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_VoiceData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_VoiceData, client_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_VoiceData, proximity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_VoiceData, xuid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_VoiceData, audible_mask_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_VoiceData, voice_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_VoiceData, caster_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_VoiceData, format_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_VoiceData, sequence_bytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_VoiceData, section_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_VoiceData, uncompressed_sample_offset_),
  1,
  4,
  3,
  2,
  0,
  5,
  9,
  6,
  7,
  8,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_FixAngle, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_FixAngle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_FixAngle, relative_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_FixAngle, angle_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_CrosshairAngle, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_CrosshairAngle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_CrosshairAngle, angle_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_Prefetch, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_Prefetch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_Prefetch, sound_index_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_BSPDecal, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_BSPDecal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_BSPDecal, pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_BSPDecal, decal_texture_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_BSPDecal, entity_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_BSPDecal, model_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_BSPDecal, low_priority_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_SplitScreen, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_SplitScreen, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_SplitScreen, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_SplitScreen, slot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_SplitScreen, player_index_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_GetCvarValue, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_GetCvarValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_GetCvarValue, cookie_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_GetCvarValue, cvar_name_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_Menu, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_Menu, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_Menu, dialog_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_Menu, menu_key_values_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_UserMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_UserMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_UserMessage, msg_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_UserMessage, msg_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_UserMessage, passthrough_),
  1,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_PaintmapData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_PaintmapData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_PaintmapData, paintmap_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_GameEvent_key_t, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_GameEvent_key_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_GameEvent_key_t, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_GameEvent_key_t, val_string_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_GameEvent_key_t, val_float_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_GameEvent_key_t, val_long_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_GameEvent_key_t, val_short_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_GameEvent_key_t, val_byte_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_GameEvent_key_t, val_bool_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_GameEvent_key_t, val_uint64_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_GameEvent_key_t, val_wstring_),
  2,
  0,
  3,
  4,
  5,
  6,
  7,
  8,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_GameEvent, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_GameEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_GameEvent, event_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_GameEvent, eventid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_GameEvent, keys_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_GameEvent, passthrough_),
  0,
  1,
  ~0u,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_GameEventList_key_t, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_GameEventList_key_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_GameEventList_key_t, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_GameEventList_key_t, name_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_GameEventList_descriptor_t, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_GameEventList_descriptor_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_GameEventList_descriptor_t, eventid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_GameEventList_descriptor_t, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_GameEventList_descriptor_t, keys_),
  1,
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_GameEventList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_GameEventList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_GameEventList, descriptors_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_TempEntities, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_TempEntities, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_TempEntities, reliable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_TempEntities, num_entries_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_TempEntities, entity_data_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_PacketEntities, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_PacketEntities, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_PacketEntities, max_entries_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_PacketEntities, updated_entries_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_PacketEntities, is_delta_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_PacketEntities, update_baseline_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_PacketEntities, baseline_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_PacketEntities, delta_from_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_PacketEntities, entity_data_),
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_Sounds_sounddata_t, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_Sounds_sounddata_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_Sounds_sounddata_t, origin_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_Sounds_sounddata_t, origin_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_Sounds_sounddata_t, origin_z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_Sounds_sounddata_t, volume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_Sounds_sounddata_t, delay_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_Sounds_sounddata_t, sequence_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_Sounds_sounddata_t, entity_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_Sounds_sounddata_t, channel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_Sounds_sounddata_t, pitch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_Sounds_sounddata_t, flags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_Sounds_sounddata_t, sound_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_Sounds_sounddata_t, sound_num_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_Sounds_sounddata_t, speaker_entity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_Sounds_sounddata_t, random_seed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_Sounds_sounddata_t, sound_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_Sounds_sounddata_t, is_sentence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_Sounds_sounddata_t, is_ambient_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_Sounds, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_Sounds, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_Sounds, reliable_sound_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_Sounds, sounds_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_EntityMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_EntityMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_EntityMsg, ent_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_EntityMsg, class_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_EntityMsg, ent_data_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_CmdKeyValues, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_CmdKeyValues, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_CmdKeyValues, keyvalues_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_EncryptedData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_EncryptedData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_EncryptedData, encrypted_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_EncryptedData, key_type_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_HltvReplay, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_HltvReplay, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_HltvReplay, delay_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_HltvReplay, primary_target_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_HltvReplay, replay_stop_at_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_HltvReplay, replay_start_at_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_HltvReplay, replay_slowdown_begin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_HltvReplay, replay_slowdown_end_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_HltvReplay, replay_slowdown_rate_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCLCMsg_HltvReplay, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCLCMsg_HltvReplay, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCLCMsg_HltvReplay, request_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCLCMsg_HltvReplay, slowdown_length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCLCMsg_HltvReplay, slowdown_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCLCMsg_HltvReplay, primary_target_ent_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCLCMsg_HltvReplay, event_time_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_Broadcast_Command, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_Broadcast_Command, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSVCMsg_Broadcast_Command, cmd_),
  0,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 7, sizeof(CMsgVector)},
  { 10, 16, sizeof(CMsgVector2D)},
  { 18, 25, sizeof(CMsgQAngle)},
  { 28, 36, sizeof(CMsgRGBA)},
  { 40, 49, sizeof(CNETMsg_Tick)},
  { 54, 59, sizeof(CNETMsg_StringCmd)},
  { 60, 69, sizeof(CNETMsg_SignonState)},
  { 74, 81, sizeof(CMsg_CVars_CVar)},
  { 84, 89, sizeof(CMsg_CVars)},
  { 90, 95, sizeof(CNETMsg_SetConVar)},
  { 96, 100, sizeof(CNETMsg_NOP)},
  { 100, 105, sizeof(CNETMsg_Disconnect)},
  { 106, 114, sizeof(CNETMsg_File)},
  { 118, 123, sizeof(CNETMsg_SplitScreenUser)},
  { 124, 130, sizeof(CNETMsg_PlayerAvatarData)},
  { 132, 143, sizeof(CCLCMsg_ClientInfo)},
  { 150, 157, sizeof(CCLCMsg_Move)},
  { 160, 170, sizeof(CCLCMsg_VoiceData)},
  { 176, 182, sizeof(CCLCMsg_BaselineAck)},
  { 184, 189, sizeof(CCLCMsg_ListenEvents)},
  { 190, 198, sizeof(CCLCMsg_RespondCvarValue)},
  { 202, 217, sizeof(CCLCMsg_FileCRCCheck)},
  { 228, 233, sizeof(CCLCMsg_LoadingProgress)},
  { 234, 239, sizeof(CCLCMsg_SplitPlayerConnect)},
  { 240, 245, sizeof(CCLCMsg_CmdKeyValues)},
  { 246, 272, sizeof(CSVCMsg_ServerInfo)},
  { 294, 301, sizeof(CSVCMsg_ClassInfo_class_t)},
  { 304, 310, sizeof(CSVCMsg_ClassInfo)},
  { 312, 325, sizeof(CSVCMsg_SendTable_sendprop_t)},
  { 334, 342, sizeof(CSVCMsg_SendTable)},
  { 346, 351, sizeof(CSVCMsg_Print)},
  { 352, 357, sizeof(CSVCMsg_SetPause)},
  { 358, 363, sizeof(CSVCMsg_SetView)},
  { 364, 376, sizeof(CSVCMsg_CreateStringTable)},
  { 384, 391, sizeof(CSVCMsg_UpdateStringTable)},
  { 394, 401, sizeof(CSVCMsg_VoiceInit)},
  { 404, 418, sizeof(CSVCMsg_VoiceData)},
  { 428, 434, sizeof(CSVCMsg_FixAngle)},
  { 436, 441, sizeof(CSVCMsg_CrosshairAngle)},
  { 442, 447, sizeof(CSVCMsg_Prefetch)},
  { 448, 457, sizeof(CSVCMsg_BSPDecal)},
  { 462, 469, sizeof(CSVCMsg_SplitScreen)},
  { 472, 478, sizeof(CSVCMsg_GetCvarValue)},
  { 480, 486, sizeof(CSVCMsg_Menu)},
  { 488, 495, sizeof(CSVCMsg_UserMessage)},
  { 498, 503, sizeof(CSVCMsg_PaintmapData)},
  { 504, 517, sizeof(CSVCMsg_GameEvent_key_t)},
  { 526, 534, sizeof(CSVCMsg_GameEvent)},
  { 538, 544, sizeof(CSVCMsg_GameEventList_key_t)},
  { 546, 553, sizeof(CSVCMsg_GameEventList_descriptor_t)},
  { 556, 561, sizeof(CSVCMsg_GameEventList)},
  { 562, 569, sizeof(CSVCMsg_TempEntities)},
  { 572, 583, sizeof(CSVCMsg_PacketEntities)},
  { 590, 611, sizeof(CSVCMsg_Sounds_sounddata_t)},
  { 628, 634, sizeof(CSVCMsg_Sounds)},
  { 636, 643, sizeof(CSVCMsg_EntityMsg)},
  { 646, 651, sizeof(CSVCMsg_CmdKeyValues)},
  { 652, 658, sizeof(CSVCMsg_EncryptedData)},
  { 660, 671, sizeof(CSVCMsg_HltvReplay)},
  { 678, 687, sizeof(CCLCMsg_HltvReplay)},
  { 692, 697, sizeof(CSVCMsg_Broadcast_Command)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgVector_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgVector2D_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgQAngle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgRGBA_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CNETMsg_Tick_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CNETMsg_StringCmd_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CNETMsg_SignonState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsg_CVars_CVar_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsg_CVars_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CNETMsg_SetConVar_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CNETMsg_NOP_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CNETMsg_Disconnect_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CNETMsg_File_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CNETMsg_SplitScreenUser_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CNETMsg_PlayerAvatarData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CCLCMsg_ClientInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CCLCMsg_Move_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CCLCMsg_VoiceData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CCLCMsg_BaselineAck_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CCLCMsg_ListenEvents_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CCLCMsg_RespondCvarValue_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CCLCMsg_FileCRCCheck_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CCLCMsg_LoadingProgress_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CCLCMsg_SplitPlayerConnect_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CCLCMsg_CmdKeyValues_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CSVCMsg_ServerInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CSVCMsg_ClassInfo_class_t_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CSVCMsg_ClassInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CSVCMsg_SendTable_sendprop_t_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CSVCMsg_SendTable_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CSVCMsg_Print_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CSVCMsg_SetPause_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CSVCMsg_SetView_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CSVCMsg_CreateStringTable_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CSVCMsg_UpdateStringTable_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CSVCMsg_VoiceInit_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CSVCMsg_VoiceData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CSVCMsg_FixAngle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CSVCMsg_CrosshairAngle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CSVCMsg_Prefetch_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CSVCMsg_BSPDecal_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CSVCMsg_SplitScreen_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CSVCMsg_GetCvarValue_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CSVCMsg_Menu_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CSVCMsg_UserMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CSVCMsg_PaintmapData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CSVCMsg_GameEvent_key_t_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CSVCMsg_GameEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CSVCMsg_GameEventList_key_t_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CSVCMsg_GameEventList_descriptor_t_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CSVCMsg_GameEventList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CSVCMsg_TempEntities_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CSVCMsg_PacketEntities_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CSVCMsg_Sounds_sounddata_t_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CSVCMsg_Sounds_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CSVCMsg_EntityMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CSVCMsg_CmdKeyValues_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CSVCMsg_EncryptedData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CSVCMsg_HltvReplay_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CCLCMsg_HltvReplay_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CSVCMsg_Broadcast_Command_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "netmessages.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 61);
}

}  // namespace

void TableStruct::Shutdown() {
  _CMsgVector_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _CMsgVector2D_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _CMsgQAngle_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _CMsgRGBA_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _CNETMsg_Tick_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _CNETMsg_StringCmd_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _CNETMsg_SignonState_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _CMsg_CVars_CVar_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _CMsg_CVars_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _CNETMsg_SetConVar_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _CNETMsg_NOP_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _CNETMsg_Disconnect_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _CNETMsg_File_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _CNETMsg_SplitScreenUser_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _CNETMsg_PlayerAvatarData_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _CCLCMsg_ClientInfo_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _CCLCMsg_Move_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _CCLCMsg_VoiceData_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
  _CCLCMsg_BaselineAck_default_instance_.Shutdown();
  delete file_level_metadata[18].reflection;
  _CCLCMsg_ListenEvents_default_instance_.Shutdown();
  delete file_level_metadata[19].reflection;
  _CCLCMsg_RespondCvarValue_default_instance_.Shutdown();
  delete file_level_metadata[20].reflection;
  _CCLCMsg_FileCRCCheck_default_instance_.Shutdown();
  delete file_level_metadata[21].reflection;
  _CCLCMsg_LoadingProgress_default_instance_.Shutdown();
  delete file_level_metadata[22].reflection;
  _CCLCMsg_SplitPlayerConnect_default_instance_.Shutdown();
  delete file_level_metadata[23].reflection;
  _CCLCMsg_CmdKeyValues_default_instance_.Shutdown();
  delete file_level_metadata[24].reflection;
  _CSVCMsg_ServerInfo_default_instance_.Shutdown();
  delete file_level_metadata[25].reflection;
  _CSVCMsg_ClassInfo_class_t_default_instance_.Shutdown();
  delete file_level_metadata[26].reflection;
  _CSVCMsg_ClassInfo_default_instance_.Shutdown();
  delete file_level_metadata[27].reflection;
  _CSVCMsg_SendTable_sendprop_t_default_instance_.Shutdown();
  delete file_level_metadata[28].reflection;
  _CSVCMsg_SendTable_default_instance_.Shutdown();
  delete file_level_metadata[29].reflection;
  _CSVCMsg_Print_default_instance_.Shutdown();
  delete file_level_metadata[30].reflection;
  _CSVCMsg_SetPause_default_instance_.Shutdown();
  delete file_level_metadata[31].reflection;
  _CSVCMsg_SetView_default_instance_.Shutdown();
  delete file_level_metadata[32].reflection;
  _CSVCMsg_CreateStringTable_default_instance_.Shutdown();
  delete file_level_metadata[33].reflection;
  _CSVCMsg_UpdateStringTable_default_instance_.Shutdown();
  delete file_level_metadata[34].reflection;
  _CSVCMsg_VoiceInit_default_instance_.Shutdown();
  delete file_level_metadata[35].reflection;
  _CSVCMsg_VoiceData_default_instance_.Shutdown();
  delete file_level_metadata[36].reflection;
  _CSVCMsg_FixAngle_default_instance_.Shutdown();
  delete file_level_metadata[37].reflection;
  _CSVCMsg_CrosshairAngle_default_instance_.Shutdown();
  delete file_level_metadata[38].reflection;
  _CSVCMsg_Prefetch_default_instance_.Shutdown();
  delete file_level_metadata[39].reflection;
  _CSVCMsg_BSPDecal_default_instance_.Shutdown();
  delete file_level_metadata[40].reflection;
  _CSVCMsg_SplitScreen_default_instance_.Shutdown();
  delete file_level_metadata[41].reflection;
  _CSVCMsg_GetCvarValue_default_instance_.Shutdown();
  delete file_level_metadata[42].reflection;
  _CSVCMsg_Menu_default_instance_.Shutdown();
  delete file_level_metadata[43].reflection;
  _CSVCMsg_UserMessage_default_instance_.Shutdown();
  delete file_level_metadata[44].reflection;
  _CSVCMsg_PaintmapData_default_instance_.Shutdown();
  delete file_level_metadata[45].reflection;
  _CSVCMsg_GameEvent_key_t_default_instance_.Shutdown();
  delete file_level_metadata[46].reflection;
  _CSVCMsg_GameEvent_default_instance_.Shutdown();
  delete file_level_metadata[47].reflection;
  _CSVCMsg_GameEventList_key_t_default_instance_.Shutdown();
  delete file_level_metadata[48].reflection;
  _CSVCMsg_GameEventList_descriptor_t_default_instance_.Shutdown();
  delete file_level_metadata[49].reflection;
  _CSVCMsg_GameEventList_default_instance_.Shutdown();
  delete file_level_metadata[50].reflection;
  _CSVCMsg_TempEntities_default_instance_.Shutdown();
  delete file_level_metadata[51].reflection;
  _CSVCMsg_PacketEntities_default_instance_.Shutdown();
  delete file_level_metadata[52].reflection;
  _CSVCMsg_Sounds_sounddata_t_default_instance_.Shutdown();
  delete file_level_metadata[53].reflection;
  _CSVCMsg_Sounds_default_instance_.Shutdown();
  delete file_level_metadata[54].reflection;
  _CSVCMsg_EntityMsg_default_instance_.Shutdown();
  delete file_level_metadata[55].reflection;
  _CSVCMsg_CmdKeyValues_default_instance_.Shutdown();
  delete file_level_metadata[56].reflection;
  _CSVCMsg_EncryptedData_default_instance_.Shutdown();
  delete file_level_metadata[57].reflection;
  _CSVCMsg_HltvReplay_default_instance_.Shutdown();
  delete file_level_metadata[58].reflection;
  _CCLCMsg_HltvReplay_default_instance_.Shutdown();
  delete file_level_metadata[59].reflection;
  _CSVCMsg_Broadcast_Command_default_instance_.Shutdown();
  delete file_level_metadata[60].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::google::protobuf::protobuf_google_2fprotobuf_2fdescriptor_2eproto::InitDefaults();
  _CMsgVector_default_instance_.DefaultConstruct();
  _CMsgVector2D_default_instance_.DefaultConstruct();
  _CMsgQAngle_default_instance_.DefaultConstruct();
  _CMsgRGBA_default_instance_.DefaultConstruct();
  _CNETMsg_Tick_default_instance_.DefaultConstruct();
  _CNETMsg_StringCmd_default_instance_.DefaultConstruct();
  _CNETMsg_SignonState_default_instance_.DefaultConstruct();
  _CMsg_CVars_CVar_default_instance_.DefaultConstruct();
  _CMsg_CVars_default_instance_.DefaultConstruct();
  _CNETMsg_SetConVar_default_instance_.DefaultConstruct();
  _CNETMsg_NOP_default_instance_.DefaultConstruct();
  _CNETMsg_Disconnect_default_instance_.DefaultConstruct();
  _CNETMsg_File_default_instance_.DefaultConstruct();
  _CNETMsg_SplitScreenUser_default_instance_.DefaultConstruct();
  _CNETMsg_PlayerAvatarData_default_instance_.DefaultConstruct();
  _CCLCMsg_ClientInfo_default_instance_.DefaultConstruct();
  _CCLCMsg_Move_default_instance_.DefaultConstruct();
  _CCLCMsg_VoiceData_default_instance_.DefaultConstruct();
  _CCLCMsg_BaselineAck_default_instance_.DefaultConstruct();
  _CCLCMsg_ListenEvents_default_instance_.DefaultConstruct();
  _CCLCMsg_RespondCvarValue_default_instance_.DefaultConstruct();
  _CCLCMsg_FileCRCCheck_default_instance_.DefaultConstruct();
  _CCLCMsg_LoadingProgress_default_instance_.DefaultConstruct();
  _CCLCMsg_SplitPlayerConnect_default_instance_.DefaultConstruct();
  _CCLCMsg_CmdKeyValues_default_instance_.DefaultConstruct();
  _CSVCMsg_ServerInfo_default_instance_.DefaultConstruct();
  _CSVCMsg_ClassInfo_class_t_default_instance_.DefaultConstruct();
  _CSVCMsg_ClassInfo_default_instance_.DefaultConstruct();
  _CSVCMsg_SendTable_sendprop_t_default_instance_.DefaultConstruct();
  _CSVCMsg_SendTable_default_instance_.DefaultConstruct();
  _CSVCMsg_Print_default_instance_.DefaultConstruct();
  _CSVCMsg_SetPause_default_instance_.DefaultConstruct();
  _CSVCMsg_SetView_default_instance_.DefaultConstruct();
  _CSVCMsg_CreateStringTable_default_instance_.DefaultConstruct();
  _CSVCMsg_UpdateStringTable_default_instance_.DefaultConstruct();
  _CSVCMsg_VoiceInit_default_instance_.DefaultConstruct();
  _CSVCMsg_VoiceData_default_instance_.DefaultConstruct();
  _CSVCMsg_FixAngle_default_instance_.DefaultConstruct();
  _CSVCMsg_CrosshairAngle_default_instance_.DefaultConstruct();
  _CSVCMsg_Prefetch_default_instance_.DefaultConstruct();
  _CSVCMsg_BSPDecal_default_instance_.DefaultConstruct();
  _CSVCMsg_SplitScreen_default_instance_.DefaultConstruct();
  _CSVCMsg_GetCvarValue_default_instance_.DefaultConstruct();
  _CSVCMsg_Menu_default_instance_.DefaultConstruct();
  _CSVCMsg_UserMessage_default_instance_.DefaultConstruct();
  _CSVCMsg_PaintmapData_default_instance_.DefaultConstruct();
  _CSVCMsg_GameEvent_key_t_default_instance_.DefaultConstruct();
  _CSVCMsg_GameEvent_default_instance_.DefaultConstruct();
  _CSVCMsg_GameEventList_key_t_default_instance_.DefaultConstruct();
  _CSVCMsg_GameEventList_descriptor_t_default_instance_.DefaultConstruct();
  _CSVCMsg_GameEventList_default_instance_.DefaultConstruct();
  _CSVCMsg_TempEntities_default_instance_.DefaultConstruct();
  _CSVCMsg_PacketEntities_default_instance_.DefaultConstruct();
  _CSVCMsg_Sounds_sounddata_t_default_instance_.DefaultConstruct();
  _CSVCMsg_Sounds_default_instance_.DefaultConstruct();
  _CSVCMsg_EntityMsg_default_instance_.DefaultConstruct();
  _CSVCMsg_CmdKeyValues_default_instance_.DefaultConstruct();
  _CSVCMsg_EncryptedData_default_instance_.DefaultConstruct();
  _CSVCMsg_HltvReplay_default_instance_.DefaultConstruct();
  _CCLCMsg_HltvReplay_default_instance_.DefaultConstruct();
  _CSVCMsg_Broadcast_Command_default_instance_.DefaultConstruct();
  _CNETMsg_SetConVar_default_instance_.get_mutable()->convars_ = const_cast< ::CMsg_CVars*>(
      ::CMsg_CVars::internal_default_instance());
  _CCLCMsg_SplitPlayerConnect_default_instance_.get_mutable()->convars_ = const_cast< ::CMsg_CVars*>(
      ::CMsg_CVars::internal_default_instance());
  _CSVCMsg_FixAngle_default_instance_.get_mutable()->angle_ = const_cast< ::CMsgQAngle*>(
      ::CMsgQAngle::internal_default_instance());
  _CSVCMsg_CrosshairAngle_default_instance_.get_mutable()->angle_ = const_cast< ::CMsgQAngle*>(
      ::CMsgQAngle::internal_default_instance());
  _CSVCMsg_BSPDecal_default_instance_.get_mutable()->pos_ = const_cast< ::CMsgVector*>(
      ::CMsgVector::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\021netmessages.proto\032 google/protobuf/des"
      "criptor.proto\"-\n\nCMsgVector\022\t\n\001x\030\001 \001(\002\022\t"
      "\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\"$\n\014CMsgVector2D\022\t\n\001"
      "x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\"-\n\nCMsgQAngle\022\t\n\001x\030\001 "
      "\001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\"6\n\010CMsgRGBA\022\t\n"
      "\001r\030\001 \001(\005\022\t\n\001g\030\002 \001(\005\022\t\n\001b\030\003 \001(\005\022\t\n\001a\030\004 \001("
      "\005\"\254\001\n\014CNETMsg_Tick\022\014\n\004tick\030\001 \001(\r\022\034\n\024host"
      "_computationtime\030\004 \001(\r\022*\n\"host_computati"
      "ontime_std_deviation\030\005 \001(\r\022)\n!host_frame"
      "starttime_std_deviation\030\006 \001(\r\022\031\n\021hltv_re"
      "play_flags\030\007 \001(\r\"$\n\021CNETMsg_StringCmd\022\017\n"
      "\007command\030\001 \001(\t\"\212\001\n\023CNETMsg_SignonState\022\024"
      "\n\014signon_state\030\001 \001(\r\022\023\n\013spawn_count\030\002 \001("
      "\r\022\032\n\022num_server_players\030\003 \001(\r\022\032\n\022players"
      "_networkids\030\004 \003(\t\022\020\n\010map_name\030\005 \001(\t\"k\n\nC"
      "Msg_CVars\022\037\n\005cvars\030\001 \003(\0132\020.CMsg_CVars.CV"
      "ar\032<\n\004CVar\022\014\n\004name\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\022"
      "\027\n\017dictionary_name\030\003 \001(\r\"1\n\021CNETMsg_SetC"
      "onVar\022\034\n\007convars\030\001 \001(\0132\013.CMsg_CVars\"\r\n\013C"
      "NETMsg_NOP\"\"\n\022CNETMsg_Disconnect\022\014\n\004text"
      "\030\001 \001(\t\"a\n\014CNETMsg_File\022\023\n\013transfer_id\030\001 "
      "\001(\005\022\021\n\tfile_name\030\002 \001(\t\022\033\n\023is_replay_demo"
      "_file\030\003 \001(\010\022\014\n\004deny\030\004 \001(\010\"\'\n\027CNETMsg_Spl"
      "itScreenUser\022\014\n\004slot\030\001 \001(\005\":\n\030CNETMsg_Pl"
      "ayerAvatarData\022\021\n\taccountid\030\001 \001(\r\022\013\n\003rgb"
      "\030\002 \001(\014\"\246\001\n\022CCLCMsg_ClientInfo\022\026\n\016send_ta"
      "ble_crc\030\001 \001(\007\022\024\n\014server_count\030\002 \001(\r\022\017\n\007i"
      "s_hltv\030\003 \001(\010\022\021\n\tis_replay\030\004 \001(\010\022\022\n\nfrien"
      "ds_id\030\005 \001(\r\022\024\n\014friends_name\030\006 \001(\t\022\024\n\014cus"
      "tom_files\030\007 \003(\007\"S\n\014CCLCMsg_Move\022\033\n\023num_b"
      "ackup_commands\030\001 \001(\r\022\030\n\020num_new_commands"
      "\030\002 \001(\r\022\014\n\004data\030\003 \001(\014\"\300\001\n\021CCLCMsg_VoiceDa"
      "ta\022\014\n\004data\030\001 \001(\014\022\014\n\004xuid\030\002 \001(\006\022;\n\006format"
      "\030\003 \001(\0162\022.VoiceDataFormat_t:\027VOICEDATA_FO"
      "RMAT_ENGINE\022\026\n\016sequence_bytes\030\004 \001(\005\022\026\n\016s"
      "ection_number\030\005 \001(\r\022\"\n\032uncompressed_samp"
      "le_offset\030\006 \001(\r\"A\n\023CCLCMsg_BaselineAck\022\025"
      "\n\rbaseline_tick\030\001 \001(\005\022\023\n\013baseline_nr\030\002 \001"
      "(\005\"*\n\024CCLCMsg_ListenEvents\022\022\n\nevent_mask"
      "\030\001 \003(\007\"\\\n\030CCLCMsg_RespondCvarValue\022\016\n\006co"
      "okie\030\001 \001(\005\022\023\n\013status_code\030\002 \001(\005\022\014\n\004name\030"
      "\003 \001(\t\022\r\n\005value\030\004 \001(\t\"\353\001\n\024CCLCMsg_FileCRC"
      "Check\022\021\n\tcode_path\030\001 \001(\005\022\014\n\004path\030\002 \001(\t\022\025"
      "\n\rcode_filename\030\003 \001(\005\022\020\n\010filename\030\004 \001(\t\022"
      "\025\n\rfile_fraction\030\005 \001(\005\022\013\n\003md5\030\006 \001(\014\022\013\n\003c"
      "rc\030\007 \001(\r\022\026\n\016file_hash_type\030\010 \001(\005\022\020\n\010file"
      "_len\030\t \001(\005\022\024\n\014pack_file_id\030\n \001(\005\022\030\n\020pack"
      "_file_number\030\013 \001(\005\"+\n\027CCLCMsg_LoadingPro"
      "gress\022\020\n\010progress\030\001 \001(\005\":\n\032CCLCMsg_Split"
      "PlayerConnect\022\034\n\007convars\030\001 \001(\0132\013.CMsg_CV"
      "ars\")\n\024CCLCMsg_CmdKeyValues\022\021\n\tkeyvalues"
      "\030\001 \001(\014\"\352\003\n\022CSVCMsg_ServerInfo\022\020\n\010protoco"
      "l\030\001 \001(\005\022\024\n\014server_count\030\002 \001(\005\022\024\n\014is_dedi"
      "cated\030\003 \001(\010\022 \n\030is_official_valve_server\030"
      "\004 \001(\010\022\017\n\007is_hltv\030\005 \001(\010\022\021\n\tis_replay\030\006 \001("
      "\010\022%\n\035is_redirecting_to_proxy_relay\030\025 \001(\010"
      "\022\014\n\004c_os\030\007 \001(\005\022\017\n\007map_crc\030\010 \001(\007\022\022\n\nclien"
      "t_crc\030\t \001(\007\022\030\n\020string_table_crc\030\n \001(\007\022\023\n"
      "\013max_clients\030\013 \001(\005\022\023\n\013max_classes\030\014 \001(\005\022"
      "\023\n\013player_slot\030\r \001(\005\022\025\n\rtick_interval\030\016 "
      "\001(\002\022\020\n\010game_dir\030\017 \001(\t\022\020\n\010map_name\030\020 \001(\t\022"
      "\026\n\016map_group_name\030\021 \001(\t\022\020\n\010sky_name\030\022 \001("
      "\t\022\021\n\thost_name\030\023 \001(\t\022\021\n\tpublic_ip\030\024 \001(\r\022"
      "\022\n\nugc_map_id\030\026 \001(\004\"\244\001\n\021CSVCMsg_ClassInf"
      "o\022\030\n\020create_on_client\030\001 \001(\010\022+\n\007classes\030\002"
      " \003(\0132\032.CSVCMsg_ClassInfo.class_t\032H\n\007clas"
      "s_t\022\020\n\010class_id\030\001 \001(\005\022\027\n\017data_table_name"
      "\030\002 \001(\t\022\022\n\nclass_name\030\003 \001(\t\"\260\002\n\021CSVCMsg_S"
      "endTable\022\016\n\006is_end\030\001 \001(\010\022\026\n\016net_table_na"
      "me\030\002 \001(\t\022\025\n\rneeds_decoder\030\003 \001(\010\022,\n\005props"
      "\030\004 \003(\0132\035.CSVCMsg_SendTable.sendprop_t\032\255\001"
      "\n\nsendprop_t\022\014\n\004type\030\001 \001(\005\022\020\n\010var_name\030\002"
      " \001(\t\022\r\n\005flags\030\003 \001(\005\022\020\n\010priority\030\004 \001(\005\022\017\n"
      "\007dt_name\030\005 \001(\t\022\024\n\014num_elements\030\006 \001(\005\022\021\n\t"
      "low_value\030\007 \001(\002\022\022\n\nhigh_value\030\010 \001(\002\022\020\n\010n"
      "um_bits\030\t \001(\005\"\035\n\rCSVCMsg_Print\022\014\n\004text\030\001"
      " \001(\t\"\"\n\020CSVCMsg_SetPause\022\016\n\006paused\030\001 \001(\010"
      "\"\'\n\017CSVCMsg_SetView\022\024\n\014entity_index\030\001 \001("
      "\005\"\312\001\n\031CSVCMsg_CreateStringTable\022\014\n\004name\030"
      "\001 \001(\t\022\023\n\013max_entries\030\002 \001(\005\022\023\n\013num_entrie"
      "s\030\003 \001(\005\022\034\n\024user_data_fixed_size\030\004 \001(\010\022\026\n"
      "\016user_data_size\030\005 \001(\005\022\033\n\023user_data_size_"
      "bits\030\006 \001(\005\022\r\n\005flags\030\007 \001(\005\022\023\n\013string_data"
      "\030\010 \001(\014\"_\n\031CSVCMsg_UpdateStringTable\022\020\n\010t"
      "able_id\030\001 \001(\005\022\033\n\023num_changed_entries\030\002 \001"
      "(\005\022\023\n\013string_data\030\003 \001(\014\"G\n\021CSVCMsg_Voice"
      "Init\022\017\n\007quality\030\001 \001(\005\022\r\n\005codec\030\002 \001(\t\022\022\n\007"
      "version\030\003 \001(\005:\0010\"\217\002\n\021CSVCMsg_VoiceData\022\016"
      "\n\006client\030\001 \001(\005\022\021\n\tproximity\030\002 \001(\010\022\014\n\004xui"
      "d\030\003 \001(\006\022\024\n\014audible_mask\030\004 \001(\005\022\022\n\nvoice_d"
      "ata\030\005 \001(\014\022\016\n\006caster\030\006 \001(\010\022;\n\006format\030\007 \001("
      "\0162\022.VoiceDataFormat_t:\027VOICEDATA_FORMAT_"
      "ENGINE\022\026\n\016sequence_bytes\030\010 \001(\005\022\026\n\016sectio"
      "n_number\030\t \001(\r\022\"\n\032uncompressed_sample_of"
      "fset\030\n \001(\r\"@\n\020CSVCMsg_FixAngle\022\020\n\010relati"
      "ve\030\001 \001(\010\022\032\n\005angle\030\002 \001(\0132\013.CMsgQAngle\"4\n\026"
      "CSVCMsg_CrosshairAngle\022\032\n\005angle\030\001 \001(\0132\013."
      "CMsgQAngle\"\'\n\020CSVCMsg_Prefetch\022\023\n\013sound_"
      "index\030\001 \001(\005\"\212\001\n\020CSVCMsg_BSPDecal\022\030\n\003pos\030"
      "\001 \001(\0132\013.CMsgVector\022\033\n\023decal_texture_inde"
      "x\030\002 \001(\005\022\024\n\014entity_index\030\003 \001(\005\022\023\n\013model_i"
      "ndex\030\004 \001(\005\022\024\n\014low_priority\030\005 \001(\010\"a\n\023CSVC"
      "Msg_SplitScreen\022&\n\004type\030\001 \001(\0162\030.ESplitSc"
      "reenMessageType\022\014\n\004slot\030\002 \001(\005\022\024\n\014player_"
      "index\030\003 \001(\005\"9\n\024CSVCMsg_GetCvarValue\022\016\n\006c"
      "ookie\030\001 \001(\005\022\021\n\tcvar_name\030\002 \001(\t\"<\n\014CSVCMs"
      "g_Menu\022\023\n\013dialog_type\030\001 \001(\005\022\027\n\017menu_key_"
      "values\030\002 \001(\014\"N\n\023CSVCMsg_UserMessage\022\020\n\010m"
      "sg_type\030\001 \001(\005\022\020\n\010msg_data\030\002 \001(\014\022\023\n\013passt"
      "hrough\030\003 \001(\005\"(\n\024CSVCMsg_PaintmapData\022\020\n\010"
      "paintmap\030\001 \001(\014\"\246\002\n\021CSVCMsg_GameEvent\022\022\n\n"
      "event_name\030\001 \001(\t\022\017\n\007eventid\030\002 \001(\005\022&\n\004key"
      "s\030\003 \003(\0132\030.CSVCMsg_GameEvent.key_t\022\023\n\013pas"
      "sthrough\030\004 \001(\005\032\256\001\n\005key_t\022\014\n\004type\030\001 \001(\005\022\022"
      "\n\nval_string\030\002 \001(\t\022\021\n\tval_float\030\003 \001(\002\022\020\n"
      "\010val_long\030\004 \001(\005\022\021\n\tval_short\030\005 \001(\005\022\020\n\010va"
      "l_byte\030\006 \001(\005\022\020\n\010val_bool\030\007 \001(\010\022\022\n\nval_ui"
      "nt64\030\010 \001(\004\022\023\n\013val_wstring\030\t \001(\014\"\321\001\n\025CSVC"
      "Msg_GameEventList\0228\n\013descriptors\030\001 \003(\0132#"
      ".CSVCMsg_GameEventList.descriptor_t\032#\n\005k"
      "ey_t\022\014\n\004type\030\001 \001(\005\022\014\n\004name\030\002 \001(\t\032Y\n\014desc"
      "riptor_t\022\017\n\007eventid\030\001 \001(\005\022\014\n\004name\030\002 \001(\t\022"
      "*\n\004keys\030\003 \003(\0132\034.CSVCMsg_GameEventList.ke"
      "y_t\"R\n\024CSVCMsg_TempEntities\022\020\n\010reliable\030"
      "\001 \001(\010\022\023\n\013num_entries\030\002 \001(\005\022\023\n\013entity_dat"
      "a\030\003 \001(\014\"\254\001\n\026CSVCMsg_PacketEntities\022\023\n\013ma"
      "x_entries\030\001 \001(\005\022\027\n\017updated_entries\030\002 \001(\005"
      "\022\020\n\010is_delta\030\003 \001(\010\022\027\n\017update_baseline\030\004 "
      "\001(\010\022\020\n\010baseline\030\005 \001(\005\022\022\n\ndelta_from\030\006 \001("
      "\005\022\023\n\013entity_data\030\007 \001(\014\"\266\003\n\016CSVCMsg_Sound"
      "s\022\026\n\016reliable_sound\030\001 \001(\010\022+\n\006sounds\030\002 \003("
      "\0132\033.CSVCMsg_Sounds.sounddata_t\032\336\002\n\013sound"
      "data_t\022\020\n\010origin_x\030\001 \001(\021\022\020\n\010origin_y\030\002 \001"
      "(\021\022\020\n\010origin_z\030\003 \001(\021\022\016\n\006volume\030\004 \001(\r\022\023\n\013"
      "delay_value\030\005 \001(\002\022\027\n\017sequence_number\030\006 \001"
      "(\005\022\024\n\014entity_index\030\007 \001(\005\022\017\n\007channel\030\010 \001("
      "\005\022\r\n\005pitch\030\t \001(\005\022\r\n\005flags\030\n \001(\005\022\021\n\tsound"
      "_num\030\013 \001(\r\022\030\n\020sound_num_handle\030\014 \001(\007\022\026\n\016"
      "speaker_entity\030\r \001(\005\022\023\n\013random_seed\030\016 \001("
      "\005\022\023\n\013sound_level\030\017 \001(\005\022\023\n\013is_sentence\030\020 "
      "\001(\010\022\022\n\nis_ambient\030\021 \001(\010\"J\n\021CSVCMsg_Entit"
      "yMsg\022\021\n\tent_index\030\001 \001(\005\022\020\n\010class_id\030\002 \001("
      "\005\022\020\n\010ent_data\030\003 \001(\014\")\n\024CSVCMsg_CmdKeyVal"
      "ues\022\021\n\tkeyvalues\030\001 \001(\014\"<\n\025CSVCMsg_Encryp"
      "tedData\022\021\n\tencrypted\030\001 \001(\014\022\020\n\010key_type\030\002"
      " \001(\005\"\306\001\n\022CSVCMsg_HltvReplay\022\r\n\005delay\030\001 \001"
      "(\005\022\026\n\016primary_target\030\002 \001(\005\022\026\n\016replay_sto"
      "p_at\030\003 \001(\005\022\027\n\017replay_start_at\030\004 \001(\005\022\035\n\025r"
      "eplay_slowdown_begin\030\005 \001(\005\022\033\n\023replay_slo"
      "wdown_end\030\006 \001(\005\022\034\n\024replay_slowdown_rate\030"
      "\007 \001(\002\"\213\001\n\022CCLCMsg_HltvReplay\022\017\n\007request\030"
      "\001 \001(\005\022\027\n\017slowdown_length\030\002 \001(\002\022\025\n\rslowdo"
      "wn_rate\030\003 \001(\002\022 \n\030primary_target_ent_inde"
      "x\030\004 \001(\005\022\022\n\nevent_time\030\005 \001(\002\"(\n\031CSVCMsg_B"
      "roadcast_Command\022\013\n\003cmd\030\001 \001(\t*\271\001\n\014NET_Me"
      "ssages\022\013\n\007net_NOP\020\000\022\022\n\016net_Disconnect\020\001\022"
      "\014\n\010net_File\020\002\022\027\n\023net_SplitScreenUser\020\003\022\014"
      "\n\010net_Tick\020\004\022\021\n\rnet_StringCmd\020\005\022\021\n\rnet_S"
      "etConVar\020\006\022\023\n\017net_SignonState\020\007\022\030\n\024net_P"
      "layerAvatarData\020d*\224\002\n\014CLC_Messages\022\022\n\016cl"
      "c_ClientInfo\020\010\022\014\n\010clc_Move\020\t\022\021\n\rclc_Voic"
      "eData\020\n\022\023\n\017clc_BaselineAck\020\013\022\024\n\020clc_List"
      "enEvents\020\014\022\030\n\024clc_RespondCvarValue\020\r\022\024\n\020"
      "clc_FileCRCCheck\020\016\022\027\n\023clc_LoadingProgres"
      "s\020\017\022\032\n\026clc_SplitPlayerConnect\020\020\022\025\n\021clc_C"
      "lientMessage\020\021\022\024\n\020clc_CmdKeyValues\020\022\022\022\n\016"
      "clc_HltvReplay\020\024*L\n\021VoiceDataFormat_t\022\032\n"
      "\026VOICEDATA_FORMAT_STEAM\020\000\022\033\n\027VOICEDATA_F"
      "ORMAT_ENGINE\020\001*y\n\027ESplitScreenMessageTyp"
      "e\022\033\n\027MSG_SPLITSCREEN_ADDUSER\020\000\022\036\n\032MSG_SP"
      "LITSCREEN_REMOVEUSER\020\001\022\035\n\031MSG_SPLITSCREE"
      "N_TYPE_BITS\020\001\032\002\020\001*\343\004\n\014SVC_Messages\022\022\n\016sv"
      "c_ServerInfo\020\010\022\021\n\rsvc_SendTable\020\t\022\021\n\rsvc"
      "_ClassInfo\020\n\022\020\n\014svc_SetPause\020\013\022\031\n\025svc_Cr"
      "eateStringTable\020\014\022\031\n\025svc_UpdateStringTab"
      "le\020\r\022\021\n\rsvc_VoiceInit\020\016\022\021\n\rsvc_VoiceData"
      "\020\017\022\r\n\tsvc_Print\020\020\022\016\n\nsvc_Sounds\020\021\022\017\n\013svc"
      "_SetView\020\022\022\020\n\014svc_FixAngle\020\023\022\026\n\022svc_Cros"
      "shairAngle\020\024\022\020\n\014svc_BSPDecal\020\025\022\023\n\017svc_Sp"
      "litScreen\020\026\022\023\n\017svc_UserMessage\020\027\022\025\n\021svc_"
      "EntityMessage\020\030\022\021\n\rsvc_GameEvent\020\031\022\026\n\022sv"
      "c_PacketEntities\020\032\022\024\n\020svc_TempEntities\020\033"
      "\022\020\n\014svc_Prefetch\020\034\022\014\n\010svc_Menu\020\035\022\025\n\021svc_"
      "GameEventList\020\036\022\024\n\020svc_GetCvarValue\020\037\022\024\n"
      "\020svc_PaintmapData\020!\022\024\n\020svc_CmdKeyValues\020"
      "\"\022\025\n\021svc_EncryptedData\020#\022\022\n\016svc_HltvRepl"
      "ay\020$\022\031\n\025svc_Broadcast_Command\020&*\207\001\n\021Repl"
      "ayEventType_t\022\027\n\023REPLAY_EVENT_CANCEL\020\000\022\026"
      "\n\022REPLAY_EVENT_DEATH\020\001\022\030\n\024REPLAY_EVENT_G"
      "ENERIC\020\002\022\'\n#REPLAY_EVENT_STUCK_NEED_FULL"
      "_UPDATE\020\003B\003\200\001\000"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 7614);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "netmessages.proto", &protobuf_RegisterTypes);
  ::google::protobuf::protobuf_google_2fprotobuf_2fdescriptor_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_netmessages_2eproto

const ::google::protobuf::EnumDescriptor* NET_Messages_descriptor() {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_enum_descriptors[0];
}
bool NET_Messages_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 100:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CLC_Messages_descriptor() {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_enum_descriptors[1];
}
bool CLC_Messages_IsValid(int value) {
  switch (value) {
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 20:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* VoiceDataFormat_t_descriptor() {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_enum_descriptors[2];
}
bool VoiceDataFormat_t_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ESplitScreenMessageType_descriptor() {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_enum_descriptors[3];
}
bool ESplitScreenMessageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SVC_Messages_descriptor() {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_enum_descriptors[4];
}
bool SVC_Messages_IsValid(int value) {
  switch (value) {
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 33:
    case 34:
    case 35:
    case 36:
    case 38:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ReplayEventType_t_descriptor() {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_enum_descriptors[5];
}
bool ReplayEventType_t_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgVector::kXFieldNumber;
const int CMsgVector::kYFieldNumber;
const int CMsgVector::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgVector::CMsgVector()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_netmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgVector)
}
CMsgVector::CMsgVector(const CMsgVector& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:CMsgVector)
}

void CMsgVector::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&x_, 0, reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_) + sizeof(z_));
}

CMsgVector::~CMsgVector() {
  // @@protoc_insertion_point(destructor:CMsgVector)
  SharedDtor();
}

void CMsgVector::SharedDtor() {
}

void CMsgVector::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgVector::descriptor() {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[0].descriptor;
}

const CMsgVector& CMsgVector::default_instance() {
  protobuf_netmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgVector* CMsgVector::New(::google::protobuf::Arena* arena) const {
  CMsgVector* n = new CMsgVector;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgVector::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgVector)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&x_, 0, reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_) + sizeof(z_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgVector::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgVector)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (tag == 13u) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float y = 2;
      case 2: {
        if (tag == 21u) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float z = 3;
      case 3: {
        if (tag == 29u) {
          set_has_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgVector)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgVector)
  return false;
#undef DO_
}

void CMsgVector::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgVector)
  // optional float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // optional float z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgVector)
}

::google::protobuf::uint8* CMsgVector::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgVector)
  // optional float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // optional float z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgVector)
  return target;
}

size_t CMsgVector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgVector)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

    // optional float z = 3;
    if (has_z()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgVector::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgVector)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgVector* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgVector>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgVector)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgVector)
    MergeFrom(*source);
  }
}

void CMsgVector::MergeFrom(const CMsgVector& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgVector)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
}

void CMsgVector::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgVector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgVector::CopyFrom(const CMsgVector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgVector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgVector::IsInitialized() const {
  return true;
}

void CMsgVector::Swap(CMsgVector* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgVector::InternalSwap(CMsgVector* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgVector::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgVector

// optional float x = 1;
bool CMsgVector::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgVector::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgVector::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgVector::clear_x() {
  x_ = 0;
  clear_has_x();
}
float CMsgVector::x() const {
  // @@protoc_insertion_point(field_get:CMsgVector.x)
  return x_;
}
void CMsgVector::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:CMsgVector.x)
}

// optional float y = 2;
bool CMsgVector::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgVector::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgVector::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgVector::clear_y() {
  y_ = 0;
  clear_has_y();
}
float CMsgVector::y() const {
  // @@protoc_insertion_point(field_get:CMsgVector.y)
  return y_;
}
void CMsgVector::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:CMsgVector.y)
}

// optional float z = 3;
bool CMsgVector::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgVector::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgVector::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgVector::clear_z() {
  z_ = 0;
  clear_has_z();
}
float CMsgVector::z() const {
  // @@protoc_insertion_point(field_get:CMsgVector.z)
  return z_;
}
void CMsgVector::set_z(float value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:CMsgVector.z)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgVector2D::kXFieldNumber;
const int CMsgVector2D::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgVector2D::CMsgVector2D()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_netmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgVector2D)
}
CMsgVector2D::CMsgVector2D(const CMsgVector2D& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:CMsgVector2D)
}

void CMsgVector2D::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&x_, 0, reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_) + sizeof(y_));
}

CMsgVector2D::~CMsgVector2D() {
  // @@protoc_insertion_point(destructor:CMsgVector2D)
  SharedDtor();
}

void CMsgVector2D::SharedDtor() {
}

void CMsgVector2D::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgVector2D::descriptor() {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[1].descriptor;
}

const CMsgVector2D& CMsgVector2D::default_instance() {
  protobuf_netmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgVector2D* CMsgVector2D::New(::google::protobuf::Arena* arena) const {
  CMsgVector2D* n = new CMsgVector2D;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgVector2D::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgVector2D)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&x_, 0, reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_) + sizeof(y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgVector2D::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgVector2D)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (tag == 13u) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float y = 2;
      case 2: {
        if (tag == 21u) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgVector2D)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgVector2D)
  return false;
#undef DO_
}

void CMsgVector2D::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgVector2D)
  // optional float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgVector2D)
}

::google::protobuf::uint8* CMsgVector2D::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgVector2D)
  // optional float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgVector2D)
  return target;
}

size_t CMsgVector2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgVector2D)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgVector2D::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgVector2D)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgVector2D* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgVector2D>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgVector2D)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgVector2D)
    MergeFrom(*source);
  }
}

void CMsgVector2D::MergeFrom(const CMsgVector2D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgVector2D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
}

void CMsgVector2D::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgVector2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgVector2D::CopyFrom(const CMsgVector2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgVector2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgVector2D::IsInitialized() const {
  return true;
}

void CMsgVector2D::Swap(CMsgVector2D* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgVector2D::InternalSwap(CMsgVector2D* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgVector2D::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgVector2D

// optional float x = 1;
bool CMsgVector2D::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgVector2D::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgVector2D::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgVector2D::clear_x() {
  x_ = 0;
  clear_has_x();
}
float CMsgVector2D::x() const {
  // @@protoc_insertion_point(field_get:CMsgVector2D.x)
  return x_;
}
void CMsgVector2D::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:CMsgVector2D.x)
}

// optional float y = 2;
bool CMsgVector2D::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgVector2D::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgVector2D::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgVector2D::clear_y() {
  y_ = 0;
  clear_has_y();
}
float CMsgVector2D::y() const {
  // @@protoc_insertion_point(field_get:CMsgVector2D.y)
  return y_;
}
void CMsgVector2D::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:CMsgVector2D.y)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgQAngle::kXFieldNumber;
const int CMsgQAngle::kYFieldNumber;
const int CMsgQAngle::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgQAngle::CMsgQAngle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_netmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgQAngle)
}
CMsgQAngle::CMsgQAngle(const CMsgQAngle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:CMsgQAngle)
}

void CMsgQAngle::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&x_, 0, reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_) + sizeof(z_));
}

CMsgQAngle::~CMsgQAngle() {
  // @@protoc_insertion_point(destructor:CMsgQAngle)
  SharedDtor();
}

void CMsgQAngle::SharedDtor() {
}

void CMsgQAngle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgQAngle::descriptor() {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[2].descriptor;
}

const CMsgQAngle& CMsgQAngle::default_instance() {
  protobuf_netmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgQAngle* CMsgQAngle::New(::google::protobuf::Arena* arena) const {
  CMsgQAngle* n = new CMsgQAngle;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgQAngle::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgQAngle)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&x_, 0, reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_) + sizeof(z_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgQAngle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgQAngle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (tag == 13u) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float y = 2;
      case 2: {
        if (tag == 21u) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float z = 3;
      case 3: {
        if (tag == 29u) {
          set_has_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgQAngle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgQAngle)
  return false;
#undef DO_
}

void CMsgQAngle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgQAngle)
  // optional float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // optional float z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgQAngle)
}

::google::protobuf::uint8* CMsgQAngle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgQAngle)
  // optional float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // optional float z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgQAngle)
  return target;
}

size_t CMsgQAngle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgQAngle)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

    // optional float z = 3;
    if (has_z()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgQAngle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgQAngle)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgQAngle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgQAngle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgQAngle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgQAngle)
    MergeFrom(*source);
  }
}

void CMsgQAngle::MergeFrom(const CMsgQAngle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgQAngle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
}

void CMsgQAngle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgQAngle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgQAngle::CopyFrom(const CMsgQAngle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgQAngle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgQAngle::IsInitialized() const {
  return true;
}

void CMsgQAngle::Swap(CMsgQAngle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgQAngle::InternalSwap(CMsgQAngle* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgQAngle::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgQAngle

// optional float x = 1;
bool CMsgQAngle::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgQAngle::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgQAngle::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgQAngle::clear_x() {
  x_ = 0;
  clear_has_x();
}
float CMsgQAngle::x() const {
  // @@protoc_insertion_point(field_get:CMsgQAngle.x)
  return x_;
}
void CMsgQAngle::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:CMsgQAngle.x)
}

// optional float y = 2;
bool CMsgQAngle::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgQAngle::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgQAngle::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgQAngle::clear_y() {
  y_ = 0;
  clear_has_y();
}
float CMsgQAngle::y() const {
  // @@protoc_insertion_point(field_get:CMsgQAngle.y)
  return y_;
}
void CMsgQAngle::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:CMsgQAngle.y)
}

// optional float z = 3;
bool CMsgQAngle::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgQAngle::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgQAngle::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgQAngle::clear_z() {
  z_ = 0;
  clear_has_z();
}
float CMsgQAngle::z() const {
  // @@protoc_insertion_point(field_get:CMsgQAngle.z)
  return z_;
}
void CMsgQAngle::set_z(float value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:CMsgQAngle.z)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgRGBA::kRFieldNumber;
const int CMsgRGBA::kGFieldNumber;
const int CMsgRGBA::kBFieldNumber;
const int CMsgRGBA::kAFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgRGBA::CMsgRGBA()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_netmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgRGBA)
}
CMsgRGBA::CMsgRGBA(const CMsgRGBA& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&r_, &from.r_,
    reinterpret_cast<char*>(&a_) -
    reinterpret_cast<char*>(&r_) + sizeof(a_));
  // @@protoc_insertion_point(copy_constructor:CMsgRGBA)
}

void CMsgRGBA::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&r_, 0, reinterpret_cast<char*>(&a_) -
    reinterpret_cast<char*>(&r_) + sizeof(a_));
}

CMsgRGBA::~CMsgRGBA() {
  // @@protoc_insertion_point(destructor:CMsgRGBA)
  SharedDtor();
}

void CMsgRGBA::SharedDtor() {
}

void CMsgRGBA::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgRGBA::descriptor() {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[3].descriptor;
}

const CMsgRGBA& CMsgRGBA::default_instance() {
  protobuf_netmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgRGBA* CMsgRGBA::New(::google::protobuf::Arena* arena) const {
  CMsgRGBA* n = new CMsgRGBA;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgRGBA::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgRGBA)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&r_, 0, reinterpret_cast<char*>(&a_) -
      reinterpret_cast<char*>(&r_) + sizeof(a_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgRGBA::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgRGBA)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 r = 1;
      case 1: {
        if (tag == 8u) {
          set_has_r();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &r_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 g = 2;
      case 2: {
        if (tag == 16u) {
          set_has_g();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &g_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 b = 3;
      case 3: {
        if (tag == 24u) {
          set_has_b();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &b_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 a = 4;
      case 4: {
        if (tag == 32u) {
          set_has_a();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &a_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgRGBA)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgRGBA)
  return false;
#undef DO_
}

void CMsgRGBA::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgRGBA)
  // optional int32 r = 1;
  if (has_r()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->r(), output);
  }

  // optional int32 g = 2;
  if (has_g()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->g(), output);
  }

  // optional int32 b = 3;
  if (has_b()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->b(), output);
  }

  // optional int32 a = 4;
  if (has_a()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->a(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgRGBA)
}

::google::protobuf::uint8* CMsgRGBA::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgRGBA)
  // optional int32 r = 1;
  if (has_r()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->r(), target);
  }

  // optional int32 g = 2;
  if (has_g()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->g(), target);
  }

  // optional int32 b = 3;
  if (has_b()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->b(), target);
  }

  // optional int32 a = 4;
  if (has_a()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->a(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgRGBA)
  return target;
}

size_t CMsgRGBA::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgRGBA)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional int32 r = 1;
    if (has_r()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->r());
    }

    // optional int32 g = 2;
    if (has_g()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->g());
    }

    // optional int32 b = 3;
    if (has_b()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->b());
    }

    // optional int32 a = 4;
    if (has_a()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->a());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgRGBA::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgRGBA)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgRGBA* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgRGBA>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgRGBA)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgRGBA)
    MergeFrom(*source);
  }
}

void CMsgRGBA::MergeFrom(const CMsgRGBA& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgRGBA)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 15u) {
    if (from.has_r()) {
      set_r(from.r());
    }
    if (from.has_g()) {
      set_g(from.g());
    }
    if (from.has_b()) {
      set_b(from.b());
    }
    if (from.has_a()) {
      set_a(from.a());
    }
  }
}

void CMsgRGBA::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgRGBA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRGBA::CopyFrom(const CMsgRGBA& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgRGBA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRGBA::IsInitialized() const {
  return true;
}

void CMsgRGBA::Swap(CMsgRGBA* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgRGBA::InternalSwap(CMsgRGBA* other) {
  std::swap(r_, other->r_);
  std::swap(g_, other->g_);
  std::swap(b_, other->b_);
  std::swap(a_, other->a_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgRGBA::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgRGBA

// optional int32 r = 1;
bool CMsgRGBA::has_r() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgRGBA::set_has_r() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgRGBA::clear_has_r() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgRGBA::clear_r() {
  r_ = 0;
  clear_has_r();
}
::google::protobuf::int32 CMsgRGBA::r() const {
  // @@protoc_insertion_point(field_get:CMsgRGBA.r)
  return r_;
}
void CMsgRGBA::set_r(::google::protobuf::int32 value) {
  set_has_r();
  r_ = value;
  // @@protoc_insertion_point(field_set:CMsgRGBA.r)
}

// optional int32 g = 2;
bool CMsgRGBA::has_g() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgRGBA::set_has_g() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgRGBA::clear_has_g() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgRGBA::clear_g() {
  g_ = 0;
  clear_has_g();
}
::google::protobuf::int32 CMsgRGBA::g() const {
  // @@protoc_insertion_point(field_get:CMsgRGBA.g)
  return g_;
}
void CMsgRGBA::set_g(::google::protobuf::int32 value) {
  set_has_g();
  g_ = value;
  // @@protoc_insertion_point(field_set:CMsgRGBA.g)
}

// optional int32 b = 3;
bool CMsgRGBA::has_b() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgRGBA::set_has_b() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgRGBA::clear_has_b() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgRGBA::clear_b() {
  b_ = 0;
  clear_has_b();
}
::google::protobuf::int32 CMsgRGBA::b() const {
  // @@protoc_insertion_point(field_get:CMsgRGBA.b)
  return b_;
}
void CMsgRGBA::set_b(::google::protobuf::int32 value) {
  set_has_b();
  b_ = value;
  // @@protoc_insertion_point(field_set:CMsgRGBA.b)
}

// optional int32 a = 4;
bool CMsgRGBA::has_a() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgRGBA::set_has_a() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgRGBA::clear_has_a() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgRGBA::clear_a() {
  a_ = 0;
  clear_has_a();
}
::google::protobuf::int32 CMsgRGBA::a() const {
  // @@protoc_insertion_point(field_get:CMsgRGBA.a)
  return a_;
}
void CMsgRGBA::set_a(::google::protobuf::int32 value) {
  set_has_a();
  a_ = value;
  // @@protoc_insertion_point(field_set:CMsgRGBA.a)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CNETMsg_Tick::kTickFieldNumber;
const int CNETMsg_Tick::kHostComputationtimeFieldNumber;
const int CNETMsg_Tick::kHostComputationtimeStdDeviationFieldNumber;
const int CNETMsg_Tick::kHostFramestarttimeStdDeviationFieldNumber;
const int CNETMsg_Tick::kHltvReplayFlagsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CNETMsg_Tick::CNETMsg_Tick()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_netmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CNETMsg_Tick)
}
CNETMsg_Tick::CNETMsg_Tick(const CNETMsg_Tick& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&tick_, &from.tick_,
    reinterpret_cast<char*>(&hltv_replay_flags_) -
    reinterpret_cast<char*>(&tick_) + sizeof(hltv_replay_flags_));
  // @@protoc_insertion_point(copy_constructor:CNETMsg_Tick)
}

void CNETMsg_Tick::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&tick_, 0, reinterpret_cast<char*>(&hltv_replay_flags_) -
    reinterpret_cast<char*>(&tick_) + sizeof(hltv_replay_flags_));
}

CNETMsg_Tick::~CNETMsg_Tick() {
  // @@protoc_insertion_point(destructor:CNETMsg_Tick)
  SharedDtor();
}

void CNETMsg_Tick::SharedDtor() {
}

void CNETMsg_Tick::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CNETMsg_Tick::descriptor() {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[4].descriptor;
}

const CNETMsg_Tick& CNETMsg_Tick::default_instance() {
  protobuf_netmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CNETMsg_Tick* CNETMsg_Tick::New(::google::protobuf::Arena* arena) const {
  CNETMsg_Tick* n = new CNETMsg_Tick;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CNETMsg_Tick::Clear() {
// @@protoc_insertion_point(message_clear_start:CNETMsg_Tick)
  if (_has_bits_[0 / 32] & 31u) {
    ::memset(&tick_, 0, reinterpret_cast<char*>(&hltv_replay_flags_) -
      reinterpret_cast<char*>(&tick_) + sizeof(hltv_replay_flags_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CNETMsg_Tick::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CNETMsg_Tick)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 tick = 1;
      case 1: {
        if (tag == 8u) {
          set_has_tick();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tick_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 host_computationtime = 4;
      case 4: {
        if (tag == 32u) {
          set_has_host_computationtime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &host_computationtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 host_computationtime_std_deviation = 5;
      case 5: {
        if (tag == 40u) {
          set_has_host_computationtime_std_deviation();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &host_computationtime_std_deviation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 host_framestarttime_std_deviation = 6;
      case 6: {
        if (tag == 48u) {
          set_has_host_framestarttime_std_deviation();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &host_framestarttime_std_deviation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 hltv_replay_flags = 7;
      case 7: {
        if (tag == 56u) {
          set_has_hltv_replay_flags();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hltv_replay_flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CNETMsg_Tick)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CNETMsg_Tick)
  return false;
#undef DO_
}

void CNETMsg_Tick::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CNETMsg_Tick)
  // optional uint32 tick = 1;
  if (has_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tick(), output);
  }

  // optional uint32 host_computationtime = 4;
  if (has_host_computationtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->host_computationtime(), output);
  }

  // optional uint32 host_computationtime_std_deviation = 5;
  if (has_host_computationtime_std_deviation()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->host_computationtime_std_deviation(), output);
  }

  // optional uint32 host_framestarttime_std_deviation = 6;
  if (has_host_framestarttime_std_deviation()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->host_framestarttime_std_deviation(), output);
  }

  // optional uint32 hltv_replay_flags = 7;
  if (has_hltv_replay_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->hltv_replay_flags(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CNETMsg_Tick)
}

::google::protobuf::uint8* CNETMsg_Tick::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CNETMsg_Tick)
  // optional uint32 tick = 1;
  if (has_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tick(), target);
  }

  // optional uint32 host_computationtime = 4;
  if (has_host_computationtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->host_computationtime(), target);
  }

  // optional uint32 host_computationtime_std_deviation = 5;
  if (has_host_computationtime_std_deviation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->host_computationtime_std_deviation(), target);
  }

  // optional uint32 host_framestarttime_std_deviation = 6;
  if (has_host_framestarttime_std_deviation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->host_framestarttime_std_deviation(), target);
  }

  // optional uint32 hltv_replay_flags = 7;
  if (has_hltv_replay_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->hltv_replay_flags(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CNETMsg_Tick)
  return target;
}

size_t CNETMsg_Tick::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CNETMsg_Tick)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional uint32 tick = 1;
    if (has_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tick());
    }

    // optional uint32 host_computationtime = 4;
    if (has_host_computationtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->host_computationtime());
    }

    // optional uint32 host_computationtime_std_deviation = 5;
    if (has_host_computationtime_std_deviation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->host_computationtime_std_deviation());
    }

    // optional uint32 host_framestarttime_std_deviation = 6;
    if (has_host_framestarttime_std_deviation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->host_framestarttime_std_deviation());
    }

    // optional uint32 hltv_replay_flags = 7;
    if (has_hltv_replay_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hltv_replay_flags());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CNETMsg_Tick::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CNETMsg_Tick)
  GOOGLE_DCHECK_NE(&from, this);
  const CNETMsg_Tick* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CNETMsg_Tick>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CNETMsg_Tick)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CNETMsg_Tick)
    MergeFrom(*source);
  }
}

void CNETMsg_Tick::MergeFrom(const CNETMsg_Tick& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CNETMsg_Tick)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 31u) {
    if (from.has_tick()) {
      set_tick(from.tick());
    }
    if (from.has_host_computationtime()) {
      set_host_computationtime(from.host_computationtime());
    }
    if (from.has_host_computationtime_std_deviation()) {
      set_host_computationtime_std_deviation(from.host_computationtime_std_deviation());
    }
    if (from.has_host_framestarttime_std_deviation()) {
      set_host_framestarttime_std_deviation(from.host_framestarttime_std_deviation());
    }
    if (from.has_hltv_replay_flags()) {
      set_hltv_replay_flags(from.hltv_replay_flags());
    }
  }
}

void CNETMsg_Tick::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CNETMsg_Tick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CNETMsg_Tick::CopyFrom(const CNETMsg_Tick& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CNETMsg_Tick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CNETMsg_Tick::IsInitialized() const {
  return true;
}

void CNETMsg_Tick::Swap(CNETMsg_Tick* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CNETMsg_Tick::InternalSwap(CNETMsg_Tick* other) {
  std::swap(tick_, other->tick_);
  std::swap(host_computationtime_, other->host_computationtime_);
  std::swap(host_computationtime_std_deviation_, other->host_computationtime_std_deviation_);
  std::swap(host_framestarttime_std_deviation_, other->host_framestarttime_std_deviation_);
  std::swap(hltv_replay_flags_, other->hltv_replay_flags_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CNETMsg_Tick::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CNETMsg_Tick

// optional uint32 tick = 1;
bool CNETMsg_Tick::has_tick() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CNETMsg_Tick::set_has_tick() {
  _has_bits_[0] |= 0x00000001u;
}
void CNETMsg_Tick::clear_has_tick() {
  _has_bits_[0] &= ~0x00000001u;
}
void CNETMsg_Tick::clear_tick() {
  tick_ = 0u;
  clear_has_tick();
}
::google::protobuf::uint32 CNETMsg_Tick::tick() const {
  // @@protoc_insertion_point(field_get:CNETMsg_Tick.tick)
  return tick_;
}
void CNETMsg_Tick::set_tick(::google::protobuf::uint32 value) {
  set_has_tick();
  tick_ = value;
  // @@protoc_insertion_point(field_set:CNETMsg_Tick.tick)
}

// optional uint32 host_computationtime = 4;
bool CNETMsg_Tick::has_host_computationtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CNETMsg_Tick::set_has_host_computationtime() {
  _has_bits_[0] |= 0x00000002u;
}
void CNETMsg_Tick::clear_has_host_computationtime() {
  _has_bits_[0] &= ~0x00000002u;
}
void CNETMsg_Tick::clear_host_computationtime() {
  host_computationtime_ = 0u;
  clear_has_host_computationtime();
}
::google::protobuf::uint32 CNETMsg_Tick::host_computationtime() const {
  // @@protoc_insertion_point(field_get:CNETMsg_Tick.host_computationtime)
  return host_computationtime_;
}
void CNETMsg_Tick::set_host_computationtime(::google::protobuf::uint32 value) {
  set_has_host_computationtime();
  host_computationtime_ = value;
  // @@protoc_insertion_point(field_set:CNETMsg_Tick.host_computationtime)
}

// optional uint32 host_computationtime_std_deviation = 5;
bool CNETMsg_Tick::has_host_computationtime_std_deviation() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CNETMsg_Tick::set_has_host_computationtime_std_deviation() {
  _has_bits_[0] |= 0x00000004u;
}
void CNETMsg_Tick::clear_has_host_computationtime_std_deviation() {
  _has_bits_[0] &= ~0x00000004u;
}
void CNETMsg_Tick::clear_host_computationtime_std_deviation() {
  host_computationtime_std_deviation_ = 0u;
  clear_has_host_computationtime_std_deviation();
}
::google::protobuf::uint32 CNETMsg_Tick::host_computationtime_std_deviation() const {
  // @@protoc_insertion_point(field_get:CNETMsg_Tick.host_computationtime_std_deviation)
  return host_computationtime_std_deviation_;
}
void CNETMsg_Tick::set_host_computationtime_std_deviation(::google::protobuf::uint32 value) {
  set_has_host_computationtime_std_deviation();
  host_computationtime_std_deviation_ = value;
  // @@protoc_insertion_point(field_set:CNETMsg_Tick.host_computationtime_std_deviation)
}

// optional uint32 host_framestarttime_std_deviation = 6;
bool CNETMsg_Tick::has_host_framestarttime_std_deviation() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CNETMsg_Tick::set_has_host_framestarttime_std_deviation() {
  _has_bits_[0] |= 0x00000008u;
}
void CNETMsg_Tick::clear_has_host_framestarttime_std_deviation() {
  _has_bits_[0] &= ~0x00000008u;
}
void CNETMsg_Tick::clear_host_framestarttime_std_deviation() {
  host_framestarttime_std_deviation_ = 0u;
  clear_has_host_framestarttime_std_deviation();
}
::google::protobuf::uint32 CNETMsg_Tick::host_framestarttime_std_deviation() const {
  // @@protoc_insertion_point(field_get:CNETMsg_Tick.host_framestarttime_std_deviation)
  return host_framestarttime_std_deviation_;
}
void CNETMsg_Tick::set_host_framestarttime_std_deviation(::google::protobuf::uint32 value) {
  set_has_host_framestarttime_std_deviation();
  host_framestarttime_std_deviation_ = value;
  // @@protoc_insertion_point(field_set:CNETMsg_Tick.host_framestarttime_std_deviation)
}

// optional uint32 hltv_replay_flags = 7;
bool CNETMsg_Tick::has_hltv_replay_flags() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CNETMsg_Tick::set_has_hltv_replay_flags() {
  _has_bits_[0] |= 0x00000010u;
}
void CNETMsg_Tick::clear_has_hltv_replay_flags() {
  _has_bits_[0] &= ~0x00000010u;
}
void CNETMsg_Tick::clear_hltv_replay_flags() {
  hltv_replay_flags_ = 0u;
  clear_has_hltv_replay_flags();
}
::google::protobuf::uint32 CNETMsg_Tick::hltv_replay_flags() const {
  // @@protoc_insertion_point(field_get:CNETMsg_Tick.hltv_replay_flags)
  return hltv_replay_flags_;
}
void CNETMsg_Tick::set_hltv_replay_flags(::google::protobuf::uint32 value) {
  set_has_hltv_replay_flags();
  hltv_replay_flags_ = value;
  // @@protoc_insertion_point(field_set:CNETMsg_Tick.hltv_replay_flags)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CNETMsg_StringCmd::kCommandFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CNETMsg_StringCmd::CNETMsg_StringCmd()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_netmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CNETMsg_StringCmd)
}
CNETMsg_StringCmd::CNETMsg_StringCmd(const CNETMsg_StringCmd& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  command_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_command()) {
    command_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.command_);
  }
  // @@protoc_insertion_point(copy_constructor:CNETMsg_StringCmd)
}

void CNETMsg_StringCmd::SharedCtor() {
  _cached_size_ = 0;
  command_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CNETMsg_StringCmd::~CNETMsg_StringCmd() {
  // @@protoc_insertion_point(destructor:CNETMsg_StringCmd)
  SharedDtor();
}

void CNETMsg_StringCmd::SharedDtor() {
  command_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CNETMsg_StringCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CNETMsg_StringCmd::descriptor() {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[5].descriptor;
}

const CNETMsg_StringCmd& CNETMsg_StringCmd::default_instance() {
  protobuf_netmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CNETMsg_StringCmd* CNETMsg_StringCmd::New(::google::protobuf::Arena* arena) const {
  CNETMsg_StringCmd* n = new CNETMsg_StringCmd;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CNETMsg_StringCmd::Clear() {
// @@protoc_insertion_point(message_clear_start:CNETMsg_StringCmd)
  if (has_command()) {
    GOOGLE_DCHECK(!command_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*command_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CNETMsg_StringCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CNETMsg_StringCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string command = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_command()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->command().data(), this->command().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CNETMsg_StringCmd.command");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CNETMsg_StringCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CNETMsg_StringCmd)
  return false;
#undef DO_
}

void CNETMsg_StringCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CNETMsg_StringCmd)
  // optional string command = 1;
  if (has_command()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->command().data(), this->command().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CNETMsg_StringCmd.command");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->command(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CNETMsg_StringCmd)
}

::google::protobuf::uint8* CNETMsg_StringCmd::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CNETMsg_StringCmd)
  // optional string command = 1;
  if (has_command()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->command().data(), this->command().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CNETMsg_StringCmd.command");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->command(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CNETMsg_StringCmd)
  return target;
}

size_t CNETMsg_StringCmd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CNETMsg_StringCmd)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional string command = 1;
  if (has_command()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->command());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CNETMsg_StringCmd::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CNETMsg_StringCmd)
  GOOGLE_DCHECK_NE(&from, this);
  const CNETMsg_StringCmd* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CNETMsg_StringCmd>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CNETMsg_StringCmd)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CNETMsg_StringCmd)
    MergeFrom(*source);
  }
}

void CNETMsg_StringCmd::MergeFrom(const CNETMsg_StringCmd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CNETMsg_StringCmd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_command()) {
    set_has_command();
    command_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.command_);
  }
}

void CNETMsg_StringCmd::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CNETMsg_StringCmd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CNETMsg_StringCmd::CopyFrom(const CNETMsg_StringCmd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CNETMsg_StringCmd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CNETMsg_StringCmd::IsInitialized() const {
  return true;
}

void CNETMsg_StringCmd::Swap(CNETMsg_StringCmd* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CNETMsg_StringCmd::InternalSwap(CNETMsg_StringCmd* other) {
  command_.Swap(&other->command_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CNETMsg_StringCmd::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[5];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CNETMsg_StringCmd

// optional string command = 1;
bool CNETMsg_StringCmd::has_command() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CNETMsg_StringCmd::set_has_command() {
  _has_bits_[0] |= 0x00000001u;
}
void CNETMsg_StringCmd::clear_has_command() {
  _has_bits_[0] &= ~0x00000001u;
}
void CNETMsg_StringCmd::clear_command() {
  command_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_command();
}
const ::std::string& CNETMsg_StringCmd::command() const {
  // @@protoc_insertion_point(field_get:CNETMsg_StringCmd.command)
  return command_.GetNoArena();
}
void CNETMsg_StringCmd::set_command(const ::std::string& value) {
  set_has_command();
  command_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CNETMsg_StringCmd.command)
}
#if LANG_CXX11
void CNETMsg_StringCmd::set_command(::std::string&& value) {
  set_has_command();
  command_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CNETMsg_StringCmd.command)
}
#endif
void CNETMsg_StringCmd::set_command(const char* value) {
  set_has_command();
  command_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CNETMsg_StringCmd.command)
}
void CNETMsg_StringCmd::set_command(const char* value, size_t size) {
  set_has_command();
  command_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CNETMsg_StringCmd.command)
}
::std::string* CNETMsg_StringCmd::mutable_command() {
  set_has_command();
  // @@protoc_insertion_point(field_mutable:CNETMsg_StringCmd.command)
  return command_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CNETMsg_StringCmd::release_command() {
  // @@protoc_insertion_point(field_release:CNETMsg_StringCmd.command)
  clear_has_command();
  return command_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CNETMsg_StringCmd::set_allocated_command(::std::string* command) {
  if (command != NULL) {
    set_has_command();
  } else {
    clear_has_command();
  }
  command_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), command);
  // @@protoc_insertion_point(field_set_allocated:CNETMsg_StringCmd.command)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CNETMsg_SignonState::kSignonStateFieldNumber;
const int CNETMsg_SignonState::kSpawnCountFieldNumber;
const int CNETMsg_SignonState::kNumServerPlayersFieldNumber;
const int CNETMsg_SignonState::kPlayersNetworkidsFieldNumber;
const int CNETMsg_SignonState::kMapNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CNETMsg_SignonState::CNETMsg_SignonState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_netmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CNETMsg_SignonState)
}
CNETMsg_SignonState::CNETMsg_SignonState(const CNETMsg_SignonState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      players_networkids_(from.players_networkids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  map_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_map_name()) {
    map_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_name_);
  }
  ::memcpy(&signon_state_, &from.signon_state_,
    reinterpret_cast<char*>(&num_server_players_) -
    reinterpret_cast<char*>(&signon_state_) + sizeof(num_server_players_));
  // @@protoc_insertion_point(copy_constructor:CNETMsg_SignonState)
}

void CNETMsg_SignonState::SharedCtor() {
  _cached_size_ = 0;
  map_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&signon_state_, 0, reinterpret_cast<char*>(&num_server_players_) -
    reinterpret_cast<char*>(&signon_state_) + sizeof(num_server_players_));
}

CNETMsg_SignonState::~CNETMsg_SignonState() {
  // @@protoc_insertion_point(destructor:CNETMsg_SignonState)
  SharedDtor();
}

void CNETMsg_SignonState::SharedDtor() {
  map_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CNETMsg_SignonState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CNETMsg_SignonState::descriptor() {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[6].descriptor;
}

const CNETMsg_SignonState& CNETMsg_SignonState::default_instance() {
  protobuf_netmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CNETMsg_SignonState* CNETMsg_SignonState::New(::google::protobuf::Arena* arena) const {
  CNETMsg_SignonState* n = new CNETMsg_SignonState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CNETMsg_SignonState::Clear() {
// @@protoc_insertion_point(message_clear_start:CNETMsg_SignonState)
  players_networkids_.Clear();
  if (has_map_name()) {
    GOOGLE_DCHECK(!map_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*map_name_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&signon_state_, 0, reinterpret_cast<char*>(&num_server_players_) -
      reinterpret_cast<char*>(&signon_state_) + sizeof(num_server_players_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CNETMsg_SignonState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CNETMsg_SignonState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 signon_state = 1;
      case 1: {
        if (tag == 8u) {
          set_has_signon_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &signon_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 spawn_count = 2;
      case 2: {
        if (tag == 16u) {
          set_has_spawn_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &spawn_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 num_server_players = 3;
      case 3: {
        if (tag == 24u) {
          set_has_num_server_players();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_server_players_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string players_networkids = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_players_networkids()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->players_networkids(this->players_networkids_size() - 1).data(),
            this->players_networkids(this->players_networkids_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CNETMsg_SignonState.players_networkids");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string map_name = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_map_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->map_name().data(), this->map_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CNETMsg_SignonState.map_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CNETMsg_SignonState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CNETMsg_SignonState)
  return false;
#undef DO_
}

void CNETMsg_SignonState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CNETMsg_SignonState)
  // optional uint32 signon_state = 1;
  if (has_signon_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->signon_state(), output);
  }

  // optional uint32 spawn_count = 2;
  if (has_spawn_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->spawn_count(), output);
  }

  // optional uint32 num_server_players = 3;
  if (has_num_server_players()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->num_server_players(), output);
  }

  // repeated string players_networkids = 4;
  for (int i = 0; i < this->players_networkids_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->players_networkids(i).data(), this->players_networkids(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CNETMsg_SignonState.players_networkids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->players_networkids(i), output);
  }

  // optional string map_name = 5;
  if (has_map_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->map_name().data(), this->map_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CNETMsg_SignonState.map_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->map_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CNETMsg_SignonState)
}

::google::protobuf::uint8* CNETMsg_SignonState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CNETMsg_SignonState)
  // optional uint32 signon_state = 1;
  if (has_signon_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->signon_state(), target);
  }

  // optional uint32 spawn_count = 2;
  if (has_spawn_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->spawn_count(), target);
  }

  // optional uint32 num_server_players = 3;
  if (has_num_server_players()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->num_server_players(), target);
  }

  // repeated string players_networkids = 4;
  for (int i = 0; i < this->players_networkids_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->players_networkids(i).data(), this->players_networkids(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CNETMsg_SignonState.players_networkids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->players_networkids(i), target);
  }

  // optional string map_name = 5;
  if (has_map_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->map_name().data(), this->map_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CNETMsg_SignonState.map_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->map_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CNETMsg_SignonState)
  return target;
}

size_t CNETMsg_SignonState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CNETMsg_SignonState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated string players_networkids = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->players_networkids_size());
  for (int i = 0; i < this->players_networkids_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->players_networkids(i));
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional string map_name = 5;
    if (has_map_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->map_name());
    }

    // optional uint32 signon_state = 1;
    if (has_signon_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->signon_state());
    }

    // optional uint32 spawn_count = 2;
    if (has_spawn_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->spawn_count());
    }

    // optional uint32 num_server_players = 3;
    if (has_num_server_players()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_server_players());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CNETMsg_SignonState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CNETMsg_SignonState)
  GOOGLE_DCHECK_NE(&from, this);
  const CNETMsg_SignonState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CNETMsg_SignonState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CNETMsg_SignonState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CNETMsg_SignonState)
    MergeFrom(*source);
  }
}

void CNETMsg_SignonState::MergeFrom(const CNETMsg_SignonState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CNETMsg_SignonState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  players_networkids_.MergeFrom(from.players_networkids_);
  if (from._has_bits_[0 / 32] & 15u) {
    if (from.has_map_name()) {
      set_has_map_name();
      map_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_name_);
    }
    if (from.has_signon_state()) {
      set_signon_state(from.signon_state());
    }
    if (from.has_spawn_count()) {
      set_spawn_count(from.spawn_count());
    }
    if (from.has_num_server_players()) {
      set_num_server_players(from.num_server_players());
    }
  }
}

void CNETMsg_SignonState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CNETMsg_SignonState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CNETMsg_SignonState::CopyFrom(const CNETMsg_SignonState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CNETMsg_SignonState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CNETMsg_SignonState::IsInitialized() const {
  return true;
}

void CNETMsg_SignonState::Swap(CNETMsg_SignonState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CNETMsg_SignonState::InternalSwap(CNETMsg_SignonState* other) {
  players_networkids_.UnsafeArenaSwap(&other->players_networkids_);
  map_name_.Swap(&other->map_name_);
  std::swap(signon_state_, other->signon_state_);
  std::swap(spawn_count_, other->spawn_count_);
  std::swap(num_server_players_, other->num_server_players_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CNETMsg_SignonState::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[6];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CNETMsg_SignonState

// optional uint32 signon_state = 1;
bool CNETMsg_SignonState::has_signon_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CNETMsg_SignonState::set_has_signon_state() {
  _has_bits_[0] |= 0x00000002u;
}
void CNETMsg_SignonState::clear_has_signon_state() {
  _has_bits_[0] &= ~0x00000002u;
}
void CNETMsg_SignonState::clear_signon_state() {
  signon_state_ = 0u;
  clear_has_signon_state();
}
::google::protobuf::uint32 CNETMsg_SignonState::signon_state() const {
  // @@protoc_insertion_point(field_get:CNETMsg_SignonState.signon_state)
  return signon_state_;
}
void CNETMsg_SignonState::set_signon_state(::google::protobuf::uint32 value) {
  set_has_signon_state();
  signon_state_ = value;
  // @@protoc_insertion_point(field_set:CNETMsg_SignonState.signon_state)
}

// optional uint32 spawn_count = 2;
bool CNETMsg_SignonState::has_spawn_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CNETMsg_SignonState::set_has_spawn_count() {
  _has_bits_[0] |= 0x00000004u;
}
void CNETMsg_SignonState::clear_has_spawn_count() {
  _has_bits_[0] &= ~0x00000004u;
}
void CNETMsg_SignonState::clear_spawn_count() {
  spawn_count_ = 0u;
  clear_has_spawn_count();
}
::google::protobuf::uint32 CNETMsg_SignonState::spawn_count() const {
  // @@protoc_insertion_point(field_get:CNETMsg_SignonState.spawn_count)
  return spawn_count_;
}
void CNETMsg_SignonState::set_spawn_count(::google::protobuf::uint32 value) {
  set_has_spawn_count();
  spawn_count_ = value;
  // @@protoc_insertion_point(field_set:CNETMsg_SignonState.spawn_count)
}

// optional uint32 num_server_players = 3;
bool CNETMsg_SignonState::has_num_server_players() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CNETMsg_SignonState::set_has_num_server_players() {
  _has_bits_[0] |= 0x00000008u;
}
void CNETMsg_SignonState::clear_has_num_server_players() {
  _has_bits_[0] &= ~0x00000008u;
}
void CNETMsg_SignonState::clear_num_server_players() {
  num_server_players_ = 0u;
  clear_has_num_server_players();
}
::google::protobuf::uint32 CNETMsg_SignonState::num_server_players() const {
  // @@protoc_insertion_point(field_get:CNETMsg_SignonState.num_server_players)
  return num_server_players_;
}
void CNETMsg_SignonState::set_num_server_players(::google::protobuf::uint32 value) {
  set_has_num_server_players();
  num_server_players_ = value;
  // @@protoc_insertion_point(field_set:CNETMsg_SignonState.num_server_players)
}

// repeated string players_networkids = 4;
int CNETMsg_SignonState::players_networkids_size() const {
  return players_networkids_.size();
}
void CNETMsg_SignonState::clear_players_networkids() {
  players_networkids_.Clear();
}
const ::std::string& CNETMsg_SignonState::players_networkids(int index) const {
  // @@protoc_insertion_point(field_get:CNETMsg_SignonState.players_networkids)
  return players_networkids_.Get(index);
}
::std::string* CNETMsg_SignonState::mutable_players_networkids(int index) {
  // @@protoc_insertion_point(field_mutable:CNETMsg_SignonState.players_networkids)
  return players_networkids_.Mutable(index);
}
void CNETMsg_SignonState::set_players_networkids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:CNETMsg_SignonState.players_networkids)
  players_networkids_.Mutable(index)->assign(value);
}
void CNETMsg_SignonState::set_players_networkids(int index, const char* value) {
  players_networkids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CNETMsg_SignonState.players_networkids)
}
void CNETMsg_SignonState::set_players_networkids(int index, const char* value, size_t size) {
  players_networkids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CNETMsg_SignonState.players_networkids)
}
::std::string* CNETMsg_SignonState::add_players_networkids() {
  // @@protoc_insertion_point(field_add_mutable:CNETMsg_SignonState.players_networkids)
  return players_networkids_.Add();
}
void CNETMsg_SignonState::add_players_networkids(const ::std::string& value) {
  players_networkids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CNETMsg_SignonState.players_networkids)
}
void CNETMsg_SignonState::add_players_networkids(const char* value) {
  players_networkids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CNETMsg_SignonState.players_networkids)
}
void CNETMsg_SignonState::add_players_networkids(const char* value, size_t size) {
  players_networkids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CNETMsg_SignonState.players_networkids)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
CNETMsg_SignonState::players_networkids() const {
  // @@protoc_insertion_point(field_list:CNETMsg_SignonState.players_networkids)
  return players_networkids_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
CNETMsg_SignonState::mutable_players_networkids() {
  // @@protoc_insertion_point(field_mutable_list:CNETMsg_SignonState.players_networkids)
  return &players_networkids_;
}

// optional string map_name = 5;
bool CNETMsg_SignonState::has_map_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CNETMsg_SignonState::set_has_map_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CNETMsg_SignonState::clear_has_map_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CNETMsg_SignonState::clear_map_name() {
  map_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_map_name();
}
const ::std::string& CNETMsg_SignonState::map_name() const {
  // @@protoc_insertion_point(field_get:CNETMsg_SignonState.map_name)
  return map_name_.GetNoArena();
}
void CNETMsg_SignonState::set_map_name(const ::std::string& value) {
  set_has_map_name();
  map_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CNETMsg_SignonState.map_name)
}
#if LANG_CXX11
void CNETMsg_SignonState::set_map_name(::std::string&& value) {
  set_has_map_name();
  map_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CNETMsg_SignonState.map_name)
}
#endif
void CNETMsg_SignonState::set_map_name(const char* value) {
  set_has_map_name();
  map_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CNETMsg_SignonState.map_name)
}
void CNETMsg_SignonState::set_map_name(const char* value, size_t size) {
  set_has_map_name();
  map_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CNETMsg_SignonState.map_name)
}
::std::string* CNETMsg_SignonState::mutable_map_name() {
  set_has_map_name();
  // @@protoc_insertion_point(field_mutable:CNETMsg_SignonState.map_name)
  return map_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CNETMsg_SignonState::release_map_name() {
  // @@protoc_insertion_point(field_release:CNETMsg_SignonState.map_name)
  clear_has_map_name();
  return map_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CNETMsg_SignonState::set_allocated_map_name(::std::string* map_name) {
  if (map_name != NULL) {
    set_has_map_name();
  } else {
    clear_has_map_name();
  }
  map_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), map_name);
  // @@protoc_insertion_point(field_set_allocated:CNETMsg_SignonState.map_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsg_CVars_CVar::kNameFieldNumber;
const int CMsg_CVars_CVar::kValueFieldNumber;
const int CMsg_CVars_CVar::kDictionaryNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsg_CVars_CVar::CMsg_CVars_CVar()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_netmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsg_CVars.CVar)
}
CMsg_CVars_CVar::CMsg_CVars_CVar(const CMsg_CVars_CVar& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_value()) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  dictionary_name_ = from.dictionary_name_;
  // @@protoc_insertion_point(copy_constructor:CMsg_CVars.CVar)
}

void CMsg_CVars_CVar::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dictionary_name_ = 0u;
}

CMsg_CVars_CVar::~CMsg_CVars_CVar() {
  // @@protoc_insertion_point(destructor:CMsg_CVars.CVar)
  SharedDtor();
}

void CMsg_CVars_CVar::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsg_CVars_CVar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsg_CVars_CVar::descriptor() {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[7].descriptor;
}

const CMsg_CVars_CVar& CMsg_CVars_CVar::default_instance() {
  protobuf_netmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsg_CVars_CVar* CMsg_CVars_CVar::New(::google::protobuf::Arena* arena) const {
  CMsg_CVars_CVar* n = new CMsg_CVars_CVar;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsg_CVars_CVar::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsg_CVars.CVar)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (has_value()) {
      GOOGLE_DCHECK(!value_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*value_.UnsafeRawStringPointer())->clear();
    }
  }
  dictionary_name_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsg_CVars_CVar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsg_CVars.CVar)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsg_CVars.CVar.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string value = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsg_CVars.CVar.value");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 dictionary_name = 3;
      case 3: {
        if (tag == 24u) {
          set_has_dictionary_name();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dictionary_name_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsg_CVars.CVar)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsg_CVars.CVar)
  return false;
#undef DO_
}

void CMsg_CVars_CVar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsg_CVars.CVar)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsg_CVars.CVar.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsg_CVars.CVar.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  // optional uint32 dictionary_name = 3;
  if (has_dictionary_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->dictionary_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsg_CVars.CVar)
}

::google::protobuf::uint8* CMsg_CVars_CVar::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsg_CVars.CVar)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsg_CVars.CVar.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsg_CVars.CVar.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  // optional uint32 dictionary_name = 3;
  if (has_dictionary_name()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->dictionary_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsg_CVars.CVar)
  return target;
}

size_t CMsg_CVars_CVar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsg_CVars.CVar)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

    // optional uint32 dictionary_name = 3;
    if (has_dictionary_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dictionary_name());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsg_CVars_CVar::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsg_CVars.CVar)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsg_CVars_CVar* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsg_CVars_CVar>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsg_CVars.CVar)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsg_CVars.CVar)
    MergeFrom(*source);
  }
}

void CMsg_CVars_CVar::MergeFrom(const CMsg_CVars_CVar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsg_CVars.CVar)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_value()) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
    if (from.has_dictionary_name()) {
      set_dictionary_name(from.dictionary_name());
    }
  }
}

void CMsg_CVars_CVar::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsg_CVars.CVar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsg_CVars_CVar::CopyFrom(const CMsg_CVars_CVar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsg_CVars.CVar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsg_CVars_CVar::IsInitialized() const {
  return true;
}

void CMsg_CVars_CVar::Swap(CMsg_CVars_CVar* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsg_CVars_CVar::InternalSwap(CMsg_CVars_CVar* other) {
  name_.Swap(&other->name_);
  value_.Swap(&other->value_);
  std::swap(dictionary_name_, other->dictionary_name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsg_CVars_CVar::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[7];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsg_CVars_CVar

// optional string name = 1;
bool CMsg_CVars_CVar::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsg_CVars_CVar::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsg_CVars_CVar::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsg_CVars_CVar::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& CMsg_CVars_CVar::name() const {
  // @@protoc_insertion_point(field_get:CMsg_CVars.CVar.name)
  return name_.GetNoArena();
}
void CMsg_CVars_CVar::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsg_CVars.CVar.name)
}
#if LANG_CXX11
void CMsg_CVars_CVar::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsg_CVars.CVar.name)
}
#endif
void CMsg_CVars_CVar::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsg_CVars.CVar.name)
}
void CMsg_CVars_CVar::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsg_CVars.CVar.name)
}
::std::string* CMsg_CVars_CVar::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:CMsg_CVars.CVar.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsg_CVars_CVar::release_name() {
  // @@protoc_insertion_point(field_release:CMsg_CVars.CVar.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsg_CVars_CVar::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:CMsg_CVars.CVar.name)
}

// optional string value = 2;
bool CMsg_CVars_CVar::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsg_CVars_CVar::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsg_CVars_CVar::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsg_CVars_CVar::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
const ::std::string& CMsg_CVars_CVar::value() const {
  // @@protoc_insertion_point(field_get:CMsg_CVars.CVar.value)
  return value_.GetNoArena();
}
void CMsg_CVars_CVar::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsg_CVars.CVar.value)
}
#if LANG_CXX11
void CMsg_CVars_CVar::set_value(::std::string&& value) {
  set_has_value();
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsg_CVars.CVar.value)
}
#endif
void CMsg_CVars_CVar::set_value(const char* value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsg_CVars.CVar.value)
}
void CMsg_CVars_CVar::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsg_CVars.CVar.value)
}
::std::string* CMsg_CVars_CVar::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:CMsg_CVars.CVar.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsg_CVars_CVar::release_value() {
  // @@protoc_insertion_point(field_release:CMsg_CVars.CVar.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsg_CVars_CVar::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:CMsg_CVars.CVar.value)
}

// optional uint32 dictionary_name = 3;
bool CMsg_CVars_CVar::has_dictionary_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsg_CVars_CVar::set_has_dictionary_name() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsg_CVars_CVar::clear_has_dictionary_name() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsg_CVars_CVar::clear_dictionary_name() {
  dictionary_name_ = 0u;
  clear_has_dictionary_name();
}
::google::protobuf::uint32 CMsg_CVars_CVar::dictionary_name() const {
  // @@protoc_insertion_point(field_get:CMsg_CVars.CVar.dictionary_name)
  return dictionary_name_;
}
void CMsg_CVars_CVar::set_dictionary_name(::google::protobuf::uint32 value) {
  set_has_dictionary_name();
  dictionary_name_ = value;
  // @@protoc_insertion_point(field_set:CMsg_CVars.CVar.dictionary_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsg_CVars::kCvarsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsg_CVars::CMsg_CVars()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_netmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsg_CVars)
}
CMsg_CVars::CMsg_CVars(const CMsg_CVars& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      cvars_(from.cvars_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsg_CVars)
}

void CMsg_CVars::SharedCtor() {
  _cached_size_ = 0;
}

CMsg_CVars::~CMsg_CVars() {
  // @@protoc_insertion_point(destructor:CMsg_CVars)
  SharedDtor();
}

void CMsg_CVars::SharedDtor() {
}

void CMsg_CVars::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsg_CVars::descriptor() {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[8].descriptor;
}

const CMsg_CVars& CMsg_CVars::default_instance() {
  protobuf_netmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsg_CVars* CMsg_CVars::New(::google::protobuf::Arena* arena) const {
  CMsg_CVars* n = new CMsg_CVars;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsg_CVars::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsg_CVars)
  cvars_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsg_CVars::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsg_CVars)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsg_CVars.CVar cvars = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_cvars()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsg_CVars)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsg_CVars)
  return false;
#undef DO_
}

void CMsg_CVars::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsg_CVars)
  // repeated .CMsg_CVars.CVar cvars = 1;
  for (unsigned int i = 0, n = this->cvars_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cvars(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsg_CVars)
}

::google::protobuf::uint8* CMsg_CVars::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsg_CVars)
  // repeated .CMsg_CVars.CVar cvars = 1;
  for (unsigned int i = 0, n = this->cvars_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->cvars(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsg_CVars)
  return target;
}

size_t CMsg_CVars::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsg_CVars)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .CMsg_CVars.CVar cvars = 1;
  {
    unsigned int count = this->cvars_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cvars(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsg_CVars::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsg_CVars)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsg_CVars* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsg_CVars>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsg_CVars)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsg_CVars)
    MergeFrom(*source);
  }
}

void CMsg_CVars::MergeFrom(const CMsg_CVars& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsg_CVars)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cvars_.MergeFrom(from.cvars_);
}

void CMsg_CVars::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsg_CVars)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsg_CVars::CopyFrom(const CMsg_CVars& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsg_CVars)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsg_CVars::IsInitialized() const {
  return true;
}

void CMsg_CVars::Swap(CMsg_CVars* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsg_CVars::InternalSwap(CMsg_CVars* other) {
  cvars_.UnsafeArenaSwap(&other->cvars_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsg_CVars::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[8];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsg_CVars

// repeated .CMsg_CVars.CVar cvars = 1;
int CMsg_CVars::cvars_size() const {
  return cvars_.size();
}
void CMsg_CVars::clear_cvars() {
  cvars_.Clear();
}
const ::CMsg_CVars_CVar& CMsg_CVars::cvars(int index) const {
  // @@protoc_insertion_point(field_get:CMsg_CVars.cvars)
  return cvars_.Get(index);
}
::CMsg_CVars_CVar* CMsg_CVars::mutable_cvars(int index) {
  // @@protoc_insertion_point(field_mutable:CMsg_CVars.cvars)
  return cvars_.Mutable(index);
}
::CMsg_CVars_CVar* CMsg_CVars::add_cvars() {
  // @@protoc_insertion_point(field_add:CMsg_CVars.cvars)
  return cvars_.Add();
}
::google::protobuf::RepeatedPtrField< ::CMsg_CVars_CVar >*
CMsg_CVars::mutable_cvars() {
  // @@protoc_insertion_point(field_mutable_list:CMsg_CVars.cvars)
  return &cvars_;
}
const ::google::protobuf::RepeatedPtrField< ::CMsg_CVars_CVar >&
CMsg_CVars::cvars() const {
  // @@protoc_insertion_point(field_list:CMsg_CVars.cvars)
  return cvars_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CNETMsg_SetConVar::kConvarsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CNETMsg_SetConVar::CNETMsg_SetConVar()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_netmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CNETMsg_SetConVar)
}
CNETMsg_SetConVar::CNETMsg_SetConVar(const CNETMsg_SetConVar& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_convars()) {
    convars_ = new ::CMsg_CVars(*from.convars_);
  } else {
    convars_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:CNETMsg_SetConVar)
}

void CNETMsg_SetConVar::SharedCtor() {
  _cached_size_ = 0;
  convars_ = NULL;
}

CNETMsg_SetConVar::~CNETMsg_SetConVar() {
  // @@protoc_insertion_point(destructor:CNETMsg_SetConVar)
  SharedDtor();
}

void CNETMsg_SetConVar::SharedDtor() {
  if (this != internal_default_instance()) {
    delete convars_;
  }
}

void CNETMsg_SetConVar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CNETMsg_SetConVar::descriptor() {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[9].descriptor;
}

const CNETMsg_SetConVar& CNETMsg_SetConVar::default_instance() {
  protobuf_netmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CNETMsg_SetConVar* CNETMsg_SetConVar::New(::google::protobuf::Arena* arena) const {
  CNETMsg_SetConVar* n = new CNETMsg_SetConVar;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CNETMsg_SetConVar::Clear() {
// @@protoc_insertion_point(message_clear_start:CNETMsg_SetConVar)
  if (has_convars()) {
    GOOGLE_DCHECK(convars_ != NULL);
    convars_->::CMsg_CVars::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CNETMsg_SetConVar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CNETMsg_SetConVar)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsg_CVars convars = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_convars()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CNETMsg_SetConVar)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CNETMsg_SetConVar)
  return false;
#undef DO_
}

void CNETMsg_SetConVar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CNETMsg_SetConVar)
  // optional .CMsg_CVars convars = 1;
  if (has_convars()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->convars_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CNETMsg_SetConVar)
}

::google::protobuf::uint8* CNETMsg_SetConVar::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CNETMsg_SetConVar)
  // optional .CMsg_CVars convars = 1;
  if (has_convars()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->convars_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CNETMsg_SetConVar)
  return target;
}

size_t CNETMsg_SetConVar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CNETMsg_SetConVar)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional .CMsg_CVars convars = 1;
  if (has_convars()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->convars_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CNETMsg_SetConVar::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CNETMsg_SetConVar)
  GOOGLE_DCHECK_NE(&from, this);
  const CNETMsg_SetConVar* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CNETMsg_SetConVar>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CNETMsg_SetConVar)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CNETMsg_SetConVar)
    MergeFrom(*source);
  }
}

void CNETMsg_SetConVar::MergeFrom(const CNETMsg_SetConVar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CNETMsg_SetConVar)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_convars()) {
    mutable_convars()->::CMsg_CVars::MergeFrom(from.convars());
  }
}

void CNETMsg_SetConVar::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CNETMsg_SetConVar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CNETMsg_SetConVar::CopyFrom(const CNETMsg_SetConVar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CNETMsg_SetConVar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CNETMsg_SetConVar::IsInitialized() const {
  return true;
}

void CNETMsg_SetConVar::Swap(CNETMsg_SetConVar* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CNETMsg_SetConVar::InternalSwap(CNETMsg_SetConVar* other) {
  std::swap(convars_, other->convars_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CNETMsg_SetConVar::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[9];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CNETMsg_SetConVar

// optional .CMsg_CVars convars = 1;
bool CNETMsg_SetConVar::has_convars() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CNETMsg_SetConVar::set_has_convars() {
  _has_bits_[0] |= 0x00000001u;
}
void CNETMsg_SetConVar::clear_has_convars() {
  _has_bits_[0] &= ~0x00000001u;
}
void CNETMsg_SetConVar::clear_convars() {
  if (convars_ != NULL) convars_->::CMsg_CVars::Clear();
  clear_has_convars();
}
const ::CMsg_CVars& CNETMsg_SetConVar::convars() const {
  // @@protoc_insertion_point(field_get:CNETMsg_SetConVar.convars)
  return convars_ != NULL ? *convars_
                         : *::CMsg_CVars::internal_default_instance();
}
::CMsg_CVars* CNETMsg_SetConVar::mutable_convars() {
  set_has_convars();
  if (convars_ == NULL) {
    convars_ = new ::CMsg_CVars;
  }
  // @@protoc_insertion_point(field_mutable:CNETMsg_SetConVar.convars)
  return convars_;
}
::CMsg_CVars* CNETMsg_SetConVar::release_convars() {
  // @@protoc_insertion_point(field_release:CNETMsg_SetConVar.convars)
  clear_has_convars();
  ::CMsg_CVars* temp = convars_;
  convars_ = NULL;
  return temp;
}
void CNETMsg_SetConVar::set_allocated_convars(::CMsg_CVars* convars) {
  delete convars_;
  convars_ = convars;
  if (convars) {
    set_has_convars();
  } else {
    clear_has_convars();
  }
  // @@protoc_insertion_point(field_set_allocated:CNETMsg_SetConVar.convars)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CNETMsg_NOP::CNETMsg_NOP()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_netmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CNETMsg_NOP)
}
CNETMsg_NOP::CNETMsg_NOP(const CNETMsg_NOP& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CNETMsg_NOP)
}

void CNETMsg_NOP::SharedCtor() {
  _cached_size_ = 0;
}

CNETMsg_NOP::~CNETMsg_NOP() {
  // @@protoc_insertion_point(destructor:CNETMsg_NOP)
  SharedDtor();
}

void CNETMsg_NOP::SharedDtor() {
}

void CNETMsg_NOP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CNETMsg_NOP::descriptor() {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[10].descriptor;
}

const CNETMsg_NOP& CNETMsg_NOP::default_instance() {
  protobuf_netmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CNETMsg_NOP* CNETMsg_NOP::New(::google::protobuf::Arena* arena) const {
  CNETMsg_NOP* n = new CNETMsg_NOP;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CNETMsg_NOP::Clear() {
// @@protoc_insertion_point(message_clear_start:CNETMsg_NOP)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CNETMsg_NOP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CNETMsg_NOP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CNETMsg_NOP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CNETMsg_NOP)
  return false;
#undef DO_
}

void CNETMsg_NOP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CNETMsg_NOP)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CNETMsg_NOP)
}

::google::protobuf::uint8* CNETMsg_NOP::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CNETMsg_NOP)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CNETMsg_NOP)
  return target;
}

size_t CNETMsg_NOP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CNETMsg_NOP)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CNETMsg_NOP::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CNETMsg_NOP)
  GOOGLE_DCHECK_NE(&from, this);
  const CNETMsg_NOP* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CNETMsg_NOP>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CNETMsg_NOP)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CNETMsg_NOP)
    MergeFrom(*source);
  }
}

void CNETMsg_NOP::MergeFrom(const CNETMsg_NOP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CNETMsg_NOP)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
}

void CNETMsg_NOP::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CNETMsg_NOP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CNETMsg_NOP::CopyFrom(const CNETMsg_NOP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CNETMsg_NOP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CNETMsg_NOP::IsInitialized() const {
  return true;
}

void CNETMsg_NOP::Swap(CNETMsg_NOP* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CNETMsg_NOP::InternalSwap(CNETMsg_NOP* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CNETMsg_NOP::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[10];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CNETMsg_NOP

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CNETMsg_Disconnect::kTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CNETMsg_Disconnect::CNETMsg_Disconnect()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_netmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CNETMsg_Disconnect)
}
CNETMsg_Disconnect::CNETMsg_Disconnect(const CNETMsg_Disconnect& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_text()) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  // @@protoc_insertion_point(copy_constructor:CNETMsg_Disconnect)
}

void CNETMsg_Disconnect::SharedCtor() {
  _cached_size_ = 0;
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CNETMsg_Disconnect::~CNETMsg_Disconnect() {
  // @@protoc_insertion_point(destructor:CNETMsg_Disconnect)
  SharedDtor();
}

void CNETMsg_Disconnect::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CNETMsg_Disconnect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CNETMsg_Disconnect::descriptor() {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[11].descriptor;
}

const CNETMsg_Disconnect& CNETMsg_Disconnect::default_instance() {
  protobuf_netmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CNETMsg_Disconnect* CNETMsg_Disconnect::New(::google::protobuf::Arena* arena) const {
  CNETMsg_Disconnect* n = new CNETMsg_Disconnect;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CNETMsg_Disconnect::Clear() {
// @@protoc_insertion_point(message_clear_start:CNETMsg_Disconnect)
  if (has_text()) {
    GOOGLE_DCHECK(!text_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*text_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CNETMsg_Disconnect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CNETMsg_Disconnect)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string text = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CNETMsg_Disconnect.text");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CNETMsg_Disconnect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CNETMsg_Disconnect)
  return false;
#undef DO_
}

void CNETMsg_Disconnect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CNETMsg_Disconnect)
  // optional string text = 1;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CNETMsg_Disconnect.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->text(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CNETMsg_Disconnect)
}

::google::protobuf::uint8* CNETMsg_Disconnect::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CNETMsg_Disconnect)
  // optional string text = 1;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CNETMsg_Disconnect.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->text(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CNETMsg_Disconnect)
  return target;
}

size_t CNETMsg_Disconnect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CNETMsg_Disconnect)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional string text = 1;
  if (has_text()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->text());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CNETMsg_Disconnect::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CNETMsg_Disconnect)
  GOOGLE_DCHECK_NE(&from, this);
  const CNETMsg_Disconnect* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CNETMsg_Disconnect>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CNETMsg_Disconnect)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CNETMsg_Disconnect)
    MergeFrom(*source);
  }
}

void CNETMsg_Disconnect::MergeFrom(const CNETMsg_Disconnect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CNETMsg_Disconnect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_text()) {
    set_has_text();
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
}

void CNETMsg_Disconnect::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CNETMsg_Disconnect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CNETMsg_Disconnect::CopyFrom(const CNETMsg_Disconnect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CNETMsg_Disconnect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CNETMsg_Disconnect::IsInitialized() const {
  return true;
}

void CNETMsg_Disconnect::Swap(CNETMsg_Disconnect* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CNETMsg_Disconnect::InternalSwap(CNETMsg_Disconnect* other) {
  text_.Swap(&other->text_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CNETMsg_Disconnect::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[11];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CNETMsg_Disconnect

// optional string text = 1;
bool CNETMsg_Disconnect::has_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CNETMsg_Disconnect::set_has_text() {
  _has_bits_[0] |= 0x00000001u;
}
void CNETMsg_Disconnect::clear_has_text() {
  _has_bits_[0] &= ~0x00000001u;
}
void CNETMsg_Disconnect::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text();
}
const ::std::string& CNETMsg_Disconnect::text() const {
  // @@protoc_insertion_point(field_get:CNETMsg_Disconnect.text)
  return text_.GetNoArena();
}
void CNETMsg_Disconnect::set_text(const ::std::string& value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CNETMsg_Disconnect.text)
}
#if LANG_CXX11
void CNETMsg_Disconnect::set_text(::std::string&& value) {
  set_has_text();
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CNETMsg_Disconnect.text)
}
#endif
void CNETMsg_Disconnect::set_text(const char* value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CNETMsg_Disconnect.text)
}
void CNETMsg_Disconnect::set_text(const char* value, size_t size) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CNETMsg_Disconnect.text)
}
::std::string* CNETMsg_Disconnect::mutable_text() {
  set_has_text();
  // @@protoc_insertion_point(field_mutable:CNETMsg_Disconnect.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CNETMsg_Disconnect::release_text() {
  // @@protoc_insertion_point(field_release:CNETMsg_Disconnect.text)
  clear_has_text();
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CNETMsg_Disconnect::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    set_has_text();
  } else {
    clear_has_text();
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:CNETMsg_Disconnect.text)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CNETMsg_File::kTransferIdFieldNumber;
const int CNETMsg_File::kFileNameFieldNumber;
const int CNETMsg_File::kIsReplayDemoFileFieldNumber;
const int CNETMsg_File::kDenyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CNETMsg_File::CNETMsg_File()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_netmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CNETMsg_File)
}
CNETMsg_File::CNETMsg_File(const CNETMsg_File& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_file_name()) {
    file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_name_);
  }
  ::memcpy(&transfer_id_, &from.transfer_id_,
    reinterpret_cast<char*>(&deny_) -
    reinterpret_cast<char*>(&transfer_id_) + sizeof(deny_));
  // @@protoc_insertion_point(copy_constructor:CNETMsg_File)
}

void CNETMsg_File::SharedCtor() {
  _cached_size_ = 0;
  file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&transfer_id_, 0, reinterpret_cast<char*>(&deny_) -
    reinterpret_cast<char*>(&transfer_id_) + sizeof(deny_));
}

CNETMsg_File::~CNETMsg_File() {
  // @@protoc_insertion_point(destructor:CNETMsg_File)
  SharedDtor();
}

void CNETMsg_File::SharedDtor() {
  file_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CNETMsg_File::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CNETMsg_File::descriptor() {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[12].descriptor;
}

const CNETMsg_File& CNETMsg_File::default_instance() {
  protobuf_netmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CNETMsg_File* CNETMsg_File::New(::google::protobuf::Arena* arena) const {
  CNETMsg_File* n = new CNETMsg_File;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CNETMsg_File::Clear() {
// @@protoc_insertion_point(message_clear_start:CNETMsg_File)
  if (has_file_name()) {
    GOOGLE_DCHECK(!file_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*file_name_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&transfer_id_, 0, reinterpret_cast<char*>(&deny_) -
      reinterpret_cast<char*>(&transfer_id_) + sizeof(deny_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CNETMsg_File::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CNETMsg_File)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 transfer_id = 1;
      case 1: {
        if (tag == 8u) {
          set_has_transfer_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &transfer_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string file_name = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->file_name().data(), this->file_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CNETMsg_File.file_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_replay_demo_file = 3;
      case 3: {
        if (tag == 24u) {
          set_has_is_replay_demo_file();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_replay_demo_file_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool deny = 4;
      case 4: {
        if (tag == 32u) {
          set_has_deny();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &deny_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CNETMsg_File)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CNETMsg_File)
  return false;
#undef DO_
}

void CNETMsg_File::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CNETMsg_File)
  // optional int32 transfer_id = 1;
  if (has_transfer_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->transfer_id(), output);
  }

  // optional string file_name = 2;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CNETMsg_File.file_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->file_name(), output);
  }

  // optional bool is_replay_demo_file = 3;
  if (has_is_replay_demo_file()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_replay_demo_file(), output);
  }

  // optional bool deny = 4;
  if (has_deny()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->deny(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CNETMsg_File)
}

::google::protobuf::uint8* CNETMsg_File::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CNETMsg_File)
  // optional int32 transfer_id = 1;
  if (has_transfer_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->transfer_id(), target);
  }

  // optional string file_name = 2;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CNETMsg_File.file_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->file_name(), target);
  }

  // optional bool is_replay_demo_file = 3;
  if (has_is_replay_demo_file()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_replay_demo_file(), target);
  }

  // optional bool deny = 4;
  if (has_deny()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->deny(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CNETMsg_File)
  return target;
}

size_t CNETMsg_File::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CNETMsg_File)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string file_name = 2;
    if (has_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_name());
    }

    // optional int32 transfer_id = 1;
    if (has_transfer_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->transfer_id());
    }

    // optional bool is_replay_demo_file = 3;
    if (has_is_replay_demo_file()) {
      total_size += 1 + 1;
    }

    // optional bool deny = 4;
    if (has_deny()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CNETMsg_File::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CNETMsg_File)
  GOOGLE_DCHECK_NE(&from, this);
  const CNETMsg_File* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CNETMsg_File>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CNETMsg_File)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CNETMsg_File)
    MergeFrom(*source);
  }
}

void CNETMsg_File::MergeFrom(const CNETMsg_File& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CNETMsg_File)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 15u) {
    if (from.has_file_name()) {
      set_has_file_name();
      file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_name_);
    }
    if (from.has_transfer_id()) {
      set_transfer_id(from.transfer_id());
    }
    if (from.has_is_replay_demo_file()) {
      set_is_replay_demo_file(from.is_replay_demo_file());
    }
    if (from.has_deny()) {
      set_deny(from.deny());
    }
  }
}

void CNETMsg_File::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CNETMsg_File)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CNETMsg_File::CopyFrom(const CNETMsg_File& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CNETMsg_File)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CNETMsg_File::IsInitialized() const {
  return true;
}

void CNETMsg_File::Swap(CNETMsg_File* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CNETMsg_File::InternalSwap(CNETMsg_File* other) {
  file_name_.Swap(&other->file_name_);
  std::swap(transfer_id_, other->transfer_id_);
  std::swap(is_replay_demo_file_, other->is_replay_demo_file_);
  std::swap(deny_, other->deny_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CNETMsg_File::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[12];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CNETMsg_File

// optional int32 transfer_id = 1;
bool CNETMsg_File::has_transfer_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CNETMsg_File::set_has_transfer_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CNETMsg_File::clear_has_transfer_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CNETMsg_File::clear_transfer_id() {
  transfer_id_ = 0;
  clear_has_transfer_id();
}
::google::protobuf::int32 CNETMsg_File::transfer_id() const {
  // @@protoc_insertion_point(field_get:CNETMsg_File.transfer_id)
  return transfer_id_;
}
void CNETMsg_File::set_transfer_id(::google::protobuf::int32 value) {
  set_has_transfer_id();
  transfer_id_ = value;
  // @@protoc_insertion_point(field_set:CNETMsg_File.transfer_id)
}

// optional string file_name = 2;
bool CNETMsg_File::has_file_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CNETMsg_File::set_has_file_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CNETMsg_File::clear_has_file_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CNETMsg_File::clear_file_name() {
  file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_file_name();
}
const ::std::string& CNETMsg_File::file_name() const {
  // @@protoc_insertion_point(field_get:CNETMsg_File.file_name)
  return file_name_.GetNoArena();
}
void CNETMsg_File::set_file_name(const ::std::string& value) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CNETMsg_File.file_name)
}
#if LANG_CXX11
void CNETMsg_File::set_file_name(::std::string&& value) {
  set_has_file_name();
  file_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CNETMsg_File.file_name)
}
#endif
void CNETMsg_File::set_file_name(const char* value) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CNETMsg_File.file_name)
}
void CNETMsg_File::set_file_name(const char* value, size_t size) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CNETMsg_File.file_name)
}
::std::string* CNETMsg_File::mutable_file_name() {
  set_has_file_name();
  // @@protoc_insertion_point(field_mutable:CNETMsg_File.file_name)
  return file_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CNETMsg_File::release_file_name() {
  // @@protoc_insertion_point(field_release:CNETMsg_File.file_name)
  clear_has_file_name();
  return file_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CNETMsg_File::set_allocated_file_name(::std::string* file_name) {
  if (file_name != NULL) {
    set_has_file_name();
  } else {
    clear_has_file_name();
  }
  file_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_name);
  // @@protoc_insertion_point(field_set_allocated:CNETMsg_File.file_name)
}

// optional bool is_replay_demo_file = 3;
bool CNETMsg_File::has_is_replay_demo_file() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CNETMsg_File::set_has_is_replay_demo_file() {
  _has_bits_[0] |= 0x00000004u;
}
void CNETMsg_File::clear_has_is_replay_demo_file() {
  _has_bits_[0] &= ~0x00000004u;
}
void CNETMsg_File::clear_is_replay_demo_file() {
  is_replay_demo_file_ = false;
  clear_has_is_replay_demo_file();
}
bool CNETMsg_File::is_replay_demo_file() const {
  // @@protoc_insertion_point(field_get:CNETMsg_File.is_replay_demo_file)
  return is_replay_demo_file_;
}
void CNETMsg_File::set_is_replay_demo_file(bool value) {
  set_has_is_replay_demo_file();
  is_replay_demo_file_ = value;
  // @@protoc_insertion_point(field_set:CNETMsg_File.is_replay_demo_file)
}

// optional bool deny = 4;
bool CNETMsg_File::has_deny() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CNETMsg_File::set_has_deny() {
  _has_bits_[0] |= 0x00000008u;
}
void CNETMsg_File::clear_has_deny() {
  _has_bits_[0] &= ~0x00000008u;
}
void CNETMsg_File::clear_deny() {
  deny_ = false;
  clear_has_deny();
}
bool CNETMsg_File::deny() const {
  // @@protoc_insertion_point(field_get:CNETMsg_File.deny)
  return deny_;
}
void CNETMsg_File::set_deny(bool value) {
  set_has_deny();
  deny_ = value;
  // @@protoc_insertion_point(field_set:CNETMsg_File.deny)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CNETMsg_SplitScreenUser::kSlotFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CNETMsg_SplitScreenUser::CNETMsg_SplitScreenUser()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_netmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CNETMsg_SplitScreenUser)
}
CNETMsg_SplitScreenUser::CNETMsg_SplitScreenUser(const CNETMsg_SplitScreenUser& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  slot_ = from.slot_;
  // @@protoc_insertion_point(copy_constructor:CNETMsg_SplitScreenUser)
}

void CNETMsg_SplitScreenUser::SharedCtor() {
  _cached_size_ = 0;
  slot_ = 0;
}

CNETMsg_SplitScreenUser::~CNETMsg_SplitScreenUser() {
  // @@protoc_insertion_point(destructor:CNETMsg_SplitScreenUser)
  SharedDtor();
}

void CNETMsg_SplitScreenUser::SharedDtor() {
}

void CNETMsg_SplitScreenUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CNETMsg_SplitScreenUser::descriptor() {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[13].descriptor;
}

const CNETMsg_SplitScreenUser& CNETMsg_SplitScreenUser::default_instance() {
  protobuf_netmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CNETMsg_SplitScreenUser* CNETMsg_SplitScreenUser::New(::google::protobuf::Arena* arena) const {
  CNETMsg_SplitScreenUser* n = new CNETMsg_SplitScreenUser;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CNETMsg_SplitScreenUser::Clear() {
// @@protoc_insertion_point(message_clear_start:CNETMsg_SplitScreenUser)
  slot_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CNETMsg_SplitScreenUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CNETMsg_SplitScreenUser)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 slot = 1;
      case 1: {
        if (tag == 8u) {
          set_has_slot();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CNETMsg_SplitScreenUser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CNETMsg_SplitScreenUser)
  return false;
#undef DO_
}

void CNETMsg_SplitScreenUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CNETMsg_SplitScreenUser)
  // optional int32 slot = 1;
  if (has_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->slot(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CNETMsg_SplitScreenUser)
}

::google::protobuf::uint8* CNETMsg_SplitScreenUser::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CNETMsg_SplitScreenUser)
  // optional int32 slot = 1;
  if (has_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->slot(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CNETMsg_SplitScreenUser)
  return target;
}

size_t CNETMsg_SplitScreenUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CNETMsg_SplitScreenUser)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional int32 slot = 1;
  if (has_slot()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->slot());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CNETMsg_SplitScreenUser::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CNETMsg_SplitScreenUser)
  GOOGLE_DCHECK_NE(&from, this);
  const CNETMsg_SplitScreenUser* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CNETMsg_SplitScreenUser>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CNETMsg_SplitScreenUser)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CNETMsg_SplitScreenUser)
    MergeFrom(*source);
  }
}

void CNETMsg_SplitScreenUser::MergeFrom(const CNETMsg_SplitScreenUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CNETMsg_SplitScreenUser)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_slot()) {
    set_slot(from.slot());
  }
}

void CNETMsg_SplitScreenUser::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CNETMsg_SplitScreenUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CNETMsg_SplitScreenUser::CopyFrom(const CNETMsg_SplitScreenUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CNETMsg_SplitScreenUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CNETMsg_SplitScreenUser::IsInitialized() const {
  return true;
}

void CNETMsg_SplitScreenUser::Swap(CNETMsg_SplitScreenUser* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CNETMsg_SplitScreenUser::InternalSwap(CNETMsg_SplitScreenUser* other) {
  std::swap(slot_, other->slot_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CNETMsg_SplitScreenUser::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[13];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CNETMsg_SplitScreenUser

// optional int32 slot = 1;
bool CNETMsg_SplitScreenUser::has_slot() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CNETMsg_SplitScreenUser::set_has_slot() {
  _has_bits_[0] |= 0x00000001u;
}
void CNETMsg_SplitScreenUser::clear_has_slot() {
  _has_bits_[0] &= ~0x00000001u;
}
void CNETMsg_SplitScreenUser::clear_slot() {
  slot_ = 0;
  clear_has_slot();
}
::google::protobuf::int32 CNETMsg_SplitScreenUser::slot() const {
  // @@protoc_insertion_point(field_get:CNETMsg_SplitScreenUser.slot)
  return slot_;
}
void CNETMsg_SplitScreenUser::set_slot(::google::protobuf::int32 value) {
  set_has_slot();
  slot_ = value;
  // @@protoc_insertion_point(field_set:CNETMsg_SplitScreenUser.slot)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CNETMsg_PlayerAvatarData::kAccountidFieldNumber;
const int CNETMsg_PlayerAvatarData::kRgbFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CNETMsg_PlayerAvatarData::CNETMsg_PlayerAvatarData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_netmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CNETMsg_PlayerAvatarData)
}
CNETMsg_PlayerAvatarData::CNETMsg_PlayerAvatarData(const CNETMsg_PlayerAvatarData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rgb_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_rgb()) {
    rgb_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rgb_);
  }
  accountid_ = from.accountid_;
  // @@protoc_insertion_point(copy_constructor:CNETMsg_PlayerAvatarData)
}

void CNETMsg_PlayerAvatarData::SharedCtor() {
  _cached_size_ = 0;
  rgb_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  accountid_ = 0u;
}

CNETMsg_PlayerAvatarData::~CNETMsg_PlayerAvatarData() {
  // @@protoc_insertion_point(destructor:CNETMsg_PlayerAvatarData)
  SharedDtor();
}

void CNETMsg_PlayerAvatarData::SharedDtor() {
  rgb_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CNETMsg_PlayerAvatarData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CNETMsg_PlayerAvatarData::descriptor() {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[14].descriptor;
}

const CNETMsg_PlayerAvatarData& CNETMsg_PlayerAvatarData::default_instance() {
  protobuf_netmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CNETMsg_PlayerAvatarData* CNETMsg_PlayerAvatarData::New(::google::protobuf::Arena* arena) const {
  CNETMsg_PlayerAvatarData* n = new CNETMsg_PlayerAvatarData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CNETMsg_PlayerAvatarData::Clear() {
// @@protoc_insertion_point(message_clear_start:CNETMsg_PlayerAvatarData)
  if (has_rgb()) {
    GOOGLE_DCHECK(!rgb_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*rgb_.UnsafeRawStringPointer())->clear();
  }
  accountid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CNETMsg_PlayerAvatarData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CNETMsg_PlayerAvatarData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 accountid = 1;
      case 1: {
        if (tag == 8u) {
          set_has_accountid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes rgb = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_rgb()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CNETMsg_PlayerAvatarData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CNETMsg_PlayerAvatarData)
  return false;
#undef DO_
}

void CNETMsg_PlayerAvatarData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CNETMsg_PlayerAvatarData)
  // optional uint32 accountid = 1;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->accountid(), output);
  }

  // optional bytes rgb = 2;
  if (has_rgb()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->rgb(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CNETMsg_PlayerAvatarData)
}

::google::protobuf::uint8* CNETMsg_PlayerAvatarData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CNETMsg_PlayerAvatarData)
  // optional uint32 accountid = 1;
  if (has_accountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->accountid(), target);
  }

  // optional bytes rgb = 2;
  if (has_rgb()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->rgb(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CNETMsg_PlayerAvatarData)
  return target;
}

size_t CNETMsg_PlayerAvatarData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CNETMsg_PlayerAvatarData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes rgb = 2;
    if (has_rgb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->rgb());
    }

    // optional uint32 accountid = 1;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accountid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CNETMsg_PlayerAvatarData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CNETMsg_PlayerAvatarData)
  GOOGLE_DCHECK_NE(&from, this);
  const CNETMsg_PlayerAvatarData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CNETMsg_PlayerAvatarData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CNETMsg_PlayerAvatarData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CNETMsg_PlayerAvatarData)
    MergeFrom(*source);
  }
}

void CNETMsg_PlayerAvatarData::MergeFrom(const CNETMsg_PlayerAvatarData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CNETMsg_PlayerAvatarData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_rgb()) {
      set_has_rgb();
      rgb_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rgb_);
    }
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
  }
}

void CNETMsg_PlayerAvatarData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CNETMsg_PlayerAvatarData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CNETMsg_PlayerAvatarData::CopyFrom(const CNETMsg_PlayerAvatarData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CNETMsg_PlayerAvatarData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CNETMsg_PlayerAvatarData::IsInitialized() const {
  return true;
}

void CNETMsg_PlayerAvatarData::Swap(CNETMsg_PlayerAvatarData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CNETMsg_PlayerAvatarData::InternalSwap(CNETMsg_PlayerAvatarData* other) {
  rgb_.Swap(&other->rgb_);
  std::swap(accountid_, other->accountid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CNETMsg_PlayerAvatarData::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[14];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CNETMsg_PlayerAvatarData

// optional uint32 accountid = 1;
bool CNETMsg_PlayerAvatarData::has_accountid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CNETMsg_PlayerAvatarData::set_has_accountid() {
  _has_bits_[0] |= 0x00000002u;
}
void CNETMsg_PlayerAvatarData::clear_has_accountid() {
  _has_bits_[0] &= ~0x00000002u;
}
void CNETMsg_PlayerAvatarData::clear_accountid() {
  accountid_ = 0u;
  clear_has_accountid();
}
::google::protobuf::uint32 CNETMsg_PlayerAvatarData::accountid() const {
  // @@protoc_insertion_point(field_get:CNETMsg_PlayerAvatarData.accountid)
  return accountid_;
}
void CNETMsg_PlayerAvatarData::set_accountid(::google::protobuf::uint32 value) {
  set_has_accountid();
  accountid_ = value;
  // @@protoc_insertion_point(field_set:CNETMsg_PlayerAvatarData.accountid)
}

// optional bytes rgb = 2;
bool CNETMsg_PlayerAvatarData::has_rgb() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CNETMsg_PlayerAvatarData::set_has_rgb() {
  _has_bits_[0] |= 0x00000001u;
}
void CNETMsg_PlayerAvatarData::clear_has_rgb() {
  _has_bits_[0] &= ~0x00000001u;
}
void CNETMsg_PlayerAvatarData::clear_rgb() {
  rgb_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_rgb();
}
const ::std::string& CNETMsg_PlayerAvatarData::rgb() const {
  // @@protoc_insertion_point(field_get:CNETMsg_PlayerAvatarData.rgb)
  return rgb_.GetNoArena();
}
void CNETMsg_PlayerAvatarData::set_rgb(const ::std::string& value) {
  set_has_rgb();
  rgb_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CNETMsg_PlayerAvatarData.rgb)
}
#if LANG_CXX11
void CNETMsg_PlayerAvatarData::set_rgb(::std::string&& value) {
  set_has_rgb();
  rgb_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CNETMsg_PlayerAvatarData.rgb)
}
#endif
void CNETMsg_PlayerAvatarData::set_rgb(const char* value) {
  set_has_rgb();
  rgb_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CNETMsg_PlayerAvatarData.rgb)
}
void CNETMsg_PlayerAvatarData::set_rgb(const void* value, size_t size) {
  set_has_rgb();
  rgb_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CNETMsg_PlayerAvatarData.rgb)
}
::std::string* CNETMsg_PlayerAvatarData::mutable_rgb() {
  set_has_rgb();
  // @@protoc_insertion_point(field_mutable:CNETMsg_PlayerAvatarData.rgb)
  return rgb_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CNETMsg_PlayerAvatarData::release_rgb() {
  // @@protoc_insertion_point(field_release:CNETMsg_PlayerAvatarData.rgb)
  clear_has_rgb();
  return rgb_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CNETMsg_PlayerAvatarData::set_allocated_rgb(::std::string* rgb) {
  if (rgb != NULL) {
    set_has_rgb();
  } else {
    clear_has_rgb();
  }
  rgb_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rgb);
  // @@protoc_insertion_point(field_set_allocated:CNETMsg_PlayerAvatarData.rgb)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCLCMsg_ClientInfo::kSendTableCrcFieldNumber;
const int CCLCMsg_ClientInfo::kServerCountFieldNumber;
const int CCLCMsg_ClientInfo::kIsHltvFieldNumber;
const int CCLCMsg_ClientInfo::kIsReplayFieldNumber;
const int CCLCMsg_ClientInfo::kFriendsIdFieldNumber;
const int CCLCMsg_ClientInfo::kFriendsNameFieldNumber;
const int CCLCMsg_ClientInfo::kCustomFilesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCLCMsg_ClientInfo::CCLCMsg_ClientInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_netmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CCLCMsg_ClientInfo)
}
CCLCMsg_ClientInfo::CCLCMsg_ClientInfo(const CCLCMsg_ClientInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      custom_files_(from.custom_files_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  friends_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_friends_name()) {
    friends_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.friends_name_);
  }
  ::memcpy(&send_table_crc_, &from.send_table_crc_,
    reinterpret_cast<char*>(&friends_id_) -
    reinterpret_cast<char*>(&send_table_crc_) + sizeof(friends_id_));
  // @@protoc_insertion_point(copy_constructor:CCLCMsg_ClientInfo)
}

void CCLCMsg_ClientInfo::SharedCtor() {
  _cached_size_ = 0;
  friends_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&send_table_crc_, 0, reinterpret_cast<char*>(&friends_id_) -
    reinterpret_cast<char*>(&send_table_crc_) + sizeof(friends_id_));
}

CCLCMsg_ClientInfo::~CCLCMsg_ClientInfo() {
  // @@protoc_insertion_point(destructor:CCLCMsg_ClientInfo)
  SharedDtor();
}

void CCLCMsg_ClientInfo::SharedDtor() {
  friends_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CCLCMsg_ClientInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCLCMsg_ClientInfo::descriptor() {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[15].descriptor;
}

const CCLCMsg_ClientInfo& CCLCMsg_ClientInfo::default_instance() {
  protobuf_netmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CCLCMsg_ClientInfo* CCLCMsg_ClientInfo::New(::google::protobuf::Arena* arena) const {
  CCLCMsg_ClientInfo* n = new CCLCMsg_ClientInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CCLCMsg_ClientInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CCLCMsg_ClientInfo)
  custom_files_.Clear();
  if (has_friends_name()) {
    GOOGLE_DCHECK(!friends_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*friends_name_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 62u) {
    ::memset(&send_table_crc_, 0, reinterpret_cast<char*>(&friends_id_) -
      reinterpret_cast<char*>(&send_table_crc_) + sizeof(friends_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CCLCMsg_ClientInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CCLCMsg_ClientInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 send_table_crc = 1;
      case 1: {
        if (tag == 13u) {
          set_has_send_table_crc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &send_table_crc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 server_count = 2;
      case 2: {
        if (tag == 16u) {
          set_has_server_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_hltv = 3;
      case 3: {
        if (tag == 24u) {
          set_has_is_hltv();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_hltv_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_replay = 4;
      case 4: {
        if (tag == 32u) {
          set_has_is_replay();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_replay_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 friends_id = 5;
      case 5: {
        if (tag == 40u) {
          set_has_friends_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &friends_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string friends_name = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_friends_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->friends_name().data(), this->friends_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CCLCMsg_ClientInfo.friends_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated fixed32 custom_files = 7;
      case 7: {
        if (tag == 61u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 1, 61u, input, this->mutable_custom_files())));
        } else if (tag == 58u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, this->mutable_custom_files())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CCLCMsg_ClientInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CCLCMsg_ClientInfo)
  return false;
#undef DO_
}

void CCLCMsg_ClientInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CCLCMsg_ClientInfo)
  // optional fixed32 send_table_crc = 1;
  if (has_send_table_crc()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->send_table_crc(), output);
  }

  // optional uint32 server_count = 2;
  if (has_server_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->server_count(), output);
  }

  // optional bool is_hltv = 3;
  if (has_is_hltv()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_hltv(), output);
  }

  // optional bool is_replay = 4;
  if (has_is_replay()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_replay(), output);
  }

  // optional uint32 friends_id = 5;
  if (has_friends_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->friends_id(), output);
  }

  // optional string friends_name = 6;
  if (has_friends_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->friends_name().data(), this->friends_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CCLCMsg_ClientInfo.friends_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->friends_name(), output);
  }

  // repeated fixed32 custom_files = 7;
  for (int i = 0; i < this->custom_files_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(
      7, this->custom_files(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CCLCMsg_ClientInfo)
}

::google::protobuf::uint8* CCLCMsg_ClientInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CCLCMsg_ClientInfo)
  // optional fixed32 send_table_crc = 1;
  if (has_send_table_crc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->send_table_crc(), target);
  }

  // optional uint32 server_count = 2;
  if (has_server_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->server_count(), target);
  }

  // optional bool is_hltv = 3;
  if (has_is_hltv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_hltv(), target);
  }

  // optional bool is_replay = 4;
  if (has_is_replay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_replay(), target);
  }

  // optional uint32 friends_id = 5;
  if (has_friends_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->friends_id(), target);
  }

  // optional string friends_name = 6;
  if (has_friends_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->friends_name().data(), this->friends_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CCLCMsg_ClientInfo.friends_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->friends_name(), target);
  }

  // repeated fixed32 custom_files = 7;
  for (int i = 0; i < this->custom_files_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed32ToArray(7, this->custom_files(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCLCMsg_ClientInfo)
  return target;
}

size_t CCLCMsg_ClientInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCLCMsg_ClientInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated fixed32 custom_files = 7;
  {
    unsigned int count = this->custom_files_size();
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->custom_files_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 63u) {
    // optional string friends_name = 6;
    if (has_friends_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->friends_name());
    }

    // optional fixed32 send_table_crc = 1;
    if (has_send_table_crc()) {
      total_size += 1 + 4;
    }

    // optional uint32 server_count = 2;
    if (has_server_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_count());
    }

    // optional bool is_hltv = 3;
    if (has_is_hltv()) {
      total_size += 1 + 1;
    }

    // optional bool is_replay = 4;
    if (has_is_replay()) {
      total_size += 1 + 1;
    }

    // optional uint32 friends_id = 5;
    if (has_friends_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->friends_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCLCMsg_ClientInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCLCMsg_ClientInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CCLCMsg_ClientInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CCLCMsg_ClientInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCLCMsg_ClientInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCLCMsg_ClientInfo)
    MergeFrom(*source);
  }
}

void CCLCMsg_ClientInfo::MergeFrom(const CCLCMsg_ClientInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCLCMsg_ClientInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  custom_files_.MergeFrom(from.custom_files_);
  if (from._has_bits_[0 / 32] & 63u) {
    if (from.has_friends_name()) {
      set_has_friends_name();
      friends_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.friends_name_);
    }
    if (from.has_send_table_crc()) {
      set_send_table_crc(from.send_table_crc());
    }
    if (from.has_server_count()) {
      set_server_count(from.server_count());
    }
    if (from.has_is_hltv()) {
      set_is_hltv(from.is_hltv());
    }
    if (from.has_is_replay()) {
      set_is_replay(from.is_replay());
    }
    if (from.has_friends_id()) {
      set_friends_id(from.friends_id());
    }
  }
}

void CCLCMsg_ClientInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCLCMsg_ClientInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCLCMsg_ClientInfo::CopyFrom(const CCLCMsg_ClientInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCLCMsg_ClientInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCLCMsg_ClientInfo::IsInitialized() const {
  return true;
}

void CCLCMsg_ClientInfo::Swap(CCLCMsg_ClientInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCLCMsg_ClientInfo::InternalSwap(CCLCMsg_ClientInfo* other) {
  custom_files_.UnsafeArenaSwap(&other->custom_files_);
  friends_name_.Swap(&other->friends_name_);
  std::swap(send_table_crc_, other->send_table_crc_);
  std::swap(server_count_, other->server_count_);
  std::swap(is_hltv_, other->is_hltv_);
  std::swap(is_replay_, other->is_replay_);
  std::swap(friends_id_, other->friends_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CCLCMsg_ClientInfo::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[15];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CCLCMsg_ClientInfo

// optional fixed32 send_table_crc = 1;
bool CCLCMsg_ClientInfo::has_send_table_crc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CCLCMsg_ClientInfo::set_has_send_table_crc() {
  _has_bits_[0] |= 0x00000002u;
}
void CCLCMsg_ClientInfo::clear_has_send_table_crc() {
  _has_bits_[0] &= ~0x00000002u;
}
void CCLCMsg_ClientInfo::clear_send_table_crc() {
  send_table_crc_ = 0u;
  clear_has_send_table_crc();
}
::google::protobuf::uint32 CCLCMsg_ClientInfo::send_table_crc() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_ClientInfo.send_table_crc)
  return send_table_crc_;
}
void CCLCMsg_ClientInfo::set_send_table_crc(::google::protobuf::uint32 value) {
  set_has_send_table_crc();
  send_table_crc_ = value;
  // @@protoc_insertion_point(field_set:CCLCMsg_ClientInfo.send_table_crc)
}

// optional uint32 server_count = 2;
bool CCLCMsg_ClientInfo::has_server_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CCLCMsg_ClientInfo::set_has_server_count() {
  _has_bits_[0] |= 0x00000004u;
}
void CCLCMsg_ClientInfo::clear_has_server_count() {
  _has_bits_[0] &= ~0x00000004u;
}
void CCLCMsg_ClientInfo::clear_server_count() {
  server_count_ = 0u;
  clear_has_server_count();
}
::google::protobuf::uint32 CCLCMsg_ClientInfo::server_count() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_ClientInfo.server_count)
  return server_count_;
}
void CCLCMsg_ClientInfo::set_server_count(::google::protobuf::uint32 value) {
  set_has_server_count();
  server_count_ = value;
  // @@protoc_insertion_point(field_set:CCLCMsg_ClientInfo.server_count)
}

// optional bool is_hltv = 3;
bool CCLCMsg_ClientInfo::has_is_hltv() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CCLCMsg_ClientInfo::set_has_is_hltv() {
  _has_bits_[0] |= 0x00000008u;
}
void CCLCMsg_ClientInfo::clear_has_is_hltv() {
  _has_bits_[0] &= ~0x00000008u;
}
void CCLCMsg_ClientInfo::clear_is_hltv() {
  is_hltv_ = false;
  clear_has_is_hltv();
}
bool CCLCMsg_ClientInfo::is_hltv() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_ClientInfo.is_hltv)
  return is_hltv_;
}
void CCLCMsg_ClientInfo::set_is_hltv(bool value) {
  set_has_is_hltv();
  is_hltv_ = value;
  // @@protoc_insertion_point(field_set:CCLCMsg_ClientInfo.is_hltv)
}

// optional bool is_replay = 4;
bool CCLCMsg_ClientInfo::has_is_replay() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CCLCMsg_ClientInfo::set_has_is_replay() {
  _has_bits_[0] |= 0x00000010u;
}
void CCLCMsg_ClientInfo::clear_has_is_replay() {
  _has_bits_[0] &= ~0x00000010u;
}
void CCLCMsg_ClientInfo::clear_is_replay() {
  is_replay_ = false;
  clear_has_is_replay();
}
bool CCLCMsg_ClientInfo::is_replay() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_ClientInfo.is_replay)
  return is_replay_;
}
void CCLCMsg_ClientInfo::set_is_replay(bool value) {
  set_has_is_replay();
  is_replay_ = value;
  // @@protoc_insertion_point(field_set:CCLCMsg_ClientInfo.is_replay)
}

// optional uint32 friends_id = 5;
bool CCLCMsg_ClientInfo::has_friends_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CCLCMsg_ClientInfo::set_has_friends_id() {
  _has_bits_[0] |= 0x00000020u;
}
void CCLCMsg_ClientInfo::clear_has_friends_id() {
  _has_bits_[0] &= ~0x00000020u;
}
void CCLCMsg_ClientInfo::clear_friends_id() {
  friends_id_ = 0u;
  clear_has_friends_id();
}
::google::protobuf::uint32 CCLCMsg_ClientInfo::friends_id() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_ClientInfo.friends_id)
  return friends_id_;
}
void CCLCMsg_ClientInfo::set_friends_id(::google::protobuf::uint32 value) {
  set_has_friends_id();
  friends_id_ = value;
  // @@protoc_insertion_point(field_set:CCLCMsg_ClientInfo.friends_id)
}

// optional string friends_name = 6;
bool CCLCMsg_ClientInfo::has_friends_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CCLCMsg_ClientInfo::set_has_friends_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CCLCMsg_ClientInfo::clear_has_friends_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CCLCMsg_ClientInfo::clear_friends_name() {
  friends_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_friends_name();
}
const ::std::string& CCLCMsg_ClientInfo::friends_name() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_ClientInfo.friends_name)
  return friends_name_.GetNoArena();
}
void CCLCMsg_ClientInfo::set_friends_name(const ::std::string& value) {
  set_has_friends_name();
  friends_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CCLCMsg_ClientInfo.friends_name)
}
#if LANG_CXX11
void CCLCMsg_ClientInfo::set_friends_name(::std::string&& value) {
  set_has_friends_name();
  friends_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CCLCMsg_ClientInfo.friends_name)
}
#endif
void CCLCMsg_ClientInfo::set_friends_name(const char* value) {
  set_has_friends_name();
  friends_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CCLCMsg_ClientInfo.friends_name)
}
void CCLCMsg_ClientInfo::set_friends_name(const char* value, size_t size) {
  set_has_friends_name();
  friends_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CCLCMsg_ClientInfo.friends_name)
}
::std::string* CCLCMsg_ClientInfo::mutable_friends_name() {
  set_has_friends_name();
  // @@protoc_insertion_point(field_mutable:CCLCMsg_ClientInfo.friends_name)
  return friends_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CCLCMsg_ClientInfo::release_friends_name() {
  // @@protoc_insertion_point(field_release:CCLCMsg_ClientInfo.friends_name)
  clear_has_friends_name();
  return friends_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CCLCMsg_ClientInfo::set_allocated_friends_name(::std::string* friends_name) {
  if (friends_name != NULL) {
    set_has_friends_name();
  } else {
    clear_has_friends_name();
  }
  friends_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), friends_name);
  // @@protoc_insertion_point(field_set_allocated:CCLCMsg_ClientInfo.friends_name)
}

// repeated fixed32 custom_files = 7;
int CCLCMsg_ClientInfo::custom_files_size() const {
  return custom_files_.size();
}
void CCLCMsg_ClientInfo::clear_custom_files() {
  custom_files_.Clear();
}
::google::protobuf::uint32 CCLCMsg_ClientInfo::custom_files(int index) const {
  // @@protoc_insertion_point(field_get:CCLCMsg_ClientInfo.custom_files)
  return custom_files_.Get(index);
}
void CCLCMsg_ClientInfo::set_custom_files(int index, ::google::protobuf::uint32 value) {
  custom_files_.Set(index, value);
  // @@protoc_insertion_point(field_set:CCLCMsg_ClientInfo.custom_files)
}
void CCLCMsg_ClientInfo::add_custom_files(::google::protobuf::uint32 value) {
  custom_files_.Add(value);
  // @@protoc_insertion_point(field_add:CCLCMsg_ClientInfo.custom_files)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CCLCMsg_ClientInfo::custom_files() const {
  // @@protoc_insertion_point(field_list:CCLCMsg_ClientInfo.custom_files)
  return custom_files_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CCLCMsg_ClientInfo::mutable_custom_files() {
  // @@protoc_insertion_point(field_mutable_list:CCLCMsg_ClientInfo.custom_files)
  return &custom_files_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCLCMsg_Move::kNumBackupCommandsFieldNumber;
const int CCLCMsg_Move::kNumNewCommandsFieldNumber;
const int CCLCMsg_Move::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCLCMsg_Move::CCLCMsg_Move()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_netmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CCLCMsg_Move)
}
CCLCMsg_Move::CCLCMsg_Move(const CCLCMsg_Move& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  ::memcpy(&num_backup_commands_, &from.num_backup_commands_,
    reinterpret_cast<char*>(&num_new_commands_) -
    reinterpret_cast<char*>(&num_backup_commands_) + sizeof(num_new_commands_));
  // @@protoc_insertion_point(copy_constructor:CCLCMsg_Move)
}

void CCLCMsg_Move::SharedCtor() {
  _cached_size_ = 0;
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&num_backup_commands_, 0, reinterpret_cast<char*>(&num_new_commands_) -
    reinterpret_cast<char*>(&num_backup_commands_) + sizeof(num_new_commands_));
}

CCLCMsg_Move::~CCLCMsg_Move() {
  // @@protoc_insertion_point(destructor:CCLCMsg_Move)
  SharedDtor();
}

void CCLCMsg_Move::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CCLCMsg_Move::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCLCMsg_Move::descriptor() {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[16].descriptor;
}

const CCLCMsg_Move& CCLCMsg_Move::default_instance() {
  protobuf_netmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CCLCMsg_Move* CCLCMsg_Move::New(::google::protobuf::Arena* arena) const {
  CCLCMsg_Move* n = new CCLCMsg_Move;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CCLCMsg_Move::Clear() {
// @@protoc_insertion_point(message_clear_start:CCLCMsg_Move)
  if (has_data()) {
    GOOGLE_DCHECK(!data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*data_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&num_backup_commands_, 0, reinterpret_cast<char*>(&num_new_commands_) -
      reinterpret_cast<char*>(&num_backup_commands_) + sizeof(num_new_commands_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CCLCMsg_Move::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CCLCMsg_Move)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 num_backup_commands = 1;
      case 1: {
        if (tag == 8u) {
          set_has_num_backup_commands();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_backup_commands_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 num_new_commands = 2;
      case 2: {
        if (tag == 16u) {
          set_has_num_new_commands();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_new_commands_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes data = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CCLCMsg_Move)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CCLCMsg_Move)
  return false;
#undef DO_
}

void CCLCMsg_Move::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CCLCMsg_Move)
  // optional uint32 num_backup_commands = 1;
  if (has_num_backup_commands()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num_backup_commands(), output);
  }

  // optional uint32 num_new_commands = 2;
  if (has_num_new_commands()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num_new_commands(), output);
  }

  // optional bytes data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CCLCMsg_Move)
}

::google::protobuf::uint8* CCLCMsg_Move::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CCLCMsg_Move)
  // optional uint32 num_backup_commands = 1;
  if (has_num_backup_commands()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num_backup_commands(), target);
  }

  // optional uint32 num_new_commands = 2;
  if (has_num_new_commands()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num_new_commands(), target);
  }

  // optional bytes data = 3;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCLCMsg_Move)
  return target;
}

size_t CCLCMsg_Move::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCLCMsg_Move)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional bytes data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional uint32 num_backup_commands = 1;
    if (has_num_backup_commands()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_backup_commands());
    }

    // optional uint32 num_new_commands = 2;
    if (has_num_new_commands()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_new_commands());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCLCMsg_Move::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCLCMsg_Move)
  GOOGLE_DCHECK_NE(&from, this);
  const CCLCMsg_Move* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CCLCMsg_Move>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCLCMsg_Move)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCLCMsg_Move)
    MergeFrom(*source);
  }
}

void CCLCMsg_Move::MergeFrom(const CCLCMsg_Move& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCLCMsg_Move)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_data()) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (from.has_num_backup_commands()) {
      set_num_backup_commands(from.num_backup_commands());
    }
    if (from.has_num_new_commands()) {
      set_num_new_commands(from.num_new_commands());
    }
  }
}

void CCLCMsg_Move::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCLCMsg_Move)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCLCMsg_Move::CopyFrom(const CCLCMsg_Move& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCLCMsg_Move)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCLCMsg_Move::IsInitialized() const {
  return true;
}

void CCLCMsg_Move::Swap(CCLCMsg_Move* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCLCMsg_Move::InternalSwap(CCLCMsg_Move* other) {
  data_.Swap(&other->data_);
  std::swap(num_backup_commands_, other->num_backup_commands_);
  std::swap(num_new_commands_, other->num_new_commands_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CCLCMsg_Move::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[16];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CCLCMsg_Move

// optional uint32 num_backup_commands = 1;
bool CCLCMsg_Move::has_num_backup_commands() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CCLCMsg_Move::set_has_num_backup_commands() {
  _has_bits_[0] |= 0x00000002u;
}
void CCLCMsg_Move::clear_has_num_backup_commands() {
  _has_bits_[0] &= ~0x00000002u;
}
void CCLCMsg_Move::clear_num_backup_commands() {
  num_backup_commands_ = 0u;
  clear_has_num_backup_commands();
}
::google::protobuf::uint32 CCLCMsg_Move::num_backup_commands() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_Move.num_backup_commands)
  return num_backup_commands_;
}
void CCLCMsg_Move::set_num_backup_commands(::google::protobuf::uint32 value) {
  set_has_num_backup_commands();
  num_backup_commands_ = value;
  // @@protoc_insertion_point(field_set:CCLCMsg_Move.num_backup_commands)
}

// optional uint32 num_new_commands = 2;
bool CCLCMsg_Move::has_num_new_commands() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CCLCMsg_Move::set_has_num_new_commands() {
  _has_bits_[0] |= 0x00000004u;
}
void CCLCMsg_Move::clear_has_num_new_commands() {
  _has_bits_[0] &= ~0x00000004u;
}
void CCLCMsg_Move::clear_num_new_commands() {
  num_new_commands_ = 0u;
  clear_has_num_new_commands();
}
::google::protobuf::uint32 CCLCMsg_Move::num_new_commands() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_Move.num_new_commands)
  return num_new_commands_;
}
void CCLCMsg_Move::set_num_new_commands(::google::protobuf::uint32 value) {
  set_has_num_new_commands();
  num_new_commands_ = value;
  // @@protoc_insertion_point(field_set:CCLCMsg_Move.num_new_commands)
}

// optional bytes data = 3;
bool CCLCMsg_Move::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CCLCMsg_Move::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
void CCLCMsg_Move::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
void CCLCMsg_Move::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
const ::std::string& CCLCMsg_Move::data() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_Move.data)
  return data_.GetNoArena();
}
void CCLCMsg_Move::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CCLCMsg_Move.data)
}
#if LANG_CXX11
void CCLCMsg_Move::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CCLCMsg_Move.data)
}
#endif
void CCLCMsg_Move::set_data(const char* value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CCLCMsg_Move.data)
}
void CCLCMsg_Move::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CCLCMsg_Move.data)
}
::std::string* CCLCMsg_Move::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:CCLCMsg_Move.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CCLCMsg_Move::release_data() {
  // @@protoc_insertion_point(field_release:CCLCMsg_Move.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CCLCMsg_Move::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:CCLCMsg_Move.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCLCMsg_VoiceData::kDataFieldNumber;
const int CCLCMsg_VoiceData::kXuidFieldNumber;
const int CCLCMsg_VoiceData::kFormatFieldNumber;
const int CCLCMsg_VoiceData::kSequenceBytesFieldNumber;
const int CCLCMsg_VoiceData::kSectionNumberFieldNumber;
const int CCLCMsg_VoiceData::kUncompressedSampleOffsetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCLCMsg_VoiceData::CCLCMsg_VoiceData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_netmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CCLCMsg_VoiceData)
}
CCLCMsg_VoiceData::CCLCMsg_VoiceData(const CCLCMsg_VoiceData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  ::memcpy(&xuid_, &from.xuid_,
    reinterpret_cast<char*>(&format_) -
    reinterpret_cast<char*>(&xuid_) + sizeof(format_));
  // @@protoc_insertion_point(copy_constructor:CCLCMsg_VoiceData)
}

void CCLCMsg_VoiceData::SharedCtor() {
  _cached_size_ = 0;
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&xuid_, 0, reinterpret_cast<char*>(&uncompressed_sample_offset_) -
    reinterpret_cast<char*>(&xuid_) + sizeof(uncompressed_sample_offset_));
  format_ = 1;
}

CCLCMsg_VoiceData::~CCLCMsg_VoiceData() {
  // @@protoc_insertion_point(destructor:CCLCMsg_VoiceData)
  SharedDtor();
}

void CCLCMsg_VoiceData::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CCLCMsg_VoiceData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCLCMsg_VoiceData::descriptor() {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[17].descriptor;
}

const CCLCMsg_VoiceData& CCLCMsg_VoiceData::default_instance() {
  protobuf_netmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CCLCMsg_VoiceData* CCLCMsg_VoiceData::New(::google::protobuf::Arena* arena) const {
  CCLCMsg_VoiceData* n = new CCLCMsg_VoiceData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CCLCMsg_VoiceData::Clear() {
// @@protoc_insertion_point(message_clear_start:CCLCMsg_VoiceData)
  if (has_data()) {
    GOOGLE_DCHECK(!data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*data_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 62u) {
    ::memset(&xuid_, 0, reinterpret_cast<char*>(&uncompressed_sample_offset_) -
      reinterpret_cast<char*>(&xuid_) + sizeof(uncompressed_sample_offset_));
    format_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CCLCMsg_VoiceData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CCLCMsg_VoiceData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes data = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 xuid = 2;
      case 2: {
        if (tag == 17u) {
          set_has_xuid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &xuid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .VoiceDataFormat_t format = 3 [default = VOICEDATA_FORMAT_ENGINE];
      case 3: {
        if (tag == 24u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::VoiceDataFormat_t_IsValid(value)) {
            set_format(static_cast< ::VoiceDataFormat_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 sequence_bytes = 4;
      case 4: {
        if (tag == 32u) {
          set_has_sequence_bytes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sequence_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 section_number = 5;
      case 5: {
        if (tag == 40u) {
          set_has_section_number();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &section_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 uncompressed_sample_offset = 6;
      case 6: {
        if (tag == 48u) {
          set_has_uncompressed_sample_offset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uncompressed_sample_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CCLCMsg_VoiceData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CCLCMsg_VoiceData)
  return false;
#undef DO_
}

void CCLCMsg_VoiceData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CCLCMsg_VoiceData)
  // optional bytes data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->data(), output);
  }

  // optional fixed64 xuid = 2;
  if (has_xuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->xuid(), output);
  }

  // optional .VoiceDataFormat_t format = 3 [default = VOICEDATA_FORMAT_ENGINE];
  if (has_format()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->format(), output);
  }

  // optional int32 sequence_bytes = 4;
  if (has_sequence_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->sequence_bytes(), output);
  }

  // optional uint32 section_number = 5;
  if (has_section_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->section_number(), output);
  }

  // optional uint32 uncompressed_sample_offset = 6;
  if (has_uncompressed_sample_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->uncompressed_sample_offset(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CCLCMsg_VoiceData)
}

::google::protobuf::uint8* CCLCMsg_VoiceData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CCLCMsg_VoiceData)
  // optional bytes data = 1;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->data(), target);
  }

  // optional fixed64 xuid = 2;
  if (has_xuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->xuid(), target);
  }

  // optional .VoiceDataFormat_t format = 3 [default = VOICEDATA_FORMAT_ENGINE];
  if (has_format()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->format(), target);
  }

  // optional int32 sequence_bytes = 4;
  if (has_sequence_bytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->sequence_bytes(), target);
  }

  // optional uint32 section_number = 5;
  if (has_section_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->section_number(), target);
  }

  // optional uint32 uncompressed_sample_offset = 6;
  if (has_uncompressed_sample_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->uncompressed_sample_offset(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCLCMsg_VoiceData)
  return target;
}

size_t CCLCMsg_VoiceData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCLCMsg_VoiceData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional bytes data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional fixed64 xuid = 2;
    if (has_xuid()) {
      total_size += 1 + 8;
    }

    // optional int32 sequence_bytes = 4;
    if (has_sequence_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sequence_bytes());
    }

    // optional uint32 section_number = 5;
    if (has_section_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->section_number());
    }

    // optional uint32 uncompressed_sample_offset = 6;
    if (has_uncompressed_sample_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uncompressed_sample_offset());
    }

    // optional .VoiceDataFormat_t format = 3 [default = VOICEDATA_FORMAT_ENGINE];
    if (has_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->format());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCLCMsg_VoiceData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCLCMsg_VoiceData)
  GOOGLE_DCHECK_NE(&from, this);
  const CCLCMsg_VoiceData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CCLCMsg_VoiceData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCLCMsg_VoiceData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCLCMsg_VoiceData)
    MergeFrom(*source);
  }
}

void CCLCMsg_VoiceData::MergeFrom(const CCLCMsg_VoiceData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCLCMsg_VoiceData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 63u) {
    if (from.has_data()) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (from.has_xuid()) {
      set_xuid(from.xuid());
    }
    if (from.has_sequence_bytes()) {
      set_sequence_bytes(from.sequence_bytes());
    }
    if (from.has_section_number()) {
      set_section_number(from.section_number());
    }
    if (from.has_uncompressed_sample_offset()) {
      set_uncompressed_sample_offset(from.uncompressed_sample_offset());
    }
    if (from.has_format()) {
      set_format(from.format());
    }
  }
}

void CCLCMsg_VoiceData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCLCMsg_VoiceData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCLCMsg_VoiceData::CopyFrom(const CCLCMsg_VoiceData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCLCMsg_VoiceData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCLCMsg_VoiceData::IsInitialized() const {
  return true;
}

void CCLCMsg_VoiceData::Swap(CCLCMsg_VoiceData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCLCMsg_VoiceData::InternalSwap(CCLCMsg_VoiceData* other) {
  data_.Swap(&other->data_);
  std::swap(xuid_, other->xuid_);
  std::swap(sequence_bytes_, other->sequence_bytes_);
  std::swap(section_number_, other->section_number_);
  std::swap(uncompressed_sample_offset_, other->uncompressed_sample_offset_);
  std::swap(format_, other->format_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CCLCMsg_VoiceData::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[17];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CCLCMsg_VoiceData

// optional bytes data = 1;
bool CCLCMsg_VoiceData::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CCLCMsg_VoiceData::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
void CCLCMsg_VoiceData::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
void CCLCMsg_VoiceData::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
const ::std::string& CCLCMsg_VoiceData::data() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_VoiceData.data)
  return data_.GetNoArena();
}
void CCLCMsg_VoiceData::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CCLCMsg_VoiceData.data)
}
#if LANG_CXX11
void CCLCMsg_VoiceData::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CCLCMsg_VoiceData.data)
}
#endif
void CCLCMsg_VoiceData::set_data(const char* value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CCLCMsg_VoiceData.data)
}
void CCLCMsg_VoiceData::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CCLCMsg_VoiceData.data)
}
::std::string* CCLCMsg_VoiceData::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:CCLCMsg_VoiceData.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CCLCMsg_VoiceData::release_data() {
  // @@protoc_insertion_point(field_release:CCLCMsg_VoiceData.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CCLCMsg_VoiceData::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:CCLCMsg_VoiceData.data)
}

// optional fixed64 xuid = 2;
bool CCLCMsg_VoiceData::has_xuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CCLCMsg_VoiceData::set_has_xuid() {
  _has_bits_[0] |= 0x00000002u;
}
void CCLCMsg_VoiceData::clear_has_xuid() {
  _has_bits_[0] &= ~0x00000002u;
}
void CCLCMsg_VoiceData::clear_xuid() {
  xuid_ = GOOGLE_ULONGLONG(0);
  clear_has_xuid();
}
::google::protobuf::uint64 CCLCMsg_VoiceData::xuid() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_VoiceData.xuid)
  return xuid_;
}
void CCLCMsg_VoiceData::set_xuid(::google::protobuf::uint64 value) {
  set_has_xuid();
  xuid_ = value;
  // @@protoc_insertion_point(field_set:CCLCMsg_VoiceData.xuid)
}

// optional .VoiceDataFormat_t format = 3 [default = VOICEDATA_FORMAT_ENGINE];
bool CCLCMsg_VoiceData::has_format() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CCLCMsg_VoiceData::set_has_format() {
  _has_bits_[0] |= 0x00000020u;
}
void CCLCMsg_VoiceData::clear_has_format() {
  _has_bits_[0] &= ~0x00000020u;
}
void CCLCMsg_VoiceData::clear_format() {
  format_ = 1;
  clear_has_format();
}
::VoiceDataFormat_t CCLCMsg_VoiceData::format() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_VoiceData.format)
  return static_cast< ::VoiceDataFormat_t >(format_);
}
void CCLCMsg_VoiceData::set_format(::VoiceDataFormat_t value) {
  assert(::VoiceDataFormat_t_IsValid(value));
  set_has_format();
  format_ = value;
  // @@protoc_insertion_point(field_set:CCLCMsg_VoiceData.format)
}

// optional int32 sequence_bytes = 4;
bool CCLCMsg_VoiceData::has_sequence_bytes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CCLCMsg_VoiceData::set_has_sequence_bytes() {
  _has_bits_[0] |= 0x00000004u;
}
void CCLCMsg_VoiceData::clear_has_sequence_bytes() {
  _has_bits_[0] &= ~0x00000004u;
}
void CCLCMsg_VoiceData::clear_sequence_bytes() {
  sequence_bytes_ = 0;
  clear_has_sequence_bytes();
}
::google::protobuf::int32 CCLCMsg_VoiceData::sequence_bytes() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_VoiceData.sequence_bytes)
  return sequence_bytes_;
}
void CCLCMsg_VoiceData::set_sequence_bytes(::google::protobuf::int32 value) {
  set_has_sequence_bytes();
  sequence_bytes_ = value;
  // @@protoc_insertion_point(field_set:CCLCMsg_VoiceData.sequence_bytes)
}

// optional uint32 section_number = 5;
bool CCLCMsg_VoiceData::has_section_number() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CCLCMsg_VoiceData::set_has_section_number() {
  _has_bits_[0] |= 0x00000008u;
}
void CCLCMsg_VoiceData::clear_has_section_number() {
  _has_bits_[0] &= ~0x00000008u;
}
void CCLCMsg_VoiceData::clear_section_number() {
  section_number_ = 0u;
  clear_has_section_number();
}
::google::protobuf::uint32 CCLCMsg_VoiceData::section_number() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_VoiceData.section_number)
  return section_number_;
}
void CCLCMsg_VoiceData::set_section_number(::google::protobuf::uint32 value) {
  set_has_section_number();
  section_number_ = value;
  // @@protoc_insertion_point(field_set:CCLCMsg_VoiceData.section_number)
}

// optional uint32 uncompressed_sample_offset = 6;
bool CCLCMsg_VoiceData::has_uncompressed_sample_offset() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CCLCMsg_VoiceData::set_has_uncompressed_sample_offset() {
  _has_bits_[0] |= 0x00000010u;
}
void CCLCMsg_VoiceData::clear_has_uncompressed_sample_offset() {
  _has_bits_[0] &= ~0x00000010u;
}
void CCLCMsg_VoiceData::clear_uncompressed_sample_offset() {
  uncompressed_sample_offset_ = 0u;
  clear_has_uncompressed_sample_offset();
}
::google::protobuf::uint32 CCLCMsg_VoiceData::uncompressed_sample_offset() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_VoiceData.uncompressed_sample_offset)
  return uncompressed_sample_offset_;
}
void CCLCMsg_VoiceData::set_uncompressed_sample_offset(::google::protobuf::uint32 value) {
  set_has_uncompressed_sample_offset();
  uncompressed_sample_offset_ = value;
  // @@protoc_insertion_point(field_set:CCLCMsg_VoiceData.uncompressed_sample_offset)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCLCMsg_BaselineAck::kBaselineTickFieldNumber;
const int CCLCMsg_BaselineAck::kBaselineNrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCLCMsg_BaselineAck::CCLCMsg_BaselineAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_netmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CCLCMsg_BaselineAck)
}
CCLCMsg_BaselineAck::CCLCMsg_BaselineAck(const CCLCMsg_BaselineAck& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&baseline_tick_, &from.baseline_tick_,
    reinterpret_cast<char*>(&baseline_nr_) -
    reinterpret_cast<char*>(&baseline_tick_) + sizeof(baseline_nr_));
  // @@protoc_insertion_point(copy_constructor:CCLCMsg_BaselineAck)
}

void CCLCMsg_BaselineAck::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baseline_tick_, 0, reinterpret_cast<char*>(&baseline_nr_) -
    reinterpret_cast<char*>(&baseline_tick_) + sizeof(baseline_nr_));
}

CCLCMsg_BaselineAck::~CCLCMsg_BaselineAck() {
  // @@protoc_insertion_point(destructor:CCLCMsg_BaselineAck)
  SharedDtor();
}

void CCLCMsg_BaselineAck::SharedDtor() {
}

void CCLCMsg_BaselineAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCLCMsg_BaselineAck::descriptor() {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[18].descriptor;
}

const CCLCMsg_BaselineAck& CCLCMsg_BaselineAck::default_instance() {
  protobuf_netmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CCLCMsg_BaselineAck* CCLCMsg_BaselineAck::New(::google::protobuf::Arena* arena) const {
  CCLCMsg_BaselineAck* n = new CCLCMsg_BaselineAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CCLCMsg_BaselineAck::Clear() {
// @@protoc_insertion_point(message_clear_start:CCLCMsg_BaselineAck)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&baseline_tick_, 0, reinterpret_cast<char*>(&baseline_nr_) -
      reinterpret_cast<char*>(&baseline_tick_) + sizeof(baseline_nr_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CCLCMsg_BaselineAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CCLCMsg_BaselineAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 baseline_tick = 1;
      case 1: {
        if (tag == 8u) {
          set_has_baseline_tick();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &baseline_tick_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 baseline_nr = 2;
      case 2: {
        if (tag == 16u) {
          set_has_baseline_nr();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &baseline_nr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CCLCMsg_BaselineAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CCLCMsg_BaselineAck)
  return false;
#undef DO_
}

void CCLCMsg_BaselineAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CCLCMsg_BaselineAck)
  // optional int32 baseline_tick = 1;
  if (has_baseline_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->baseline_tick(), output);
  }

  // optional int32 baseline_nr = 2;
  if (has_baseline_nr()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->baseline_nr(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CCLCMsg_BaselineAck)
}

::google::protobuf::uint8* CCLCMsg_BaselineAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CCLCMsg_BaselineAck)
  // optional int32 baseline_tick = 1;
  if (has_baseline_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->baseline_tick(), target);
  }

  // optional int32 baseline_nr = 2;
  if (has_baseline_nr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->baseline_nr(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCLCMsg_BaselineAck)
  return target;
}

size_t CCLCMsg_BaselineAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCLCMsg_BaselineAck)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 baseline_tick = 1;
    if (has_baseline_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->baseline_tick());
    }

    // optional int32 baseline_nr = 2;
    if (has_baseline_nr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->baseline_nr());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCLCMsg_BaselineAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCLCMsg_BaselineAck)
  GOOGLE_DCHECK_NE(&from, this);
  const CCLCMsg_BaselineAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CCLCMsg_BaselineAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCLCMsg_BaselineAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCLCMsg_BaselineAck)
    MergeFrom(*source);
  }
}

void CCLCMsg_BaselineAck::MergeFrom(const CCLCMsg_BaselineAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCLCMsg_BaselineAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_baseline_tick()) {
      set_baseline_tick(from.baseline_tick());
    }
    if (from.has_baseline_nr()) {
      set_baseline_nr(from.baseline_nr());
    }
  }
}

void CCLCMsg_BaselineAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCLCMsg_BaselineAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCLCMsg_BaselineAck::CopyFrom(const CCLCMsg_BaselineAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCLCMsg_BaselineAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCLCMsg_BaselineAck::IsInitialized() const {
  return true;
}

void CCLCMsg_BaselineAck::Swap(CCLCMsg_BaselineAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCLCMsg_BaselineAck::InternalSwap(CCLCMsg_BaselineAck* other) {
  std::swap(baseline_tick_, other->baseline_tick_);
  std::swap(baseline_nr_, other->baseline_nr_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CCLCMsg_BaselineAck::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[18];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CCLCMsg_BaselineAck

// optional int32 baseline_tick = 1;
bool CCLCMsg_BaselineAck::has_baseline_tick() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CCLCMsg_BaselineAck::set_has_baseline_tick() {
  _has_bits_[0] |= 0x00000001u;
}
void CCLCMsg_BaselineAck::clear_has_baseline_tick() {
  _has_bits_[0] &= ~0x00000001u;
}
void CCLCMsg_BaselineAck::clear_baseline_tick() {
  baseline_tick_ = 0;
  clear_has_baseline_tick();
}
::google::protobuf::int32 CCLCMsg_BaselineAck::baseline_tick() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_BaselineAck.baseline_tick)
  return baseline_tick_;
}
void CCLCMsg_BaselineAck::set_baseline_tick(::google::protobuf::int32 value) {
  set_has_baseline_tick();
  baseline_tick_ = value;
  // @@protoc_insertion_point(field_set:CCLCMsg_BaselineAck.baseline_tick)
}

// optional int32 baseline_nr = 2;
bool CCLCMsg_BaselineAck::has_baseline_nr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CCLCMsg_BaselineAck::set_has_baseline_nr() {
  _has_bits_[0] |= 0x00000002u;
}
void CCLCMsg_BaselineAck::clear_has_baseline_nr() {
  _has_bits_[0] &= ~0x00000002u;
}
void CCLCMsg_BaselineAck::clear_baseline_nr() {
  baseline_nr_ = 0;
  clear_has_baseline_nr();
}
::google::protobuf::int32 CCLCMsg_BaselineAck::baseline_nr() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_BaselineAck.baseline_nr)
  return baseline_nr_;
}
void CCLCMsg_BaselineAck::set_baseline_nr(::google::protobuf::int32 value) {
  set_has_baseline_nr();
  baseline_nr_ = value;
  // @@protoc_insertion_point(field_set:CCLCMsg_BaselineAck.baseline_nr)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCLCMsg_ListenEvents::kEventMaskFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCLCMsg_ListenEvents::CCLCMsg_ListenEvents()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_netmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CCLCMsg_ListenEvents)
}
CCLCMsg_ListenEvents::CCLCMsg_ListenEvents(const CCLCMsg_ListenEvents& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      event_mask_(from.event_mask_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CCLCMsg_ListenEvents)
}

void CCLCMsg_ListenEvents::SharedCtor() {
  _cached_size_ = 0;
}

CCLCMsg_ListenEvents::~CCLCMsg_ListenEvents() {
  // @@protoc_insertion_point(destructor:CCLCMsg_ListenEvents)
  SharedDtor();
}

void CCLCMsg_ListenEvents::SharedDtor() {
}

void CCLCMsg_ListenEvents::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCLCMsg_ListenEvents::descriptor() {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[19].descriptor;
}

const CCLCMsg_ListenEvents& CCLCMsg_ListenEvents::default_instance() {
  protobuf_netmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CCLCMsg_ListenEvents* CCLCMsg_ListenEvents::New(::google::protobuf::Arena* arena) const {
  CCLCMsg_ListenEvents* n = new CCLCMsg_ListenEvents;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CCLCMsg_ListenEvents::Clear() {
// @@protoc_insertion_point(message_clear_start:CCLCMsg_ListenEvents)
  event_mask_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CCLCMsg_ListenEvents::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CCLCMsg_ListenEvents)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated fixed32 event_mask = 1;
      case 1: {
        if (tag == 13u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 1, 13u, input, this->mutable_event_mask())));
        } else if (tag == 10u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, this->mutable_event_mask())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CCLCMsg_ListenEvents)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CCLCMsg_ListenEvents)
  return false;
#undef DO_
}

void CCLCMsg_ListenEvents::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CCLCMsg_ListenEvents)
  // repeated fixed32 event_mask = 1;
  for (int i = 0; i < this->event_mask_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(
      1, this->event_mask(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CCLCMsg_ListenEvents)
}

::google::protobuf::uint8* CCLCMsg_ListenEvents::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CCLCMsg_ListenEvents)
  // repeated fixed32 event_mask = 1;
  for (int i = 0; i < this->event_mask_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed32ToArray(1, this->event_mask(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCLCMsg_ListenEvents)
  return target;
}

size_t CCLCMsg_ListenEvents::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCLCMsg_ListenEvents)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated fixed32 event_mask = 1;
  {
    unsigned int count = this->event_mask_size();
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->event_mask_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCLCMsg_ListenEvents::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCLCMsg_ListenEvents)
  GOOGLE_DCHECK_NE(&from, this);
  const CCLCMsg_ListenEvents* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CCLCMsg_ListenEvents>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCLCMsg_ListenEvents)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCLCMsg_ListenEvents)
    MergeFrom(*source);
  }
}

void CCLCMsg_ListenEvents::MergeFrom(const CCLCMsg_ListenEvents& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCLCMsg_ListenEvents)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  event_mask_.MergeFrom(from.event_mask_);
}

void CCLCMsg_ListenEvents::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCLCMsg_ListenEvents)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCLCMsg_ListenEvents::CopyFrom(const CCLCMsg_ListenEvents& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCLCMsg_ListenEvents)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCLCMsg_ListenEvents::IsInitialized() const {
  return true;
}

void CCLCMsg_ListenEvents::Swap(CCLCMsg_ListenEvents* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCLCMsg_ListenEvents::InternalSwap(CCLCMsg_ListenEvents* other) {
  event_mask_.UnsafeArenaSwap(&other->event_mask_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CCLCMsg_ListenEvents::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[19];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CCLCMsg_ListenEvents

// repeated fixed32 event_mask = 1;
int CCLCMsg_ListenEvents::event_mask_size() const {
  return event_mask_.size();
}
void CCLCMsg_ListenEvents::clear_event_mask() {
  event_mask_.Clear();
}
::google::protobuf::uint32 CCLCMsg_ListenEvents::event_mask(int index) const {
  // @@protoc_insertion_point(field_get:CCLCMsg_ListenEvents.event_mask)
  return event_mask_.Get(index);
}
void CCLCMsg_ListenEvents::set_event_mask(int index, ::google::protobuf::uint32 value) {
  event_mask_.Set(index, value);
  // @@protoc_insertion_point(field_set:CCLCMsg_ListenEvents.event_mask)
}
void CCLCMsg_ListenEvents::add_event_mask(::google::protobuf::uint32 value) {
  event_mask_.Add(value);
  // @@protoc_insertion_point(field_add:CCLCMsg_ListenEvents.event_mask)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CCLCMsg_ListenEvents::event_mask() const {
  // @@protoc_insertion_point(field_list:CCLCMsg_ListenEvents.event_mask)
  return event_mask_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CCLCMsg_ListenEvents::mutable_event_mask() {
  // @@protoc_insertion_point(field_mutable_list:CCLCMsg_ListenEvents.event_mask)
  return &event_mask_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCLCMsg_RespondCvarValue::kCookieFieldNumber;
const int CCLCMsg_RespondCvarValue::kStatusCodeFieldNumber;
const int CCLCMsg_RespondCvarValue::kNameFieldNumber;
const int CCLCMsg_RespondCvarValue::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCLCMsg_RespondCvarValue::CCLCMsg_RespondCvarValue()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_netmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CCLCMsg_RespondCvarValue)
}
CCLCMsg_RespondCvarValue::CCLCMsg_RespondCvarValue(const CCLCMsg_RespondCvarValue& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_value()) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  ::memcpy(&cookie_, &from.cookie_,
    reinterpret_cast<char*>(&status_code_) -
    reinterpret_cast<char*>(&cookie_) + sizeof(status_code_));
  // @@protoc_insertion_point(copy_constructor:CCLCMsg_RespondCvarValue)
}

void CCLCMsg_RespondCvarValue::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&cookie_, 0, reinterpret_cast<char*>(&status_code_) -
    reinterpret_cast<char*>(&cookie_) + sizeof(status_code_));
}

CCLCMsg_RespondCvarValue::~CCLCMsg_RespondCvarValue() {
  // @@protoc_insertion_point(destructor:CCLCMsg_RespondCvarValue)
  SharedDtor();
}

void CCLCMsg_RespondCvarValue::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CCLCMsg_RespondCvarValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCLCMsg_RespondCvarValue::descriptor() {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[20].descriptor;
}

const CCLCMsg_RespondCvarValue& CCLCMsg_RespondCvarValue::default_instance() {
  protobuf_netmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CCLCMsg_RespondCvarValue* CCLCMsg_RespondCvarValue::New(::google::protobuf::Arena* arena) const {
  CCLCMsg_RespondCvarValue* n = new CCLCMsg_RespondCvarValue;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CCLCMsg_RespondCvarValue::Clear() {
// @@protoc_insertion_point(message_clear_start:CCLCMsg_RespondCvarValue)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (has_value()) {
      GOOGLE_DCHECK(!value_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*value_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 12u) {
    ::memset(&cookie_, 0, reinterpret_cast<char*>(&status_code_) -
      reinterpret_cast<char*>(&cookie_) + sizeof(status_code_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CCLCMsg_RespondCvarValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CCLCMsg_RespondCvarValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cookie = 1;
      case 1: {
        if (tag == 8u) {
          set_has_cookie();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cookie_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 status_code = 2;
      case 2: {
        if (tag == 16u) {
          set_has_status_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CCLCMsg_RespondCvarValue.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string value = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CCLCMsg_RespondCvarValue.value");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CCLCMsg_RespondCvarValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CCLCMsg_RespondCvarValue)
  return false;
#undef DO_
}

void CCLCMsg_RespondCvarValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CCLCMsg_RespondCvarValue)
  // optional int32 cookie = 1;
  if (has_cookie()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cookie(), output);
  }

  // optional int32 status_code = 2;
  if (has_status_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->status_code(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CCLCMsg_RespondCvarValue.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional string value = 4;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CCLCMsg_RespondCvarValue.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CCLCMsg_RespondCvarValue)
}

::google::protobuf::uint8* CCLCMsg_RespondCvarValue::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CCLCMsg_RespondCvarValue)
  // optional int32 cookie = 1;
  if (has_cookie()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cookie(), target);
  }

  // optional int32 status_code = 2;
  if (has_status_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->status_code(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CCLCMsg_RespondCvarValue.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional string value = 4;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CCLCMsg_RespondCvarValue.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCLCMsg_RespondCvarValue)
  return target;
}

size_t CCLCMsg_RespondCvarValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCLCMsg_RespondCvarValue)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string value = 4;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

    // optional int32 cookie = 1;
    if (has_cookie()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cookie());
    }

    // optional int32 status_code = 2;
    if (has_status_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status_code());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCLCMsg_RespondCvarValue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCLCMsg_RespondCvarValue)
  GOOGLE_DCHECK_NE(&from, this);
  const CCLCMsg_RespondCvarValue* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CCLCMsg_RespondCvarValue>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCLCMsg_RespondCvarValue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCLCMsg_RespondCvarValue)
    MergeFrom(*source);
  }
}

void CCLCMsg_RespondCvarValue::MergeFrom(const CCLCMsg_RespondCvarValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCLCMsg_RespondCvarValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 15u) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_value()) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
    if (from.has_cookie()) {
      set_cookie(from.cookie());
    }
    if (from.has_status_code()) {
      set_status_code(from.status_code());
    }
  }
}

void CCLCMsg_RespondCvarValue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCLCMsg_RespondCvarValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCLCMsg_RespondCvarValue::CopyFrom(const CCLCMsg_RespondCvarValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCLCMsg_RespondCvarValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCLCMsg_RespondCvarValue::IsInitialized() const {
  return true;
}

void CCLCMsg_RespondCvarValue::Swap(CCLCMsg_RespondCvarValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCLCMsg_RespondCvarValue::InternalSwap(CCLCMsg_RespondCvarValue* other) {
  name_.Swap(&other->name_);
  value_.Swap(&other->value_);
  std::swap(cookie_, other->cookie_);
  std::swap(status_code_, other->status_code_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CCLCMsg_RespondCvarValue::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[20];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CCLCMsg_RespondCvarValue

// optional int32 cookie = 1;
bool CCLCMsg_RespondCvarValue::has_cookie() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CCLCMsg_RespondCvarValue::set_has_cookie() {
  _has_bits_[0] |= 0x00000004u;
}
void CCLCMsg_RespondCvarValue::clear_has_cookie() {
  _has_bits_[0] &= ~0x00000004u;
}
void CCLCMsg_RespondCvarValue::clear_cookie() {
  cookie_ = 0;
  clear_has_cookie();
}
::google::protobuf::int32 CCLCMsg_RespondCvarValue::cookie() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_RespondCvarValue.cookie)
  return cookie_;
}
void CCLCMsg_RespondCvarValue::set_cookie(::google::protobuf::int32 value) {
  set_has_cookie();
  cookie_ = value;
  // @@protoc_insertion_point(field_set:CCLCMsg_RespondCvarValue.cookie)
}

// optional int32 status_code = 2;
bool CCLCMsg_RespondCvarValue::has_status_code() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CCLCMsg_RespondCvarValue::set_has_status_code() {
  _has_bits_[0] |= 0x00000008u;
}
void CCLCMsg_RespondCvarValue::clear_has_status_code() {
  _has_bits_[0] &= ~0x00000008u;
}
void CCLCMsg_RespondCvarValue::clear_status_code() {
  status_code_ = 0;
  clear_has_status_code();
}
::google::protobuf::int32 CCLCMsg_RespondCvarValue::status_code() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_RespondCvarValue.status_code)
  return status_code_;
}
void CCLCMsg_RespondCvarValue::set_status_code(::google::protobuf::int32 value) {
  set_has_status_code();
  status_code_ = value;
  // @@protoc_insertion_point(field_set:CCLCMsg_RespondCvarValue.status_code)
}

// optional string name = 3;
bool CCLCMsg_RespondCvarValue::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CCLCMsg_RespondCvarValue::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CCLCMsg_RespondCvarValue::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CCLCMsg_RespondCvarValue::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& CCLCMsg_RespondCvarValue::name() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_RespondCvarValue.name)
  return name_.GetNoArena();
}
void CCLCMsg_RespondCvarValue::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CCLCMsg_RespondCvarValue.name)
}
#if LANG_CXX11
void CCLCMsg_RespondCvarValue::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CCLCMsg_RespondCvarValue.name)
}
#endif
void CCLCMsg_RespondCvarValue::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CCLCMsg_RespondCvarValue.name)
}
void CCLCMsg_RespondCvarValue::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CCLCMsg_RespondCvarValue.name)
}
::std::string* CCLCMsg_RespondCvarValue::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:CCLCMsg_RespondCvarValue.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CCLCMsg_RespondCvarValue::release_name() {
  // @@protoc_insertion_point(field_release:CCLCMsg_RespondCvarValue.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CCLCMsg_RespondCvarValue::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:CCLCMsg_RespondCvarValue.name)
}

// optional string value = 4;
bool CCLCMsg_RespondCvarValue::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CCLCMsg_RespondCvarValue::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void CCLCMsg_RespondCvarValue::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void CCLCMsg_RespondCvarValue::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
const ::std::string& CCLCMsg_RespondCvarValue::value() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_RespondCvarValue.value)
  return value_.GetNoArena();
}
void CCLCMsg_RespondCvarValue::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CCLCMsg_RespondCvarValue.value)
}
#if LANG_CXX11
void CCLCMsg_RespondCvarValue::set_value(::std::string&& value) {
  set_has_value();
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CCLCMsg_RespondCvarValue.value)
}
#endif
void CCLCMsg_RespondCvarValue::set_value(const char* value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CCLCMsg_RespondCvarValue.value)
}
void CCLCMsg_RespondCvarValue::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CCLCMsg_RespondCvarValue.value)
}
::std::string* CCLCMsg_RespondCvarValue::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:CCLCMsg_RespondCvarValue.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CCLCMsg_RespondCvarValue::release_value() {
  // @@protoc_insertion_point(field_release:CCLCMsg_RespondCvarValue.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CCLCMsg_RespondCvarValue::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:CCLCMsg_RespondCvarValue.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCLCMsg_FileCRCCheck::kCodePathFieldNumber;
const int CCLCMsg_FileCRCCheck::kPathFieldNumber;
const int CCLCMsg_FileCRCCheck::kCodeFilenameFieldNumber;
const int CCLCMsg_FileCRCCheck::kFilenameFieldNumber;
const int CCLCMsg_FileCRCCheck::kFileFractionFieldNumber;
const int CCLCMsg_FileCRCCheck::kMd5FieldNumber;
const int CCLCMsg_FileCRCCheck::kCrcFieldNumber;
const int CCLCMsg_FileCRCCheck::kFileHashTypeFieldNumber;
const int CCLCMsg_FileCRCCheck::kFileLenFieldNumber;
const int CCLCMsg_FileCRCCheck::kPackFileIdFieldNumber;
const int CCLCMsg_FileCRCCheck::kPackFileNumberFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCLCMsg_FileCRCCheck::CCLCMsg_FileCRCCheck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_netmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CCLCMsg_FileCRCCheck)
}
CCLCMsg_FileCRCCheck::CCLCMsg_FileCRCCheck(const CCLCMsg_FileCRCCheck& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_path()) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_filename()) {
    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  md5_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_md5()) {
    md5_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.md5_);
  }
  ::memcpy(&code_path_, &from.code_path_,
    reinterpret_cast<char*>(&pack_file_number_) -
    reinterpret_cast<char*>(&code_path_) + sizeof(pack_file_number_));
  // @@protoc_insertion_point(copy_constructor:CCLCMsg_FileCRCCheck)
}

void CCLCMsg_FileCRCCheck::SharedCtor() {
  _cached_size_ = 0;
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  md5_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&code_path_, 0, reinterpret_cast<char*>(&pack_file_number_) -
    reinterpret_cast<char*>(&code_path_) + sizeof(pack_file_number_));
}

CCLCMsg_FileCRCCheck::~CCLCMsg_FileCRCCheck() {
  // @@protoc_insertion_point(destructor:CCLCMsg_FileCRCCheck)
  SharedDtor();
}

void CCLCMsg_FileCRCCheck::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  md5_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CCLCMsg_FileCRCCheck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCLCMsg_FileCRCCheck::descriptor() {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[21].descriptor;
}

const CCLCMsg_FileCRCCheck& CCLCMsg_FileCRCCheck::default_instance() {
  protobuf_netmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CCLCMsg_FileCRCCheck* CCLCMsg_FileCRCCheck::New(::google::protobuf::Arena* arena) const {
  CCLCMsg_FileCRCCheck* n = new CCLCMsg_FileCRCCheck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CCLCMsg_FileCRCCheck::Clear() {
// @@protoc_insertion_point(message_clear_start:CCLCMsg_FileCRCCheck)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_path()) {
      GOOGLE_DCHECK(!path_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*path_.UnsafeRawStringPointer())->clear();
    }
    if (has_filename()) {
      GOOGLE_DCHECK(!filename_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*filename_.UnsafeRawStringPointer())->clear();
    }
    if (has_md5()) {
      GOOGLE_DCHECK(!md5_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*md5_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 248u) {
    ::memset(&code_path_, 0, reinterpret_cast<char*>(&file_hash_type_) -
      reinterpret_cast<char*>(&code_path_) + sizeof(file_hash_type_));
  }
  if (_has_bits_[8 / 32] & 1792u) {
    ::memset(&file_len_, 0, reinterpret_cast<char*>(&pack_file_number_) -
      reinterpret_cast<char*>(&file_len_) + sizeof(pack_file_number_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CCLCMsg_FileCRCCheck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CCLCMsg_FileCRCCheck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 code_path = 1;
      case 1: {
        if (tag == 8u) {
          set_has_code_path();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_path_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string path = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CCLCMsg_FileCRCCheck.path");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 code_filename = 3;
      case 3: {
        if (tag == 24u) {
          set_has_code_filename();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_filename_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string filename = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CCLCMsg_FileCRCCheck.filename");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 file_fraction = 5;
      case 5: {
        if (tag == 40u) {
          set_has_file_fraction();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &file_fraction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes md5 = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_md5()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 crc = 7;
      case 7: {
        if (tag == 56u) {
          set_has_crc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 file_hash_type = 8;
      case 8: {
        if (tag == 64u) {
          set_has_file_hash_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &file_hash_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 file_len = 9;
      case 9: {
        if (tag == 72u) {
          set_has_file_len();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &file_len_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 pack_file_id = 10;
      case 10: {
        if (tag == 80u) {
          set_has_pack_file_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pack_file_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 pack_file_number = 11;
      case 11: {
        if (tag == 88u) {
          set_has_pack_file_number();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pack_file_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CCLCMsg_FileCRCCheck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CCLCMsg_FileCRCCheck)
  return false;
#undef DO_
}

void CCLCMsg_FileCRCCheck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CCLCMsg_FileCRCCheck)
  // optional int32 code_path = 1;
  if (has_code_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code_path(), output);
  }

  // optional string path = 2;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CCLCMsg_FileCRCCheck.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->path(), output);
  }

  // optional int32 code_filename = 3;
  if (has_code_filename()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->code_filename(), output);
  }

  // optional string filename = 4;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CCLCMsg_FileCRCCheck.filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->filename(), output);
  }

  // optional int32 file_fraction = 5;
  if (has_file_fraction()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->file_fraction(), output);
  }

  // optional bytes md5 = 6;
  if (has_md5()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->md5(), output);
  }

  // optional uint32 crc = 7;
  if (has_crc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->crc(), output);
  }

  // optional int32 file_hash_type = 8;
  if (has_file_hash_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->file_hash_type(), output);
  }

  // optional int32 file_len = 9;
  if (has_file_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->file_len(), output);
  }

  // optional int32 pack_file_id = 10;
  if (has_pack_file_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->pack_file_id(), output);
  }

  // optional int32 pack_file_number = 11;
  if (has_pack_file_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->pack_file_number(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CCLCMsg_FileCRCCheck)
}

::google::protobuf::uint8* CCLCMsg_FileCRCCheck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CCLCMsg_FileCRCCheck)
  // optional int32 code_path = 1;
  if (has_code_path()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code_path(), target);
  }

  // optional string path = 2;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CCLCMsg_FileCRCCheck.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->path(), target);
  }

  // optional int32 code_filename = 3;
  if (has_code_filename()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->code_filename(), target);
  }

  // optional string filename = 4;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CCLCMsg_FileCRCCheck.filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->filename(), target);
  }

  // optional int32 file_fraction = 5;
  if (has_file_fraction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->file_fraction(), target);
  }

  // optional bytes md5 = 6;
  if (has_md5()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->md5(), target);
  }

  // optional uint32 crc = 7;
  if (has_crc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->crc(), target);
  }

  // optional int32 file_hash_type = 8;
  if (has_file_hash_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->file_hash_type(), target);
  }

  // optional int32 file_len = 9;
  if (has_file_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->file_len(), target);
  }

  // optional int32 pack_file_id = 10;
  if (has_pack_file_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->pack_file_id(), target);
  }

  // optional int32 pack_file_number = 11;
  if (has_pack_file_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->pack_file_number(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCLCMsg_FileCRCCheck)
  return target;
}

size_t CCLCMsg_FileCRCCheck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCLCMsg_FileCRCCheck)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string path = 2;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

    // optional string filename = 4;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional bytes md5 = 6;
    if (has_md5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->md5());
    }

    // optional int32 code_path = 1;
    if (has_code_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code_path());
    }

    // optional int32 code_filename = 3;
    if (has_code_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code_filename());
    }

    // optional int32 file_fraction = 5;
    if (has_file_fraction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->file_fraction());
    }

    // optional uint32 crc = 7;
    if (has_crc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crc());
    }

    // optional int32 file_hash_type = 8;
    if (has_file_hash_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->file_hash_type());
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional int32 file_len = 9;
    if (has_file_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->file_len());
    }

    // optional int32 pack_file_id = 10;
    if (has_pack_file_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pack_file_id());
    }

    // optional int32 pack_file_number = 11;
    if (has_pack_file_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pack_file_number());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCLCMsg_FileCRCCheck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCLCMsg_FileCRCCheck)
  GOOGLE_DCHECK_NE(&from, this);
  const CCLCMsg_FileCRCCheck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CCLCMsg_FileCRCCheck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCLCMsg_FileCRCCheck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCLCMsg_FileCRCCheck)
    MergeFrom(*source);
  }
}

void CCLCMsg_FileCRCCheck::MergeFrom(const CCLCMsg_FileCRCCheck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCLCMsg_FileCRCCheck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 255u) {
    if (from.has_path()) {
      set_has_path();
      path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
    }
    if (from.has_filename()) {
      set_has_filename();
      filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
    }
    if (from.has_md5()) {
      set_has_md5();
      md5_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.md5_);
    }
    if (from.has_code_path()) {
      set_code_path(from.code_path());
    }
    if (from.has_code_filename()) {
      set_code_filename(from.code_filename());
    }
    if (from.has_file_fraction()) {
      set_file_fraction(from.file_fraction());
    }
    if (from.has_crc()) {
      set_crc(from.crc());
    }
    if (from.has_file_hash_type()) {
      set_file_hash_type(from.file_hash_type());
    }
  }
  if (from._has_bits_[8 / 32] & 1792u) {
    if (from.has_file_len()) {
      set_file_len(from.file_len());
    }
    if (from.has_pack_file_id()) {
      set_pack_file_id(from.pack_file_id());
    }
    if (from.has_pack_file_number()) {
      set_pack_file_number(from.pack_file_number());
    }
  }
}

void CCLCMsg_FileCRCCheck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCLCMsg_FileCRCCheck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCLCMsg_FileCRCCheck::CopyFrom(const CCLCMsg_FileCRCCheck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCLCMsg_FileCRCCheck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCLCMsg_FileCRCCheck::IsInitialized() const {
  return true;
}

void CCLCMsg_FileCRCCheck::Swap(CCLCMsg_FileCRCCheck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCLCMsg_FileCRCCheck::InternalSwap(CCLCMsg_FileCRCCheck* other) {
  path_.Swap(&other->path_);
  filename_.Swap(&other->filename_);
  md5_.Swap(&other->md5_);
  std::swap(code_path_, other->code_path_);
  std::swap(code_filename_, other->code_filename_);
  std::swap(file_fraction_, other->file_fraction_);
  std::swap(crc_, other->crc_);
  std::swap(file_hash_type_, other->file_hash_type_);
  std::swap(file_len_, other->file_len_);
  std::swap(pack_file_id_, other->pack_file_id_);
  std::swap(pack_file_number_, other->pack_file_number_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CCLCMsg_FileCRCCheck::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[21];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CCLCMsg_FileCRCCheck

// optional int32 code_path = 1;
bool CCLCMsg_FileCRCCheck::has_code_path() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CCLCMsg_FileCRCCheck::set_has_code_path() {
  _has_bits_[0] |= 0x00000008u;
}
void CCLCMsg_FileCRCCheck::clear_has_code_path() {
  _has_bits_[0] &= ~0x00000008u;
}
void CCLCMsg_FileCRCCheck::clear_code_path() {
  code_path_ = 0;
  clear_has_code_path();
}
::google::protobuf::int32 CCLCMsg_FileCRCCheck::code_path() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_FileCRCCheck.code_path)
  return code_path_;
}
void CCLCMsg_FileCRCCheck::set_code_path(::google::protobuf::int32 value) {
  set_has_code_path();
  code_path_ = value;
  // @@protoc_insertion_point(field_set:CCLCMsg_FileCRCCheck.code_path)
}

// optional string path = 2;
bool CCLCMsg_FileCRCCheck::has_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CCLCMsg_FileCRCCheck::set_has_path() {
  _has_bits_[0] |= 0x00000001u;
}
void CCLCMsg_FileCRCCheck::clear_has_path() {
  _has_bits_[0] &= ~0x00000001u;
}
void CCLCMsg_FileCRCCheck::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_path();
}
const ::std::string& CCLCMsg_FileCRCCheck::path() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_FileCRCCheck.path)
  return path_.GetNoArena();
}
void CCLCMsg_FileCRCCheck::set_path(const ::std::string& value) {
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CCLCMsg_FileCRCCheck.path)
}
#if LANG_CXX11
void CCLCMsg_FileCRCCheck::set_path(::std::string&& value) {
  set_has_path();
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CCLCMsg_FileCRCCheck.path)
}
#endif
void CCLCMsg_FileCRCCheck::set_path(const char* value) {
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CCLCMsg_FileCRCCheck.path)
}
void CCLCMsg_FileCRCCheck::set_path(const char* value, size_t size) {
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CCLCMsg_FileCRCCheck.path)
}
::std::string* CCLCMsg_FileCRCCheck::mutable_path() {
  set_has_path();
  // @@protoc_insertion_point(field_mutable:CCLCMsg_FileCRCCheck.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CCLCMsg_FileCRCCheck::release_path() {
  // @@protoc_insertion_point(field_release:CCLCMsg_FileCRCCheck.path)
  clear_has_path();
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CCLCMsg_FileCRCCheck::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    set_has_path();
  } else {
    clear_has_path();
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:CCLCMsg_FileCRCCheck.path)
}

// optional int32 code_filename = 3;
bool CCLCMsg_FileCRCCheck::has_code_filename() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CCLCMsg_FileCRCCheck::set_has_code_filename() {
  _has_bits_[0] |= 0x00000010u;
}
void CCLCMsg_FileCRCCheck::clear_has_code_filename() {
  _has_bits_[0] &= ~0x00000010u;
}
void CCLCMsg_FileCRCCheck::clear_code_filename() {
  code_filename_ = 0;
  clear_has_code_filename();
}
::google::protobuf::int32 CCLCMsg_FileCRCCheck::code_filename() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_FileCRCCheck.code_filename)
  return code_filename_;
}
void CCLCMsg_FileCRCCheck::set_code_filename(::google::protobuf::int32 value) {
  set_has_code_filename();
  code_filename_ = value;
  // @@protoc_insertion_point(field_set:CCLCMsg_FileCRCCheck.code_filename)
}

// optional string filename = 4;
bool CCLCMsg_FileCRCCheck::has_filename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CCLCMsg_FileCRCCheck::set_has_filename() {
  _has_bits_[0] |= 0x00000002u;
}
void CCLCMsg_FileCRCCheck::clear_has_filename() {
  _has_bits_[0] &= ~0x00000002u;
}
void CCLCMsg_FileCRCCheck::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_filename();
}
const ::std::string& CCLCMsg_FileCRCCheck::filename() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_FileCRCCheck.filename)
  return filename_.GetNoArena();
}
void CCLCMsg_FileCRCCheck::set_filename(const ::std::string& value) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CCLCMsg_FileCRCCheck.filename)
}
#if LANG_CXX11
void CCLCMsg_FileCRCCheck::set_filename(::std::string&& value) {
  set_has_filename();
  filename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CCLCMsg_FileCRCCheck.filename)
}
#endif
void CCLCMsg_FileCRCCheck::set_filename(const char* value) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CCLCMsg_FileCRCCheck.filename)
}
void CCLCMsg_FileCRCCheck::set_filename(const char* value, size_t size) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CCLCMsg_FileCRCCheck.filename)
}
::std::string* CCLCMsg_FileCRCCheck::mutable_filename() {
  set_has_filename();
  // @@protoc_insertion_point(field_mutable:CCLCMsg_FileCRCCheck.filename)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CCLCMsg_FileCRCCheck::release_filename() {
  // @@protoc_insertion_point(field_release:CCLCMsg_FileCRCCheck.filename)
  clear_has_filename();
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CCLCMsg_FileCRCCheck::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    set_has_filename();
  } else {
    clear_has_filename();
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:CCLCMsg_FileCRCCheck.filename)
}

// optional int32 file_fraction = 5;
bool CCLCMsg_FileCRCCheck::has_file_fraction() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CCLCMsg_FileCRCCheck::set_has_file_fraction() {
  _has_bits_[0] |= 0x00000020u;
}
void CCLCMsg_FileCRCCheck::clear_has_file_fraction() {
  _has_bits_[0] &= ~0x00000020u;
}
void CCLCMsg_FileCRCCheck::clear_file_fraction() {
  file_fraction_ = 0;
  clear_has_file_fraction();
}
::google::protobuf::int32 CCLCMsg_FileCRCCheck::file_fraction() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_FileCRCCheck.file_fraction)
  return file_fraction_;
}
void CCLCMsg_FileCRCCheck::set_file_fraction(::google::protobuf::int32 value) {
  set_has_file_fraction();
  file_fraction_ = value;
  // @@protoc_insertion_point(field_set:CCLCMsg_FileCRCCheck.file_fraction)
}

// optional bytes md5 = 6;
bool CCLCMsg_FileCRCCheck::has_md5() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CCLCMsg_FileCRCCheck::set_has_md5() {
  _has_bits_[0] |= 0x00000004u;
}
void CCLCMsg_FileCRCCheck::clear_has_md5() {
  _has_bits_[0] &= ~0x00000004u;
}
void CCLCMsg_FileCRCCheck::clear_md5() {
  md5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_md5();
}
const ::std::string& CCLCMsg_FileCRCCheck::md5() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_FileCRCCheck.md5)
  return md5_.GetNoArena();
}
void CCLCMsg_FileCRCCheck::set_md5(const ::std::string& value) {
  set_has_md5();
  md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CCLCMsg_FileCRCCheck.md5)
}
#if LANG_CXX11
void CCLCMsg_FileCRCCheck::set_md5(::std::string&& value) {
  set_has_md5();
  md5_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CCLCMsg_FileCRCCheck.md5)
}
#endif
void CCLCMsg_FileCRCCheck::set_md5(const char* value) {
  set_has_md5();
  md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CCLCMsg_FileCRCCheck.md5)
}
void CCLCMsg_FileCRCCheck::set_md5(const void* value, size_t size) {
  set_has_md5();
  md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CCLCMsg_FileCRCCheck.md5)
}
::std::string* CCLCMsg_FileCRCCheck::mutable_md5() {
  set_has_md5();
  // @@protoc_insertion_point(field_mutable:CCLCMsg_FileCRCCheck.md5)
  return md5_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CCLCMsg_FileCRCCheck::release_md5() {
  // @@protoc_insertion_point(field_release:CCLCMsg_FileCRCCheck.md5)
  clear_has_md5();
  return md5_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CCLCMsg_FileCRCCheck::set_allocated_md5(::std::string* md5) {
  if (md5 != NULL) {
    set_has_md5();
  } else {
    clear_has_md5();
  }
  md5_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), md5);
  // @@protoc_insertion_point(field_set_allocated:CCLCMsg_FileCRCCheck.md5)
}

// optional uint32 crc = 7;
bool CCLCMsg_FileCRCCheck::has_crc() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CCLCMsg_FileCRCCheck::set_has_crc() {
  _has_bits_[0] |= 0x00000040u;
}
void CCLCMsg_FileCRCCheck::clear_has_crc() {
  _has_bits_[0] &= ~0x00000040u;
}
void CCLCMsg_FileCRCCheck::clear_crc() {
  crc_ = 0u;
  clear_has_crc();
}
::google::protobuf::uint32 CCLCMsg_FileCRCCheck::crc() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_FileCRCCheck.crc)
  return crc_;
}
void CCLCMsg_FileCRCCheck::set_crc(::google::protobuf::uint32 value) {
  set_has_crc();
  crc_ = value;
  // @@protoc_insertion_point(field_set:CCLCMsg_FileCRCCheck.crc)
}

// optional int32 file_hash_type = 8;
bool CCLCMsg_FileCRCCheck::has_file_hash_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CCLCMsg_FileCRCCheck::set_has_file_hash_type() {
  _has_bits_[0] |= 0x00000080u;
}
void CCLCMsg_FileCRCCheck::clear_has_file_hash_type() {
  _has_bits_[0] &= ~0x00000080u;
}
void CCLCMsg_FileCRCCheck::clear_file_hash_type() {
  file_hash_type_ = 0;
  clear_has_file_hash_type();
}
::google::protobuf::int32 CCLCMsg_FileCRCCheck::file_hash_type() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_FileCRCCheck.file_hash_type)
  return file_hash_type_;
}
void CCLCMsg_FileCRCCheck::set_file_hash_type(::google::protobuf::int32 value) {
  set_has_file_hash_type();
  file_hash_type_ = value;
  // @@protoc_insertion_point(field_set:CCLCMsg_FileCRCCheck.file_hash_type)
}

// optional int32 file_len = 9;
bool CCLCMsg_FileCRCCheck::has_file_len() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CCLCMsg_FileCRCCheck::set_has_file_len() {
  _has_bits_[0] |= 0x00000100u;
}
void CCLCMsg_FileCRCCheck::clear_has_file_len() {
  _has_bits_[0] &= ~0x00000100u;
}
void CCLCMsg_FileCRCCheck::clear_file_len() {
  file_len_ = 0;
  clear_has_file_len();
}
::google::protobuf::int32 CCLCMsg_FileCRCCheck::file_len() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_FileCRCCheck.file_len)
  return file_len_;
}
void CCLCMsg_FileCRCCheck::set_file_len(::google::protobuf::int32 value) {
  set_has_file_len();
  file_len_ = value;
  // @@protoc_insertion_point(field_set:CCLCMsg_FileCRCCheck.file_len)
}

// optional int32 pack_file_id = 10;
bool CCLCMsg_FileCRCCheck::has_pack_file_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CCLCMsg_FileCRCCheck::set_has_pack_file_id() {
  _has_bits_[0] |= 0x00000200u;
}
void CCLCMsg_FileCRCCheck::clear_has_pack_file_id() {
  _has_bits_[0] &= ~0x00000200u;
}
void CCLCMsg_FileCRCCheck::clear_pack_file_id() {
  pack_file_id_ = 0;
  clear_has_pack_file_id();
}
::google::protobuf::int32 CCLCMsg_FileCRCCheck::pack_file_id() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_FileCRCCheck.pack_file_id)
  return pack_file_id_;
}
void CCLCMsg_FileCRCCheck::set_pack_file_id(::google::protobuf::int32 value) {
  set_has_pack_file_id();
  pack_file_id_ = value;
  // @@protoc_insertion_point(field_set:CCLCMsg_FileCRCCheck.pack_file_id)
}

// optional int32 pack_file_number = 11;
bool CCLCMsg_FileCRCCheck::has_pack_file_number() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CCLCMsg_FileCRCCheck::set_has_pack_file_number() {
  _has_bits_[0] |= 0x00000400u;
}
void CCLCMsg_FileCRCCheck::clear_has_pack_file_number() {
  _has_bits_[0] &= ~0x00000400u;
}
void CCLCMsg_FileCRCCheck::clear_pack_file_number() {
  pack_file_number_ = 0;
  clear_has_pack_file_number();
}
::google::protobuf::int32 CCLCMsg_FileCRCCheck::pack_file_number() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_FileCRCCheck.pack_file_number)
  return pack_file_number_;
}
void CCLCMsg_FileCRCCheck::set_pack_file_number(::google::protobuf::int32 value) {
  set_has_pack_file_number();
  pack_file_number_ = value;
  // @@protoc_insertion_point(field_set:CCLCMsg_FileCRCCheck.pack_file_number)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCLCMsg_LoadingProgress::kProgressFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCLCMsg_LoadingProgress::CCLCMsg_LoadingProgress()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_netmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CCLCMsg_LoadingProgress)
}
CCLCMsg_LoadingProgress::CCLCMsg_LoadingProgress(const CCLCMsg_LoadingProgress& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  progress_ = from.progress_;
  // @@protoc_insertion_point(copy_constructor:CCLCMsg_LoadingProgress)
}

void CCLCMsg_LoadingProgress::SharedCtor() {
  _cached_size_ = 0;
  progress_ = 0;
}

CCLCMsg_LoadingProgress::~CCLCMsg_LoadingProgress() {
  // @@protoc_insertion_point(destructor:CCLCMsg_LoadingProgress)
  SharedDtor();
}

void CCLCMsg_LoadingProgress::SharedDtor() {
}

void CCLCMsg_LoadingProgress::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCLCMsg_LoadingProgress::descriptor() {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[22].descriptor;
}

const CCLCMsg_LoadingProgress& CCLCMsg_LoadingProgress::default_instance() {
  protobuf_netmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CCLCMsg_LoadingProgress* CCLCMsg_LoadingProgress::New(::google::protobuf::Arena* arena) const {
  CCLCMsg_LoadingProgress* n = new CCLCMsg_LoadingProgress;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CCLCMsg_LoadingProgress::Clear() {
// @@protoc_insertion_point(message_clear_start:CCLCMsg_LoadingProgress)
  progress_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CCLCMsg_LoadingProgress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CCLCMsg_LoadingProgress)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 progress = 1;
      case 1: {
        if (tag == 8u) {
          set_has_progress();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &progress_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CCLCMsg_LoadingProgress)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CCLCMsg_LoadingProgress)
  return false;
#undef DO_
}

void CCLCMsg_LoadingProgress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CCLCMsg_LoadingProgress)
  // optional int32 progress = 1;
  if (has_progress()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->progress(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CCLCMsg_LoadingProgress)
}

::google::protobuf::uint8* CCLCMsg_LoadingProgress::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CCLCMsg_LoadingProgress)
  // optional int32 progress = 1;
  if (has_progress()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->progress(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCLCMsg_LoadingProgress)
  return target;
}

size_t CCLCMsg_LoadingProgress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCLCMsg_LoadingProgress)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional int32 progress = 1;
  if (has_progress()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->progress());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCLCMsg_LoadingProgress::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCLCMsg_LoadingProgress)
  GOOGLE_DCHECK_NE(&from, this);
  const CCLCMsg_LoadingProgress* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CCLCMsg_LoadingProgress>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCLCMsg_LoadingProgress)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCLCMsg_LoadingProgress)
    MergeFrom(*source);
  }
}

void CCLCMsg_LoadingProgress::MergeFrom(const CCLCMsg_LoadingProgress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCLCMsg_LoadingProgress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_progress()) {
    set_progress(from.progress());
  }
}

void CCLCMsg_LoadingProgress::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCLCMsg_LoadingProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCLCMsg_LoadingProgress::CopyFrom(const CCLCMsg_LoadingProgress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCLCMsg_LoadingProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCLCMsg_LoadingProgress::IsInitialized() const {
  return true;
}

void CCLCMsg_LoadingProgress::Swap(CCLCMsg_LoadingProgress* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCLCMsg_LoadingProgress::InternalSwap(CCLCMsg_LoadingProgress* other) {
  std::swap(progress_, other->progress_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CCLCMsg_LoadingProgress::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[22];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CCLCMsg_LoadingProgress

// optional int32 progress = 1;
bool CCLCMsg_LoadingProgress::has_progress() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CCLCMsg_LoadingProgress::set_has_progress() {
  _has_bits_[0] |= 0x00000001u;
}
void CCLCMsg_LoadingProgress::clear_has_progress() {
  _has_bits_[0] &= ~0x00000001u;
}
void CCLCMsg_LoadingProgress::clear_progress() {
  progress_ = 0;
  clear_has_progress();
}
::google::protobuf::int32 CCLCMsg_LoadingProgress::progress() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_LoadingProgress.progress)
  return progress_;
}
void CCLCMsg_LoadingProgress::set_progress(::google::protobuf::int32 value) {
  set_has_progress();
  progress_ = value;
  // @@protoc_insertion_point(field_set:CCLCMsg_LoadingProgress.progress)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCLCMsg_SplitPlayerConnect::kConvarsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCLCMsg_SplitPlayerConnect::CCLCMsg_SplitPlayerConnect()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_netmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CCLCMsg_SplitPlayerConnect)
}
CCLCMsg_SplitPlayerConnect::CCLCMsg_SplitPlayerConnect(const CCLCMsg_SplitPlayerConnect& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_convars()) {
    convars_ = new ::CMsg_CVars(*from.convars_);
  } else {
    convars_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:CCLCMsg_SplitPlayerConnect)
}

void CCLCMsg_SplitPlayerConnect::SharedCtor() {
  _cached_size_ = 0;
  convars_ = NULL;
}

CCLCMsg_SplitPlayerConnect::~CCLCMsg_SplitPlayerConnect() {
  // @@protoc_insertion_point(destructor:CCLCMsg_SplitPlayerConnect)
  SharedDtor();
}

void CCLCMsg_SplitPlayerConnect::SharedDtor() {
  if (this != internal_default_instance()) {
    delete convars_;
  }
}

void CCLCMsg_SplitPlayerConnect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCLCMsg_SplitPlayerConnect::descriptor() {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[23].descriptor;
}

const CCLCMsg_SplitPlayerConnect& CCLCMsg_SplitPlayerConnect::default_instance() {
  protobuf_netmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CCLCMsg_SplitPlayerConnect* CCLCMsg_SplitPlayerConnect::New(::google::protobuf::Arena* arena) const {
  CCLCMsg_SplitPlayerConnect* n = new CCLCMsg_SplitPlayerConnect;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CCLCMsg_SplitPlayerConnect::Clear() {
// @@protoc_insertion_point(message_clear_start:CCLCMsg_SplitPlayerConnect)
  if (has_convars()) {
    GOOGLE_DCHECK(convars_ != NULL);
    convars_->::CMsg_CVars::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CCLCMsg_SplitPlayerConnect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CCLCMsg_SplitPlayerConnect)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsg_CVars convars = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_convars()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CCLCMsg_SplitPlayerConnect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CCLCMsg_SplitPlayerConnect)
  return false;
#undef DO_
}

void CCLCMsg_SplitPlayerConnect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CCLCMsg_SplitPlayerConnect)
  // optional .CMsg_CVars convars = 1;
  if (has_convars()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->convars_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CCLCMsg_SplitPlayerConnect)
}

::google::protobuf::uint8* CCLCMsg_SplitPlayerConnect::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CCLCMsg_SplitPlayerConnect)
  // optional .CMsg_CVars convars = 1;
  if (has_convars()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->convars_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCLCMsg_SplitPlayerConnect)
  return target;
}

size_t CCLCMsg_SplitPlayerConnect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCLCMsg_SplitPlayerConnect)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional .CMsg_CVars convars = 1;
  if (has_convars()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->convars_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCLCMsg_SplitPlayerConnect::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCLCMsg_SplitPlayerConnect)
  GOOGLE_DCHECK_NE(&from, this);
  const CCLCMsg_SplitPlayerConnect* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CCLCMsg_SplitPlayerConnect>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCLCMsg_SplitPlayerConnect)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCLCMsg_SplitPlayerConnect)
    MergeFrom(*source);
  }
}

void CCLCMsg_SplitPlayerConnect::MergeFrom(const CCLCMsg_SplitPlayerConnect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCLCMsg_SplitPlayerConnect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_convars()) {
    mutable_convars()->::CMsg_CVars::MergeFrom(from.convars());
  }
}

void CCLCMsg_SplitPlayerConnect::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCLCMsg_SplitPlayerConnect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCLCMsg_SplitPlayerConnect::CopyFrom(const CCLCMsg_SplitPlayerConnect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCLCMsg_SplitPlayerConnect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCLCMsg_SplitPlayerConnect::IsInitialized() const {
  return true;
}

void CCLCMsg_SplitPlayerConnect::Swap(CCLCMsg_SplitPlayerConnect* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCLCMsg_SplitPlayerConnect::InternalSwap(CCLCMsg_SplitPlayerConnect* other) {
  std::swap(convars_, other->convars_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CCLCMsg_SplitPlayerConnect::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[23];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CCLCMsg_SplitPlayerConnect

// optional .CMsg_CVars convars = 1;
bool CCLCMsg_SplitPlayerConnect::has_convars() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CCLCMsg_SplitPlayerConnect::set_has_convars() {
  _has_bits_[0] |= 0x00000001u;
}
void CCLCMsg_SplitPlayerConnect::clear_has_convars() {
  _has_bits_[0] &= ~0x00000001u;
}
void CCLCMsg_SplitPlayerConnect::clear_convars() {
  if (convars_ != NULL) convars_->::CMsg_CVars::Clear();
  clear_has_convars();
}
const ::CMsg_CVars& CCLCMsg_SplitPlayerConnect::convars() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_SplitPlayerConnect.convars)
  return convars_ != NULL ? *convars_
                         : *::CMsg_CVars::internal_default_instance();
}
::CMsg_CVars* CCLCMsg_SplitPlayerConnect::mutable_convars() {
  set_has_convars();
  if (convars_ == NULL) {
    convars_ = new ::CMsg_CVars;
  }
  // @@protoc_insertion_point(field_mutable:CCLCMsg_SplitPlayerConnect.convars)
  return convars_;
}
::CMsg_CVars* CCLCMsg_SplitPlayerConnect::release_convars() {
  // @@protoc_insertion_point(field_release:CCLCMsg_SplitPlayerConnect.convars)
  clear_has_convars();
  ::CMsg_CVars* temp = convars_;
  convars_ = NULL;
  return temp;
}
void CCLCMsg_SplitPlayerConnect::set_allocated_convars(::CMsg_CVars* convars) {
  delete convars_;
  convars_ = convars;
  if (convars) {
    set_has_convars();
  } else {
    clear_has_convars();
  }
  // @@protoc_insertion_point(field_set_allocated:CCLCMsg_SplitPlayerConnect.convars)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCLCMsg_CmdKeyValues::kKeyvaluesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCLCMsg_CmdKeyValues::CCLCMsg_CmdKeyValues()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_netmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CCLCMsg_CmdKeyValues)
}
CCLCMsg_CmdKeyValues::CCLCMsg_CmdKeyValues(const CCLCMsg_CmdKeyValues& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  keyvalues_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_keyvalues()) {
    keyvalues_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.keyvalues_);
  }
  // @@protoc_insertion_point(copy_constructor:CCLCMsg_CmdKeyValues)
}

void CCLCMsg_CmdKeyValues::SharedCtor() {
  _cached_size_ = 0;
  keyvalues_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CCLCMsg_CmdKeyValues::~CCLCMsg_CmdKeyValues() {
  // @@protoc_insertion_point(destructor:CCLCMsg_CmdKeyValues)
  SharedDtor();
}

void CCLCMsg_CmdKeyValues::SharedDtor() {
  keyvalues_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CCLCMsg_CmdKeyValues::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCLCMsg_CmdKeyValues::descriptor() {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[24].descriptor;
}

const CCLCMsg_CmdKeyValues& CCLCMsg_CmdKeyValues::default_instance() {
  protobuf_netmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CCLCMsg_CmdKeyValues* CCLCMsg_CmdKeyValues::New(::google::protobuf::Arena* arena) const {
  CCLCMsg_CmdKeyValues* n = new CCLCMsg_CmdKeyValues;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CCLCMsg_CmdKeyValues::Clear() {
// @@protoc_insertion_point(message_clear_start:CCLCMsg_CmdKeyValues)
  if (has_keyvalues()) {
    GOOGLE_DCHECK(!keyvalues_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*keyvalues_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CCLCMsg_CmdKeyValues::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CCLCMsg_CmdKeyValues)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes keyvalues = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_keyvalues()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CCLCMsg_CmdKeyValues)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CCLCMsg_CmdKeyValues)
  return false;
#undef DO_
}

void CCLCMsg_CmdKeyValues::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CCLCMsg_CmdKeyValues)
  // optional bytes keyvalues = 1;
  if (has_keyvalues()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->keyvalues(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CCLCMsg_CmdKeyValues)
}

::google::protobuf::uint8* CCLCMsg_CmdKeyValues::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CCLCMsg_CmdKeyValues)
  // optional bytes keyvalues = 1;
  if (has_keyvalues()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->keyvalues(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCLCMsg_CmdKeyValues)
  return target;
}

size_t CCLCMsg_CmdKeyValues::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCLCMsg_CmdKeyValues)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional bytes keyvalues = 1;
  if (has_keyvalues()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->keyvalues());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCLCMsg_CmdKeyValues::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCLCMsg_CmdKeyValues)
  GOOGLE_DCHECK_NE(&from, this);
  const CCLCMsg_CmdKeyValues* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CCLCMsg_CmdKeyValues>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCLCMsg_CmdKeyValues)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCLCMsg_CmdKeyValues)
    MergeFrom(*source);
  }
}

void CCLCMsg_CmdKeyValues::MergeFrom(const CCLCMsg_CmdKeyValues& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCLCMsg_CmdKeyValues)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_keyvalues()) {
    set_has_keyvalues();
    keyvalues_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.keyvalues_);
  }
}

void CCLCMsg_CmdKeyValues::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCLCMsg_CmdKeyValues)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCLCMsg_CmdKeyValues::CopyFrom(const CCLCMsg_CmdKeyValues& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCLCMsg_CmdKeyValues)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCLCMsg_CmdKeyValues::IsInitialized() const {
  return true;
}

void CCLCMsg_CmdKeyValues::Swap(CCLCMsg_CmdKeyValues* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCLCMsg_CmdKeyValues::InternalSwap(CCLCMsg_CmdKeyValues* other) {
  keyvalues_.Swap(&other->keyvalues_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CCLCMsg_CmdKeyValues::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[24];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CCLCMsg_CmdKeyValues

// optional bytes keyvalues = 1;
bool CCLCMsg_CmdKeyValues::has_keyvalues() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CCLCMsg_CmdKeyValues::set_has_keyvalues() {
  _has_bits_[0] |= 0x00000001u;
}
void CCLCMsg_CmdKeyValues::clear_has_keyvalues() {
  _has_bits_[0] &= ~0x00000001u;
}
void CCLCMsg_CmdKeyValues::clear_keyvalues() {
  keyvalues_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_keyvalues();
}
const ::std::string& CCLCMsg_CmdKeyValues::keyvalues() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_CmdKeyValues.keyvalues)
  return keyvalues_.GetNoArena();
}
void CCLCMsg_CmdKeyValues::set_keyvalues(const ::std::string& value) {
  set_has_keyvalues();
  keyvalues_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CCLCMsg_CmdKeyValues.keyvalues)
}
#if LANG_CXX11
void CCLCMsg_CmdKeyValues::set_keyvalues(::std::string&& value) {
  set_has_keyvalues();
  keyvalues_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CCLCMsg_CmdKeyValues.keyvalues)
}
#endif
void CCLCMsg_CmdKeyValues::set_keyvalues(const char* value) {
  set_has_keyvalues();
  keyvalues_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CCLCMsg_CmdKeyValues.keyvalues)
}
void CCLCMsg_CmdKeyValues::set_keyvalues(const void* value, size_t size) {
  set_has_keyvalues();
  keyvalues_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CCLCMsg_CmdKeyValues.keyvalues)
}
::std::string* CCLCMsg_CmdKeyValues::mutable_keyvalues() {
  set_has_keyvalues();
  // @@protoc_insertion_point(field_mutable:CCLCMsg_CmdKeyValues.keyvalues)
  return keyvalues_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CCLCMsg_CmdKeyValues::release_keyvalues() {
  // @@protoc_insertion_point(field_release:CCLCMsg_CmdKeyValues.keyvalues)
  clear_has_keyvalues();
  return keyvalues_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CCLCMsg_CmdKeyValues::set_allocated_keyvalues(::std::string* keyvalues) {
  if (keyvalues != NULL) {
    set_has_keyvalues();
  } else {
    clear_has_keyvalues();
  }
  keyvalues_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), keyvalues);
  // @@protoc_insertion_point(field_set_allocated:CCLCMsg_CmdKeyValues.keyvalues)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSVCMsg_ServerInfo::kProtocolFieldNumber;
const int CSVCMsg_ServerInfo::kServerCountFieldNumber;
const int CSVCMsg_ServerInfo::kIsDedicatedFieldNumber;
const int CSVCMsg_ServerInfo::kIsOfficialValveServerFieldNumber;
const int CSVCMsg_ServerInfo::kIsHltvFieldNumber;
const int CSVCMsg_ServerInfo::kIsReplayFieldNumber;
const int CSVCMsg_ServerInfo::kIsRedirectingToProxyRelayFieldNumber;
const int CSVCMsg_ServerInfo::kCOsFieldNumber;
const int CSVCMsg_ServerInfo::kMapCrcFieldNumber;
const int CSVCMsg_ServerInfo::kClientCrcFieldNumber;
const int CSVCMsg_ServerInfo::kStringTableCrcFieldNumber;
const int CSVCMsg_ServerInfo::kMaxClientsFieldNumber;
const int CSVCMsg_ServerInfo::kMaxClassesFieldNumber;
const int CSVCMsg_ServerInfo::kPlayerSlotFieldNumber;
const int CSVCMsg_ServerInfo::kTickIntervalFieldNumber;
const int CSVCMsg_ServerInfo::kGameDirFieldNumber;
const int CSVCMsg_ServerInfo::kMapNameFieldNumber;
const int CSVCMsg_ServerInfo::kMapGroupNameFieldNumber;
const int CSVCMsg_ServerInfo::kSkyNameFieldNumber;
const int CSVCMsg_ServerInfo::kHostNameFieldNumber;
const int CSVCMsg_ServerInfo::kPublicIpFieldNumber;
const int CSVCMsg_ServerInfo::kUgcMapIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSVCMsg_ServerInfo::CSVCMsg_ServerInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_netmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSVCMsg_ServerInfo)
}
CSVCMsg_ServerInfo::CSVCMsg_ServerInfo(const CSVCMsg_ServerInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  game_dir_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_game_dir()) {
    game_dir_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_dir_);
  }
  map_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_map_name()) {
    map_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_name_);
  }
  map_group_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_map_group_name()) {
    map_group_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_group_name_);
  }
  sky_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sky_name()) {
    sky_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sky_name_);
  }
  host_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_host_name()) {
    host_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_name_);
  }
  ::memcpy(&protocol_, &from.protocol_,
    reinterpret_cast<char*>(&public_ip_) -
    reinterpret_cast<char*>(&protocol_) + sizeof(public_ip_));
  // @@protoc_insertion_point(copy_constructor:CSVCMsg_ServerInfo)
}

void CSVCMsg_ServerInfo::SharedCtor() {
  _cached_size_ = 0;
  game_dir_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  map_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  map_group_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sky_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  host_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&protocol_, 0, reinterpret_cast<char*>(&public_ip_) -
    reinterpret_cast<char*>(&protocol_) + sizeof(public_ip_));
}

CSVCMsg_ServerInfo::~CSVCMsg_ServerInfo() {
  // @@protoc_insertion_point(destructor:CSVCMsg_ServerInfo)
  SharedDtor();
}

void CSVCMsg_ServerInfo::SharedDtor() {
  game_dir_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  map_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  map_group_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sky_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  host_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CSVCMsg_ServerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSVCMsg_ServerInfo::descriptor() {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[25].descriptor;
}

const CSVCMsg_ServerInfo& CSVCMsg_ServerInfo::default_instance() {
  protobuf_netmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CSVCMsg_ServerInfo* CSVCMsg_ServerInfo::New(::google::protobuf::Arena* arena) const {
  CSVCMsg_ServerInfo* n = new CSVCMsg_ServerInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSVCMsg_ServerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CSVCMsg_ServerInfo)
  if (_has_bits_[0 / 32] & 31u) {
    if (has_game_dir()) {
      GOOGLE_DCHECK(!game_dir_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*game_dir_.UnsafeRawStringPointer())->clear();
    }
    if (has_map_name()) {
      GOOGLE_DCHECK(!map_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*map_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_map_group_name()) {
      GOOGLE_DCHECK(!map_group_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*map_group_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_sky_name()) {
      GOOGLE_DCHECK(!sky_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*sky_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_host_name()) {
      GOOGLE_DCHECK(!host_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*host_name_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 224u) {
    ::memset(&protocol_, 0, reinterpret_cast<char*>(&is_dedicated_) -
      reinterpret_cast<char*>(&protocol_) + sizeof(is_dedicated_));
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&is_official_valve_server_, 0, reinterpret_cast<char*>(&string_table_crc_) -
      reinterpret_cast<char*>(&is_official_valve_server_) + sizeof(string_table_crc_));
  }
  if (_has_bits_[16 / 32] & 4128768u) {
    ::memset(&max_clients_, 0, reinterpret_cast<char*>(&public_ip_) -
      reinterpret_cast<char*>(&max_clients_) + sizeof(public_ip_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSVCMsg_ServerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSVCMsg_ServerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 protocol = 1;
      case 1: {
        if (tag == 8u) {
          set_has_protocol();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &protocol_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 server_count = 2;
      case 2: {
        if (tag == 16u) {
          set_has_server_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_dedicated = 3;
      case 3: {
        if (tag == 24u) {
          set_has_is_dedicated();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_dedicated_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_official_valve_server = 4;
      case 4: {
        if (tag == 32u) {
          set_has_is_official_valve_server();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_official_valve_server_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_hltv = 5;
      case 5: {
        if (tag == 40u) {
          set_has_is_hltv();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_hltv_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_replay = 6;
      case 6: {
        if (tag == 48u) {
          set_has_is_replay();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_replay_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 c_os = 7;
      case 7: {
        if (tag == 56u) {
          set_has_c_os();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &c_os_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 map_crc = 8;
      case 8: {
        if (tag == 69u) {
          set_has_map_crc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &map_crc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 client_crc = 9;
      case 9: {
        if (tag == 77u) {
          set_has_client_crc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &client_crc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 string_table_crc = 10;
      case 10: {
        if (tag == 85u) {
          set_has_string_table_crc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &string_table_crc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_clients = 11;
      case 11: {
        if (tag == 88u) {
          set_has_max_clients();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_clients_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_classes = 12;
      case 12: {
        if (tag == 96u) {
          set_has_max_classes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_classes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 player_slot = 13;
      case 13: {
        if (tag == 104u) {
          set_has_player_slot();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_slot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float tick_interval = 14;
      case 14: {
        if (tag == 117u) {
          set_has_tick_interval();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tick_interval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string game_dir = 15;
      case 15: {
        if (tag == 122u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_game_dir()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->game_dir().data(), this->game_dir().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CSVCMsg_ServerInfo.game_dir");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string map_name = 16;
      case 16: {
        if (tag == 130u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_map_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->map_name().data(), this->map_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CSVCMsg_ServerInfo.map_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string map_group_name = 17;
      case 17: {
        if (tag == 138u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_map_group_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->map_group_name().data(), this->map_group_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CSVCMsg_ServerInfo.map_group_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string sky_name = 18;
      case 18: {
        if (tag == 146u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sky_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sky_name().data(), this->sky_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CSVCMsg_ServerInfo.sky_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string host_name = 19;
      case 19: {
        if (tag == 154u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->host_name().data(), this->host_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CSVCMsg_ServerInfo.host_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 public_ip = 20;
      case 20: {
        if (tag == 160u) {
          set_has_public_ip();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &public_ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_redirecting_to_proxy_relay = 21;
      case 21: {
        if (tag == 168u) {
          set_has_is_redirecting_to_proxy_relay();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_redirecting_to_proxy_relay_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 ugc_map_id = 22;
      case 22: {
        if (tag == 176u) {
          set_has_ugc_map_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ugc_map_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSVCMsg_ServerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSVCMsg_ServerInfo)
  return false;
#undef DO_
}

void CSVCMsg_ServerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSVCMsg_ServerInfo)
  // optional int32 protocol = 1;
  if (has_protocol()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->protocol(), output);
  }

  // optional int32 server_count = 2;
  if (has_server_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->server_count(), output);
  }

  // optional bool is_dedicated = 3;
  if (has_is_dedicated()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_dedicated(), output);
  }

  // optional bool is_official_valve_server = 4;
  if (has_is_official_valve_server()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_official_valve_server(), output);
  }

  // optional bool is_hltv = 5;
  if (has_is_hltv()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_hltv(), output);
  }

  // optional bool is_replay = 6;
  if (has_is_replay()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_replay(), output);
  }

  // optional int32 c_os = 7;
  if (has_c_os()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->c_os(), output);
  }

  // optional fixed32 map_crc = 8;
  if (has_map_crc()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(8, this->map_crc(), output);
  }

  // optional fixed32 client_crc = 9;
  if (has_client_crc()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(9, this->client_crc(), output);
  }

  // optional fixed32 string_table_crc = 10;
  if (has_string_table_crc()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(10, this->string_table_crc(), output);
  }

  // optional int32 max_clients = 11;
  if (has_max_clients()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->max_clients(), output);
  }

  // optional int32 max_classes = 12;
  if (has_max_classes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->max_classes(), output);
  }

  // optional int32 player_slot = 13;
  if (has_player_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->player_slot(), output);
  }

  // optional float tick_interval = 14;
  if (has_tick_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->tick_interval(), output);
  }

  // optional string game_dir = 15;
  if (has_game_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_dir().data(), this->game_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSVCMsg_ServerInfo.game_dir");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->game_dir(), output);
  }

  // optional string map_name = 16;
  if (has_map_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->map_name().data(), this->map_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSVCMsg_ServerInfo.map_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->map_name(), output);
  }

  // optional string map_group_name = 17;
  if (has_map_group_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->map_group_name().data(), this->map_group_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSVCMsg_ServerInfo.map_group_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->map_group_name(), output);
  }

  // optional string sky_name = 18;
  if (has_sky_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sky_name().data(), this->sky_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSVCMsg_ServerInfo.sky_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->sky_name(), output);
  }

  // optional string host_name = 19;
  if (has_host_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->host_name().data(), this->host_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSVCMsg_ServerInfo.host_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->host_name(), output);
  }

  // optional uint32 public_ip = 20;
  if (has_public_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->public_ip(), output);
  }

  // optional bool is_redirecting_to_proxy_relay = 21;
  if (has_is_redirecting_to_proxy_relay()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->is_redirecting_to_proxy_relay(), output);
  }

  // optional uint64 ugc_map_id = 22;
  if (has_ugc_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(22, this->ugc_map_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSVCMsg_ServerInfo)
}

::google::protobuf::uint8* CSVCMsg_ServerInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSVCMsg_ServerInfo)
  // optional int32 protocol = 1;
  if (has_protocol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->protocol(), target);
  }

  // optional int32 server_count = 2;
  if (has_server_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->server_count(), target);
  }

  // optional bool is_dedicated = 3;
  if (has_is_dedicated()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_dedicated(), target);
  }

  // optional bool is_official_valve_server = 4;
  if (has_is_official_valve_server()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_official_valve_server(), target);
  }

  // optional bool is_hltv = 5;
  if (has_is_hltv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_hltv(), target);
  }

  // optional bool is_replay = 6;
  if (has_is_replay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_replay(), target);
  }

  // optional int32 c_os = 7;
  if (has_c_os()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->c_os(), target);
  }

  // optional fixed32 map_crc = 8;
  if (has_map_crc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(8, this->map_crc(), target);
  }

  // optional fixed32 client_crc = 9;
  if (has_client_crc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(9, this->client_crc(), target);
  }

  // optional fixed32 string_table_crc = 10;
  if (has_string_table_crc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(10, this->string_table_crc(), target);
  }

  // optional int32 max_clients = 11;
  if (has_max_clients()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->max_clients(), target);
  }

  // optional int32 max_classes = 12;
  if (has_max_classes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->max_classes(), target);
  }

  // optional int32 player_slot = 13;
  if (has_player_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->player_slot(), target);
  }

  // optional float tick_interval = 14;
  if (has_tick_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->tick_interval(), target);
  }

  // optional string game_dir = 15;
  if (has_game_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_dir().data(), this->game_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSVCMsg_ServerInfo.game_dir");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->game_dir(), target);
  }

  // optional string map_name = 16;
  if (has_map_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->map_name().data(), this->map_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSVCMsg_ServerInfo.map_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->map_name(), target);
  }

  // optional string map_group_name = 17;
  if (has_map_group_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->map_group_name().data(), this->map_group_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSVCMsg_ServerInfo.map_group_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->map_group_name(), target);
  }

  // optional string sky_name = 18;
  if (has_sky_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sky_name().data(), this->sky_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSVCMsg_ServerInfo.sky_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->sky_name(), target);
  }

  // optional string host_name = 19;
  if (has_host_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->host_name().data(), this->host_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSVCMsg_ServerInfo.host_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->host_name(), target);
  }

  // optional uint32 public_ip = 20;
  if (has_public_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->public_ip(), target);
  }

  // optional bool is_redirecting_to_proxy_relay = 21;
  if (has_is_redirecting_to_proxy_relay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->is_redirecting_to_proxy_relay(), target);
  }

  // optional uint64 ugc_map_id = 22;
  if (has_ugc_map_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(22, this->ugc_map_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSVCMsg_ServerInfo)
  return target;
}

size_t CSVCMsg_ServerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSVCMsg_ServerInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string game_dir = 15;
    if (has_game_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->game_dir());
    }

    // optional string map_name = 16;
    if (has_map_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->map_name());
    }

    // optional string map_group_name = 17;
    if (has_map_group_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->map_group_name());
    }

    // optional string sky_name = 18;
    if (has_sky_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sky_name());
    }

    // optional string host_name = 19;
    if (has_host_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host_name());
    }

    // optional int32 protocol = 1;
    if (has_protocol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->protocol());
    }

    // optional int32 server_count = 2;
    if (has_server_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->server_count());
    }

    // optional bool is_dedicated = 3;
    if (has_is_dedicated()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional bool is_official_valve_server = 4;
    if (has_is_official_valve_server()) {
      total_size += 1 + 1;
    }

    // optional bool is_hltv = 5;
    if (has_is_hltv()) {
      total_size += 1 + 1;
    }

    // optional bool is_replay = 6;
    if (has_is_replay()) {
      total_size += 1 + 1;
    }

    // optional bool is_redirecting_to_proxy_relay = 21;
    if (has_is_redirecting_to_proxy_relay()) {
      total_size += 2 + 1;
    }

    // optional int32 c_os = 7;
    if (has_c_os()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->c_os());
    }

    // optional fixed32 map_crc = 8;
    if (has_map_crc()) {
      total_size += 1 + 4;
    }

    // optional fixed32 client_crc = 9;
    if (has_client_crc()) {
      total_size += 1 + 4;
    }

    // optional fixed32 string_table_crc = 10;
    if (has_string_table_crc()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[16 / 32] & 4128768u) {
    // optional int32 max_clients = 11;
    if (has_max_clients()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_clients());
    }

    // optional int32 max_classes = 12;
    if (has_max_classes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_classes());
    }

    // optional int32 player_slot = 13;
    if (has_player_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_slot());
    }

    // optional float tick_interval = 14;
    if (has_tick_interval()) {
      total_size += 1 + 4;
    }

    // optional uint64 ugc_map_id = 22;
    if (has_ugc_map_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ugc_map_id());
    }

    // optional uint32 public_ip = 20;
    if (has_public_ip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->public_ip());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSVCMsg_ServerInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSVCMsg_ServerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CSVCMsg_ServerInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSVCMsg_ServerInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSVCMsg_ServerInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSVCMsg_ServerInfo)
    MergeFrom(*source);
  }
}

void CSVCMsg_ServerInfo::MergeFrom(const CSVCMsg_ServerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSVCMsg_ServerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 255u) {
    if (from.has_game_dir()) {
      set_has_game_dir();
      game_dir_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_dir_);
    }
    if (from.has_map_name()) {
      set_has_map_name();
      map_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_name_);
    }
    if (from.has_map_group_name()) {
      set_has_map_group_name();
      map_group_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_group_name_);
    }
    if (from.has_sky_name()) {
      set_has_sky_name();
      sky_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sky_name_);
    }
    if (from.has_host_name()) {
      set_has_host_name();
      host_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_name_);
    }
    if (from.has_protocol()) {
      set_protocol(from.protocol());
    }
    if (from.has_server_count()) {
      set_server_count(from.server_count());
    }
    if (from.has_is_dedicated()) {
      set_is_dedicated(from.is_dedicated());
    }
  }
  if (from._has_bits_[8 / 32] & 65280u) {
    if (from.has_is_official_valve_server()) {
      set_is_official_valve_server(from.is_official_valve_server());
    }
    if (from.has_is_hltv()) {
      set_is_hltv(from.is_hltv());
    }
    if (from.has_is_replay()) {
      set_is_replay(from.is_replay());
    }
    if (from.has_is_redirecting_to_proxy_relay()) {
      set_is_redirecting_to_proxy_relay(from.is_redirecting_to_proxy_relay());
    }
    if (from.has_c_os()) {
      set_c_os(from.c_os());
    }
    if (from.has_map_crc()) {
      set_map_crc(from.map_crc());
    }
    if (from.has_client_crc()) {
      set_client_crc(from.client_crc());
    }
    if (from.has_string_table_crc()) {
      set_string_table_crc(from.string_table_crc());
    }
  }
  if (from._has_bits_[16 / 32] & 4128768u) {
    if (from.has_max_clients()) {
      set_max_clients(from.max_clients());
    }
    if (from.has_max_classes()) {
      set_max_classes(from.max_classes());
    }
    if (from.has_player_slot()) {
      set_player_slot(from.player_slot());
    }
    if (from.has_tick_interval()) {
      set_tick_interval(from.tick_interval());
    }
    if (from.has_ugc_map_id()) {
      set_ugc_map_id(from.ugc_map_id());
    }
    if (from.has_public_ip()) {
      set_public_ip(from.public_ip());
    }
  }
}

void CSVCMsg_ServerInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSVCMsg_ServerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSVCMsg_ServerInfo::CopyFrom(const CSVCMsg_ServerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSVCMsg_ServerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSVCMsg_ServerInfo::IsInitialized() const {
  return true;
}

void CSVCMsg_ServerInfo::Swap(CSVCMsg_ServerInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSVCMsg_ServerInfo::InternalSwap(CSVCMsg_ServerInfo* other) {
  game_dir_.Swap(&other->game_dir_);
  map_name_.Swap(&other->map_name_);
  map_group_name_.Swap(&other->map_group_name_);
  sky_name_.Swap(&other->sky_name_);
  host_name_.Swap(&other->host_name_);
  std::swap(protocol_, other->protocol_);
  std::swap(server_count_, other->server_count_);
  std::swap(is_dedicated_, other->is_dedicated_);
  std::swap(is_official_valve_server_, other->is_official_valve_server_);
  std::swap(is_hltv_, other->is_hltv_);
  std::swap(is_replay_, other->is_replay_);
  std::swap(is_redirecting_to_proxy_relay_, other->is_redirecting_to_proxy_relay_);
  std::swap(c_os_, other->c_os_);
  std::swap(map_crc_, other->map_crc_);
  std::swap(client_crc_, other->client_crc_);
  std::swap(string_table_crc_, other->string_table_crc_);
  std::swap(max_clients_, other->max_clients_);
  std::swap(max_classes_, other->max_classes_);
  std::swap(player_slot_, other->player_slot_);
  std::swap(tick_interval_, other->tick_interval_);
  std::swap(ugc_map_id_, other->ugc_map_id_);
  std::swap(public_ip_, other->public_ip_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSVCMsg_ServerInfo::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[25];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CSVCMsg_ServerInfo

// optional int32 protocol = 1;
bool CSVCMsg_ServerInfo::has_protocol() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CSVCMsg_ServerInfo::set_has_protocol() {
  _has_bits_[0] |= 0x00000020u;
}
void CSVCMsg_ServerInfo::clear_has_protocol() {
  _has_bits_[0] &= ~0x00000020u;
}
void CSVCMsg_ServerInfo::clear_protocol() {
  protocol_ = 0;
  clear_has_protocol();
}
::google::protobuf::int32 CSVCMsg_ServerInfo::protocol() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_ServerInfo.protocol)
  return protocol_;
}
void CSVCMsg_ServerInfo::set_protocol(::google::protobuf::int32 value) {
  set_has_protocol();
  protocol_ = value;
  // @@protoc_insertion_point(field_set:CSVCMsg_ServerInfo.protocol)
}

// optional int32 server_count = 2;
bool CSVCMsg_ServerInfo::has_server_count() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CSVCMsg_ServerInfo::set_has_server_count() {
  _has_bits_[0] |= 0x00000040u;
}
void CSVCMsg_ServerInfo::clear_has_server_count() {
  _has_bits_[0] &= ~0x00000040u;
}
void CSVCMsg_ServerInfo::clear_server_count() {
  server_count_ = 0;
  clear_has_server_count();
}
::google::protobuf::int32 CSVCMsg_ServerInfo::server_count() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_ServerInfo.server_count)
  return server_count_;
}
void CSVCMsg_ServerInfo::set_server_count(::google::protobuf::int32 value) {
  set_has_server_count();
  server_count_ = value;
  // @@protoc_insertion_point(field_set:CSVCMsg_ServerInfo.server_count)
}

// optional bool is_dedicated = 3;
bool CSVCMsg_ServerInfo::has_is_dedicated() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CSVCMsg_ServerInfo::set_has_is_dedicated() {
  _has_bits_[0] |= 0x00000080u;
}
void CSVCMsg_ServerInfo::clear_has_is_dedicated() {
  _has_bits_[0] &= ~0x00000080u;
}
void CSVCMsg_ServerInfo::clear_is_dedicated() {
  is_dedicated_ = false;
  clear_has_is_dedicated();
}
bool CSVCMsg_ServerInfo::is_dedicated() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_ServerInfo.is_dedicated)
  return is_dedicated_;
}
void CSVCMsg_ServerInfo::set_is_dedicated(bool value) {
  set_has_is_dedicated();
  is_dedicated_ = value;
  // @@protoc_insertion_point(field_set:CSVCMsg_ServerInfo.is_dedicated)
}

// optional bool is_official_valve_server = 4;
bool CSVCMsg_ServerInfo::has_is_official_valve_server() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CSVCMsg_ServerInfo::set_has_is_official_valve_server() {
  _has_bits_[0] |= 0x00000100u;
}
void CSVCMsg_ServerInfo::clear_has_is_official_valve_server() {
  _has_bits_[0] &= ~0x00000100u;
}
void CSVCMsg_ServerInfo::clear_is_official_valve_server() {
  is_official_valve_server_ = false;
  clear_has_is_official_valve_server();
}
bool CSVCMsg_ServerInfo::is_official_valve_server() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_ServerInfo.is_official_valve_server)
  return is_official_valve_server_;
}
void CSVCMsg_ServerInfo::set_is_official_valve_server(bool value) {
  set_has_is_official_valve_server();
  is_official_valve_server_ = value;
  // @@protoc_insertion_point(field_set:CSVCMsg_ServerInfo.is_official_valve_server)
}

// optional bool is_hltv = 5;
bool CSVCMsg_ServerInfo::has_is_hltv() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CSVCMsg_ServerInfo::set_has_is_hltv() {
  _has_bits_[0] |= 0x00000200u;
}
void CSVCMsg_ServerInfo::clear_has_is_hltv() {
  _has_bits_[0] &= ~0x00000200u;
}
void CSVCMsg_ServerInfo::clear_is_hltv() {
  is_hltv_ = false;
  clear_has_is_hltv();
}
bool CSVCMsg_ServerInfo::is_hltv() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_ServerInfo.is_hltv)
  return is_hltv_;
}
void CSVCMsg_ServerInfo::set_is_hltv(bool value) {
  set_has_is_hltv();
  is_hltv_ = value;
  // @@protoc_insertion_point(field_set:CSVCMsg_ServerInfo.is_hltv)
}

// optional bool is_replay = 6;
bool CSVCMsg_ServerInfo::has_is_replay() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CSVCMsg_ServerInfo::set_has_is_replay() {
  _has_bits_[0] |= 0x00000400u;
}
void CSVCMsg_ServerInfo::clear_has_is_replay() {
  _has_bits_[0] &= ~0x00000400u;
}
void CSVCMsg_ServerInfo::clear_is_replay() {
  is_replay_ = false;
  clear_has_is_replay();
}
bool CSVCMsg_ServerInfo::is_replay() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_ServerInfo.is_replay)
  return is_replay_;
}
void CSVCMsg_ServerInfo::set_is_replay(bool value) {
  set_has_is_replay();
  is_replay_ = value;
  // @@protoc_insertion_point(field_set:CSVCMsg_ServerInfo.is_replay)
}

// optional bool is_redirecting_to_proxy_relay = 21;
bool CSVCMsg_ServerInfo::has_is_redirecting_to_proxy_relay() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void CSVCMsg_ServerInfo::set_has_is_redirecting_to_proxy_relay() {
  _has_bits_[0] |= 0x00000800u;
}
void CSVCMsg_ServerInfo::clear_has_is_redirecting_to_proxy_relay() {
  _has_bits_[0] &= ~0x00000800u;
}
void CSVCMsg_ServerInfo::clear_is_redirecting_to_proxy_relay() {
  is_redirecting_to_proxy_relay_ = false;
  clear_has_is_redirecting_to_proxy_relay();
}
bool CSVCMsg_ServerInfo::is_redirecting_to_proxy_relay() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_ServerInfo.is_redirecting_to_proxy_relay)
  return is_redirecting_to_proxy_relay_;
}
void CSVCMsg_ServerInfo::set_is_redirecting_to_proxy_relay(bool value) {
  set_has_is_redirecting_to_proxy_relay();
  is_redirecting_to_proxy_relay_ = value;
  // @@protoc_insertion_point(field_set:CSVCMsg_ServerInfo.is_redirecting_to_proxy_relay)
}

// optional int32 c_os = 7;
bool CSVCMsg_ServerInfo::has_c_os() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void CSVCMsg_ServerInfo::set_has_c_os() {
  _has_bits_[0] |= 0x00001000u;
}
void CSVCMsg_ServerInfo::clear_has_c_os() {
  _has_bits_[0] &= ~0x00001000u;
}
void CSVCMsg_ServerInfo::clear_c_os() {
  c_os_ = 0;
  clear_has_c_os();
}
::google::protobuf::int32 CSVCMsg_ServerInfo::c_os() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_ServerInfo.c_os)
  return c_os_;
}
void CSVCMsg_ServerInfo::set_c_os(::google::protobuf::int32 value) {
  set_has_c_os();
  c_os_ = value;
  // @@protoc_insertion_point(field_set:CSVCMsg_ServerInfo.c_os)
}

// optional fixed32 map_crc = 8;
bool CSVCMsg_ServerInfo::has_map_crc() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void CSVCMsg_ServerInfo::set_has_map_crc() {
  _has_bits_[0] |= 0x00002000u;
}
void CSVCMsg_ServerInfo::clear_has_map_crc() {
  _has_bits_[0] &= ~0x00002000u;
}
void CSVCMsg_ServerInfo::clear_map_crc() {
  map_crc_ = 0u;
  clear_has_map_crc();
}
::google::protobuf::uint32 CSVCMsg_ServerInfo::map_crc() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_ServerInfo.map_crc)
  return map_crc_;
}
void CSVCMsg_ServerInfo::set_map_crc(::google::protobuf::uint32 value) {
  set_has_map_crc();
  map_crc_ = value;
  // @@protoc_insertion_point(field_set:CSVCMsg_ServerInfo.map_crc)
}

// optional fixed32 client_crc = 9;
bool CSVCMsg_ServerInfo::has_client_crc() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void CSVCMsg_ServerInfo::set_has_client_crc() {
  _has_bits_[0] |= 0x00004000u;
}
void CSVCMsg_ServerInfo::clear_has_client_crc() {
  _has_bits_[0] &= ~0x00004000u;
}
void CSVCMsg_ServerInfo::clear_client_crc() {
  client_crc_ = 0u;
  clear_has_client_crc();
}
::google::protobuf::uint32 CSVCMsg_ServerInfo::client_crc() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_ServerInfo.client_crc)
  return client_crc_;
}
void CSVCMsg_ServerInfo::set_client_crc(::google::protobuf::uint32 value) {
  set_has_client_crc();
  client_crc_ = value;
  // @@protoc_insertion_point(field_set:CSVCMsg_ServerInfo.client_crc)
}

// optional fixed32 string_table_crc = 10;
bool CSVCMsg_ServerInfo::has_string_table_crc() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void CSVCMsg_ServerInfo::set_has_string_table_crc() {
  _has_bits_[0] |= 0x00008000u;
}
void CSVCMsg_ServerInfo::clear_has_string_table_crc() {
  _has_bits_[0] &= ~0x00008000u;
}
void CSVCMsg_ServerInfo::clear_string_table_crc() {
  string_table_crc_ = 0u;
  clear_has_string_table_crc();
}
::google::protobuf::uint32 CSVCMsg_ServerInfo::string_table_crc() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_ServerInfo.string_table_crc)
  return string_table_crc_;
}
void CSVCMsg_ServerInfo::set_string_table_crc(::google::protobuf::uint32 value) {
  set_has_string_table_crc();
  string_table_crc_ = value;
  // @@protoc_insertion_point(field_set:CSVCMsg_ServerInfo.string_table_crc)
}

// optional int32 max_clients = 11;
bool CSVCMsg_ServerInfo::has_max_clients() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void CSVCMsg_ServerInfo::set_has_max_clients() {
  _has_bits_[0] |= 0x00010000u;
}
void CSVCMsg_ServerInfo::clear_has_max_clients() {
  _has_bits_[0] &= ~0x00010000u;
}
void CSVCMsg_ServerInfo::clear_max_clients() {
  max_clients_ = 0;
  clear_has_max_clients();
}
::google::protobuf::int32 CSVCMsg_ServerInfo::max_clients() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_ServerInfo.max_clients)
  return max_clients_;
}
void CSVCMsg_ServerInfo::set_max_clients(::google::protobuf::int32 value) {
  set_has_max_clients();
  max_clients_ = value;
  // @@protoc_insertion_point(field_set:CSVCMsg_ServerInfo.max_clients)
}

// optional int32 max_classes = 12;
bool CSVCMsg_ServerInfo::has_max_classes() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void CSVCMsg_ServerInfo::set_has_max_classes() {
  _has_bits_[0] |= 0x00020000u;
}
void CSVCMsg_ServerInfo::clear_has_max_classes() {
  _has_bits_[0] &= ~0x00020000u;
}
void CSVCMsg_ServerInfo::clear_max_classes() {
  max_classes_ = 0;
  clear_has_max_classes();
}
::google::protobuf::int32 CSVCMsg_ServerInfo::max_classes() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_ServerInfo.max_classes)
  return max_classes_;
}
void CSVCMsg_ServerInfo::set_max_classes(::google::protobuf::int32 value) {
  set_has_max_classes();
  max_classes_ = value;
  // @@protoc_insertion_point(field_set:CSVCMsg_ServerInfo.max_classes)
}

// optional int32 player_slot = 13;
bool CSVCMsg_ServerInfo::has_player_slot() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void CSVCMsg_ServerInfo::set_has_player_slot() {
  _has_bits_[0] |= 0x00040000u;
}
void CSVCMsg_ServerInfo::clear_has_player_slot() {
  _has_bits_[0] &= ~0x00040000u;
}
void CSVCMsg_ServerInfo::clear_player_slot() {
  player_slot_ = 0;
  clear_has_player_slot();
}
::google::protobuf::int32 CSVCMsg_ServerInfo::player_slot() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_ServerInfo.player_slot)
  return player_slot_;
}
void CSVCMsg_ServerInfo::set_player_slot(::google::protobuf::int32 value) {
  set_has_player_slot();
  player_slot_ = value;
  // @@protoc_insertion_point(field_set:CSVCMsg_ServerInfo.player_slot)
}

// optional float tick_interval = 14;
bool CSVCMsg_ServerInfo::has_tick_interval() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void CSVCMsg_ServerInfo::set_has_tick_interval() {
  _has_bits_[0] |= 0x00080000u;
}
void CSVCMsg_ServerInfo::clear_has_tick_interval() {
  _has_bits_[0] &= ~0x00080000u;
}
void CSVCMsg_ServerInfo::clear_tick_interval() {
  tick_interval_ = 0;
  clear_has_tick_interval();
}
float CSVCMsg_ServerInfo::tick_interval() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_ServerInfo.tick_interval)
  return tick_interval_;
}
void CSVCMsg_ServerInfo::set_tick_interval(float value) {
  set_has_tick_interval();
  tick_interval_ = value;
  // @@protoc_insertion_point(field_set:CSVCMsg_ServerInfo.tick_interval)
}

// optional string game_dir = 15;
bool CSVCMsg_ServerInfo::has_game_dir() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CSVCMsg_ServerInfo::set_has_game_dir() {
  _has_bits_[0] |= 0x00000001u;
}
void CSVCMsg_ServerInfo::clear_has_game_dir() {
  _has_bits_[0] &= ~0x00000001u;
}
void CSVCMsg_ServerInfo::clear_game_dir() {
  game_dir_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_game_dir();
}
const ::std::string& CSVCMsg_ServerInfo::game_dir() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_ServerInfo.game_dir)
  return game_dir_.GetNoArena();
}
void CSVCMsg_ServerInfo::set_game_dir(const ::std::string& value) {
  set_has_game_dir();
  game_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CSVCMsg_ServerInfo.game_dir)
}
#if LANG_CXX11
void CSVCMsg_ServerInfo::set_game_dir(::std::string&& value) {
  set_has_game_dir();
  game_dir_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CSVCMsg_ServerInfo.game_dir)
}
#endif
void CSVCMsg_ServerInfo::set_game_dir(const char* value) {
  set_has_game_dir();
  game_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CSVCMsg_ServerInfo.game_dir)
}
void CSVCMsg_ServerInfo::set_game_dir(const char* value, size_t size) {
  set_has_game_dir();
  game_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CSVCMsg_ServerInfo.game_dir)
}
::std::string* CSVCMsg_ServerInfo::mutable_game_dir() {
  set_has_game_dir();
  // @@protoc_insertion_point(field_mutable:CSVCMsg_ServerInfo.game_dir)
  return game_dir_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CSVCMsg_ServerInfo::release_game_dir() {
  // @@protoc_insertion_point(field_release:CSVCMsg_ServerInfo.game_dir)
  clear_has_game_dir();
  return game_dir_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CSVCMsg_ServerInfo::set_allocated_game_dir(::std::string* game_dir) {
  if (game_dir != NULL) {
    set_has_game_dir();
  } else {
    clear_has_game_dir();
  }
  game_dir_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), game_dir);
  // @@protoc_insertion_point(field_set_allocated:CSVCMsg_ServerInfo.game_dir)
}

// optional string map_name = 16;
bool CSVCMsg_ServerInfo::has_map_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CSVCMsg_ServerInfo::set_has_map_name() {
  _has_bits_[0] |= 0x00000002u;
}
void CSVCMsg_ServerInfo::clear_has_map_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void CSVCMsg_ServerInfo::clear_map_name() {
  map_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_map_name();
}
const ::std::string& CSVCMsg_ServerInfo::map_name() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_ServerInfo.map_name)
  return map_name_.GetNoArena();
}
void CSVCMsg_ServerInfo::set_map_name(const ::std::string& value) {
  set_has_map_name();
  map_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CSVCMsg_ServerInfo.map_name)
}
#if LANG_CXX11
void CSVCMsg_ServerInfo::set_map_name(::std::string&& value) {
  set_has_map_name();
  map_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CSVCMsg_ServerInfo.map_name)
}
#endif
void CSVCMsg_ServerInfo::set_map_name(const char* value) {
  set_has_map_name();
  map_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CSVCMsg_ServerInfo.map_name)
}
void CSVCMsg_ServerInfo::set_map_name(const char* value, size_t size) {
  set_has_map_name();
  map_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CSVCMsg_ServerInfo.map_name)
}
::std::string* CSVCMsg_ServerInfo::mutable_map_name() {
  set_has_map_name();
  // @@protoc_insertion_point(field_mutable:CSVCMsg_ServerInfo.map_name)
  return map_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CSVCMsg_ServerInfo::release_map_name() {
  // @@protoc_insertion_point(field_release:CSVCMsg_ServerInfo.map_name)
  clear_has_map_name();
  return map_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CSVCMsg_ServerInfo::set_allocated_map_name(::std::string* map_name) {
  if (map_name != NULL) {
    set_has_map_name();
  } else {
    clear_has_map_name();
  }
  map_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), map_name);
  // @@protoc_insertion_point(field_set_allocated:CSVCMsg_ServerInfo.map_name)
}

// optional string map_group_name = 17;
bool CSVCMsg_ServerInfo::has_map_group_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CSVCMsg_ServerInfo::set_has_map_group_name() {
  _has_bits_[0] |= 0x00000004u;
}
void CSVCMsg_ServerInfo::clear_has_map_group_name() {
  _has_bits_[0] &= ~0x00000004u;
}
void CSVCMsg_ServerInfo::clear_map_group_name() {
  map_group_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_map_group_name();
}
const ::std::string& CSVCMsg_ServerInfo::map_group_name() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_ServerInfo.map_group_name)
  return map_group_name_.GetNoArena();
}
void CSVCMsg_ServerInfo::set_map_group_name(const ::std::string& value) {
  set_has_map_group_name();
  map_group_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CSVCMsg_ServerInfo.map_group_name)
}
#if LANG_CXX11
void CSVCMsg_ServerInfo::set_map_group_name(::std::string&& value) {
  set_has_map_group_name();
  map_group_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CSVCMsg_ServerInfo.map_group_name)
}
#endif
void CSVCMsg_ServerInfo::set_map_group_name(const char* value) {
  set_has_map_group_name();
  map_group_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CSVCMsg_ServerInfo.map_group_name)
}
void CSVCMsg_ServerInfo::set_map_group_name(const char* value, size_t size) {
  set_has_map_group_name();
  map_group_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CSVCMsg_ServerInfo.map_group_name)
}
::std::string* CSVCMsg_ServerInfo::mutable_map_group_name() {
  set_has_map_group_name();
  // @@protoc_insertion_point(field_mutable:CSVCMsg_ServerInfo.map_group_name)
  return map_group_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CSVCMsg_ServerInfo::release_map_group_name() {
  // @@protoc_insertion_point(field_release:CSVCMsg_ServerInfo.map_group_name)
  clear_has_map_group_name();
  return map_group_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CSVCMsg_ServerInfo::set_allocated_map_group_name(::std::string* map_group_name) {
  if (map_group_name != NULL) {
    set_has_map_group_name();
  } else {
    clear_has_map_group_name();
  }
  map_group_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), map_group_name);
  // @@protoc_insertion_point(field_set_allocated:CSVCMsg_ServerInfo.map_group_name)
}

// optional string sky_name = 18;
bool CSVCMsg_ServerInfo::has_sky_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CSVCMsg_ServerInfo::set_has_sky_name() {
  _has_bits_[0] |= 0x00000008u;
}
void CSVCMsg_ServerInfo::clear_has_sky_name() {
  _has_bits_[0] &= ~0x00000008u;
}
void CSVCMsg_ServerInfo::clear_sky_name() {
  sky_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sky_name();
}
const ::std::string& CSVCMsg_ServerInfo::sky_name() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_ServerInfo.sky_name)
  return sky_name_.GetNoArena();
}
void CSVCMsg_ServerInfo::set_sky_name(const ::std::string& value) {
  set_has_sky_name();
  sky_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CSVCMsg_ServerInfo.sky_name)
}
#if LANG_CXX11
void CSVCMsg_ServerInfo::set_sky_name(::std::string&& value) {
  set_has_sky_name();
  sky_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CSVCMsg_ServerInfo.sky_name)
}
#endif
void CSVCMsg_ServerInfo::set_sky_name(const char* value) {
  set_has_sky_name();
  sky_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CSVCMsg_ServerInfo.sky_name)
}
void CSVCMsg_ServerInfo::set_sky_name(const char* value, size_t size) {
  set_has_sky_name();
  sky_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CSVCMsg_ServerInfo.sky_name)
}
::std::string* CSVCMsg_ServerInfo::mutable_sky_name() {
  set_has_sky_name();
  // @@protoc_insertion_point(field_mutable:CSVCMsg_ServerInfo.sky_name)
  return sky_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CSVCMsg_ServerInfo::release_sky_name() {
  // @@protoc_insertion_point(field_release:CSVCMsg_ServerInfo.sky_name)
  clear_has_sky_name();
  return sky_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CSVCMsg_ServerInfo::set_allocated_sky_name(::std::string* sky_name) {
  if (sky_name != NULL) {
    set_has_sky_name();
  } else {
    clear_has_sky_name();
  }
  sky_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sky_name);
  // @@protoc_insertion_point(field_set_allocated:CSVCMsg_ServerInfo.sky_name)
}

// optional string host_name = 19;
bool CSVCMsg_ServerInfo::has_host_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CSVCMsg_ServerInfo::set_has_host_name() {
  _has_bits_[0] |= 0x00000010u;
}
void CSVCMsg_ServerInfo::clear_has_host_name() {
  _has_bits_[0] &= ~0x00000010u;
}
void CSVCMsg_ServerInfo::clear_host_name() {
  host_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_host_name();
}
const ::std::string& CSVCMsg_ServerInfo::host_name() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_ServerInfo.host_name)
  return host_name_.GetNoArena();
}
void CSVCMsg_ServerInfo::set_host_name(const ::std::string& value) {
  set_has_host_name();
  host_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CSVCMsg_ServerInfo.host_name)
}
#if LANG_CXX11
void CSVCMsg_ServerInfo::set_host_name(::std::string&& value) {
  set_has_host_name();
  host_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CSVCMsg_ServerInfo.host_name)
}
#endif
void CSVCMsg_ServerInfo::set_host_name(const char* value) {
  set_has_host_name();
  host_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CSVCMsg_ServerInfo.host_name)
}
void CSVCMsg_ServerInfo::set_host_name(const char* value, size_t size) {
  set_has_host_name();
  host_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CSVCMsg_ServerInfo.host_name)
}
::std::string* CSVCMsg_ServerInfo::mutable_host_name() {
  set_has_host_name();
  // @@protoc_insertion_point(field_mutable:CSVCMsg_ServerInfo.host_name)
  return host_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CSVCMsg_ServerInfo::release_host_name() {
  // @@protoc_insertion_point(field_release:CSVCMsg_ServerInfo.host_name)
  clear_has_host_name();
  return host_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CSVCMsg_ServerInfo::set_allocated_host_name(::std::string* host_name) {
  if (host_name != NULL) {
    set_has_host_name();
  } else {
    clear_has_host_name();
  }
  host_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), host_name);
  // @@protoc_insertion_point(field_set_allocated:CSVCMsg_ServerInfo.host_name)
}

// optional uint32 public_ip = 20;
bool CSVCMsg_ServerInfo::has_public_ip() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void CSVCMsg_ServerInfo::set_has_public_ip() {
  _has_bits_[0] |= 0x00200000u;
}
void CSVCMsg_ServerInfo::clear_has_public_ip() {
  _has_bits_[0] &= ~0x00200000u;
}
void CSVCMsg_ServerInfo::clear_public_ip() {
  public_ip_ = 0u;
  clear_has_public_ip();
}
::google::protobuf::uint32 CSVCMsg_ServerInfo::public_ip() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_ServerInfo.public_ip)
  return public_ip_;
}
void CSVCMsg_ServerInfo::set_public_ip(::google::protobuf::uint32 value) {
  set_has_public_ip();
  public_ip_ = value;
  // @@protoc_insertion_point(field_set:CSVCMsg_ServerInfo.public_ip)
}

// optional uint64 ugc_map_id = 22;
bool CSVCMsg_ServerInfo::has_ugc_map_id() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void CSVCMsg_ServerInfo::set_has_ugc_map_id() {
  _has_bits_[0] |= 0x00100000u;
}
void CSVCMsg_ServerInfo::clear_has_ugc_map_id() {
  _has_bits_[0] &= ~0x00100000u;
}
void CSVCMsg_ServerInfo::clear_ugc_map_id() {
  ugc_map_id_ = GOOGLE_ULONGLONG(0);
  clear_has_ugc_map_id();
}
::google::protobuf::uint64 CSVCMsg_ServerInfo::ugc_map_id() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_ServerInfo.ugc_map_id)
  return ugc_map_id_;
}
void CSVCMsg_ServerInfo::set_ugc_map_id(::google::protobuf::uint64 value) {
  set_has_ugc_map_id();
  ugc_map_id_ = value;
  // @@protoc_insertion_point(field_set:CSVCMsg_ServerInfo.ugc_map_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSVCMsg_ClassInfo_class_t::kClassIdFieldNumber;
const int CSVCMsg_ClassInfo_class_t::kDataTableNameFieldNumber;
const int CSVCMsg_ClassInfo_class_t::kClassNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSVCMsg_ClassInfo_class_t::CSVCMsg_ClassInfo_class_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_netmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSVCMsg_ClassInfo.class_t)
}
CSVCMsg_ClassInfo_class_t::CSVCMsg_ClassInfo_class_t(const CSVCMsg_ClassInfo_class_t& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_table_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data_table_name()) {
    data_table_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_table_name_);
  }
  class_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_class_name()) {
    class_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.class_name_);
  }
  class_id_ = from.class_id_;
  // @@protoc_insertion_point(copy_constructor:CSVCMsg_ClassInfo.class_t)
}

void CSVCMsg_ClassInfo_class_t::SharedCtor() {
  _cached_size_ = 0;
  data_table_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  class_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  class_id_ = 0;
}

CSVCMsg_ClassInfo_class_t::~CSVCMsg_ClassInfo_class_t() {
  // @@protoc_insertion_point(destructor:CSVCMsg_ClassInfo.class_t)
  SharedDtor();
}

void CSVCMsg_ClassInfo_class_t::SharedDtor() {
  data_table_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  class_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CSVCMsg_ClassInfo_class_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSVCMsg_ClassInfo_class_t::descriptor() {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[26].descriptor;
}

const CSVCMsg_ClassInfo_class_t& CSVCMsg_ClassInfo_class_t::default_instance() {
  protobuf_netmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CSVCMsg_ClassInfo_class_t* CSVCMsg_ClassInfo_class_t::New(::google::protobuf::Arena* arena) const {
  CSVCMsg_ClassInfo_class_t* n = new CSVCMsg_ClassInfo_class_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSVCMsg_ClassInfo_class_t::Clear() {
// @@protoc_insertion_point(message_clear_start:CSVCMsg_ClassInfo.class_t)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_data_table_name()) {
      GOOGLE_DCHECK(!data_table_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*data_table_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_class_name()) {
      GOOGLE_DCHECK(!class_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*class_name_.UnsafeRawStringPointer())->clear();
    }
  }
  class_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSVCMsg_ClassInfo_class_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSVCMsg_ClassInfo.class_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 class_id = 1;
      case 1: {
        if (tag == 8u) {
          set_has_class_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &class_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string data_table_name = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data_table_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->data_table_name().data(), this->data_table_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CSVCMsg_ClassInfo.class_t.data_table_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string class_name = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_class_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->class_name().data(), this->class_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CSVCMsg_ClassInfo.class_t.class_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSVCMsg_ClassInfo.class_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSVCMsg_ClassInfo.class_t)
  return false;
#undef DO_
}

void CSVCMsg_ClassInfo_class_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSVCMsg_ClassInfo.class_t)
  // optional int32 class_id = 1;
  if (has_class_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->class_id(), output);
  }

  // optional string data_table_name = 2;
  if (has_data_table_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data_table_name().data(), this->data_table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSVCMsg_ClassInfo.class_t.data_table_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->data_table_name(), output);
  }

  // optional string class_name = 3;
  if (has_class_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->class_name().data(), this->class_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSVCMsg_ClassInfo.class_t.class_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->class_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSVCMsg_ClassInfo.class_t)
}

::google::protobuf::uint8* CSVCMsg_ClassInfo_class_t::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSVCMsg_ClassInfo.class_t)
  // optional int32 class_id = 1;
  if (has_class_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->class_id(), target);
  }

  // optional string data_table_name = 2;
  if (has_data_table_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data_table_name().data(), this->data_table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSVCMsg_ClassInfo.class_t.data_table_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->data_table_name(), target);
  }

  // optional string class_name = 3;
  if (has_class_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->class_name().data(), this->class_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSVCMsg_ClassInfo.class_t.class_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->class_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSVCMsg_ClassInfo.class_t)
  return target;
}

size_t CSVCMsg_ClassInfo_class_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSVCMsg_ClassInfo.class_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string data_table_name = 2;
    if (has_data_table_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data_table_name());
    }

    // optional string class_name = 3;
    if (has_class_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->class_name());
    }

    // optional int32 class_id = 1;
    if (has_class_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->class_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSVCMsg_ClassInfo_class_t::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSVCMsg_ClassInfo.class_t)
  GOOGLE_DCHECK_NE(&from, this);
  const CSVCMsg_ClassInfo_class_t* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSVCMsg_ClassInfo_class_t>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSVCMsg_ClassInfo.class_t)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSVCMsg_ClassInfo.class_t)
    MergeFrom(*source);
  }
}

void CSVCMsg_ClassInfo_class_t::MergeFrom(const CSVCMsg_ClassInfo_class_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSVCMsg_ClassInfo.class_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_data_table_name()) {
      set_has_data_table_name();
      data_table_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_table_name_);
    }
    if (from.has_class_name()) {
      set_has_class_name();
      class_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.class_name_);
    }
    if (from.has_class_id()) {
      set_class_id(from.class_id());
    }
  }
}

void CSVCMsg_ClassInfo_class_t::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSVCMsg_ClassInfo.class_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSVCMsg_ClassInfo_class_t::CopyFrom(const CSVCMsg_ClassInfo_class_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSVCMsg_ClassInfo.class_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSVCMsg_ClassInfo_class_t::IsInitialized() const {
  return true;
}

void CSVCMsg_ClassInfo_class_t::Swap(CSVCMsg_ClassInfo_class_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSVCMsg_ClassInfo_class_t::InternalSwap(CSVCMsg_ClassInfo_class_t* other) {
  data_table_name_.Swap(&other->data_table_name_);
  class_name_.Swap(&other->class_name_);
  std::swap(class_id_, other->class_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSVCMsg_ClassInfo_class_t::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[26];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CSVCMsg_ClassInfo_class_t

// optional int32 class_id = 1;
bool CSVCMsg_ClassInfo_class_t::has_class_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CSVCMsg_ClassInfo_class_t::set_has_class_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CSVCMsg_ClassInfo_class_t::clear_has_class_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CSVCMsg_ClassInfo_class_t::clear_class_id() {
  class_id_ = 0;
  clear_has_class_id();
}
::google::protobuf::int32 CSVCMsg_ClassInfo_class_t::class_id() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_ClassInfo.class_t.class_id)
  return class_id_;
}
void CSVCMsg_ClassInfo_class_t::set_class_id(::google::protobuf::int32 value) {
  set_has_class_id();
  class_id_ = value;
  // @@protoc_insertion_point(field_set:CSVCMsg_ClassInfo.class_t.class_id)
}

// optional string data_table_name = 2;
bool CSVCMsg_ClassInfo_class_t::has_data_table_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CSVCMsg_ClassInfo_class_t::set_has_data_table_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CSVCMsg_ClassInfo_class_t::clear_has_data_table_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CSVCMsg_ClassInfo_class_t::clear_data_table_name() {
  data_table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data_table_name();
}
const ::std::string& CSVCMsg_ClassInfo_class_t::data_table_name() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_ClassInfo.class_t.data_table_name)
  return data_table_name_.GetNoArena();
}
void CSVCMsg_ClassInfo_class_t::set_data_table_name(const ::std::string& value) {
  set_has_data_table_name();
  data_table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CSVCMsg_ClassInfo.class_t.data_table_name)
}
#if LANG_CXX11
void CSVCMsg_ClassInfo_class_t::set_data_table_name(::std::string&& value) {
  set_has_data_table_name();
  data_table_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CSVCMsg_ClassInfo.class_t.data_table_name)
}
#endif
void CSVCMsg_ClassInfo_class_t::set_data_table_name(const char* value) {
  set_has_data_table_name();
  data_table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CSVCMsg_ClassInfo.class_t.data_table_name)
}
void CSVCMsg_ClassInfo_class_t::set_data_table_name(const char* value, size_t size) {
  set_has_data_table_name();
  data_table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CSVCMsg_ClassInfo.class_t.data_table_name)
}
::std::string* CSVCMsg_ClassInfo_class_t::mutable_data_table_name() {
  set_has_data_table_name();
  // @@protoc_insertion_point(field_mutable:CSVCMsg_ClassInfo.class_t.data_table_name)
  return data_table_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CSVCMsg_ClassInfo_class_t::release_data_table_name() {
  // @@protoc_insertion_point(field_release:CSVCMsg_ClassInfo.class_t.data_table_name)
  clear_has_data_table_name();
  return data_table_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CSVCMsg_ClassInfo_class_t::set_allocated_data_table_name(::std::string* data_table_name) {
  if (data_table_name != NULL) {
    set_has_data_table_name();
  } else {
    clear_has_data_table_name();
  }
  data_table_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data_table_name);
  // @@protoc_insertion_point(field_set_allocated:CSVCMsg_ClassInfo.class_t.data_table_name)
}

// optional string class_name = 3;
bool CSVCMsg_ClassInfo_class_t::has_class_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CSVCMsg_ClassInfo_class_t::set_has_class_name() {
  _has_bits_[0] |= 0x00000002u;
}
void CSVCMsg_ClassInfo_class_t::clear_has_class_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void CSVCMsg_ClassInfo_class_t::clear_class_name() {
  class_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_class_name();
}
const ::std::string& CSVCMsg_ClassInfo_class_t::class_name() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_ClassInfo.class_t.class_name)
  return class_name_.GetNoArena();
}
void CSVCMsg_ClassInfo_class_t::set_class_name(const ::std::string& value) {
  set_has_class_name();
  class_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CSVCMsg_ClassInfo.class_t.class_name)
}
#if LANG_CXX11
void CSVCMsg_ClassInfo_class_t::set_class_name(::std::string&& value) {
  set_has_class_name();
  class_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CSVCMsg_ClassInfo.class_t.class_name)
}
#endif
void CSVCMsg_ClassInfo_class_t::set_class_name(const char* value) {
  set_has_class_name();
  class_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CSVCMsg_ClassInfo.class_t.class_name)
}
void CSVCMsg_ClassInfo_class_t::set_class_name(const char* value, size_t size) {
  set_has_class_name();
  class_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CSVCMsg_ClassInfo.class_t.class_name)
}
::std::string* CSVCMsg_ClassInfo_class_t::mutable_class_name() {
  set_has_class_name();
  // @@protoc_insertion_point(field_mutable:CSVCMsg_ClassInfo.class_t.class_name)
  return class_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CSVCMsg_ClassInfo_class_t::release_class_name() {
  // @@protoc_insertion_point(field_release:CSVCMsg_ClassInfo.class_t.class_name)
  clear_has_class_name();
  return class_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CSVCMsg_ClassInfo_class_t::set_allocated_class_name(::std::string* class_name) {
  if (class_name != NULL) {
    set_has_class_name();
  } else {
    clear_has_class_name();
  }
  class_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), class_name);
  // @@protoc_insertion_point(field_set_allocated:CSVCMsg_ClassInfo.class_t.class_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSVCMsg_ClassInfo::kCreateOnClientFieldNumber;
const int CSVCMsg_ClassInfo::kClassesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSVCMsg_ClassInfo::CSVCMsg_ClassInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_netmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSVCMsg_ClassInfo)
}
CSVCMsg_ClassInfo::CSVCMsg_ClassInfo(const CSVCMsg_ClassInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      classes_(from.classes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  create_on_client_ = from.create_on_client_;
  // @@protoc_insertion_point(copy_constructor:CSVCMsg_ClassInfo)
}

void CSVCMsg_ClassInfo::SharedCtor() {
  _cached_size_ = 0;
  create_on_client_ = false;
}

CSVCMsg_ClassInfo::~CSVCMsg_ClassInfo() {
  // @@protoc_insertion_point(destructor:CSVCMsg_ClassInfo)
  SharedDtor();
}

void CSVCMsg_ClassInfo::SharedDtor() {
}

void CSVCMsg_ClassInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSVCMsg_ClassInfo::descriptor() {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[27].descriptor;
}

const CSVCMsg_ClassInfo& CSVCMsg_ClassInfo::default_instance() {
  protobuf_netmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CSVCMsg_ClassInfo* CSVCMsg_ClassInfo::New(::google::protobuf::Arena* arena) const {
  CSVCMsg_ClassInfo* n = new CSVCMsg_ClassInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSVCMsg_ClassInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CSVCMsg_ClassInfo)
  classes_.Clear();
  create_on_client_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSVCMsg_ClassInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSVCMsg_ClassInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool create_on_client = 1;
      case 1: {
        if (tag == 8u) {
          set_has_create_on_client();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &create_on_client_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .CSVCMsg_ClassInfo.class_t classes = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_classes()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSVCMsg_ClassInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSVCMsg_ClassInfo)
  return false;
#undef DO_
}

void CSVCMsg_ClassInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSVCMsg_ClassInfo)
  // optional bool create_on_client = 1;
  if (has_create_on_client()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->create_on_client(), output);
  }

  // repeated .CSVCMsg_ClassInfo.class_t classes = 2;
  for (unsigned int i = 0, n = this->classes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->classes(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSVCMsg_ClassInfo)
}

::google::protobuf::uint8* CSVCMsg_ClassInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSVCMsg_ClassInfo)
  // optional bool create_on_client = 1;
  if (has_create_on_client()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->create_on_client(), target);
  }

  // repeated .CSVCMsg_ClassInfo.class_t classes = 2;
  for (unsigned int i = 0, n = this->classes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->classes(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSVCMsg_ClassInfo)
  return target;
}

size_t CSVCMsg_ClassInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSVCMsg_ClassInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .CSVCMsg_ClassInfo.class_t classes = 2;
  {
    unsigned int count = this->classes_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->classes(i));
    }
  }

  // optional bool create_on_client = 1;
  if (has_create_on_client()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSVCMsg_ClassInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSVCMsg_ClassInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CSVCMsg_ClassInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSVCMsg_ClassInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSVCMsg_ClassInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSVCMsg_ClassInfo)
    MergeFrom(*source);
  }
}

void CSVCMsg_ClassInfo::MergeFrom(const CSVCMsg_ClassInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSVCMsg_ClassInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  classes_.MergeFrom(from.classes_);
  if (from.has_create_on_client()) {
    set_create_on_client(from.create_on_client());
  }
}

void CSVCMsg_ClassInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSVCMsg_ClassInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSVCMsg_ClassInfo::CopyFrom(const CSVCMsg_ClassInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSVCMsg_ClassInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSVCMsg_ClassInfo::IsInitialized() const {
  return true;
}

void CSVCMsg_ClassInfo::Swap(CSVCMsg_ClassInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSVCMsg_ClassInfo::InternalSwap(CSVCMsg_ClassInfo* other) {
  classes_.UnsafeArenaSwap(&other->classes_);
  std::swap(create_on_client_, other->create_on_client_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSVCMsg_ClassInfo::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[27];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CSVCMsg_ClassInfo

// optional bool create_on_client = 1;
bool CSVCMsg_ClassInfo::has_create_on_client() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CSVCMsg_ClassInfo::set_has_create_on_client() {
  _has_bits_[0] |= 0x00000001u;
}
void CSVCMsg_ClassInfo::clear_has_create_on_client() {
  _has_bits_[0] &= ~0x00000001u;
}
void CSVCMsg_ClassInfo::clear_create_on_client() {
  create_on_client_ = false;
  clear_has_create_on_client();
}
bool CSVCMsg_ClassInfo::create_on_client() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_ClassInfo.create_on_client)
  return create_on_client_;
}
void CSVCMsg_ClassInfo::set_create_on_client(bool value) {
  set_has_create_on_client();
  create_on_client_ = value;
  // @@protoc_insertion_point(field_set:CSVCMsg_ClassInfo.create_on_client)
}

// repeated .CSVCMsg_ClassInfo.class_t classes = 2;
int CSVCMsg_ClassInfo::classes_size() const {
  return classes_.size();
}
void CSVCMsg_ClassInfo::clear_classes() {
  classes_.Clear();
}
const ::CSVCMsg_ClassInfo_class_t& CSVCMsg_ClassInfo::classes(int index) const {
  // @@protoc_insertion_point(field_get:CSVCMsg_ClassInfo.classes)
  return classes_.Get(index);
}
::CSVCMsg_ClassInfo_class_t* CSVCMsg_ClassInfo::mutable_classes(int index) {
  // @@protoc_insertion_point(field_mutable:CSVCMsg_ClassInfo.classes)
  return classes_.Mutable(index);
}
::CSVCMsg_ClassInfo_class_t* CSVCMsg_ClassInfo::add_classes() {
  // @@protoc_insertion_point(field_add:CSVCMsg_ClassInfo.classes)
  return classes_.Add();
}
::google::protobuf::RepeatedPtrField< ::CSVCMsg_ClassInfo_class_t >*
CSVCMsg_ClassInfo::mutable_classes() {
  // @@protoc_insertion_point(field_mutable_list:CSVCMsg_ClassInfo.classes)
  return &classes_;
}
const ::google::protobuf::RepeatedPtrField< ::CSVCMsg_ClassInfo_class_t >&
CSVCMsg_ClassInfo::classes() const {
  // @@protoc_insertion_point(field_list:CSVCMsg_ClassInfo.classes)
  return classes_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSVCMsg_SendTable_sendprop_t::kTypeFieldNumber;
const int CSVCMsg_SendTable_sendprop_t::kVarNameFieldNumber;
const int CSVCMsg_SendTable_sendprop_t::kFlagsFieldNumber;
const int CSVCMsg_SendTable_sendprop_t::kPriorityFieldNumber;
const int CSVCMsg_SendTable_sendprop_t::kDtNameFieldNumber;
const int CSVCMsg_SendTable_sendprop_t::kNumElementsFieldNumber;
const int CSVCMsg_SendTable_sendprop_t::kLowValueFieldNumber;
const int CSVCMsg_SendTable_sendprop_t::kHighValueFieldNumber;
const int CSVCMsg_SendTable_sendprop_t::kNumBitsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSVCMsg_SendTable_sendprop_t::CSVCMsg_SendTable_sendprop_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_netmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSVCMsg_SendTable.sendprop_t)
}
CSVCMsg_SendTable_sendprop_t::CSVCMsg_SendTable_sendprop_t(const CSVCMsg_SendTable_sendprop_t& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  var_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_var_name()) {
    var_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.var_name_);
  }
  dt_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_dt_name()) {
    dt_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dt_name_);
  }
  ::memcpy(&type_, &from.type_,
    reinterpret_cast<char*>(&num_bits_) -
    reinterpret_cast<char*>(&type_) + sizeof(num_bits_));
  // @@protoc_insertion_point(copy_constructor:CSVCMsg_SendTable.sendprop_t)
}

void CSVCMsg_SendTable_sendprop_t::SharedCtor() {
  _cached_size_ = 0;
  var_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dt_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, reinterpret_cast<char*>(&num_bits_) -
    reinterpret_cast<char*>(&type_) + sizeof(num_bits_));
}

CSVCMsg_SendTable_sendprop_t::~CSVCMsg_SendTable_sendprop_t() {
  // @@protoc_insertion_point(destructor:CSVCMsg_SendTable.sendprop_t)
  SharedDtor();
}

void CSVCMsg_SendTable_sendprop_t::SharedDtor() {
  var_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dt_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CSVCMsg_SendTable_sendprop_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSVCMsg_SendTable_sendprop_t::descriptor() {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[28].descriptor;
}

const CSVCMsg_SendTable_sendprop_t& CSVCMsg_SendTable_sendprop_t::default_instance() {
  protobuf_netmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CSVCMsg_SendTable_sendprop_t* CSVCMsg_SendTable_sendprop_t::New(::google::protobuf::Arena* arena) const {
  CSVCMsg_SendTable_sendprop_t* n = new CSVCMsg_SendTable_sendprop_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSVCMsg_SendTable_sendprop_t::Clear() {
// @@protoc_insertion_point(message_clear_start:CSVCMsg_SendTable.sendprop_t)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_var_name()) {
      GOOGLE_DCHECK(!var_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*var_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_dt_name()) {
      GOOGLE_DCHECK(!dt_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*dt_name_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 252u) {
    ::memset(&type_, 0, reinterpret_cast<char*>(&high_value_) -
      reinterpret_cast<char*>(&type_) + sizeof(high_value_));
  }
  num_bits_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSVCMsg_SendTable_sendprop_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSVCMsg_SendTable.sendprop_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8u) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string var_name = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_var_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->var_name().data(), this->var_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CSVCMsg_SendTable.sendprop_t.var_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 flags = 3;
      case 3: {
        if (tag == 24u) {
          set_has_flags();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 priority = 4;
      case 4: {
        if (tag == 32u) {
          set_has_priority();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &priority_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string dt_name = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dt_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dt_name().data(), this->dt_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CSVCMsg_SendTable.sendprop_t.dt_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_elements = 6;
      case 6: {
        if (tag == 48u) {
          set_has_num_elements();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_elements_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float low_value = 7;
      case 7: {
        if (tag == 61u) {
          set_has_low_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &low_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float high_value = 8;
      case 8: {
        if (tag == 69u) {
          set_has_high_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &high_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_bits = 9;
      case 9: {
        if (tag == 72u) {
          set_has_num_bits();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_bits_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSVCMsg_SendTable.sendprop_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSVCMsg_SendTable.sendprop_t)
  return false;
#undef DO_
}

void CSVCMsg_SendTable_sendprop_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSVCMsg_SendTable.sendprop_t)
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional string var_name = 2;
  if (has_var_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->var_name().data(), this->var_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSVCMsg_SendTable.sendprop_t.var_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->var_name(), output);
  }

  // optional int32 flags = 3;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->flags(), output);
  }

  // optional int32 priority = 4;
  if (has_priority()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->priority(), output);
  }

  // optional string dt_name = 5;
  if (has_dt_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dt_name().data(), this->dt_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSVCMsg_SendTable.sendprop_t.dt_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->dt_name(), output);
  }

  // optional int32 num_elements = 6;
  if (has_num_elements()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->num_elements(), output);
  }

  // optional float low_value = 7;
  if (has_low_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->low_value(), output);
  }

  // optional float high_value = 8;
  if (has_high_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->high_value(), output);
  }

  // optional int32 num_bits = 9;
  if (has_num_bits()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->num_bits(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSVCMsg_SendTable.sendprop_t)
}

::google::protobuf::uint8* CSVCMsg_SendTable_sendprop_t::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSVCMsg_SendTable.sendprop_t)
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional string var_name = 2;
  if (has_var_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->var_name().data(), this->var_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSVCMsg_SendTable.sendprop_t.var_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->var_name(), target);
  }

  // optional int32 flags = 3;
  if (has_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->flags(), target);
  }

  // optional int32 priority = 4;
  if (has_priority()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->priority(), target);
  }

  // optional string dt_name = 5;
  if (has_dt_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dt_name().data(), this->dt_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSVCMsg_SendTable.sendprop_t.dt_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->dt_name(), target);
  }

  // optional int32 num_elements = 6;
  if (has_num_elements()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->num_elements(), target);
  }

  // optional float low_value = 7;
  if (has_low_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->low_value(), target);
  }

  // optional float high_value = 8;
  if (has_high_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->high_value(), target);
  }

  // optional int32 num_bits = 9;
  if (has_num_bits()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->num_bits(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSVCMsg_SendTable.sendprop_t)
  return target;
}

size_t CSVCMsg_SendTable_sendprop_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSVCMsg_SendTable.sendprop_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string var_name = 2;
    if (has_var_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->var_name());
    }

    // optional string dt_name = 5;
    if (has_dt_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dt_name());
    }

    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 flags = 3;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flags());
    }

    // optional int32 priority = 4;
    if (has_priority()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->priority());
    }

    // optional int32 num_elements = 6;
    if (has_num_elements()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_elements());
    }

    // optional float low_value = 7;
    if (has_low_value()) {
      total_size += 1 + 4;
    }

    // optional float high_value = 8;
    if (has_high_value()) {
      total_size += 1 + 4;
    }

  }
  // optional int32 num_bits = 9;
  if (has_num_bits()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_bits());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSVCMsg_SendTable_sendprop_t::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSVCMsg_SendTable.sendprop_t)
  GOOGLE_DCHECK_NE(&from, this);
  const CSVCMsg_SendTable_sendprop_t* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSVCMsg_SendTable_sendprop_t>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSVCMsg_SendTable.sendprop_t)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSVCMsg_SendTable.sendprop_t)
    MergeFrom(*source);
  }
}

void CSVCMsg_SendTable_sendprop_t::MergeFrom(const CSVCMsg_SendTable_sendprop_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSVCMsg_SendTable.sendprop_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 255u) {
    if (from.has_var_name()) {
      set_has_var_name();
      var_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.var_name_);
    }
    if (from.has_dt_name()) {
      set_has_dt_name();
      dt_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dt_name_);
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
    if (from.has_priority()) {
      set_priority(from.priority());
    }
    if (from.has_num_elements()) {
      set_num_elements(from.num_elements());
    }
    if (from.has_low_value()) {
      set_low_value(from.low_value());
    }
    if (from.has_high_value()) {
      set_high_value(from.high_value());
    }
  }
  if (from.has_num_bits()) {
    set_num_bits(from.num_bits());
  }
}

void CSVCMsg_SendTable_sendprop_t::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSVCMsg_SendTable.sendprop_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSVCMsg_SendTable_sendprop_t::CopyFrom(const CSVCMsg_SendTable_sendprop_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSVCMsg_SendTable.sendprop_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSVCMsg_SendTable_sendprop_t::IsInitialized() const {
  return true;
}

void CSVCMsg_SendTable_sendprop_t::Swap(CSVCMsg_SendTable_sendprop_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSVCMsg_SendTable_sendprop_t::InternalSwap(CSVCMsg_SendTable_sendprop_t* other) {
  var_name_.Swap(&other->var_name_);
  dt_name_.Swap(&other->dt_name_);
  std::swap(type_, other->type_);
  std::swap(flags_, other->flags_);
  std::swap(priority_, other->priority_);
  std::swap(num_elements_, other->num_elements_);
  std::swap(low_value_, other->low_value_);
  std::swap(high_value_, other->high_value_);
  std::swap(num_bits_, other->num_bits_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSVCMsg_SendTable_sendprop_t::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[28];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CSVCMsg_SendTable_sendprop_t

// optional int32 type = 1;
bool CSVCMsg_SendTable_sendprop_t::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CSVCMsg_SendTable_sendprop_t::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
void CSVCMsg_SendTable_sendprop_t::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void CSVCMsg_SendTable_sendprop_t::clear_type() {
  type_ = 0;
  clear_has_type();
}
::google::protobuf::int32 CSVCMsg_SendTable_sendprop_t::type() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_SendTable.sendprop_t.type)
  return type_;
}
void CSVCMsg_SendTable_sendprop_t::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:CSVCMsg_SendTable.sendprop_t.type)
}

// optional string var_name = 2;
bool CSVCMsg_SendTable_sendprop_t::has_var_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CSVCMsg_SendTable_sendprop_t::set_has_var_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CSVCMsg_SendTable_sendprop_t::clear_has_var_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CSVCMsg_SendTable_sendprop_t::clear_var_name() {
  var_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_var_name();
}
const ::std::string& CSVCMsg_SendTable_sendprop_t::var_name() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_SendTable.sendprop_t.var_name)
  return var_name_.GetNoArena();
}
void CSVCMsg_SendTable_sendprop_t::set_var_name(const ::std::string& value) {
  set_has_var_name();
  var_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CSVCMsg_SendTable.sendprop_t.var_name)
}
#if LANG_CXX11
void CSVCMsg_SendTable_sendprop_t::set_var_name(::std::string&& value) {
  set_has_var_name();
  var_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CSVCMsg_SendTable.sendprop_t.var_name)
}
#endif
void CSVCMsg_SendTable_sendprop_t::set_var_name(const char* value) {
  set_has_var_name();
  var_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CSVCMsg_SendTable.sendprop_t.var_name)
}
void CSVCMsg_SendTable_sendprop_t::set_var_name(const char* value, size_t size) {
  set_has_var_name();
  var_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CSVCMsg_SendTable.sendprop_t.var_name)
}
::std::string* CSVCMsg_SendTable_sendprop_t::mutable_var_name() {
  set_has_var_name();
  // @@protoc_insertion_point(field_mutable:CSVCMsg_SendTable.sendprop_t.var_name)
  return var_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CSVCMsg_SendTable_sendprop_t::release_var_name() {
  // @@protoc_insertion_point(field_release:CSVCMsg_SendTable.sendprop_t.var_name)
  clear_has_var_name();
  return var_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CSVCMsg_SendTable_sendprop_t::set_allocated_var_name(::std::string* var_name) {
  if (var_name != NULL) {
    set_has_var_name();
  } else {
    clear_has_var_name();
  }
  var_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), var_name);
  // @@protoc_insertion_point(field_set_allocated:CSVCMsg_SendTable.sendprop_t.var_name)
}

// optional int32 flags = 3;
bool CSVCMsg_SendTable_sendprop_t::has_flags() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CSVCMsg_SendTable_sendprop_t::set_has_flags() {
  _has_bits_[0] |= 0x00000008u;
}
void CSVCMsg_SendTable_sendprop_t::clear_has_flags() {
  _has_bits_[0] &= ~0x00000008u;
}
void CSVCMsg_SendTable_sendprop_t::clear_flags() {
  flags_ = 0;
  clear_has_flags();
}
::google::protobuf::int32 CSVCMsg_SendTable_sendprop_t::flags() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_SendTable.sendprop_t.flags)
  return flags_;
}
void CSVCMsg_SendTable_sendprop_t::set_flags(::google::protobuf::int32 value) {
  set_has_flags();
  flags_ = value;
  // @@protoc_insertion_point(field_set:CSVCMsg_SendTable.sendprop_t.flags)
}

// optional int32 priority = 4;
bool CSVCMsg_SendTable_sendprop_t::has_priority() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CSVCMsg_SendTable_sendprop_t::set_has_priority() {
  _has_bits_[0] |= 0x00000010u;
}
void CSVCMsg_SendTable_sendprop_t::clear_has_priority() {
  _has_bits_[0] &= ~0x00000010u;
}
void CSVCMsg_SendTable_sendprop_t::clear_priority() {
  priority_ = 0;
  clear_has_priority();
}
::google::protobuf::int32 CSVCMsg_SendTable_sendprop_t::priority() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_SendTable.sendprop_t.priority)
  return priority_;
}
void CSVCMsg_SendTable_sendprop_t::set_priority(::google::protobuf::int32 value) {
  set_has_priority();
  priority_ = value;
  // @@protoc_insertion_point(field_set:CSVCMsg_SendTable.sendprop_t.priority)
}

// optional string dt_name = 5;
bool CSVCMsg_SendTable_sendprop_t::has_dt_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CSVCMsg_SendTable_sendprop_t::set_has_dt_name() {
  _has_bits_[0] |= 0x00000002u;
}
void CSVCMsg_SendTable_sendprop_t::clear_has_dt_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void CSVCMsg_SendTable_sendprop_t::clear_dt_name() {
  dt_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dt_name();
}
const ::std::string& CSVCMsg_SendTable_sendprop_t::dt_name() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_SendTable.sendprop_t.dt_name)
  return dt_name_.GetNoArena();
}
void CSVCMsg_SendTable_sendprop_t::set_dt_name(const ::std::string& value) {
  set_has_dt_name();
  dt_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CSVCMsg_SendTable.sendprop_t.dt_name)
}
#if LANG_CXX11
void CSVCMsg_SendTable_sendprop_t::set_dt_name(::std::string&& value) {
  set_has_dt_name();
  dt_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CSVCMsg_SendTable.sendprop_t.dt_name)
}
#endif
void CSVCMsg_SendTable_sendprop_t::set_dt_name(const char* value) {
  set_has_dt_name();
  dt_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CSVCMsg_SendTable.sendprop_t.dt_name)
}
void CSVCMsg_SendTable_sendprop_t::set_dt_name(const char* value, size_t size) {
  set_has_dt_name();
  dt_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CSVCMsg_SendTable.sendprop_t.dt_name)
}
::std::string* CSVCMsg_SendTable_sendprop_t::mutable_dt_name() {
  set_has_dt_name();
  // @@protoc_insertion_point(field_mutable:CSVCMsg_SendTable.sendprop_t.dt_name)
  return dt_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CSVCMsg_SendTable_sendprop_t::release_dt_name() {
  // @@protoc_insertion_point(field_release:CSVCMsg_SendTable.sendprop_t.dt_name)
  clear_has_dt_name();
  return dt_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CSVCMsg_SendTable_sendprop_t::set_allocated_dt_name(::std::string* dt_name) {
  if (dt_name != NULL) {
    set_has_dt_name();
  } else {
    clear_has_dt_name();
  }
  dt_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dt_name);
  // @@protoc_insertion_point(field_set_allocated:CSVCMsg_SendTable.sendprop_t.dt_name)
}

// optional int32 num_elements = 6;
bool CSVCMsg_SendTable_sendprop_t::has_num_elements() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CSVCMsg_SendTable_sendprop_t::set_has_num_elements() {
  _has_bits_[0] |= 0x00000020u;
}
void CSVCMsg_SendTable_sendprop_t::clear_has_num_elements() {
  _has_bits_[0] &= ~0x00000020u;
}
void CSVCMsg_SendTable_sendprop_t::clear_num_elements() {
  num_elements_ = 0;
  clear_has_num_elements();
}
::google::protobuf::int32 CSVCMsg_SendTable_sendprop_t::num_elements() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_SendTable.sendprop_t.num_elements)
  return num_elements_;
}
void CSVCMsg_SendTable_sendprop_t::set_num_elements(::google::protobuf::int32 value) {
  set_has_num_elements();
  num_elements_ = value;
  // @@protoc_insertion_point(field_set:CSVCMsg_SendTable.sendprop_t.num_elements)
}

// optional float low_value = 7;
bool CSVCMsg_SendTable_sendprop_t::has_low_value() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CSVCMsg_SendTable_sendprop_t::set_has_low_value() {
  _has_bits_[0] |= 0x00000040u;
}
void CSVCMsg_SendTable_sendprop_t::clear_has_low_value() {
  _has_bits_[0] &= ~0x00000040u;
}
void CSVCMsg_SendTable_sendprop_t::clear_low_value() {
  low_value_ = 0;
  clear_has_low_value();
}
float CSVCMsg_SendTable_sendprop_t::low_value() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_SendTable.sendprop_t.low_value)
  return low_value_;
}
void CSVCMsg_SendTable_sendprop_t::set_low_value(float value) {
  set_has_low_value();
  low_value_ = value;
  // @@protoc_insertion_point(field_set:CSVCMsg_SendTable.sendprop_t.low_value)
}

// optional float high_value = 8;
bool CSVCMsg_SendTable_sendprop_t::has_high_value() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CSVCMsg_SendTable_sendprop_t::set_has_high_value() {
  _has_bits_[0] |= 0x00000080u;
}
void CSVCMsg_SendTable_sendprop_t::clear_has_high_value() {
  _has_bits_[0] &= ~0x00000080u;
}
void CSVCMsg_SendTable_sendprop_t::clear_high_value() {
  high_value_ = 0;
  clear_has_high_value();
}
float CSVCMsg_SendTable_sendprop_t::high_value() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_SendTable.sendprop_t.high_value)
  return high_value_;
}
void CSVCMsg_SendTable_sendprop_t::set_high_value(float value) {
  set_has_high_value();
  high_value_ = value;
  // @@protoc_insertion_point(field_set:CSVCMsg_SendTable.sendprop_t.high_value)
}

// optional int32 num_bits = 9;
bool CSVCMsg_SendTable_sendprop_t::has_num_bits() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CSVCMsg_SendTable_sendprop_t::set_has_num_bits() {
  _has_bits_[0] |= 0x00000100u;
}
void CSVCMsg_SendTable_sendprop_t::clear_has_num_bits() {
  _has_bits_[0] &= ~0x00000100u;
}
void CSVCMsg_SendTable_sendprop_t::clear_num_bits() {
  num_bits_ = 0;
  clear_has_num_bits();
}
::google::protobuf::int32 CSVCMsg_SendTable_sendprop_t::num_bits() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_SendTable.sendprop_t.num_bits)
  return num_bits_;
}
void CSVCMsg_SendTable_sendprop_t::set_num_bits(::google::protobuf::int32 value) {
  set_has_num_bits();
  num_bits_ = value;
  // @@protoc_insertion_point(field_set:CSVCMsg_SendTable.sendprop_t.num_bits)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSVCMsg_SendTable::kIsEndFieldNumber;
const int CSVCMsg_SendTable::kNetTableNameFieldNumber;
const int CSVCMsg_SendTable::kNeedsDecoderFieldNumber;
const int CSVCMsg_SendTable::kPropsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSVCMsg_SendTable::CSVCMsg_SendTable()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_netmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSVCMsg_SendTable)
}
CSVCMsg_SendTable::CSVCMsg_SendTable(const CSVCMsg_SendTable& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      props_(from.props_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  net_table_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_net_table_name()) {
    net_table_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.net_table_name_);
  }
  ::memcpy(&is_end_, &from.is_end_,
    reinterpret_cast<char*>(&needs_decoder_) -
    reinterpret_cast<char*>(&is_end_) + sizeof(needs_decoder_));
  // @@protoc_insertion_point(copy_constructor:CSVCMsg_SendTable)
}

void CSVCMsg_SendTable::SharedCtor() {
  _cached_size_ = 0;
  net_table_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&is_end_, 0, reinterpret_cast<char*>(&needs_decoder_) -
    reinterpret_cast<char*>(&is_end_) + sizeof(needs_decoder_));
}

CSVCMsg_SendTable::~CSVCMsg_SendTable() {
  // @@protoc_insertion_point(destructor:CSVCMsg_SendTable)
  SharedDtor();
}

void CSVCMsg_SendTable::SharedDtor() {
  net_table_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CSVCMsg_SendTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSVCMsg_SendTable::descriptor() {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[29].descriptor;
}

const CSVCMsg_SendTable& CSVCMsg_SendTable::default_instance() {
  protobuf_netmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CSVCMsg_SendTable* CSVCMsg_SendTable::New(::google::protobuf::Arena* arena) const {
  CSVCMsg_SendTable* n = new CSVCMsg_SendTable;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSVCMsg_SendTable::Clear() {
// @@protoc_insertion_point(message_clear_start:CSVCMsg_SendTable)
  props_.Clear();
  if (has_net_table_name()) {
    GOOGLE_DCHECK(!net_table_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*net_table_name_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&is_end_, 0, reinterpret_cast<char*>(&needs_decoder_) -
      reinterpret_cast<char*>(&is_end_) + sizeof(needs_decoder_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSVCMsg_SendTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSVCMsg_SendTable)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_end = 1;
      case 1: {
        if (tag == 8u) {
          set_has_is_end();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string net_table_name = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_net_table_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->net_table_name().data(), this->net_table_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CSVCMsg_SendTable.net_table_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool needs_decoder = 3;
      case 3: {
        if (tag == 24u) {
          set_has_needs_decoder();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &needs_decoder_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .CSVCMsg_SendTable.sendprop_t props = 4;
      case 4: {
        if (tag == 34u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_props()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSVCMsg_SendTable)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSVCMsg_SendTable)
  return false;
#undef DO_
}

void CSVCMsg_SendTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSVCMsg_SendTable)
  // optional bool is_end = 1;
  if (has_is_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_end(), output);
  }

  // optional string net_table_name = 2;
  if (has_net_table_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->net_table_name().data(), this->net_table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSVCMsg_SendTable.net_table_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->net_table_name(), output);
  }

  // optional bool needs_decoder = 3;
  if (has_needs_decoder()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->needs_decoder(), output);
  }

  // repeated .CSVCMsg_SendTable.sendprop_t props = 4;
  for (unsigned int i = 0, n = this->props_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->props(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSVCMsg_SendTable)
}

::google::protobuf::uint8* CSVCMsg_SendTable::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSVCMsg_SendTable)
  // optional bool is_end = 1;
  if (has_is_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_end(), target);
  }

  // optional string net_table_name = 2;
  if (has_net_table_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->net_table_name().data(), this->net_table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSVCMsg_SendTable.net_table_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->net_table_name(), target);
  }

  // optional bool needs_decoder = 3;
  if (has_needs_decoder()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->needs_decoder(), target);
  }

  // repeated .CSVCMsg_SendTable.sendprop_t props = 4;
  for (unsigned int i = 0, n = this->props_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->props(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSVCMsg_SendTable)
  return target;
}

size_t CSVCMsg_SendTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSVCMsg_SendTable)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .CSVCMsg_SendTable.sendprop_t props = 4;
  {
    unsigned int count = this->props_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->props(i));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional string net_table_name = 2;
    if (has_net_table_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->net_table_name());
    }

    // optional bool is_end = 1;
    if (has_is_end()) {
      total_size += 1 + 1;
    }

    // optional bool needs_decoder = 3;
    if (has_needs_decoder()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSVCMsg_SendTable::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSVCMsg_SendTable)
  GOOGLE_DCHECK_NE(&from, this);
  const CSVCMsg_SendTable* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSVCMsg_SendTable>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSVCMsg_SendTable)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSVCMsg_SendTable)
    MergeFrom(*source);
  }
}

void CSVCMsg_SendTable::MergeFrom(const CSVCMsg_SendTable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSVCMsg_SendTable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  props_.MergeFrom(from.props_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_net_table_name()) {
      set_has_net_table_name();
      net_table_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.net_table_name_);
    }
    if (from.has_is_end()) {
      set_is_end(from.is_end());
    }
    if (from.has_needs_decoder()) {
      set_needs_decoder(from.needs_decoder());
    }
  }
}

void CSVCMsg_SendTable::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSVCMsg_SendTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSVCMsg_SendTable::CopyFrom(const CSVCMsg_SendTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSVCMsg_SendTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSVCMsg_SendTable::IsInitialized() const {
  return true;
}

void CSVCMsg_SendTable::Swap(CSVCMsg_SendTable* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSVCMsg_SendTable::InternalSwap(CSVCMsg_SendTable* other) {
  props_.UnsafeArenaSwap(&other->props_);
  net_table_name_.Swap(&other->net_table_name_);
  std::swap(is_end_, other->is_end_);
  std::swap(needs_decoder_, other->needs_decoder_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSVCMsg_SendTable::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[29];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CSVCMsg_SendTable

// optional bool is_end = 1;
bool CSVCMsg_SendTable::has_is_end() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CSVCMsg_SendTable::set_has_is_end() {
  _has_bits_[0] |= 0x00000002u;
}
void CSVCMsg_SendTable::clear_has_is_end() {
  _has_bits_[0] &= ~0x00000002u;
}
void CSVCMsg_SendTable::clear_is_end() {
  is_end_ = false;
  clear_has_is_end();
}
bool CSVCMsg_SendTable::is_end() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_SendTable.is_end)
  return is_end_;
}
void CSVCMsg_SendTable::set_is_end(bool value) {
  set_has_is_end();
  is_end_ = value;
  // @@protoc_insertion_point(field_set:CSVCMsg_SendTable.is_end)
}

// optional string net_table_name = 2;
bool CSVCMsg_SendTable::has_net_table_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CSVCMsg_SendTable::set_has_net_table_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CSVCMsg_SendTable::clear_has_net_table_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CSVCMsg_SendTable::clear_net_table_name() {
  net_table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_net_table_name();
}
const ::std::string& CSVCMsg_SendTable::net_table_name() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_SendTable.net_table_name)
  return net_table_name_.GetNoArena();
}
void CSVCMsg_SendTable::set_net_table_name(const ::std::string& value) {
  set_has_net_table_name();
  net_table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CSVCMsg_SendTable.net_table_name)
}
#if LANG_CXX11
void CSVCMsg_SendTable::set_net_table_name(::std::string&& value) {
  set_has_net_table_name();
  net_table_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CSVCMsg_SendTable.net_table_name)
}
#endif
void CSVCMsg_SendTable::set_net_table_name(const char* value) {
  set_has_net_table_name();
  net_table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CSVCMsg_SendTable.net_table_name)
}
void CSVCMsg_SendTable::set_net_table_name(const char* value, size_t size) {
  set_has_net_table_name();
  net_table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CSVCMsg_SendTable.net_table_name)
}
::std::string* CSVCMsg_SendTable::mutable_net_table_name() {
  set_has_net_table_name();
  // @@protoc_insertion_point(field_mutable:CSVCMsg_SendTable.net_table_name)
  return net_table_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CSVCMsg_SendTable::release_net_table_name() {
  // @@protoc_insertion_point(field_release:CSVCMsg_SendTable.net_table_name)
  clear_has_net_table_name();
  return net_table_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CSVCMsg_SendTable::set_allocated_net_table_name(::std::string* net_table_name) {
  if (net_table_name != NULL) {
    set_has_net_table_name();
  } else {
    clear_has_net_table_name();
  }
  net_table_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), net_table_name);
  // @@protoc_insertion_point(field_set_allocated:CSVCMsg_SendTable.net_table_name)
}

// optional bool needs_decoder = 3;
bool CSVCMsg_SendTable::has_needs_decoder() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CSVCMsg_SendTable::set_has_needs_decoder() {
  _has_bits_[0] |= 0x00000004u;
}
void CSVCMsg_SendTable::clear_has_needs_decoder() {
  _has_bits_[0] &= ~0x00000004u;
}
void CSVCMsg_SendTable::clear_needs_decoder() {
  needs_decoder_ = false;
  clear_has_needs_decoder();
}
bool CSVCMsg_SendTable::needs_decoder() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_SendTable.needs_decoder)
  return needs_decoder_;
}
void CSVCMsg_SendTable::set_needs_decoder(bool value) {
  set_has_needs_decoder();
  needs_decoder_ = value;
  // @@protoc_insertion_point(field_set:CSVCMsg_SendTable.needs_decoder)
}

// repeated .CSVCMsg_SendTable.sendprop_t props = 4;
int CSVCMsg_SendTable::props_size() const {
  return props_.size();
}
void CSVCMsg_SendTable::clear_props() {
  props_.Clear();
}
const ::CSVCMsg_SendTable_sendprop_t& CSVCMsg_SendTable::props(int index) const {
  // @@protoc_insertion_point(field_get:CSVCMsg_SendTable.props)
  return props_.Get(index);
}
::CSVCMsg_SendTable_sendprop_t* CSVCMsg_SendTable::mutable_props(int index) {
  // @@protoc_insertion_point(field_mutable:CSVCMsg_SendTable.props)
  return props_.Mutable(index);
}
::CSVCMsg_SendTable_sendprop_t* CSVCMsg_SendTable::add_props() {
  // @@protoc_insertion_point(field_add:CSVCMsg_SendTable.props)
  return props_.Add();
}
::google::protobuf::RepeatedPtrField< ::CSVCMsg_SendTable_sendprop_t >*
CSVCMsg_SendTable::mutable_props() {
  // @@protoc_insertion_point(field_mutable_list:CSVCMsg_SendTable.props)
  return &props_;
}
const ::google::protobuf::RepeatedPtrField< ::CSVCMsg_SendTable_sendprop_t >&
CSVCMsg_SendTable::props() const {
  // @@protoc_insertion_point(field_list:CSVCMsg_SendTable.props)
  return props_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSVCMsg_Print::kTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSVCMsg_Print::CSVCMsg_Print()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_netmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSVCMsg_Print)
}
CSVCMsg_Print::CSVCMsg_Print(const CSVCMsg_Print& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_text()) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  // @@protoc_insertion_point(copy_constructor:CSVCMsg_Print)
}

void CSVCMsg_Print::SharedCtor() {
  _cached_size_ = 0;
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CSVCMsg_Print::~CSVCMsg_Print() {
  // @@protoc_insertion_point(destructor:CSVCMsg_Print)
  SharedDtor();
}

void CSVCMsg_Print::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CSVCMsg_Print::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSVCMsg_Print::descriptor() {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[30].descriptor;
}

const CSVCMsg_Print& CSVCMsg_Print::default_instance() {
  protobuf_netmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CSVCMsg_Print* CSVCMsg_Print::New(::google::protobuf::Arena* arena) const {
  CSVCMsg_Print* n = new CSVCMsg_Print;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSVCMsg_Print::Clear() {
// @@protoc_insertion_point(message_clear_start:CSVCMsg_Print)
  if (has_text()) {
    GOOGLE_DCHECK(!text_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*text_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSVCMsg_Print::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSVCMsg_Print)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string text = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CSVCMsg_Print.text");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSVCMsg_Print)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSVCMsg_Print)
  return false;
#undef DO_
}

void CSVCMsg_Print::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSVCMsg_Print)
  // optional string text = 1;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSVCMsg_Print.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->text(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSVCMsg_Print)
}

::google::protobuf::uint8* CSVCMsg_Print::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSVCMsg_Print)
  // optional string text = 1;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSVCMsg_Print.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->text(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSVCMsg_Print)
  return target;
}

size_t CSVCMsg_Print::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSVCMsg_Print)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional string text = 1;
  if (has_text()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->text());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSVCMsg_Print::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSVCMsg_Print)
  GOOGLE_DCHECK_NE(&from, this);
  const CSVCMsg_Print* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSVCMsg_Print>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSVCMsg_Print)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSVCMsg_Print)
    MergeFrom(*source);
  }
}

void CSVCMsg_Print::MergeFrom(const CSVCMsg_Print& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSVCMsg_Print)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_text()) {
    set_has_text();
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
}

void CSVCMsg_Print::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSVCMsg_Print)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSVCMsg_Print::CopyFrom(const CSVCMsg_Print& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSVCMsg_Print)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSVCMsg_Print::IsInitialized() const {
  return true;
}

void CSVCMsg_Print::Swap(CSVCMsg_Print* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSVCMsg_Print::InternalSwap(CSVCMsg_Print* other) {
  text_.Swap(&other->text_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSVCMsg_Print::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[30];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CSVCMsg_Print

// optional string text = 1;
bool CSVCMsg_Print::has_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CSVCMsg_Print::set_has_text() {
  _has_bits_[0] |= 0x00000001u;
}
void CSVCMsg_Print::clear_has_text() {
  _has_bits_[0] &= ~0x00000001u;
}
void CSVCMsg_Print::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text();
}
const ::std::string& CSVCMsg_Print::text() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_Print.text)
  return text_.GetNoArena();
}
void CSVCMsg_Print::set_text(const ::std::string& value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CSVCMsg_Print.text)
}
#if LANG_CXX11
void CSVCMsg_Print::set_text(::std::string&& value) {
  set_has_text();
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CSVCMsg_Print.text)
}
#endif
void CSVCMsg_Print::set_text(const char* value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CSVCMsg_Print.text)
}
void CSVCMsg_Print::set_text(const char* value, size_t size) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CSVCMsg_Print.text)
}
::std::string* CSVCMsg_Print::mutable_text() {
  set_has_text();
  // @@protoc_insertion_point(field_mutable:CSVCMsg_Print.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CSVCMsg_Print::release_text() {
  // @@protoc_insertion_point(field_release:CSVCMsg_Print.text)
  clear_has_text();
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CSVCMsg_Print::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    set_has_text();
  } else {
    clear_has_text();
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:CSVCMsg_Print.text)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSVCMsg_SetPause::kPausedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSVCMsg_SetPause::CSVCMsg_SetPause()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_netmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSVCMsg_SetPause)
}
CSVCMsg_SetPause::CSVCMsg_SetPause(const CSVCMsg_SetPause& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  paused_ = from.paused_;
  // @@protoc_insertion_point(copy_constructor:CSVCMsg_SetPause)
}

void CSVCMsg_SetPause::SharedCtor() {
  _cached_size_ = 0;
  paused_ = false;
}

CSVCMsg_SetPause::~CSVCMsg_SetPause() {
  // @@protoc_insertion_point(destructor:CSVCMsg_SetPause)
  SharedDtor();
}

void CSVCMsg_SetPause::SharedDtor() {
}

void CSVCMsg_SetPause::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSVCMsg_SetPause::descriptor() {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[31].descriptor;
}

const CSVCMsg_SetPause& CSVCMsg_SetPause::default_instance() {
  protobuf_netmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CSVCMsg_SetPause* CSVCMsg_SetPause::New(::google::protobuf::Arena* arena) const {
  CSVCMsg_SetPause* n = new CSVCMsg_SetPause;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSVCMsg_SetPause::Clear() {
// @@protoc_insertion_point(message_clear_start:CSVCMsg_SetPause)
  paused_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSVCMsg_SetPause::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSVCMsg_SetPause)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool paused = 1;
      case 1: {
        if (tag == 8u) {
          set_has_paused();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &paused_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSVCMsg_SetPause)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSVCMsg_SetPause)
  return false;
#undef DO_
}

void CSVCMsg_SetPause::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSVCMsg_SetPause)
  // optional bool paused = 1;
  if (has_paused()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->paused(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSVCMsg_SetPause)
}

::google::protobuf::uint8* CSVCMsg_SetPause::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSVCMsg_SetPause)
  // optional bool paused = 1;
  if (has_paused()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->paused(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSVCMsg_SetPause)
  return target;
}

size_t CSVCMsg_SetPause::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSVCMsg_SetPause)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional bool paused = 1;
  if (has_paused()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSVCMsg_SetPause::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSVCMsg_SetPause)
  GOOGLE_DCHECK_NE(&from, this);
  const CSVCMsg_SetPause* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSVCMsg_SetPause>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSVCMsg_SetPause)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSVCMsg_SetPause)
    MergeFrom(*source);
  }
}

void CSVCMsg_SetPause::MergeFrom(const CSVCMsg_SetPause& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSVCMsg_SetPause)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_paused()) {
    set_paused(from.paused());
  }
}

void CSVCMsg_SetPause::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSVCMsg_SetPause)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSVCMsg_SetPause::CopyFrom(const CSVCMsg_SetPause& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSVCMsg_SetPause)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSVCMsg_SetPause::IsInitialized() const {
  return true;
}

void CSVCMsg_SetPause::Swap(CSVCMsg_SetPause* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSVCMsg_SetPause::InternalSwap(CSVCMsg_SetPause* other) {
  std::swap(paused_, other->paused_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSVCMsg_SetPause::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[31];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CSVCMsg_SetPause

// optional bool paused = 1;
bool CSVCMsg_SetPause::has_paused() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CSVCMsg_SetPause::set_has_paused() {
  _has_bits_[0] |= 0x00000001u;
}
void CSVCMsg_SetPause::clear_has_paused() {
  _has_bits_[0] &= ~0x00000001u;
}
void CSVCMsg_SetPause::clear_paused() {
  paused_ = false;
  clear_has_paused();
}
bool CSVCMsg_SetPause::paused() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_SetPause.paused)
  return paused_;
}
void CSVCMsg_SetPause::set_paused(bool value) {
  set_has_paused();
  paused_ = value;
  // @@protoc_insertion_point(field_set:CSVCMsg_SetPause.paused)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSVCMsg_SetView::kEntityIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSVCMsg_SetView::CSVCMsg_SetView()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_netmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSVCMsg_SetView)
}
CSVCMsg_SetView::CSVCMsg_SetView(const CSVCMsg_SetView& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  entity_index_ = from.entity_index_;
  // @@protoc_insertion_point(copy_constructor:CSVCMsg_SetView)
}

void CSVCMsg_SetView::SharedCtor() {
  _cached_size_ = 0;
  entity_index_ = 0;
}

CSVCMsg_SetView::~CSVCMsg_SetView() {
  // @@protoc_insertion_point(destructor:CSVCMsg_SetView)
  SharedDtor();
}

void CSVCMsg_SetView::SharedDtor() {
}

void CSVCMsg_SetView::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSVCMsg_SetView::descriptor() {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[32].descriptor;
}

const CSVCMsg_SetView& CSVCMsg_SetView::default_instance() {
  protobuf_netmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CSVCMsg_SetView* CSVCMsg_SetView::New(::google::protobuf::Arena* arena) const {
  CSVCMsg_SetView* n = new CSVCMsg_SetView;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSVCMsg_SetView::Clear() {
// @@protoc_insertion_point(message_clear_start:CSVCMsg_SetView)
  entity_index_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSVCMsg_SetView::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSVCMsg_SetView)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 entity_index = 1;
      case 1: {
        if (tag == 8u) {
          set_has_entity_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &entity_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSVCMsg_SetView)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSVCMsg_SetView)
  return false;
#undef DO_
}

void CSVCMsg_SetView::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSVCMsg_SetView)
  // optional int32 entity_index = 1;
  if (has_entity_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->entity_index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSVCMsg_SetView)
}

::google::protobuf::uint8* CSVCMsg_SetView::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSVCMsg_SetView)
  // optional int32 entity_index = 1;
  if (has_entity_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->entity_index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSVCMsg_SetView)
  return target;
}

size_t CSVCMsg_SetView::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSVCMsg_SetView)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional int32 entity_index = 1;
  if (has_entity_index()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->entity_index());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSVCMsg_SetView::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSVCMsg_SetView)
  GOOGLE_DCHECK_NE(&from, this);
  const CSVCMsg_SetView* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSVCMsg_SetView>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSVCMsg_SetView)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSVCMsg_SetView)
    MergeFrom(*source);
  }
}

void CSVCMsg_SetView::MergeFrom(const CSVCMsg_SetView& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSVCMsg_SetView)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_entity_index()) {
    set_entity_index(from.entity_index());
  }
}

void CSVCMsg_SetView::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSVCMsg_SetView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSVCMsg_SetView::CopyFrom(const CSVCMsg_SetView& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSVCMsg_SetView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSVCMsg_SetView::IsInitialized() const {
  return true;
}

void CSVCMsg_SetView::Swap(CSVCMsg_SetView* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSVCMsg_SetView::InternalSwap(CSVCMsg_SetView* other) {
  std::swap(entity_index_, other->entity_index_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSVCMsg_SetView::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[32];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CSVCMsg_SetView

// optional int32 entity_index = 1;
bool CSVCMsg_SetView::has_entity_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CSVCMsg_SetView::set_has_entity_index() {
  _has_bits_[0] |= 0x00000001u;
}
void CSVCMsg_SetView::clear_has_entity_index() {
  _has_bits_[0] &= ~0x00000001u;
}
void CSVCMsg_SetView::clear_entity_index() {
  entity_index_ = 0;
  clear_has_entity_index();
}
::google::protobuf::int32 CSVCMsg_SetView::entity_index() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_SetView.entity_index)
  return entity_index_;
}
void CSVCMsg_SetView::set_entity_index(::google::protobuf::int32 value) {
  set_has_entity_index();
  entity_index_ = value;
  // @@protoc_insertion_point(field_set:CSVCMsg_SetView.entity_index)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSVCMsg_CreateStringTable::kNameFieldNumber;
const int CSVCMsg_CreateStringTable::kMaxEntriesFieldNumber;
const int CSVCMsg_CreateStringTable::kNumEntriesFieldNumber;
const int CSVCMsg_CreateStringTable::kUserDataFixedSizeFieldNumber;
const int CSVCMsg_CreateStringTable::kUserDataSizeFieldNumber;
const int CSVCMsg_CreateStringTable::kUserDataSizeBitsFieldNumber;
const int CSVCMsg_CreateStringTable::kFlagsFieldNumber;
const int CSVCMsg_CreateStringTable::kStringDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSVCMsg_CreateStringTable::CSVCMsg_CreateStringTable()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_netmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSVCMsg_CreateStringTable)
}
CSVCMsg_CreateStringTable::CSVCMsg_CreateStringTable(const CSVCMsg_CreateStringTable& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  string_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_string_data()) {
    string_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.string_data_);
  }
  ::memcpy(&max_entries_, &from.max_entries_,
    reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&max_entries_) + sizeof(flags_));
  // @@protoc_insertion_point(copy_constructor:CSVCMsg_CreateStringTable)
}

void CSVCMsg_CreateStringTable::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  string_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&max_entries_, 0, reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&max_entries_) + sizeof(flags_));
}

CSVCMsg_CreateStringTable::~CSVCMsg_CreateStringTable() {
  // @@protoc_insertion_point(destructor:CSVCMsg_CreateStringTable)
  SharedDtor();
}

void CSVCMsg_CreateStringTable::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  string_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CSVCMsg_CreateStringTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSVCMsg_CreateStringTable::descriptor() {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[33].descriptor;
}

const CSVCMsg_CreateStringTable& CSVCMsg_CreateStringTable::default_instance() {
  protobuf_netmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CSVCMsg_CreateStringTable* CSVCMsg_CreateStringTable::New(::google::protobuf::Arena* arena) const {
  CSVCMsg_CreateStringTable* n = new CSVCMsg_CreateStringTable;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSVCMsg_CreateStringTable::Clear() {
// @@protoc_insertion_point(message_clear_start:CSVCMsg_CreateStringTable)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (has_string_data()) {
      GOOGLE_DCHECK(!string_data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*string_data_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 252u) {
    ::memset(&max_entries_, 0, reinterpret_cast<char*>(&flags_) -
      reinterpret_cast<char*>(&max_entries_) + sizeof(flags_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSVCMsg_CreateStringTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSVCMsg_CreateStringTable)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CSVCMsg_CreateStringTable.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_entries = 2;
      case 2: {
        if (tag == 16u) {
          set_has_max_entries();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_entries_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_entries = 3;
      case 3: {
        if (tag == 24u) {
          set_has_num_entries();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_entries_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool user_data_fixed_size = 4;
      case 4: {
        if (tag == 32u) {
          set_has_user_data_fixed_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &user_data_fixed_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 user_data_size = 5;
      case 5: {
        if (tag == 40u) {
          set_has_user_data_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_data_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 user_data_size_bits = 6;
      case 6: {
        if (tag == 48u) {
          set_has_user_data_size_bits();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_data_size_bits_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 flags = 7;
      case 7: {
        if (tag == 56u) {
          set_has_flags();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes string_data = 8;
      case 8: {
        if (tag == 66u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_string_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSVCMsg_CreateStringTable)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSVCMsg_CreateStringTable)
  return false;
#undef DO_
}

void CSVCMsg_CreateStringTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSVCMsg_CreateStringTable)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSVCMsg_CreateStringTable.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional int32 max_entries = 2;
  if (has_max_entries()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->max_entries(), output);
  }

  // optional int32 num_entries = 3;
  if (has_num_entries()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num_entries(), output);
  }

  // optional bool user_data_fixed_size = 4;
  if (has_user_data_fixed_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->user_data_fixed_size(), output);
  }

  // optional int32 user_data_size = 5;
  if (has_user_data_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->user_data_size(), output);
  }

  // optional int32 user_data_size_bits = 6;
  if (has_user_data_size_bits()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->user_data_size_bits(), output);
  }

  // optional int32 flags = 7;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->flags(), output);
  }

  // optional bytes string_data = 8;
  if (has_string_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->string_data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSVCMsg_CreateStringTable)
}

::google::protobuf::uint8* CSVCMsg_CreateStringTable::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSVCMsg_CreateStringTable)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSVCMsg_CreateStringTable.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional int32 max_entries = 2;
  if (has_max_entries()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->max_entries(), target);
  }

  // optional int32 num_entries = 3;
  if (has_num_entries()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num_entries(), target);
  }

  // optional bool user_data_fixed_size = 4;
  if (has_user_data_fixed_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->user_data_fixed_size(), target);
  }

  // optional int32 user_data_size = 5;
  if (has_user_data_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->user_data_size(), target);
  }

  // optional int32 user_data_size_bits = 6;
  if (has_user_data_size_bits()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->user_data_size_bits(), target);
  }

  // optional int32 flags = 7;
  if (has_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->flags(), target);
  }

  // optional bytes string_data = 8;
  if (has_string_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->string_data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSVCMsg_CreateStringTable)
  return target;
}

size_t CSVCMsg_CreateStringTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSVCMsg_CreateStringTable)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional bytes string_data = 8;
    if (has_string_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->string_data());
    }

    // optional int32 max_entries = 2;
    if (has_max_entries()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_entries());
    }

    // optional int32 num_entries = 3;
    if (has_num_entries()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_entries());
    }

    // optional bool user_data_fixed_size = 4;
    if (has_user_data_fixed_size()) {
      total_size += 1 + 1;
    }

    // optional int32 user_data_size = 5;
    if (has_user_data_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_data_size());
    }

    // optional int32 user_data_size_bits = 6;
    if (has_user_data_size_bits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_data_size_bits());
    }

    // optional int32 flags = 7;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flags());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSVCMsg_CreateStringTable::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSVCMsg_CreateStringTable)
  GOOGLE_DCHECK_NE(&from, this);
  const CSVCMsg_CreateStringTable* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSVCMsg_CreateStringTable>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSVCMsg_CreateStringTable)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSVCMsg_CreateStringTable)
    MergeFrom(*source);
  }
}

void CSVCMsg_CreateStringTable::MergeFrom(const CSVCMsg_CreateStringTable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSVCMsg_CreateStringTable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 255u) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_string_data()) {
      set_has_string_data();
      string_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.string_data_);
    }
    if (from.has_max_entries()) {
      set_max_entries(from.max_entries());
    }
    if (from.has_num_entries()) {
      set_num_entries(from.num_entries());
    }
    if (from.has_user_data_fixed_size()) {
      set_user_data_fixed_size(from.user_data_fixed_size());
    }
    if (from.has_user_data_size()) {
      set_user_data_size(from.user_data_size());
    }
    if (from.has_user_data_size_bits()) {
      set_user_data_size_bits(from.user_data_size_bits());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
  }
}

void CSVCMsg_CreateStringTable::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSVCMsg_CreateStringTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSVCMsg_CreateStringTable::CopyFrom(const CSVCMsg_CreateStringTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSVCMsg_CreateStringTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSVCMsg_CreateStringTable::IsInitialized() const {
  return true;
}

void CSVCMsg_CreateStringTable::Swap(CSVCMsg_CreateStringTable* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSVCMsg_CreateStringTable::InternalSwap(CSVCMsg_CreateStringTable* other) {
  name_.Swap(&other->name_);
  string_data_.Swap(&other->string_data_);
  std::swap(max_entries_, other->max_entries_);
  std::swap(num_entries_, other->num_entries_);
  std::swap(user_data_fixed_size_, other->user_data_fixed_size_);
  std::swap(user_data_size_, other->user_data_size_);
  std::swap(user_data_size_bits_, other->user_data_size_bits_);
  std::swap(flags_, other->flags_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSVCMsg_CreateStringTable::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[33];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CSVCMsg_CreateStringTable

// optional string name = 1;
bool CSVCMsg_CreateStringTable::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CSVCMsg_CreateStringTable::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CSVCMsg_CreateStringTable::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CSVCMsg_CreateStringTable::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& CSVCMsg_CreateStringTable::name() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_CreateStringTable.name)
  return name_.GetNoArena();
}
void CSVCMsg_CreateStringTable::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CSVCMsg_CreateStringTable.name)
}
#if LANG_CXX11
void CSVCMsg_CreateStringTable::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CSVCMsg_CreateStringTable.name)
}
#endif
void CSVCMsg_CreateStringTable::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CSVCMsg_CreateStringTable.name)
}
void CSVCMsg_CreateStringTable::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CSVCMsg_CreateStringTable.name)
}
::std::string* CSVCMsg_CreateStringTable::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:CSVCMsg_CreateStringTable.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CSVCMsg_CreateStringTable::release_name() {
  // @@protoc_insertion_point(field_release:CSVCMsg_CreateStringTable.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CSVCMsg_CreateStringTable::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:CSVCMsg_CreateStringTable.name)
}

// optional int32 max_entries = 2;
bool CSVCMsg_CreateStringTable::has_max_entries() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CSVCMsg_CreateStringTable::set_has_max_entries() {
  _has_bits_[0] |= 0x00000004u;
}
void CSVCMsg_CreateStringTable::clear_has_max_entries() {
  _has_bits_[0] &= ~0x00000004u;
}
void CSVCMsg_CreateStringTable::clear_max_entries() {
  max_entries_ = 0;
  clear_has_max_entries();
}
::google::protobuf::int32 CSVCMsg_CreateStringTable::max_entries() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_CreateStringTable.max_entries)
  return max_entries_;
}
void CSVCMsg_CreateStringTable::set_max_entries(::google::protobuf::int32 value) {
  set_has_max_entries();
  max_entries_ = value;
  // @@protoc_insertion_point(field_set:CSVCMsg_CreateStringTable.max_entries)
}

// optional int32 num_entries = 3;
bool CSVCMsg_CreateStringTable::has_num_entries() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CSVCMsg_CreateStringTable::set_has_num_entries() {
  _has_bits_[0] |= 0x00000008u;
}
void CSVCMsg_CreateStringTable::clear_has_num_entries() {
  _has_bits_[0] &= ~0x00000008u;
}
void CSVCMsg_CreateStringTable::clear_num_entries() {
  num_entries_ = 0;
  clear_has_num_entries();
}
::google::protobuf::int32 CSVCMsg_CreateStringTable::num_entries() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_CreateStringTable.num_entries)
  return num_entries_;
}
void CSVCMsg_CreateStringTable::set_num_entries(::google::protobuf::int32 value) {
  set_has_num_entries();
  num_entries_ = value;
  // @@protoc_insertion_point(field_set:CSVCMsg_CreateStringTable.num_entries)
}

// optional bool user_data_fixed_size = 4;
bool CSVCMsg_CreateStringTable::has_user_data_fixed_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CSVCMsg_CreateStringTable::set_has_user_data_fixed_size() {
  _has_bits_[0] |= 0x00000010u;
}
void CSVCMsg_CreateStringTable::clear_has_user_data_fixed_size() {
  _has_bits_[0] &= ~0x00000010u;
}
void CSVCMsg_CreateStringTable::clear_user_data_fixed_size() {
  user_data_fixed_size_ = false;
  clear_has_user_data_fixed_size();
}
bool CSVCMsg_CreateStringTable::user_data_fixed_size() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_CreateStringTable.user_data_fixed_size)
  return user_data_fixed_size_;
}
void CSVCMsg_CreateStringTable::set_user_data_fixed_size(bool value) {
  set_has_user_data_fixed_size();
  user_data_fixed_size_ = value;
  // @@protoc_insertion_point(field_set:CSVCMsg_CreateStringTable.user_data_fixed_size)
}

// optional int32 user_data_size = 5;
bool CSVCMsg_CreateStringTable::has_user_data_size() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CSVCMsg_CreateStringTable::set_has_user_data_size() {
  _has_bits_[0] |= 0x00000020u;
}
void CSVCMsg_CreateStringTable::clear_has_user_data_size() {
  _has_bits_[0] &= ~0x00000020u;
}
void CSVCMsg_CreateStringTable::clear_user_data_size() {
  user_data_size_ = 0;
  clear_has_user_data_size();
}
::google::protobuf::int32 CSVCMsg_CreateStringTable::user_data_size() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_CreateStringTable.user_data_size)
  return user_data_size_;
}
void CSVCMsg_CreateStringTable::set_user_data_size(::google::protobuf::int32 value) {
  set_has_user_data_size();
  user_data_size_ = value;
  // @@protoc_insertion_point(field_set:CSVCMsg_CreateStringTable.user_data_size)
}

// optional int32 user_data_size_bits = 6;
bool CSVCMsg_CreateStringTable::has_user_data_size_bits() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CSVCMsg_CreateStringTable::set_has_user_data_size_bits() {
  _has_bits_[0] |= 0x00000040u;
}
void CSVCMsg_CreateStringTable::clear_has_user_data_size_bits() {
  _has_bits_[0] &= ~0x00000040u;
}
void CSVCMsg_CreateStringTable::clear_user_data_size_bits() {
  user_data_size_bits_ = 0;
  clear_has_user_data_size_bits();
}
::google::protobuf::int32 CSVCMsg_CreateStringTable::user_data_size_bits() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_CreateStringTable.user_data_size_bits)
  return user_data_size_bits_;
}
void CSVCMsg_CreateStringTable::set_user_data_size_bits(::google::protobuf::int32 value) {
  set_has_user_data_size_bits();
  user_data_size_bits_ = value;
  // @@protoc_insertion_point(field_set:CSVCMsg_CreateStringTable.user_data_size_bits)
}

// optional int32 flags = 7;
bool CSVCMsg_CreateStringTable::has_flags() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CSVCMsg_CreateStringTable::set_has_flags() {
  _has_bits_[0] |= 0x00000080u;
}
void CSVCMsg_CreateStringTable::clear_has_flags() {
  _has_bits_[0] &= ~0x00000080u;
}
void CSVCMsg_CreateStringTable::clear_flags() {
  flags_ = 0;
  clear_has_flags();
}
::google::protobuf::int32 CSVCMsg_CreateStringTable::flags() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_CreateStringTable.flags)
  return flags_;
}
void CSVCMsg_CreateStringTable::set_flags(::google::protobuf::int32 value) {
  set_has_flags();
  flags_ = value;
  // @@protoc_insertion_point(field_set:CSVCMsg_CreateStringTable.flags)
}

// optional bytes string_data = 8;
bool CSVCMsg_CreateStringTable::has_string_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CSVCMsg_CreateStringTable::set_has_string_data() {
  _has_bits_[0] |= 0x00000002u;
}
void CSVCMsg_CreateStringTable::clear_has_string_data() {
  _has_bits_[0] &= ~0x00000002u;
}
void CSVCMsg_CreateStringTable::clear_string_data() {
  string_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_string_data();
}
const ::std::string& CSVCMsg_CreateStringTable::string_data() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_CreateStringTable.string_data)
  return string_data_.GetNoArena();
}
void CSVCMsg_CreateStringTable::set_string_data(const ::std::string& value) {
  set_has_string_data();
  string_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CSVCMsg_CreateStringTable.string_data)
}
#if LANG_CXX11
void CSVCMsg_CreateStringTable::set_string_data(::std::string&& value) {
  set_has_string_data();
  string_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CSVCMsg_CreateStringTable.string_data)
}
#endif
void CSVCMsg_CreateStringTable::set_string_data(const char* value) {
  set_has_string_data();
  string_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CSVCMsg_CreateStringTable.string_data)
}
void CSVCMsg_CreateStringTable::set_string_data(const void* value, size_t size) {
  set_has_string_data();
  string_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CSVCMsg_CreateStringTable.string_data)
}
::std::string* CSVCMsg_CreateStringTable::mutable_string_data() {
  set_has_string_data();
  // @@protoc_insertion_point(field_mutable:CSVCMsg_CreateStringTable.string_data)
  return string_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CSVCMsg_CreateStringTable::release_string_data() {
  // @@protoc_insertion_point(field_release:CSVCMsg_CreateStringTable.string_data)
  clear_has_string_data();
  return string_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CSVCMsg_CreateStringTable::set_allocated_string_data(::std::string* string_data) {
  if (string_data != NULL) {
    set_has_string_data();
  } else {
    clear_has_string_data();
  }
  string_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), string_data);
  // @@protoc_insertion_point(field_set_allocated:CSVCMsg_CreateStringTable.string_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSVCMsg_UpdateStringTable::kTableIdFieldNumber;
const int CSVCMsg_UpdateStringTable::kNumChangedEntriesFieldNumber;
const int CSVCMsg_UpdateStringTable::kStringDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSVCMsg_UpdateStringTable::CSVCMsg_UpdateStringTable()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_netmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSVCMsg_UpdateStringTable)
}
CSVCMsg_UpdateStringTable::CSVCMsg_UpdateStringTable(const CSVCMsg_UpdateStringTable& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  string_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_string_data()) {
    string_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.string_data_);
  }
  ::memcpy(&table_id_, &from.table_id_,
    reinterpret_cast<char*>(&num_changed_entries_) -
    reinterpret_cast<char*>(&table_id_) + sizeof(num_changed_entries_));
  // @@protoc_insertion_point(copy_constructor:CSVCMsg_UpdateStringTable)
}

void CSVCMsg_UpdateStringTable::SharedCtor() {
  _cached_size_ = 0;
  string_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&table_id_, 0, reinterpret_cast<char*>(&num_changed_entries_) -
    reinterpret_cast<char*>(&table_id_) + sizeof(num_changed_entries_));
}

CSVCMsg_UpdateStringTable::~CSVCMsg_UpdateStringTable() {
  // @@protoc_insertion_point(destructor:CSVCMsg_UpdateStringTable)
  SharedDtor();
}

void CSVCMsg_UpdateStringTable::SharedDtor() {
  string_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CSVCMsg_UpdateStringTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSVCMsg_UpdateStringTable::descriptor() {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[34].descriptor;
}

const CSVCMsg_UpdateStringTable& CSVCMsg_UpdateStringTable::default_instance() {
  protobuf_netmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CSVCMsg_UpdateStringTable* CSVCMsg_UpdateStringTable::New(::google::protobuf::Arena* arena) const {
  CSVCMsg_UpdateStringTable* n = new CSVCMsg_UpdateStringTable;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSVCMsg_UpdateStringTable::Clear() {
// @@protoc_insertion_point(message_clear_start:CSVCMsg_UpdateStringTable)
  if (has_string_data()) {
    GOOGLE_DCHECK(!string_data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*string_data_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&table_id_, 0, reinterpret_cast<char*>(&num_changed_entries_) -
      reinterpret_cast<char*>(&table_id_) + sizeof(num_changed_entries_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSVCMsg_UpdateStringTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSVCMsg_UpdateStringTable)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 table_id = 1;
      case 1: {
        if (tag == 8u) {
          set_has_table_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &table_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_changed_entries = 2;
      case 2: {
        if (tag == 16u) {
          set_has_num_changed_entries();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_changed_entries_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes string_data = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_string_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSVCMsg_UpdateStringTable)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSVCMsg_UpdateStringTable)
  return false;
#undef DO_
}

void CSVCMsg_UpdateStringTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSVCMsg_UpdateStringTable)
  // optional int32 table_id = 1;
  if (has_table_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->table_id(), output);
  }

  // optional int32 num_changed_entries = 2;
  if (has_num_changed_entries()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num_changed_entries(), output);
  }

  // optional bytes string_data = 3;
  if (has_string_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->string_data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSVCMsg_UpdateStringTable)
}

::google::protobuf::uint8* CSVCMsg_UpdateStringTable::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSVCMsg_UpdateStringTable)
  // optional int32 table_id = 1;
  if (has_table_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->table_id(), target);
  }

  // optional int32 num_changed_entries = 2;
  if (has_num_changed_entries()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num_changed_entries(), target);
  }

  // optional bytes string_data = 3;
  if (has_string_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->string_data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSVCMsg_UpdateStringTable)
  return target;
}

size_t CSVCMsg_UpdateStringTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSVCMsg_UpdateStringTable)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional bytes string_data = 3;
    if (has_string_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->string_data());
    }

    // optional int32 table_id = 1;
    if (has_table_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->table_id());
    }

    // optional int32 num_changed_entries = 2;
    if (has_num_changed_entries()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_changed_entries());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSVCMsg_UpdateStringTable::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSVCMsg_UpdateStringTable)
  GOOGLE_DCHECK_NE(&from, this);
  const CSVCMsg_UpdateStringTable* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSVCMsg_UpdateStringTable>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSVCMsg_UpdateStringTable)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSVCMsg_UpdateStringTable)
    MergeFrom(*source);
  }
}

void CSVCMsg_UpdateStringTable::MergeFrom(const CSVCMsg_UpdateStringTable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSVCMsg_UpdateStringTable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_string_data()) {
      set_has_string_data();
      string_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.string_data_);
    }
    if (from.has_table_id()) {
      set_table_id(from.table_id());
    }
    if (from.has_num_changed_entries()) {
      set_num_changed_entries(from.num_changed_entries());
    }
  }
}

void CSVCMsg_UpdateStringTable::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSVCMsg_UpdateStringTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSVCMsg_UpdateStringTable::CopyFrom(const CSVCMsg_UpdateStringTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSVCMsg_UpdateStringTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSVCMsg_UpdateStringTable::IsInitialized() const {
  return true;
}

void CSVCMsg_UpdateStringTable::Swap(CSVCMsg_UpdateStringTable* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSVCMsg_UpdateStringTable::InternalSwap(CSVCMsg_UpdateStringTable* other) {
  string_data_.Swap(&other->string_data_);
  std::swap(table_id_, other->table_id_);
  std::swap(num_changed_entries_, other->num_changed_entries_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSVCMsg_UpdateStringTable::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[34];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CSVCMsg_UpdateStringTable

// optional int32 table_id = 1;
bool CSVCMsg_UpdateStringTable::has_table_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CSVCMsg_UpdateStringTable::set_has_table_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CSVCMsg_UpdateStringTable::clear_has_table_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CSVCMsg_UpdateStringTable::clear_table_id() {
  table_id_ = 0;
  clear_has_table_id();
}
::google::protobuf::int32 CSVCMsg_UpdateStringTable::table_id() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_UpdateStringTable.table_id)
  return table_id_;
}
void CSVCMsg_UpdateStringTable::set_table_id(::google::protobuf::int32 value) {
  set_has_table_id();
  table_id_ = value;
  // @@protoc_insertion_point(field_set:CSVCMsg_UpdateStringTable.table_id)
}

// optional int32 num_changed_entries = 2;
bool CSVCMsg_UpdateStringTable::has_num_changed_entries() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CSVCMsg_UpdateStringTable::set_has_num_changed_entries() {
  _has_bits_[0] |= 0x00000004u;
}
void CSVCMsg_UpdateStringTable::clear_has_num_changed_entries() {
  _has_bits_[0] &= ~0x00000004u;
}
void CSVCMsg_UpdateStringTable::clear_num_changed_entries() {
  num_changed_entries_ = 0;
  clear_has_num_changed_entries();
}
::google::protobuf::int32 CSVCMsg_UpdateStringTable::num_changed_entries() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_UpdateStringTable.num_changed_entries)
  return num_changed_entries_;
}
void CSVCMsg_UpdateStringTable::set_num_changed_entries(::google::protobuf::int32 value) {
  set_has_num_changed_entries();
  num_changed_entries_ = value;
  // @@protoc_insertion_point(field_set:CSVCMsg_UpdateStringTable.num_changed_entries)
}

// optional bytes string_data = 3;
bool CSVCMsg_UpdateStringTable::has_string_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CSVCMsg_UpdateStringTable::set_has_string_data() {
  _has_bits_[0] |= 0x00000001u;
}
void CSVCMsg_UpdateStringTable::clear_has_string_data() {
  _has_bits_[0] &= ~0x00000001u;
}
void CSVCMsg_UpdateStringTable::clear_string_data() {
  string_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_string_data();
}
const ::std::string& CSVCMsg_UpdateStringTable::string_data() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_UpdateStringTable.string_data)
  return string_data_.GetNoArena();
}
void CSVCMsg_UpdateStringTable::set_string_data(const ::std::string& value) {
  set_has_string_data();
  string_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CSVCMsg_UpdateStringTable.string_data)
}
#if LANG_CXX11
void CSVCMsg_UpdateStringTable::set_string_data(::std::string&& value) {
  set_has_string_data();
  string_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CSVCMsg_UpdateStringTable.string_data)
}
#endif
void CSVCMsg_UpdateStringTable::set_string_data(const char* value) {
  set_has_string_data();
  string_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CSVCMsg_UpdateStringTable.string_data)
}
void CSVCMsg_UpdateStringTable::set_string_data(const void* value, size_t size) {
  set_has_string_data();
  string_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CSVCMsg_UpdateStringTable.string_data)
}
::std::string* CSVCMsg_UpdateStringTable::mutable_string_data() {
  set_has_string_data();
  // @@protoc_insertion_point(field_mutable:CSVCMsg_UpdateStringTable.string_data)
  return string_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CSVCMsg_UpdateStringTable::release_string_data() {
  // @@protoc_insertion_point(field_release:CSVCMsg_UpdateStringTable.string_data)
  clear_has_string_data();
  return string_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CSVCMsg_UpdateStringTable::set_allocated_string_data(::std::string* string_data) {
  if (string_data != NULL) {
    set_has_string_data();
  } else {
    clear_has_string_data();
  }
  string_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), string_data);
  // @@protoc_insertion_point(field_set_allocated:CSVCMsg_UpdateStringTable.string_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSVCMsg_VoiceInit::kQualityFieldNumber;
const int CSVCMsg_VoiceInit::kCodecFieldNumber;
const int CSVCMsg_VoiceInit::kVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSVCMsg_VoiceInit::CSVCMsg_VoiceInit()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_netmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSVCMsg_VoiceInit)
}
CSVCMsg_VoiceInit::CSVCMsg_VoiceInit(const CSVCMsg_VoiceInit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  codec_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_codec()) {
    codec_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.codec_);
  }
  ::memcpy(&quality_, &from.quality_,
    reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&quality_) + sizeof(version_));
  // @@protoc_insertion_point(copy_constructor:CSVCMsg_VoiceInit)
}

void CSVCMsg_VoiceInit::SharedCtor() {
  _cached_size_ = 0;
  codec_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&quality_, 0, reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&quality_) + sizeof(version_));
}

CSVCMsg_VoiceInit::~CSVCMsg_VoiceInit() {
  // @@protoc_insertion_point(destructor:CSVCMsg_VoiceInit)
  SharedDtor();
}

void CSVCMsg_VoiceInit::SharedDtor() {
  codec_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CSVCMsg_VoiceInit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSVCMsg_VoiceInit::descriptor() {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[35].descriptor;
}

const CSVCMsg_VoiceInit& CSVCMsg_VoiceInit::default_instance() {
  protobuf_netmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CSVCMsg_VoiceInit* CSVCMsg_VoiceInit::New(::google::protobuf::Arena* arena) const {
  CSVCMsg_VoiceInit* n = new CSVCMsg_VoiceInit;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSVCMsg_VoiceInit::Clear() {
// @@protoc_insertion_point(message_clear_start:CSVCMsg_VoiceInit)
  if (has_codec()) {
    GOOGLE_DCHECK(!codec_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*codec_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&quality_, 0, reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&quality_) + sizeof(version_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSVCMsg_VoiceInit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSVCMsg_VoiceInit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 quality = 1;
      case 1: {
        if (tag == 8u) {
          set_has_quality();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string codec = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_codec()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->codec().data(), this->codec().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CSVCMsg_VoiceInit.codec");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 version = 3 [default = 0];
      case 3: {
        if (tag == 24u) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSVCMsg_VoiceInit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSVCMsg_VoiceInit)
  return false;
#undef DO_
}

void CSVCMsg_VoiceInit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSVCMsg_VoiceInit)
  // optional int32 quality = 1;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->quality(), output);
  }

  // optional string codec = 2;
  if (has_codec()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->codec().data(), this->codec().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSVCMsg_VoiceInit.codec");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->codec(), output);
  }

  // optional int32 version = 3 [default = 0];
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSVCMsg_VoiceInit)
}

::google::protobuf::uint8* CSVCMsg_VoiceInit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSVCMsg_VoiceInit)
  // optional int32 quality = 1;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->quality(), target);
  }

  // optional string codec = 2;
  if (has_codec()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->codec().data(), this->codec().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSVCMsg_VoiceInit.codec");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->codec(), target);
  }

  // optional int32 version = 3 [default = 0];
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSVCMsg_VoiceInit)
  return target;
}

size_t CSVCMsg_VoiceInit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSVCMsg_VoiceInit)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string codec = 2;
    if (has_codec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->codec());
    }

    // optional int32 quality = 1;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quality());
    }

    // optional int32 version = 3 [default = 0];
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSVCMsg_VoiceInit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSVCMsg_VoiceInit)
  GOOGLE_DCHECK_NE(&from, this);
  const CSVCMsg_VoiceInit* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSVCMsg_VoiceInit>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSVCMsg_VoiceInit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSVCMsg_VoiceInit)
    MergeFrom(*source);
  }
}

void CSVCMsg_VoiceInit::MergeFrom(const CSVCMsg_VoiceInit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSVCMsg_VoiceInit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_codec()) {
      set_has_codec();
      codec_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.codec_);
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
}

void CSVCMsg_VoiceInit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSVCMsg_VoiceInit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSVCMsg_VoiceInit::CopyFrom(const CSVCMsg_VoiceInit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSVCMsg_VoiceInit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSVCMsg_VoiceInit::IsInitialized() const {
  return true;
}

void CSVCMsg_VoiceInit::Swap(CSVCMsg_VoiceInit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSVCMsg_VoiceInit::InternalSwap(CSVCMsg_VoiceInit* other) {
  codec_.Swap(&other->codec_);
  std::swap(quality_, other->quality_);
  std::swap(version_, other->version_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSVCMsg_VoiceInit::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[35];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CSVCMsg_VoiceInit

// optional int32 quality = 1;
bool CSVCMsg_VoiceInit::has_quality() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CSVCMsg_VoiceInit::set_has_quality() {
  _has_bits_[0] |= 0x00000002u;
}
void CSVCMsg_VoiceInit::clear_has_quality() {
  _has_bits_[0] &= ~0x00000002u;
}
void CSVCMsg_VoiceInit::clear_quality() {
  quality_ = 0;
  clear_has_quality();
}
::google::protobuf::int32 CSVCMsg_VoiceInit::quality() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_VoiceInit.quality)
  return quality_;
}
void CSVCMsg_VoiceInit::set_quality(::google::protobuf::int32 value) {
  set_has_quality();
  quality_ = value;
  // @@protoc_insertion_point(field_set:CSVCMsg_VoiceInit.quality)
}

// optional string codec = 2;
bool CSVCMsg_VoiceInit::has_codec() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CSVCMsg_VoiceInit::set_has_codec() {
  _has_bits_[0] |= 0x00000001u;
}
void CSVCMsg_VoiceInit::clear_has_codec() {
  _has_bits_[0] &= ~0x00000001u;
}
void CSVCMsg_VoiceInit::clear_codec() {
  codec_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_codec();
}
const ::std::string& CSVCMsg_VoiceInit::codec() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_VoiceInit.codec)
  return codec_.GetNoArena();
}
void CSVCMsg_VoiceInit::set_codec(const ::std::string& value) {
  set_has_codec();
  codec_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CSVCMsg_VoiceInit.codec)
}
#if LANG_CXX11
void CSVCMsg_VoiceInit::set_codec(::std::string&& value) {
  set_has_codec();
  codec_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CSVCMsg_VoiceInit.codec)
}
#endif
void CSVCMsg_VoiceInit::set_codec(const char* value) {
  set_has_codec();
  codec_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CSVCMsg_VoiceInit.codec)
}
void CSVCMsg_VoiceInit::set_codec(const char* value, size_t size) {
  set_has_codec();
  codec_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CSVCMsg_VoiceInit.codec)
}
::std::string* CSVCMsg_VoiceInit::mutable_codec() {
  set_has_codec();
  // @@protoc_insertion_point(field_mutable:CSVCMsg_VoiceInit.codec)
  return codec_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CSVCMsg_VoiceInit::release_codec() {
  // @@protoc_insertion_point(field_release:CSVCMsg_VoiceInit.codec)
  clear_has_codec();
  return codec_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CSVCMsg_VoiceInit::set_allocated_codec(::std::string* codec) {
  if (codec != NULL) {
    set_has_codec();
  } else {
    clear_has_codec();
  }
  codec_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), codec);
  // @@protoc_insertion_point(field_set_allocated:CSVCMsg_VoiceInit.codec)
}

// optional int32 version = 3 [default = 0];
bool CSVCMsg_VoiceInit::has_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CSVCMsg_VoiceInit::set_has_version() {
  _has_bits_[0] |= 0x00000004u;
}
void CSVCMsg_VoiceInit::clear_has_version() {
  _has_bits_[0] &= ~0x00000004u;
}
void CSVCMsg_VoiceInit::clear_version() {
  version_ = 0;
  clear_has_version();
}
::google::protobuf::int32 CSVCMsg_VoiceInit::version() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_VoiceInit.version)
  return version_;
}
void CSVCMsg_VoiceInit::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:CSVCMsg_VoiceInit.version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSVCMsg_VoiceData::kClientFieldNumber;
const int CSVCMsg_VoiceData::kProximityFieldNumber;
const int CSVCMsg_VoiceData::kXuidFieldNumber;
const int CSVCMsg_VoiceData::kAudibleMaskFieldNumber;
const int CSVCMsg_VoiceData::kVoiceDataFieldNumber;
const int CSVCMsg_VoiceData::kCasterFieldNumber;
const int CSVCMsg_VoiceData::kFormatFieldNumber;
const int CSVCMsg_VoiceData::kSequenceBytesFieldNumber;
const int CSVCMsg_VoiceData::kSectionNumberFieldNumber;
const int CSVCMsg_VoiceData::kUncompressedSampleOffsetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSVCMsg_VoiceData::CSVCMsg_VoiceData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_netmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSVCMsg_VoiceData)
}
CSVCMsg_VoiceData::CSVCMsg_VoiceData(const CSVCMsg_VoiceData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  voice_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_voice_data()) {
    voice_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.voice_data_);
  }
  ::memcpy(&client_, &from.client_,
    reinterpret_cast<char*>(&format_) -
    reinterpret_cast<char*>(&client_) + sizeof(format_));
  // @@protoc_insertion_point(copy_constructor:CSVCMsg_VoiceData)
}

void CSVCMsg_VoiceData::SharedCtor() {
  _cached_size_ = 0;
  voice_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&client_, 0, reinterpret_cast<char*>(&uncompressed_sample_offset_) -
    reinterpret_cast<char*>(&client_) + sizeof(uncompressed_sample_offset_));
  format_ = 1;
}

CSVCMsg_VoiceData::~CSVCMsg_VoiceData() {
  // @@protoc_insertion_point(destructor:CSVCMsg_VoiceData)
  SharedDtor();
}

void CSVCMsg_VoiceData::SharedDtor() {
  voice_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CSVCMsg_VoiceData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSVCMsg_VoiceData::descriptor() {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[36].descriptor;
}

const CSVCMsg_VoiceData& CSVCMsg_VoiceData::default_instance() {
  protobuf_netmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CSVCMsg_VoiceData* CSVCMsg_VoiceData::New(::google::protobuf::Arena* arena) const {
  CSVCMsg_VoiceData* n = new CSVCMsg_VoiceData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSVCMsg_VoiceData::Clear() {
// @@protoc_insertion_point(message_clear_start:CSVCMsg_VoiceData)
  if (has_voice_data()) {
    GOOGLE_DCHECK(!voice_data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*voice_data_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 254u) {
    ::memset(&client_, 0, reinterpret_cast<char*>(&section_number_) -
      reinterpret_cast<char*>(&client_) + sizeof(section_number_));
  }
  if (_has_bits_[8 / 32] & 768u) {
    uncompressed_sample_offset_ = 0u;
    format_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSVCMsg_VoiceData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSVCMsg_VoiceData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 client = 1;
      case 1: {
        if (tag == 8u) {
          set_has_client();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool proximity = 2;
      case 2: {
        if (tag == 16u) {
          set_has_proximity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &proximity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 xuid = 3;
      case 3: {
        if (tag == 25u) {
          set_has_xuid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &xuid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 audible_mask = 4;
      case 4: {
        if (tag == 32u) {
          set_has_audible_mask();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &audible_mask_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes voice_data = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_voice_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool caster = 6;
      case 6: {
        if (tag == 48u) {
          set_has_caster();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &caster_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .VoiceDataFormat_t format = 7 [default = VOICEDATA_FORMAT_ENGINE];
      case 7: {
        if (tag == 56u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::VoiceDataFormat_t_IsValid(value)) {
            set_format(static_cast< ::VoiceDataFormat_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 sequence_bytes = 8;
      case 8: {
        if (tag == 64u) {
          set_has_sequence_bytes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sequence_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 section_number = 9;
      case 9: {
        if (tag == 72u) {
          set_has_section_number();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &section_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 uncompressed_sample_offset = 10;
      case 10: {
        if (tag == 80u) {
          set_has_uncompressed_sample_offset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uncompressed_sample_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSVCMsg_VoiceData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSVCMsg_VoiceData)
  return false;
#undef DO_
}

void CSVCMsg_VoiceData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSVCMsg_VoiceData)
  // optional int32 client = 1;
  if (has_client()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->client(), output);
  }

  // optional bool proximity = 2;
  if (has_proximity()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->proximity(), output);
  }

  // optional fixed64 xuid = 3;
  if (has_xuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->xuid(), output);
  }

  // optional int32 audible_mask = 4;
  if (has_audible_mask()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->audible_mask(), output);
  }

  // optional bytes voice_data = 5;
  if (has_voice_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->voice_data(), output);
  }

  // optional bool caster = 6;
  if (has_caster()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->caster(), output);
  }

  // optional .VoiceDataFormat_t format = 7 [default = VOICEDATA_FORMAT_ENGINE];
  if (has_format()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->format(), output);
  }

  // optional int32 sequence_bytes = 8;
  if (has_sequence_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->sequence_bytes(), output);
  }

  // optional uint32 section_number = 9;
  if (has_section_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->section_number(), output);
  }

  // optional uint32 uncompressed_sample_offset = 10;
  if (has_uncompressed_sample_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->uncompressed_sample_offset(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSVCMsg_VoiceData)
}

::google::protobuf::uint8* CSVCMsg_VoiceData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSVCMsg_VoiceData)
  // optional int32 client = 1;
  if (has_client()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->client(), target);
  }

  // optional bool proximity = 2;
  if (has_proximity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->proximity(), target);
  }

  // optional fixed64 xuid = 3;
  if (has_xuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->xuid(), target);
  }

  // optional int32 audible_mask = 4;
  if (has_audible_mask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->audible_mask(), target);
  }

  // optional bytes voice_data = 5;
  if (has_voice_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->voice_data(), target);
  }

  // optional bool caster = 6;
  if (has_caster()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->caster(), target);
  }

  // optional .VoiceDataFormat_t format = 7 [default = VOICEDATA_FORMAT_ENGINE];
  if (has_format()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->format(), target);
  }

  // optional int32 sequence_bytes = 8;
  if (has_sequence_bytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->sequence_bytes(), target);
  }

  // optional uint32 section_number = 9;
  if (has_section_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->section_number(), target);
  }

  // optional uint32 uncompressed_sample_offset = 10;
  if (has_uncompressed_sample_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->uncompressed_sample_offset(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSVCMsg_VoiceData)
  return target;
}

size_t CSVCMsg_VoiceData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSVCMsg_VoiceData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional bytes voice_data = 5;
    if (has_voice_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->voice_data());
    }

    // optional int32 client = 1;
    if (has_client()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->client());
    }

    // optional int32 audible_mask = 4;
    if (has_audible_mask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->audible_mask());
    }

    // optional fixed64 xuid = 3;
    if (has_xuid()) {
      total_size += 1 + 8;
    }

    // optional bool proximity = 2;
    if (has_proximity()) {
      total_size += 1 + 1;
    }

    // optional bool caster = 6;
    if (has_caster()) {
      total_size += 1 + 1;
    }

    // optional int32 sequence_bytes = 8;
    if (has_sequence_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sequence_bytes());
    }

    // optional uint32 section_number = 9;
    if (has_section_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->section_number());
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional uint32 uncompressed_sample_offset = 10;
    if (has_uncompressed_sample_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uncompressed_sample_offset());
    }

    // optional .VoiceDataFormat_t format = 7 [default = VOICEDATA_FORMAT_ENGINE];
    if (has_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->format());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSVCMsg_VoiceData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSVCMsg_VoiceData)
  GOOGLE_DCHECK_NE(&from, this);
  const CSVCMsg_VoiceData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSVCMsg_VoiceData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSVCMsg_VoiceData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSVCMsg_VoiceData)
    MergeFrom(*source);
  }
}

void CSVCMsg_VoiceData::MergeFrom(const CSVCMsg_VoiceData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSVCMsg_VoiceData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 255u) {
    if (from.has_voice_data()) {
      set_has_voice_data();
      voice_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.voice_data_);
    }
    if (from.has_client()) {
      set_client(from.client());
    }
    if (from.has_audible_mask()) {
      set_audible_mask(from.audible_mask());
    }
    if (from.has_xuid()) {
      set_xuid(from.xuid());
    }
    if (from.has_proximity()) {
      set_proximity(from.proximity());
    }
    if (from.has_caster()) {
      set_caster(from.caster());
    }
    if (from.has_sequence_bytes()) {
      set_sequence_bytes(from.sequence_bytes());
    }
    if (from.has_section_number()) {
      set_section_number(from.section_number());
    }
  }
  if (from._has_bits_[8 / 32] & 768u) {
    if (from.has_uncompressed_sample_offset()) {
      set_uncompressed_sample_offset(from.uncompressed_sample_offset());
    }
    if (from.has_format()) {
      set_format(from.format());
    }
  }
}

void CSVCMsg_VoiceData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSVCMsg_VoiceData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSVCMsg_VoiceData::CopyFrom(const CSVCMsg_VoiceData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSVCMsg_VoiceData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSVCMsg_VoiceData::IsInitialized() const {
  return true;
}

void CSVCMsg_VoiceData::Swap(CSVCMsg_VoiceData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSVCMsg_VoiceData::InternalSwap(CSVCMsg_VoiceData* other) {
  voice_data_.Swap(&other->voice_data_);
  std::swap(client_, other->client_);
  std::swap(audible_mask_, other->audible_mask_);
  std::swap(xuid_, other->xuid_);
  std::swap(proximity_, other->proximity_);
  std::swap(caster_, other->caster_);
  std::swap(sequence_bytes_, other->sequence_bytes_);
  std::swap(section_number_, other->section_number_);
  std::swap(uncompressed_sample_offset_, other->uncompressed_sample_offset_);
  std::swap(format_, other->format_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSVCMsg_VoiceData::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[36];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CSVCMsg_VoiceData

// optional int32 client = 1;
bool CSVCMsg_VoiceData::has_client() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CSVCMsg_VoiceData::set_has_client() {
  _has_bits_[0] |= 0x00000002u;
}
void CSVCMsg_VoiceData::clear_has_client() {
  _has_bits_[0] &= ~0x00000002u;
}
void CSVCMsg_VoiceData::clear_client() {
  client_ = 0;
  clear_has_client();
}
::google::protobuf::int32 CSVCMsg_VoiceData::client() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_VoiceData.client)
  return client_;
}
void CSVCMsg_VoiceData::set_client(::google::protobuf::int32 value) {
  set_has_client();
  client_ = value;
  // @@protoc_insertion_point(field_set:CSVCMsg_VoiceData.client)
}

// optional bool proximity = 2;
bool CSVCMsg_VoiceData::has_proximity() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CSVCMsg_VoiceData::set_has_proximity() {
  _has_bits_[0] |= 0x00000010u;
}
void CSVCMsg_VoiceData::clear_has_proximity() {
  _has_bits_[0] &= ~0x00000010u;
}
void CSVCMsg_VoiceData::clear_proximity() {
  proximity_ = false;
  clear_has_proximity();
}
bool CSVCMsg_VoiceData::proximity() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_VoiceData.proximity)
  return proximity_;
}
void CSVCMsg_VoiceData::set_proximity(bool value) {
  set_has_proximity();
  proximity_ = value;
  // @@protoc_insertion_point(field_set:CSVCMsg_VoiceData.proximity)
}

// optional fixed64 xuid = 3;
bool CSVCMsg_VoiceData::has_xuid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CSVCMsg_VoiceData::set_has_xuid() {
  _has_bits_[0] |= 0x00000008u;
}
void CSVCMsg_VoiceData::clear_has_xuid() {
  _has_bits_[0] &= ~0x00000008u;
}
void CSVCMsg_VoiceData::clear_xuid() {
  xuid_ = GOOGLE_ULONGLONG(0);
  clear_has_xuid();
}
::google::protobuf::uint64 CSVCMsg_VoiceData::xuid() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_VoiceData.xuid)
  return xuid_;
}
void CSVCMsg_VoiceData::set_xuid(::google::protobuf::uint64 value) {
  set_has_xuid();
  xuid_ = value;
  // @@protoc_insertion_point(field_set:CSVCMsg_VoiceData.xuid)
}

// optional int32 audible_mask = 4;
bool CSVCMsg_VoiceData::has_audible_mask() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CSVCMsg_VoiceData::set_has_audible_mask() {
  _has_bits_[0] |= 0x00000004u;
}
void CSVCMsg_VoiceData::clear_has_audible_mask() {
  _has_bits_[0] &= ~0x00000004u;
}
void CSVCMsg_VoiceData::clear_audible_mask() {
  audible_mask_ = 0;
  clear_has_audible_mask();
}
::google::protobuf::int32 CSVCMsg_VoiceData::audible_mask() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_VoiceData.audible_mask)
  return audible_mask_;
}
void CSVCMsg_VoiceData::set_audible_mask(::google::protobuf::int32 value) {
  set_has_audible_mask();
  audible_mask_ = value;
  // @@protoc_insertion_point(field_set:CSVCMsg_VoiceData.audible_mask)
}

// optional bytes voice_data = 5;
bool CSVCMsg_VoiceData::has_voice_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CSVCMsg_VoiceData::set_has_voice_data() {
  _has_bits_[0] |= 0x00000001u;
}
void CSVCMsg_VoiceData::clear_has_voice_data() {
  _has_bits_[0] &= ~0x00000001u;
}
void CSVCMsg_VoiceData::clear_voice_data() {
  voice_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_voice_data();
}
const ::std::string& CSVCMsg_VoiceData::voice_data() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_VoiceData.voice_data)
  return voice_data_.GetNoArena();
}
void CSVCMsg_VoiceData::set_voice_data(const ::std::string& value) {
  set_has_voice_data();
  voice_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CSVCMsg_VoiceData.voice_data)
}
#if LANG_CXX11
void CSVCMsg_VoiceData::set_voice_data(::std::string&& value) {
  set_has_voice_data();
  voice_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CSVCMsg_VoiceData.voice_data)
}
#endif
void CSVCMsg_VoiceData::set_voice_data(const char* value) {
  set_has_voice_data();
  voice_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CSVCMsg_VoiceData.voice_data)
}
void CSVCMsg_VoiceData::set_voice_data(const void* value, size_t size) {
  set_has_voice_data();
  voice_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CSVCMsg_VoiceData.voice_data)
}
::std::string* CSVCMsg_VoiceData::mutable_voice_data() {
  set_has_voice_data();
  // @@protoc_insertion_point(field_mutable:CSVCMsg_VoiceData.voice_data)
  return voice_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CSVCMsg_VoiceData::release_voice_data() {
  // @@protoc_insertion_point(field_release:CSVCMsg_VoiceData.voice_data)
  clear_has_voice_data();
  return voice_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CSVCMsg_VoiceData::set_allocated_voice_data(::std::string* voice_data) {
  if (voice_data != NULL) {
    set_has_voice_data();
  } else {
    clear_has_voice_data();
  }
  voice_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), voice_data);
  // @@protoc_insertion_point(field_set_allocated:CSVCMsg_VoiceData.voice_data)
}

// optional bool caster = 6;
bool CSVCMsg_VoiceData::has_caster() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CSVCMsg_VoiceData::set_has_caster() {
  _has_bits_[0] |= 0x00000020u;
}
void CSVCMsg_VoiceData::clear_has_caster() {
  _has_bits_[0] &= ~0x00000020u;
}
void CSVCMsg_VoiceData::clear_caster() {
  caster_ = false;
  clear_has_caster();
}
bool CSVCMsg_VoiceData::caster() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_VoiceData.caster)
  return caster_;
}
void CSVCMsg_VoiceData::set_caster(bool value) {
  set_has_caster();
  caster_ = value;
  // @@protoc_insertion_point(field_set:CSVCMsg_VoiceData.caster)
}

// optional .VoiceDataFormat_t format = 7 [default = VOICEDATA_FORMAT_ENGINE];
bool CSVCMsg_VoiceData::has_format() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CSVCMsg_VoiceData::set_has_format() {
  _has_bits_[0] |= 0x00000200u;
}
void CSVCMsg_VoiceData::clear_has_format() {
  _has_bits_[0] &= ~0x00000200u;
}
void CSVCMsg_VoiceData::clear_format() {
  format_ = 1;
  clear_has_format();
}
::VoiceDataFormat_t CSVCMsg_VoiceData::format() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_VoiceData.format)
  return static_cast< ::VoiceDataFormat_t >(format_);
}
void CSVCMsg_VoiceData::set_format(::VoiceDataFormat_t value) {
  assert(::VoiceDataFormat_t_IsValid(value));
  set_has_format();
  format_ = value;
  // @@protoc_insertion_point(field_set:CSVCMsg_VoiceData.format)
}

// optional int32 sequence_bytes = 8;
bool CSVCMsg_VoiceData::has_sequence_bytes() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CSVCMsg_VoiceData::set_has_sequence_bytes() {
  _has_bits_[0] |= 0x00000040u;
}
void CSVCMsg_VoiceData::clear_has_sequence_bytes() {
  _has_bits_[0] &= ~0x00000040u;
}
void CSVCMsg_VoiceData::clear_sequence_bytes() {
  sequence_bytes_ = 0;
  clear_has_sequence_bytes();
}
::google::protobuf::int32 CSVCMsg_VoiceData::sequence_bytes() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_VoiceData.sequence_bytes)
  return sequence_bytes_;
}
void CSVCMsg_VoiceData::set_sequence_bytes(::google::protobuf::int32 value) {
  set_has_sequence_bytes();
  sequence_bytes_ = value;
  // @@protoc_insertion_point(field_set:CSVCMsg_VoiceData.sequence_bytes)
}

// optional uint32 section_number = 9;
bool CSVCMsg_VoiceData::has_section_number() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CSVCMsg_VoiceData::set_has_section_number() {
  _has_bits_[0] |= 0x00000080u;
}
void CSVCMsg_VoiceData::clear_has_section_number() {
  _has_bits_[0] &= ~0x00000080u;
}
void CSVCMsg_VoiceData::clear_section_number() {
  section_number_ = 0u;
  clear_has_section_number();
}
::google::protobuf::uint32 CSVCMsg_VoiceData::section_number() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_VoiceData.section_number)
  return section_number_;
}
void CSVCMsg_VoiceData::set_section_number(::google::protobuf::uint32 value) {
  set_has_section_number();
  section_number_ = value;
  // @@protoc_insertion_point(field_set:CSVCMsg_VoiceData.section_number)
}

// optional uint32 uncompressed_sample_offset = 10;
bool CSVCMsg_VoiceData::has_uncompressed_sample_offset() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CSVCMsg_VoiceData::set_has_uncompressed_sample_offset() {
  _has_bits_[0] |= 0x00000100u;
}
void CSVCMsg_VoiceData::clear_has_uncompressed_sample_offset() {
  _has_bits_[0] &= ~0x00000100u;
}
void CSVCMsg_VoiceData::clear_uncompressed_sample_offset() {
  uncompressed_sample_offset_ = 0u;
  clear_has_uncompressed_sample_offset();
}
::google::protobuf::uint32 CSVCMsg_VoiceData::uncompressed_sample_offset() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_VoiceData.uncompressed_sample_offset)
  return uncompressed_sample_offset_;
}
void CSVCMsg_VoiceData::set_uncompressed_sample_offset(::google::protobuf::uint32 value) {
  set_has_uncompressed_sample_offset();
  uncompressed_sample_offset_ = value;
  // @@protoc_insertion_point(field_set:CSVCMsg_VoiceData.uncompressed_sample_offset)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSVCMsg_FixAngle::kRelativeFieldNumber;
const int CSVCMsg_FixAngle::kAngleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSVCMsg_FixAngle::CSVCMsg_FixAngle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_netmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSVCMsg_FixAngle)
}
CSVCMsg_FixAngle::CSVCMsg_FixAngle(const CSVCMsg_FixAngle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_angle()) {
    angle_ = new ::CMsgQAngle(*from.angle_);
  } else {
    angle_ = NULL;
  }
  relative_ = from.relative_;
  // @@protoc_insertion_point(copy_constructor:CSVCMsg_FixAngle)
}

void CSVCMsg_FixAngle::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&angle_, 0, reinterpret_cast<char*>(&relative_) -
    reinterpret_cast<char*>(&angle_) + sizeof(relative_));
}

CSVCMsg_FixAngle::~CSVCMsg_FixAngle() {
  // @@protoc_insertion_point(destructor:CSVCMsg_FixAngle)
  SharedDtor();
}

void CSVCMsg_FixAngle::SharedDtor() {
  if (this != internal_default_instance()) {
    delete angle_;
  }
}

void CSVCMsg_FixAngle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSVCMsg_FixAngle::descriptor() {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[37].descriptor;
}

const CSVCMsg_FixAngle& CSVCMsg_FixAngle::default_instance() {
  protobuf_netmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CSVCMsg_FixAngle* CSVCMsg_FixAngle::New(::google::protobuf::Arena* arena) const {
  CSVCMsg_FixAngle* n = new CSVCMsg_FixAngle;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSVCMsg_FixAngle::Clear() {
// @@protoc_insertion_point(message_clear_start:CSVCMsg_FixAngle)
  if (has_angle()) {
    GOOGLE_DCHECK(angle_ != NULL);
    angle_->::CMsgQAngle::Clear();
  }
  relative_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSVCMsg_FixAngle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSVCMsg_FixAngle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool relative = 1;
      case 1: {
        if (tag == 8u) {
          set_has_relative();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &relative_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CMsgQAngle angle = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_angle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSVCMsg_FixAngle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSVCMsg_FixAngle)
  return false;
#undef DO_
}

void CSVCMsg_FixAngle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSVCMsg_FixAngle)
  // optional bool relative = 1;
  if (has_relative()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->relative(), output);
  }

  // optional .CMsgQAngle angle = 2;
  if (has_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->angle_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSVCMsg_FixAngle)
}

::google::protobuf::uint8* CSVCMsg_FixAngle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSVCMsg_FixAngle)
  // optional bool relative = 1;
  if (has_relative()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->relative(), target);
  }

  // optional .CMsgQAngle angle = 2;
  if (has_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->angle_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSVCMsg_FixAngle)
  return target;
}

size_t CSVCMsg_FixAngle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSVCMsg_FixAngle)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .CMsgQAngle angle = 2;
    if (has_angle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->angle_);
    }

    // optional bool relative = 1;
    if (has_relative()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSVCMsg_FixAngle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSVCMsg_FixAngle)
  GOOGLE_DCHECK_NE(&from, this);
  const CSVCMsg_FixAngle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSVCMsg_FixAngle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSVCMsg_FixAngle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSVCMsg_FixAngle)
    MergeFrom(*source);
  }
}

void CSVCMsg_FixAngle::MergeFrom(const CSVCMsg_FixAngle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSVCMsg_FixAngle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_angle()) {
      mutable_angle()->::CMsgQAngle::MergeFrom(from.angle());
    }
    if (from.has_relative()) {
      set_relative(from.relative());
    }
  }
}

void CSVCMsg_FixAngle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSVCMsg_FixAngle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSVCMsg_FixAngle::CopyFrom(const CSVCMsg_FixAngle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSVCMsg_FixAngle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSVCMsg_FixAngle::IsInitialized() const {
  return true;
}

void CSVCMsg_FixAngle::Swap(CSVCMsg_FixAngle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSVCMsg_FixAngle::InternalSwap(CSVCMsg_FixAngle* other) {
  std::swap(angle_, other->angle_);
  std::swap(relative_, other->relative_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSVCMsg_FixAngle::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[37];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CSVCMsg_FixAngle

// optional bool relative = 1;
bool CSVCMsg_FixAngle::has_relative() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CSVCMsg_FixAngle::set_has_relative() {
  _has_bits_[0] |= 0x00000002u;
}
void CSVCMsg_FixAngle::clear_has_relative() {
  _has_bits_[0] &= ~0x00000002u;
}
void CSVCMsg_FixAngle::clear_relative() {
  relative_ = false;
  clear_has_relative();
}
bool CSVCMsg_FixAngle::relative() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_FixAngle.relative)
  return relative_;
}
void CSVCMsg_FixAngle::set_relative(bool value) {
  set_has_relative();
  relative_ = value;
  // @@protoc_insertion_point(field_set:CSVCMsg_FixAngle.relative)
}

// optional .CMsgQAngle angle = 2;
bool CSVCMsg_FixAngle::has_angle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CSVCMsg_FixAngle::set_has_angle() {
  _has_bits_[0] |= 0x00000001u;
}
void CSVCMsg_FixAngle::clear_has_angle() {
  _has_bits_[0] &= ~0x00000001u;
}
void CSVCMsg_FixAngle::clear_angle() {
  if (angle_ != NULL) angle_->::CMsgQAngle::Clear();
  clear_has_angle();
}
const ::CMsgQAngle& CSVCMsg_FixAngle::angle() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_FixAngle.angle)
  return angle_ != NULL ? *angle_
                         : *::CMsgQAngle::internal_default_instance();
}
::CMsgQAngle* CSVCMsg_FixAngle::mutable_angle() {
  set_has_angle();
  if (angle_ == NULL) {
    angle_ = new ::CMsgQAngle;
  }
  // @@protoc_insertion_point(field_mutable:CSVCMsg_FixAngle.angle)
  return angle_;
}
::CMsgQAngle* CSVCMsg_FixAngle::release_angle() {
  // @@protoc_insertion_point(field_release:CSVCMsg_FixAngle.angle)
  clear_has_angle();
  ::CMsgQAngle* temp = angle_;
  angle_ = NULL;
  return temp;
}
void CSVCMsg_FixAngle::set_allocated_angle(::CMsgQAngle* angle) {
  delete angle_;
  angle_ = angle;
  if (angle) {
    set_has_angle();
  } else {
    clear_has_angle();
  }
  // @@protoc_insertion_point(field_set_allocated:CSVCMsg_FixAngle.angle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSVCMsg_CrosshairAngle::kAngleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSVCMsg_CrosshairAngle::CSVCMsg_CrosshairAngle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_netmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSVCMsg_CrosshairAngle)
}
CSVCMsg_CrosshairAngle::CSVCMsg_CrosshairAngle(const CSVCMsg_CrosshairAngle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_angle()) {
    angle_ = new ::CMsgQAngle(*from.angle_);
  } else {
    angle_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:CSVCMsg_CrosshairAngle)
}

void CSVCMsg_CrosshairAngle::SharedCtor() {
  _cached_size_ = 0;
  angle_ = NULL;
}

CSVCMsg_CrosshairAngle::~CSVCMsg_CrosshairAngle() {
  // @@protoc_insertion_point(destructor:CSVCMsg_CrosshairAngle)
  SharedDtor();
}

void CSVCMsg_CrosshairAngle::SharedDtor() {
  if (this != internal_default_instance()) {
    delete angle_;
  }
}

void CSVCMsg_CrosshairAngle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSVCMsg_CrosshairAngle::descriptor() {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[38].descriptor;
}

const CSVCMsg_CrosshairAngle& CSVCMsg_CrosshairAngle::default_instance() {
  protobuf_netmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CSVCMsg_CrosshairAngle* CSVCMsg_CrosshairAngle::New(::google::protobuf::Arena* arena) const {
  CSVCMsg_CrosshairAngle* n = new CSVCMsg_CrosshairAngle;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSVCMsg_CrosshairAngle::Clear() {
// @@protoc_insertion_point(message_clear_start:CSVCMsg_CrosshairAngle)
  if (has_angle()) {
    GOOGLE_DCHECK(angle_ != NULL);
    angle_->::CMsgQAngle::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSVCMsg_CrosshairAngle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSVCMsg_CrosshairAngle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgQAngle angle = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_angle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSVCMsg_CrosshairAngle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSVCMsg_CrosshairAngle)
  return false;
#undef DO_
}

void CSVCMsg_CrosshairAngle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSVCMsg_CrosshairAngle)
  // optional .CMsgQAngle angle = 1;
  if (has_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->angle_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSVCMsg_CrosshairAngle)
}

::google::protobuf::uint8* CSVCMsg_CrosshairAngle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSVCMsg_CrosshairAngle)
  // optional .CMsgQAngle angle = 1;
  if (has_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->angle_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSVCMsg_CrosshairAngle)
  return target;
}

size_t CSVCMsg_CrosshairAngle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSVCMsg_CrosshairAngle)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional .CMsgQAngle angle = 1;
  if (has_angle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->angle_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSVCMsg_CrosshairAngle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSVCMsg_CrosshairAngle)
  GOOGLE_DCHECK_NE(&from, this);
  const CSVCMsg_CrosshairAngle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSVCMsg_CrosshairAngle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSVCMsg_CrosshairAngle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSVCMsg_CrosshairAngle)
    MergeFrom(*source);
  }
}

void CSVCMsg_CrosshairAngle::MergeFrom(const CSVCMsg_CrosshairAngle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSVCMsg_CrosshairAngle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_angle()) {
    mutable_angle()->::CMsgQAngle::MergeFrom(from.angle());
  }
}

void CSVCMsg_CrosshairAngle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSVCMsg_CrosshairAngle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSVCMsg_CrosshairAngle::CopyFrom(const CSVCMsg_CrosshairAngle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSVCMsg_CrosshairAngle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSVCMsg_CrosshairAngle::IsInitialized() const {
  return true;
}

void CSVCMsg_CrosshairAngle::Swap(CSVCMsg_CrosshairAngle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSVCMsg_CrosshairAngle::InternalSwap(CSVCMsg_CrosshairAngle* other) {
  std::swap(angle_, other->angle_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSVCMsg_CrosshairAngle::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[38];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CSVCMsg_CrosshairAngle

// optional .CMsgQAngle angle = 1;
bool CSVCMsg_CrosshairAngle::has_angle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CSVCMsg_CrosshairAngle::set_has_angle() {
  _has_bits_[0] |= 0x00000001u;
}
void CSVCMsg_CrosshairAngle::clear_has_angle() {
  _has_bits_[0] &= ~0x00000001u;
}
void CSVCMsg_CrosshairAngle::clear_angle() {
  if (angle_ != NULL) angle_->::CMsgQAngle::Clear();
  clear_has_angle();
}
const ::CMsgQAngle& CSVCMsg_CrosshairAngle::angle() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_CrosshairAngle.angle)
  return angle_ != NULL ? *angle_
                         : *::CMsgQAngle::internal_default_instance();
}
::CMsgQAngle* CSVCMsg_CrosshairAngle::mutable_angle() {
  set_has_angle();
  if (angle_ == NULL) {
    angle_ = new ::CMsgQAngle;
  }
  // @@protoc_insertion_point(field_mutable:CSVCMsg_CrosshairAngle.angle)
  return angle_;
}
::CMsgQAngle* CSVCMsg_CrosshairAngle::release_angle() {
  // @@protoc_insertion_point(field_release:CSVCMsg_CrosshairAngle.angle)
  clear_has_angle();
  ::CMsgQAngle* temp = angle_;
  angle_ = NULL;
  return temp;
}
void CSVCMsg_CrosshairAngle::set_allocated_angle(::CMsgQAngle* angle) {
  delete angle_;
  angle_ = angle;
  if (angle) {
    set_has_angle();
  } else {
    clear_has_angle();
  }
  // @@protoc_insertion_point(field_set_allocated:CSVCMsg_CrosshairAngle.angle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSVCMsg_Prefetch::kSoundIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSVCMsg_Prefetch::CSVCMsg_Prefetch()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_netmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSVCMsg_Prefetch)
}
CSVCMsg_Prefetch::CSVCMsg_Prefetch(const CSVCMsg_Prefetch& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sound_index_ = from.sound_index_;
  // @@protoc_insertion_point(copy_constructor:CSVCMsg_Prefetch)
}

void CSVCMsg_Prefetch::SharedCtor() {
  _cached_size_ = 0;
  sound_index_ = 0;
}

CSVCMsg_Prefetch::~CSVCMsg_Prefetch() {
  // @@protoc_insertion_point(destructor:CSVCMsg_Prefetch)
  SharedDtor();
}

void CSVCMsg_Prefetch::SharedDtor() {
}

void CSVCMsg_Prefetch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSVCMsg_Prefetch::descriptor() {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[39].descriptor;
}

const CSVCMsg_Prefetch& CSVCMsg_Prefetch::default_instance() {
  protobuf_netmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CSVCMsg_Prefetch* CSVCMsg_Prefetch::New(::google::protobuf::Arena* arena) const {
  CSVCMsg_Prefetch* n = new CSVCMsg_Prefetch;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSVCMsg_Prefetch::Clear() {
// @@protoc_insertion_point(message_clear_start:CSVCMsg_Prefetch)
  sound_index_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSVCMsg_Prefetch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSVCMsg_Prefetch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 sound_index = 1;
      case 1: {
        if (tag == 8u) {
          set_has_sound_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sound_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSVCMsg_Prefetch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSVCMsg_Prefetch)
  return false;
#undef DO_
}

void CSVCMsg_Prefetch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSVCMsg_Prefetch)
  // optional int32 sound_index = 1;
  if (has_sound_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sound_index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSVCMsg_Prefetch)
}

::google::protobuf::uint8* CSVCMsg_Prefetch::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSVCMsg_Prefetch)
  // optional int32 sound_index = 1;
  if (has_sound_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sound_index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSVCMsg_Prefetch)
  return target;
}

size_t CSVCMsg_Prefetch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSVCMsg_Prefetch)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional int32 sound_index = 1;
  if (has_sound_index()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sound_index());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSVCMsg_Prefetch::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSVCMsg_Prefetch)
  GOOGLE_DCHECK_NE(&from, this);
  const CSVCMsg_Prefetch* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSVCMsg_Prefetch>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSVCMsg_Prefetch)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSVCMsg_Prefetch)
    MergeFrom(*source);
  }
}

void CSVCMsg_Prefetch::MergeFrom(const CSVCMsg_Prefetch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSVCMsg_Prefetch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_sound_index()) {
    set_sound_index(from.sound_index());
  }
}

void CSVCMsg_Prefetch::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSVCMsg_Prefetch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSVCMsg_Prefetch::CopyFrom(const CSVCMsg_Prefetch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSVCMsg_Prefetch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSVCMsg_Prefetch::IsInitialized() const {
  return true;
}

void CSVCMsg_Prefetch::Swap(CSVCMsg_Prefetch* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSVCMsg_Prefetch::InternalSwap(CSVCMsg_Prefetch* other) {
  std::swap(sound_index_, other->sound_index_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSVCMsg_Prefetch::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[39];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CSVCMsg_Prefetch

// optional int32 sound_index = 1;
bool CSVCMsg_Prefetch::has_sound_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CSVCMsg_Prefetch::set_has_sound_index() {
  _has_bits_[0] |= 0x00000001u;
}
void CSVCMsg_Prefetch::clear_has_sound_index() {
  _has_bits_[0] &= ~0x00000001u;
}
void CSVCMsg_Prefetch::clear_sound_index() {
  sound_index_ = 0;
  clear_has_sound_index();
}
::google::protobuf::int32 CSVCMsg_Prefetch::sound_index() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_Prefetch.sound_index)
  return sound_index_;
}
void CSVCMsg_Prefetch::set_sound_index(::google::protobuf::int32 value) {
  set_has_sound_index();
  sound_index_ = value;
  // @@protoc_insertion_point(field_set:CSVCMsg_Prefetch.sound_index)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSVCMsg_BSPDecal::kPosFieldNumber;
const int CSVCMsg_BSPDecal::kDecalTextureIndexFieldNumber;
const int CSVCMsg_BSPDecal::kEntityIndexFieldNumber;
const int CSVCMsg_BSPDecal::kModelIndexFieldNumber;
const int CSVCMsg_BSPDecal::kLowPriorityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSVCMsg_BSPDecal::CSVCMsg_BSPDecal()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_netmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSVCMsg_BSPDecal)
}
CSVCMsg_BSPDecal::CSVCMsg_BSPDecal(const CSVCMsg_BSPDecal& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pos()) {
    pos_ = new ::CMsgVector(*from.pos_);
  } else {
    pos_ = NULL;
  }
  ::memcpy(&decal_texture_index_, &from.decal_texture_index_,
    reinterpret_cast<char*>(&low_priority_) -
    reinterpret_cast<char*>(&decal_texture_index_) + sizeof(low_priority_));
  // @@protoc_insertion_point(copy_constructor:CSVCMsg_BSPDecal)
}

void CSVCMsg_BSPDecal::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&pos_, 0, reinterpret_cast<char*>(&low_priority_) -
    reinterpret_cast<char*>(&pos_) + sizeof(low_priority_));
}

CSVCMsg_BSPDecal::~CSVCMsg_BSPDecal() {
  // @@protoc_insertion_point(destructor:CSVCMsg_BSPDecal)
  SharedDtor();
}

void CSVCMsg_BSPDecal::SharedDtor() {
  if (this != internal_default_instance()) {
    delete pos_;
  }
}

void CSVCMsg_BSPDecal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSVCMsg_BSPDecal::descriptor() {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[40].descriptor;
}

const CSVCMsg_BSPDecal& CSVCMsg_BSPDecal::default_instance() {
  protobuf_netmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CSVCMsg_BSPDecal* CSVCMsg_BSPDecal::New(::google::protobuf::Arena* arena) const {
  CSVCMsg_BSPDecal* n = new CSVCMsg_BSPDecal;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSVCMsg_BSPDecal::Clear() {
// @@protoc_insertion_point(message_clear_start:CSVCMsg_BSPDecal)
  if (has_pos()) {
    GOOGLE_DCHECK(pos_ != NULL);
    pos_->::CMsgVector::Clear();
  }
  if (_has_bits_[0 / 32] & 30u) {
    ::memset(&decal_texture_index_, 0, reinterpret_cast<char*>(&low_priority_) -
      reinterpret_cast<char*>(&decal_texture_index_) + sizeof(low_priority_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSVCMsg_BSPDecal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSVCMsg_BSPDecal)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgVector pos = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 decal_texture_index = 2;
      case 2: {
        if (tag == 16u) {
          set_has_decal_texture_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &decal_texture_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 entity_index = 3;
      case 3: {
        if (tag == 24u) {
          set_has_entity_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &entity_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 model_index = 4;
      case 4: {
        if (tag == 32u) {
          set_has_model_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &model_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool low_priority = 5;
      case 5: {
        if (tag == 40u) {
          set_has_low_priority();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &low_priority_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSVCMsg_BSPDecal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSVCMsg_BSPDecal)
  return false;
#undef DO_
}

void CSVCMsg_BSPDecal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSVCMsg_BSPDecal)
  // optional .CMsgVector pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->pos_, output);
  }

  // optional int32 decal_texture_index = 2;
  if (has_decal_texture_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->decal_texture_index(), output);
  }

  // optional int32 entity_index = 3;
  if (has_entity_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->entity_index(), output);
  }

  // optional int32 model_index = 4;
  if (has_model_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->model_index(), output);
  }

  // optional bool low_priority = 5;
  if (has_low_priority()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->low_priority(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSVCMsg_BSPDecal)
}

::google::protobuf::uint8* CSVCMsg_BSPDecal::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSVCMsg_BSPDecal)
  // optional .CMsgVector pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->pos_, false, target);
  }

  // optional int32 decal_texture_index = 2;
  if (has_decal_texture_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->decal_texture_index(), target);
  }

  // optional int32 entity_index = 3;
  if (has_entity_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->entity_index(), target);
  }

  // optional int32 model_index = 4;
  if (has_model_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->model_index(), target);
  }

  // optional bool low_priority = 5;
  if (has_low_priority()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->low_priority(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSVCMsg_BSPDecal)
  return target;
}

size_t CSVCMsg_BSPDecal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSVCMsg_BSPDecal)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional .CMsgVector pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->pos_);
    }

    // optional int32 decal_texture_index = 2;
    if (has_decal_texture_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->decal_texture_index());
    }

    // optional int32 entity_index = 3;
    if (has_entity_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->entity_index());
    }

    // optional int32 model_index = 4;
    if (has_model_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->model_index());
    }

    // optional bool low_priority = 5;
    if (has_low_priority()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSVCMsg_BSPDecal::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSVCMsg_BSPDecal)
  GOOGLE_DCHECK_NE(&from, this);
  const CSVCMsg_BSPDecal* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSVCMsg_BSPDecal>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSVCMsg_BSPDecal)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSVCMsg_BSPDecal)
    MergeFrom(*source);
  }
}

void CSVCMsg_BSPDecal::MergeFrom(const CSVCMsg_BSPDecal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSVCMsg_BSPDecal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 31u) {
    if (from.has_pos()) {
      mutable_pos()->::CMsgVector::MergeFrom(from.pos());
    }
    if (from.has_decal_texture_index()) {
      set_decal_texture_index(from.decal_texture_index());
    }
    if (from.has_entity_index()) {
      set_entity_index(from.entity_index());
    }
    if (from.has_model_index()) {
      set_model_index(from.model_index());
    }
    if (from.has_low_priority()) {
      set_low_priority(from.low_priority());
    }
  }
}

void CSVCMsg_BSPDecal::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSVCMsg_BSPDecal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSVCMsg_BSPDecal::CopyFrom(const CSVCMsg_BSPDecal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSVCMsg_BSPDecal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSVCMsg_BSPDecal::IsInitialized() const {
  return true;
}

void CSVCMsg_BSPDecal::Swap(CSVCMsg_BSPDecal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSVCMsg_BSPDecal::InternalSwap(CSVCMsg_BSPDecal* other) {
  std::swap(pos_, other->pos_);
  std::swap(decal_texture_index_, other->decal_texture_index_);
  std::swap(entity_index_, other->entity_index_);
  std::swap(model_index_, other->model_index_);
  std::swap(low_priority_, other->low_priority_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSVCMsg_BSPDecal::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[40];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CSVCMsg_BSPDecal

// optional .CMsgVector pos = 1;
bool CSVCMsg_BSPDecal::has_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CSVCMsg_BSPDecal::set_has_pos() {
  _has_bits_[0] |= 0x00000001u;
}
void CSVCMsg_BSPDecal::clear_has_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
void CSVCMsg_BSPDecal::clear_pos() {
  if (pos_ != NULL) pos_->::CMsgVector::Clear();
  clear_has_pos();
}
const ::CMsgVector& CSVCMsg_BSPDecal::pos() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_BSPDecal.pos)
  return pos_ != NULL ? *pos_
                         : *::CMsgVector::internal_default_instance();
}
::CMsgVector* CSVCMsg_BSPDecal::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) {
    pos_ = new ::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:CSVCMsg_BSPDecal.pos)
  return pos_;
}
::CMsgVector* CSVCMsg_BSPDecal::release_pos() {
  // @@protoc_insertion_point(field_release:CSVCMsg_BSPDecal.pos)
  clear_has_pos();
  ::CMsgVector* temp = pos_;
  pos_ = NULL;
  return temp;
}
void CSVCMsg_BSPDecal::set_allocated_pos(::CMsgVector* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
  // @@protoc_insertion_point(field_set_allocated:CSVCMsg_BSPDecal.pos)
}

// optional int32 decal_texture_index = 2;
bool CSVCMsg_BSPDecal::has_decal_texture_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CSVCMsg_BSPDecal::set_has_decal_texture_index() {
  _has_bits_[0] |= 0x00000002u;
}
void CSVCMsg_BSPDecal::clear_has_decal_texture_index() {
  _has_bits_[0] &= ~0x00000002u;
}
void CSVCMsg_BSPDecal::clear_decal_texture_index() {
  decal_texture_index_ = 0;
  clear_has_decal_texture_index();
}
::google::protobuf::int32 CSVCMsg_BSPDecal::decal_texture_index() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_BSPDecal.decal_texture_index)
  return decal_texture_index_;
}
void CSVCMsg_BSPDecal::set_decal_texture_index(::google::protobuf::int32 value) {
  set_has_decal_texture_index();
  decal_texture_index_ = value;
  // @@protoc_insertion_point(field_set:CSVCMsg_BSPDecal.decal_texture_index)
}

// optional int32 entity_index = 3;
bool CSVCMsg_BSPDecal::has_entity_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CSVCMsg_BSPDecal::set_has_entity_index() {
  _has_bits_[0] |= 0x00000004u;
}
void CSVCMsg_BSPDecal::clear_has_entity_index() {
  _has_bits_[0] &= ~0x00000004u;
}
void CSVCMsg_BSPDecal::clear_entity_index() {
  entity_index_ = 0;
  clear_has_entity_index();
}
::google::protobuf::int32 CSVCMsg_BSPDecal::entity_index() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_BSPDecal.entity_index)
  return entity_index_;
}
void CSVCMsg_BSPDecal::set_entity_index(::google::protobuf::int32 value) {
  set_has_entity_index();
  entity_index_ = value;
  // @@protoc_insertion_point(field_set:CSVCMsg_BSPDecal.entity_index)
}

// optional int32 model_index = 4;
bool CSVCMsg_BSPDecal::has_model_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CSVCMsg_BSPDecal::set_has_model_index() {
  _has_bits_[0] |= 0x00000008u;
}
void CSVCMsg_BSPDecal::clear_has_model_index() {
  _has_bits_[0] &= ~0x00000008u;
}
void CSVCMsg_BSPDecal::clear_model_index() {
  model_index_ = 0;
  clear_has_model_index();
}
::google::protobuf::int32 CSVCMsg_BSPDecal::model_index() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_BSPDecal.model_index)
  return model_index_;
}
void CSVCMsg_BSPDecal::set_model_index(::google::protobuf::int32 value) {
  set_has_model_index();
  model_index_ = value;
  // @@protoc_insertion_point(field_set:CSVCMsg_BSPDecal.model_index)
}

// optional bool low_priority = 5;
bool CSVCMsg_BSPDecal::has_low_priority() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CSVCMsg_BSPDecal::set_has_low_priority() {
  _has_bits_[0] |= 0x00000010u;
}
void CSVCMsg_BSPDecal::clear_has_low_priority() {
  _has_bits_[0] &= ~0x00000010u;
}
void CSVCMsg_BSPDecal::clear_low_priority() {
  low_priority_ = false;
  clear_has_low_priority();
}
bool CSVCMsg_BSPDecal::low_priority() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_BSPDecal.low_priority)
  return low_priority_;
}
void CSVCMsg_BSPDecal::set_low_priority(bool value) {
  set_has_low_priority();
  low_priority_ = value;
  // @@protoc_insertion_point(field_set:CSVCMsg_BSPDecal.low_priority)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSVCMsg_SplitScreen::kTypeFieldNumber;
const int CSVCMsg_SplitScreen::kSlotFieldNumber;
const int CSVCMsg_SplitScreen::kPlayerIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSVCMsg_SplitScreen::CSVCMsg_SplitScreen()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_netmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSVCMsg_SplitScreen)
}
CSVCMsg_SplitScreen::CSVCMsg_SplitScreen(const CSVCMsg_SplitScreen& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    reinterpret_cast<char*>(&player_index_) -
    reinterpret_cast<char*>(&type_) + sizeof(player_index_));
  // @@protoc_insertion_point(copy_constructor:CSVCMsg_SplitScreen)
}

void CSVCMsg_SplitScreen::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&type_, 0, reinterpret_cast<char*>(&player_index_) -
    reinterpret_cast<char*>(&type_) + sizeof(player_index_));
}

CSVCMsg_SplitScreen::~CSVCMsg_SplitScreen() {
  // @@protoc_insertion_point(destructor:CSVCMsg_SplitScreen)
  SharedDtor();
}

void CSVCMsg_SplitScreen::SharedDtor() {
}

void CSVCMsg_SplitScreen::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSVCMsg_SplitScreen::descriptor() {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[41].descriptor;
}

const CSVCMsg_SplitScreen& CSVCMsg_SplitScreen::default_instance() {
  protobuf_netmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CSVCMsg_SplitScreen* CSVCMsg_SplitScreen::New(::google::protobuf::Arena* arena) const {
  CSVCMsg_SplitScreen* n = new CSVCMsg_SplitScreen;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSVCMsg_SplitScreen::Clear() {
// @@protoc_insertion_point(message_clear_start:CSVCMsg_SplitScreen)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&type_, 0, reinterpret_cast<char*>(&player_index_) -
      reinterpret_cast<char*>(&type_) + sizeof(player_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSVCMsg_SplitScreen::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSVCMsg_SplitScreen)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ESplitScreenMessageType type = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ESplitScreenMessageType_IsValid(value)) {
            set_type(static_cast< ::ESplitScreenMessageType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 slot = 2;
      case 2: {
        if (tag == 16u) {
          set_has_slot();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 player_index = 3;
      case 3: {
        if (tag == 24u) {
          set_has_player_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSVCMsg_SplitScreen)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSVCMsg_SplitScreen)
  return false;
#undef DO_
}

void CSVCMsg_SplitScreen::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSVCMsg_SplitScreen)
  // optional .ESplitScreenMessageType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional int32 slot = 2;
  if (has_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->slot(), output);
  }

  // optional int32 player_index = 3;
  if (has_player_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->player_index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSVCMsg_SplitScreen)
}

::google::protobuf::uint8* CSVCMsg_SplitScreen::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSVCMsg_SplitScreen)
  // optional .ESplitScreenMessageType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional int32 slot = 2;
  if (has_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->slot(), target);
  }

  // optional int32 player_index = 3;
  if (has_player_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->player_index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSVCMsg_SplitScreen)
  return target;
}

size_t CSVCMsg_SplitScreen::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSVCMsg_SplitScreen)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .ESplitScreenMessageType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int32 slot = 2;
    if (has_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slot());
    }

    // optional int32 player_index = 3;
    if (has_player_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_index());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSVCMsg_SplitScreen::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSVCMsg_SplitScreen)
  GOOGLE_DCHECK_NE(&from, this);
  const CSVCMsg_SplitScreen* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSVCMsg_SplitScreen>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSVCMsg_SplitScreen)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSVCMsg_SplitScreen)
    MergeFrom(*source);
  }
}

void CSVCMsg_SplitScreen::MergeFrom(const CSVCMsg_SplitScreen& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSVCMsg_SplitScreen)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_slot()) {
      set_slot(from.slot());
    }
    if (from.has_player_index()) {
      set_player_index(from.player_index());
    }
  }
}

void CSVCMsg_SplitScreen::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSVCMsg_SplitScreen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSVCMsg_SplitScreen::CopyFrom(const CSVCMsg_SplitScreen& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSVCMsg_SplitScreen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSVCMsg_SplitScreen::IsInitialized() const {
  return true;
}

void CSVCMsg_SplitScreen::Swap(CSVCMsg_SplitScreen* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSVCMsg_SplitScreen::InternalSwap(CSVCMsg_SplitScreen* other) {
  std::swap(type_, other->type_);
  std::swap(slot_, other->slot_);
  std::swap(player_index_, other->player_index_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSVCMsg_SplitScreen::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[41];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CSVCMsg_SplitScreen

// optional .ESplitScreenMessageType type = 1;
bool CSVCMsg_SplitScreen::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CSVCMsg_SplitScreen::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void CSVCMsg_SplitScreen::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void CSVCMsg_SplitScreen::clear_type() {
  type_ = 0;
  clear_has_type();
}
::ESplitScreenMessageType CSVCMsg_SplitScreen::type() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_SplitScreen.type)
  return static_cast< ::ESplitScreenMessageType >(type_);
}
void CSVCMsg_SplitScreen::set_type(::ESplitScreenMessageType value) {
  assert(::ESplitScreenMessageType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:CSVCMsg_SplitScreen.type)
}

// optional int32 slot = 2;
bool CSVCMsg_SplitScreen::has_slot() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CSVCMsg_SplitScreen::set_has_slot() {
  _has_bits_[0] |= 0x00000002u;
}
void CSVCMsg_SplitScreen::clear_has_slot() {
  _has_bits_[0] &= ~0x00000002u;
}
void CSVCMsg_SplitScreen::clear_slot() {
  slot_ = 0;
  clear_has_slot();
}
::google::protobuf::int32 CSVCMsg_SplitScreen::slot() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_SplitScreen.slot)
  return slot_;
}
void CSVCMsg_SplitScreen::set_slot(::google::protobuf::int32 value) {
  set_has_slot();
  slot_ = value;
  // @@protoc_insertion_point(field_set:CSVCMsg_SplitScreen.slot)
}

// optional int32 player_index = 3;
bool CSVCMsg_SplitScreen::has_player_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CSVCMsg_SplitScreen::set_has_player_index() {
  _has_bits_[0] |= 0x00000004u;
}
void CSVCMsg_SplitScreen::clear_has_player_index() {
  _has_bits_[0] &= ~0x00000004u;
}
void CSVCMsg_SplitScreen::clear_player_index() {
  player_index_ = 0;
  clear_has_player_index();
}
::google::protobuf::int32 CSVCMsg_SplitScreen::player_index() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_SplitScreen.player_index)
  return player_index_;
}
void CSVCMsg_SplitScreen::set_player_index(::google::protobuf::int32 value) {
  set_has_player_index();
  player_index_ = value;
  // @@protoc_insertion_point(field_set:CSVCMsg_SplitScreen.player_index)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSVCMsg_GetCvarValue::kCookieFieldNumber;
const int CSVCMsg_GetCvarValue::kCvarNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSVCMsg_GetCvarValue::CSVCMsg_GetCvarValue()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_netmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSVCMsg_GetCvarValue)
}
CSVCMsg_GetCvarValue::CSVCMsg_GetCvarValue(const CSVCMsg_GetCvarValue& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cvar_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_cvar_name()) {
    cvar_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cvar_name_);
  }
  cookie_ = from.cookie_;
  // @@protoc_insertion_point(copy_constructor:CSVCMsg_GetCvarValue)
}

void CSVCMsg_GetCvarValue::SharedCtor() {
  _cached_size_ = 0;
  cvar_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cookie_ = 0;
}

CSVCMsg_GetCvarValue::~CSVCMsg_GetCvarValue() {
  // @@protoc_insertion_point(destructor:CSVCMsg_GetCvarValue)
  SharedDtor();
}

void CSVCMsg_GetCvarValue::SharedDtor() {
  cvar_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CSVCMsg_GetCvarValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSVCMsg_GetCvarValue::descriptor() {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[42].descriptor;
}

const CSVCMsg_GetCvarValue& CSVCMsg_GetCvarValue::default_instance() {
  protobuf_netmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CSVCMsg_GetCvarValue* CSVCMsg_GetCvarValue::New(::google::protobuf::Arena* arena) const {
  CSVCMsg_GetCvarValue* n = new CSVCMsg_GetCvarValue;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSVCMsg_GetCvarValue::Clear() {
// @@protoc_insertion_point(message_clear_start:CSVCMsg_GetCvarValue)
  if (has_cvar_name()) {
    GOOGLE_DCHECK(!cvar_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*cvar_name_.UnsafeRawStringPointer())->clear();
  }
  cookie_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSVCMsg_GetCvarValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSVCMsg_GetCvarValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cookie = 1;
      case 1: {
        if (tag == 8u) {
          set_has_cookie();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cookie_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string cvar_name = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cvar_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cvar_name().data(), this->cvar_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CSVCMsg_GetCvarValue.cvar_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSVCMsg_GetCvarValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSVCMsg_GetCvarValue)
  return false;
#undef DO_
}

void CSVCMsg_GetCvarValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSVCMsg_GetCvarValue)
  // optional int32 cookie = 1;
  if (has_cookie()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cookie(), output);
  }

  // optional string cvar_name = 2;
  if (has_cvar_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cvar_name().data(), this->cvar_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSVCMsg_GetCvarValue.cvar_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cvar_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSVCMsg_GetCvarValue)
}

::google::protobuf::uint8* CSVCMsg_GetCvarValue::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSVCMsg_GetCvarValue)
  // optional int32 cookie = 1;
  if (has_cookie()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cookie(), target);
  }

  // optional string cvar_name = 2;
  if (has_cvar_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cvar_name().data(), this->cvar_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSVCMsg_GetCvarValue.cvar_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cvar_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSVCMsg_GetCvarValue)
  return target;
}

size_t CSVCMsg_GetCvarValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSVCMsg_GetCvarValue)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string cvar_name = 2;
    if (has_cvar_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cvar_name());
    }

    // optional int32 cookie = 1;
    if (has_cookie()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cookie());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSVCMsg_GetCvarValue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSVCMsg_GetCvarValue)
  GOOGLE_DCHECK_NE(&from, this);
  const CSVCMsg_GetCvarValue* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSVCMsg_GetCvarValue>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSVCMsg_GetCvarValue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSVCMsg_GetCvarValue)
    MergeFrom(*source);
  }
}

void CSVCMsg_GetCvarValue::MergeFrom(const CSVCMsg_GetCvarValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSVCMsg_GetCvarValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_cvar_name()) {
      set_has_cvar_name();
      cvar_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cvar_name_);
    }
    if (from.has_cookie()) {
      set_cookie(from.cookie());
    }
  }
}

void CSVCMsg_GetCvarValue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSVCMsg_GetCvarValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSVCMsg_GetCvarValue::CopyFrom(const CSVCMsg_GetCvarValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSVCMsg_GetCvarValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSVCMsg_GetCvarValue::IsInitialized() const {
  return true;
}

void CSVCMsg_GetCvarValue::Swap(CSVCMsg_GetCvarValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSVCMsg_GetCvarValue::InternalSwap(CSVCMsg_GetCvarValue* other) {
  cvar_name_.Swap(&other->cvar_name_);
  std::swap(cookie_, other->cookie_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSVCMsg_GetCvarValue::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[42];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CSVCMsg_GetCvarValue

// optional int32 cookie = 1;
bool CSVCMsg_GetCvarValue::has_cookie() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CSVCMsg_GetCvarValue::set_has_cookie() {
  _has_bits_[0] |= 0x00000002u;
}
void CSVCMsg_GetCvarValue::clear_has_cookie() {
  _has_bits_[0] &= ~0x00000002u;
}
void CSVCMsg_GetCvarValue::clear_cookie() {
  cookie_ = 0;
  clear_has_cookie();
}
::google::protobuf::int32 CSVCMsg_GetCvarValue::cookie() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_GetCvarValue.cookie)
  return cookie_;
}
void CSVCMsg_GetCvarValue::set_cookie(::google::protobuf::int32 value) {
  set_has_cookie();
  cookie_ = value;
  // @@protoc_insertion_point(field_set:CSVCMsg_GetCvarValue.cookie)
}

// optional string cvar_name = 2;
bool CSVCMsg_GetCvarValue::has_cvar_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CSVCMsg_GetCvarValue::set_has_cvar_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CSVCMsg_GetCvarValue::clear_has_cvar_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CSVCMsg_GetCvarValue::clear_cvar_name() {
  cvar_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cvar_name();
}
const ::std::string& CSVCMsg_GetCvarValue::cvar_name() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_GetCvarValue.cvar_name)
  return cvar_name_.GetNoArena();
}
void CSVCMsg_GetCvarValue::set_cvar_name(const ::std::string& value) {
  set_has_cvar_name();
  cvar_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CSVCMsg_GetCvarValue.cvar_name)
}
#if LANG_CXX11
void CSVCMsg_GetCvarValue::set_cvar_name(::std::string&& value) {
  set_has_cvar_name();
  cvar_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CSVCMsg_GetCvarValue.cvar_name)
}
#endif
void CSVCMsg_GetCvarValue::set_cvar_name(const char* value) {
  set_has_cvar_name();
  cvar_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CSVCMsg_GetCvarValue.cvar_name)
}
void CSVCMsg_GetCvarValue::set_cvar_name(const char* value, size_t size) {
  set_has_cvar_name();
  cvar_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CSVCMsg_GetCvarValue.cvar_name)
}
::std::string* CSVCMsg_GetCvarValue::mutable_cvar_name() {
  set_has_cvar_name();
  // @@protoc_insertion_point(field_mutable:CSVCMsg_GetCvarValue.cvar_name)
  return cvar_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CSVCMsg_GetCvarValue::release_cvar_name() {
  // @@protoc_insertion_point(field_release:CSVCMsg_GetCvarValue.cvar_name)
  clear_has_cvar_name();
  return cvar_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CSVCMsg_GetCvarValue::set_allocated_cvar_name(::std::string* cvar_name) {
  if (cvar_name != NULL) {
    set_has_cvar_name();
  } else {
    clear_has_cvar_name();
  }
  cvar_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cvar_name);
  // @@protoc_insertion_point(field_set_allocated:CSVCMsg_GetCvarValue.cvar_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSVCMsg_Menu::kDialogTypeFieldNumber;
const int CSVCMsg_Menu::kMenuKeyValuesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSVCMsg_Menu::CSVCMsg_Menu()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_netmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSVCMsg_Menu)
}
CSVCMsg_Menu::CSVCMsg_Menu(const CSVCMsg_Menu& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  menu_key_values_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_menu_key_values()) {
    menu_key_values_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.menu_key_values_);
  }
  dialog_type_ = from.dialog_type_;
  // @@protoc_insertion_point(copy_constructor:CSVCMsg_Menu)
}

void CSVCMsg_Menu::SharedCtor() {
  _cached_size_ = 0;
  menu_key_values_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dialog_type_ = 0;
}

CSVCMsg_Menu::~CSVCMsg_Menu() {
  // @@protoc_insertion_point(destructor:CSVCMsg_Menu)
  SharedDtor();
}

void CSVCMsg_Menu::SharedDtor() {
  menu_key_values_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CSVCMsg_Menu::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSVCMsg_Menu::descriptor() {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[43].descriptor;
}

const CSVCMsg_Menu& CSVCMsg_Menu::default_instance() {
  protobuf_netmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CSVCMsg_Menu* CSVCMsg_Menu::New(::google::protobuf::Arena* arena) const {
  CSVCMsg_Menu* n = new CSVCMsg_Menu;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSVCMsg_Menu::Clear() {
// @@protoc_insertion_point(message_clear_start:CSVCMsg_Menu)
  if (has_menu_key_values()) {
    GOOGLE_DCHECK(!menu_key_values_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*menu_key_values_.UnsafeRawStringPointer())->clear();
  }
  dialog_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSVCMsg_Menu::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSVCMsg_Menu)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 dialog_type = 1;
      case 1: {
        if (tag == 8u) {
          set_has_dialog_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dialog_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes menu_key_values = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_menu_key_values()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSVCMsg_Menu)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSVCMsg_Menu)
  return false;
#undef DO_
}

void CSVCMsg_Menu::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSVCMsg_Menu)
  // optional int32 dialog_type = 1;
  if (has_dialog_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dialog_type(), output);
  }

  // optional bytes menu_key_values = 2;
  if (has_menu_key_values()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->menu_key_values(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSVCMsg_Menu)
}

::google::protobuf::uint8* CSVCMsg_Menu::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSVCMsg_Menu)
  // optional int32 dialog_type = 1;
  if (has_dialog_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dialog_type(), target);
  }

  // optional bytes menu_key_values = 2;
  if (has_menu_key_values()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->menu_key_values(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSVCMsg_Menu)
  return target;
}

size_t CSVCMsg_Menu::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSVCMsg_Menu)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes menu_key_values = 2;
    if (has_menu_key_values()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->menu_key_values());
    }

    // optional int32 dialog_type = 1;
    if (has_dialog_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dialog_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSVCMsg_Menu::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSVCMsg_Menu)
  GOOGLE_DCHECK_NE(&from, this);
  const CSVCMsg_Menu* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSVCMsg_Menu>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSVCMsg_Menu)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSVCMsg_Menu)
    MergeFrom(*source);
  }
}

void CSVCMsg_Menu::MergeFrom(const CSVCMsg_Menu& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSVCMsg_Menu)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_menu_key_values()) {
      set_has_menu_key_values();
      menu_key_values_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.menu_key_values_);
    }
    if (from.has_dialog_type()) {
      set_dialog_type(from.dialog_type());
    }
  }
}

void CSVCMsg_Menu::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSVCMsg_Menu)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSVCMsg_Menu::CopyFrom(const CSVCMsg_Menu& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSVCMsg_Menu)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSVCMsg_Menu::IsInitialized() const {
  return true;
}

void CSVCMsg_Menu::Swap(CSVCMsg_Menu* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSVCMsg_Menu::InternalSwap(CSVCMsg_Menu* other) {
  menu_key_values_.Swap(&other->menu_key_values_);
  std::swap(dialog_type_, other->dialog_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSVCMsg_Menu::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[43];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CSVCMsg_Menu

// optional int32 dialog_type = 1;
bool CSVCMsg_Menu::has_dialog_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CSVCMsg_Menu::set_has_dialog_type() {
  _has_bits_[0] |= 0x00000002u;
}
void CSVCMsg_Menu::clear_has_dialog_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void CSVCMsg_Menu::clear_dialog_type() {
  dialog_type_ = 0;
  clear_has_dialog_type();
}
::google::protobuf::int32 CSVCMsg_Menu::dialog_type() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_Menu.dialog_type)
  return dialog_type_;
}
void CSVCMsg_Menu::set_dialog_type(::google::protobuf::int32 value) {
  set_has_dialog_type();
  dialog_type_ = value;
  // @@protoc_insertion_point(field_set:CSVCMsg_Menu.dialog_type)
}

// optional bytes menu_key_values = 2;
bool CSVCMsg_Menu::has_menu_key_values() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CSVCMsg_Menu::set_has_menu_key_values() {
  _has_bits_[0] |= 0x00000001u;
}
void CSVCMsg_Menu::clear_has_menu_key_values() {
  _has_bits_[0] &= ~0x00000001u;
}
void CSVCMsg_Menu::clear_menu_key_values() {
  menu_key_values_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_menu_key_values();
}
const ::std::string& CSVCMsg_Menu::menu_key_values() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_Menu.menu_key_values)
  return menu_key_values_.GetNoArena();
}
void CSVCMsg_Menu::set_menu_key_values(const ::std::string& value) {
  set_has_menu_key_values();
  menu_key_values_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CSVCMsg_Menu.menu_key_values)
}
#if LANG_CXX11
void CSVCMsg_Menu::set_menu_key_values(::std::string&& value) {
  set_has_menu_key_values();
  menu_key_values_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CSVCMsg_Menu.menu_key_values)
}
#endif
void CSVCMsg_Menu::set_menu_key_values(const char* value) {
  set_has_menu_key_values();
  menu_key_values_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CSVCMsg_Menu.menu_key_values)
}
void CSVCMsg_Menu::set_menu_key_values(const void* value, size_t size) {
  set_has_menu_key_values();
  menu_key_values_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CSVCMsg_Menu.menu_key_values)
}
::std::string* CSVCMsg_Menu::mutable_menu_key_values() {
  set_has_menu_key_values();
  // @@protoc_insertion_point(field_mutable:CSVCMsg_Menu.menu_key_values)
  return menu_key_values_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CSVCMsg_Menu::release_menu_key_values() {
  // @@protoc_insertion_point(field_release:CSVCMsg_Menu.menu_key_values)
  clear_has_menu_key_values();
  return menu_key_values_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CSVCMsg_Menu::set_allocated_menu_key_values(::std::string* menu_key_values) {
  if (menu_key_values != NULL) {
    set_has_menu_key_values();
  } else {
    clear_has_menu_key_values();
  }
  menu_key_values_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), menu_key_values);
  // @@protoc_insertion_point(field_set_allocated:CSVCMsg_Menu.menu_key_values)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSVCMsg_UserMessage::kMsgTypeFieldNumber;
const int CSVCMsg_UserMessage::kMsgDataFieldNumber;
const int CSVCMsg_UserMessage::kPassthroughFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSVCMsg_UserMessage::CSVCMsg_UserMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_netmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSVCMsg_UserMessage)
}
CSVCMsg_UserMessage::CSVCMsg_UserMessage(const CSVCMsg_UserMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_msg_data()) {
    msg_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_data_);
  }
  ::memcpy(&msg_type_, &from.msg_type_,
    reinterpret_cast<char*>(&passthrough_) -
    reinterpret_cast<char*>(&msg_type_) + sizeof(passthrough_));
  // @@protoc_insertion_point(copy_constructor:CSVCMsg_UserMessage)
}

void CSVCMsg_UserMessage::SharedCtor() {
  _cached_size_ = 0;
  msg_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&msg_type_, 0, reinterpret_cast<char*>(&passthrough_) -
    reinterpret_cast<char*>(&msg_type_) + sizeof(passthrough_));
}

CSVCMsg_UserMessage::~CSVCMsg_UserMessage() {
  // @@protoc_insertion_point(destructor:CSVCMsg_UserMessage)
  SharedDtor();
}

void CSVCMsg_UserMessage::SharedDtor() {
  msg_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CSVCMsg_UserMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSVCMsg_UserMessage::descriptor() {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[44].descriptor;
}

const CSVCMsg_UserMessage& CSVCMsg_UserMessage::default_instance() {
  protobuf_netmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CSVCMsg_UserMessage* CSVCMsg_UserMessage::New(::google::protobuf::Arena* arena) const {
  CSVCMsg_UserMessage* n = new CSVCMsg_UserMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSVCMsg_UserMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:CSVCMsg_UserMessage)
  if (has_msg_data()) {
    GOOGLE_DCHECK(!msg_data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*msg_data_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&msg_type_, 0, reinterpret_cast<char*>(&passthrough_) -
      reinterpret_cast<char*>(&msg_type_) + sizeof(passthrough_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSVCMsg_UserMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSVCMsg_UserMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 msg_type = 1;
      case 1: {
        if (tag == 8u) {
          set_has_msg_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msg_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes msg_data = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msg_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 passthrough = 3;
      case 3: {
        if (tag == 24u) {
          set_has_passthrough();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &passthrough_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSVCMsg_UserMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSVCMsg_UserMessage)
  return false;
#undef DO_
}

void CSVCMsg_UserMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSVCMsg_UserMessage)
  // optional int32 msg_type = 1;
  if (has_msg_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->msg_type(), output);
  }

  // optional bytes msg_data = 2;
  if (has_msg_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->msg_data(), output);
  }

  // optional int32 passthrough = 3;
  if (has_passthrough()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->passthrough(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSVCMsg_UserMessage)
}

::google::protobuf::uint8* CSVCMsg_UserMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSVCMsg_UserMessage)
  // optional int32 msg_type = 1;
  if (has_msg_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->msg_type(), target);
  }

  // optional bytes msg_data = 2;
  if (has_msg_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->msg_data(), target);
  }

  // optional int32 passthrough = 3;
  if (has_passthrough()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->passthrough(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSVCMsg_UserMessage)
  return target;
}

size_t CSVCMsg_UserMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSVCMsg_UserMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional bytes msg_data = 2;
    if (has_msg_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->msg_data());
    }

    // optional int32 msg_type = 1;
    if (has_msg_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->msg_type());
    }

    // optional int32 passthrough = 3;
    if (has_passthrough()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->passthrough());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSVCMsg_UserMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSVCMsg_UserMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const CSVCMsg_UserMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSVCMsg_UserMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSVCMsg_UserMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSVCMsg_UserMessage)
    MergeFrom(*source);
  }
}

void CSVCMsg_UserMessage::MergeFrom(const CSVCMsg_UserMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSVCMsg_UserMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_msg_data()) {
      set_has_msg_data();
      msg_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_data_);
    }
    if (from.has_msg_type()) {
      set_msg_type(from.msg_type());
    }
    if (from.has_passthrough()) {
      set_passthrough(from.passthrough());
    }
  }
}

void CSVCMsg_UserMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSVCMsg_UserMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSVCMsg_UserMessage::CopyFrom(const CSVCMsg_UserMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSVCMsg_UserMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSVCMsg_UserMessage::IsInitialized() const {
  return true;
}

void CSVCMsg_UserMessage::Swap(CSVCMsg_UserMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSVCMsg_UserMessage::InternalSwap(CSVCMsg_UserMessage* other) {
  msg_data_.Swap(&other->msg_data_);
  std::swap(msg_type_, other->msg_type_);
  std::swap(passthrough_, other->passthrough_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSVCMsg_UserMessage::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[44];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CSVCMsg_UserMessage

// optional int32 msg_type = 1;
bool CSVCMsg_UserMessage::has_msg_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CSVCMsg_UserMessage::set_has_msg_type() {
  _has_bits_[0] |= 0x00000002u;
}
void CSVCMsg_UserMessage::clear_has_msg_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void CSVCMsg_UserMessage::clear_msg_type() {
  msg_type_ = 0;
  clear_has_msg_type();
}
::google::protobuf::int32 CSVCMsg_UserMessage::msg_type() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_UserMessage.msg_type)
  return msg_type_;
}
void CSVCMsg_UserMessage::set_msg_type(::google::protobuf::int32 value) {
  set_has_msg_type();
  msg_type_ = value;
  // @@protoc_insertion_point(field_set:CSVCMsg_UserMessage.msg_type)
}

// optional bytes msg_data = 2;
bool CSVCMsg_UserMessage::has_msg_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CSVCMsg_UserMessage::set_has_msg_data() {
  _has_bits_[0] |= 0x00000001u;
}
void CSVCMsg_UserMessage::clear_has_msg_data() {
  _has_bits_[0] &= ~0x00000001u;
}
void CSVCMsg_UserMessage::clear_msg_data() {
  msg_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg_data();
}
const ::std::string& CSVCMsg_UserMessage::msg_data() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_UserMessage.msg_data)
  return msg_data_.GetNoArena();
}
void CSVCMsg_UserMessage::set_msg_data(const ::std::string& value) {
  set_has_msg_data();
  msg_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CSVCMsg_UserMessage.msg_data)
}
#if LANG_CXX11
void CSVCMsg_UserMessage::set_msg_data(::std::string&& value) {
  set_has_msg_data();
  msg_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CSVCMsg_UserMessage.msg_data)
}
#endif
void CSVCMsg_UserMessage::set_msg_data(const char* value) {
  set_has_msg_data();
  msg_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CSVCMsg_UserMessage.msg_data)
}
void CSVCMsg_UserMessage::set_msg_data(const void* value, size_t size) {
  set_has_msg_data();
  msg_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CSVCMsg_UserMessage.msg_data)
}
::std::string* CSVCMsg_UserMessage::mutable_msg_data() {
  set_has_msg_data();
  // @@protoc_insertion_point(field_mutable:CSVCMsg_UserMessage.msg_data)
  return msg_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CSVCMsg_UserMessage::release_msg_data() {
  // @@protoc_insertion_point(field_release:CSVCMsg_UserMessage.msg_data)
  clear_has_msg_data();
  return msg_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CSVCMsg_UserMessage::set_allocated_msg_data(::std::string* msg_data) {
  if (msg_data != NULL) {
    set_has_msg_data();
  } else {
    clear_has_msg_data();
  }
  msg_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_data);
  // @@protoc_insertion_point(field_set_allocated:CSVCMsg_UserMessage.msg_data)
}

// optional int32 passthrough = 3;
bool CSVCMsg_UserMessage::has_passthrough() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CSVCMsg_UserMessage::set_has_passthrough() {
  _has_bits_[0] |= 0x00000004u;
}
void CSVCMsg_UserMessage::clear_has_passthrough() {
  _has_bits_[0] &= ~0x00000004u;
}
void CSVCMsg_UserMessage::clear_passthrough() {
  passthrough_ = 0;
  clear_has_passthrough();
}
::google::protobuf::int32 CSVCMsg_UserMessage::passthrough() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_UserMessage.passthrough)
  return passthrough_;
}
void CSVCMsg_UserMessage::set_passthrough(::google::protobuf::int32 value) {
  set_has_passthrough();
  passthrough_ = value;
  // @@protoc_insertion_point(field_set:CSVCMsg_UserMessage.passthrough)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSVCMsg_PaintmapData::kPaintmapFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSVCMsg_PaintmapData::CSVCMsg_PaintmapData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_netmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSVCMsg_PaintmapData)
}
CSVCMsg_PaintmapData::CSVCMsg_PaintmapData(const CSVCMsg_PaintmapData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  paintmap_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_paintmap()) {
    paintmap_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.paintmap_);
  }
  // @@protoc_insertion_point(copy_constructor:CSVCMsg_PaintmapData)
}

void CSVCMsg_PaintmapData::SharedCtor() {
  _cached_size_ = 0;
  paintmap_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CSVCMsg_PaintmapData::~CSVCMsg_PaintmapData() {
  // @@protoc_insertion_point(destructor:CSVCMsg_PaintmapData)
  SharedDtor();
}

void CSVCMsg_PaintmapData::SharedDtor() {
  paintmap_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CSVCMsg_PaintmapData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSVCMsg_PaintmapData::descriptor() {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[45].descriptor;
}

const CSVCMsg_PaintmapData& CSVCMsg_PaintmapData::default_instance() {
  protobuf_netmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CSVCMsg_PaintmapData* CSVCMsg_PaintmapData::New(::google::protobuf::Arena* arena) const {
  CSVCMsg_PaintmapData* n = new CSVCMsg_PaintmapData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSVCMsg_PaintmapData::Clear() {
// @@protoc_insertion_point(message_clear_start:CSVCMsg_PaintmapData)
  if (has_paintmap()) {
    GOOGLE_DCHECK(!paintmap_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*paintmap_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSVCMsg_PaintmapData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSVCMsg_PaintmapData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes paintmap = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_paintmap()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSVCMsg_PaintmapData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSVCMsg_PaintmapData)
  return false;
#undef DO_
}

void CSVCMsg_PaintmapData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSVCMsg_PaintmapData)
  // optional bytes paintmap = 1;
  if (has_paintmap()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->paintmap(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSVCMsg_PaintmapData)
}

::google::protobuf::uint8* CSVCMsg_PaintmapData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSVCMsg_PaintmapData)
  // optional bytes paintmap = 1;
  if (has_paintmap()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->paintmap(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSVCMsg_PaintmapData)
  return target;
}

size_t CSVCMsg_PaintmapData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSVCMsg_PaintmapData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional bytes paintmap = 1;
  if (has_paintmap()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->paintmap());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSVCMsg_PaintmapData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSVCMsg_PaintmapData)
  GOOGLE_DCHECK_NE(&from, this);
  const CSVCMsg_PaintmapData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSVCMsg_PaintmapData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSVCMsg_PaintmapData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSVCMsg_PaintmapData)
    MergeFrom(*source);
  }
}

void CSVCMsg_PaintmapData::MergeFrom(const CSVCMsg_PaintmapData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSVCMsg_PaintmapData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_paintmap()) {
    set_has_paintmap();
    paintmap_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.paintmap_);
  }
}

void CSVCMsg_PaintmapData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSVCMsg_PaintmapData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSVCMsg_PaintmapData::CopyFrom(const CSVCMsg_PaintmapData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSVCMsg_PaintmapData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSVCMsg_PaintmapData::IsInitialized() const {
  return true;
}

void CSVCMsg_PaintmapData::Swap(CSVCMsg_PaintmapData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSVCMsg_PaintmapData::InternalSwap(CSVCMsg_PaintmapData* other) {
  paintmap_.Swap(&other->paintmap_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSVCMsg_PaintmapData::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[45];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CSVCMsg_PaintmapData

// optional bytes paintmap = 1;
bool CSVCMsg_PaintmapData::has_paintmap() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CSVCMsg_PaintmapData::set_has_paintmap() {
  _has_bits_[0] |= 0x00000001u;
}
void CSVCMsg_PaintmapData::clear_has_paintmap() {
  _has_bits_[0] &= ~0x00000001u;
}
void CSVCMsg_PaintmapData::clear_paintmap() {
  paintmap_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_paintmap();
}
const ::std::string& CSVCMsg_PaintmapData::paintmap() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_PaintmapData.paintmap)
  return paintmap_.GetNoArena();
}
void CSVCMsg_PaintmapData::set_paintmap(const ::std::string& value) {
  set_has_paintmap();
  paintmap_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CSVCMsg_PaintmapData.paintmap)
}
#if LANG_CXX11
void CSVCMsg_PaintmapData::set_paintmap(::std::string&& value) {
  set_has_paintmap();
  paintmap_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CSVCMsg_PaintmapData.paintmap)
}
#endif
void CSVCMsg_PaintmapData::set_paintmap(const char* value) {
  set_has_paintmap();
  paintmap_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CSVCMsg_PaintmapData.paintmap)
}
void CSVCMsg_PaintmapData::set_paintmap(const void* value, size_t size) {
  set_has_paintmap();
  paintmap_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CSVCMsg_PaintmapData.paintmap)
}
::std::string* CSVCMsg_PaintmapData::mutable_paintmap() {
  set_has_paintmap();
  // @@protoc_insertion_point(field_mutable:CSVCMsg_PaintmapData.paintmap)
  return paintmap_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CSVCMsg_PaintmapData::release_paintmap() {
  // @@protoc_insertion_point(field_release:CSVCMsg_PaintmapData.paintmap)
  clear_has_paintmap();
  return paintmap_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CSVCMsg_PaintmapData::set_allocated_paintmap(::std::string* paintmap) {
  if (paintmap != NULL) {
    set_has_paintmap();
  } else {
    clear_has_paintmap();
  }
  paintmap_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), paintmap);
  // @@protoc_insertion_point(field_set_allocated:CSVCMsg_PaintmapData.paintmap)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSVCMsg_GameEvent_key_t::kTypeFieldNumber;
const int CSVCMsg_GameEvent_key_t::kValStringFieldNumber;
const int CSVCMsg_GameEvent_key_t::kValFloatFieldNumber;
const int CSVCMsg_GameEvent_key_t::kValLongFieldNumber;
const int CSVCMsg_GameEvent_key_t::kValShortFieldNumber;
const int CSVCMsg_GameEvent_key_t::kValByteFieldNumber;
const int CSVCMsg_GameEvent_key_t::kValBoolFieldNumber;
const int CSVCMsg_GameEvent_key_t::kValUint64FieldNumber;
const int CSVCMsg_GameEvent_key_t::kValWstringFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSVCMsg_GameEvent_key_t::CSVCMsg_GameEvent_key_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_netmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSVCMsg_GameEvent.key_t)
}
CSVCMsg_GameEvent_key_t::CSVCMsg_GameEvent_key_t(const CSVCMsg_GameEvent_key_t& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  val_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_val_string()) {
    val_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.val_string_);
  }
  val_wstring_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_val_wstring()) {
    val_wstring_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.val_wstring_);
  }
  ::memcpy(&type_, &from.type_,
    reinterpret_cast<char*>(&val_uint64_) -
    reinterpret_cast<char*>(&type_) + sizeof(val_uint64_));
  // @@protoc_insertion_point(copy_constructor:CSVCMsg_GameEvent.key_t)
}

void CSVCMsg_GameEvent_key_t::SharedCtor() {
  _cached_size_ = 0;
  val_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  val_wstring_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, reinterpret_cast<char*>(&val_uint64_) -
    reinterpret_cast<char*>(&type_) + sizeof(val_uint64_));
}

CSVCMsg_GameEvent_key_t::~CSVCMsg_GameEvent_key_t() {
  // @@protoc_insertion_point(destructor:CSVCMsg_GameEvent.key_t)
  SharedDtor();
}

void CSVCMsg_GameEvent_key_t::SharedDtor() {
  val_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  val_wstring_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CSVCMsg_GameEvent_key_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSVCMsg_GameEvent_key_t::descriptor() {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[46].descriptor;
}

const CSVCMsg_GameEvent_key_t& CSVCMsg_GameEvent_key_t::default_instance() {
  protobuf_netmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CSVCMsg_GameEvent_key_t* CSVCMsg_GameEvent_key_t::New(::google::protobuf::Arena* arena) const {
  CSVCMsg_GameEvent_key_t* n = new CSVCMsg_GameEvent_key_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSVCMsg_GameEvent_key_t::Clear() {
// @@protoc_insertion_point(message_clear_start:CSVCMsg_GameEvent.key_t)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_val_string()) {
      GOOGLE_DCHECK(!val_string_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*val_string_.UnsafeRawStringPointer())->clear();
    }
    if (has_val_wstring()) {
      GOOGLE_DCHECK(!val_wstring_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*val_wstring_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 252u) {
    ::memset(&type_, 0, reinterpret_cast<char*>(&val_bool_) -
      reinterpret_cast<char*>(&type_) + sizeof(val_bool_));
  }
  val_uint64_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSVCMsg_GameEvent_key_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSVCMsg_GameEvent.key_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8u) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string val_string = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_val_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->val_string().data(), this->val_string().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CSVCMsg_GameEvent.key_t.val_string");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float val_float = 3;
      case 3: {
        if (tag == 29u) {
          set_has_val_float();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &val_float_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 val_long = 4;
      case 4: {
        if (tag == 32u) {
          set_has_val_long();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &val_long_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 val_short = 5;
      case 5: {
        if (tag == 40u) {
          set_has_val_short();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &val_short_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 val_byte = 6;
      case 6: {
        if (tag == 48u) {
          set_has_val_byte();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &val_byte_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool val_bool = 7;
      case 7: {
        if (tag == 56u) {
          set_has_val_bool();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &val_bool_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 val_uint64 = 8;
      case 8: {
        if (tag == 64u) {
          set_has_val_uint64();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &val_uint64_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes val_wstring = 9;
      case 9: {
        if (tag == 74u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_val_wstring()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSVCMsg_GameEvent.key_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSVCMsg_GameEvent.key_t)
  return false;
#undef DO_
}

void CSVCMsg_GameEvent_key_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSVCMsg_GameEvent.key_t)
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional string val_string = 2;
  if (has_val_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->val_string().data(), this->val_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSVCMsg_GameEvent.key_t.val_string");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->val_string(), output);
  }

  // optional float val_float = 3;
  if (has_val_float()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->val_float(), output);
  }

  // optional int32 val_long = 4;
  if (has_val_long()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->val_long(), output);
  }

  // optional int32 val_short = 5;
  if (has_val_short()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->val_short(), output);
  }

  // optional int32 val_byte = 6;
  if (has_val_byte()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->val_byte(), output);
  }

  // optional bool val_bool = 7;
  if (has_val_bool()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->val_bool(), output);
  }

  // optional uint64 val_uint64 = 8;
  if (has_val_uint64()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->val_uint64(), output);
  }

  // optional bytes val_wstring = 9;
  if (has_val_wstring()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->val_wstring(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSVCMsg_GameEvent.key_t)
}

::google::protobuf::uint8* CSVCMsg_GameEvent_key_t::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSVCMsg_GameEvent.key_t)
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional string val_string = 2;
  if (has_val_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->val_string().data(), this->val_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSVCMsg_GameEvent.key_t.val_string");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->val_string(), target);
  }

  // optional float val_float = 3;
  if (has_val_float()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->val_float(), target);
  }

  // optional int32 val_long = 4;
  if (has_val_long()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->val_long(), target);
  }

  // optional int32 val_short = 5;
  if (has_val_short()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->val_short(), target);
  }

  // optional int32 val_byte = 6;
  if (has_val_byte()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->val_byte(), target);
  }

  // optional bool val_bool = 7;
  if (has_val_bool()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->val_bool(), target);
  }

  // optional uint64 val_uint64 = 8;
  if (has_val_uint64()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->val_uint64(), target);
  }

  // optional bytes val_wstring = 9;
  if (has_val_wstring()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->val_wstring(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSVCMsg_GameEvent.key_t)
  return target;
}

size_t CSVCMsg_GameEvent_key_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSVCMsg_GameEvent.key_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string val_string = 2;
    if (has_val_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->val_string());
    }

    // optional bytes val_wstring = 9;
    if (has_val_wstring()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->val_wstring());
    }

    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional float val_float = 3;
    if (has_val_float()) {
      total_size += 1 + 4;
    }

    // optional int32 val_long = 4;
    if (has_val_long()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->val_long());
    }

    // optional int32 val_short = 5;
    if (has_val_short()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->val_short());
    }

    // optional int32 val_byte = 6;
    if (has_val_byte()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->val_byte());
    }

    // optional bool val_bool = 7;
    if (has_val_bool()) {
      total_size += 1 + 1;
    }

  }
  // optional uint64 val_uint64 = 8;
  if (has_val_uint64()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->val_uint64());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSVCMsg_GameEvent_key_t::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSVCMsg_GameEvent.key_t)
  GOOGLE_DCHECK_NE(&from, this);
  const CSVCMsg_GameEvent_key_t* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSVCMsg_GameEvent_key_t>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSVCMsg_GameEvent.key_t)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSVCMsg_GameEvent.key_t)
    MergeFrom(*source);
  }
}

void CSVCMsg_GameEvent_key_t::MergeFrom(const CSVCMsg_GameEvent_key_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSVCMsg_GameEvent.key_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 255u) {
    if (from.has_val_string()) {
      set_has_val_string();
      val_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.val_string_);
    }
    if (from.has_val_wstring()) {
      set_has_val_wstring();
      val_wstring_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.val_wstring_);
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_val_float()) {
      set_val_float(from.val_float());
    }
    if (from.has_val_long()) {
      set_val_long(from.val_long());
    }
    if (from.has_val_short()) {
      set_val_short(from.val_short());
    }
    if (from.has_val_byte()) {
      set_val_byte(from.val_byte());
    }
    if (from.has_val_bool()) {
      set_val_bool(from.val_bool());
    }
  }
  if (from.has_val_uint64()) {
    set_val_uint64(from.val_uint64());
  }
}

void CSVCMsg_GameEvent_key_t::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSVCMsg_GameEvent.key_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSVCMsg_GameEvent_key_t::CopyFrom(const CSVCMsg_GameEvent_key_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSVCMsg_GameEvent.key_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSVCMsg_GameEvent_key_t::IsInitialized() const {
  return true;
}

void CSVCMsg_GameEvent_key_t::Swap(CSVCMsg_GameEvent_key_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSVCMsg_GameEvent_key_t::InternalSwap(CSVCMsg_GameEvent_key_t* other) {
  val_string_.Swap(&other->val_string_);
  val_wstring_.Swap(&other->val_wstring_);
  std::swap(type_, other->type_);
  std::swap(val_float_, other->val_float_);
  std::swap(val_long_, other->val_long_);
  std::swap(val_short_, other->val_short_);
  std::swap(val_byte_, other->val_byte_);
  std::swap(val_bool_, other->val_bool_);
  std::swap(val_uint64_, other->val_uint64_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSVCMsg_GameEvent_key_t::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[46];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CSVCMsg_GameEvent_key_t

// optional int32 type = 1;
bool CSVCMsg_GameEvent_key_t::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CSVCMsg_GameEvent_key_t::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
void CSVCMsg_GameEvent_key_t::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void CSVCMsg_GameEvent_key_t::clear_type() {
  type_ = 0;
  clear_has_type();
}
::google::protobuf::int32 CSVCMsg_GameEvent_key_t::type() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_GameEvent.key_t.type)
  return type_;
}
void CSVCMsg_GameEvent_key_t::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:CSVCMsg_GameEvent.key_t.type)
}

// optional string val_string = 2;
bool CSVCMsg_GameEvent_key_t::has_val_string() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CSVCMsg_GameEvent_key_t::set_has_val_string() {
  _has_bits_[0] |= 0x00000001u;
}
void CSVCMsg_GameEvent_key_t::clear_has_val_string() {
  _has_bits_[0] &= ~0x00000001u;
}
void CSVCMsg_GameEvent_key_t::clear_val_string() {
  val_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_val_string();
}
const ::std::string& CSVCMsg_GameEvent_key_t::val_string() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_GameEvent.key_t.val_string)
  return val_string_.GetNoArena();
}
void CSVCMsg_GameEvent_key_t::set_val_string(const ::std::string& value) {
  set_has_val_string();
  val_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CSVCMsg_GameEvent.key_t.val_string)
}
#if LANG_CXX11
void CSVCMsg_GameEvent_key_t::set_val_string(::std::string&& value) {
  set_has_val_string();
  val_string_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CSVCMsg_GameEvent.key_t.val_string)
}
#endif
void CSVCMsg_GameEvent_key_t::set_val_string(const char* value) {
  set_has_val_string();
  val_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CSVCMsg_GameEvent.key_t.val_string)
}
void CSVCMsg_GameEvent_key_t::set_val_string(const char* value, size_t size) {
  set_has_val_string();
  val_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CSVCMsg_GameEvent.key_t.val_string)
}
::std::string* CSVCMsg_GameEvent_key_t::mutable_val_string() {
  set_has_val_string();
  // @@protoc_insertion_point(field_mutable:CSVCMsg_GameEvent.key_t.val_string)
  return val_string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CSVCMsg_GameEvent_key_t::release_val_string() {
  // @@protoc_insertion_point(field_release:CSVCMsg_GameEvent.key_t.val_string)
  clear_has_val_string();
  return val_string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CSVCMsg_GameEvent_key_t::set_allocated_val_string(::std::string* val_string) {
  if (val_string != NULL) {
    set_has_val_string();
  } else {
    clear_has_val_string();
  }
  val_string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), val_string);
  // @@protoc_insertion_point(field_set_allocated:CSVCMsg_GameEvent.key_t.val_string)
}

// optional float val_float = 3;
bool CSVCMsg_GameEvent_key_t::has_val_float() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CSVCMsg_GameEvent_key_t::set_has_val_float() {
  _has_bits_[0] |= 0x00000008u;
}
void CSVCMsg_GameEvent_key_t::clear_has_val_float() {
  _has_bits_[0] &= ~0x00000008u;
}
void CSVCMsg_GameEvent_key_t::clear_val_float() {
  val_float_ = 0;
  clear_has_val_float();
}
float CSVCMsg_GameEvent_key_t::val_float() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_GameEvent.key_t.val_float)
  return val_float_;
}
void CSVCMsg_GameEvent_key_t::set_val_float(float value) {
  set_has_val_float();
  val_float_ = value;
  // @@protoc_insertion_point(field_set:CSVCMsg_GameEvent.key_t.val_float)
}

// optional int32 val_long = 4;
bool CSVCMsg_GameEvent_key_t::has_val_long() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CSVCMsg_GameEvent_key_t::set_has_val_long() {
  _has_bits_[0] |= 0x00000010u;
}
void CSVCMsg_GameEvent_key_t::clear_has_val_long() {
  _has_bits_[0] &= ~0x00000010u;
}
void CSVCMsg_GameEvent_key_t::clear_val_long() {
  val_long_ = 0;
  clear_has_val_long();
}
::google::protobuf::int32 CSVCMsg_GameEvent_key_t::val_long() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_GameEvent.key_t.val_long)
  return val_long_;
}
void CSVCMsg_GameEvent_key_t::set_val_long(::google::protobuf::int32 value) {
  set_has_val_long();
  val_long_ = value;
  // @@protoc_insertion_point(field_set:CSVCMsg_GameEvent.key_t.val_long)
}

// optional int32 val_short = 5;
bool CSVCMsg_GameEvent_key_t::has_val_short() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CSVCMsg_GameEvent_key_t::set_has_val_short() {
  _has_bits_[0] |= 0x00000020u;
}
void CSVCMsg_GameEvent_key_t::clear_has_val_short() {
  _has_bits_[0] &= ~0x00000020u;
}
void CSVCMsg_GameEvent_key_t::clear_val_short() {
  val_short_ = 0;
  clear_has_val_short();
}
::google::protobuf::int32 CSVCMsg_GameEvent_key_t::val_short() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_GameEvent.key_t.val_short)
  return val_short_;
}
void CSVCMsg_GameEvent_key_t::set_val_short(::google::protobuf::int32 value) {
  set_has_val_short();
  val_short_ = value;
  // @@protoc_insertion_point(field_set:CSVCMsg_GameEvent.key_t.val_short)
}

// optional int32 val_byte = 6;
bool CSVCMsg_GameEvent_key_t::has_val_byte() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CSVCMsg_GameEvent_key_t::set_has_val_byte() {
  _has_bits_[0] |= 0x00000040u;
}
void CSVCMsg_GameEvent_key_t::clear_has_val_byte() {
  _has_bits_[0] &= ~0x00000040u;
}
void CSVCMsg_GameEvent_key_t::clear_val_byte() {
  val_byte_ = 0;
  clear_has_val_byte();
}
::google::protobuf::int32 CSVCMsg_GameEvent_key_t::val_byte() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_GameEvent.key_t.val_byte)
  return val_byte_;
}
void CSVCMsg_GameEvent_key_t::set_val_byte(::google::protobuf::int32 value) {
  set_has_val_byte();
  val_byte_ = value;
  // @@protoc_insertion_point(field_set:CSVCMsg_GameEvent.key_t.val_byte)
}

// optional bool val_bool = 7;
bool CSVCMsg_GameEvent_key_t::has_val_bool() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CSVCMsg_GameEvent_key_t::set_has_val_bool() {
  _has_bits_[0] |= 0x00000080u;
}
void CSVCMsg_GameEvent_key_t::clear_has_val_bool() {
  _has_bits_[0] &= ~0x00000080u;
}
void CSVCMsg_GameEvent_key_t::clear_val_bool() {
  val_bool_ = false;
  clear_has_val_bool();
}
bool CSVCMsg_GameEvent_key_t::val_bool() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_GameEvent.key_t.val_bool)
  return val_bool_;
}
void CSVCMsg_GameEvent_key_t::set_val_bool(bool value) {
  set_has_val_bool();
  val_bool_ = value;
  // @@protoc_insertion_point(field_set:CSVCMsg_GameEvent.key_t.val_bool)
}

// optional uint64 val_uint64 = 8;
bool CSVCMsg_GameEvent_key_t::has_val_uint64() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CSVCMsg_GameEvent_key_t::set_has_val_uint64() {
  _has_bits_[0] |= 0x00000100u;
}
void CSVCMsg_GameEvent_key_t::clear_has_val_uint64() {
  _has_bits_[0] &= ~0x00000100u;
}
void CSVCMsg_GameEvent_key_t::clear_val_uint64() {
  val_uint64_ = GOOGLE_ULONGLONG(0);
  clear_has_val_uint64();
}
::google::protobuf::uint64 CSVCMsg_GameEvent_key_t::val_uint64() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_GameEvent.key_t.val_uint64)
  return val_uint64_;
}
void CSVCMsg_GameEvent_key_t::set_val_uint64(::google::protobuf::uint64 value) {
  set_has_val_uint64();
  val_uint64_ = value;
  // @@protoc_insertion_point(field_set:CSVCMsg_GameEvent.key_t.val_uint64)
}

// optional bytes val_wstring = 9;
bool CSVCMsg_GameEvent_key_t::has_val_wstring() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CSVCMsg_GameEvent_key_t::set_has_val_wstring() {
  _has_bits_[0] |= 0x00000002u;
}
void CSVCMsg_GameEvent_key_t::clear_has_val_wstring() {
  _has_bits_[0] &= ~0x00000002u;
}
void CSVCMsg_GameEvent_key_t::clear_val_wstring() {
  val_wstring_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_val_wstring();
}
const ::std::string& CSVCMsg_GameEvent_key_t::val_wstring() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_GameEvent.key_t.val_wstring)
  return val_wstring_.GetNoArena();
}
void CSVCMsg_GameEvent_key_t::set_val_wstring(const ::std::string& value) {
  set_has_val_wstring();
  val_wstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CSVCMsg_GameEvent.key_t.val_wstring)
}
#if LANG_CXX11
void CSVCMsg_GameEvent_key_t::set_val_wstring(::std::string&& value) {
  set_has_val_wstring();
  val_wstring_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CSVCMsg_GameEvent.key_t.val_wstring)
}
#endif
void CSVCMsg_GameEvent_key_t::set_val_wstring(const char* value) {
  set_has_val_wstring();
  val_wstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CSVCMsg_GameEvent.key_t.val_wstring)
}
void CSVCMsg_GameEvent_key_t::set_val_wstring(const void* value, size_t size) {
  set_has_val_wstring();
  val_wstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CSVCMsg_GameEvent.key_t.val_wstring)
}
::std::string* CSVCMsg_GameEvent_key_t::mutable_val_wstring() {
  set_has_val_wstring();
  // @@protoc_insertion_point(field_mutable:CSVCMsg_GameEvent.key_t.val_wstring)
  return val_wstring_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CSVCMsg_GameEvent_key_t::release_val_wstring() {
  // @@protoc_insertion_point(field_release:CSVCMsg_GameEvent.key_t.val_wstring)
  clear_has_val_wstring();
  return val_wstring_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CSVCMsg_GameEvent_key_t::set_allocated_val_wstring(::std::string* val_wstring) {
  if (val_wstring != NULL) {
    set_has_val_wstring();
  } else {
    clear_has_val_wstring();
  }
  val_wstring_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), val_wstring);
  // @@protoc_insertion_point(field_set_allocated:CSVCMsg_GameEvent.key_t.val_wstring)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSVCMsg_GameEvent::kEventNameFieldNumber;
const int CSVCMsg_GameEvent::kEventidFieldNumber;
const int CSVCMsg_GameEvent::kKeysFieldNumber;
const int CSVCMsg_GameEvent::kPassthroughFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSVCMsg_GameEvent::CSVCMsg_GameEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_netmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSVCMsg_GameEvent)
}
CSVCMsg_GameEvent::CSVCMsg_GameEvent(const CSVCMsg_GameEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      keys_(from.keys_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  event_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_event_name()) {
    event_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.event_name_);
  }
  ::memcpy(&eventid_, &from.eventid_,
    reinterpret_cast<char*>(&passthrough_) -
    reinterpret_cast<char*>(&eventid_) + sizeof(passthrough_));
  // @@protoc_insertion_point(copy_constructor:CSVCMsg_GameEvent)
}

void CSVCMsg_GameEvent::SharedCtor() {
  _cached_size_ = 0;
  event_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&eventid_, 0, reinterpret_cast<char*>(&passthrough_) -
    reinterpret_cast<char*>(&eventid_) + sizeof(passthrough_));
}

CSVCMsg_GameEvent::~CSVCMsg_GameEvent() {
  // @@protoc_insertion_point(destructor:CSVCMsg_GameEvent)
  SharedDtor();
}

void CSVCMsg_GameEvent::SharedDtor() {
  event_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CSVCMsg_GameEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSVCMsg_GameEvent::descriptor() {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[47].descriptor;
}

const CSVCMsg_GameEvent& CSVCMsg_GameEvent::default_instance() {
  protobuf_netmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CSVCMsg_GameEvent* CSVCMsg_GameEvent::New(::google::protobuf::Arena* arena) const {
  CSVCMsg_GameEvent* n = new CSVCMsg_GameEvent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSVCMsg_GameEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:CSVCMsg_GameEvent)
  keys_.Clear();
  if (has_event_name()) {
    GOOGLE_DCHECK(!event_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*event_name_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&eventid_, 0, reinterpret_cast<char*>(&passthrough_) -
      reinterpret_cast<char*>(&eventid_) + sizeof(passthrough_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSVCMsg_GameEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSVCMsg_GameEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string event_name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_event_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->event_name().data(), this->event_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CSVCMsg_GameEvent.event_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 eventid = 2;
      case 2: {
        if (tag == 16u) {
          set_has_eventid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eventid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .CSVCMsg_GameEvent.key_t keys = 3;
      case 3: {
        if (tag == 26u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_keys()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // optional int32 passthrough = 4;
      case 4: {
        if (tag == 32u) {
          set_has_passthrough();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &passthrough_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSVCMsg_GameEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSVCMsg_GameEvent)
  return false;
#undef DO_
}

void CSVCMsg_GameEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSVCMsg_GameEvent)
  // optional string event_name = 1;
  if (has_event_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->event_name().data(), this->event_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSVCMsg_GameEvent.event_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->event_name(), output);
  }

  // optional int32 eventid = 2;
  if (has_eventid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->eventid(), output);
  }

  // repeated .CSVCMsg_GameEvent.key_t keys = 3;
  for (unsigned int i = 0, n = this->keys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->keys(i), output);
  }

  // optional int32 passthrough = 4;
  if (has_passthrough()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->passthrough(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSVCMsg_GameEvent)
}

::google::protobuf::uint8* CSVCMsg_GameEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSVCMsg_GameEvent)
  // optional string event_name = 1;
  if (has_event_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->event_name().data(), this->event_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSVCMsg_GameEvent.event_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->event_name(), target);
  }

  // optional int32 eventid = 2;
  if (has_eventid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->eventid(), target);
  }

  // repeated .CSVCMsg_GameEvent.key_t keys = 3;
  for (unsigned int i = 0, n = this->keys_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->keys(i), false, target);
  }

  // optional int32 passthrough = 4;
  if (has_passthrough()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->passthrough(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSVCMsg_GameEvent)
  return target;
}

size_t CSVCMsg_GameEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSVCMsg_GameEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .CSVCMsg_GameEvent.key_t keys = 3;
  {
    unsigned int count = this->keys_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->keys(i));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional string event_name = 1;
    if (has_event_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->event_name());
    }

    // optional int32 eventid = 2;
    if (has_eventid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eventid());
    }

    // optional int32 passthrough = 4;
    if (has_passthrough()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->passthrough());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSVCMsg_GameEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSVCMsg_GameEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const CSVCMsg_GameEvent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSVCMsg_GameEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSVCMsg_GameEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSVCMsg_GameEvent)
    MergeFrom(*source);
  }
}

void CSVCMsg_GameEvent::MergeFrom(const CSVCMsg_GameEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSVCMsg_GameEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  keys_.MergeFrom(from.keys_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_event_name()) {
      set_has_event_name();
      event_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.event_name_);
    }
    if (from.has_eventid()) {
      set_eventid(from.eventid());
    }
    if (from.has_passthrough()) {
      set_passthrough(from.passthrough());
    }
  }
}

void CSVCMsg_GameEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSVCMsg_GameEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSVCMsg_GameEvent::CopyFrom(const CSVCMsg_GameEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSVCMsg_GameEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSVCMsg_GameEvent::IsInitialized() const {
  return true;
}

void CSVCMsg_GameEvent::Swap(CSVCMsg_GameEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSVCMsg_GameEvent::InternalSwap(CSVCMsg_GameEvent* other) {
  keys_.UnsafeArenaSwap(&other->keys_);
  event_name_.Swap(&other->event_name_);
  std::swap(eventid_, other->eventid_);
  std::swap(passthrough_, other->passthrough_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSVCMsg_GameEvent::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[47];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CSVCMsg_GameEvent

// optional string event_name = 1;
bool CSVCMsg_GameEvent::has_event_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CSVCMsg_GameEvent::set_has_event_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CSVCMsg_GameEvent::clear_has_event_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CSVCMsg_GameEvent::clear_event_name() {
  event_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_event_name();
}
const ::std::string& CSVCMsg_GameEvent::event_name() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_GameEvent.event_name)
  return event_name_.GetNoArena();
}
void CSVCMsg_GameEvent::set_event_name(const ::std::string& value) {
  set_has_event_name();
  event_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CSVCMsg_GameEvent.event_name)
}
#if LANG_CXX11
void CSVCMsg_GameEvent::set_event_name(::std::string&& value) {
  set_has_event_name();
  event_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CSVCMsg_GameEvent.event_name)
}
#endif
void CSVCMsg_GameEvent::set_event_name(const char* value) {
  set_has_event_name();
  event_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CSVCMsg_GameEvent.event_name)
}
void CSVCMsg_GameEvent::set_event_name(const char* value, size_t size) {
  set_has_event_name();
  event_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CSVCMsg_GameEvent.event_name)
}
::std::string* CSVCMsg_GameEvent::mutable_event_name() {
  set_has_event_name();
  // @@protoc_insertion_point(field_mutable:CSVCMsg_GameEvent.event_name)
  return event_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CSVCMsg_GameEvent::release_event_name() {
  // @@protoc_insertion_point(field_release:CSVCMsg_GameEvent.event_name)
  clear_has_event_name();
  return event_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CSVCMsg_GameEvent::set_allocated_event_name(::std::string* event_name) {
  if (event_name != NULL) {
    set_has_event_name();
  } else {
    clear_has_event_name();
  }
  event_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), event_name);
  // @@protoc_insertion_point(field_set_allocated:CSVCMsg_GameEvent.event_name)
}

// optional int32 eventid = 2;
bool CSVCMsg_GameEvent::has_eventid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CSVCMsg_GameEvent::set_has_eventid() {
  _has_bits_[0] |= 0x00000002u;
}
void CSVCMsg_GameEvent::clear_has_eventid() {
  _has_bits_[0] &= ~0x00000002u;
}
void CSVCMsg_GameEvent::clear_eventid() {
  eventid_ = 0;
  clear_has_eventid();
}
::google::protobuf::int32 CSVCMsg_GameEvent::eventid() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_GameEvent.eventid)
  return eventid_;
}
void CSVCMsg_GameEvent::set_eventid(::google::protobuf::int32 value) {
  set_has_eventid();
  eventid_ = value;
  // @@protoc_insertion_point(field_set:CSVCMsg_GameEvent.eventid)
}

// repeated .CSVCMsg_GameEvent.key_t keys = 3;
int CSVCMsg_GameEvent::keys_size() const {
  return keys_.size();
}
void CSVCMsg_GameEvent::clear_keys() {
  keys_.Clear();
}
const ::CSVCMsg_GameEvent_key_t& CSVCMsg_GameEvent::keys(int index) const {
  // @@protoc_insertion_point(field_get:CSVCMsg_GameEvent.keys)
  return keys_.Get(index);
}
::CSVCMsg_GameEvent_key_t* CSVCMsg_GameEvent::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:CSVCMsg_GameEvent.keys)
  return keys_.Mutable(index);
}
::CSVCMsg_GameEvent_key_t* CSVCMsg_GameEvent::add_keys() {
  // @@protoc_insertion_point(field_add:CSVCMsg_GameEvent.keys)
  return keys_.Add();
}
::google::protobuf::RepeatedPtrField< ::CSVCMsg_GameEvent_key_t >*
CSVCMsg_GameEvent::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:CSVCMsg_GameEvent.keys)
  return &keys_;
}
const ::google::protobuf::RepeatedPtrField< ::CSVCMsg_GameEvent_key_t >&
CSVCMsg_GameEvent::keys() const {
  // @@protoc_insertion_point(field_list:CSVCMsg_GameEvent.keys)
  return keys_;
}

// optional int32 passthrough = 4;
bool CSVCMsg_GameEvent::has_passthrough() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CSVCMsg_GameEvent::set_has_passthrough() {
  _has_bits_[0] |= 0x00000004u;
}
void CSVCMsg_GameEvent::clear_has_passthrough() {
  _has_bits_[0] &= ~0x00000004u;
}
void CSVCMsg_GameEvent::clear_passthrough() {
  passthrough_ = 0;
  clear_has_passthrough();
}
::google::protobuf::int32 CSVCMsg_GameEvent::passthrough() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_GameEvent.passthrough)
  return passthrough_;
}
void CSVCMsg_GameEvent::set_passthrough(::google::protobuf::int32 value) {
  set_has_passthrough();
  passthrough_ = value;
  // @@protoc_insertion_point(field_set:CSVCMsg_GameEvent.passthrough)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSVCMsg_GameEventList_key_t::kTypeFieldNumber;
const int CSVCMsg_GameEventList_key_t::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSVCMsg_GameEventList_key_t::CSVCMsg_GameEventList_key_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_netmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSVCMsg_GameEventList.key_t)
}
CSVCMsg_GameEventList_key_t::CSVCMsg_GameEventList_key_t(const CSVCMsg_GameEventList_key_t& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:CSVCMsg_GameEventList.key_t)
}

void CSVCMsg_GameEventList_key_t::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

CSVCMsg_GameEventList_key_t::~CSVCMsg_GameEventList_key_t() {
  // @@protoc_insertion_point(destructor:CSVCMsg_GameEventList.key_t)
  SharedDtor();
}

void CSVCMsg_GameEventList_key_t::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CSVCMsg_GameEventList_key_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSVCMsg_GameEventList_key_t::descriptor() {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[48].descriptor;
}

const CSVCMsg_GameEventList_key_t& CSVCMsg_GameEventList_key_t::default_instance() {
  protobuf_netmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CSVCMsg_GameEventList_key_t* CSVCMsg_GameEventList_key_t::New(::google::protobuf::Arena* arena) const {
  CSVCMsg_GameEventList_key_t* n = new CSVCMsg_GameEventList_key_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSVCMsg_GameEventList_key_t::Clear() {
// @@protoc_insertion_point(message_clear_start:CSVCMsg_GameEventList.key_t)
  if (has_name()) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSVCMsg_GameEventList_key_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSVCMsg_GameEventList.key_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8u) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CSVCMsg_GameEventList.key_t.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSVCMsg_GameEventList.key_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSVCMsg_GameEventList.key_t)
  return false;
#undef DO_
}

void CSVCMsg_GameEventList_key_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSVCMsg_GameEventList.key_t)
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSVCMsg_GameEventList.key_t.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSVCMsg_GameEventList.key_t)
}

::google::protobuf::uint8* CSVCMsg_GameEventList_key_t::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSVCMsg_GameEventList.key_t)
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSVCMsg_GameEventList.key_t.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSVCMsg_GameEventList.key_t)
  return target;
}

size_t CSVCMsg_GameEventList_key_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSVCMsg_GameEventList.key_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSVCMsg_GameEventList_key_t::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSVCMsg_GameEventList.key_t)
  GOOGLE_DCHECK_NE(&from, this);
  const CSVCMsg_GameEventList_key_t* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSVCMsg_GameEventList_key_t>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSVCMsg_GameEventList.key_t)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSVCMsg_GameEventList.key_t)
    MergeFrom(*source);
  }
}

void CSVCMsg_GameEventList_key_t::MergeFrom(const CSVCMsg_GameEventList_key_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSVCMsg_GameEventList.key_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
}

void CSVCMsg_GameEventList_key_t::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSVCMsg_GameEventList.key_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSVCMsg_GameEventList_key_t::CopyFrom(const CSVCMsg_GameEventList_key_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSVCMsg_GameEventList.key_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSVCMsg_GameEventList_key_t::IsInitialized() const {
  return true;
}

void CSVCMsg_GameEventList_key_t::Swap(CSVCMsg_GameEventList_key_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSVCMsg_GameEventList_key_t::InternalSwap(CSVCMsg_GameEventList_key_t* other) {
  name_.Swap(&other->name_);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSVCMsg_GameEventList_key_t::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[48];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CSVCMsg_GameEventList_key_t

// optional int32 type = 1;
bool CSVCMsg_GameEventList_key_t::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CSVCMsg_GameEventList_key_t::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void CSVCMsg_GameEventList_key_t::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void CSVCMsg_GameEventList_key_t::clear_type() {
  type_ = 0;
  clear_has_type();
}
::google::protobuf::int32 CSVCMsg_GameEventList_key_t::type() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_GameEventList.key_t.type)
  return type_;
}
void CSVCMsg_GameEventList_key_t::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:CSVCMsg_GameEventList.key_t.type)
}

// optional string name = 2;
bool CSVCMsg_GameEventList_key_t::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CSVCMsg_GameEventList_key_t::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CSVCMsg_GameEventList_key_t::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CSVCMsg_GameEventList_key_t::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& CSVCMsg_GameEventList_key_t::name() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_GameEventList.key_t.name)
  return name_.GetNoArena();
}
void CSVCMsg_GameEventList_key_t::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CSVCMsg_GameEventList.key_t.name)
}
#if LANG_CXX11
void CSVCMsg_GameEventList_key_t::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CSVCMsg_GameEventList.key_t.name)
}
#endif
void CSVCMsg_GameEventList_key_t::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CSVCMsg_GameEventList.key_t.name)
}
void CSVCMsg_GameEventList_key_t::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CSVCMsg_GameEventList.key_t.name)
}
::std::string* CSVCMsg_GameEventList_key_t::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:CSVCMsg_GameEventList.key_t.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CSVCMsg_GameEventList_key_t::release_name() {
  // @@protoc_insertion_point(field_release:CSVCMsg_GameEventList.key_t.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CSVCMsg_GameEventList_key_t::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:CSVCMsg_GameEventList.key_t.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSVCMsg_GameEventList_descriptor_t::kEventidFieldNumber;
const int CSVCMsg_GameEventList_descriptor_t::kNameFieldNumber;
const int CSVCMsg_GameEventList_descriptor_t::kKeysFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSVCMsg_GameEventList_descriptor_t::CSVCMsg_GameEventList_descriptor_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_netmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSVCMsg_GameEventList.descriptor_t)
}
CSVCMsg_GameEventList_descriptor_t::CSVCMsg_GameEventList_descriptor_t(const CSVCMsg_GameEventList_descriptor_t& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      keys_(from.keys_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  eventid_ = from.eventid_;
  // @@protoc_insertion_point(copy_constructor:CSVCMsg_GameEventList.descriptor_t)
}

void CSVCMsg_GameEventList_descriptor_t::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  eventid_ = 0;
}

CSVCMsg_GameEventList_descriptor_t::~CSVCMsg_GameEventList_descriptor_t() {
  // @@protoc_insertion_point(destructor:CSVCMsg_GameEventList.descriptor_t)
  SharedDtor();
}

void CSVCMsg_GameEventList_descriptor_t::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CSVCMsg_GameEventList_descriptor_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSVCMsg_GameEventList_descriptor_t::descriptor() {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[49].descriptor;
}

const CSVCMsg_GameEventList_descriptor_t& CSVCMsg_GameEventList_descriptor_t::default_instance() {
  protobuf_netmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CSVCMsg_GameEventList_descriptor_t* CSVCMsg_GameEventList_descriptor_t::New(::google::protobuf::Arena* arena) const {
  CSVCMsg_GameEventList_descriptor_t* n = new CSVCMsg_GameEventList_descriptor_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSVCMsg_GameEventList_descriptor_t::Clear() {
// @@protoc_insertion_point(message_clear_start:CSVCMsg_GameEventList.descriptor_t)
  keys_.Clear();
  if (has_name()) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  eventid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSVCMsg_GameEventList_descriptor_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSVCMsg_GameEventList.descriptor_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eventid = 1;
      case 1: {
        if (tag == 8u) {
          set_has_eventid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eventid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CSVCMsg_GameEventList.descriptor_t.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .CSVCMsg_GameEventList.key_t keys = 3;
      case 3: {
        if (tag == 26u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_keys()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSVCMsg_GameEventList.descriptor_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSVCMsg_GameEventList.descriptor_t)
  return false;
#undef DO_
}

void CSVCMsg_GameEventList_descriptor_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSVCMsg_GameEventList.descriptor_t)
  // optional int32 eventid = 1;
  if (has_eventid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eventid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSVCMsg_GameEventList.descriptor_t.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // repeated .CSVCMsg_GameEventList.key_t keys = 3;
  for (unsigned int i = 0, n = this->keys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->keys(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSVCMsg_GameEventList.descriptor_t)
}

::google::protobuf::uint8* CSVCMsg_GameEventList_descriptor_t::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSVCMsg_GameEventList.descriptor_t)
  // optional int32 eventid = 1;
  if (has_eventid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->eventid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSVCMsg_GameEventList.descriptor_t.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // repeated .CSVCMsg_GameEventList.key_t keys = 3;
  for (unsigned int i = 0, n = this->keys_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->keys(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSVCMsg_GameEventList.descriptor_t)
  return target;
}

size_t CSVCMsg_GameEventList_descriptor_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSVCMsg_GameEventList.descriptor_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .CSVCMsg_GameEventList.key_t keys = 3;
  {
    unsigned int count = this->keys_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->keys(i));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 eventid = 1;
    if (has_eventid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eventid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSVCMsg_GameEventList_descriptor_t::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSVCMsg_GameEventList.descriptor_t)
  GOOGLE_DCHECK_NE(&from, this);
  const CSVCMsg_GameEventList_descriptor_t* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSVCMsg_GameEventList_descriptor_t>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSVCMsg_GameEventList.descriptor_t)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSVCMsg_GameEventList.descriptor_t)
    MergeFrom(*source);
  }
}

void CSVCMsg_GameEventList_descriptor_t::MergeFrom(const CSVCMsg_GameEventList_descriptor_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSVCMsg_GameEventList.descriptor_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  keys_.MergeFrom(from.keys_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_eventid()) {
      set_eventid(from.eventid());
    }
  }
}

void CSVCMsg_GameEventList_descriptor_t::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSVCMsg_GameEventList.descriptor_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSVCMsg_GameEventList_descriptor_t::CopyFrom(const CSVCMsg_GameEventList_descriptor_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSVCMsg_GameEventList.descriptor_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSVCMsg_GameEventList_descriptor_t::IsInitialized() const {
  return true;
}

void CSVCMsg_GameEventList_descriptor_t::Swap(CSVCMsg_GameEventList_descriptor_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSVCMsg_GameEventList_descriptor_t::InternalSwap(CSVCMsg_GameEventList_descriptor_t* other) {
  keys_.UnsafeArenaSwap(&other->keys_);
  name_.Swap(&other->name_);
  std::swap(eventid_, other->eventid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSVCMsg_GameEventList_descriptor_t::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[49];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CSVCMsg_GameEventList_descriptor_t

// optional int32 eventid = 1;
bool CSVCMsg_GameEventList_descriptor_t::has_eventid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CSVCMsg_GameEventList_descriptor_t::set_has_eventid() {
  _has_bits_[0] |= 0x00000002u;
}
void CSVCMsg_GameEventList_descriptor_t::clear_has_eventid() {
  _has_bits_[0] &= ~0x00000002u;
}
void CSVCMsg_GameEventList_descriptor_t::clear_eventid() {
  eventid_ = 0;
  clear_has_eventid();
}
::google::protobuf::int32 CSVCMsg_GameEventList_descriptor_t::eventid() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_GameEventList.descriptor_t.eventid)
  return eventid_;
}
void CSVCMsg_GameEventList_descriptor_t::set_eventid(::google::protobuf::int32 value) {
  set_has_eventid();
  eventid_ = value;
  // @@protoc_insertion_point(field_set:CSVCMsg_GameEventList.descriptor_t.eventid)
}

// optional string name = 2;
bool CSVCMsg_GameEventList_descriptor_t::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CSVCMsg_GameEventList_descriptor_t::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CSVCMsg_GameEventList_descriptor_t::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CSVCMsg_GameEventList_descriptor_t::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& CSVCMsg_GameEventList_descriptor_t::name() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_GameEventList.descriptor_t.name)
  return name_.GetNoArena();
}
void CSVCMsg_GameEventList_descriptor_t::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CSVCMsg_GameEventList.descriptor_t.name)
}
#if LANG_CXX11
void CSVCMsg_GameEventList_descriptor_t::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CSVCMsg_GameEventList.descriptor_t.name)
}
#endif
void CSVCMsg_GameEventList_descriptor_t::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CSVCMsg_GameEventList.descriptor_t.name)
}
void CSVCMsg_GameEventList_descriptor_t::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CSVCMsg_GameEventList.descriptor_t.name)
}
::std::string* CSVCMsg_GameEventList_descriptor_t::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:CSVCMsg_GameEventList.descriptor_t.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CSVCMsg_GameEventList_descriptor_t::release_name() {
  // @@protoc_insertion_point(field_release:CSVCMsg_GameEventList.descriptor_t.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CSVCMsg_GameEventList_descriptor_t::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:CSVCMsg_GameEventList.descriptor_t.name)
}

// repeated .CSVCMsg_GameEventList.key_t keys = 3;
int CSVCMsg_GameEventList_descriptor_t::keys_size() const {
  return keys_.size();
}
void CSVCMsg_GameEventList_descriptor_t::clear_keys() {
  keys_.Clear();
}
const ::CSVCMsg_GameEventList_key_t& CSVCMsg_GameEventList_descriptor_t::keys(int index) const {
  // @@protoc_insertion_point(field_get:CSVCMsg_GameEventList.descriptor_t.keys)
  return keys_.Get(index);
}
::CSVCMsg_GameEventList_key_t* CSVCMsg_GameEventList_descriptor_t::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:CSVCMsg_GameEventList.descriptor_t.keys)
  return keys_.Mutable(index);
}
::CSVCMsg_GameEventList_key_t* CSVCMsg_GameEventList_descriptor_t::add_keys() {
  // @@protoc_insertion_point(field_add:CSVCMsg_GameEventList.descriptor_t.keys)
  return keys_.Add();
}
::google::protobuf::RepeatedPtrField< ::CSVCMsg_GameEventList_key_t >*
CSVCMsg_GameEventList_descriptor_t::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:CSVCMsg_GameEventList.descriptor_t.keys)
  return &keys_;
}
const ::google::protobuf::RepeatedPtrField< ::CSVCMsg_GameEventList_key_t >&
CSVCMsg_GameEventList_descriptor_t::keys() const {
  // @@protoc_insertion_point(field_list:CSVCMsg_GameEventList.descriptor_t.keys)
  return keys_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSVCMsg_GameEventList::kDescriptorsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSVCMsg_GameEventList::CSVCMsg_GameEventList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_netmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSVCMsg_GameEventList)
}
CSVCMsg_GameEventList::CSVCMsg_GameEventList(const CSVCMsg_GameEventList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      descriptors_(from.descriptors_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CSVCMsg_GameEventList)
}

void CSVCMsg_GameEventList::SharedCtor() {
  _cached_size_ = 0;
}

CSVCMsg_GameEventList::~CSVCMsg_GameEventList() {
  // @@protoc_insertion_point(destructor:CSVCMsg_GameEventList)
  SharedDtor();
}

void CSVCMsg_GameEventList::SharedDtor() {
}

void CSVCMsg_GameEventList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSVCMsg_GameEventList::descriptor() {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[50].descriptor;
}

const CSVCMsg_GameEventList& CSVCMsg_GameEventList::default_instance() {
  protobuf_netmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CSVCMsg_GameEventList* CSVCMsg_GameEventList::New(::google::protobuf::Arena* arena) const {
  CSVCMsg_GameEventList* n = new CSVCMsg_GameEventList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSVCMsg_GameEventList::Clear() {
// @@protoc_insertion_point(message_clear_start:CSVCMsg_GameEventList)
  descriptors_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSVCMsg_GameEventList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSVCMsg_GameEventList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CSVCMsg_GameEventList.descriptor_t descriptors = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_descriptors()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSVCMsg_GameEventList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSVCMsg_GameEventList)
  return false;
#undef DO_
}

void CSVCMsg_GameEventList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSVCMsg_GameEventList)
  // repeated .CSVCMsg_GameEventList.descriptor_t descriptors = 1;
  for (unsigned int i = 0, n = this->descriptors_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->descriptors(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSVCMsg_GameEventList)
}

::google::protobuf::uint8* CSVCMsg_GameEventList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSVCMsg_GameEventList)
  // repeated .CSVCMsg_GameEventList.descriptor_t descriptors = 1;
  for (unsigned int i = 0, n = this->descriptors_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->descriptors(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSVCMsg_GameEventList)
  return target;
}

size_t CSVCMsg_GameEventList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSVCMsg_GameEventList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .CSVCMsg_GameEventList.descriptor_t descriptors = 1;
  {
    unsigned int count = this->descriptors_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->descriptors(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSVCMsg_GameEventList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSVCMsg_GameEventList)
  GOOGLE_DCHECK_NE(&from, this);
  const CSVCMsg_GameEventList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSVCMsg_GameEventList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSVCMsg_GameEventList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSVCMsg_GameEventList)
    MergeFrom(*source);
  }
}

void CSVCMsg_GameEventList::MergeFrom(const CSVCMsg_GameEventList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSVCMsg_GameEventList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  descriptors_.MergeFrom(from.descriptors_);
}

void CSVCMsg_GameEventList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSVCMsg_GameEventList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSVCMsg_GameEventList::CopyFrom(const CSVCMsg_GameEventList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSVCMsg_GameEventList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSVCMsg_GameEventList::IsInitialized() const {
  return true;
}

void CSVCMsg_GameEventList::Swap(CSVCMsg_GameEventList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSVCMsg_GameEventList::InternalSwap(CSVCMsg_GameEventList* other) {
  descriptors_.UnsafeArenaSwap(&other->descriptors_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSVCMsg_GameEventList::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[50];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CSVCMsg_GameEventList

// repeated .CSVCMsg_GameEventList.descriptor_t descriptors = 1;
int CSVCMsg_GameEventList::descriptors_size() const {
  return descriptors_.size();
}
void CSVCMsg_GameEventList::clear_descriptors() {
  descriptors_.Clear();
}
const ::CSVCMsg_GameEventList_descriptor_t& CSVCMsg_GameEventList::descriptors(int index) const {
  // @@protoc_insertion_point(field_get:CSVCMsg_GameEventList.descriptors)
  return descriptors_.Get(index);
}
::CSVCMsg_GameEventList_descriptor_t* CSVCMsg_GameEventList::mutable_descriptors(int index) {
  // @@protoc_insertion_point(field_mutable:CSVCMsg_GameEventList.descriptors)
  return descriptors_.Mutable(index);
}
::CSVCMsg_GameEventList_descriptor_t* CSVCMsg_GameEventList::add_descriptors() {
  // @@protoc_insertion_point(field_add:CSVCMsg_GameEventList.descriptors)
  return descriptors_.Add();
}
::google::protobuf::RepeatedPtrField< ::CSVCMsg_GameEventList_descriptor_t >*
CSVCMsg_GameEventList::mutable_descriptors() {
  // @@protoc_insertion_point(field_mutable_list:CSVCMsg_GameEventList.descriptors)
  return &descriptors_;
}
const ::google::protobuf::RepeatedPtrField< ::CSVCMsg_GameEventList_descriptor_t >&
CSVCMsg_GameEventList::descriptors() const {
  // @@protoc_insertion_point(field_list:CSVCMsg_GameEventList.descriptors)
  return descriptors_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSVCMsg_TempEntities::kReliableFieldNumber;
const int CSVCMsg_TempEntities::kNumEntriesFieldNumber;
const int CSVCMsg_TempEntities::kEntityDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSVCMsg_TempEntities::CSVCMsg_TempEntities()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_netmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSVCMsg_TempEntities)
}
CSVCMsg_TempEntities::CSVCMsg_TempEntities(const CSVCMsg_TempEntities& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  entity_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_entity_data()) {
    entity_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.entity_data_);
  }
  ::memcpy(&reliable_, &from.reliable_,
    reinterpret_cast<char*>(&num_entries_) -
    reinterpret_cast<char*>(&reliable_) + sizeof(num_entries_));
  // @@protoc_insertion_point(copy_constructor:CSVCMsg_TempEntities)
}

void CSVCMsg_TempEntities::SharedCtor() {
  _cached_size_ = 0;
  entity_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&reliable_, 0, reinterpret_cast<char*>(&num_entries_) -
    reinterpret_cast<char*>(&reliable_) + sizeof(num_entries_));
}

CSVCMsg_TempEntities::~CSVCMsg_TempEntities() {
  // @@protoc_insertion_point(destructor:CSVCMsg_TempEntities)
  SharedDtor();
}

void CSVCMsg_TempEntities::SharedDtor() {
  entity_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CSVCMsg_TempEntities::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSVCMsg_TempEntities::descriptor() {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[51].descriptor;
}

const CSVCMsg_TempEntities& CSVCMsg_TempEntities::default_instance() {
  protobuf_netmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CSVCMsg_TempEntities* CSVCMsg_TempEntities::New(::google::protobuf::Arena* arena) const {
  CSVCMsg_TempEntities* n = new CSVCMsg_TempEntities;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSVCMsg_TempEntities::Clear() {
// @@protoc_insertion_point(message_clear_start:CSVCMsg_TempEntities)
  if (has_entity_data()) {
    GOOGLE_DCHECK(!entity_data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*entity_data_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&reliable_, 0, reinterpret_cast<char*>(&num_entries_) -
      reinterpret_cast<char*>(&reliable_) + sizeof(num_entries_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSVCMsg_TempEntities::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSVCMsg_TempEntities)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool reliable = 1;
      case 1: {
        if (tag == 8u) {
          set_has_reliable();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reliable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_entries = 2;
      case 2: {
        if (tag == 16u) {
          set_has_num_entries();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_entries_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes entity_data = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_entity_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSVCMsg_TempEntities)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSVCMsg_TempEntities)
  return false;
#undef DO_
}

void CSVCMsg_TempEntities::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSVCMsg_TempEntities)
  // optional bool reliable = 1;
  if (has_reliable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->reliable(), output);
  }

  // optional int32 num_entries = 2;
  if (has_num_entries()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num_entries(), output);
  }

  // optional bytes entity_data = 3;
  if (has_entity_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->entity_data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSVCMsg_TempEntities)
}

::google::protobuf::uint8* CSVCMsg_TempEntities::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSVCMsg_TempEntities)
  // optional bool reliable = 1;
  if (has_reliable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->reliable(), target);
  }

  // optional int32 num_entries = 2;
  if (has_num_entries()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num_entries(), target);
  }

  // optional bytes entity_data = 3;
  if (has_entity_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->entity_data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSVCMsg_TempEntities)
  return target;
}

size_t CSVCMsg_TempEntities::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSVCMsg_TempEntities)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional bytes entity_data = 3;
    if (has_entity_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->entity_data());
    }

    // optional bool reliable = 1;
    if (has_reliable()) {
      total_size += 1 + 1;
    }

    // optional int32 num_entries = 2;
    if (has_num_entries()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_entries());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSVCMsg_TempEntities::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSVCMsg_TempEntities)
  GOOGLE_DCHECK_NE(&from, this);
  const CSVCMsg_TempEntities* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSVCMsg_TempEntities>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSVCMsg_TempEntities)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSVCMsg_TempEntities)
    MergeFrom(*source);
  }
}

void CSVCMsg_TempEntities::MergeFrom(const CSVCMsg_TempEntities& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSVCMsg_TempEntities)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_entity_data()) {
      set_has_entity_data();
      entity_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.entity_data_);
    }
    if (from.has_reliable()) {
      set_reliable(from.reliable());
    }
    if (from.has_num_entries()) {
      set_num_entries(from.num_entries());
    }
  }
}

void CSVCMsg_TempEntities::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSVCMsg_TempEntities)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSVCMsg_TempEntities::CopyFrom(const CSVCMsg_TempEntities& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSVCMsg_TempEntities)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSVCMsg_TempEntities::IsInitialized() const {
  return true;
}

void CSVCMsg_TempEntities::Swap(CSVCMsg_TempEntities* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSVCMsg_TempEntities::InternalSwap(CSVCMsg_TempEntities* other) {
  entity_data_.Swap(&other->entity_data_);
  std::swap(reliable_, other->reliable_);
  std::swap(num_entries_, other->num_entries_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSVCMsg_TempEntities::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[51];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CSVCMsg_TempEntities

// optional bool reliable = 1;
bool CSVCMsg_TempEntities::has_reliable() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CSVCMsg_TempEntities::set_has_reliable() {
  _has_bits_[0] |= 0x00000002u;
}
void CSVCMsg_TempEntities::clear_has_reliable() {
  _has_bits_[0] &= ~0x00000002u;
}
void CSVCMsg_TempEntities::clear_reliable() {
  reliable_ = false;
  clear_has_reliable();
}
bool CSVCMsg_TempEntities::reliable() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_TempEntities.reliable)
  return reliable_;
}
void CSVCMsg_TempEntities::set_reliable(bool value) {
  set_has_reliable();
  reliable_ = value;
  // @@protoc_insertion_point(field_set:CSVCMsg_TempEntities.reliable)
}

// optional int32 num_entries = 2;
bool CSVCMsg_TempEntities::has_num_entries() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CSVCMsg_TempEntities::set_has_num_entries() {
  _has_bits_[0] |= 0x00000004u;
}
void CSVCMsg_TempEntities::clear_has_num_entries() {
  _has_bits_[0] &= ~0x00000004u;
}
void CSVCMsg_TempEntities::clear_num_entries() {
  num_entries_ = 0;
  clear_has_num_entries();
}
::google::protobuf::int32 CSVCMsg_TempEntities::num_entries() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_TempEntities.num_entries)
  return num_entries_;
}
void CSVCMsg_TempEntities::set_num_entries(::google::protobuf::int32 value) {
  set_has_num_entries();
  num_entries_ = value;
  // @@protoc_insertion_point(field_set:CSVCMsg_TempEntities.num_entries)
}

// optional bytes entity_data = 3;
bool CSVCMsg_TempEntities::has_entity_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CSVCMsg_TempEntities::set_has_entity_data() {
  _has_bits_[0] |= 0x00000001u;
}
void CSVCMsg_TempEntities::clear_has_entity_data() {
  _has_bits_[0] &= ~0x00000001u;
}
void CSVCMsg_TempEntities::clear_entity_data() {
  entity_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_entity_data();
}
const ::std::string& CSVCMsg_TempEntities::entity_data() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_TempEntities.entity_data)
  return entity_data_.GetNoArena();
}
void CSVCMsg_TempEntities::set_entity_data(const ::std::string& value) {
  set_has_entity_data();
  entity_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CSVCMsg_TempEntities.entity_data)
}
#if LANG_CXX11
void CSVCMsg_TempEntities::set_entity_data(::std::string&& value) {
  set_has_entity_data();
  entity_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CSVCMsg_TempEntities.entity_data)
}
#endif
void CSVCMsg_TempEntities::set_entity_data(const char* value) {
  set_has_entity_data();
  entity_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CSVCMsg_TempEntities.entity_data)
}
void CSVCMsg_TempEntities::set_entity_data(const void* value, size_t size) {
  set_has_entity_data();
  entity_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CSVCMsg_TempEntities.entity_data)
}
::std::string* CSVCMsg_TempEntities::mutable_entity_data() {
  set_has_entity_data();
  // @@protoc_insertion_point(field_mutable:CSVCMsg_TempEntities.entity_data)
  return entity_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CSVCMsg_TempEntities::release_entity_data() {
  // @@protoc_insertion_point(field_release:CSVCMsg_TempEntities.entity_data)
  clear_has_entity_data();
  return entity_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CSVCMsg_TempEntities::set_allocated_entity_data(::std::string* entity_data) {
  if (entity_data != NULL) {
    set_has_entity_data();
  } else {
    clear_has_entity_data();
  }
  entity_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), entity_data);
  // @@protoc_insertion_point(field_set_allocated:CSVCMsg_TempEntities.entity_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSVCMsg_PacketEntities::kMaxEntriesFieldNumber;
const int CSVCMsg_PacketEntities::kUpdatedEntriesFieldNumber;
const int CSVCMsg_PacketEntities::kIsDeltaFieldNumber;
const int CSVCMsg_PacketEntities::kUpdateBaselineFieldNumber;
const int CSVCMsg_PacketEntities::kBaselineFieldNumber;
const int CSVCMsg_PacketEntities::kDeltaFromFieldNumber;
const int CSVCMsg_PacketEntities::kEntityDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSVCMsg_PacketEntities::CSVCMsg_PacketEntities()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_netmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSVCMsg_PacketEntities)
}
CSVCMsg_PacketEntities::CSVCMsg_PacketEntities(const CSVCMsg_PacketEntities& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  entity_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_entity_data()) {
    entity_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.entity_data_);
  }
  ::memcpy(&max_entries_, &from.max_entries_,
    reinterpret_cast<char*>(&delta_from_) -
    reinterpret_cast<char*>(&max_entries_) + sizeof(delta_from_));
  // @@protoc_insertion_point(copy_constructor:CSVCMsg_PacketEntities)
}

void CSVCMsg_PacketEntities::SharedCtor() {
  _cached_size_ = 0;
  entity_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&max_entries_, 0, reinterpret_cast<char*>(&delta_from_) -
    reinterpret_cast<char*>(&max_entries_) + sizeof(delta_from_));
}

CSVCMsg_PacketEntities::~CSVCMsg_PacketEntities() {
  // @@protoc_insertion_point(destructor:CSVCMsg_PacketEntities)
  SharedDtor();
}

void CSVCMsg_PacketEntities::SharedDtor() {
  entity_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CSVCMsg_PacketEntities::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSVCMsg_PacketEntities::descriptor() {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[52].descriptor;
}

const CSVCMsg_PacketEntities& CSVCMsg_PacketEntities::default_instance() {
  protobuf_netmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CSVCMsg_PacketEntities* CSVCMsg_PacketEntities::New(::google::protobuf::Arena* arena) const {
  CSVCMsg_PacketEntities* n = new CSVCMsg_PacketEntities;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSVCMsg_PacketEntities::Clear() {
// @@protoc_insertion_point(message_clear_start:CSVCMsg_PacketEntities)
  if (has_entity_data()) {
    GOOGLE_DCHECK(!entity_data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*entity_data_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 126u) {
    ::memset(&max_entries_, 0, reinterpret_cast<char*>(&delta_from_) -
      reinterpret_cast<char*>(&max_entries_) + sizeof(delta_from_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSVCMsg_PacketEntities::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSVCMsg_PacketEntities)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 max_entries = 1;
      case 1: {
        if (tag == 8u) {
          set_has_max_entries();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_entries_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 updated_entries = 2;
      case 2: {
        if (tag == 16u) {
          set_has_updated_entries();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &updated_entries_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_delta = 3;
      case 3: {
        if (tag == 24u) {
          set_has_is_delta();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_delta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool update_baseline = 4;
      case 4: {
        if (tag == 32u) {
          set_has_update_baseline();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &update_baseline_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 baseline = 5;
      case 5: {
        if (tag == 40u) {
          set_has_baseline();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &baseline_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 delta_from = 6;
      case 6: {
        if (tag == 48u) {
          set_has_delta_from();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &delta_from_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes entity_data = 7;
      case 7: {
        if (tag == 58u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_entity_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSVCMsg_PacketEntities)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSVCMsg_PacketEntities)
  return false;
#undef DO_
}

void CSVCMsg_PacketEntities::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSVCMsg_PacketEntities)
  // optional int32 max_entries = 1;
  if (has_max_entries()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->max_entries(), output);
  }

  // optional int32 updated_entries = 2;
  if (has_updated_entries()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->updated_entries(), output);
  }

  // optional bool is_delta = 3;
  if (has_is_delta()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_delta(), output);
  }

  // optional bool update_baseline = 4;
  if (has_update_baseline()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->update_baseline(), output);
  }

  // optional int32 baseline = 5;
  if (has_baseline()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->baseline(), output);
  }

  // optional int32 delta_from = 6;
  if (has_delta_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->delta_from(), output);
  }

  // optional bytes entity_data = 7;
  if (has_entity_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->entity_data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSVCMsg_PacketEntities)
}

::google::protobuf::uint8* CSVCMsg_PacketEntities::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSVCMsg_PacketEntities)
  // optional int32 max_entries = 1;
  if (has_max_entries()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->max_entries(), target);
  }

  // optional int32 updated_entries = 2;
  if (has_updated_entries()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->updated_entries(), target);
  }

  // optional bool is_delta = 3;
  if (has_is_delta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_delta(), target);
  }

  // optional bool update_baseline = 4;
  if (has_update_baseline()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->update_baseline(), target);
  }

  // optional int32 baseline = 5;
  if (has_baseline()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->baseline(), target);
  }

  // optional int32 delta_from = 6;
  if (has_delta_from()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->delta_from(), target);
  }

  // optional bytes entity_data = 7;
  if (has_entity_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->entity_data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSVCMsg_PacketEntities)
  return target;
}

size_t CSVCMsg_PacketEntities::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSVCMsg_PacketEntities)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional bytes entity_data = 7;
    if (has_entity_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->entity_data());
    }

    // optional int32 max_entries = 1;
    if (has_max_entries()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_entries());
    }

    // optional int32 updated_entries = 2;
    if (has_updated_entries()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->updated_entries());
    }

    // optional bool is_delta = 3;
    if (has_is_delta()) {
      total_size += 1 + 1;
    }

    // optional bool update_baseline = 4;
    if (has_update_baseline()) {
      total_size += 1 + 1;
    }

    // optional int32 baseline = 5;
    if (has_baseline()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->baseline());
    }

    // optional int32 delta_from = 6;
    if (has_delta_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->delta_from());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSVCMsg_PacketEntities::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSVCMsg_PacketEntities)
  GOOGLE_DCHECK_NE(&from, this);
  const CSVCMsg_PacketEntities* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSVCMsg_PacketEntities>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSVCMsg_PacketEntities)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSVCMsg_PacketEntities)
    MergeFrom(*source);
  }
}

void CSVCMsg_PacketEntities::MergeFrom(const CSVCMsg_PacketEntities& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSVCMsg_PacketEntities)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 127u) {
    if (from.has_entity_data()) {
      set_has_entity_data();
      entity_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.entity_data_);
    }
    if (from.has_max_entries()) {
      set_max_entries(from.max_entries());
    }
    if (from.has_updated_entries()) {
      set_updated_entries(from.updated_entries());
    }
    if (from.has_is_delta()) {
      set_is_delta(from.is_delta());
    }
    if (from.has_update_baseline()) {
      set_update_baseline(from.update_baseline());
    }
    if (from.has_baseline()) {
      set_baseline(from.baseline());
    }
    if (from.has_delta_from()) {
      set_delta_from(from.delta_from());
    }
  }
}

void CSVCMsg_PacketEntities::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSVCMsg_PacketEntities)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSVCMsg_PacketEntities::CopyFrom(const CSVCMsg_PacketEntities& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSVCMsg_PacketEntities)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSVCMsg_PacketEntities::IsInitialized() const {
  return true;
}

void CSVCMsg_PacketEntities::Swap(CSVCMsg_PacketEntities* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSVCMsg_PacketEntities::InternalSwap(CSVCMsg_PacketEntities* other) {
  entity_data_.Swap(&other->entity_data_);
  std::swap(max_entries_, other->max_entries_);
  std::swap(updated_entries_, other->updated_entries_);
  std::swap(is_delta_, other->is_delta_);
  std::swap(update_baseline_, other->update_baseline_);
  std::swap(baseline_, other->baseline_);
  std::swap(delta_from_, other->delta_from_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSVCMsg_PacketEntities::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[52];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CSVCMsg_PacketEntities

// optional int32 max_entries = 1;
bool CSVCMsg_PacketEntities::has_max_entries() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CSVCMsg_PacketEntities::set_has_max_entries() {
  _has_bits_[0] |= 0x00000002u;
}
void CSVCMsg_PacketEntities::clear_has_max_entries() {
  _has_bits_[0] &= ~0x00000002u;
}
void CSVCMsg_PacketEntities::clear_max_entries() {
  max_entries_ = 0;
  clear_has_max_entries();
}
::google::protobuf::int32 CSVCMsg_PacketEntities::max_entries() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_PacketEntities.max_entries)
  return max_entries_;
}
void CSVCMsg_PacketEntities::set_max_entries(::google::protobuf::int32 value) {
  set_has_max_entries();
  max_entries_ = value;
  // @@protoc_insertion_point(field_set:CSVCMsg_PacketEntities.max_entries)
}

// optional int32 updated_entries = 2;
bool CSVCMsg_PacketEntities::has_updated_entries() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CSVCMsg_PacketEntities::set_has_updated_entries() {
  _has_bits_[0] |= 0x00000004u;
}
void CSVCMsg_PacketEntities::clear_has_updated_entries() {
  _has_bits_[0] &= ~0x00000004u;
}
void CSVCMsg_PacketEntities::clear_updated_entries() {
  updated_entries_ = 0;
  clear_has_updated_entries();
}
::google::protobuf::int32 CSVCMsg_PacketEntities::updated_entries() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_PacketEntities.updated_entries)
  return updated_entries_;
}
void CSVCMsg_PacketEntities::set_updated_entries(::google::protobuf::int32 value) {
  set_has_updated_entries();
  updated_entries_ = value;
  // @@protoc_insertion_point(field_set:CSVCMsg_PacketEntities.updated_entries)
}

// optional bool is_delta = 3;
bool CSVCMsg_PacketEntities::has_is_delta() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CSVCMsg_PacketEntities::set_has_is_delta() {
  _has_bits_[0] |= 0x00000008u;
}
void CSVCMsg_PacketEntities::clear_has_is_delta() {
  _has_bits_[0] &= ~0x00000008u;
}
void CSVCMsg_PacketEntities::clear_is_delta() {
  is_delta_ = false;
  clear_has_is_delta();
}
bool CSVCMsg_PacketEntities::is_delta() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_PacketEntities.is_delta)
  return is_delta_;
}
void CSVCMsg_PacketEntities::set_is_delta(bool value) {
  set_has_is_delta();
  is_delta_ = value;
  // @@protoc_insertion_point(field_set:CSVCMsg_PacketEntities.is_delta)
}

// optional bool update_baseline = 4;
bool CSVCMsg_PacketEntities::has_update_baseline() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CSVCMsg_PacketEntities::set_has_update_baseline() {
  _has_bits_[0] |= 0x00000010u;
}
void CSVCMsg_PacketEntities::clear_has_update_baseline() {
  _has_bits_[0] &= ~0x00000010u;
}
void CSVCMsg_PacketEntities::clear_update_baseline() {
  update_baseline_ = false;
  clear_has_update_baseline();
}
bool CSVCMsg_PacketEntities::update_baseline() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_PacketEntities.update_baseline)
  return update_baseline_;
}
void CSVCMsg_PacketEntities::set_update_baseline(bool value) {
  set_has_update_baseline();
  update_baseline_ = value;
  // @@protoc_insertion_point(field_set:CSVCMsg_PacketEntities.update_baseline)
}

// optional int32 baseline = 5;
bool CSVCMsg_PacketEntities::has_baseline() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CSVCMsg_PacketEntities::set_has_baseline() {
  _has_bits_[0] |= 0x00000020u;
}
void CSVCMsg_PacketEntities::clear_has_baseline() {
  _has_bits_[0] &= ~0x00000020u;
}
void CSVCMsg_PacketEntities::clear_baseline() {
  baseline_ = 0;
  clear_has_baseline();
}
::google::protobuf::int32 CSVCMsg_PacketEntities::baseline() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_PacketEntities.baseline)
  return baseline_;
}
void CSVCMsg_PacketEntities::set_baseline(::google::protobuf::int32 value) {
  set_has_baseline();
  baseline_ = value;
  // @@protoc_insertion_point(field_set:CSVCMsg_PacketEntities.baseline)
}

// optional int32 delta_from = 6;
bool CSVCMsg_PacketEntities::has_delta_from() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CSVCMsg_PacketEntities::set_has_delta_from() {
  _has_bits_[0] |= 0x00000040u;
}
void CSVCMsg_PacketEntities::clear_has_delta_from() {
  _has_bits_[0] &= ~0x00000040u;
}
void CSVCMsg_PacketEntities::clear_delta_from() {
  delta_from_ = 0;
  clear_has_delta_from();
}
::google::protobuf::int32 CSVCMsg_PacketEntities::delta_from() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_PacketEntities.delta_from)
  return delta_from_;
}
void CSVCMsg_PacketEntities::set_delta_from(::google::protobuf::int32 value) {
  set_has_delta_from();
  delta_from_ = value;
  // @@protoc_insertion_point(field_set:CSVCMsg_PacketEntities.delta_from)
}

// optional bytes entity_data = 7;
bool CSVCMsg_PacketEntities::has_entity_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CSVCMsg_PacketEntities::set_has_entity_data() {
  _has_bits_[0] |= 0x00000001u;
}
void CSVCMsg_PacketEntities::clear_has_entity_data() {
  _has_bits_[0] &= ~0x00000001u;
}
void CSVCMsg_PacketEntities::clear_entity_data() {
  entity_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_entity_data();
}
const ::std::string& CSVCMsg_PacketEntities::entity_data() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_PacketEntities.entity_data)
  return entity_data_.GetNoArena();
}
void CSVCMsg_PacketEntities::set_entity_data(const ::std::string& value) {
  set_has_entity_data();
  entity_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CSVCMsg_PacketEntities.entity_data)
}
#if LANG_CXX11
void CSVCMsg_PacketEntities::set_entity_data(::std::string&& value) {
  set_has_entity_data();
  entity_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CSVCMsg_PacketEntities.entity_data)
}
#endif
void CSVCMsg_PacketEntities::set_entity_data(const char* value) {
  set_has_entity_data();
  entity_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CSVCMsg_PacketEntities.entity_data)
}
void CSVCMsg_PacketEntities::set_entity_data(const void* value, size_t size) {
  set_has_entity_data();
  entity_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CSVCMsg_PacketEntities.entity_data)
}
::std::string* CSVCMsg_PacketEntities::mutable_entity_data() {
  set_has_entity_data();
  // @@protoc_insertion_point(field_mutable:CSVCMsg_PacketEntities.entity_data)
  return entity_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CSVCMsg_PacketEntities::release_entity_data() {
  // @@protoc_insertion_point(field_release:CSVCMsg_PacketEntities.entity_data)
  clear_has_entity_data();
  return entity_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CSVCMsg_PacketEntities::set_allocated_entity_data(::std::string* entity_data) {
  if (entity_data != NULL) {
    set_has_entity_data();
  } else {
    clear_has_entity_data();
  }
  entity_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), entity_data);
  // @@protoc_insertion_point(field_set_allocated:CSVCMsg_PacketEntities.entity_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSVCMsg_Sounds_sounddata_t::kOriginXFieldNumber;
const int CSVCMsg_Sounds_sounddata_t::kOriginYFieldNumber;
const int CSVCMsg_Sounds_sounddata_t::kOriginZFieldNumber;
const int CSVCMsg_Sounds_sounddata_t::kVolumeFieldNumber;
const int CSVCMsg_Sounds_sounddata_t::kDelayValueFieldNumber;
const int CSVCMsg_Sounds_sounddata_t::kSequenceNumberFieldNumber;
const int CSVCMsg_Sounds_sounddata_t::kEntityIndexFieldNumber;
const int CSVCMsg_Sounds_sounddata_t::kChannelFieldNumber;
const int CSVCMsg_Sounds_sounddata_t::kPitchFieldNumber;
const int CSVCMsg_Sounds_sounddata_t::kFlagsFieldNumber;
const int CSVCMsg_Sounds_sounddata_t::kSoundNumFieldNumber;
const int CSVCMsg_Sounds_sounddata_t::kSoundNumHandleFieldNumber;
const int CSVCMsg_Sounds_sounddata_t::kSpeakerEntityFieldNumber;
const int CSVCMsg_Sounds_sounddata_t::kRandomSeedFieldNumber;
const int CSVCMsg_Sounds_sounddata_t::kSoundLevelFieldNumber;
const int CSVCMsg_Sounds_sounddata_t::kIsSentenceFieldNumber;
const int CSVCMsg_Sounds_sounddata_t::kIsAmbientFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSVCMsg_Sounds_sounddata_t::CSVCMsg_Sounds_sounddata_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_netmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSVCMsg_Sounds.sounddata_t)
}
CSVCMsg_Sounds_sounddata_t::CSVCMsg_Sounds_sounddata_t(const CSVCMsg_Sounds_sounddata_t& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&origin_x_, &from.origin_x_,
    reinterpret_cast<char*>(&is_ambient_) -
    reinterpret_cast<char*>(&origin_x_) + sizeof(is_ambient_));
  // @@protoc_insertion_point(copy_constructor:CSVCMsg_Sounds.sounddata_t)
}

void CSVCMsg_Sounds_sounddata_t::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&origin_x_, 0, reinterpret_cast<char*>(&is_ambient_) -
    reinterpret_cast<char*>(&origin_x_) + sizeof(is_ambient_));
}

CSVCMsg_Sounds_sounddata_t::~CSVCMsg_Sounds_sounddata_t() {
  // @@protoc_insertion_point(destructor:CSVCMsg_Sounds.sounddata_t)
  SharedDtor();
}

void CSVCMsg_Sounds_sounddata_t::SharedDtor() {
}

void CSVCMsg_Sounds_sounddata_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSVCMsg_Sounds_sounddata_t::descriptor() {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[53].descriptor;
}

const CSVCMsg_Sounds_sounddata_t& CSVCMsg_Sounds_sounddata_t::default_instance() {
  protobuf_netmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CSVCMsg_Sounds_sounddata_t* CSVCMsg_Sounds_sounddata_t::New(::google::protobuf::Arena* arena) const {
  CSVCMsg_Sounds_sounddata_t* n = new CSVCMsg_Sounds_sounddata_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSVCMsg_Sounds_sounddata_t::Clear() {
// @@protoc_insertion_point(message_clear_start:CSVCMsg_Sounds.sounddata_t)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&origin_x_, 0, reinterpret_cast<char*>(&channel_) -
      reinterpret_cast<char*>(&origin_x_) + sizeof(channel_));
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&pitch_, 0, reinterpret_cast<char*>(&is_sentence_) -
      reinterpret_cast<char*>(&pitch_) + sizeof(is_sentence_));
  }
  is_ambient_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSVCMsg_Sounds_sounddata_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSVCMsg_Sounds.sounddata_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 origin_x = 1;
      case 1: {
        if (tag == 8u) {
          set_has_origin_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &origin_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 origin_y = 2;
      case 2: {
        if (tag == 16u) {
          set_has_origin_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &origin_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 origin_z = 3;
      case 3: {
        if (tag == 24u) {
          set_has_origin_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &origin_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 volume = 4;
      case 4: {
        if (tag == 32u) {
          set_has_volume();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float delay_value = 5;
      case 5: {
        if (tag == 45u) {
          set_has_delay_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &delay_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 sequence_number = 6;
      case 6: {
        if (tag == 48u) {
          set_has_sequence_number();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sequence_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 entity_index = 7;
      case 7: {
        if (tag == 56u) {
          set_has_entity_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &entity_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 channel = 8;
      case 8: {
        if (tag == 64u) {
          set_has_channel();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 pitch = 9;
      case 9: {
        if (tag == 72u) {
          set_has_pitch();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pitch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 flags = 10;
      case 10: {
        if (tag == 80u) {
          set_has_flags();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 sound_num = 11;
      case 11: {
        if (tag == 88u) {
          set_has_sound_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sound_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 sound_num_handle = 12;
      case 12: {
        if (tag == 101u) {
          set_has_sound_num_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &sound_num_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 speaker_entity = 13;
      case 13: {
        if (tag == 104u) {
          set_has_speaker_entity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &speaker_entity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 random_seed = 14;
      case 14: {
        if (tag == 112u) {
          set_has_random_seed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &random_seed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 sound_level = 15;
      case 15: {
        if (tag == 120u) {
          set_has_sound_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sound_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_sentence = 16;
      case 16: {
        if (tag == 128u) {
          set_has_is_sentence();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_sentence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_ambient = 17;
      case 17: {
        if (tag == 136u) {
          set_has_is_ambient();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_ambient_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSVCMsg_Sounds.sounddata_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSVCMsg_Sounds.sounddata_t)
  return false;
#undef DO_
}

void CSVCMsg_Sounds_sounddata_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSVCMsg_Sounds.sounddata_t)
  // optional sint32 origin_x = 1;
  if (has_origin_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->origin_x(), output);
  }

  // optional sint32 origin_y = 2;
  if (has_origin_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->origin_y(), output);
  }

  // optional sint32 origin_z = 3;
  if (has_origin_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->origin_z(), output);
  }

  // optional uint32 volume = 4;
  if (has_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->volume(), output);
  }

  // optional float delay_value = 5;
  if (has_delay_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->delay_value(), output);
  }

  // optional int32 sequence_number = 6;
  if (has_sequence_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->sequence_number(), output);
  }

  // optional int32 entity_index = 7;
  if (has_entity_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->entity_index(), output);
  }

  // optional int32 channel = 8;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->channel(), output);
  }

  // optional int32 pitch = 9;
  if (has_pitch()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->pitch(), output);
  }

  // optional int32 flags = 10;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->flags(), output);
  }

  // optional uint32 sound_num = 11;
  if (has_sound_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->sound_num(), output);
  }

  // optional fixed32 sound_num_handle = 12;
  if (has_sound_num_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(12, this->sound_num_handle(), output);
  }

  // optional int32 speaker_entity = 13;
  if (has_speaker_entity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->speaker_entity(), output);
  }

  // optional int32 random_seed = 14;
  if (has_random_seed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->random_seed(), output);
  }

  // optional int32 sound_level = 15;
  if (has_sound_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->sound_level(), output);
  }

  // optional bool is_sentence = 16;
  if (has_is_sentence()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->is_sentence(), output);
  }

  // optional bool is_ambient = 17;
  if (has_is_ambient()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->is_ambient(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSVCMsg_Sounds.sounddata_t)
}

::google::protobuf::uint8* CSVCMsg_Sounds_sounddata_t::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSVCMsg_Sounds.sounddata_t)
  // optional sint32 origin_x = 1;
  if (has_origin_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->origin_x(), target);
  }

  // optional sint32 origin_y = 2;
  if (has_origin_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->origin_y(), target);
  }

  // optional sint32 origin_z = 3;
  if (has_origin_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->origin_z(), target);
  }

  // optional uint32 volume = 4;
  if (has_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->volume(), target);
  }

  // optional float delay_value = 5;
  if (has_delay_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->delay_value(), target);
  }

  // optional int32 sequence_number = 6;
  if (has_sequence_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->sequence_number(), target);
  }

  // optional int32 entity_index = 7;
  if (has_entity_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->entity_index(), target);
  }

  // optional int32 channel = 8;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->channel(), target);
  }

  // optional int32 pitch = 9;
  if (has_pitch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->pitch(), target);
  }

  // optional int32 flags = 10;
  if (has_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->flags(), target);
  }

  // optional uint32 sound_num = 11;
  if (has_sound_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->sound_num(), target);
  }

  // optional fixed32 sound_num_handle = 12;
  if (has_sound_num_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(12, this->sound_num_handle(), target);
  }

  // optional int32 speaker_entity = 13;
  if (has_speaker_entity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->speaker_entity(), target);
  }

  // optional int32 random_seed = 14;
  if (has_random_seed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->random_seed(), target);
  }

  // optional int32 sound_level = 15;
  if (has_sound_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->sound_level(), target);
  }

  // optional bool is_sentence = 16;
  if (has_is_sentence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->is_sentence(), target);
  }

  // optional bool is_ambient = 17;
  if (has_is_ambient()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->is_ambient(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSVCMsg_Sounds.sounddata_t)
  return target;
}

size_t CSVCMsg_Sounds_sounddata_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSVCMsg_Sounds.sounddata_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional sint32 origin_x = 1;
    if (has_origin_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->origin_x());
    }

    // optional sint32 origin_y = 2;
    if (has_origin_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->origin_y());
    }

    // optional sint32 origin_z = 3;
    if (has_origin_z()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->origin_z());
    }

    // optional uint32 volume = 4;
    if (has_volume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->volume());
    }

    // optional float delay_value = 5;
    if (has_delay_value()) {
      total_size += 1 + 4;
    }

    // optional int32 sequence_number = 6;
    if (has_sequence_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sequence_number());
    }

    // optional int32 entity_index = 7;
    if (has_entity_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->entity_index());
    }

    // optional int32 channel = 8;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channel());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional int32 pitch = 9;
    if (has_pitch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pitch());
    }

    // optional int32 flags = 10;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flags());
    }

    // optional uint32 sound_num = 11;
    if (has_sound_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sound_num());
    }

    // optional fixed32 sound_num_handle = 12;
    if (has_sound_num_handle()) {
      total_size += 1 + 4;
    }

    // optional int32 speaker_entity = 13;
    if (has_speaker_entity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->speaker_entity());
    }

    // optional int32 random_seed = 14;
    if (has_random_seed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->random_seed());
    }

    // optional int32 sound_level = 15;
    if (has_sound_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sound_level());
    }

    // optional bool is_sentence = 16;
    if (has_is_sentence()) {
      total_size += 2 + 1;
    }

  }
  // optional bool is_ambient = 17;
  if (has_is_ambient()) {
    total_size += 2 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSVCMsg_Sounds_sounddata_t::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSVCMsg_Sounds.sounddata_t)
  GOOGLE_DCHECK_NE(&from, this);
  const CSVCMsg_Sounds_sounddata_t* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSVCMsg_Sounds_sounddata_t>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSVCMsg_Sounds.sounddata_t)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSVCMsg_Sounds.sounddata_t)
    MergeFrom(*source);
  }
}

void CSVCMsg_Sounds_sounddata_t::MergeFrom(const CSVCMsg_Sounds_sounddata_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSVCMsg_Sounds.sounddata_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 255u) {
    if (from.has_origin_x()) {
      set_origin_x(from.origin_x());
    }
    if (from.has_origin_y()) {
      set_origin_y(from.origin_y());
    }
    if (from.has_origin_z()) {
      set_origin_z(from.origin_z());
    }
    if (from.has_volume()) {
      set_volume(from.volume());
    }
    if (from.has_delay_value()) {
      set_delay_value(from.delay_value());
    }
    if (from.has_sequence_number()) {
      set_sequence_number(from.sequence_number());
    }
    if (from.has_entity_index()) {
      set_entity_index(from.entity_index());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
  }
  if (from._has_bits_[8 / 32] & 65280u) {
    if (from.has_pitch()) {
      set_pitch(from.pitch());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
    if (from.has_sound_num()) {
      set_sound_num(from.sound_num());
    }
    if (from.has_sound_num_handle()) {
      set_sound_num_handle(from.sound_num_handle());
    }
    if (from.has_speaker_entity()) {
      set_speaker_entity(from.speaker_entity());
    }
    if (from.has_random_seed()) {
      set_random_seed(from.random_seed());
    }
    if (from.has_sound_level()) {
      set_sound_level(from.sound_level());
    }
    if (from.has_is_sentence()) {
      set_is_sentence(from.is_sentence());
    }
  }
  if (from.has_is_ambient()) {
    set_is_ambient(from.is_ambient());
  }
}

void CSVCMsg_Sounds_sounddata_t::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSVCMsg_Sounds.sounddata_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSVCMsg_Sounds_sounddata_t::CopyFrom(const CSVCMsg_Sounds_sounddata_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSVCMsg_Sounds.sounddata_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSVCMsg_Sounds_sounddata_t::IsInitialized() const {
  return true;
}

void CSVCMsg_Sounds_sounddata_t::Swap(CSVCMsg_Sounds_sounddata_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSVCMsg_Sounds_sounddata_t::InternalSwap(CSVCMsg_Sounds_sounddata_t* other) {
  std::swap(origin_x_, other->origin_x_);
  std::swap(origin_y_, other->origin_y_);
  std::swap(origin_z_, other->origin_z_);
  std::swap(volume_, other->volume_);
  std::swap(delay_value_, other->delay_value_);
  std::swap(sequence_number_, other->sequence_number_);
  std::swap(entity_index_, other->entity_index_);
  std::swap(channel_, other->channel_);
  std::swap(pitch_, other->pitch_);
  std::swap(flags_, other->flags_);
  std::swap(sound_num_, other->sound_num_);
  std::swap(sound_num_handle_, other->sound_num_handle_);
  std::swap(speaker_entity_, other->speaker_entity_);
  std::swap(random_seed_, other->random_seed_);
  std::swap(sound_level_, other->sound_level_);
  std::swap(is_sentence_, other->is_sentence_);
  std::swap(is_ambient_, other->is_ambient_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSVCMsg_Sounds_sounddata_t::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[53];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CSVCMsg_Sounds_sounddata_t

// optional sint32 origin_x = 1;
bool CSVCMsg_Sounds_sounddata_t::has_origin_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CSVCMsg_Sounds_sounddata_t::set_has_origin_x() {
  _has_bits_[0] |= 0x00000001u;
}
void CSVCMsg_Sounds_sounddata_t::clear_has_origin_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void CSVCMsg_Sounds_sounddata_t::clear_origin_x() {
  origin_x_ = 0;
  clear_has_origin_x();
}
::google::protobuf::int32 CSVCMsg_Sounds_sounddata_t::origin_x() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_Sounds.sounddata_t.origin_x)
  return origin_x_;
}
void CSVCMsg_Sounds_sounddata_t::set_origin_x(::google::protobuf::int32 value) {
  set_has_origin_x();
  origin_x_ = value;
  // @@protoc_insertion_point(field_set:CSVCMsg_Sounds.sounddata_t.origin_x)
}

// optional sint32 origin_y = 2;
bool CSVCMsg_Sounds_sounddata_t::has_origin_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CSVCMsg_Sounds_sounddata_t::set_has_origin_y() {
  _has_bits_[0] |= 0x00000002u;
}
void CSVCMsg_Sounds_sounddata_t::clear_has_origin_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void CSVCMsg_Sounds_sounddata_t::clear_origin_y() {
  origin_y_ = 0;
  clear_has_origin_y();
}
::google::protobuf::int32 CSVCMsg_Sounds_sounddata_t::origin_y() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_Sounds.sounddata_t.origin_y)
  return origin_y_;
}
void CSVCMsg_Sounds_sounddata_t::set_origin_y(::google::protobuf::int32 value) {
  set_has_origin_y();
  origin_y_ = value;
  // @@protoc_insertion_point(field_set:CSVCMsg_Sounds.sounddata_t.origin_y)
}

// optional sint32 origin_z = 3;
bool CSVCMsg_Sounds_sounddata_t::has_origin_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CSVCMsg_Sounds_sounddata_t::set_has_origin_z() {
  _has_bits_[0] |= 0x00000004u;
}
void CSVCMsg_Sounds_sounddata_t::clear_has_origin_z() {
  _has_bits_[0] &= ~0x00000004u;
}
void CSVCMsg_Sounds_sounddata_t::clear_origin_z() {
  origin_z_ = 0;
  clear_has_origin_z();
}
::google::protobuf::int32 CSVCMsg_Sounds_sounddata_t::origin_z() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_Sounds.sounddata_t.origin_z)
  return origin_z_;
}
void CSVCMsg_Sounds_sounddata_t::set_origin_z(::google::protobuf::int32 value) {
  set_has_origin_z();
  origin_z_ = value;
  // @@protoc_insertion_point(field_set:CSVCMsg_Sounds.sounddata_t.origin_z)
}

// optional uint32 volume = 4;
bool CSVCMsg_Sounds_sounddata_t::has_volume() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CSVCMsg_Sounds_sounddata_t::set_has_volume() {
  _has_bits_[0] |= 0x00000008u;
}
void CSVCMsg_Sounds_sounddata_t::clear_has_volume() {
  _has_bits_[0] &= ~0x00000008u;
}
void CSVCMsg_Sounds_sounddata_t::clear_volume() {
  volume_ = 0u;
  clear_has_volume();
}
::google::protobuf::uint32 CSVCMsg_Sounds_sounddata_t::volume() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_Sounds.sounddata_t.volume)
  return volume_;
}
void CSVCMsg_Sounds_sounddata_t::set_volume(::google::protobuf::uint32 value) {
  set_has_volume();
  volume_ = value;
  // @@protoc_insertion_point(field_set:CSVCMsg_Sounds.sounddata_t.volume)
}

// optional float delay_value = 5;
bool CSVCMsg_Sounds_sounddata_t::has_delay_value() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CSVCMsg_Sounds_sounddata_t::set_has_delay_value() {
  _has_bits_[0] |= 0x00000010u;
}
void CSVCMsg_Sounds_sounddata_t::clear_has_delay_value() {
  _has_bits_[0] &= ~0x00000010u;
}
void CSVCMsg_Sounds_sounddata_t::clear_delay_value() {
  delay_value_ = 0;
  clear_has_delay_value();
}
float CSVCMsg_Sounds_sounddata_t::delay_value() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_Sounds.sounddata_t.delay_value)
  return delay_value_;
}
void CSVCMsg_Sounds_sounddata_t::set_delay_value(float value) {
  set_has_delay_value();
  delay_value_ = value;
  // @@protoc_insertion_point(field_set:CSVCMsg_Sounds.sounddata_t.delay_value)
}

// optional int32 sequence_number = 6;
bool CSVCMsg_Sounds_sounddata_t::has_sequence_number() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CSVCMsg_Sounds_sounddata_t::set_has_sequence_number() {
  _has_bits_[0] |= 0x00000020u;
}
void CSVCMsg_Sounds_sounddata_t::clear_has_sequence_number() {
  _has_bits_[0] &= ~0x00000020u;
}
void CSVCMsg_Sounds_sounddata_t::clear_sequence_number() {
  sequence_number_ = 0;
  clear_has_sequence_number();
}
::google::protobuf::int32 CSVCMsg_Sounds_sounddata_t::sequence_number() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_Sounds.sounddata_t.sequence_number)
  return sequence_number_;
}
void CSVCMsg_Sounds_sounddata_t::set_sequence_number(::google::protobuf::int32 value) {
  set_has_sequence_number();
  sequence_number_ = value;
  // @@protoc_insertion_point(field_set:CSVCMsg_Sounds.sounddata_t.sequence_number)
}

// optional int32 entity_index = 7;
bool CSVCMsg_Sounds_sounddata_t::has_entity_index() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CSVCMsg_Sounds_sounddata_t::set_has_entity_index() {
  _has_bits_[0] |= 0x00000040u;
}
void CSVCMsg_Sounds_sounddata_t::clear_has_entity_index() {
  _has_bits_[0] &= ~0x00000040u;
}
void CSVCMsg_Sounds_sounddata_t::clear_entity_index() {
  entity_index_ = 0;
  clear_has_entity_index();
}
::google::protobuf::int32 CSVCMsg_Sounds_sounddata_t::entity_index() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_Sounds.sounddata_t.entity_index)
  return entity_index_;
}
void CSVCMsg_Sounds_sounddata_t::set_entity_index(::google::protobuf::int32 value) {
  set_has_entity_index();
  entity_index_ = value;
  // @@protoc_insertion_point(field_set:CSVCMsg_Sounds.sounddata_t.entity_index)
}

// optional int32 channel = 8;
bool CSVCMsg_Sounds_sounddata_t::has_channel() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CSVCMsg_Sounds_sounddata_t::set_has_channel() {
  _has_bits_[0] |= 0x00000080u;
}
void CSVCMsg_Sounds_sounddata_t::clear_has_channel() {
  _has_bits_[0] &= ~0x00000080u;
}
void CSVCMsg_Sounds_sounddata_t::clear_channel() {
  channel_ = 0;
  clear_has_channel();
}
::google::protobuf::int32 CSVCMsg_Sounds_sounddata_t::channel() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_Sounds.sounddata_t.channel)
  return channel_;
}
void CSVCMsg_Sounds_sounddata_t::set_channel(::google::protobuf::int32 value) {
  set_has_channel();
  channel_ = value;
  // @@protoc_insertion_point(field_set:CSVCMsg_Sounds.sounddata_t.channel)
}

// optional int32 pitch = 9;
bool CSVCMsg_Sounds_sounddata_t::has_pitch() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CSVCMsg_Sounds_sounddata_t::set_has_pitch() {
  _has_bits_[0] |= 0x00000100u;
}
void CSVCMsg_Sounds_sounddata_t::clear_has_pitch() {
  _has_bits_[0] &= ~0x00000100u;
}
void CSVCMsg_Sounds_sounddata_t::clear_pitch() {
  pitch_ = 0;
  clear_has_pitch();
}
::google::protobuf::int32 CSVCMsg_Sounds_sounddata_t::pitch() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_Sounds.sounddata_t.pitch)
  return pitch_;
}
void CSVCMsg_Sounds_sounddata_t::set_pitch(::google::protobuf::int32 value) {
  set_has_pitch();
  pitch_ = value;
  // @@protoc_insertion_point(field_set:CSVCMsg_Sounds.sounddata_t.pitch)
}

// optional int32 flags = 10;
bool CSVCMsg_Sounds_sounddata_t::has_flags() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CSVCMsg_Sounds_sounddata_t::set_has_flags() {
  _has_bits_[0] |= 0x00000200u;
}
void CSVCMsg_Sounds_sounddata_t::clear_has_flags() {
  _has_bits_[0] &= ~0x00000200u;
}
void CSVCMsg_Sounds_sounddata_t::clear_flags() {
  flags_ = 0;
  clear_has_flags();
}
::google::protobuf::int32 CSVCMsg_Sounds_sounddata_t::flags() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_Sounds.sounddata_t.flags)
  return flags_;
}
void CSVCMsg_Sounds_sounddata_t::set_flags(::google::protobuf::int32 value) {
  set_has_flags();
  flags_ = value;
  // @@protoc_insertion_point(field_set:CSVCMsg_Sounds.sounddata_t.flags)
}

// optional uint32 sound_num = 11;
bool CSVCMsg_Sounds_sounddata_t::has_sound_num() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CSVCMsg_Sounds_sounddata_t::set_has_sound_num() {
  _has_bits_[0] |= 0x00000400u;
}
void CSVCMsg_Sounds_sounddata_t::clear_has_sound_num() {
  _has_bits_[0] &= ~0x00000400u;
}
void CSVCMsg_Sounds_sounddata_t::clear_sound_num() {
  sound_num_ = 0u;
  clear_has_sound_num();
}
::google::protobuf::uint32 CSVCMsg_Sounds_sounddata_t::sound_num() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_Sounds.sounddata_t.sound_num)
  return sound_num_;
}
void CSVCMsg_Sounds_sounddata_t::set_sound_num(::google::protobuf::uint32 value) {
  set_has_sound_num();
  sound_num_ = value;
  // @@protoc_insertion_point(field_set:CSVCMsg_Sounds.sounddata_t.sound_num)
}

// optional fixed32 sound_num_handle = 12;
bool CSVCMsg_Sounds_sounddata_t::has_sound_num_handle() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void CSVCMsg_Sounds_sounddata_t::set_has_sound_num_handle() {
  _has_bits_[0] |= 0x00000800u;
}
void CSVCMsg_Sounds_sounddata_t::clear_has_sound_num_handle() {
  _has_bits_[0] &= ~0x00000800u;
}
void CSVCMsg_Sounds_sounddata_t::clear_sound_num_handle() {
  sound_num_handle_ = 0u;
  clear_has_sound_num_handle();
}
::google::protobuf::uint32 CSVCMsg_Sounds_sounddata_t::sound_num_handle() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_Sounds.sounddata_t.sound_num_handle)
  return sound_num_handle_;
}
void CSVCMsg_Sounds_sounddata_t::set_sound_num_handle(::google::protobuf::uint32 value) {
  set_has_sound_num_handle();
  sound_num_handle_ = value;
  // @@protoc_insertion_point(field_set:CSVCMsg_Sounds.sounddata_t.sound_num_handle)
}

// optional int32 speaker_entity = 13;
bool CSVCMsg_Sounds_sounddata_t::has_speaker_entity() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void CSVCMsg_Sounds_sounddata_t::set_has_speaker_entity() {
  _has_bits_[0] |= 0x00001000u;
}
void CSVCMsg_Sounds_sounddata_t::clear_has_speaker_entity() {
  _has_bits_[0] &= ~0x00001000u;
}
void CSVCMsg_Sounds_sounddata_t::clear_speaker_entity() {
  speaker_entity_ = 0;
  clear_has_speaker_entity();
}
::google::protobuf::int32 CSVCMsg_Sounds_sounddata_t::speaker_entity() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_Sounds.sounddata_t.speaker_entity)
  return speaker_entity_;
}
void CSVCMsg_Sounds_sounddata_t::set_speaker_entity(::google::protobuf::int32 value) {
  set_has_speaker_entity();
  speaker_entity_ = value;
  // @@protoc_insertion_point(field_set:CSVCMsg_Sounds.sounddata_t.speaker_entity)
}

// optional int32 random_seed = 14;
bool CSVCMsg_Sounds_sounddata_t::has_random_seed() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void CSVCMsg_Sounds_sounddata_t::set_has_random_seed() {
  _has_bits_[0] |= 0x00002000u;
}
void CSVCMsg_Sounds_sounddata_t::clear_has_random_seed() {
  _has_bits_[0] &= ~0x00002000u;
}
void CSVCMsg_Sounds_sounddata_t::clear_random_seed() {
  random_seed_ = 0;
  clear_has_random_seed();
}
::google::protobuf::int32 CSVCMsg_Sounds_sounddata_t::random_seed() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_Sounds.sounddata_t.random_seed)
  return random_seed_;
}
void CSVCMsg_Sounds_sounddata_t::set_random_seed(::google::protobuf::int32 value) {
  set_has_random_seed();
  random_seed_ = value;
  // @@protoc_insertion_point(field_set:CSVCMsg_Sounds.sounddata_t.random_seed)
}

// optional int32 sound_level = 15;
bool CSVCMsg_Sounds_sounddata_t::has_sound_level() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void CSVCMsg_Sounds_sounddata_t::set_has_sound_level() {
  _has_bits_[0] |= 0x00004000u;
}
void CSVCMsg_Sounds_sounddata_t::clear_has_sound_level() {
  _has_bits_[0] &= ~0x00004000u;
}
void CSVCMsg_Sounds_sounddata_t::clear_sound_level() {
  sound_level_ = 0;
  clear_has_sound_level();
}
::google::protobuf::int32 CSVCMsg_Sounds_sounddata_t::sound_level() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_Sounds.sounddata_t.sound_level)
  return sound_level_;
}
void CSVCMsg_Sounds_sounddata_t::set_sound_level(::google::protobuf::int32 value) {
  set_has_sound_level();
  sound_level_ = value;
  // @@protoc_insertion_point(field_set:CSVCMsg_Sounds.sounddata_t.sound_level)
}

// optional bool is_sentence = 16;
bool CSVCMsg_Sounds_sounddata_t::has_is_sentence() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void CSVCMsg_Sounds_sounddata_t::set_has_is_sentence() {
  _has_bits_[0] |= 0x00008000u;
}
void CSVCMsg_Sounds_sounddata_t::clear_has_is_sentence() {
  _has_bits_[0] &= ~0x00008000u;
}
void CSVCMsg_Sounds_sounddata_t::clear_is_sentence() {
  is_sentence_ = false;
  clear_has_is_sentence();
}
bool CSVCMsg_Sounds_sounddata_t::is_sentence() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_Sounds.sounddata_t.is_sentence)
  return is_sentence_;
}
void CSVCMsg_Sounds_sounddata_t::set_is_sentence(bool value) {
  set_has_is_sentence();
  is_sentence_ = value;
  // @@protoc_insertion_point(field_set:CSVCMsg_Sounds.sounddata_t.is_sentence)
}

// optional bool is_ambient = 17;
bool CSVCMsg_Sounds_sounddata_t::has_is_ambient() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void CSVCMsg_Sounds_sounddata_t::set_has_is_ambient() {
  _has_bits_[0] |= 0x00010000u;
}
void CSVCMsg_Sounds_sounddata_t::clear_has_is_ambient() {
  _has_bits_[0] &= ~0x00010000u;
}
void CSVCMsg_Sounds_sounddata_t::clear_is_ambient() {
  is_ambient_ = false;
  clear_has_is_ambient();
}
bool CSVCMsg_Sounds_sounddata_t::is_ambient() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_Sounds.sounddata_t.is_ambient)
  return is_ambient_;
}
void CSVCMsg_Sounds_sounddata_t::set_is_ambient(bool value) {
  set_has_is_ambient();
  is_ambient_ = value;
  // @@protoc_insertion_point(field_set:CSVCMsg_Sounds.sounddata_t.is_ambient)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSVCMsg_Sounds::kReliableSoundFieldNumber;
const int CSVCMsg_Sounds::kSoundsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSVCMsg_Sounds::CSVCMsg_Sounds()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_netmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSVCMsg_Sounds)
}
CSVCMsg_Sounds::CSVCMsg_Sounds(const CSVCMsg_Sounds& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      sounds_(from.sounds_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reliable_sound_ = from.reliable_sound_;
  // @@protoc_insertion_point(copy_constructor:CSVCMsg_Sounds)
}

void CSVCMsg_Sounds::SharedCtor() {
  _cached_size_ = 0;
  reliable_sound_ = false;
}

CSVCMsg_Sounds::~CSVCMsg_Sounds() {
  // @@protoc_insertion_point(destructor:CSVCMsg_Sounds)
  SharedDtor();
}

void CSVCMsg_Sounds::SharedDtor() {
}

void CSVCMsg_Sounds::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSVCMsg_Sounds::descriptor() {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[54].descriptor;
}

const CSVCMsg_Sounds& CSVCMsg_Sounds::default_instance() {
  protobuf_netmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CSVCMsg_Sounds* CSVCMsg_Sounds::New(::google::protobuf::Arena* arena) const {
  CSVCMsg_Sounds* n = new CSVCMsg_Sounds;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSVCMsg_Sounds::Clear() {
// @@protoc_insertion_point(message_clear_start:CSVCMsg_Sounds)
  sounds_.Clear();
  reliable_sound_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSVCMsg_Sounds::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSVCMsg_Sounds)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool reliable_sound = 1;
      case 1: {
        if (tag == 8u) {
          set_has_reliable_sound();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reliable_sound_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .CSVCMsg_Sounds.sounddata_t sounds = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_sounds()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSVCMsg_Sounds)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSVCMsg_Sounds)
  return false;
#undef DO_
}

void CSVCMsg_Sounds::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSVCMsg_Sounds)
  // optional bool reliable_sound = 1;
  if (has_reliable_sound()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->reliable_sound(), output);
  }

  // repeated .CSVCMsg_Sounds.sounddata_t sounds = 2;
  for (unsigned int i = 0, n = this->sounds_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->sounds(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSVCMsg_Sounds)
}

::google::protobuf::uint8* CSVCMsg_Sounds::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSVCMsg_Sounds)
  // optional bool reliable_sound = 1;
  if (has_reliable_sound()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->reliable_sound(), target);
  }

  // repeated .CSVCMsg_Sounds.sounddata_t sounds = 2;
  for (unsigned int i = 0, n = this->sounds_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->sounds(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSVCMsg_Sounds)
  return target;
}

size_t CSVCMsg_Sounds::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSVCMsg_Sounds)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .CSVCMsg_Sounds.sounddata_t sounds = 2;
  {
    unsigned int count = this->sounds_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sounds(i));
    }
  }

  // optional bool reliable_sound = 1;
  if (has_reliable_sound()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSVCMsg_Sounds::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSVCMsg_Sounds)
  GOOGLE_DCHECK_NE(&from, this);
  const CSVCMsg_Sounds* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSVCMsg_Sounds>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSVCMsg_Sounds)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSVCMsg_Sounds)
    MergeFrom(*source);
  }
}

void CSVCMsg_Sounds::MergeFrom(const CSVCMsg_Sounds& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSVCMsg_Sounds)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sounds_.MergeFrom(from.sounds_);
  if (from.has_reliable_sound()) {
    set_reliable_sound(from.reliable_sound());
  }
}

void CSVCMsg_Sounds::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSVCMsg_Sounds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSVCMsg_Sounds::CopyFrom(const CSVCMsg_Sounds& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSVCMsg_Sounds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSVCMsg_Sounds::IsInitialized() const {
  return true;
}

void CSVCMsg_Sounds::Swap(CSVCMsg_Sounds* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSVCMsg_Sounds::InternalSwap(CSVCMsg_Sounds* other) {
  sounds_.UnsafeArenaSwap(&other->sounds_);
  std::swap(reliable_sound_, other->reliable_sound_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSVCMsg_Sounds::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[54];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CSVCMsg_Sounds

// optional bool reliable_sound = 1;
bool CSVCMsg_Sounds::has_reliable_sound() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CSVCMsg_Sounds::set_has_reliable_sound() {
  _has_bits_[0] |= 0x00000001u;
}
void CSVCMsg_Sounds::clear_has_reliable_sound() {
  _has_bits_[0] &= ~0x00000001u;
}
void CSVCMsg_Sounds::clear_reliable_sound() {
  reliable_sound_ = false;
  clear_has_reliable_sound();
}
bool CSVCMsg_Sounds::reliable_sound() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_Sounds.reliable_sound)
  return reliable_sound_;
}
void CSVCMsg_Sounds::set_reliable_sound(bool value) {
  set_has_reliable_sound();
  reliable_sound_ = value;
  // @@protoc_insertion_point(field_set:CSVCMsg_Sounds.reliable_sound)
}

// repeated .CSVCMsg_Sounds.sounddata_t sounds = 2;
int CSVCMsg_Sounds::sounds_size() const {
  return sounds_.size();
}
void CSVCMsg_Sounds::clear_sounds() {
  sounds_.Clear();
}
const ::CSVCMsg_Sounds_sounddata_t& CSVCMsg_Sounds::sounds(int index) const {
  // @@protoc_insertion_point(field_get:CSVCMsg_Sounds.sounds)
  return sounds_.Get(index);
}
::CSVCMsg_Sounds_sounddata_t* CSVCMsg_Sounds::mutable_sounds(int index) {
  // @@protoc_insertion_point(field_mutable:CSVCMsg_Sounds.sounds)
  return sounds_.Mutable(index);
}
::CSVCMsg_Sounds_sounddata_t* CSVCMsg_Sounds::add_sounds() {
  // @@protoc_insertion_point(field_add:CSVCMsg_Sounds.sounds)
  return sounds_.Add();
}
::google::protobuf::RepeatedPtrField< ::CSVCMsg_Sounds_sounddata_t >*
CSVCMsg_Sounds::mutable_sounds() {
  // @@protoc_insertion_point(field_mutable_list:CSVCMsg_Sounds.sounds)
  return &sounds_;
}
const ::google::protobuf::RepeatedPtrField< ::CSVCMsg_Sounds_sounddata_t >&
CSVCMsg_Sounds::sounds() const {
  // @@protoc_insertion_point(field_list:CSVCMsg_Sounds.sounds)
  return sounds_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSVCMsg_EntityMsg::kEntIndexFieldNumber;
const int CSVCMsg_EntityMsg::kClassIdFieldNumber;
const int CSVCMsg_EntityMsg::kEntDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSVCMsg_EntityMsg::CSVCMsg_EntityMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_netmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSVCMsg_EntityMsg)
}
CSVCMsg_EntityMsg::CSVCMsg_EntityMsg(const CSVCMsg_EntityMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ent_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ent_data()) {
    ent_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ent_data_);
  }
  ::memcpy(&ent_index_, &from.ent_index_,
    reinterpret_cast<char*>(&class_id_) -
    reinterpret_cast<char*>(&ent_index_) + sizeof(class_id_));
  // @@protoc_insertion_point(copy_constructor:CSVCMsg_EntityMsg)
}

void CSVCMsg_EntityMsg::SharedCtor() {
  _cached_size_ = 0;
  ent_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ent_index_, 0, reinterpret_cast<char*>(&class_id_) -
    reinterpret_cast<char*>(&ent_index_) + sizeof(class_id_));
}

CSVCMsg_EntityMsg::~CSVCMsg_EntityMsg() {
  // @@protoc_insertion_point(destructor:CSVCMsg_EntityMsg)
  SharedDtor();
}

void CSVCMsg_EntityMsg::SharedDtor() {
  ent_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CSVCMsg_EntityMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSVCMsg_EntityMsg::descriptor() {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[55].descriptor;
}

const CSVCMsg_EntityMsg& CSVCMsg_EntityMsg::default_instance() {
  protobuf_netmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CSVCMsg_EntityMsg* CSVCMsg_EntityMsg::New(::google::protobuf::Arena* arena) const {
  CSVCMsg_EntityMsg* n = new CSVCMsg_EntityMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSVCMsg_EntityMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:CSVCMsg_EntityMsg)
  if (has_ent_data()) {
    GOOGLE_DCHECK(!ent_data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*ent_data_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&ent_index_, 0, reinterpret_cast<char*>(&class_id_) -
      reinterpret_cast<char*>(&ent_index_) + sizeof(class_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSVCMsg_EntityMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSVCMsg_EntityMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ent_index = 1;
      case 1: {
        if (tag == 8u) {
          set_has_ent_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ent_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 class_id = 2;
      case 2: {
        if (tag == 16u) {
          set_has_class_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &class_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes ent_data = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ent_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSVCMsg_EntityMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSVCMsg_EntityMsg)
  return false;
#undef DO_
}

void CSVCMsg_EntityMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSVCMsg_EntityMsg)
  // optional int32 ent_index = 1;
  if (has_ent_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ent_index(), output);
  }

  // optional int32 class_id = 2;
  if (has_class_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->class_id(), output);
  }

  // optional bytes ent_data = 3;
  if (has_ent_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->ent_data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSVCMsg_EntityMsg)
}

::google::protobuf::uint8* CSVCMsg_EntityMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSVCMsg_EntityMsg)
  // optional int32 ent_index = 1;
  if (has_ent_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ent_index(), target);
  }

  // optional int32 class_id = 2;
  if (has_class_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->class_id(), target);
  }

  // optional bytes ent_data = 3;
  if (has_ent_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->ent_data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSVCMsg_EntityMsg)
  return target;
}

size_t CSVCMsg_EntityMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSVCMsg_EntityMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional bytes ent_data = 3;
    if (has_ent_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ent_data());
    }

    // optional int32 ent_index = 1;
    if (has_ent_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ent_index());
    }

    // optional int32 class_id = 2;
    if (has_class_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->class_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSVCMsg_EntityMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSVCMsg_EntityMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const CSVCMsg_EntityMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSVCMsg_EntityMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSVCMsg_EntityMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSVCMsg_EntityMsg)
    MergeFrom(*source);
  }
}

void CSVCMsg_EntityMsg::MergeFrom(const CSVCMsg_EntityMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSVCMsg_EntityMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_ent_data()) {
      set_has_ent_data();
      ent_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ent_data_);
    }
    if (from.has_ent_index()) {
      set_ent_index(from.ent_index());
    }
    if (from.has_class_id()) {
      set_class_id(from.class_id());
    }
  }
}

void CSVCMsg_EntityMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSVCMsg_EntityMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSVCMsg_EntityMsg::CopyFrom(const CSVCMsg_EntityMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSVCMsg_EntityMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSVCMsg_EntityMsg::IsInitialized() const {
  return true;
}

void CSVCMsg_EntityMsg::Swap(CSVCMsg_EntityMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSVCMsg_EntityMsg::InternalSwap(CSVCMsg_EntityMsg* other) {
  ent_data_.Swap(&other->ent_data_);
  std::swap(ent_index_, other->ent_index_);
  std::swap(class_id_, other->class_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSVCMsg_EntityMsg::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[55];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CSVCMsg_EntityMsg

// optional int32 ent_index = 1;
bool CSVCMsg_EntityMsg::has_ent_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CSVCMsg_EntityMsg::set_has_ent_index() {
  _has_bits_[0] |= 0x00000002u;
}
void CSVCMsg_EntityMsg::clear_has_ent_index() {
  _has_bits_[0] &= ~0x00000002u;
}
void CSVCMsg_EntityMsg::clear_ent_index() {
  ent_index_ = 0;
  clear_has_ent_index();
}
::google::protobuf::int32 CSVCMsg_EntityMsg::ent_index() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_EntityMsg.ent_index)
  return ent_index_;
}
void CSVCMsg_EntityMsg::set_ent_index(::google::protobuf::int32 value) {
  set_has_ent_index();
  ent_index_ = value;
  // @@protoc_insertion_point(field_set:CSVCMsg_EntityMsg.ent_index)
}

// optional int32 class_id = 2;
bool CSVCMsg_EntityMsg::has_class_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CSVCMsg_EntityMsg::set_has_class_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CSVCMsg_EntityMsg::clear_has_class_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CSVCMsg_EntityMsg::clear_class_id() {
  class_id_ = 0;
  clear_has_class_id();
}
::google::protobuf::int32 CSVCMsg_EntityMsg::class_id() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_EntityMsg.class_id)
  return class_id_;
}
void CSVCMsg_EntityMsg::set_class_id(::google::protobuf::int32 value) {
  set_has_class_id();
  class_id_ = value;
  // @@protoc_insertion_point(field_set:CSVCMsg_EntityMsg.class_id)
}

// optional bytes ent_data = 3;
bool CSVCMsg_EntityMsg::has_ent_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CSVCMsg_EntityMsg::set_has_ent_data() {
  _has_bits_[0] |= 0x00000001u;
}
void CSVCMsg_EntityMsg::clear_has_ent_data() {
  _has_bits_[0] &= ~0x00000001u;
}
void CSVCMsg_EntityMsg::clear_ent_data() {
  ent_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ent_data();
}
const ::std::string& CSVCMsg_EntityMsg::ent_data() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_EntityMsg.ent_data)
  return ent_data_.GetNoArena();
}
void CSVCMsg_EntityMsg::set_ent_data(const ::std::string& value) {
  set_has_ent_data();
  ent_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CSVCMsg_EntityMsg.ent_data)
}
#if LANG_CXX11
void CSVCMsg_EntityMsg::set_ent_data(::std::string&& value) {
  set_has_ent_data();
  ent_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CSVCMsg_EntityMsg.ent_data)
}
#endif
void CSVCMsg_EntityMsg::set_ent_data(const char* value) {
  set_has_ent_data();
  ent_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CSVCMsg_EntityMsg.ent_data)
}
void CSVCMsg_EntityMsg::set_ent_data(const void* value, size_t size) {
  set_has_ent_data();
  ent_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CSVCMsg_EntityMsg.ent_data)
}
::std::string* CSVCMsg_EntityMsg::mutable_ent_data() {
  set_has_ent_data();
  // @@protoc_insertion_point(field_mutable:CSVCMsg_EntityMsg.ent_data)
  return ent_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CSVCMsg_EntityMsg::release_ent_data() {
  // @@protoc_insertion_point(field_release:CSVCMsg_EntityMsg.ent_data)
  clear_has_ent_data();
  return ent_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CSVCMsg_EntityMsg::set_allocated_ent_data(::std::string* ent_data) {
  if (ent_data != NULL) {
    set_has_ent_data();
  } else {
    clear_has_ent_data();
  }
  ent_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ent_data);
  // @@protoc_insertion_point(field_set_allocated:CSVCMsg_EntityMsg.ent_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSVCMsg_CmdKeyValues::kKeyvaluesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSVCMsg_CmdKeyValues::CSVCMsg_CmdKeyValues()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_netmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSVCMsg_CmdKeyValues)
}
CSVCMsg_CmdKeyValues::CSVCMsg_CmdKeyValues(const CSVCMsg_CmdKeyValues& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  keyvalues_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_keyvalues()) {
    keyvalues_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.keyvalues_);
  }
  // @@protoc_insertion_point(copy_constructor:CSVCMsg_CmdKeyValues)
}

void CSVCMsg_CmdKeyValues::SharedCtor() {
  _cached_size_ = 0;
  keyvalues_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CSVCMsg_CmdKeyValues::~CSVCMsg_CmdKeyValues() {
  // @@protoc_insertion_point(destructor:CSVCMsg_CmdKeyValues)
  SharedDtor();
}

void CSVCMsg_CmdKeyValues::SharedDtor() {
  keyvalues_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CSVCMsg_CmdKeyValues::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSVCMsg_CmdKeyValues::descriptor() {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[56].descriptor;
}

const CSVCMsg_CmdKeyValues& CSVCMsg_CmdKeyValues::default_instance() {
  protobuf_netmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CSVCMsg_CmdKeyValues* CSVCMsg_CmdKeyValues::New(::google::protobuf::Arena* arena) const {
  CSVCMsg_CmdKeyValues* n = new CSVCMsg_CmdKeyValues;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSVCMsg_CmdKeyValues::Clear() {
// @@protoc_insertion_point(message_clear_start:CSVCMsg_CmdKeyValues)
  if (has_keyvalues()) {
    GOOGLE_DCHECK(!keyvalues_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*keyvalues_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSVCMsg_CmdKeyValues::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSVCMsg_CmdKeyValues)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes keyvalues = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_keyvalues()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSVCMsg_CmdKeyValues)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSVCMsg_CmdKeyValues)
  return false;
#undef DO_
}

void CSVCMsg_CmdKeyValues::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSVCMsg_CmdKeyValues)
  // optional bytes keyvalues = 1;
  if (has_keyvalues()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->keyvalues(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSVCMsg_CmdKeyValues)
}

::google::protobuf::uint8* CSVCMsg_CmdKeyValues::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSVCMsg_CmdKeyValues)
  // optional bytes keyvalues = 1;
  if (has_keyvalues()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->keyvalues(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSVCMsg_CmdKeyValues)
  return target;
}

size_t CSVCMsg_CmdKeyValues::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSVCMsg_CmdKeyValues)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional bytes keyvalues = 1;
  if (has_keyvalues()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->keyvalues());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSVCMsg_CmdKeyValues::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSVCMsg_CmdKeyValues)
  GOOGLE_DCHECK_NE(&from, this);
  const CSVCMsg_CmdKeyValues* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSVCMsg_CmdKeyValues>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSVCMsg_CmdKeyValues)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSVCMsg_CmdKeyValues)
    MergeFrom(*source);
  }
}

void CSVCMsg_CmdKeyValues::MergeFrom(const CSVCMsg_CmdKeyValues& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSVCMsg_CmdKeyValues)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_keyvalues()) {
    set_has_keyvalues();
    keyvalues_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.keyvalues_);
  }
}

void CSVCMsg_CmdKeyValues::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSVCMsg_CmdKeyValues)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSVCMsg_CmdKeyValues::CopyFrom(const CSVCMsg_CmdKeyValues& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSVCMsg_CmdKeyValues)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSVCMsg_CmdKeyValues::IsInitialized() const {
  return true;
}

void CSVCMsg_CmdKeyValues::Swap(CSVCMsg_CmdKeyValues* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSVCMsg_CmdKeyValues::InternalSwap(CSVCMsg_CmdKeyValues* other) {
  keyvalues_.Swap(&other->keyvalues_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSVCMsg_CmdKeyValues::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[56];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CSVCMsg_CmdKeyValues

// optional bytes keyvalues = 1;
bool CSVCMsg_CmdKeyValues::has_keyvalues() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CSVCMsg_CmdKeyValues::set_has_keyvalues() {
  _has_bits_[0] |= 0x00000001u;
}
void CSVCMsg_CmdKeyValues::clear_has_keyvalues() {
  _has_bits_[0] &= ~0x00000001u;
}
void CSVCMsg_CmdKeyValues::clear_keyvalues() {
  keyvalues_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_keyvalues();
}
const ::std::string& CSVCMsg_CmdKeyValues::keyvalues() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_CmdKeyValues.keyvalues)
  return keyvalues_.GetNoArena();
}
void CSVCMsg_CmdKeyValues::set_keyvalues(const ::std::string& value) {
  set_has_keyvalues();
  keyvalues_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CSVCMsg_CmdKeyValues.keyvalues)
}
#if LANG_CXX11
void CSVCMsg_CmdKeyValues::set_keyvalues(::std::string&& value) {
  set_has_keyvalues();
  keyvalues_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CSVCMsg_CmdKeyValues.keyvalues)
}
#endif
void CSVCMsg_CmdKeyValues::set_keyvalues(const char* value) {
  set_has_keyvalues();
  keyvalues_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CSVCMsg_CmdKeyValues.keyvalues)
}
void CSVCMsg_CmdKeyValues::set_keyvalues(const void* value, size_t size) {
  set_has_keyvalues();
  keyvalues_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CSVCMsg_CmdKeyValues.keyvalues)
}
::std::string* CSVCMsg_CmdKeyValues::mutable_keyvalues() {
  set_has_keyvalues();
  // @@protoc_insertion_point(field_mutable:CSVCMsg_CmdKeyValues.keyvalues)
  return keyvalues_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CSVCMsg_CmdKeyValues::release_keyvalues() {
  // @@protoc_insertion_point(field_release:CSVCMsg_CmdKeyValues.keyvalues)
  clear_has_keyvalues();
  return keyvalues_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CSVCMsg_CmdKeyValues::set_allocated_keyvalues(::std::string* keyvalues) {
  if (keyvalues != NULL) {
    set_has_keyvalues();
  } else {
    clear_has_keyvalues();
  }
  keyvalues_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), keyvalues);
  // @@protoc_insertion_point(field_set_allocated:CSVCMsg_CmdKeyValues.keyvalues)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSVCMsg_EncryptedData::kEncryptedFieldNumber;
const int CSVCMsg_EncryptedData::kKeyTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSVCMsg_EncryptedData::CSVCMsg_EncryptedData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_netmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSVCMsg_EncryptedData)
}
CSVCMsg_EncryptedData::CSVCMsg_EncryptedData(const CSVCMsg_EncryptedData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  encrypted_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_encrypted()) {
    encrypted_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.encrypted_);
  }
  key_type_ = from.key_type_;
  // @@protoc_insertion_point(copy_constructor:CSVCMsg_EncryptedData)
}

void CSVCMsg_EncryptedData::SharedCtor() {
  _cached_size_ = 0;
  encrypted_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_type_ = 0;
}

CSVCMsg_EncryptedData::~CSVCMsg_EncryptedData() {
  // @@protoc_insertion_point(destructor:CSVCMsg_EncryptedData)
  SharedDtor();
}

void CSVCMsg_EncryptedData::SharedDtor() {
  encrypted_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CSVCMsg_EncryptedData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSVCMsg_EncryptedData::descriptor() {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[57].descriptor;
}

const CSVCMsg_EncryptedData& CSVCMsg_EncryptedData::default_instance() {
  protobuf_netmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CSVCMsg_EncryptedData* CSVCMsg_EncryptedData::New(::google::protobuf::Arena* arena) const {
  CSVCMsg_EncryptedData* n = new CSVCMsg_EncryptedData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSVCMsg_EncryptedData::Clear() {
// @@protoc_insertion_point(message_clear_start:CSVCMsg_EncryptedData)
  if (has_encrypted()) {
    GOOGLE_DCHECK(!encrypted_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*encrypted_.UnsafeRawStringPointer())->clear();
  }
  key_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSVCMsg_EncryptedData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSVCMsg_EncryptedData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes encrypted = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_encrypted()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 key_type = 2;
      case 2: {
        if (tag == 16u) {
          set_has_key_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &key_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSVCMsg_EncryptedData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSVCMsg_EncryptedData)
  return false;
#undef DO_
}

void CSVCMsg_EncryptedData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSVCMsg_EncryptedData)
  // optional bytes encrypted = 1;
  if (has_encrypted()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->encrypted(), output);
  }

  // optional int32 key_type = 2;
  if (has_key_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->key_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSVCMsg_EncryptedData)
}

::google::protobuf::uint8* CSVCMsg_EncryptedData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSVCMsg_EncryptedData)
  // optional bytes encrypted = 1;
  if (has_encrypted()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->encrypted(), target);
  }

  // optional int32 key_type = 2;
  if (has_key_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->key_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSVCMsg_EncryptedData)
  return target;
}

size_t CSVCMsg_EncryptedData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSVCMsg_EncryptedData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes encrypted = 1;
    if (has_encrypted()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->encrypted());
    }

    // optional int32 key_type = 2;
    if (has_key_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->key_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSVCMsg_EncryptedData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSVCMsg_EncryptedData)
  GOOGLE_DCHECK_NE(&from, this);
  const CSVCMsg_EncryptedData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSVCMsg_EncryptedData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSVCMsg_EncryptedData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSVCMsg_EncryptedData)
    MergeFrom(*source);
  }
}

void CSVCMsg_EncryptedData::MergeFrom(const CSVCMsg_EncryptedData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSVCMsg_EncryptedData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_encrypted()) {
      set_has_encrypted();
      encrypted_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.encrypted_);
    }
    if (from.has_key_type()) {
      set_key_type(from.key_type());
    }
  }
}

void CSVCMsg_EncryptedData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSVCMsg_EncryptedData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSVCMsg_EncryptedData::CopyFrom(const CSVCMsg_EncryptedData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSVCMsg_EncryptedData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSVCMsg_EncryptedData::IsInitialized() const {
  return true;
}

void CSVCMsg_EncryptedData::Swap(CSVCMsg_EncryptedData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSVCMsg_EncryptedData::InternalSwap(CSVCMsg_EncryptedData* other) {
  encrypted_.Swap(&other->encrypted_);
  std::swap(key_type_, other->key_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSVCMsg_EncryptedData::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[57];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CSVCMsg_EncryptedData

// optional bytes encrypted = 1;
bool CSVCMsg_EncryptedData::has_encrypted() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CSVCMsg_EncryptedData::set_has_encrypted() {
  _has_bits_[0] |= 0x00000001u;
}
void CSVCMsg_EncryptedData::clear_has_encrypted() {
  _has_bits_[0] &= ~0x00000001u;
}
void CSVCMsg_EncryptedData::clear_encrypted() {
  encrypted_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_encrypted();
}
const ::std::string& CSVCMsg_EncryptedData::encrypted() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_EncryptedData.encrypted)
  return encrypted_.GetNoArena();
}
void CSVCMsg_EncryptedData::set_encrypted(const ::std::string& value) {
  set_has_encrypted();
  encrypted_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CSVCMsg_EncryptedData.encrypted)
}
#if LANG_CXX11
void CSVCMsg_EncryptedData::set_encrypted(::std::string&& value) {
  set_has_encrypted();
  encrypted_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CSVCMsg_EncryptedData.encrypted)
}
#endif
void CSVCMsg_EncryptedData::set_encrypted(const char* value) {
  set_has_encrypted();
  encrypted_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CSVCMsg_EncryptedData.encrypted)
}
void CSVCMsg_EncryptedData::set_encrypted(const void* value, size_t size) {
  set_has_encrypted();
  encrypted_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CSVCMsg_EncryptedData.encrypted)
}
::std::string* CSVCMsg_EncryptedData::mutable_encrypted() {
  set_has_encrypted();
  // @@protoc_insertion_point(field_mutable:CSVCMsg_EncryptedData.encrypted)
  return encrypted_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CSVCMsg_EncryptedData::release_encrypted() {
  // @@protoc_insertion_point(field_release:CSVCMsg_EncryptedData.encrypted)
  clear_has_encrypted();
  return encrypted_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CSVCMsg_EncryptedData::set_allocated_encrypted(::std::string* encrypted) {
  if (encrypted != NULL) {
    set_has_encrypted();
  } else {
    clear_has_encrypted();
  }
  encrypted_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), encrypted);
  // @@protoc_insertion_point(field_set_allocated:CSVCMsg_EncryptedData.encrypted)
}

// optional int32 key_type = 2;
bool CSVCMsg_EncryptedData::has_key_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CSVCMsg_EncryptedData::set_has_key_type() {
  _has_bits_[0] |= 0x00000002u;
}
void CSVCMsg_EncryptedData::clear_has_key_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void CSVCMsg_EncryptedData::clear_key_type() {
  key_type_ = 0;
  clear_has_key_type();
}
::google::protobuf::int32 CSVCMsg_EncryptedData::key_type() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_EncryptedData.key_type)
  return key_type_;
}
void CSVCMsg_EncryptedData::set_key_type(::google::protobuf::int32 value) {
  set_has_key_type();
  key_type_ = value;
  // @@protoc_insertion_point(field_set:CSVCMsg_EncryptedData.key_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSVCMsg_HltvReplay::kDelayFieldNumber;
const int CSVCMsg_HltvReplay::kPrimaryTargetFieldNumber;
const int CSVCMsg_HltvReplay::kReplayStopAtFieldNumber;
const int CSVCMsg_HltvReplay::kReplayStartAtFieldNumber;
const int CSVCMsg_HltvReplay::kReplaySlowdownBeginFieldNumber;
const int CSVCMsg_HltvReplay::kReplaySlowdownEndFieldNumber;
const int CSVCMsg_HltvReplay::kReplaySlowdownRateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSVCMsg_HltvReplay::CSVCMsg_HltvReplay()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_netmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSVCMsg_HltvReplay)
}
CSVCMsg_HltvReplay::CSVCMsg_HltvReplay(const CSVCMsg_HltvReplay& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&delay_, &from.delay_,
    reinterpret_cast<char*>(&replay_slowdown_rate_) -
    reinterpret_cast<char*>(&delay_) + sizeof(replay_slowdown_rate_));
  // @@protoc_insertion_point(copy_constructor:CSVCMsg_HltvReplay)
}

void CSVCMsg_HltvReplay::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&delay_, 0, reinterpret_cast<char*>(&replay_slowdown_rate_) -
    reinterpret_cast<char*>(&delay_) + sizeof(replay_slowdown_rate_));
}

CSVCMsg_HltvReplay::~CSVCMsg_HltvReplay() {
  // @@protoc_insertion_point(destructor:CSVCMsg_HltvReplay)
  SharedDtor();
}

void CSVCMsg_HltvReplay::SharedDtor() {
}

void CSVCMsg_HltvReplay::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSVCMsg_HltvReplay::descriptor() {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[58].descriptor;
}

const CSVCMsg_HltvReplay& CSVCMsg_HltvReplay::default_instance() {
  protobuf_netmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CSVCMsg_HltvReplay* CSVCMsg_HltvReplay::New(::google::protobuf::Arena* arena) const {
  CSVCMsg_HltvReplay* n = new CSVCMsg_HltvReplay;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSVCMsg_HltvReplay::Clear() {
// @@protoc_insertion_point(message_clear_start:CSVCMsg_HltvReplay)
  if (_has_bits_[0 / 32] & 127u) {
    ::memset(&delay_, 0, reinterpret_cast<char*>(&replay_slowdown_rate_) -
      reinterpret_cast<char*>(&delay_) + sizeof(replay_slowdown_rate_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSVCMsg_HltvReplay::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSVCMsg_HltvReplay)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 delay = 1;
      case 1: {
        if (tag == 8u) {
          set_has_delay();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &delay_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 primary_target = 2;
      case 2: {
        if (tag == 16u) {
          set_has_primary_target();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &primary_target_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 replay_stop_at = 3;
      case 3: {
        if (tag == 24u) {
          set_has_replay_stop_at();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &replay_stop_at_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 replay_start_at = 4;
      case 4: {
        if (tag == 32u) {
          set_has_replay_start_at();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &replay_start_at_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 replay_slowdown_begin = 5;
      case 5: {
        if (tag == 40u) {
          set_has_replay_slowdown_begin();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &replay_slowdown_begin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 replay_slowdown_end = 6;
      case 6: {
        if (tag == 48u) {
          set_has_replay_slowdown_end();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &replay_slowdown_end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float replay_slowdown_rate = 7;
      case 7: {
        if (tag == 61u) {
          set_has_replay_slowdown_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &replay_slowdown_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSVCMsg_HltvReplay)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSVCMsg_HltvReplay)
  return false;
#undef DO_
}

void CSVCMsg_HltvReplay::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSVCMsg_HltvReplay)
  // optional int32 delay = 1;
  if (has_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->delay(), output);
  }

  // optional int32 primary_target = 2;
  if (has_primary_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->primary_target(), output);
  }

  // optional int32 replay_stop_at = 3;
  if (has_replay_stop_at()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->replay_stop_at(), output);
  }

  // optional int32 replay_start_at = 4;
  if (has_replay_start_at()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->replay_start_at(), output);
  }

  // optional int32 replay_slowdown_begin = 5;
  if (has_replay_slowdown_begin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->replay_slowdown_begin(), output);
  }

  // optional int32 replay_slowdown_end = 6;
  if (has_replay_slowdown_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->replay_slowdown_end(), output);
  }

  // optional float replay_slowdown_rate = 7;
  if (has_replay_slowdown_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->replay_slowdown_rate(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSVCMsg_HltvReplay)
}

::google::protobuf::uint8* CSVCMsg_HltvReplay::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSVCMsg_HltvReplay)
  // optional int32 delay = 1;
  if (has_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->delay(), target);
  }

  // optional int32 primary_target = 2;
  if (has_primary_target()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->primary_target(), target);
  }

  // optional int32 replay_stop_at = 3;
  if (has_replay_stop_at()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->replay_stop_at(), target);
  }

  // optional int32 replay_start_at = 4;
  if (has_replay_start_at()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->replay_start_at(), target);
  }

  // optional int32 replay_slowdown_begin = 5;
  if (has_replay_slowdown_begin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->replay_slowdown_begin(), target);
  }

  // optional int32 replay_slowdown_end = 6;
  if (has_replay_slowdown_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->replay_slowdown_end(), target);
  }

  // optional float replay_slowdown_rate = 7;
  if (has_replay_slowdown_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->replay_slowdown_rate(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSVCMsg_HltvReplay)
  return target;
}

size_t CSVCMsg_HltvReplay::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSVCMsg_HltvReplay)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional int32 delay = 1;
    if (has_delay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->delay());
    }

    // optional int32 primary_target = 2;
    if (has_primary_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->primary_target());
    }

    // optional int32 replay_stop_at = 3;
    if (has_replay_stop_at()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->replay_stop_at());
    }

    // optional int32 replay_start_at = 4;
    if (has_replay_start_at()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->replay_start_at());
    }

    // optional int32 replay_slowdown_begin = 5;
    if (has_replay_slowdown_begin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->replay_slowdown_begin());
    }

    // optional int32 replay_slowdown_end = 6;
    if (has_replay_slowdown_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->replay_slowdown_end());
    }

    // optional float replay_slowdown_rate = 7;
    if (has_replay_slowdown_rate()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSVCMsg_HltvReplay::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSVCMsg_HltvReplay)
  GOOGLE_DCHECK_NE(&from, this);
  const CSVCMsg_HltvReplay* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSVCMsg_HltvReplay>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSVCMsg_HltvReplay)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSVCMsg_HltvReplay)
    MergeFrom(*source);
  }
}

void CSVCMsg_HltvReplay::MergeFrom(const CSVCMsg_HltvReplay& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSVCMsg_HltvReplay)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 127u) {
    if (from.has_delay()) {
      set_delay(from.delay());
    }
    if (from.has_primary_target()) {
      set_primary_target(from.primary_target());
    }
    if (from.has_replay_stop_at()) {
      set_replay_stop_at(from.replay_stop_at());
    }
    if (from.has_replay_start_at()) {
      set_replay_start_at(from.replay_start_at());
    }
    if (from.has_replay_slowdown_begin()) {
      set_replay_slowdown_begin(from.replay_slowdown_begin());
    }
    if (from.has_replay_slowdown_end()) {
      set_replay_slowdown_end(from.replay_slowdown_end());
    }
    if (from.has_replay_slowdown_rate()) {
      set_replay_slowdown_rate(from.replay_slowdown_rate());
    }
  }
}

void CSVCMsg_HltvReplay::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSVCMsg_HltvReplay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSVCMsg_HltvReplay::CopyFrom(const CSVCMsg_HltvReplay& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSVCMsg_HltvReplay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSVCMsg_HltvReplay::IsInitialized() const {
  return true;
}

void CSVCMsg_HltvReplay::Swap(CSVCMsg_HltvReplay* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSVCMsg_HltvReplay::InternalSwap(CSVCMsg_HltvReplay* other) {
  std::swap(delay_, other->delay_);
  std::swap(primary_target_, other->primary_target_);
  std::swap(replay_stop_at_, other->replay_stop_at_);
  std::swap(replay_start_at_, other->replay_start_at_);
  std::swap(replay_slowdown_begin_, other->replay_slowdown_begin_);
  std::swap(replay_slowdown_end_, other->replay_slowdown_end_);
  std::swap(replay_slowdown_rate_, other->replay_slowdown_rate_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSVCMsg_HltvReplay::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[58];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CSVCMsg_HltvReplay

// optional int32 delay = 1;
bool CSVCMsg_HltvReplay::has_delay() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CSVCMsg_HltvReplay::set_has_delay() {
  _has_bits_[0] |= 0x00000001u;
}
void CSVCMsg_HltvReplay::clear_has_delay() {
  _has_bits_[0] &= ~0x00000001u;
}
void CSVCMsg_HltvReplay::clear_delay() {
  delay_ = 0;
  clear_has_delay();
}
::google::protobuf::int32 CSVCMsg_HltvReplay::delay() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_HltvReplay.delay)
  return delay_;
}
void CSVCMsg_HltvReplay::set_delay(::google::protobuf::int32 value) {
  set_has_delay();
  delay_ = value;
  // @@protoc_insertion_point(field_set:CSVCMsg_HltvReplay.delay)
}

// optional int32 primary_target = 2;
bool CSVCMsg_HltvReplay::has_primary_target() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CSVCMsg_HltvReplay::set_has_primary_target() {
  _has_bits_[0] |= 0x00000002u;
}
void CSVCMsg_HltvReplay::clear_has_primary_target() {
  _has_bits_[0] &= ~0x00000002u;
}
void CSVCMsg_HltvReplay::clear_primary_target() {
  primary_target_ = 0;
  clear_has_primary_target();
}
::google::protobuf::int32 CSVCMsg_HltvReplay::primary_target() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_HltvReplay.primary_target)
  return primary_target_;
}
void CSVCMsg_HltvReplay::set_primary_target(::google::protobuf::int32 value) {
  set_has_primary_target();
  primary_target_ = value;
  // @@protoc_insertion_point(field_set:CSVCMsg_HltvReplay.primary_target)
}

// optional int32 replay_stop_at = 3;
bool CSVCMsg_HltvReplay::has_replay_stop_at() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CSVCMsg_HltvReplay::set_has_replay_stop_at() {
  _has_bits_[0] |= 0x00000004u;
}
void CSVCMsg_HltvReplay::clear_has_replay_stop_at() {
  _has_bits_[0] &= ~0x00000004u;
}
void CSVCMsg_HltvReplay::clear_replay_stop_at() {
  replay_stop_at_ = 0;
  clear_has_replay_stop_at();
}
::google::protobuf::int32 CSVCMsg_HltvReplay::replay_stop_at() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_HltvReplay.replay_stop_at)
  return replay_stop_at_;
}
void CSVCMsg_HltvReplay::set_replay_stop_at(::google::protobuf::int32 value) {
  set_has_replay_stop_at();
  replay_stop_at_ = value;
  // @@protoc_insertion_point(field_set:CSVCMsg_HltvReplay.replay_stop_at)
}

// optional int32 replay_start_at = 4;
bool CSVCMsg_HltvReplay::has_replay_start_at() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CSVCMsg_HltvReplay::set_has_replay_start_at() {
  _has_bits_[0] |= 0x00000008u;
}
void CSVCMsg_HltvReplay::clear_has_replay_start_at() {
  _has_bits_[0] &= ~0x00000008u;
}
void CSVCMsg_HltvReplay::clear_replay_start_at() {
  replay_start_at_ = 0;
  clear_has_replay_start_at();
}
::google::protobuf::int32 CSVCMsg_HltvReplay::replay_start_at() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_HltvReplay.replay_start_at)
  return replay_start_at_;
}
void CSVCMsg_HltvReplay::set_replay_start_at(::google::protobuf::int32 value) {
  set_has_replay_start_at();
  replay_start_at_ = value;
  // @@protoc_insertion_point(field_set:CSVCMsg_HltvReplay.replay_start_at)
}

// optional int32 replay_slowdown_begin = 5;
bool CSVCMsg_HltvReplay::has_replay_slowdown_begin() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CSVCMsg_HltvReplay::set_has_replay_slowdown_begin() {
  _has_bits_[0] |= 0x00000010u;
}
void CSVCMsg_HltvReplay::clear_has_replay_slowdown_begin() {
  _has_bits_[0] &= ~0x00000010u;
}
void CSVCMsg_HltvReplay::clear_replay_slowdown_begin() {
  replay_slowdown_begin_ = 0;
  clear_has_replay_slowdown_begin();
}
::google::protobuf::int32 CSVCMsg_HltvReplay::replay_slowdown_begin() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_HltvReplay.replay_slowdown_begin)
  return replay_slowdown_begin_;
}
void CSVCMsg_HltvReplay::set_replay_slowdown_begin(::google::protobuf::int32 value) {
  set_has_replay_slowdown_begin();
  replay_slowdown_begin_ = value;
  // @@protoc_insertion_point(field_set:CSVCMsg_HltvReplay.replay_slowdown_begin)
}

// optional int32 replay_slowdown_end = 6;
bool CSVCMsg_HltvReplay::has_replay_slowdown_end() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CSVCMsg_HltvReplay::set_has_replay_slowdown_end() {
  _has_bits_[0] |= 0x00000020u;
}
void CSVCMsg_HltvReplay::clear_has_replay_slowdown_end() {
  _has_bits_[0] &= ~0x00000020u;
}
void CSVCMsg_HltvReplay::clear_replay_slowdown_end() {
  replay_slowdown_end_ = 0;
  clear_has_replay_slowdown_end();
}
::google::protobuf::int32 CSVCMsg_HltvReplay::replay_slowdown_end() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_HltvReplay.replay_slowdown_end)
  return replay_slowdown_end_;
}
void CSVCMsg_HltvReplay::set_replay_slowdown_end(::google::protobuf::int32 value) {
  set_has_replay_slowdown_end();
  replay_slowdown_end_ = value;
  // @@protoc_insertion_point(field_set:CSVCMsg_HltvReplay.replay_slowdown_end)
}

// optional float replay_slowdown_rate = 7;
bool CSVCMsg_HltvReplay::has_replay_slowdown_rate() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CSVCMsg_HltvReplay::set_has_replay_slowdown_rate() {
  _has_bits_[0] |= 0x00000040u;
}
void CSVCMsg_HltvReplay::clear_has_replay_slowdown_rate() {
  _has_bits_[0] &= ~0x00000040u;
}
void CSVCMsg_HltvReplay::clear_replay_slowdown_rate() {
  replay_slowdown_rate_ = 0;
  clear_has_replay_slowdown_rate();
}
float CSVCMsg_HltvReplay::replay_slowdown_rate() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_HltvReplay.replay_slowdown_rate)
  return replay_slowdown_rate_;
}
void CSVCMsg_HltvReplay::set_replay_slowdown_rate(float value) {
  set_has_replay_slowdown_rate();
  replay_slowdown_rate_ = value;
  // @@protoc_insertion_point(field_set:CSVCMsg_HltvReplay.replay_slowdown_rate)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCLCMsg_HltvReplay::kRequestFieldNumber;
const int CCLCMsg_HltvReplay::kSlowdownLengthFieldNumber;
const int CCLCMsg_HltvReplay::kSlowdownRateFieldNumber;
const int CCLCMsg_HltvReplay::kPrimaryTargetEntIndexFieldNumber;
const int CCLCMsg_HltvReplay::kEventTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCLCMsg_HltvReplay::CCLCMsg_HltvReplay()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_netmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CCLCMsg_HltvReplay)
}
CCLCMsg_HltvReplay::CCLCMsg_HltvReplay(const CCLCMsg_HltvReplay& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&request_, &from.request_,
    reinterpret_cast<char*>(&event_time_) -
    reinterpret_cast<char*>(&request_) + sizeof(event_time_));
  // @@protoc_insertion_point(copy_constructor:CCLCMsg_HltvReplay)
}

void CCLCMsg_HltvReplay::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&request_, 0, reinterpret_cast<char*>(&event_time_) -
    reinterpret_cast<char*>(&request_) + sizeof(event_time_));
}

CCLCMsg_HltvReplay::~CCLCMsg_HltvReplay() {
  // @@protoc_insertion_point(destructor:CCLCMsg_HltvReplay)
  SharedDtor();
}

void CCLCMsg_HltvReplay::SharedDtor() {
}

void CCLCMsg_HltvReplay::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCLCMsg_HltvReplay::descriptor() {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[59].descriptor;
}

const CCLCMsg_HltvReplay& CCLCMsg_HltvReplay::default_instance() {
  protobuf_netmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CCLCMsg_HltvReplay* CCLCMsg_HltvReplay::New(::google::protobuf::Arena* arena) const {
  CCLCMsg_HltvReplay* n = new CCLCMsg_HltvReplay;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CCLCMsg_HltvReplay::Clear() {
// @@protoc_insertion_point(message_clear_start:CCLCMsg_HltvReplay)
  if (_has_bits_[0 / 32] & 31u) {
    ::memset(&request_, 0, reinterpret_cast<char*>(&event_time_) -
      reinterpret_cast<char*>(&request_) + sizeof(event_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CCLCMsg_HltvReplay::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CCLCMsg_HltvReplay)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 request = 1;
      case 1: {
        if (tag == 8u) {
          set_has_request();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &request_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float slowdown_length = 2;
      case 2: {
        if (tag == 21u) {
          set_has_slowdown_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &slowdown_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float slowdown_rate = 3;
      case 3: {
        if (tag == 29u) {
          set_has_slowdown_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &slowdown_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 primary_target_ent_index = 4;
      case 4: {
        if (tag == 32u) {
          set_has_primary_target_ent_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &primary_target_ent_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float event_time = 5;
      case 5: {
        if (tag == 45u) {
          set_has_event_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &event_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CCLCMsg_HltvReplay)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CCLCMsg_HltvReplay)
  return false;
#undef DO_
}

void CCLCMsg_HltvReplay::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CCLCMsg_HltvReplay)
  // optional int32 request = 1;
  if (has_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->request(), output);
  }

  // optional float slowdown_length = 2;
  if (has_slowdown_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->slowdown_length(), output);
  }

  // optional float slowdown_rate = 3;
  if (has_slowdown_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->slowdown_rate(), output);
  }

  // optional int32 primary_target_ent_index = 4;
  if (has_primary_target_ent_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->primary_target_ent_index(), output);
  }

  // optional float event_time = 5;
  if (has_event_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->event_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CCLCMsg_HltvReplay)
}

::google::protobuf::uint8* CCLCMsg_HltvReplay::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CCLCMsg_HltvReplay)
  // optional int32 request = 1;
  if (has_request()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->request(), target);
  }

  // optional float slowdown_length = 2;
  if (has_slowdown_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->slowdown_length(), target);
  }

  // optional float slowdown_rate = 3;
  if (has_slowdown_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->slowdown_rate(), target);
  }

  // optional int32 primary_target_ent_index = 4;
  if (has_primary_target_ent_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->primary_target_ent_index(), target);
  }

  // optional float event_time = 5;
  if (has_event_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->event_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCLCMsg_HltvReplay)
  return target;
}

size_t CCLCMsg_HltvReplay::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCLCMsg_HltvReplay)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional int32 request = 1;
    if (has_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->request());
    }

    // optional float slowdown_length = 2;
    if (has_slowdown_length()) {
      total_size += 1 + 4;
    }

    // optional float slowdown_rate = 3;
    if (has_slowdown_rate()) {
      total_size += 1 + 4;
    }

    // optional int32 primary_target_ent_index = 4;
    if (has_primary_target_ent_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->primary_target_ent_index());
    }

    // optional float event_time = 5;
    if (has_event_time()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCLCMsg_HltvReplay::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCLCMsg_HltvReplay)
  GOOGLE_DCHECK_NE(&from, this);
  const CCLCMsg_HltvReplay* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CCLCMsg_HltvReplay>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCLCMsg_HltvReplay)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCLCMsg_HltvReplay)
    MergeFrom(*source);
  }
}

void CCLCMsg_HltvReplay::MergeFrom(const CCLCMsg_HltvReplay& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCLCMsg_HltvReplay)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 31u) {
    if (from.has_request()) {
      set_request(from.request());
    }
    if (from.has_slowdown_length()) {
      set_slowdown_length(from.slowdown_length());
    }
    if (from.has_slowdown_rate()) {
      set_slowdown_rate(from.slowdown_rate());
    }
    if (from.has_primary_target_ent_index()) {
      set_primary_target_ent_index(from.primary_target_ent_index());
    }
    if (from.has_event_time()) {
      set_event_time(from.event_time());
    }
  }
}

void CCLCMsg_HltvReplay::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCLCMsg_HltvReplay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCLCMsg_HltvReplay::CopyFrom(const CCLCMsg_HltvReplay& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCLCMsg_HltvReplay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCLCMsg_HltvReplay::IsInitialized() const {
  return true;
}

void CCLCMsg_HltvReplay::Swap(CCLCMsg_HltvReplay* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCLCMsg_HltvReplay::InternalSwap(CCLCMsg_HltvReplay* other) {
  std::swap(request_, other->request_);
  std::swap(slowdown_length_, other->slowdown_length_);
  std::swap(slowdown_rate_, other->slowdown_rate_);
  std::swap(primary_target_ent_index_, other->primary_target_ent_index_);
  std::swap(event_time_, other->event_time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CCLCMsg_HltvReplay::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[59];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CCLCMsg_HltvReplay

// optional int32 request = 1;
bool CCLCMsg_HltvReplay::has_request() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CCLCMsg_HltvReplay::set_has_request() {
  _has_bits_[0] |= 0x00000001u;
}
void CCLCMsg_HltvReplay::clear_has_request() {
  _has_bits_[0] &= ~0x00000001u;
}
void CCLCMsg_HltvReplay::clear_request() {
  request_ = 0;
  clear_has_request();
}
::google::protobuf::int32 CCLCMsg_HltvReplay::request() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_HltvReplay.request)
  return request_;
}
void CCLCMsg_HltvReplay::set_request(::google::protobuf::int32 value) {
  set_has_request();
  request_ = value;
  // @@protoc_insertion_point(field_set:CCLCMsg_HltvReplay.request)
}

// optional float slowdown_length = 2;
bool CCLCMsg_HltvReplay::has_slowdown_length() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CCLCMsg_HltvReplay::set_has_slowdown_length() {
  _has_bits_[0] |= 0x00000002u;
}
void CCLCMsg_HltvReplay::clear_has_slowdown_length() {
  _has_bits_[0] &= ~0x00000002u;
}
void CCLCMsg_HltvReplay::clear_slowdown_length() {
  slowdown_length_ = 0;
  clear_has_slowdown_length();
}
float CCLCMsg_HltvReplay::slowdown_length() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_HltvReplay.slowdown_length)
  return slowdown_length_;
}
void CCLCMsg_HltvReplay::set_slowdown_length(float value) {
  set_has_slowdown_length();
  slowdown_length_ = value;
  // @@protoc_insertion_point(field_set:CCLCMsg_HltvReplay.slowdown_length)
}

// optional float slowdown_rate = 3;
bool CCLCMsg_HltvReplay::has_slowdown_rate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CCLCMsg_HltvReplay::set_has_slowdown_rate() {
  _has_bits_[0] |= 0x00000004u;
}
void CCLCMsg_HltvReplay::clear_has_slowdown_rate() {
  _has_bits_[0] &= ~0x00000004u;
}
void CCLCMsg_HltvReplay::clear_slowdown_rate() {
  slowdown_rate_ = 0;
  clear_has_slowdown_rate();
}
float CCLCMsg_HltvReplay::slowdown_rate() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_HltvReplay.slowdown_rate)
  return slowdown_rate_;
}
void CCLCMsg_HltvReplay::set_slowdown_rate(float value) {
  set_has_slowdown_rate();
  slowdown_rate_ = value;
  // @@protoc_insertion_point(field_set:CCLCMsg_HltvReplay.slowdown_rate)
}

// optional int32 primary_target_ent_index = 4;
bool CCLCMsg_HltvReplay::has_primary_target_ent_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CCLCMsg_HltvReplay::set_has_primary_target_ent_index() {
  _has_bits_[0] |= 0x00000008u;
}
void CCLCMsg_HltvReplay::clear_has_primary_target_ent_index() {
  _has_bits_[0] &= ~0x00000008u;
}
void CCLCMsg_HltvReplay::clear_primary_target_ent_index() {
  primary_target_ent_index_ = 0;
  clear_has_primary_target_ent_index();
}
::google::protobuf::int32 CCLCMsg_HltvReplay::primary_target_ent_index() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_HltvReplay.primary_target_ent_index)
  return primary_target_ent_index_;
}
void CCLCMsg_HltvReplay::set_primary_target_ent_index(::google::protobuf::int32 value) {
  set_has_primary_target_ent_index();
  primary_target_ent_index_ = value;
  // @@protoc_insertion_point(field_set:CCLCMsg_HltvReplay.primary_target_ent_index)
}

// optional float event_time = 5;
bool CCLCMsg_HltvReplay::has_event_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CCLCMsg_HltvReplay::set_has_event_time() {
  _has_bits_[0] |= 0x00000010u;
}
void CCLCMsg_HltvReplay::clear_has_event_time() {
  _has_bits_[0] &= ~0x00000010u;
}
void CCLCMsg_HltvReplay::clear_event_time() {
  event_time_ = 0;
  clear_has_event_time();
}
float CCLCMsg_HltvReplay::event_time() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_HltvReplay.event_time)
  return event_time_;
}
void CCLCMsg_HltvReplay::set_event_time(float value) {
  set_has_event_time();
  event_time_ = value;
  // @@protoc_insertion_point(field_set:CCLCMsg_HltvReplay.event_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSVCMsg_Broadcast_Command::kCmdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSVCMsg_Broadcast_Command::CSVCMsg_Broadcast_Command()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_netmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSVCMsg_Broadcast_Command)
}
CSVCMsg_Broadcast_Command::CSVCMsg_Broadcast_Command(const CSVCMsg_Broadcast_Command& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cmd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_cmd()) {
    cmd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cmd_);
  }
  // @@protoc_insertion_point(copy_constructor:CSVCMsg_Broadcast_Command)
}

void CSVCMsg_Broadcast_Command::SharedCtor() {
  _cached_size_ = 0;
  cmd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CSVCMsg_Broadcast_Command::~CSVCMsg_Broadcast_Command() {
  // @@protoc_insertion_point(destructor:CSVCMsg_Broadcast_Command)
  SharedDtor();
}

void CSVCMsg_Broadcast_Command::SharedDtor() {
  cmd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CSVCMsg_Broadcast_Command::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSVCMsg_Broadcast_Command::descriptor() {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[60].descriptor;
}

const CSVCMsg_Broadcast_Command& CSVCMsg_Broadcast_Command::default_instance() {
  protobuf_netmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CSVCMsg_Broadcast_Command* CSVCMsg_Broadcast_Command::New(::google::protobuf::Arena* arena) const {
  CSVCMsg_Broadcast_Command* n = new CSVCMsg_Broadcast_Command;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSVCMsg_Broadcast_Command::Clear() {
// @@protoc_insertion_point(message_clear_start:CSVCMsg_Broadcast_Command)
  if (has_cmd()) {
    GOOGLE_DCHECK(!cmd_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*cmd_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSVCMsg_Broadcast_Command::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSVCMsg_Broadcast_Command)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string cmd = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cmd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cmd().data(), this->cmd().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CSVCMsg_Broadcast_Command.cmd");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSVCMsg_Broadcast_Command)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSVCMsg_Broadcast_Command)
  return false;
#undef DO_
}

void CSVCMsg_Broadcast_Command::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSVCMsg_Broadcast_Command)
  // optional string cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cmd().data(), this->cmd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSVCMsg_Broadcast_Command.cmd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->cmd(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSVCMsg_Broadcast_Command)
}

::google::protobuf::uint8* CSVCMsg_Broadcast_Command::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSVCMsg_Broadcast_Command)
  // optional string cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cmd().data(), this->cmd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSVCMsg_Broadcast_Command.cmd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cmd(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSVCMsg_Broadcast_Command)
  return target;
}

size_t CSVCMsg_Broadcast_Command::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSVCMsg_Broadcast_Command)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional string cmd = 1;
  if (has_cmd()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cmd());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSVCMsg_Broadcast_Command::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSVCMsg_Broadcast_Command)
  GOOGLE_DCHECK_NE(&from, this);
  const CSVCMsg_Broadcast_Command* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSVCMsg_Broadcast_Command>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSVCMsg_Broadcast_Command)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSVCMsg_Broadcast_Command)
    MergeFrom(*source);
  }
}

void CSVCMsg_Broadcast_Command::MergeFrom(const CSVCMsg_Broadcast_Command& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSVCMsg_Broadcast_Command)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_cmd()) {
    set_has_cmd();
    cmd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cmd_);
  }
}

void CSVCMsg_Broadcast_Command::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSVCMsg_Broadcast_Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSVCMsg_Broadcast_Command::CopyFrom(const CSVCMsg_Broadcast_Command& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSVCMsg_Broadcast_Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSVCMsg_Broadcast_Command::IsInitialized() const {
  return true;
}

void CSVCMsg_Broadcast_Command::Swap(CSVCMsg_Broadcast_Command* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSVCMsg_Broadcast_Command::InternalSwap(CSVCMsg_Broadcast_Command* other) {
  cmd_.Swap(&other->cmd_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSVCMsg_Broadcast_Command::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_metadata[60];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CSVCMsg_Broadcast_Command

// optional string cmd = 1;
bool CSVCMsg_Broadcast_Command::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CSVCMsg_Broadcast_Command::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
void CSVCMsg_Broadcast_Command::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
void CSVCMsg_Broadcast_Command::clear_cmd() {
  cmd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cmd();
}
const ::std::string& CSVCMsg_Broadcast_Command::cmd() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_Broadcast_Command.cmd)
  return cmd_.GetNoArena();
}
void CSVCMsg_Broadcast_Command::set_cmd(const ::std::string& value) {
  set_has_cmd();
  cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CSVCMsg_Broadcast_Command.cmd)
}
#if LANG_CXX11
void CSVCMsg_Broadcast_Command::set_cmd(::std::string&& value) {
  set_has_cmd();
  cmd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CSVCMsg_Broadcast_Command.cmd)
}
#endif
void CSVCMsg_Broadcast_Command::set_cmd(const char* value) {
  set_has_cmd();
  cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CSVCMsg_Broadcast_Command.cmd)
}
void CSVCMsg_Broadcast_Command::set_cmd(const char* value, size_t size) {
  set_has_cmd();
  cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CSVCMsg_Broadcast_Command.cmd)
}
::std::string* CSVCMsg_Broadcast_Command::mutable_cmd() {
  set_has_cmd();
  // @@protoc_insertion_point(field_mutable:CSVCMsg_Broadcast_Command.cmd)
  return cmd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CSVCMsg_Broadcast_Command::release_cmd() {
  // @@protoc_insertion_point(field_release:CSVCMsg_Broadcast_Command.cmd)
  clear_has_cmd();
  return cmd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CSVCMsg_Broadcast_Command::set_allocated_cmd(::std::string* cmd) {
  if (cmd != NULL) {
    set_has_cmd();
  } else {
    clear_has_cmd();
  }
  cmd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cmd);
  // @@protoc_insertion_point(field_set_allocated:CSVCMsg_Broadcast_Command.cmd)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
