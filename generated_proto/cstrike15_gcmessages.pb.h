// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cstrike15_gcmessages.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cstrike15_5fgcmessages_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_cstrike15_5fgcmessages_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "steammessages.pb.h"
#include "engine_gcmessages.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_cstrike15_5fgcmessages_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cstrike15_5fgcmessages_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[134]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cstrike15_5fgcmessages_2eproto;
class AccountActivity;
struct AccountActivityDefaultTypeInternal;
extern AccountActivityDefaultTypeInternal _AccountActivity_default_instance_;
class CAttribute_String;
struct CAttribute_StringDefaultTypeInternal;
extern CAttribute_StringDefaultTypeInternal _CAttribute_String_default_instance_;
class CClientHeaderOverwatchEvidence;
struct CClientHeaderOverwatchEvidenceDefaultTypeInternal;
extern CClientHeaderOverwatchEvidenceDefaultTypeInternal _CClientHeaderOverwatchEvidence_default_instance_;
class CDataGCCStrike15_v2_MatchInfo;
struct CDataGCCStrike15_v2_MatchInfoDefaultTypeInternal;
extern CDataGCCStrike15_v2_MatchInfoDefaultTypeInternal _CDataGCCStrike15_v2_MatchInfo_default_instance_;
class CDataGCCStrike15_v2_TournamentGroup;
struct CDataGCCStrike15_v2_TournamentGroupDefaultTypeInternal;
extern CDataGCCStrike15_v2_TournamentGroupDefaultTypeInternal _CDataGCCStrike15_v2_TournamentGroup_default_instance_;
class CDataGCCStrike15_v2_TournamentGroupTeam;
struct CDataGCCStrike15_v2_TournamentGroupTeamDefaultTypeInternal;
extern CDataGCCStrike15_v2_TournamentGroupTeamDefaultTypeInternal _CDataGCCStrike15_v2_TournamentGroupTeam_default_instance_;
class CDataGCCStrike15_v2_TournamentGroup_Picks;
struct CDataGCCStrike15_v2_TournamentGroup_PicksDefaultTypeInternal;
extern CDataGCCStrike15_v2_TournamentGroup_PicksDefaultTypeInternal _CDataGCCStrike15_v2_TournamentGroup_Picks_default_instance_;
class CDataGCCStrike15_v2_TournamentInfo;
struct CDataGCCStrike15_v2_TournamentInfoDefaultTypeInternal;
extern CDataGCCStrike15_v2_TournamentInfoDefaultTypeInternal _CDataGCCStrike15_v2_TournamentInfo_default_instance_;
class CDataGCCStrike15_v2_TournamentMatchDraft;
struct CDataGCCStrike15_v2_TournamentMatchDraftDefaultTypeInternal;
extern CDataGCCStrike15_v2_TournamentMatchDraftDefaultTypeInternal _CDataGCCStrike15_v2_TournamentMatchDraft_default_instance_;
class CDataGCCStrike15_v2_TournamentMatchDraft_Entry;
struct CDataGCCStrike15_v2_TournamentMatchDraft_EntryDefaultTypeInternal;
extern CDataGCCStrike15_v2_TournamentMatchDraft_EntryDefaultTypeInternal _CDataGCCStrike15_v2_TournamentMatchDraft_Entry_default_instance_;
class CDataGCCStrike15_v2_TournamentSection;
struct CDataGCCStrike15_v2_TournamentSectionDefaultTypeInternal;
extern CDataGCCStrike15_v2_TournamentSectionDefaultTypeInternal _CDataGCCStrike15_v2_TournamentSection_default_instance_;
class CEconItemPreviewDataBlock;
struct CEconItemPreviewDataBlockDefaultTypeInternal;
extern CEconItemPreviewDataBlockDefaultTypeInternal _CEconItemPreviewDataBlock_default_instance_;
class CEconItemPreviewDataBlock_Sticker;
struct CEconItemPreviewDataBlock_StickerDefaultTypeInternal;
extern CEconItemPreviewDataBlock_StickerDefaultTypeInternal _CEconItemPreviewDataBlock_Sticker_default_instance_;
class CMsgCStrike15Welcome;
struct CMsgCStrike15WelcomeDefaultTypeInternal;
extern CMsgCStrike15WelcomeDefaultTypeInternal _CMsgCStrike15Welcome_default_instance_;
class CMsgGCCStrike15_GotvSyncPacket;
struct CMsgGCCStrike15_GotvSyncPacketDefaultTypeInternal;
extern CMsgGCCStrike15_GotvSyncPacketDefaultTypeInternal _CMsgGCCStrike15_GotvSyncPacket_default_instance_;
class CMsgGCCStrike15_v2_AccountPrivacySettings;
struct CMsgGCCStrike15_v2_AccountPrivacySettingsDefaultTypeInternal;
extern CMsgGCCStrike15_v2_AccountPrivacySettingsDefaultTypeInternal _CMsgGCCStrike15_v2_AccountPrivacySettings_default_instance_;
class CMsgGCCStrike15_v2_AccountPrivacySettings_Setting;
struct CMsgGCCStrike15_v2_AccountPrivacySettings_SettingDefaultTypeInternal;
extern CMsgGCCStrike15_v2_AccountPrivacySettings_SettingDefaultTypeInternal _CMsgGCCStrike15_v2_AccountPrivacySettings_Setting_default_instance_;
class CMsgGCCStrike15_v2_Account_RequestCoPlays;
struct CMsgGCCStrike15_v2_Account_RequestCoPlaysDefaultTypeInternal;
extern CMsgGCCStrike15_v2_Account_RequestCoPlaysDefaultTypeInternal _CMsgGCCStrike15_v2_Account_RequestCoPlays_default_instance_;
class CMsgGCCStrike15_v2_Account_RequestCoPlays_Player;
struct CMsgGCCStrike15_v2_Account_RequestCoPlays_PlayerDefaultTypeInternal;
extern CMsgGCCStrike15_v2_Account_RequestCoPlays_PlayerDefaultTypeInternal _CMsgGCCStrike15_v2_Account_RequestCoPlays_Player_default_instance_;
class CMsgGCCStrike15_v2_AcknowledgePenalty;
struct CMsgGCCStrike15_v2_AcknowledgePenaltyDefaultTypeInternal;
extern CMsgGCCStrike15_v2_AcknowledgePenaltyDefaultTypeInternal _CMsgGCCStrike15_v2_AcknowledgePenalty_default_instance_;
class CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest;
struct CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequestDefaultTypeInternal;
extern CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequestDefaultTypeInternal _CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest_default_instance_;
class CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse;
struct CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponseDefaultTypeInternal;
extern CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponseDefaultTypeInternal _CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse_default_instance_;
class CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin;
struct CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoinDefaultTypeInternal;
extern CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoinDefaultTypeInternal _CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin_default_instance_;
class CMsgGCCStrike15_v2_Client2GCStreamUnlock;
struct CMsgGCCStrike15_v2_Client2GCStreamUnlockDefaultTypeInternal;
extern CMsgGCCStrike15_v2_Client2GCStreamUnlockDefaultTypeInternal _CMsgGCCStrike15_v2_Client2GCStreamUnlock_default_instance_;
class CMsgGCCStrike15_v2_Client2GCTextMsg;
struct CMsgGCCStrike15_v2_Client2GCTextMsgDefaultTypeInternal;
extern CMsgGCCStrike15_v2_Client2GCTextMsgDefaultTypeInternal _CMsgGCCStrike15_v2_Client2GCTextMsg_default_instance_;
class CMsgGCCStrike15_v2_ClientAuthKeyCode;
struct CMsgGCCStrike15_v2_ClientAuthKeyCodeDefaultTypeInternal;
extern CMsgGCCStrike15_v2_ClientAuthKeyCodeDefaultTypeInternal _CMsgGCCStrike15_v2_ClientAuthKeyCode_default_instance_;
class CMsgGCCStrike15_v2_ClientCommendPlayer;
struct CMsgGCCStrike15_v2_ClientCommendPlayerDefaultTypeInternal;
extern CMsgGCCStrike15_v2_ClientCommendPlayerDefaultTypeInternal _CMsgGCCStrike15_v2_ClientCommendPlayer_default_instance_;
class CMsgGCCStrike15_v2_ClientLogonFatalError;
struct CMsgGCCStrike15_v2_ClientLogonFatalErrorDefaultTypeInternal;
extern CMsgGCCStrike15_v2_ClientLogonFatalErrorDefaultTypeInternal _CMsgGCCStrike15_v2_ClientLogonFatalError_default_instance_;
class CMsgGCCStrike15_v2_ClientPlayerDecalSign;
struct CMsgGCCStrike15_v2_ClientPlayerDecalSignDefaultTypeInternal;
extern CMsgGCCStrike15_v2_ClientPlayerDecalSignDefaultTypeInternal _CMsgGCCStrike15_v2_ClientPlayerDecalSign_default_instance_;
class CMsgGCCStrike15_v2_ClientPollState;
struct CMsgGCCStrike15_v2_ClientPollStateDefaultTypeInternal;
extern CMsgGCCStrike15_v2_ClientPollStateDefaultTypeInternal _CMsgGCCStrike15_v2_ClientPollState_default_instance_;
class CMsgGCCStrike15_v2_ClientReportPlayer;
struct CMsgGCCStrike15_v2_ClientReportPlayerDefaultTypeInternal;
extern CMsgGCCStrike15_v2_ClientReportPlayerDefaultTypeInternal _CMsgGCCStrike15_v2_ClientReportPlayer_default_instance_;
class CMsgGCCStrike15_v2_ClientReportResponse;
struct CMsgGCCStrike15_v2_ClientReportResponseDefaultTypeInternal;
extern CMsgGCCStrike15_v2_ClientReportResponseDefaultTypeInternal _CMsgGCCStrike15_v2_ClientReportResponse_default_instance_;
class CMsgGCCStrike15_v2_ClientReportServer;
struct CMsgGCCStrike15_v2_ClientReportServerDefaultTypeInternal;
extern CMsgGCCStrike15_v2_ClientReportServerDefaultTypeInternal _CMsgGCCStrike15_v2_ClientReportServer_default_instance_;
class CMsgGCCStrike15_v2_ClientRequestJoinFriendData;
struct CMsgGCCStrike15_v2_ClientRequestJoinFriendDataDefaultTypeInternal;
extern CMsgGCCStrike15_v2_ClientRequestJoinFriendDataDefaultTypeInternal _CMsgGCCStrike15_v2_ClientRequestJoinFriendData_default_instance_;
class CMsgGCCStrike15_v2_ClientRequestJoinServerData;
struct CMsgGCCStrike15_v2_ClientRequestJoinServerDataDefaultTypeInternal;
extern CMsgGCCStrike15_v2_ClientRequestJoinServerDataDefaultTypeInternal _CMsgGCCStrike15_v2_ClientRequestJoinServerData_default_instance_;
class CMsgGCCStrike15_v2_ClientRequestPlayersProfile;
struct CMsgGCCStrike15_v2_ClientRequestPlayersProfileDefaultTypeInternal;
extern CMsgGCCStrike15_v2_ClientRequestPlayersProfileDefaultTypeInternal _CMsgGCCStrike15_v2_ClientRequestPlayersProfile_default_instance_;
class CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends;
struct CMsgGCCStrike15_v2_ClientRequestWatchInfoFriendsDefaultTypeInternal;
extern CMsgGCCStrike15_v2_ClientRequestWatchInfoFriendsDefaultTypeInternal _CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends_default_instance_;
class CMsgGCCStrike15_v2_ClientSubmitSurveyVote;
struct CMsgGCCStrike15_v2_ClientSubmitSurveyVoteDefaultTypeInternal;
extern CMsgGCCStrike15_v2_ClientSubmitSurveyVoteDefaultTypeInternal _CMsgGCCStrike15_v2_ClientSubmitSurveyVote_default_instance_;
class CMsgGCCStrike15_v2_ClientToGCChat;
struct CMsgGCCStrike15_v2_ClientToGCChatDefaultTypeInternal;
extern CMsgGCCStrike15_v2_ClientToGCChatDefaultTypeInternal _CMsgGCCStrike15_v2_ClientToGCChat_default_instance_;
class CMsgGCCStrike15_v2_ClientToGCRequestElevate;
struct CMsgGCCStrike15_v2_ClientToGCRequestElevateDefaultTypeInternal;
extern CMsgGCCStrike15_v2_ClientToGCRequestElevateDefaultTypeInternal _CMsgGCCStrike15_v2_ClientToGCRequestElevate_default_instance_;
class CMsgGCCStrike15_v2_ClientToGCRequestTicket;
struct CMsgGCCStrike15_v2_ClientToGCRequestTicketDefaultTypeInternal;
extern CMsgGCCStrike15_v2_ClientToGCRequestTicketDefaultTypeInternal _CMsgGCCStrike15_v2_ClientToGCRequestTicket_default_instance_;
class CMsgGCCStrike15_v2_ClientVarValueNotificationInfo;
struct CMsgGCCStrike15_v2_ClientVarValueNotificationInfoDefaultTypeInternal;
extern CMsgGCCStrike15_v2_ClientVarValueNotificationInfoDefaultTypeInternal _CMsgGCCStrike15_v2_ClientVarValueNotificationInfo_default_instance_;
class CMsgGCCStrike15_v2_Fantasy;
struct CMsgGCCStrike15_v2_FantasyDefaultTypeInternal;
extern CMsgGCCStrike15_v2_FantasyDefaultTypeInternal _CMsgGCCStrike15_v2_Fantasy_default_instance_;
class CMsgGCCStrike15_v2_Fantasy_FantasySlot;
struct CMsgGCCStrike15_v2_Fantasy_FantasySlotDefaultTypeInternal;
extern CMsgGCCStrike15_v2_Fantasy_FantasySlotDefaultTypeInternal _CMsgGCCStrike15_v2_Fantasy_FantasySlot_default_instance_;
class CMsgGCCStrike15_v2_Fantasy_FantasyTeam;
struct CMsgGCCStrike15_v2_Fantasy_FantasyTeamDefaultTypeInternal;
extern CMsgGCCStrike15_v2_Fantasy_FantasyTeamDefaultTypeInternal _CMsgGCCStrike15_v2_Fantasy_FantasyTeam_default_instance_;
class CMsgGCCStrike15_v2_GC2ClientTextMsg;
struct CMsgGCCStrike15_v2_GC2ClientTextMsgDefaultTypeInternal;
extern CMsgGCCStrike15_v2_GC2ClientTextMsgDefaultTypeInternal _CMsgGCCStrike15_v2_GC2ClientTextMsg_default_instance_;
class CMsgGCCStrike15_v2_GC2ClientTournamentInfo;
struct CMsgGCCStrike15_v2_GC2ClientTournamentInfoDefaultTypeInternal;
extern CMsgGCCStrike15_v2_GC2ClientTournamentInfoDefaultTypeInternal _CMsgGCCStrike15_v2_GC2ClientTournamentInfo_default_instance_;
class CMsgGCCStrike15_v2_GC2ServerReservationUpdate;
struct CMsgGCCStrike15_v2_GC2ServerReservationUpdateDefaultTypeInternal;
extern CMsgGCCStrike15_v2_GC2ServerReservationUpdateDefaultTypeInternal _CMsgGCCStrike15_v2_GC2ServerReservationUpdate_default_instance_;
class CMsgGCCStrike15_v2_GCToClientChat;
struct CMsgGCCStrike15_v2_GCToClientChatDefaultTypeInternal;
extern CMsgGCCStrike15_v2_GCToClientChatDefaultTypeInternal _CMsgGCCStrike15_v2_GCToClientChat_default_instance_;
class CMsgGCCStrike15_v2_GiftsLeaderboardRequest;
struct CMsgGCCStrike15_v2_GiftsLeaderboardRequestDefaultTypeInternal;
extern CMsgGCCStrike15_v2_GiftsLeaderboardRequestDefaultTypeInternal _CMsgGCCStrike15_v2_GiftsLeaderboardRequest_default_instance_;
class CMsgGCCStrike15_v2_GiftsLeaderboardResponse;
struct CMsgGCCStrike15_v2_GiftsLeaderboardResponseDefaultTypeInternal;
extern CMsgGCCStrike15_v2_GiftsLeaderboardResponseDefaultTypeInternal _CMsgGCCStrike15_v2_GiftsLeaderboardResponse_default_instance_;
class CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry;
struct CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntryDefaultTypeInternal;
extern CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntryDefaultTypeInternal _CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry_default_instance_;
class CMsgGCCStrike15_v2_MatchEndRewardDropsNotification;
struct CMsgGCCStrike15_v2_MatchEndRewardDropsNotificationDefaultTypeInternal;
extern CMsgGCCStrike15_v2_MatchEndRewardDropsNotificationDefaultTypeInternal _CMsgGCCStrike15_v2_MatchEndRewardDropsNotification_default_instance_;
class CMsgGCCStrike15_v2_MatchEndRunRewardDrops;
struct CMsgGCCStrike15_v2_MatchEndRunRewardDropsDefaultTypeInternal;
extern CMsgGCCStrike15_v2_MatchEndRunRewardDropsDefaultTypeInternal _CMsgGCCStrike15_v2_MatchEndRunRewardDrops_default_instance_;
class CMsgGCCStrike15_v2_MatchList;
struct CMsgGCCStrike15_v2_MatchListDefaultTypeInternal;
extern CMsgGCCStrike15_v2_MatchListDefaultTypeInternal _CMsgGCCStrike15_v2_MatchList_default_instance_;
class CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames;
struct CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGamesDefaultTypeInternal;
extern CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGamesDefaultTypeInternal _CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames_default_instance_;
class CMsgGCCStrike15_v2_MatchListRequestFullGameInfo;
struct CMsgGCCStrike15_v2_MatchListRequestFullGameInfoDefaultTypeInternal;
extern CMsgGCCStrike15_v2_MatchListRequestFullGameInfoDefaultTypeInternal _CMsgGCCStrike15_v2_MatchListRequestFullGameInfo_default_instance_;
class CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser;
struct CMsgGCCStrike15_v2_MatchListRequestLiveGameForUserDefaultTypeInternal;
extern CMsgGCCStrike15_v2_MatchListRequestLiveGameForUserDefaultTypeInternal _CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser_default_instance_;
class CMsgGCCStrike15_v2_MatchListRequestRecentUserGames;
struct CMsgGCCStrike15_v2_MatchListRequestRecentUserGamesDefaultTypeInternal;
extern CMsgGCCStrike15_v2_MatchListRequestRecentUserGamesDefaultTypeInternal _CMsgGCCStrike15_v2_MatchListRequestRecentUserGames_default_instance_;
class CMsgGCCStrike15_v2_MatchListRequestTournamentGames;
struct CMsgGCCStrike15_v2_MatchListRequestTournamentGamesDefaultTypeInternal;
extern CMsgGCCStrike15_v2_MatchListRequestTournamentGamesDefaultTypeInternal _CMsgGCCStrike15_v2_MatchListRequestTournamentGames_default_instance_;
class CMsgGCCStrike15_v2_MatchmakingClient2GCHello;
struct CMsgGCCStrike15_v2_MatchmakingClient2GCHelloDefaultTypeInternal;
extern CMsgGCCStrike15_v2_MatchmakingClient2GCHelloDefaultTypeInternal _CMsgGCCStrike15_v2_MatchmakingClient2GCHello_default_instance_;
class CMsgGCCStrike15_v2_MatchmakingClient2ServerPing;
struct CMsgGCCStrike15_v2_MatchmakingClient2ServerPingDefaultTypeInternal;
extern CMsgGCCStrike15_v2_MatchmakingClient2ServerPingDefaultTypeInternal _CMsgGCCStrike15_v2_MatchmakingClient2ServerPing_default_instance_;
class CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon;
struct CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandonDefaultTypeInternal;
extern CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandonDefaultTypeInternal _CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon_default_instance_;
class CMsgGCCStrike15_v2_MatchmakingGC2ClientHello;
struct CMsgGCCStrike15_v2_MatchmakingGC2ClientHelloDefaultTypeInternal;
extern CMsgGCCStrike15_v2_MatchmakingGC2ClientHelloDefaultTypeInternal _CMsgGCCStrike15_v2_MatchmakingGC2ClientHello_default_instance_;
class CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve;
struct CMsgGCCStrike15_v2_MatchmakingGC2ClientReserveDefaultTypeInternal;
extern CMsgGCCStrike15_v2_MatchmakingGC2ClientReserveDefaultTypeInternal _CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve_default_instance_;
class CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate;
struct CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdateDefaultTypeInternal;
extern CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdateDefaultTypeInternal _CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_default_instance_;
class CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note;
struct CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_NoteDefaultTypeInternal;
extern CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_NoteDefaultTypeInternal _CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note_default_instance_;
class CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm;
struct CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirmDefaultTypeInternal;
extern CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirmDefaultTypeInternal _CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm_default_instance_;
class CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate;
struct CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdateDefaultTypeInternal;
extern CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdateDefaultTypeInternal _CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate_default_instance_;
class CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve;
struct CMsgGCCStrike15_v2_MatchmakingGC2ServerReserveDefaultTypeInternal;
extern CMsgGCCStrike15_v2_MatchmakingGC2ServerReserveDefaultTypeInternal _CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve_default_instance_;
class CMsgGCCStrike15_v2_MatchmakingGCOperationalStats;
struct CMsgGCCStrike15_v2_MatchmakingGCOperationalStatsDefaultTypeInternal;
extern CMsgGCCStrike15_v2_MatchmakingGCOperationalStatsDefaultTypeInternal _CMsgGCCStrike15_v2_MatchmakingGCOperationalStats_default_instance_;
class CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate;
struct CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdateDefaultTypeInternal;
extern CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdateDefaultTypeInternal _CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate_default_instance_;
class CMsgGCCStrike15_v2_MatchmakingServer2GCKick;
struct CMsgGCCStrike15_v2_MatchmakingServer2GCKickDefaultTypeInternal;
extern CMsgGCCStrike15_v2_MatchmakingServer2GCKickDefaultTypeInternal _CMsgGCCStrike15_v2_MatchmakingServer2GCKick_default_instance_;
class CMsgGCCStrike15_v2_MatchmakingServerMatchEnd;
struct CMsgGCCStrike15_v2_MatchmakingServerMatchEndDefaultTypeInternal;
extern CMsgGCCStrike15_v2_MatchmakingServerMatchEndDefaultTypeInternal _CMsgGCCStrike15_v2_MatchmakingServerMatchEnd_default_instance_;
class CMsgGCCStrike15_v2_MatchmakingServerReservationResponse;
struct CMsgGCCStrike15_v2_MatchmakingServerReservationResponseDefaultTypeInternal;
extern CMsgGCCStrike15_v2_MatchmakingServerReservationResponseDefaultTypeInternal _CMsgGCCStrike15_v2_MatchmakingServerReservationResponse_default_instance_;
class CMsgGCCStrike15_v2_MatchmakingServerRoundStats;
struct CMsgGCCStrike15_v2_MatchmakingServerRoundStatsDefaultTypeInternal;
extern CMsgGCCStrike15_v2_MatchmakingServerRoundStatsDefaultTypeInternal _CMsgGCCStrike15_v2_MatchmakingServerRoundStats_default_instance_;
class CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo;
struct CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfoDefaultTypeInternal;
extern CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfoDefaultTypeInternal _CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo_default_instance_;
class CMsgGCCStrike15_v2_MatchmakingStart;
struct CMsgGCCStrike15_v2_MatchmakingStartDefaultTypeInternal;
extern CMsgGCCStrike15_v2_MatchmakingStartDefaultTypeInternal _CMsgGCCStrike15_v2_MatchmakingStart_default_instance_;
class CMsgGCCStrike15_v2_MatchmakingStop;
struct CMsgGCCStrike15_v2_MatchmakingStopDefaultTypeInternal;
extern CMsgGCCStrike15_v2_MatchmakingStopDefaultTypeInternal _CMsgGCCStrike15_v2_MatchmakingStop_default_instance_;
class CMsgGCCStrike15_v2_Party_Invite;
struct CMsgGCCStrike15_v2_Party_InviteDefaultTypeInternal;
extern CMsgGCCStrike15_v2_Party_InviteDefaultTypeInternal _CMsgGCCStrike15_v2_Party_Invite_default_instance_;
class CMsgGCCStrike15_v2_Party_Register;
struct CMsgGCCStrike15_v2_Party_RegisterDefaultTypeInternal;
extern CMsgGCCStrike15_v2_Party_RegisterDefaultTypeInternal _CMsgGCCStrike15_v2_Party_Register_default_instance_;
class CMsgGCCStrike15_v2_Party_Search;
struct CMsgGCCStrike15_v2_Party_SearchDefaultTypeInternal;
extern CMsgGCCStrike15_v2_Party_SearchDefaultTypeInternal _CMsgGCCStrike15_v2_Party_Search_default_instance_;
class CMsgGCCStrike15_v2_Party_SearchResults;
struct CMsgGCCStrike15_v2_Party_SearchResultsDefaultTypeInternal;
extern CMsgGCCStrike15_v2_Party_SearchResultsDefaultTypeInternal _CMsgGCCStrike15_v2_Party_SearchResults_default_instance_;
class CMsgGCCStrike15_v2_Party_SearchResults_Entry;
struct CMsgGCCStrike15_v2_Party_SearchResults_EntryDefaultTypeInternal;
extern CMsgGCCStrike15_v2_Party_SearchResults_EntryDefaultTypeInternal _CMsgGCCStrike15_v2_Party_SearchResults_Entry_default_instance_;
class CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment;
struct CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignmentDefaultTypeInternal;
extern CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignmentDefaultTypeInternal _CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment_default_instance_;
class CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus;
struct CMsgGCCStrike15_v2_PlayerOverwatchCaseStatusDefaultTypeInternal;
extern CMsgGCCStrike15_v2_PlayerOverwatchCaseStatusDefaultTypeInternal _CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus_default_instance_;
class CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate;
struct CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdateDefaultTypeInternal;
extern CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdateDefaultTypeInternal _CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate_default_instance_;
class CMsgGCCStrike15_v2_PlayersProfile;
struct CMsgGCCStrike15_v2_PlayersProfileDefaultTypeInternal;
extern CMsgGCCStrike15_v2_PlayersProfileDefaultTypeInternal _CMsgGCCStrike15_v2_PlayersProfile_default_instance_;
class CMsgGCCStrike15_v2_Predictions;
struct CMsgGCCStrike15_v2_PredictionsDefaultTypeInternal;
extern CMsgGCCStrike15_v2_PredictionsDefaultTypeInternal _CMsgGCCStrike15_v2_Predictions_default_instance_;
class CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick;
struct CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPickDefaultTypeInternal;
extern CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPickDefaultTypeInternal _CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick_default_instance_;
class CMsgGCCStrike15_v2_Server2GCClientValidate;
struct CMsgGCCStrike15_v2_Server2GCClientValidateDefaultTypeInternal;
extern CMsgGCCStrike15_v2_Server2GCClientValidateDefaultTypeInternal _CMsgGCCStrike15_v2_Server2GCClientValidate_default_instance_;
class CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure;
struct CMsgGCCStrike15_v2_Server2GCPureServerValidationFailureDefaultTypeInternal;
extern CMsgGCCStrike15_v2_Server2GCPureServerValidationFailureDefaultTypeInternal _CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure_default_instance_;
class CMsgGCCStrike15_v2_ServerNotificationForUserPenalty;
struct CMsgGCCStrike15_v2_ServerNotificationForUserPenaltyDefaultTypeInternal;
extern CMsgGCCStrike15_v2_ServerNotificationForUserPenaltyDefaultTypeInternal _CMsgGCCStrike15_v2_ServerNotificationForUserPenalty_default_instance_;
class CMsgGCCStrike15_v2_ServerVarValueNotificationInfo;
struct CMsgGCCStrike15_v2_ServerVarValueNotificationInfoDefaultTypeInternal;
extern CMsgGCCStrike15_v2_ServerVarValueNotificationInfoDefaultTypeInternal _CMsgGCCStrike15_v2_ServerVarValueNotificationInfo_default_instance_;
class CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification;
struct CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotificationDefaultTypeInternal;
extern CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotificationDefaultTypeInternal _CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification_default_instance_;
class CMsgGCCStrike15_v2_WatchInfoUsers;
struct CMsgGCCStrike15_v2_WatchInfoUsersDefaultTypeInternal;
extern CMsgGCCStrike15_v2_WatchInfoUsersDefaultTypeInternal _CMsgGCCStrike15_v2_WatchInfoUsers_default_instance_;
class CMsgGCCstrike15_v2_ClientRequestNewMission;
struct CMsgGCCstrike15_v2_ClientRequestNewMissionDefaultTypeInternal;
extern CMsgGCCstrike15_v2_ClientRequestNewMissionDefaultTypeInternal _CMsgGCCstrike15_v2_ClientRequestNewMission_default_instance_;
class CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded;
struct CMsgGCCstrike15_v2_GC2ServerNotifyXPRewardedDefaultTypeInternal;
extern CMsgGCCstrike15_v2_GC2ServerNotifyXPRewardedDefaultTypeInternal _CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded_default_instance_;
class CMsgGCToGCReloadVersions;
struct CMsgGCToGCReloadVersionsDefaultTypeInternal;
extern CMsgGCToGCReloadVersionsDefaultTypeInternal _CMsgGCToGCReloadVersions_default_instance_;
class CMsgGC_GlobalGame_Play;
struct CMsgGC_GlobalGame_PlayDefaultTypeInternal;
extern CMsgGC_GlobalGame_PlayDefaultTypeInternal _CMsgGC_GlobalGame_Play_default_instance_;
class CMsgGC_GlobalGame_Subscribe;
struct CMsgGC_GlobalGame_SubscribeDefaultTypeInternal;
extern CMsgGC_GlobalGame_SubscribeDefaultTypeInternal _CMsgGC_GlobalGame_Subscribe_default_instance_;
class CMsgGC_GlobalGame_Unsubscribe;
struct CMsgGC_GlobalGame_UnsubscribeDefaultTypeInternal;
extern CMsgGC_GlobalGame_UnsubscribeDefaultTypeInternal _CMsgGC_GlobalGame_Unsubscribe_default_instance_;
class CMsgGC_ServerQuestUpdateData;
struct CMsgGC_ServerQuestUpdateDataDefaultTypeInternal;
extern CMsgGC_ServerQuestUpdateDataDefaultTypeInternal _CMsgGC_ServerQuestUpdateData_default_instance_;
class CMsgItemAcknowledged;
struct CMsgItemAcknowledgedDefaultTypeInternal;
extern CMsgItemAcknowledgedDefaultTypeInternal _CMsgItemAcknowledged_default_instance_;
class CPreMatchInfoData;
struct CPreMatchInfoDataDefaultTypeInternal;
extern CPreMatchInfoDataDefaultTypeInternal _CPreMatchInfoData_default_instance_;
class CPreMatchInfoData_TeamStats;
struct CPreMatchInfoData_TeamStatsDefaultTypeInternal;
extern CPreMatchInfoData_TeamStatsDefaultTypeInternal _CPreMatchInfoData_TeamStats_default_instance_;
class CSOEconCoupon;
struct CSOEconCouponDefaultTypeInternal;
extern CSOEconCouponDefaultTypeInternal _CSOEconCoupon_default_instance_;
class CSOPersonaDataPublic;
struct CSOPersonaDataPublicDefaultTypeInternal;
extern CSOPersonaDataPublicDefaultTypeInternal _CSOPersonaDataPublic_default_instance_;
class CSOQuestProgress;
struct CSOQuestProgressDefaultTypeInternal;
extern CSOQuestProgressDefaultTypeInternal _CSOQuestProgress_default_instance_;
class DataCenterPing;
struct DataCenterPingDefaultTypeInternal;
extern DataCenterPingDefaultTypeInternal _DataCenterPing_default_instance_;
class DetailedSearchStatistic;
struct DetailedSearchStatisticDefaultTypeInternal;
extern DetailedSearchStatisticDefaultTypeInternal _DetailedSearchStatistic_default_instance_;
class GameServerPing;
struct GameServerPingDefaultTypeInternal;
extern GameServerPingDefaultTypeInternal _GameServerPing_default_instance_;
class GlobalStatistics;
struct GlobalStatisticsDefaultTypeInternal;
extern GlobalStatisticsDefaultTypeInternal _GlobalStatistics_default_instance_;
class IpAddressMask;
struct IpAddressMaskDefaultTypeInternal;
extern IpAddressMaskDefaultTypeInternal _IpAddressMask_default_instance_;
class MatchEndItemUpdates;
struct MatchEndItemUpdatesDefaultTypeInternal;
extern MatchEndItemUpdatesDefaultTypeInternal _MatchEndItemUpdates_default_instance_;
class OperationalStatisticDescription;
struct OperationalStatisticDescriptionDefaultTypeInternal;
extern OperationalStatisticDescriptionDefaultTypeInternal _OperationalStatisticDescription_default_instance_;
class OperationalStatisticElement;
struct OperationalStatisticElementDefaultTypeInternal;
extern OperationalStatisticElementDefaultTypeInternal _OperationalStatisticElement_default_instance_;
class OperationalStatisticsPacket;
struct OperationalStatisticsPacketDefaultTypeInternal;
extern OperationalStatisticsPacketDefaultTypeInternal _OperationalStatisticsPacket_default_instance_;
class PlayerCommendationInfo;
struct PlayerCommendationInfoDefaultTypeInternal;
extern PlayerCommendationInfoDefaultTypeInternal _PlayerCommendationInfo_default_instance_;
class PlayerDecalDigitalSignature;
struct PlayerDecalDigitalSignatureDefaultTypeInternal;
extern PlayerDecalDigitalSignatureDefaultTypeInternal _PlayerDecalDigitalSignature_default_instance_;
class PlayerMedalsInfo;
struct PlayerMedalsInfoDefaultTypeInternal;
extern PlayerMedalsInfoDefaultTypeInternal _PlayerMedalsInfo_default_instance_;
class PlayerQuestData;
struct PlayerQuestDataDefaultTypeInternal;
extern PlayerQuestDataDefaultTypeInternal _PlayerQuestData_default_instance_;
class PlayerQuestData_QuestItemData;
struct PlayerQuestData_QuestItemDataDefaultTypeInternal;
extern PlayerQuestData_QuestItemDataDefaultTypeInternal _PlayerQuestData_QuestItemData_default_instance_;
class PlayerRankingInfo;
struct PlayerRankingInfoDefaultTypeInternal;
extern PlayerRankingInfoDefaultTypeInternal _PlayerRankingInfo_default_instance_;
class ScoreLeaderboardData;
struct ScoreLeaderboardDataDefaultTypeInternal;
extern ScoreLeaderboardDataDefaultTypeInternal _ScoreLeaderboardData_default_instance_;
class ScoreLeaderboardData_AccountEntries;
struct ScoreLeaderboardData_AccountEntriesDefaultTypeInternal;
extern ScoreLeaderboardData_AccountEntriesDefaultTypeInternal _ScoreLeaderboardData_AccountEntries_default_instance_;
class ScoreLeaderboardData_Entry;
struct ScoreLeaderboardData_EntryDefaultTypeInternal;
extern ScoreLeaderboardData_EntryDefaultTypeInternal _ScoreLeaderboardData_Entry_default_instance_;
class ServerHltvInfo;
struct ServerHltvInfoDefaultTypeInternal;
extern ServerHltvInfoDefaultTypeInternal _ServerHltvInfo_default_instance_;
class TournamentEvent;
struct TournamentEventDefaultTypeInternal;
extern TournamentEventDefaultTypeInternal _TournamentEvent_default_instance_;
class TournamentMatchSetup;
struct TournamentMatchSetupDefaultTypeInternal;
extern TournamentMatchSetupDefaultTypeInternal _TournamentMatchSetup_default_instance_;
class TournamentPlayer;
struct TournamentPlayerDefaultTypeInternal;
extern TournamentPlayerDefaultTypeInternal _TournamentPlayer_default_instance_;
class TournamentTeam;
struct TournamentTeamDefaultTypeInternal;
extern TournamentTeamDefaultTypeInternal _TournamentTeam_default_instance_;
class WatchableMatchInfo;
struct WatchableMatchInfoDefaultTypeInternal;
extern WatchableMatchInfoDefaultTypeInternal _WatchableMatchInfo_default_instance_;
class XpProgressData;
struct XpProgressDataDefaultTypeInternal;
extern XpProgressDataDefaultTypeInternal _XpProgressData_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::AccountActivity* Arena::CreateMaybeMessage<::AccountActivity>(Arena*);
template<> ::CAttribute_String* Arena::CreateMaybeMessage<::CAttribute_String>(Arena*);
template<> ::CClientHeaderOverwatchEvidence* Arena::CreateMaybeMessage<::CClientHeaderOverwatchEvidence>(Arena*);
template<> ::CDataGCCStrike15_v2_MatchInfo* Arena::CreateMaybeMessage<::CDataGCCStrike15_v2_MatchInfo>(Arena*);
template<> ::CDataGCCStrike15_v2_TournamentGroup* Arena::CreateMaybeMessage<::CDataGCCStrike15_v2_TournamentGroup>(Arena*);
template<> ::CDataGCCStrike15_v2_TournamentGroupTeam* Arena::CreateMaybeMessage<::CDataGCCStrike15_v2_TournamentGroupTeam>(Arena*);
template<> ::CDataGCCStrike15_v2_TournamentGroup_Picks* Arena::CreateMaybeMessage<::CDataGCCStrike15_v2_TournamentGroup_Picks>(Arena*);
template<> ::CDataGCCStrike15_v2_TournamentInfo* Arena::CreateMaybeMessage<::CDataGCCStrike15_v2_TournamentInfo>(Arena*);
template<> ::CDataGCCStrike15_v2_TournamentMatchDraft* Arena::CreateMaybeMessage<::CDataGCCStrike15_v2_TournamentMatchDraft>(Arena*);
template<> ::CDataGCCStrike15_v2_TournamentMatchDraft_Entry* Arena::CreateMaybeMessage<::CDataGCCStrike15_v2_TournamentMatchDraft_Entry>(Arena*);
template<> ::CDataGCCStrike15_v2_TournamentSection* Arena::CreateMaybeMessage<::CDataGCCStrike15_v2_TournamentSection>(Arena*);
template<> ::CEconItemPreviewDataBlock* Arena::CreateMaybeMessage<::CEconItemPreviewDataBlock>(Arena*);
template<> ::CEconItemPreviewDataBlock_Sticker* Arena::CreateMaybeMessage<::CEconItemPreviewDataBlock_Sticker>(Arena*);
template<> ::CMsgCStrike15Welcome* Arena::CreateMaybeMessage<::CMsgCStrike15Welcome>(Arena*);
template<> ::CMsgGCCStrike15_GotvSyncPacket* Arena::CreateMaybeMessage<::CMsgGCCStrike15_GotvSyncPacket>(Arena*);
template<> ::CMsgGCCStrike15_v2_AccountPrivacySettings* Arena::CreateMaybeMessage<::CMsgGCCStrike15_v2_AccountPrivacySettings>(Arena*);
template<> ::CMsgGCCStrike15_v2_AccountPrivacySettings_Setting* Arena::CreateMaybeMessage<::CMsgGCCStrike15_v2_AccountPrivacySettings_Setting>(Arena*);
template<> ::CMsgGCCStrike15_v2_Account_RequestCoPlays* Arena::CreateMaybeMessage<::CMsgGCCStrike15_v2_Account_RequestCoPlays>(Arena*);
template<> ::CMsgGCCStrike15_v2_Account_RequestCoPlays_Player* Arena::CreateMaybeMessage<::CMsgGCCStrike15_v2_Account_RequestCoPlays_Player>(Arena*);
template<> ::CMsgGCCStrike15_v2_AcknowledgePenalty* Arena::CreateMaybeMessage<::CMsgGCCStrike15_v2_AcknowledgePenalty>(Arena*);
template<> ::CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest* Arena::CreateMaybeMessage<::CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest>(Arena*);
template<> ::CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse* Arena::CreateMaybeMessage<::CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse>(Arena*);
template<> ::CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin* Arena::CreateMaybeMessage<::CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin>(Arena*);
template<> ::CMsgGCCStrike15_v2_Client2GCStreamUnlock* Arena::CreateMaybeMessage<::CMsgGCCStrike15_v2_Client2GCStreamUnlock>(Arena*);
template<> ::CMsgGCCStrike15_v2_Client2GCTextMsg* Arena::CreateMaybeMessage<::CMsgGCCStrike15_v2_Client2GCTextMsg>(Arena*);
template<> ::CMsgGCCStrike15_v2_ClientAuthKeyCode* Arena::CreateMaybeMessage<::CMsgGCCStrike15_v2_ClientAuthKeyCode>(Arena*);
template<> ::CMsgGCCStrike15_v2_ClientCommendPlayer* Arena::CreateMaybeMessage<::CMsgGCCStrike15_v2_ClientCommendPlayer>(Arena*);
template<> ::CMsgGCCStrike15_v2_ClientLogonFatalError* Arena::CreateMaybeMessage<::CMsgGCCStrike15_v2_ClientLogonFatalError>(Arena*);
template<> ::CMsgGCCStrike15_v2_ClientPlayerDecalSign* Arena::CreateMaybeMessage<::CMsgGCCStrike15_v2_ClientPlayerDecalSign>(Arena*);
template<> ::CMsgGCCStrike15_v2_ClientPollState* Arena::CreateMaybeMessage<::CMsgGCCStrike15_v2_ClientPollState>(Arena*);
template<> ::CMsgGCCStrike15_v2_ClientReportPlayer* Arena::CreateMaybeMessage<::CMsgGCCStrike15_v2_ClientReportPlayer>(Arena*);
template<> ::CMsgGCCStrike15_v2_ClientReportResponse* Arena::CreateMaybeMessage<::CMsgGCCStrike15_v2_ClientReportResponse>(Arena*);
template<> ::CMsgGCCStrike15_v2_ClientReportServer* Arena::CreateMaybeMessage<::CMsgGCCStrike15_v2_ClientReportServer>(Arena*);
template<> ::CMsgGCCStrike15_v2_ClientRequestJoinFriendData* Arena::CreateMaybeMessage<::CMsgGCCStrike15_v2_ClientRequestJoinFriendData>(Arena*);
template<> ::CMsgGCCStrike15_v2_ClientRequestJoinServerData* Arena::CreateMaybeMessage<::CMsgGCCStrike15_v2_ClientRequestJoinServerData>(Arena*);
template<> ::CMsgGCCStrike15_v2_ClientRequestPlayersProfile* Arena::CreateMaybeMessage<::CMsgGCCStrike15_v2_ClientRequestPlayersProfile>(Arena*);
template<> ::CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends* Arena::CreateMaybeMessage<::CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends>(Arena*);
template<> ::CMsgGCCStrike15_v2_ClientSubmitSurveyVote* Arena::CreateMaybeMessage<::CMsgGCCStrike15_v2_ClientSubmitSurveyVote>(Arena*);
template<> ::CMsgGCCStrike15_v2_ClientToGCChat* Arena::CreateMaybeMessage<::CMsgGCCStrike15_v2_ClientToGCChat>(Arena*);
template<> ::CMsgGCCStrike15_v2_ClientToGCRequestElevate* Arena::CreateMaybeMessage<::CMsgGCCStrike15_v2_ClientToGCRequestElevate>(Arena*);
template<> ::CMsgGCCStrike15_v2_ClientToGCRequestTicket* Arena::CreateMaybeMessage<::CMsgGCCStrike15_v2_ClientToGCRequestTicket>(Arena*);
template<> ::CMsgGCCStrike15_v2_ClientVarValueNotificationInfo* Arena::CreateMaybeMessage<::CMsgGCCStrike15_v2_ClientVarValueNotificationInfo>(Arena*);
template<> ::CMsgGCCStrike15_v2_Fantasy* Arena::CreateMaybeMessage<::CMsgGCCStrike15_v2_Fantasy>(Arena*);
template<> ::CMsgGCCStrike15_v2_Fantasy_FantasySlot* Arena::CreateMaybeMessage<::CMsgGCCStrike15_v2_Fantasy_FantasySlot>(Arena*);
template<> ::CMsgGCCStrike15_v2_Fantasy_FantasyTeam* Arena::CreateMaybeMessage<::CMsgGCCStrike15_v2_Fantasy_FantasyTeam>(Arena*);
template<> ::CMsgGCCStrike15_v2_GC2ClientTextMsg* Arena::CreateMaybeMessage<::CMsgGCCStrike15_v2_GC2ClientTextMsg>(Arena*);
template<> ::CMsgGCCStrike15_v2_GC2ClientTournamentInfo* Arena::CreateMaybeMessage<::CMsgGCCStrike15_v2_GC2ClientTournamentInfo>(Arena*);
template<> ::CMsgGCCStrike15_v2_GC2ServerReservationUpdate* Arena::CreateMaybeMessage<::CMsgGCCStrike15_v2_GC2ServerReservationUpdate>(Arena*);
template<> ::CMsgGCCStrike15_v2_GCToClientChat* Arena::CreateMaybeMessage<::CMsgGCCStrike15_v2_GCToClientChat>(Arena*);
template<> ::CMsgGCCStrike15_v2_GiftsLeaderboardRequest* Arena::CreateMaybeMessage<::CMsgGCCStrike15_v2_GiftsLeaderboardRequest>(Arena*);
template<> ::CMsgGCCStrike15_v2_GiftsLeaderboardResponse* Arena::CreateMaybeMessage<::CMsgGCCStrike15_v2_GiftsLeaderboardResponse>(Arena*);
template<> ::CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry* Arena::CreateMaybeMessage<::CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry>(Arena*);
template<> ::CMsgGCCStrike15_v2_MatchEndRewardDropsNotification* Arena::CreateMaybeMessage<::CMsgGCCStrike15_v2_MatchEndRewardDropsNotification>(Arena*);
template<> ::CMsgGCCStrike15_v2_MatchEndRunRewardDrops* Arena::CreateMaybeMessage<::CMsgGCCStrike15_v2_MatchEndRunRewardDrops>(Arena*);
template<> ::CMsgGCCStrike15_v2_MatchList* Arena::CreateMaybeMessage<::CMsgGCCStrike15_v2_MatchList>(Arena*);
template<> ::CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames* Arena::CreateMaybeMessage<::CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames>(Arena*);
template<> ::CMsgGCCStrike15_v2_MatchListRequestFullGameInfo* Arena::CreateMaybeMessage<::CMsgGCCStrike15_v2_MatchListRequestFullGameInfo>(Arena*);
template<> ::CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser* Arena::CreateMaybeMessage<::CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser>(Arena*);
template<> ::CMsgGCCStrike15_v2_MatchListRequestRecentUserGames* Arena::CreateMaybeMessage<::CMsgGCCStrike15_v2_MatchListRequestRecentUserGames>(Arena*);
template<> ::CMsgGCCStrike15_v2_MatchListRequestTournamentGames* Arena::CreateMaybeMessage<::CMsgGCCStrike15_v2_MatchListRequestTournamentGames>(Arena*);
template<> ::CMsgGCCStrike15_v2_MatchmakingClient2GCHello* Arena::CreateMaybeMessage<::CMsgGCCStrike15_v2_MatchmakingClient2GCHello>(Arena*);
template<> ::CMsgGCCStrike15_v2_MatchmakingClient2ServerPing* Arena::CreateMaybeMessage<::CMsgGCCStrike15_v2_MatchmakingClient2ServerPing>(Arena*);
template<> ::CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon* Arena::CreateMaybeMessage<::CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon>(Arena*);
template<> ::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello* Arena::CreateMaybeMessage<::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello>(Arena*);
template<> ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* Arena::CreateMaybeMessage<::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve>(Arena*);
template<> ::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate* Arena::CreateMaybeMessage<::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate>(Arena*);
template<> ::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note* Arena::CreateMaybeMessage<::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note>(Arena*);
template<> ::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm* Arena::CreateMaybeMessage<::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm>(Arena*);
template<> ::CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate* Arena::CreateMaybeMessage<::CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate>(Arena*);
template<> ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* Arena::CreateMaybeMessage<::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve>(Arena*);
template<> ::CMsgGCCStrike15_v2_MatchmakingGCOperationalStats* Arena::CreateMaybeMessage<::CMsgGCCStrike15_v2_MatchmakingGCOperationalStats>(Arena*);
template<> ::CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate* Arena::CreateMaybeMessage<::CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate>(Arena*);
template<> ::CMsgGCCStrike15_v2_MatchmakingServer2GCKick* Arena::CreateMaybeMessage<::CMsgGCCStrike15_v2_MatchmakingServer2GCKick>(Arena*);
template<> ::CMsgGCCStrike15_v2_MatchmakingServerMatchEnd* Arena::CreateMaybeMessage<::CMsgGCCStrike15_v2_MatchmakingServerMatchEnd>(Arena*);
template<> ::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse* Arena::CreateMaybeMessage<::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse>(Arena*);
template<> ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats* Arena::CreateMaybeMessage<::CMsgGCCStrike15_v2_MatchmakingServerRoundStats>(Arena*);
template<> ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo* Arena::CreateMaybeMessage<::CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo>(Arena*);
template<> ::CMsgGCCStrike15_v2_MatchmakingStart* Arena::CreateMaybeMessage<::CMsgGCCStrike15_v2_MatchmakingStart>(Arena*);
template<> ::CMsgGCCStrike15_v2_MatchmakingStop* Arena::CreateMaybeMessage<::CMsgGCCStrike15_v2_MatchmakingStop>(Arena*);
template<> ::CMsgGCCStrike15_v2_Party_Invite* Arena::CreateMaybeMessage<::CMsgGCCStrike15_v2_Party_Invite>(Arena*);
template<> ::CMsgGCCStrike15_v2_Party_Register* Arena::CreateMaybeMessage<::CMsgGCCStrike15_v2_Party_Register>(Arena*);
template<> ::CMsgGCCStrike15_v2_Party_Search* Arena::CreateMaybeMessage<::CMsgGCCStrike15_v2_Party_Search>(Arena*);
template<> ::CMsgGCCStrike15_v2_Party_SearchResults* Arena::CreateMaybeMessage<::CMsgGCCStrike15_v2_Party_SearchResults>(Arena*);
template<> ::CMsgGCCStrike15_v2_Party_SearchResults_Entry* Arena::CreateMaybeMessage<::CMsgGCCStrike15_v2_Party_SearchResults_Entry>(Arena*);
template<> ::CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment* Arena::CreateMaybeMessage<::CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment>(Arena*);
template<> ::CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus* Arena::CreateMaybeMessage<::CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus>(Arena*);
template<> ::CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate* Arena::CreateMaybeMessage<::CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate>(Arena*);
template<> ::CMsgGCCStrike15_v2_PlayersProfile* Arena::CreateMaybeMessage<::CMsgGCCStrike15_v2_PlayersProfile>(Arena*);
template<> ::CMsgGCCStrike15_v2_Predictions* Arena::CreateMaybeMessage<::CMsgGCCStrike15_v2_Predictions>(Arena*);
template<> ::CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick* Arena::CreateMaybeMessage<::CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick>(Arena*);
template<> ::CMsgGCCStrike15_v2_Server2GCClientValidate* Arena::CreateMaybeMessage<::CMsgGCCStrike15_v2_Server2GCClientValidate>(Arena*);
template<> ::CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure* Arena::CreateMaybeMessage<::CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure>(Arena*);
template<> ::CMsgGCCStrike15_v2_ServerNotificationForUserPenalty* Arena::CreateMaybeMessage<::CMsgGCCStrike15_v2_ServerNotificationForUserPenalty>(Arena*);
template<> ::CMsgGCCStrike15_v2_ServerVarValueNotificationInfo* Arena::CreateMaybeMessage<::CMsgGCCStrike15_v2_ServerVarValueNotificationInfo>(Arena*);
template<> ::CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification* Arena::CreateMaybeMessage<::CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification>(Arena*);
template<> ::CMsgGCCStrike15_v2_WatchInfoUsers* Arena::CreateMaybeMessage<::CMsgGCCStrike15_v2_WatchInfoUsers>(Arena*);
template<> ::CMsgGCCstrike15_v2_ClientRequestNewMission* Arena::CreateMaybeMessage<::CMsgGCCstrike15_v2_ClientRequestNewMission>(Arena*);
template<> ::CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded* Arena::CreateMaybeMessage<::CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded>(Arena*);
template<> ::CMsgGCToGCReloadVersions* Arena::CreateMaybeMessage<::CMsgGCToGCReloadVersions>(Arena*);
template<> ::CMsgGC_GlobalGame_Play* Arena::CreateMaybeMessage<::CMsgGC_GlobalGame_Play>(Arena*);
template<> ::CMsgGC_GlobalGame_Subscribe* Arena::CreateMaybeMessage<::CMsgGC_GlobalGame_Subscribe>(Arena*);
template<> ::CMsgGC_GlobalGame_Unsubscribe* Arena::CreateMaybeMessage<::CMsgGC_GlobalGame_Unsubscribe>(Arena*);
template<> ::CMsgGC_ServerQuestUpdateData* Arena::CreateMaybeMessage<::CMsgGC_ServerQuestUpdateData>(Arena*);
template<> ::CMsgItemAcknowledged* Arena::CreateMaybeMessage<::CMsgItemAcknowledged>(Arena*);
template<> ::CPreMatchInfoData* Arena::CreateMaybeMessage<::CPreMatchInfoData>(Arena*);
template<> ::CPreMatchInfoData_TeamStats* Arena::CreateMaybeMessage<::CPreMatchInfoData_TeamStats>(Arena*);
template<> ::CSOEconCoupon* Arena::CreateMaybeMessage<::CSOEconCoupon>(Arena*);
template<> ::CSOPersonaDataPublic* Arena::CreateMaybeMessage<::CSOPersonaDataPublic>(Arena*);
template<> ::CSOQuestProgress* Arena::CreateMaybeMessage<::CSOQuestProgress>(Arena*);
template<> ::DataCenterPing* Arena::CreateMaybeMessage<::DataCenterPing>(Arena*);
template<> ::DetailedSearchStatistic* Arena::CreateMaybeMessage<::DetailedSearchStatistic>(Arena*);
template<> ::GameServerPing* Arena::CreateMaybeMessage<::GameServerPing>(Arena*);
template<> ::GlobalStatistics* Arena::CreateMaybeMessage<::GlobalStatistics>(Arena*);
template<> ::IpAddressMask* Arena::CreateMaybeMessage<::IpAddressMask>(Arena*);
template<> ::MatchEndItemUpdates* Arena::CreateMaybeMessage<::MatchEndItemUpdates>(Arena*);
template<> ::OperationalStatisticDescription* Arena::CreateMaybeMessage<::OperationalStatisticDescription>(Arena*);
template<> ::OperationalStatisticElement* Arena::CreateMaybeMessage<::OperationalStatisticElement>(Arena*);
template<> ::OperationalStatisticsPacket* Arena::CreateMaybeMessage<::OperationalStatisticsPacket>(Arena*);
template<> ::PlayerCommendationInfo* Arena::CreateMaybeMessage<::PlayerCommendationInfo>(Arena*);
template<> ::PlayerDecalDigitalSignature* Arena::CreateMaybeMessage<::PlayerDecalDigitalSignature>(Arena*);
template<> ::PlayerMedalsInfo* Arena::CreateMaybeMessage<::PlayerMedalsInfo>(Arena*);
template<> ::PlayerQuestData* Arena::CreateMaybeMessage<::PlayerQuestData>(Arena*);
template<> ::PlayerQuestData_QuestItemData* Arena::CreateMaybeMessage<::PlayerQuestData_QuestItemData>(Arena*);
template<> ::PlayerRankingInfo* Arena::CreateMaybeMessage<::PlayerRankingInfo>(Arena*);
template<> ::ScoreLeaderboardData* Arena::CreateMaybeMessage<::ScoreLeaderboardData>(Arena*);
template<> ::ScoreLeaderboardData_AccountEntries* Arena::CreateMaybeMessage<::ScoreLeaderboardData_AccountEntries>(Arena*);
template<> ::ScoreLeaderboardData_Entry* Arena::CreateMaybeMessage<::ScoreLeaderboardData_Entry>(Arena*);
template<> ::ServerHltvInfo* Arena::CreateMaybeMessage<::ServerHltvInfo>(Arena*);
template<> ::TournamentEvent* Arena::CreateMaybeMessage<::TournamentEvent>(Arena*);
template<> ::TournamentMatchSetup* Arena::CreateMaybeMessage<::TournamentMatchSetup>(Arena*);
template<> ::TournamentPlayer* Arena::CreateMaybeMessage<::TournamentPlayer>(Arena*);
template<> ::TournamentTeam* Arena::CreateMaybeMessage<::TournamentTeam>(Arena*);
template<> ::WatchableMatchInfo* Arena::CreateMaybeMessage<::WatchableMatchInfo>(Arena*);
template<> ::XpProgressData* Arena::CreateMaybeMessage<::XpProgressData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum ECsgoGCMsg : int {
  k_EMsgGCCStrike15_v2_Base = 9100,
  k_EMsgGCCStrike15_v2_MatchmakingStart = 9101,
  k_EMsgGCCStrike15_v2_MatchmakingStop = 9102,
  k_EMsgGCCStrike15_v2_MatchmakingClient2ServerPing = 9103,
  k_EMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate = 9104,
  k_EMsgGCCStrike15_v2_MatchmakingGC2ServerReserve = 9105,
  k_EMsgGCCStrike15_v2_MatchmakingServerReservationResponse = 9106,
  k_EMsgGCCStrike15_v2_MatchmakingGC2ClientReserve = 9107,
  k_EMsgGCCStrike15_v2_MatchmakingServerRoundStats = 9108,
  k_EMsgGCCStrike15_v2_MatchmakingClient2GCHello = 9109,
  k_EMsgGCCStrike15_v2_MatchmakingGC2ClientHello = 9110,
  k_EMsgGCCStrike15_v2_MatchmakingServerMatchEnd = 9111,
  k_EMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon = 9112,
  k_EMsgGCCStrike15_v2_MatchmakingServer2GCKick = 9113,
  k_EMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm = 9114,
  k_EMsgGCCStrike15_v2_MatchmakingGCOperationalStats = 9115,
  k_EMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate = 9116,
  k_EMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate = 9117,
  k_EMsgGCCStrike15_v2_ServerNotificationForUserPenalty = 9118,
  k_EMsgGCCStrike15_v2_ClientReportPlayer = 9119,
  k_EMsgGCCStrike15_v2_ClientReportServer = 9120,
  k_EMsgGCCStrike15_v2_ClientCommendPlayer = 9121,
  k_EMsgGCCStrike15_v2_ClientReportResponse = 9122,
  k_EMsgGCCStrike15_v2_ClientCommendPlayerQuery = 9123,
  k_EMsgGCCStrike15_v2_ClientCommendPlayerQueryResponse = 9124,
  k_EMsgGCCStrike15_v2_WatchInfoUsers = 9126,
  k_EMsgGCCStrike15_v2_ClientRequestPlayersProfile = 9127,
  k_EMsgGCCStrike15_v2_PlayersProfile = 9128,
  k_EMsgGCCStrike15_v2_SetMyMedalsInfo = 9129,
  k_EMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate = 9131,
  k_EMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment = 9132,
  k_EMsgGCCStrike15_v2_PlayerOverwatchCaseStatus = 9133,
  k_EMsgGCCStrike15_v2_GC2ClientTextMsg = 9134,
  k_EMsgGCCStrike15_v2_Client2GCTextMsg = 9135,
  k_EMsgGCCStrike15_v2_MatchEndRunRewardDrops = 9136,
  k_EMsgGCCStrike15_v2_MatchEndRewardDropsNotification = 9137,
  k_EMsgGCCStrike15_v2_ClientRequestWatchInfoFriends2 = 9138,
  k_EMsgGCCStrike15_v2_MatchList = 9139,
  k_EMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames = 9140,
  k_EMsgGCCStrike15_v2_MatchListRequestRecentUserGames = 9141,
  k_EMsgGCCStrike15_v2_GC2ServerReservationUpdate = 9142,
  k_EMsgGCCStrike15_v2_ClientVarValueNotificationInfo = 9144,
  k_EMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification = 9145,
  k_EMsgGCCStrike15_v2_MatchListRequestTournamentGames = 9146,
  k_EMsgGCCStrike15_v2_MatchListRequestFullGameInfo = 9147,
  k_EMsgGCCStrike15_v2_GiftsLeaderboardRequest = 9148,
  k_EMsgGCCStrike15_v2_GiftsLeaderboardResponse = 9149,
  k_EMsgGCCStrike15_v2_ServerVarValueNotificationInfo = 9150,
  k_EMsgGCToGCReloadVersions = 9151,
  k_EMsgGCCStrike15_v2_ClientSubmitSurveyVote = 9152,
  k_EMsgGCCStrike15_v2_Server2GCClientValidate = 9153,
  k_EMsgGCCStrike15_v2_MatchListRequestLiveGameForUser = 9154,
  k_EMsgGCCStrike15_v2_Server2GCPureServerValidationFailure = 9155,
  k_EMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest = 9156,
  k_EMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse = 9157,
  k_EMsgGCCStrike15_v2_AccountPrivacySettings = 9158,
  k_EMsgGCCStrike15_v2_SetMyActivityInfo = 9159,
  k_EMsgGCCStrike15_v2_MatchListRequestTournamentPredictions = 9160,
  k_EMsgGCCStrike15_v2_MatchListUploadTournamentPredictions = 9161,
  k_EMsgGCCStrike15_v2_DraftSummary = 9162,
  k_EMsgGCCStrike15_v2_ClientRequestJoinFriendData = 9163,
  k_EMsgGCCStrike15_v2_ClientRequestJoinServerData = 9164,
  k_EMsgGCCStrike15_v2_ClientRequestNewMission = 9165,
  k_EMsgGCCStrike15_v2_GC2ServerNotifyXPRewarded = 9166,
  k_EMsgGCCStrike15_v2_GC2ClientTournamentInfo = 9167,
  k_EMsgGC_GlobalGame_Subscribe = 9168,
  k_EMsgGC_GlobalGame_Unsubscribe = 9169,
  k_EMsgGC_GlobalGame_Play = 9170,
  k_EMsgGCCStrike15_v2_AcknowledgePenalty = 9171,
  k_EMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin = 9172,
  k_EMsgGCCStrike15_v2_GC2ClientGlobalStats = 9173,
  k_EMsgGCCStrike15_v2_Client2GCStreamUnlock = 9174,
  k_EMsgGCCStrike15_v2_FantasyRequestClientData = 9175,
  k_EMsgGCCStrike15_v2_FantasyUpdateClientData = 9176,
  k_EMsgGCCStrike15_v2_GCToClientSteamdatagramTicket = 9177,
  k_EMsgGCCStrike15_v2_ClientToGCRequestTicket = 9178,
  k_EMsgGCCStrike15_v2_ClientToGCRequestElevate = 9179,
  k_EMsgGCCStrike15_v2_GlobalChat = 9180,
  k_EMsgGCCStrike15_v2_GlobalChat_Subscribe = 9181,
  k_EMsgGCCStrike15_v2_GlobalChat_Unsubscribe = 9182,
  k_EMsgGCCStrike15_v2_ClientAuthKeyCode = 9183,
  k_EMsgGCCStrike15_v2_GotvSyncPacket = 9184,
  k_EMsgGCCStrike15_v2_ClientPlayerDecalSign = 9185,
  k_EMsgGCCStrike15_v2_ClientLogonFatalError = 9187,
  k_EMsgGCCStrike15_v2_ClientPollState = 9188,
  k_EMsgGCCStrike15_v2_Party_Register = 9189,
  k_EMsgGCCStrike15_v2_Party_Unregister = 9190,
  k_EMsgGCCStrike15_v2_Party_Search = 9191,
  k_EMsgGCCStrike15_v2_Party_Invite = 9192,
  k_EMsgGCCStrike15_v2_Account_RequestCoPlays = 9193
};
bool ECsgoGCMsg_IsValid(int value);
constexpr ECsgoGCMsg ECsgoGCMsg_MIN = k_EMsgGCCStrike15_v2_Base;
constexpr ECsgoGCMsg ECsgoGCMsg_MAX = k_EMsgGCCStrike15_v2_Account_RequestCoPlays;
constexpr int ECsgoGCMsg_ARRAYSIZE = ECsgoGCMsg_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ECsgoGCMsg_descriptor();
template<typename T>
inline const std::string& ECsgoGCMsg_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ECsgoGCMsg>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ECsgoGCMsg_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ECsgoGCMsg_descriptor(), enum_t_value);
}
inline bool ECsgoGCMsg_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ECsgoGCMsg* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ECsgoGCMsg>(
    ECsgoGCMsg_descriptor(), name, value);
}
// ===================================================================

class GameServerPing final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GameServerPing) */ {
 public:
  inline GameServerPing() : GameServerPing(nullptr) {}
  ~GameServerPing() override;
  explicit constexpr GameServerPing(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GameServerPing(const GameServerPing& from);
  GameServerPing(GameServerPing&& from) noexcept
    : GameServerPing() {
    *this = ::std::move(from);
  }

  inline GameServerPing& operator=(const GameServerPing& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameServerPing& operator=(GameServerPing&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameServerPing& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameServerPing* internal_default_instance() {
    return reinterpret_cast<const GameServerPing*>(
               &_GameServerPing_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GameServerPing& a, GameServerPing& b) {
    a.Swap(&b);
  }
  inline void Swap(GameServerPing* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameServerPing* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameServerPing* New() const final {
    return new GameServerPing();
  }

  GameServerPing* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameServerPing>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GameServerPing& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GameServerPing& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameServerPing* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GameServerPing";
  }
  protected:
  explicit GameServerPing(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPingFieldNumber = 2,
    kIpFieldNumber = 3,
    kInstancesFieldNumber = 5,
  };
  // optional int32 ping = 2;
  bool has_ping() const;
  private:
  bool _internal_has_ping() const;
  public:
  void clear_ping();
  ::PROTOBUF_NAMESPACE_ID::int32 ping() const;
  void set_ping(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ping() const;
  void _internal_set_ping(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint32 ip = 3;
  bool has_ip() const;
  private:
  bool _internal_has_ip() const;
  public:
  void clear_ip();
  ::PROTOBUF_NAMESPACE_ID::uint32 ip() const;
  void set_ip(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ip() const;
  void _internal_set_ip(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 instances = 5;
  bool has_instances() const;
  private:
  bool _internal_has_instances() const;
  public:
  void clear_instances();
  ::PROTOBUF_NAMESPACE_ID::uint32 instances() const;
  void set_instances(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_instances() const;
  void _internal_set_instances(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:GameServerPing)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 ping_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ip_;
  ::PROTOBUF_NAMESPACE_ID::uint32 instances_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class DataCenterPing final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DataCenterPing) */ {
 public:
  inline DataCenterPing() : DataCenterPing(nullptr) {}
  ~DataCenterPing() override;
  explicit constexpr DataCenterPing(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DataCenterPing(const DataCenterPing& from);
  DataCenterPing(DataCenterPing&& from) noexcept
    : DataCenterPing() {
    *this = ::std::move(from);
  }

  inline DataCenterPing& operator=(const DataCenterPing& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataCenterPing& operator=(DataCenterPing&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DataCenterPing& default_instance() {
    return *internal_default_instance();
  }
  static inline const DataCenterPing* internal_default_instance() {
    return reinterpret_cast<const DataCenterPing*>(
               &_DataCenterPing_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DataCenterPing& a, DataCenterPing& b) {
    a.Swap(&b);
  }
  inline void Swap(DataCenterPing* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataCenterPing* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DataCenterPing* New() const final {
    return new DataCenterPing();
  }

  DataCenterPing* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DataCenterPing>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DataCenterPing& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DataCenterPing& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataCenterPing* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DataCenterPing";
  }
  protected:
  explicit DataCenterPing(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataCenterIdFieldNumber = 1,
    kPingFieldNumber = 2,
  };
  // optional fixed32 data_center_id = 1;
  bool has_data_center_id() const;
  private:
  bool _internal_has_data_center_id() const;
  public:
  void clear_data_center_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 data_center_id() const;
  void set_data_center_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_data_center_id() const;
  void _internal_set_data_center_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional sint32 ping = 2;
  bool has_ping() const;
  private:
  bool _internal_has_ping() const;
  public:
  void clear_ping();
  ::PROTOBUF_NAMESPACE_ID::int32 ping() const;
  void set_ping(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ping() const;
  void _internal_set_ping(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:DataCenterPing)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 data_center_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 ping_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class DetailedSearchStatistic final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DetailedSearchStatistic) */ {
 public:
  inline DetailedSearchStatistic() : DetailedSearchStatistic(nullptr) {}
  ~DetailedSearchStatistic() override;
  explicit constexpr DetailedSearchStatistic(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DetailedSearchStatistic(const DetailedSearchStatistic& from);
  DetailedSearchStatistic(DetailedSearchStatistic&& from) noexcept
    : DetailedSearchStatistic() {
    *this = ::std::move(from);
  }

  inline DetailedSearchStatistic& operator=(const DetailedSearchStatistic& from) {
    CopyFrom(from);
    return *this;
  }
  inline DetailedSearchStatistic& operator=(DetailedSearchStatistic&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DetailedSearchStatistic& default_instance() {
    return *internal_default_instance();
  }
  static inline const DetailedSearchStatistic* internal_default_instance() {
    return reinterpret_cast<const DetailedSearchStatistic*>(
               &_DetailedSearchStatistic_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DetailedSearchStatistic& a, DetailedSearchStatistic& b) {
    a.Swap(&b);
  }
  inline void Swap(DetailedSearchStatistic* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DetailedSearchStatistic* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DetailedSearchStatistic* New() const final {
    return new DetailedSearchStatistic();
  }

  DetailedSearchStatistic* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DetailedSearchStatistic>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DetailedSearchStatistic& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DetailedSearchStatistic& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DetailedSearchStatistic* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DetailedSearchStatistic";
  }
  protected:
  explicit DetailedSearchStatistic(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameTypeFieldNumber = 1,
    kSearchTimeAvgFieldNumber = 2,
    kPlayersSearchingFieldNumber = 4,
  };
  // optional uint32 game_type = 1;
  bool has_game_type() const;
  private:
  bool _internal_has_game_type() const;
  public:
  void clear_game_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 game_type() const;
  void set_game_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_game_type() const;
  void _internal_set_game_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 search_time_avg = 2;
  bool has_search_time_avg() const;
  private:
  bool _internal_has_search_time_avg() const;
  public:
  void clear_search_time_avg();
  ::PROTOBUF_NAMESPACE_ID::uint32 search_time_avg() const;
  void set_search_time_avg(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_search_time_avg() const;
  void _internal_set_search_time_avg(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 players_searching = 4;
  bool has_players_searching() const;
  private:
  bool _internal_has_players_searching() const;
  public:
  void clear_players_searching();
  ::PROTOBUF_NAMESPACE_ID::uint32 players_searching() const;
  void set_players_searching(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_players_searching() const;
  void _internal_set_players_searching(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:DetailedSearchStatistic)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 game_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 search_time_avg_;
  ::PROTOBUF_NAMESPACE_ID::uint32 players_searching_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class TournamentPlayer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TournamentPlayer) */ {
 public:
  inline TournamentPlayer() : TournamentPlayer(nullptr) {}
  ~TournamentPlayer() override;
  explicit constexpr TournamentPlayer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TournamentPlayer(const TournamentPlayer& from);
  TournamentPlayer(TournamentPlayer&& from) noexcept
    : TournamentPlayer() {
    *this = ::std::move(from);
  }

  inline TournamentPlayer& operator=(const TournamentPlayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline TournamentPlayer& operator=(TournamentPlayer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TournamentPlayer& default_instance() {
    return *internal_default_instance();
  }
  static inline const TournamentPlayer* internal_default_instance() {
    return reinterpret_cast<const TournamentPlayer*>(
               &_TournamentPlayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TournamentPlayer& a, TournamentPlayer& b) {
    a.Swap(&b);
  }
  inline void Swap(TournamentPlayer* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TournamentPlayer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TournamentPlayer* New() const final {
    return new TournamentPlayer();
  }

  TournamentPlayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TournamentPlayer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TournamentPlayer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TournamentPlayer& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TournamentPlayer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TournamentPlayer";
  }
  protected:
  explicit TournamentPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerNickFieldNumber = 2,
    kPlayerNameFieldNumber = 3,
    kPlayerFlagFieldNumber = 5,
    kPlayerLocationFieldNumber = 6,
    kPlayerDescFieldNumber = 7,
    kAccountIdFieldNumber = 1,
    kPlayerDobFieldNumber = 4,
  };
  // optional string player_nick = 2;
  bool has_player_nick() const;
  private:
  bool _internal_has_player_nick() const;
  public:
  void clear_player_nick();
  const std::string& player_nick() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_player_nick(ArgT0&& arg0, ArgT... args);
  std::string* mutable_player_nick();
  PROTOBUF_MUST_USE_RESULT std::string* release_player_nick();
  void set_allocated_player_nick(std::string* player_nick);
  private:
  const std::string& _internal_player_nick() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_player_nick(const std::string& value);
  std::string* _internal_mutable_player_nick();
  public:

  // optional string player_name = 3;
  bool has_player_name() const;
  private:
  bool _internal_has_player_name() const;
  public:
  void clear_player_name();
  const std::string& player_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_player_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_player_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_player_name();
  void set_allocated_player_name(std::string* player_name);
  private:
  const std::string& _internal_player_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_player_name(const std::string& value);
  std::string* _internal_mutable_player_name();
  public:

  // optional string player_flag = 5;
  bool has_player_flag() const;
  private:
  bool _internal_has_player_flag() const;
  public:
  void clear_player_flag();
  const std::string& player_flag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_player_flag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_player_flag();
  PROTOBUF_MUST_USE_RESULT std::string* release_player_flag();
  void set_allocated_player_flag(std::string* player_flag);
  private:
  const std::string& _internal_player_flag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_player_flag(const std::string& value);
  std::string* _internal_mutable_player_flag();
  public:

  // optional string player_location = 6;
  bool has_player_location() const;
  private:
  bool _internal_has_player_location() const;
  public:
  void clear_player_location();
  const std::string& player_location() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_player_location(ArgT0&& arg0, ArgT... args);
  std::string* mutable_player_location();
  PROTOBUF_MUST_USE_RESULT std::string* release_player_location();
  void set_allocated_player_location(std::string* player_location);
  private:
  const std::string& _internal_player_location() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_player_location(const std::string& value);
  std::string* _internal_mutable_player_location();
  public:

  // optional string player_desc = 7;
  bool has_player_desc() const;
  private:
  bool _internal_has_player_desc() const;
  public:
  void clear_player_desc();
  const std::string& player_desc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_player_desc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_player_desc();
  PROTOBUF_MUST_USE_RESULT std::string* release_player_desc();
  void set_allocated_player_desc(std::string* player_desc);
  private:
  const std::string& _internal_player_desc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_player_desc(const std::string& value);
  std::string* _internal_mutable_player_desc();
  public:

  // optional uint32 account_id = 1;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 account_id() const;
  void set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_account_id() const;
  void _internal_set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 player_dob = 4;
  bool has_player_dob() const;
  private:
  bool _internal_has_player_dob() const;
  public:
  void clear_player_dob();
  ::PROTOBUF_NAMESPACE_ID::uint32 player_dob() const;
  void set_player_dob(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_player_dob() const;
  void _internal_set_player_dob(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TournamentPlayer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr player_nick_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr player_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr player_flag_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr player_location_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr player_desc_;
  ::PROTOBUF_NAMESPACE_ID::uint32 account_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 player_dob_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class TournamentTeam final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TournamentTeam) */ {
 public:
  inline TournamentTeam() : TournamentTeam(nullptr) {}
  ~TournamentTeam() override;
  explicit constexpr TournamentTeam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TournamentTeam(const TournamentTeam& from);
  TournamentTeam(TournamentTeam&& from) noexcept
    : TournamentTeam() {
    *this = ::std::move(from);
  }

  inline TournamentTeam& operator=(const TournamentTeam& from) {
    CopyFrom(from);
    return *this;
  }
  inline TournamentTeam& operator=(TournamentTeam&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TournamentTeam& default_instance() {
    return *internal_default_instance();
  }
  static inline const TournamentTeam* internal_default_instance() {
    return reinterpret_cast<const TournamentTeam*>(
               &_TournamentTeam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TournamentTeam& a, TournamentTeam& b) {
    a.Swap(&b);
  }
  inline void Swap(TournamentTeam* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TournamentTeam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TournamentTeam* New() const final {
    return new TournamentTeam();
  }

  TournamentTeam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TournamentTeam>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TournamentTeam& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TournamentTeam& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TournamentTeam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TournamentTeam";
  }
  protected:
  explicit TournamentTeam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayersFieldNumber = 5,
    kTeamTagFieldNumber = 2,
    kTeamFlagFieldNumber = 3,
    kTeamNameFieldNumber = 4,
    kTeamIdFieldNumber = 1,
  };
  // repeated .TournamentPlayer players = 5;
  int players_size() const;
  private:
  int _internal_players_size() const;
  public:
  void clear_players();
  ::TournamentPlayer* mutable_players(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TournamentPlayer >*
      mutable_players();
  private:
  const ::TournamentPlayer& _internal_players(int index) const;
  ::TournamentPlayer* _internal_add_players();
  public:
  const ::TournamentPlayer& players(int index) const;
  ::TournamentPlayer* add_players();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TournamentPlayer >&
      players() const;

  // optional string team_tag = 2;
  bool has_team_tag() const;
  private:
  bool _internal_has_team_tag() const;
  public:
  void clear_team_tag();
  const std::string& team_tag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_team_tag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_team_tag();
  PROTOBUF_MUST_USE_RESULT std::string* release_team_tag();
  void set_allocated_team_tag(std::string* team_tag);
  private:
  const std::string& _internal_team_tag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_team_tag(const std::string& value);
  std::string* _internal_mutable_team_tag();
  public:

  // optional string team_flag = 3;
  bool has_team_flag() const;
  private:
  bool _internal_has_team_flag() const;
  public:
  void clear_team_flag();
  const std::string& team_flag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_team_flag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_team_flag();
  PROTOBUF_MUST_USE_RESULT std::string* release_team_flag();
  void set_allocated_team_flag(std::string* team_flag);
  private:
  const std::string& _internal_team_flag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_team_flag(const std::string& value);
  std::string* _internal_mutable_team_flag();
  public:

  // optional string team_name = 4;
  bool has_team_name() const;
  private:
  bool _internal_has_team_name() const;
  public:
  void clear_team_name();
  const std::string& team_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_team_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_team_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_team_name();
  void set_allocated_team_name(std::string* team_name);
  private:
  const std::string& _internal_team_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_team_name(const std::string& value);
  std::string* _internal_mutable_team_name();
  public:

  // optional int32 team_id = 1;
  bool has_team_id() const;
  private:
  bool _internal_has_team_id() const;
  public:
  void clear_team_id();
  ::PROTOBUF_NAMESPACE_ID::int32 team_id() const;
  void set_team_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_team_id() const;
  void _internal_set_team_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:TournamentTeam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TournamentPlayer > players_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr team_tag_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr team_flag_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr team_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 team_id_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class TournamentEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TournamentEvent) */ {
 public:
  inline TournamentEvent() : TournamentEvent(nullptr) {}
  ~TournamentEvent() override;
  explicit constexpr TournamentEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TournamentEvent(const TournamentEvent& from);
  TournamentEvent(TournamentEvent&& from) noexcept
    : TournamentEvent() {
    *this = ::std::move(from);
  }

  inline TournamentEvent& operator=(const TournamentEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline TournamentEvent& operator=(TournamentEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TournamentEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const TournamentEvent* internal_default_instance() {
    return reinterpret_cast<const TournamentEvent*>(
               &_TournamentEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(TournamentEvent& a, TournamentEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(TournamentEvent* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TournamentEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TournamentEvent* New() const final {
    return new TournamentEvent();
  }

  TournamentEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TournamentEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TournamentEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TournamentEvent& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TournamentEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TournamentEvent";
  }
  protected:
  explicit TournamentEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventTagFieldNumber = 2,
    kEventNameFieldNumber = 3,
    kEventStageNameFieldNumber = 8,
    kEventIdFieldNumber = 1,
    kEventTimeStartFieldNumber = 4,
    kEventTimeEndFieldNumber = 5,
    kEventPublicFieldNumber = 6,
    kEventStageIdFieldNumber = 7,
    kActiveSectionIdFieldNumber = 9,
  };
  // optional string event_tag = 2;
  bool has_event_tag() const;
  private:
  bool _internal_has_event_tag() const;
  public:
  void clear_event_tag();
  const std::string& event_tag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_event_tag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_event_tag();
  PROTOBUF_MUST_USE_RESULT std::string* release_event_tag();
  void set_allocated_event_tag(std::string* event_tag);
  private:
  const std::string& _internal_event_tag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_event_tag(const std::string& value);
  std::string* _internal_mutable_event_tag();
  public:

  // optional string event_name = 3;
  bool has_event_name() const;
  private:
  bool _internal_has_event_name() const;
  public:
  void clear_event_name();
  const std::string& event_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_event_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_event_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_event_name();
  void set_allocated_event_name(std::string* event_name);
  private:
  const std::string& _internal_event_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_event_name(const std::string& value);
  std::string* _internal_mutable_event_name();
  public:

  // optional string event_stage_name = 8;
  bool has_event_stage_name() const;
  private:
  bool _internal_has_event_stage_name() const;
  public:
  void clear_event_stage_name();
  const std::string& event_stage_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_event_stage_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_event_stage_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_event_stage_name();
  void set_allocated_event_stage_name(std::string* event_stage_name);
  private:
  const std::string& _internal_event_stage_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_event_stage_name(const std::string& value);
  std::string* _internal_mutable_event_stage_name();
  public:

  // optional int32 event_id = 1;
  bool has_event_id() const;
  private:
  bool _internal_has_event_id() const;
  public:
  void clear_event_id();
  ::PROTOBUF_NAMESPACE_ID::int32 event_id() const;
  void set_event_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_event_id() const;
  void _internal_set_event_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint32 event_time_start = 4;
  bool has_event_time_start() const;
  private:
  bool _internal_has_event_time_start() const;
  public:
  void clear_event_time_start();
  ::PROTOBUF_NAMESPACE_ID::uint32 event_time_start() const;
  void set_event_time_start(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_event_time_start() const;
  void _internal_set_event_time_start(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 event_time_end = 5;
  bool has_event_time_end() const;
  private:
  bool _internal_has_event_time_end() const;
  public:
  void clear_event_time_end();
  ::PROTOBUF_NAMESPACE_ID::uint32 event_time_end() const;
  void set_event_time_end(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_event_time_end() const;
  void _internal_set_event_time_end(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int32 event_public = 6;
  bool has_event_public() const;
  private:
  bool _internal_has_event_public() const;
  public:
  void clear_event_public();
  ::PROTOBUF_NAMESPACE_ID::int32 event_public() const;
  void set_event_public(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_event_public() const;
  void _internal_set_event_public(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 event_stage_id = 7;
  bool has_event_stage_id() const;
  private:
  bool _internal_has_event_stage_id() const;
  public:
  void clear_event_stage_id();
  ::PROTOBUF_NAMESPACE_ID::int32 event_stage_id() const;
  void set_event_stage_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_event_stage_id() const;
  void _internal_set_event_stage_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint32 active_section_id = 9;
  bool has_active_section_id() const;
  private:
  bool _internal_has_active_section_id() const;
  public:
  void clear_active_section_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 active_section_id() const;
  void set_active_section_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_active_section_id() const;
  void _internal_set_active_section_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TournamentEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr event_tag_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr event_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr event_stage_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 event_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 event_time_start_;
  ::PROTOBUF_NAMESPACE_ID::uint32 event_time_end_;
  ::PROTOBUF_NAMESPACE_ID::int32 event_public_;
  ::PROTOBUF_NAMESPACE_ID::int32 event_stage_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 active_section_id_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class GlobalStatistics final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GlobalStatistics) */ {
 public:
  inline GlobalStatistics() : GlobalStatistics(nullptr) {}
  ~GlobalStatistics() override;
  explicit constexpr GlobalStatistics(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GlobalStatistics(const GlobalStatistics& from);
  GlobalStatistics(GlobalStatistics&& from) noexcept
    : GlobalStatistics() {
    *this = ::std::move(from);
  }

  inline GlobalStatistics& operator=(const GlobalStatistics& from) {
    CopyFrom(from);
    return *this;
  }
  inline GlobalStatistics& operator=(GlobalStatistics&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GlobalStatistics& default_instance() {
    return *internal_default_instance();
  }
  static inline const GlobalStatistics* internal_default_instance() {
    return reinterpret_cast<const GlobalStatistics*>(
               &_GlobalStatistics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GlobalStatistics& a, GlobalStatistics& b) {
    a.Swap(&b);
  }
  inline void Swap(GlobalStatistics* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GlobalStatistics* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GlobalStatistics* New() const final {
    return new GlobalStatistics();
  }

  GlobalStatistics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GlobalStatistics>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GlobalStatistics& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GlobalStatistics& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GlobalStatistics* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GlobalStatistics";
  }
  protected:
  explicit GlobalStatistics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSearchStatisticsFieldNumber = 7,
    kMainPostUrlFieldNumber = 8,
    kPlayersOnlineFieldNumber = 1,
    kServersOnlineFieldNumber = 2,
    kPlayersSearchingFieldNumber = 3,
    kServersAvailableFieldNumber = 4,
    kOngoingMatchesFieldNumber = 5,
    kSearchTimeAvgFieldNumber = 6,
    kRequiredAppidVersionFieldNumber = 9,
    kPricesheetVersionFieldNumber = 10,
    kTwitchStreamsVersionFieldNumber = 11,
    kActiveTournamentEventidFieldNumber = 12,
    kActiveSurveyIdFieldNumber = 13,
  };
  // repeated .DetailedSearchStatistic search_statistics = 7;
  int search_statistics_size() const;
  private:
  int _internal_search_statistics_size() const;
  public:
  void clear_search_statistics();
  ::DetailedSearchStatistic* mutable_search_statistics(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DetailedSearchStatistic >*
      mutable_search_statistics();
  private:
  const ::DetailedSearchStatistic& _internal_search_statistics(int index) const;
  ::DetailedSearchStatistic* _internal_add_search_statistics();
  public:
  const ::DetailedSearchStatistic& search_statistics(int index) const;
  ::DetailedSearchStatistic* add_search_statistics();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DetailedSearchStatistic >&
      search_statistics() const;

  // optional string main_post_url = 8;
  bool has_main_post_url() const;
  private:
  bool _internal_has_main_post_url() const;
  public:
  void clear_main_post_url();
  const std::string& main_post_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_main_post_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_main_post_url();
  PROTOBUF_MUST_USE_RESULT std::string* release_main_post_url();
  void set_allocated_main_post_url(std::string* main_post_url);
  private:
  const std::string& _internal_main_post_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_main_post_url(const std::string& value);
  std::string* _internal_mutable_main_post_url();
  public:

  // optional uint32 players_online = 1;
  bool has_players_online() const;
  private:
  bool _internal_has_players_online() const;
  public:
  void clear_players_online();
  ::PROTOBUF_NAMESPACE_ID::uint32 players_online() const;
  void set_players_online(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_players_online() const;
  void _internal_set_players_online(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 servers_online = 2;
  bool has_servers_online() const;
  private:
  bool _internal_has_servers_online() const;
  public:
  void clear_servers_online();
  ::PROTOBUF_NAMESPACE_ID::uint32 servers_online() const;
  void set_servers_online(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_servers_online() const;
  void _internal_set_servers_online(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 players_searching = 3;
  bool has_players_searching() const;
  private:
  bool _internal_has_players_searching() const;
  public:
  void clear_players_searching();
  ::PROTOBUF_NAMESPACE_ID::uint32 players_searching() const;
  void set_players_searching(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_players_searching() const;
  void _internal_set_players_searching(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 servers_available = 4;
  bool has_servers_available() const;
  private:
  bool _internal_has_servers_available() const;
  public:
  void clear_servers_available();
  ::PROTOBUF_NAMESPACE_ID::uint32 servers_available() const;
  void set_servers_available(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_servers_available() const;
  void _internal_set_servers_available(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 ongoing_matches = 5;
  bool has_ongoing_matches() const;
  private:
  bool _internal_has_ongoing_matches() const;
  public:
  void clear_ongoing_matches();
  ::PROTOBUF_NAMESPACE_ID::uint32 ongoing_matches() const;
  void set_ongoing_matches(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ongoing_matches() const;
  void _internal_set_ongoing_matches(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 search_time_avg = 6;
  bool has_search_time_avg() const;
  private:
  bool _internal_has_search_time_avg() const;
  public:
  void clear_search_time_avg();
  ::PROTOBUF_NAMESPACE_ID::uint32 search_time_avg() const;
  void set_search_time_avg(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_search_time_avg() const;
  void _internal_set_search_time_avg(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 required_appid_version = 9;
  bool has_required_appid_version() const;
  private:
  bool _internal_has_required_appid_version() const;
  public:
  void clear_required_appid_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 required_appid_version() const;
  void set_required_appid_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_required_appid_version() const;
  void _internal_set_required_appid_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 pricesheet_version = 10;
  bool has_pricesheet_version() const;
  private:
  bool _internal_has_pricesheet_version() const;
  public:
  void clear_pricesheet_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 pricesheet_version() const;
  void set_pricesheet_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pricesheet_version() const;
  void _internal_set_pricesheet_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 twitch_streams_version = 11;
  bool has_twitch_streams_version() const;
  private:
  bool _internal_has_twitch_streams_version() const;
  public:
  void clear_twitch_streams_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 twitch_streams_version() const;
  void set_twitch_streams_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_twitch_streams_version() const;
  void _internal_set_twitch_streams_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 active_tournament_eventid = 12;
  bool has_active_tournament_eventid() const;
  private:
  bool _internal_has_active_tournament_eventid() const;
  public:
  void clear_active_tournament_eventid();
  ::PROTOBUF_NAMESPACE_ID::uint32 active_tournament_eventid() const;
  void set_active_tournament_eventid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_active_tournament_eventid() const;
  void _internal_set_active_tournament_eventid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 active_survey_id = 13;
  bool has_active_survey_id() const;
  private:
  bool _internal_has_active_survey_id() const;
  public:
  void clear_active_survey_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 active_survey_id() const;
  void set_active_survey_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_active_survey_id() const;
  void _internal_set_active_survey_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:GlobalStatistics)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DetailedSearchStatistic > search_statistics_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr main_post_url_;
  ::PROTOBUF_NAMESPACE_ID::uint32 players_online_;
  ::PROTOBUF_NAMESPACE_ID::uint32 servers_online_;
  ::PROTOBUF_NAMESPACE_ID::uint32 players_searching_;
  ::PROTOBUF_NAMESPACE_ID::uint32 servers_available_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ongoing_matches_;
  ::PROTOBUF_NAMESPACE_ID::uint32 search_time_avg_;
  ::PROTOBUF_NAMESPACE_ID::uint32 required_appid_version_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pricesheet_version_;
  ::PROTOBUF_NAMESPACE_ID::uint32 twitch_streams_version_;
  ::PROTOBUF_NAMESPACE_ID::uint32 active_tournament_eventid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 active_survey_id_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class OperationalStatisticDescription final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OperationalStatisticDescription) */ {
 public:
  inline OperationalStatisticDescription() : OperationalStatisticDescription(nullptr) {}
  ~OperationalStatisticDescription() override;
  explicit constexpr OperationalStatisticDescription(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OperationalStatisticDescription(const OperationalStatisticDescription& from);
  OperationalStatisticDescription(OperationalStatisticDescription&& from) noexcept
    : OperationalStatisticDescription() {
    *this = ::std::move(from);
  }

  inline OperationalStatisticDescription& operator=(const OperationalStatisticDescription& from) {
    CopyFrom(from);
    return *this;
  }
  inline OperationalStatisticDescription& operator=(OperationalStatisticDescription&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OperationalStatisticDescription& default_instance() {
    return *internal_default_instance();
  }
  static inline const OperationalStatisticDescription* internal_default_instance() {
    return reinterpret_cast<const OperationalStatisticDescription*>(
               &_OperationalStatisticDescription_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(OperationalStatisticDescription& a, OperationalStatisticDescription& b) {
    a.Swap(&b);
  }
  inline void Swap(OperationalStatisticDescription* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OperationalStatisticDescription* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OperationalStatisticDescription* New() const final {
    return new OperationalStatisticDescription();
  }

  OperationalStatisticDescription* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OperationalStatisticDescription>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OperationalStatisticDescription& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const OperationalStatisticDescription& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OperationalStatisticDescription* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OperationalStatisticDescription";
  }
  protected:
  explicit OperationalStatisticDescription(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kIdkeyFieldNumber = 2,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional uint32 idkey = 2;
  bool has_idkey() const;
  private:
  bool _internal_has_idkey() const;
  public:
  void clear_idkey();
  ::PROTOBUF_NAMESPACE_ID::uint32 idkey() const;
  void set_idkey(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_idkey() const;
  void _internal_set_idkey(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:OperationalStatisticDescription)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 idkey_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class OperationalStatisticElement final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OperationalStatisticElement) */ {
 public:
  inline OperationalStatisticElement() : OperationalStatisticElement(nullptr) {}
  ~OperationalStatisticElement() override;
  explicit constexpr OperationalStatisticElement(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OperationalStatisticElement(const OperationalStatisticElement& from);
  OperationalStatisticElement(OperationalStatisticElement&& from) noexcept
    : OperationalStatisticElement() {
    *this = ::std::move(from);
  }

  inline OperationalStatisticElement& operator=(const OperationalStatisticElement& from) {
    CopyFrom(from);
    return *this;
  }
  inline OperationalStatisticElement& operator=(OperationalStatisticElement&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OperationalStatisticElement& default_instance() {
    return *internal_default_instance();
  }
  static inline const OperationalStatisticElement* internal_default_instance() {
    return reinterpret_cast<const OperationalStatisticElement*>(
               &_OperationalStatisticElement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(OperationalStatisticElement& a, OperationalStatisticElement& b) {
    a.Swap(&b);
  }
  inline void Swap(OperationalStatisticElement* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OperationalStatisticElement* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OperationalStatisticElement* New() const final {
    return new OperationalStatisticElement();
  }

  OperationalStatisticElement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OperationalStatisticElement>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OperationalStatisticElement& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const OperationalStatisticElement& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OperationalStatisticElement* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OperationalStatisticElement";
  }
  protected:
  explicit OperationalStatisticElement(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 2,
    kIdkeyFieldNumber = 1,
  };
  // repeated int32 values = 2;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_values() const;
  void _internal_add_values(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_values();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 values(int index) const;
  void set_values(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_values(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_values();

  // optional uint32 idkey = 1;
  bool has_idkey() const;
  private:
  bool _internal_has_idkey() const;
  public:
  void clear_idkey();
  ::PROTOBUF_NAMESPACE_ID::uint32 idkey() const;
  void set_idkey(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_idkey() const;
  void _internal_set_idkey(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:OperationalStatisticElement)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > values_;
  ::PROTOBUF_NAMESPACE_ID::uint32 idkey_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class OperationalStatisticsPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OperationalStatisticsPacket) */ {
 public:
  inline OperationalStatisticsPacket() : OperationalStatisticsPacket(nullptr) {}
  ~OperationalStatisticsPacket() override;
  explicit constexpr OperationalStatisticsPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OperationalStatisticsPacket(const OperationalStatisticsPacket& from);
  OperationalStatisticsPacket(OperationalStatisticsPacket&& from) noexcept
    : OperationalStatisticsPacket() {
    *this = ::std::move(from);
  }

  inline OperationalStatisticsPacket& operator=(const OperationalStatisticsPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline OperationalStatisticsPacket& operator=(OperationalStatisticsPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OperationalStatisticsPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const OperationalStatisticsPacket* internal_default_instance() {
    return reinterpret_cast<const OperationalStatisticsPacket*>(
               &_OperationalStatisticsPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(OperationalStatisticsPacket& a, OperationalStatisticsPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(OperationalStatisticsPacket* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OperationalStatisticsPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OperationalStatisticsPacket* New() const final {
    return new OperationalStatisticsPacket();
  }

  OperationalStatisticsPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OperationalStatisticsPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OperationalStatisticsPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const OperationalStatisticsPacket& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OperationalStatisticsPacket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OperationalStatisticsPacket";
  }
  protected:
  explicit OperationalStatisticsPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 3,
    kPacketidFieldNumber = 1,
    kMstimestampFieldNumber = 2,
  };
  // repeated .OperationalStatisticElement values = 3;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  ::OperationalStatisticElement* mutable_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OperationalStatisticElement >*
      mutable_values();
  private:
  const ::OperationalStatisticElement& _internal_values(int index) const;
  ::OperationalStatisticElement* _internal_add_values();
  public:
  const ::OperationalStatisticElement& values(int index) const;
  ::OperationalStatisticElement* add_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OperationalStatisticElement >&
      values() const;

  // optional int32 packetid = 1;
  bool has_packetid() const;
  private:
  bool _internal_has_packetid() const;
  public:
  void clear_packetid();
  ::PROTOBUF_NAMESPACE_ID::int32 packetid() const;
  void set_packetid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_packetid() const;
  void _internal_set_packetid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 mstimestamp = 2;
  bool has_mstimestamp() const;
  private:
  bool _internal_has_mstimestamp() const;
  public:
  void clear_mstimestamp();
  ::PROTOBUF_NAMESPACE_ID::int32 mstimestamp() const;
  void set_mstimestamp(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mstimestamp() const;
  void _internal_set_mstimestamp(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:OperationalStatisticsPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OperationalStatisticElement > values_;
  ::PROTOBUF_NAMESPACE_ID::int32 packetid_;
  ::PROTOBUF_NAMESPACE_ID::int32 mstimestamp_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class PlayerRankingInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlayerRankingInfo) */ {
 public:
  inline PlayerRankingInfo() : PlayerRankingInfo(nullptr) {}
  ~PlayerRankingInfo() override;
  explicit constexpr PlayerRankingInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerRankingInfo(const PlayerRankingInfo& from);
  PlayerRankingInfo(PlayerRankingInfo&& from) noexcept
    : PlayerRankingInfo() {
    *this = ::std::move(from);
  }

  inline PlayerRankingInfo& operator=(const PlayerRankingInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerRankingInfo& operator=(PlayerRankingInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerRankingInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerRankingInfo* internal_default_instance() {
    return reinterpret_cast<const PlayerRankingInfo*>(
               &_PlayerRankingInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(PlayerRankingInfo& a, PlayerRankingInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerRankingInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerRankingInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayerRankingInfo* New() const final {
    return new PlayerRankingInfo();
  }

  PlayerRankingInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerRankingInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerRankingInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PlayerRankingInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerRankingInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlayerRankingInfo";
  }
  protected:
  explicit PlayerRankingInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 1,
    kRankIdFieldNumber = 2,
    kWinsFieldNumber = 3,
    kRankChangeFieldNumber = 4,
  };
  // optional uint32 account_id = 1;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 account_id() const;
  void set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_account_id() const;
  void _internal_set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 rank_id = 2;
  bool has_rank_id() const;
  private:
  bool _internal_has_rank_id() const;
  public:
  void clear_rank_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 rank_id() const;
  void set_rank_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rank_id() const;
  void _internal_set_rank_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 wins = 3;
  bool has_wins() const;
  private:
  bool _internal_has_wins() const;
  public:
  void clear_wins();
  ::PROTOBUF_NAMESPACE_ID::uint32 wins() const;
  void set_wins(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_wins() const;
  void _internal_set_wins(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float rank_change = 4;
  bool has_rank_change() const;
  private:
  bool _internal_has_rank_change() const;
  public:
  void clear_rank_change();
  float rank_change() const;
  void set_rank_change(float value);
  private:
  float _internal_rank_change() const;
  void _internal_set_rank_change(float value);
  public:

  // @@protoc_insertion_point(class_scope:PlayerRankingInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 account_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rank_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 wins_;
  float rank_change_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class PlayerCommendationInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlayerCommendationInfo) */ {
 public:
  inline PlayerCommendationInfo() : PlayerCommendationInfo(nullptr) {}
  ~PlayerCommendationInfo() override;
  explicit constexpr PlayerCommendationInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerCommendationInfo(const PlayerCommendationInfo& from);
  PlayerCommendationInfo(PlayerCommendationInfo&& from) noexcept
    : PlayerCommendationInfo() {
    *this = ::std::move(from);
  }

  inline PlayerCommendationInfo& operator=(const PlayerCommendationInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerCommendationInfo& operator=(PlayerCommendationInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerCommendationInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerCommendationInfo* internal_default_instance() {
    return reinterpret_cast<const PlayerCommendationInfo*>(
               &_PlayerCommendationInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(PlayerCommendationInfo& a, PlayerCommendationInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerCommendationInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerCommendationInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayerCommendationInfo* New() const final {
    return new PlayerCommendationInfo();
  }

  PlayerCommendationInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerCommendationInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerCommendationInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PlayerCommendationInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerCommendationInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlayerCommendationInfo";
  }
  protected:
  explicit PlayerCommendationInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCmdFriendlyFieldNumber = 1,
    kCmdTeachingFieldNumber = 2,
    kCmdLeaderFieldNumber = 4,
  };
  // optional uint32 cmd_friendly = 1;
  bool has_cmd_friendly() const;
  private:
  bool _internal_has_cmd_friendly() const;
  public:
  void clear_cmd_friendly();
  ::PROTOBUF_NAMESPACE_ID::uint32 cmd_friendly() const;
  void set_cmd_friendly(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cmd_friendly() const;
  void _internal_set_cmd_friendly(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 cmd_teaching = 2;
  bool has_cmd_teaching() const;
  private:
  bool _internal_has_cmd_teaching() const;
  public:
  void clear_cmd_teaching();
  ::PROTOBUF_NAMESPACE_ID::uint32 cmd_teaching() const;
  void set_cmd_teaching(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cmd_teaching() const;
  void _internal_set_cmd_teaching(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 cmd_leader = 4;
  bool has_cmd_leader() const;
  private:
  bool _internal_has_cmd_leader() const;
  public:
  void clear_cmd_leader();
  ::PROTOBUF_NAMESPACE_ID::uint32 cmd_leader() const;
  void set_cmd_leader(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cmd_leader() const;
  void _internal_set_cmd_leader(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlayerCommendationInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cmd_friendly_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cmd_teaching_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cmd_leader_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class PlayerMedalsInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlayerMedalsInfo) */ {
 public:
  inline PlayerMedalsInfo() : PlayerMedalsInfo(nullptr) {}
  ~PlayerMedalsInfo() override;
  explicit constexpr PlayerMedalsInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerMedalsInfo(const PlayerMedalsInfo& from);
  PlayerMedalsInfo(PlayerMedalsInfo&& from) noexcept
    : PlayerMedalsInfo() {
    *this = ::std::move(from);
  }

  inline PlayerMedalsInfo& operator=(const PlayerMedalsInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerMedalsInfo& operator=(PlayerMedalsInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerMedalsInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerMedalsInfo* internal_default_instance() {
    return reinterpret_cast<const PlayerMedalsInfo*>(
               &_PlayerMedalsInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(PlayerMedalsInfo& a, PlayerMedalsInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerMedalsInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerMedalsInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayerMedalsInfo* New() const final {
    return new PlayerMedalsInfo();
  }

  PlayerMedalsInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerMedalsInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerMedalsInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PlayerMedalsInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerMedalsInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlayerMedalsInfo";
  }
  protected:
  explicit PlayerMedalsInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDisplayItemsDefidxFieldNumber = 7,
    kMedalTeamFieldNumber = 1,
    kMedalCombatFieldNumber = 2,
    kMedalWeaponFieldNumber = 3,
    kMedalGlobalFieldNumber = 4,
    kMedalArmsFieldNumber = 5,
    kFeaturedDisplayItemDefidxFieldNumber = 8,
  };
  // repeated uint32 display_items_defidx = 7;
  int display_items_defidx_size() const;
  private:
  int _internal_display_items_defidx_size() const;
  public:
  void clear_display_items_defidx();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_display_items_defidx(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_display_items_defidx() const;
  void _internal_add_display_items_defidx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_display_items_defidx();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 display_items_defidx(int index) const;
  void set_display_items_defidx(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_display_items_defidx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      display_items_defidx() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_display_items_defidx();

  // optional uint32 medal_team = 1;
  bool has_medal_team() const;
  private:
  bool _internal_has_medal_team() const;
  public:
  void clear_medal_team();
  ::PROTOBUF_NAMESPACE_ID::uint32 medal_team() const;
  void set_medal_team(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_medal_team() const;
  void _internal_set_medal_team(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 medal_combat = 2;
  bool has_medal_combat() const;
  private:
  bool _internal_has_medal_combat() const;
  public:
  void clear_medal_combat();
  ::PROTOBUF_NAMESPACE_ID::uint32 medal_combat() const;
  void set_medal_combat(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_medal_combat() const;
  void _internal_set_medal_combat(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 medal_weapon = 3;
  bool has_medal_weapon() const;
  private:
  bool _internal_has_medal_weapon() const;
  public:
  void clear_medal_weapon();
  ::PROTOBUF_NAMESPACE_ID::uint32 medal_weapon() const;
  void set_medal_weapon(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_medal_weapon() const;
  void _internal_set_medal_weapon(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 medal_global = 4;
  bool has_medal_global() const;
  private:
  bool _internal_has_medal_global() const;
  public:
  void clear_medal_global();
  ::PROTOBUF_NAMESPACE_ID::uint32 medal_global() const;
  void set_medal_global(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_medal_global() const;
  void _internal_set_medal_global(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 medal_arms = 5;
  bool has_medal_arms() const;
  private:
  bool _internal_has_medal_arms() const;
  public:
  void clear_medal_arms();
  ::PROTOBUF_NAMESPACE_ID::uint32 medal_arms() const;
  void set_medal_arms(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_medal_arms() const;
  void _internal_set_medal_arms(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 featured_display_item_defidx = 8;
  bool has_featured_display_item_defidx() const;
  private:
  bool _internal_has_featured_display_item_defidx() const;
  public:
  void clear_featured_display_item_defidx();
  ::PROTOBUF_NAMESPACE_ID::uint32 featured_display_item_defidx() const;
  void set_featured_display_item_defidx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_featured_display_item_defidx() const;
  void _internal_set_featured_display_item_defidx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlayerMedalsInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > display_items_defidx_;
  ::PROTOBUF_NAMESPACE_ID::uint32 medal_team_;
  ::PROTOBUF_NAMESPACE_ID::uint32 medal_combat_;
  ::PROTOBUF_NAMESPACE_ID::uint32 medal_weapon_;
  ::PROTOBUF_NAMESPACE_ID::uint32 medal_global_;
  ::PROTOBUF_NAMESPACE_ID::uint32 medal_arms_;
  ::PROTOBUF_NAMESPACE_ID::uint32 featured_display_item_defidx_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class AccountActivity final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AccountActivity) */ {
 public:
  inline AccountActivity() : AccountActivity(nullptr) {}
  ~AccountActivity() override;
  explicit constexpr AccountActivity(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AccountActivity(const AccountActivity& from);
  AccountActivity(AccountActivity&& from) noexcept
    : AccountActivity() {
    *this = ::std::move(from);
  }

  inline AccountActivity& operator=(const AccountActivity& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccountActivity& operator=(AccountActivity&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AccountActivity& default_instance() {
    return *internal_default_instance();
  }
  static inline const AccountActivity* internal_default_instance() {
    return reinterpret_cast<const AccountActivity*>(
               &_AccountActivity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(AccountActivity& a, AccountActivity& b) {
    a.Swap(&b);
  }
  inline void Swap(AccountActivity* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AccountActivity* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AccountActivity* New() const final {
    return new AccountActivity();
  }

  AccountActivity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AccountActivity>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AccountActivity& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AccountActivity& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountActivity* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AccountActivity";
  }
  protected:
  explicit AccountActivity(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActivityFieldNumber = 1,
    kModeFieldNumber = 2,
    kMapFieldNumber = 3,
  };
  // optional uint32 activity = 1;
  bool has_activity() const;
  private:
  bool _internal_has_activity() const;
  public:
  void clear_activity();
  ::PROTOBUF_NAMESPACE_ID::uint32 activity() const;
  void set_activity(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_activity() const;
  void _internal_set_activity(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 mode = 2;
  bool has_mode() const;
  private:
  bool _internal_has_mode() const;
  public:
  void clear_mode();
  ::PROTOBUF_NAMESPACE_ID::uint32 mode() const;
  void set_mode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_mode() const;
  void _internal_set_mode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 map = 3;
  bool has_map() const;
  private:
  bool _internal_has_map() const;
  public:
  void clear_map();
  ::PROTOBUF_NAMESPACE_ID::uint32 map() const;
  void set_map(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_map() const;
  void _internal_set_map(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:AccountActivity)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 activity_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mode_;
  ::PROTOBUF_NAMESPACE_ID::uint32 map_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class TournamentMatchSetup final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TournamentMatchSetup) */ {
 public:
  inline TournamentMatchSetup() : TournamentMatchSetup(nullptr) {}
  ~TournamentMatchSetup() override;
  explicit constexpr TournamentMatchSetup(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TournamentMatchSetup(const TournamentMatchSetup& from);
  TournamentMatchSetup(TournamentMatchSetup&& from) noexcept
    : TournamentMatchSetup() {
    *this = ::std::move(from);
  }

  inline TournamentMatchSetup& operator=(const TournamentMatchSetup& from) {
    CopyFrom(from);
    return *this;
  }
  inline TournamentMatchSetup& operator=(TournamentMatchSetup&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TournamentMatchSetup& default_instance() {
    return *internal_default_instance();
  }
  static inline const TournamentMatchSetup* internal_default_instance() {
    return reinterpret_cast<const TournamentMatchSetup*>(
               &_TournamentMatchSetup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(TournamentMatchSetup& a, TournamentMatchSetup& b) {
    a.Swap(&b);
  }
  inline void Swap(TournamentMatchSetup* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TournamentMatchSetup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TournamentMatchSetup* New() const final {
    return new TournamentMatchSetup();
  }

  TournamentMatchSetup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TournamentMatchSetup>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TournamentMatchSetup& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TournamentMatchSetup& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TournamentMatchSetup* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TournamentMatchSetup";
  }
  protected:
  explicit TournamentMatchSetup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventIdFieldNumber = 1,
    kTeamIdCtFieldNumber = 2,
    kTeamIdTFieldNumber = 3,
    kEventStageIdFieldNumber = 4,
  };
  // optional int32 event_id = 1;
  bool has_event_id() const;
  private:
  bool _internal_has_event_id() const;
  public:
  void clear_event_id();
  ::PROTOBUF_NAMESPACE_ID::int32 event_id() const;
  void set_event_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_event_id() const;
  void _internal_set_event_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 team_id_ct = 2;
  bool has_team_id_ct() const;
  private:
  bool _internal_has_team_id_ct() const;
  public:
  void clear_team_id_ct();
  ::PROTOBUF_NAMESPACE_ID::int32 team_id_ct() const;
  void set_team_id_ct(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_team_id_ct() const;
  void _internal_set_team_id_ct(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 team_id_t = 3;
  bool has_team_id_t() const;
  private:
  bool _internal_has_team_id_t() const;
  public:
  void clear_team_id_t();
  ::PROTOBUF_NAMESPACE_ID::int32 team_id_t() const;
  void set_team_id_t(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_team_id_t() const;
  void _internal_set_team_id_t(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 event_stage_id = 4;
  bool has_event_stage_id() const;
  private:
  bool _internal_has_event_stage_id() const;
  public:
  void clear_event_stage_id();
  ::PROTOBUF_NAMESPACE_ID::int32 event_stage_id() const;
  void set_event_stage_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_event_stage_id() const;
  void _internal_set_event_stage_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:TournamentMatchSetup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 event_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 team_id_ct_;
  ::PROTOBUF_NAMESPACE_ID::int32 team_id_t_;
  ::PROTOBUF_NAMESPACE_ID::int32 event_stage_id_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class ServerHltvInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ServerHltvInfo) */ {
 public:
  inline ServerHltvInfo() : ServerHltvInfo(nullptr) {}
  ~ServerHltvInfo() override;
  explicit constexpr ServerHltvInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServerHltvInfo(const ServerHltvInfo& from);
  ServerHltvInfo(ServerHltvInfo&& from) noexcept
    : ServerHltvInfo() {
    *this = ::std::move(from);
  }

  inline ServerHltvInfo& operator=(const ServerHltvInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerHltvInfo& operator=(ServerHltvInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServerHltvInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerHltvInfo* internal_default_instance() {
    return reinterpret_cast<const ServerHltvInfo*>(
               &_ServerHltvInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(ServerHltvInfo& a, ServerHltvInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerHltvInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerHltvInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerHltvInfo* New() const final {
    return new ServerHltvInfo();
  }

  ServerHltvInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerHltvInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ServerHltvInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ServerHltvInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerHltvInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ServerHltvInfo";
  }
  protected:
  explicit ServerHltvInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameMapgroupFieldNumber = 9,
    kGameMapFieldNumber = 10,
    kTvWatchKeyFieldNumber = 2,
    kTvUdpPortFieldNumber = 1,
    kTvSlotsFieldNumber = 3,
    kTvClientsFieldNumber = 4,
    kTvProxiesFieldNumber = 5,
    kTvTimeFieldNumber = 6,
    kGameTypeFieldNumber = 8,
    kTvMasterSteamidFieldNumber = 11,
    kTvLocalSlotsFieldNumber = 12,
    kTvLocalClientsFieldNumber = 13,
    kTvLocalProxiesFieldNumber = 14,
    kTvRelaySlotsFieldNumber = 15,
    kTvRelayClientsFieldNumber = 16,
    kTvRelayProxiesFieldNumber = 17,
    kTvRelayAddressFieldNumber = 18,
    kTvRelayPortFieldNumber = 19,
    kTvRelaySteamidFieldNumber = 20,
  };
  // optional string game_mapgroup = 9;
  bool has_game_mapgroup() const;
  private:
  bool _internal_has_game_mapgroup() const;
  public:
  void clear_game_mapgroup();
  const std::string& game_mapgroup() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_game_mapgroup(ArgT0&& arg0, ArgT... args);
  std::string* mutable_game_mapgroup();
  PROTOBUF_MUST_USE_RESULT std::string* release_game_mapgroup();
  void set_allocated_game_mapgroup(std::string* game_mapgroup);
  private:
  const std::string& _internal_game_mapgroup() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_game_mapgroup(const std::string& value);
  std::string* _internal_mutable_game_mapgroup();
  public:

  // optional string game_map = 10;
  bool has_game_map() const;
  private:
  bool _internal_has_game_map() const;
  public:
  void clear_game_map();
  const std::string& game_map() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_game_map(ArgT0&& arg0, ArgT... args);
  std::string* mutable_game_map();
  PROTOBUF_MUST_USE_RESULT std::string* release_game_map();
  void set_allocated_game_map(std::string* game_map);
  private:
  const std::string& _internal_game_map() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_game_map(const std::string& value);
  std::string* _internal_mutable_game_map();
  public:

  // optional uint64 tv_watch_key = 2;
  bool has_tv_watch_key() const;
  private:
  bool _internal_has_tv_watch_key() const;
  public:
  void clear_tv_watch_key();
  ::PROTOBUF_NAMESPACE_ID::uint64 tv_watch_key() const;
  void set_tv_watch_key(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_tv_watch_key() const;
  void _internal_set_tv_watch_key(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 tv_udp_port = 1;
  bool has_tv_udp_port() const;
  private:
  bool _internal_has_tv_udp_port() const;
  public:
  void clear_tv_udp_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 tv_udp_port() const;
  void set_tv_udp_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tv_udp_port() const;
  void _internal_set_tv_udp_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 tv_slots = 3;
  bool has_tv_slots() const;
  private:
  bool _internal_has_tv_slots() const;
  public:
  void clear_tv_slots();
  ::PROTOBUF_NAMESPACE_ID::uint32 tv_slots() const;
  void set_tv_slots(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tv_slots() const;
  void _internal_set_tv_slots(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 tv_clients = 4;
  bool has_tv_clients() const;
  private:
  bool _internal_has_tv_clients() const;
  public:
  void clear_tv_clients();
  ::PROTOBUF_NAMESPACE_ID::uint32 tv_clients() const;
  void set_tv_clients(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tv_clients() const;
  void _internal_set_tv_clients(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 tv_proxies = 5;
  bool has_tv_proxies() const;
  private:
  bool _internal_has_tv_proxies() const;
  public:
  void clear_tv_proxies();
  ::PROTOBUF_NAMESPACE_ID::uint32 tv_proxies() const;
  void set_tv_proxies(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tv_proxies() const;
  void _internal_set_tv_proxies(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 tv_time = 6;
  bool has_tv_time() const;
  private:
  bool _internal_has_tv_time() const;
  public:
  void clear_tv_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 tv_time() const;
  void set_tv_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tv_time() const;
  void _internal_set_tv_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 game_type = 8;
  bool has_game_type() const;
  private:
  bool _internal_has_game_type() const;
  public:
  void clear_game_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 game_type() const;
  void set_game_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_game_type() const;
  void _internal_set_game_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint64 tv_master_steamid = 11;
  bool has_tv_master_steamid() const;
  private:
  bool _internal_has_tv_master_steamid() const;
  public:
  void clear_tv_master_steamid();
  ::PROTOBUF_NAMESPACE_ID::uint64 tv_master_steamid() const;
  void set_tv_master_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_tv_master_steamid() const;
  void _internal_set_tv_master_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 tv_local_slots = 12;
  bool has_tv_local_slots() const;
  private:
  bool _internal_has_tv_local_slots() const;
  public:
  void clear_tv_local_slots();
  ::PROTOBUF_NAMESPACE_ID::uint32 tv_local_slots() const;
  void set_tv_local_slots(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tv_local_slots() const;
  void _internal_set_tv_local_slots(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 tv_local_clients = 13;
  bool has_tv_local_clients() const;
  private:
  bool _internal_has_tv_local_clients() const;
  public:
  void clear_tv_local_clients();
  ::PROTOBUF_NAMESPACE_ID::uint32 tv_local_clients() const;
  void set_tv_local_clients(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tv_local_clients() const;
  void _internal_set_tv_local_clients(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 tv_local_proxies = 14;
  bool has_tv_local_proxies() const;
  private:
  bool _internal_has_tv_local_proxies() const;
  public:
  void clear_tv_local_proxies();
  ::PROTOBUF_NAMESPACE_ID::uint32 tv_local_proxies() const;
  void set_tv_local_proxies(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tv_local_proxies() const;
  void _internal_set_tv_local_proxies(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 tv_relay_slots = 15;
  bool has_tv_relay_slots() const;
  private:
  bool _internal_has_tv_relay_slots() const;
  public:
  void clear_tv_relay_slots();
  ::PROTOBUF_NAMESPACE_ID::uint32 tv_relay_slots() const;
  void set_tv_relay_slots(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tv_relay_slots() const;
  void _internal_set_tv_relay_slots(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 tv_relay_clients = 16;
  bool has_tv_relay_clients() const;
  private:
  bool _internal_has_tv_relay_clients() const;
  public:
  void clear_tv_relay_clients();
  ::PROTOBUF_NAMESPACE_ID::uint32 tv_relay_clients() const;
  void set_tv_relay_clients(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tv_relay_clients() const;
  void _internal_set_tv_relay_clients(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 tv_relay_proxies = 17;
  bool has_tv_relay_proxies() const;
  private:
  bool _internal_has_tv_relay_proxies() const;
  public:
  void clear_tv_relay_proxies();
  ::PROTOBUF_NAMESPACE_ID::uint32 tv_relay_proxies() const;
  void set_tv_relay_proxies(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tv_relay_proxies() const;
  void _internal_set_tv_relay_proxies(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 tv_relay_address = 18;
  bool has_tv_relay_address() const;
  private:
  bool _internal_has_tv_relay_address() const;
  public:
  void clear_tv_relay_address();
  ::PROTOBUF_NAMESPACE_ID::uint32 tv_relay_address() const;
  void set_tv_relay_address(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tv_relay_address() const;
  void _internal_set_tv_relay_address(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 tv_relay_port = 19;
  bool has_tv_relay_port() const;
  private:
  bool _internal_has_tv_relay_port() const;
  public:
  void clear_tv_relay_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 tv_relay_port() const;
  void set_tv_relay_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tv_relay_port() const;
  void _internal_set_tv_relay_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint64 tv_relay_steamid = 20;
  bool has_tv_relay_steamid() const;
  private:
  bool _internal_has_tv_relay_steamid() const;
  public:
  void clear_tv_relay_steamid();
  ::PROTOBUF_NAMESPACE_ID::uint64 tv_relay_steamid() const;
  void set_tv_relay_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_tv_relay_steamid() const;
  void _internal_set_tv_relay_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:ServerHltvInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr game_mapgroup_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr game_map_;
  ::PROTOBUF_NAMESPACE_ID::uint64 tv_watch_key_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tv_udp_port_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tv_slots_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tv_clients_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tv_proxies_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tv_time_;
  ::PROTOBUF_NAMESPACE_ID::uint32 game_type_;
  ::PROTOBUF_NAMESPACE_ID::uint64 tv_master_steamid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tv_local_slots_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tv_local_clients_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tv_local_proxies_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tv_relay_slots_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tv_relay_clients_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tv_relay_proxies_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tv_relay_address_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tv_relay_port_;
  ::PROTOBUF_NAMESPACE_ID::uint64 tv_relay_steamid_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class IpAddressMask final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IpAddressMask) */ {
 public:
  inline IpAddressMask() : IpAddressMask(nullptr) {}
  ~IpAddressMask() override;
  explicit constexpr IpAddressMask(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IpAddressMask(const IpAddressMask& from);
  IpAddressMask(IpAddressMask&& from) noexcept
    : IpAddressMask() {
    *this = ::std::move(from);
  }

  inline IpAddressMask& operator=(const IpAddressMask& from) {
    CopyFrom(from);
    return *this;
  }
  inline IpAddressMask& operator=(IpAddressMask&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IpAddressMask& default_instance() {
    return *internal_default_instance();
  }
  static inline const IpAddressMask* internal_default_instance() {
    return reinterpret_cast<const IpAddressMask*>(
               &_IpAddressMask_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(IpAddressMask& a, IpAddressMask& b) {
    a.Swap(&b);
  }
  inline void Swap(IpAddressMask* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IpAddressMask* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IpAddressMask* New() const final {
    return new IpAddressMask();
  }

  IpAddressMask* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IpAddressMask>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IpAddressMask& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IpAddressMask& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IpAddressMask* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IpAddressMask";
  }
  protected:
  explicit IpAddressMask(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAFieldNumber = 1,
    kBFieldNumber = 2,
    kCFieldNumber = 3,
    kDFieldNumber = 4,
    kBitsFieldNumber = 5,
    kTokenFieldNumber = 6,
  };
  // optional uint32 a = 1;
  bool has_a() const;
  private:
  bool _internal_has_a() const;
  public:
  void clear_a();
  ::PROTOBUF_NAMESPACE_ID::uint32 a() const;
  void set_a(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_a() const;
  void _internal_set_a(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 b = 2;
  bool has_b() const;
  private:
  bool _internal_has_b() const;
  public:
  void clear_b();
  ::PROTOBUF_NAMESPACE_ID::uint32 b() const;
  void set_b(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_b() const;
  void _internal_set_b(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 c = 3;
  bool has_c() const;
  private:
  bool _internal_has_c() const;
  public:
  void clear_c();
  ::PROTOBUF_NAMESPACE_ID::uint32 c() const;
  void set_c(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_c() const;
  void _internal_set_c(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 d = 4;
  bool has_d() const;
  private:
  bool _internal_has_d() const;
  public:
  void clear_d();
  ::PROTOBUF_NAMESPACE_ID::uint32 d() const;
  void set_d(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_d() const;
  void _internal_set_d(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 bits = 5;
  bool has_bits() const;
  private:
  bool _internal_has_bits() const;
  public:
  void clear_bits();
  ::PROTOBUF_NAMESPACE_ID::uint32 bits() const;
  void set_bits(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_bits() const;
  void _internal_set_bits(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 token = 6;
  bool has_token() const;
  private:
  bool _internal_has_token() const;
  public:
  void clear_token();
  ::PROTOBUF_NAMESPACE_ID::uint32 token() const;
  void set_token(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_token() const;
  void _internal_set_token(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:IpAddressMask)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 a_;
  ::PROTOBUF_NAMESPACE_ID::uint32 b_;
  ::PROTOBUF_NAMESPACE_ID::uint32 c_;
  ::PROTOBUF_NAMESPACE_ID::uint32 d_;
  ::PROTOBUF_NAMESPACE_ID::uint32 bits_;
  ::PROTOBUF_NAMESPACE_ID::uint32 token_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class XpProgressData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XpProgressData) */ {
 public:
  inline XpProgressData() : XpProgressData(nullptr) {}
  ~XpProgressData() override;
  explicit constexpr XpProgressData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  XpProgressData(const XpProgressData& from);
  XpProgressData(XpProgressData&& from) noexcept
    : XpProgressData() {
    *this = ::std::move(from);
  }

  inline XpProgressData& operator=(const XpProgressData& from) {
    CopyFrom(from);
    return *this;
  }
  inline XpProgressData& operator=(XpProgressData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const XpProgressData& default_instance() {
    return *internal_default_instance();
  }
  static inline const XpProgressData* internal_default_instance() {
    return reinterpret_cast<const XpProgressData*>(
               &_XpProgressData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(XpProgressData& a, XpProgressData& b) {
    a.Swap(&b);
  }
  inline void Swap(XpProgressData* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(XpProgressData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline XpProgressData* New() const final {
    return new XpProgressData();
  }

  XpProgressData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<XpProgressData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const XpProgressData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const XpProgressData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(XpProgressData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XpProgressData";
  }
  protected:
  explicit XpProgressData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpPointsFieldNumber = 1,
    kXpCategoryFieldNumber = 2,
  };
  // optional uint32 xp_points = 1;
  bool has_xp_points() const;
  private:
  bool _internal_has_xp_points() const;
  public:
  void clear_xp_points();
  ::PROTOBUF_NAMESPACE_ID::uint32 xp_points() const;
  void set_xp_points(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_xp_points() const;
  void _internal_set_xp_points(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int32 xp_category = 2;
  bool has_xp_category() const;
  private:
  bool _internal_has_xp_category() const;
  public:
  void clear_xp_category();
  ::PROTOBUF_NAMESPACE_ID::int32 xp_category() const;
  void set_xp_category(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xp_category() const;
  void _internal_set_xp_category(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:XpProgressData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 xp_points_;
  ::PROTOBUF_NAMESPACE_ID::int32 xp_category_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class MatchEndItemUpdates final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MatchEndItemUpdates) */ {
 public:
  inline MatchEndItemUpdates() : MatchEndItemUpdates(nullptr) {}
  ~MatchEndItemUpdates() override;
  explicit constexpr MatchEndItemUpdates(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MatchEndItemUpdates(const MatchEndItemUpdates& from);
  MatchEndItemUpdates(MatchEndItemUpdates&& from) noexcept
    : MatchEndItemUpdates() {
    *this = ::std::move(from);
  }

  inline MatchEndItemUpdates& operator=(const MatchEndItemUpdates& from) {
    CopyFrom(from);
    return *this;
  }
  inline MatchEndItemUpdates& operator=(MatchEndItemUpdates&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MatchEndItemUpdates& default_instance() {
    return *internal_default_instance();
  }
  static inline const MatchEndItemUpdates* internal_default_instance() {
    return reinterpret_cast<const MatchEndItemUpdates*>(
               &_MatchEndItemUpdates_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(MatchEndItemUpdates& a, MatchEndItemUpdates& b) {
    a.Swap(&b);
  }
  inline void Swap(MatchEndItemUpdates* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MatchEndItemUpdates* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MatchEndItemUpdates* New() const final {
    return new MatchEndItemUpdates();
  }

  MatchEndItemUpdates* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MatchEndItemUpdates>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MatchEndItemUpdates& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MatchEndItemUpdates& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MatchEndItemUpdates* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MatchEndItemUpdates";
  }
  protected:
  explicit MatchEndItemUpdates(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemIdFieldNumber = 1,
    kItemAttrDefidxFieldNumber = 2,
    kItemAttrDeltaValueFieldNumber = 3,
  };
  // optional uint64 item_id = 1;
  bool has_item_id() const;
  private:
  bool _internal_has_item_id() const;
  public:
  void clear_item_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 item_id() const;
  void set_item_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_item_id() const;
  void _internal_set_item_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 item_attr_defidx = 2;
  bool has_item_attr_defidx() const;
  private:
  bool _internal_has_item_attr_defidx() const;
  public:
  void clear_item_attr_defidx();
  ::PROTOBUF_NAMESPACE_ID::uint32 item_attr_defidx() const;
  void set_item_attr_defidx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_item_attr_defidx() const;
  void _internal_set_item_attr_defidx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 item_attr_delta_value = 3;
  bool has_item_attr_delta_value() const;
  private:
  bool _internal_has_item_attr_delta_value() const;
  public:
  void clear_item_attr_delta_value();
  ::PROTOBUF_NAMESPACE_ID::uint32 item_attr_delta_value() const;
  void set_item_attr_delta_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_item_attr_delta_value() const;
  void _internal_set_item_attr_delta_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:MatchEndItemUpdates)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 item_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 item_attr_defidx_;
  ::PROTOBUF_NAMESPACE_ID::uint32 item_attr_delta_value_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class ScoreLeaderboardData_Entry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ScoreLeaderboardData.Entry) */ {
 public:
  inline ScoreLeaderboardData_Entry() : ScoreLeaderboardData_Entry(nullptr) {}
  ~ScoreLeaderboardData_Entry() override;
  explicit constexpr ScoreLeaderboardData_Entry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ScoreLeaderboardData_Entry(const ScoreLeaderboardData_Entry& from);
  ScoreLeaderboardData_Entry(ScoreLeaderboardData_Entry&& from) noexcept
    : ScoreLeaderboardData_Entry() {
    *this = ::std::move(from);
  }

  inline ScoreLeaderboardData_Entry& operator=(const ScoreLeaderboardData_Entry& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScoreLeaderboardData_Entry& operator=(ScoreLeaderboardData_Entry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ScoreLeaderboardData_Entry& default_instance() {
    return *internal_default_instance();
  }
  static inline const ScoreLeaderboardData_Entry* internal_default_instance() {
    return reinterpret_cast<const ScoreLeaderboardData_Entry*>(
               &_ScoreLeaderboardData_Entry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(ScoreLeaderboardData_Entry& a, ScoreLeaderboardData_Entry& b) {
    a.Swap(&b);
  }
  inline void Swap(ScoreLeaderboardData_Entry* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScoreLeaderboardData_Entry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScoreLeaderboardData_Entry* New() const final {
    return new ScoreLeaderboardData_Entry();
  }

  ScoreLeaderboardData_Entry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScoreLeaderboardData_Entry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ScoreLeaderboardData_Entry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ScoreLeaderboardData_Entry& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScoreLeaderboardData_Entry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ScoreLeaderboardData.Entry";
  }
  protected:
  explicit ScoreLeaderboardData_Entry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagFieldNumber = 1,
    kValFieldNumber = 2,
  };
  // optional uint32 tag = 1;
  bool has_tag() const;
  private:
  bool _internal_has_tag() const;
  public:
  void clear_tag();
  ::PROTOBUF_NAMESPACE_ID::uint32 tag() const;
  void set_tag(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tag() const;
  void _internal_set_tag(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 val = 2;
  bool has_val() const;
  private:
  bool _internal_has_val() const;
  public:
  void clear_val();
  ::PROTOBUF_NAMESPACE_ID::uint32 val() const;
  void set_val(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_val() const;
  void _internal_set_val(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:ScoreLeaderboardData.Entry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tag_;
  ::PROTOBUF_NAMESPACE_ID::uint32 val_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class ScoreLeaderboardData_AccountEntries final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ScoreLeaderboardData.AccountEntries) */ {
 public:
  inline ScoreLeaderboardData_AccountEntries() : ScoreLeaderboardData_AccountEntries(nullptr) {}
  ~ScoreLeaderboardData_AccountEntries() override;
  explicit constexpr ScoreLeaderboardData_AccountEntries(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ScoreLeaderboardData_AccountEntries(const ScoreLeaderboardData_AccountEntries& from);
  ScoreLeaderboardData_AccountEntries(ScoreLeaderboardData_AccountEntries&& from) noexcept
    : ScoreLeaderboardData_AccountEntries() {
    *this = ::std::move(from);
  }

  inline ScoreLeaderboardData_AccountEntries& operator=(const ScoreLeaderboardData_AccountEntries& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScoreLeaderboardData_AccountEntries& operator=(ScoreLeaderboardData_AccountEntries&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ScoreLeaderboardData_AccountEntries& default_instance() {
    return *internal_default_instance();
  }
  static inline const ScoreLeaderboardData_AccountEntries* internal_default_instance() {
    return reinterpret_cast<const ScoreLeaderboardData_AccountEntries*>(
               &_ScoreLeaderboardData_AccountEntries_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(ScoreLeaderboardData_AccountEntries& a, ScoreLeaderboardData_AccountEntries& b) {
    a.Swap(&b);
  }
  inline void Swap(ScoreLeaderboardData_AccountEntries* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScoreLeaderboardData_AccountEntries* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScoreLeaderboardData_AccountEntries* New() const final {
    return new ScoreLeaderboardData_AccountEntries();
  }

  ScoreLeaderboardData_AccountEntries* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScoreLeaderboardData_AccountEntries>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ScoreLeaderboardData_AccountEntries& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ScoreLeaderboardData_AccountEntries& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScoreLeaderboardData_AccountEntries* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ScoreLeaderboardData.AccountEntries";
  }
  protected:
  explicit ScoreLeaderboardData_AccountEntries(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 2,
    kAccountidFieldNumber = 1,
  };
  // repeated .ScoreLeaderboardData.Entry entries = 2;
  int entries_size() const;
  private:
  int _internal_entries_size() const;
  public:
  void clear_entries();
  ::ScoreLeaderboardData_Entry* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ScoreLeaderboardData_Entry >*
      mutable_entries();
  private:
  const ::ScoreLeaderboardData_Entry& _internal_entries(int index) const;
  ::ScoreLeaderboardData_Entry* _internal_add_entries();
  public:
  const ::ScoreLeaderboardData_Entry& entries(int index) const;
  ::ScoreLeaderboardData_Entry* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ScoreLeaderboardData_Entry >&
      entries() const;

  // optional uint32 accountid = 1;
  bool has_accountid() const;
  private:
  bool _internal_has_accountid() const;
  public:
  void clear_accountid();
  ::PROTOBUF_NAMESPACE_ID::uint32 accountid() const;
  void set_accountid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_accountid() const;
  void _internal_set_accountid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:ScoreLeaderboardData.AccountEntries)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ScoreLeaderboardData_Entry > entries_;
  ::PROTOBUF_NAMESPACE_ID::uint32 accountid_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class ScoreLeaderboardData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ScoreLeaderboardData) */ {
 public:
  inline ScoreLeaderboardData() : ScoreLeaderboardData(nullptr) {}
  ~ScoreLeaderboardData() override;
  explicit constexpr ScoreLeaderboardData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ScoreLeaderboardData(const ScoreLeaderboardData& from);
  ScoreLeaderboardData(ScoreLeaderboardData&& from) noexcept
    : ScoreLeaderboardData() {
    *this = ::std::move(from);
  }

  inline ScoreLeaderboardData& operator=(const ScoreLeaderboardData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScoreLeaderboardData& operator=(ScoreLeaderboardData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ScoreLeaderboardData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ScoreLeaderboardData* internal_default_instance() {
    return reinterpret_cast<const ScoreLeaderboardData*>(
               &_ScoreLeaderboardData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(ScoreLeaderboardData& a, ScoreLeaderboardData& b) {
    a.Swap(&b);
  }
  inline void Swap(ScoreLeaderboardData* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScoreLeaderboardData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScoreLeaderboardData* New() const final {
    return new ScoreLeaderboardData();
  }

  ScoreLeaderboardData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScoreLeaderboardData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ScoreLeaderboardData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ScoreLeaderboardData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScoreLeaderboardData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ScoreLeaderboardData";
  }
  protected:
  explicit ScoreLeaderboardData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ScoreLeaderboardData_Entry Entry;
  typedef ScoreLeaderboardData_AccountEntries AccountEntries;

  // accessors -------------------------------------------------------

  enum : int {
    kAccountentriesFieldNumber = 3,
    kMatchentriesFieldNumber = 5,
    kQuestIdFieldNumber = 1,
    kScoreFieldNumber = 2,
  };
  // repeated .ScoreLeaderboardData.AccountEntries accountentries = 3;
  int accountentries_size() const;
  private:
  int _internal_accountentries_size() const;
  public:
  void clear_accountentries();
  ::ScoreLeaderboardData_AccountEntries* mutable_accountentries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ScoreLeaderboardData_AccountEntries >*
      mutable_accountentries();
  private:
  const ::ScoreLeaderboardData_AccountEntries& _internal_accountentries(int index) const;
  ::ScoreLeaderboardData_AccountEntries* _internal_add_accountentries();
  public:
  const ::ScoreLeaderboardData_AccountEntries& accountentries(int index) const;
  ::ScoreLeaderboardData_AccountEntries* add_accountentries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ScoreLeaderboardData_AccountEntries >&
      accountentries() const;

  // repeated .ScoreLeaderboardData.Entry matchentries = 5;
  int matchentries_size() const;
  private:
  int _internal_matchentries_size() const;
  public:
  void clear_matchentries();
  ::ScoreLeaderboardData_Entry* mutable_matchentries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ScoreLeaderboardData_Entry >*
      mutable_matchentries();
  private:
  const ::ScoreLeaderboardData_Entry& _internal_matchentries(int index) const;
  ::ScoreLeaderboardData_Entry* _internal_add_matchentries();
  public:
  const ::ScoreLeaderboardData_Entry& matchentries(int index) const;
  ::ScoreLeaderboardData_Entry* add_matchentries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ScoreLeaderboardData_Entry >&
      matchentries() const;

  // optional uint64 quest_id = 1;
  bool has_quest_id() const;
  private:
  bool _internal_has_quest_id() const;
  public:
  void clear_quest_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 quest_id() const;
  void set_quest_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_quest_id() const;
  void _internal_set_quest_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 score = 2;
  bool has_score() const;
  private:
  bool _internal_has_score() const;
  public:
  void clear_score();
  ::PROTOBUF_NAMESPACE_ID::uint32 score() const;
  void set_score(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_score() const;
  void _internal_set_score(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:ScoreLeaderboardData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ScoreLeaderboardData_AccountEntries > accountentries_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ScoreLeaderboardData_Entry > matchentries_;
  ::PROTOBUF_NAMESPACE_ID::uint64 quest_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 score_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class PlayerQuestData_QuestItemData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlayerQuestData.QuestItemData) */ {
 public:
  inline PlayerQuestData_QuestItemData() : PlayerQuestData_QuestItemData(nullptr) {}
  ~PlayerQuestData_QuestItemData() override;
  explicit constexpr PlayerQuestData_QuestItemData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerQuestData_QuestItemData(const PlayerQuestData_QuestItemData& from);
  PlayerQuestData_QuestItemData(PlayerQuestData_QuestItemData&& from) noexcept
    : PlayerQuestData_QuestItemData() {
    *this = ::std::move(from);
  }

  inline PlayerQuestData_QuestItemData& operator=(const PlayerQuestData_QuestItemData& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerQuestData_QuestItemData& operator=(PlayerQuestData_QuestItemData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerQuestData_QuestItemData& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerQuestData_QuestItemData* internal_default_instance() {
    return reinterpret_cast<const PlayerQuestData_QuestItemData*>(
               &_PlayerQuestData_QuestItemData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(PlayerQuestData_QuestItemData& a, PlayerQuestData_QuestItemData& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerQuestData_QuestItemData* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerQuestData_QuestItemData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayerQuestData_QuestItemData* New() const final {
    return new PlayerQuestData_QuestItemData();
  }

  PlayerQuestData_QuestItemData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerQuestData_QuestItemData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerQuestData_QuestItemData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PlayerQuestData_QuestItemData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerQuestData_QuestItemData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlayerQuestData.QuestItemData";
  }
  protected:
  explicit PlayerQuestData_QuestItemData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQuestIdFieldNumber = 1,
    kQuestNormalPointsEarnedFieldNumber = 2,
    kQuestBonusPointsEarnedFieldNumber = 3,
  };
  // optional uint64 quest_id = 1;
  bool has_quest_id() const;
  private:
  bool _internal_has_quest_id() const;
  public:
  void clear_quest_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 quest_id() const;
  void set_quest_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_quest_id() const;
  void _internal_set_quest_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional int32 quest_normal_points_earned = 2;
  bool has_quest_normal_points_earned() const;
  private:
  bool _internal_has_quest_normal_points_earned() const;
  public:
  void clear_quest_normal_points_earned();
  ::PROTOBUF_NAMESPACE_ID::int32 quest_normal_points_earned() const;
  void set_quest_normal_points_earned(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_quest_normal_points_earned() const;
  void _internal_set_quest_normal_points_earned(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 quest_bonus_points_earned = 3;
  bool has_quest_bonus_points_earned() const;
  private:
  bool _internal_has_quest_bonus_points_earned() const;
  public:
  void clear_quest_bonus_points_earned();
  ::PROTOBUF_NAMESPACE_ID::int32 quest_bonus_points_earned() const;
  void set_quest_bonus_points_earned(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_quest_bonus_points_earned() const;
  void _internal_set_quest_bonus_points_earned(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlayerQuestData.QuestItemData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 quest_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 quest_normal_points_earned_;
  ::PROTOBUF_NAMESPACE_ID::int32 quest_bonus_points_earned_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class PlayerQuestData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlayerQuestData) */ {
 public:
  inline PlayerQuestData() : PlayerQuestData(nullptr) {}
  ~PlayerQuestData() override;
  explicit constexpr PlayerQuestData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerQuestData(const PlayerQuestData& from);
  PlayerQuestData(PlayerQuestData&& from) noexcept
    : PlayerQuestData() {
    *this = ::std::move(from);
  }

  inline PlayerQuestData& operator=(const PlayerQuestData& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerQuestData& operator=(PlayerQuestData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerQuestData& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerQuestData* internal_default_instance() {
    return reinterpret_cast<const PlayerQuestData*>(
               &_PlayerQuestData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(PlayerQuestData& a, PlayerQuestData& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerQuestData* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerQuestData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayerQuestData* New() const final {
    return new PlayerQuestData();
  }

  PlayerQuestData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerQuestData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerQuestData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PlayerQuestData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerQuestData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlayerQuestData";
  }
  protected:
  explicit PlayerQuestData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PlayerQuestData_QuestItemData QuestItemData;

  // accessors -------------------------------------------------------

  enum : int {
    kQuestItemDataFieldNumber = 2,
    kXpProgressDataFieldNumber = 3,
    kItemUpdatesFieldNumber = 6,
    kQuesterAccountIdFieldNumber = 1,
    kTimePlayedFieldNumber = 4,
    kMmGameModeFieldNumber = 5,
  };
  // repeated .PlayerQuestData.QuestItemData quest_item_data = 2;
  int quest_item_data_size() const;
  private:
  int _internal_quest_item_data_size() const;
  public:
  void clear_quest_item_data();
  ::PlayerQuestData_QuestItemData* mutable_quest_item_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlayerQuestData_QuestItemData >*
      mutable_quest_item_data();
  private:
  const ::PlayerQuestData_QuestItemData& _internal_quest_item_data(int index) const;
  ::PlayerQuestData_QuestItemData* _internal_add_quest_item_data();
  public:
  const ::PlayerQuestData_QuestItemData& quest_item_data(int index) const;
  ::PlayerQuestData_QuestItemData* add_quest_item_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlayerQuestData_QuestItemData >&
      quest_item_data() const;

  // repeated .XpProgressData xp_progress_data = 3;
  int xp_progress_data_size() const;
  private:
  int _internal_xp_progress_data_size() const;
  public:
  void clear_xp_progress_data();
  ::XpProgressData* mutable_xp_progress_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XpProgressData >*
      mutable_xp_progress_data();
  private:
  const ::XpProgressData& _internal_xp_progress_data(int index) const;
  ::XpProgressData* _internal_add_xp_progress_data();
  public:
  const ::XpProgressData& xp_progress_data(int index) const;
  ::XpProgressData* add_xp_progress_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XpProgressData >&
      xp_progress_data() const;

  // repeated .MatchEndItemUpdates item_updates = 6;
  int item_updates_size() const;
  private:
  int _internal_item_updates_size() const;
  public:
  void clear_item_updates();
  ::MatchEndItemUpdates* mutable_item_updates(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MatchEndItemUpdates >*
      mutable_item_updates();
  private:
  const ::MatchEndItemUpdates& _internal_item_updates(int index) const;
  ::MatchEndItemUpdates* _internal_add_item_updates();
  public:
  const ::MatchEndItemUpdates& item_updates(int index) const;
  ::MatchEndItemUpdates* add_item_updates();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MatchEndItemUpdates >&
      item_updates() const;

  // optional uint32 quester_account_id = 1;
  bool has_quester_account_id() const;
  private:
  bool _internal_has_quester_account_id() const;
  public:
  void clear_quester_account_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 quester_account_id() const;
  void set_quester_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_quester_account_id() const;
  void _internal_set_quester_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 time_played = 4;
  bool has_time_played() const;
  private:
  bool _internal_has_time_played() const;
  public:
  void clear_time_played();
  ::PROTOBUF_NAMESPACE_ID::uint32 time_played() const;
  void set_time_played(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_time_played() const;
  void _internal_set_time_played(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 mm_game_mode = 5;
  bool has_mm_game_mode() const;
  private:
  bool _internal_has_mm_game_mode() const;
  public:
  void clear_mm_game_mode();
  ::PROTOBUF_NAMESPACE_ID::uint32 mm_game_mode() const;
  void set_mm_game_mode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_mm_game_mode() const;
  void _internal_set_mm_game_mode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlayerQuestData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlayerQuestData_QuestItemData > quest_item_data_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XpProgressData > xp_progress_data_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MatchEndItemUpdates > item_updates_;
  ::PROTOBUF_NAMESPACE_ID::uint32 quester_account_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 time_played_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mm_game_mode_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGC_ServerQuestUpdateData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGC_ServerQuestUpdateData) */ {
 public:
  inline CMsgGC_ServerQuestUpdateData() : CMsgGC_ServerQuestUpdateData(nullptr) {}
  ~CMsgGC_ServerQuestUpdateData() override;
  explicit constexpr CMsgGC_ServerQuestUpdateData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGC_ServerQuestUpdateData(const CMsgGC_ServerQuestUpdateData& from);
  CMsgGC_ServerQuestUpdateData(CMsgGC_ServerQuestUpdateData&& from) noexcept
    : CMsgGC_ServerQuestUpdateData() {
    *this = ::std::move(from);
  }

  inline CMsgGC_ServerQuestUpdateData& operator=(const CMsgGC_ServerQuestUpdateData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGC_ServerQuestUpdateData& operator=(CMsgGC_ServerQuestUpdateData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGC_ServerQuestUpdateData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGC_ServerQuestUpdateData* internal_default_instance() {
    return reinterpret_cast<const CMsgGC_ServerQuestUpdateData*>(
               &_CMsgGC_ServerQuestUpdateData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(CMsgGC_ServerQuestUpdateData& a, CMsgGC_ServerQuestUpdateData& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGC_ServerQuestUpdateData* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGC_ServerQuestUpdateData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGC_ServerQuestUpdateData* New() const final {
    return new CMsgGC_ServerQuestUpdateData();
  }

  CMsgGC_ServerQuestUpdateData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGC_ServerQuestUpdateData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGC_ServerQuestUpdateData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgGC_ServerQuestUpdateData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGC_ServerQuestUpdateData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGC_ServerQuestUpdateData";
  }
  protected:
  explicit CMsgGC_ServerQuestUpdateData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerQuestDataFieldNumber = 1,
    kBinaryDataFieldNumber = 2,
    kMissionlbsdataFieldNumber = 4,
    kMmGameModeFieldNumber = 3,
  };
  // repeated .PlayerQuestData player_quest_data = 1;
  int player_quest_data_size() const;
  private:
  int _internal_player_quest_data_size() const;
  public:
  void clear_player_quest_data();
  ::PlayerQuestData* mutable_player_quest_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlayerQuestData >*
      mutable_player_quest_data();
  private:
  const ::PlayerQuestData& _internal_player_quest_data(int index) const;
  ::PlayerQuestData* _internal_add_player_quest_data();
  public:
  const ::PlayerQuestData& player_quest_data(int index) const;
  ::PlayerQuestData* add_player_quest_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlayerQuestData >&
      player_quest_data() const;

  // optional bytes binary_data = 2;
  bool has_binary_data() const;
  private:
  bool _internal_has_binary_data() const;
  public:
  void clear_binary_data();
  const std::string& binary_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_binary_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_binary_data();
  PROTOBUF_MUST_USE_RESULT std::string* release_binary_data();
  void set_allocated_binary_data(std::string* binary_data);
  private:
  const std::string& _internal_binary_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_binary_data(const std::string& value);
  std::string* _internal_mutable_binary_data();
  public:

  // optional .ScoreLeaderboardData missionlbsdata = 4;
  bool has_missionlbsdata() const;
  private:
  bool _internal_has_missionlbsdata() const;
  public:
  void clear_missionlbsdata();
  const ::ScoreLeaderboardData& missionlbsdata() const;
  PROTOBUF_MUST_USE_RESULT ::ScoreLeaderboardData* release_missionlbsdata();
  ::ScoreLeaderboardData* mutable_missionlbsdata();
  void set_allocated_missionlbsdata(::ScoreLeaderboardData* missionlbsdata);
  private:
  const ::ScoreLeaderboardData& _internal_missionlbsdata() const;
  ::ScoreLeaderboardData* _internal_mutable_missionlbsdata();
  public:
  void unsafe_arena_set_allocated_missionlbsdata(
      ::ScoreLeaderboardData* missionlbsdata);
  ::ScoreLeaderboardData* unsafe_arena_release_missionlbsdata();

  // optional uint32 mm_game_mode = 3;
  bool has_mm_game_mode() const;
  private:
  bool _internal_has_mm_game_mode() const;
  public:
  void clear_mm_game_mode();
  ::PROTOBUF_NAMESPACE_ID::uint32 mm_game_mode() const;
  void set_mm_game_mode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_mm_game_mode() const;
  void _internal_set_mm_game_mode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGC_ServerQuestUpdateData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlayerQuestData > player_quest_data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr binary_data_;
  ::ScoreLeaderboardData* missionlbsdata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mm_game_mode_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_MatchmakingGCOperationalStats final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCCStrike15_v2_MatchmakingGCOperationalStats) */ {
 public:
  inline CMsgGCCStrike15_v2_MatchmakingGCOperationalStats() : CMsgGCCStrike15_v2_MatchmakingGCOperationalStats(nullptr) {}
  ~CMsgGCCStrike15_v2_MatchmakingGCOperationalStats() override;
  explicit constexpr CMsgGCCStrike15_v2_MatchmakingGCOperationalStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCCStrike15_v2_MatchmakingGCOperationalStats(const CMsgGCCStrike15_v2_MatchmakingGCOperationalStats& from);
  CMsgGCCStrike15_v2_MatchmakingGCOperationalStats(CMsgGCCStrike15_v2_MatchmakingGCOperationalStats&& from) noexcept
    : CMsgGCCStrike15_v2_MatchmakingGCOperationalStats() {
    *this = ::std::move(from);
  }

  inline CMsgGCCStrike15_v2_MatchmakingGCOperationalStats& operator=(const CMsgGCCStrike15_v2_MatchmakingGCOperationalStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCCStrike15_v2_MatchmakingGCOperationalStats& operator=(CMsgGCCStrike15_v2_MatchmakingGCOperationalStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCCStrike15_v2_MatchmakingGCOperationalStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCCStrike15_v2_MatchmakingGCOperationalStats* internal_default_instance() {
    return reinterpret_cast<const CMsgGCCStrike15_v2_MatchmakingGCOperationalStats*>(
               &_CMsgGCCStrike15_v2_MatchmakingGCOperationalStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(CMsgGCCStrike15_v2_MatchmakingGCOperationalStats& a, CMsgGCCStrike15_v2_MatchmakingGCOperationalStats& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCCStrike15_v2_MatchmakingGCOperationalStats* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCCStrike15_v2_MatchmakingGCOperationalStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCCStrike15_v2_MatchmakingGCOperationalStats* New() const final {
    return new CMsgGCCStrike15_v2_MatchmakingGCOperationalStats();
  }

  CMsgGCCStrike15_v2_MatchmakingGCOperationalStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCCStrike15_v2_MatchmakingGCOperationalStats>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCCStrike15_v2_MatchmakingGCOperationalStats& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgGCCStrike15_v2_MatchmakingGCOperationalStats& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCCStrike15_v2_MatchmakingGCOperationalStats* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCCStrike15_v2_MatchmakingGCOperationalStats";
  }
  protected:
  explicit CMsgGCCStrike15_v2_MatchmakingGCOperationalStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNamekeysFieldNumber = 2,
    kPacketsFieldNumber = 3,
    kPacketidFieldNumber = 1,
  };
  // repeated .OperationalStatisticDescription namekeys = 2;
  int namekeys_size() const;
  private:
  int _internal_namekeys_size() const;
  public:
  void clear_namekeys();
  ::OperationalStatisticDescription* mutable_namekeys(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OperationalStatisticDescription >*
      mutable_namekeys();
  private:
  const ::OperationalStatisticDescription& _internal_namekeys(int index) const;
  ::OperationalStatisticDescription* _internal_add_namekeys();
  public:
  const ::OperationalStatisticDescription& namekeys(int index) const;
  ::OperationalStatisticDescription* add_namekeys();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OperationalStatisticDescription >&
      namekeys() const;

  // repeated .OperationalStatisticsPacket packets = 3;
  int packets_size() const;
  private:
  int _internal_packets_size() const;
  public:
  void clear_packets();
  ::OperationalStatisticsPacket* mutable_packets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OperationalStatisticsPacket >*
      mutable_packets();
  private:
  const ::OperationalStatisticsPacket& _internal_packets(int index) const;
  ::OperationalStatisticsPacket* _internal_add_packets();
  public:
  const ::OperationalStatisticsPacket& packets(int index) const;
  ::OperationalStatisticsPacket* add_packets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OperationalStatisticsPacket >&
      packets() const;

  // optional int32 packetid = 1;
  bool has_packetid() const;
  private:
  bool _internal_has_packetid() const;
  public:
  void clear_packetid();
  ::PROTOBUF_NAMESPACE_ID::int32 packetid() const;
  void set_packetid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_packetid() const;
  void _internal_set_packetid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_MatchmakingGCOperationalStats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OperationalStatisticDescription > namekeys_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OperationalStatisticsPacket > packets_;
  ::PROTOBUF_NAMESPACE_ID::int32 packetid_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm) */ {
 public:
  inline CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm() : CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm(nullptr) {}
  ~CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm() override;
  explicit constexpr CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm(const CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm& from);
  CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm(CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm&& from) noexcept
    : CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm() {
    *this = ::std::move(from);
  }

  inline CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm& operator=(const CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm& operator=(CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm* internal_default_instance() {
    return reinterpret_cast<const CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm*>(
               &_CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm& a, CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm* New() const final {
    return new CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm();
  }

  CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm";
  }
  protected:
  explicit CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
    kStampFieldNumber = 2,
    kExchangeFieldNumber = 3,
  };
  // optional uint32 token = 1;
  bool has_token() const;
  private:
  bool _internal_has_token() const;
  public:
  void clear_token();
  ::PROTOBUF_NAMESPACE_ID::uint32 token() const;
  void set_token(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_token() const;
  void _internal_set_token(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 stamp = 2;
  bool has_stamp() const;
  private:
  bool _internal_has_stamp() const;
  public:
  void clear_stamp();
  ::PROTOBUF_NAMESPACE_ID::uint32 stamp() const;
  void set_stamp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_stamp() const;
  void _internal_set_stamp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint64 exchange = 3;
  bool has_exchange() const;
  private:
  bool _internal_has_exchange() const;
  public:
  void clear_exchange();
  ::PROTOBUF_NAMESPACE_ID::uint64 exchange() const;
  void set_exchange(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_exchange() const;
  void _internal_set_exchange(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 token_;
  ::PROTOBUF_NAMESPACE_ID::uint32 stamp_;
  ::PROTOBUF_NAMESPACE_ID::uint64 exchange_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_GC2ServerReservationUpdate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCCStrike15_v2_GC2ServerReservationUpdate) */ {
 public:
  inline CMsgGCCStrike15_v2_GC2ServerReservationUpdate() : CMsgGCCStrike15_v2_GC2ServerReservationUpdate(nullptr) {}
  ~CMsgGCCStrike15_v2_GC2ServerReservationUpdate() override;
  explicit constexpr CMsgGCCStrike15_v2_GC2ServerReservationUpdate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCCStrike15_v2_GC2ServerReservationUpdate(const CMsgGCCStrike15_v2_GC2ServerReservationUpdate& from);
  CMsgGCCStrike15_v2_GC2ServerReservationUpdate(CMsgGCCStrike15_v2_GC2ServerReservationUpdate&& from) noexcept
    : CMsgGCCStrike15_v2_GC2ServerReservationUpdate() {
    *this = ::std::move(from);
  }

  inline CMsgGCCStrike15_v2_GC2ServerReservationUpdate& operator=(const CMsgGCCStrike15_v2_GC2ServerReservationUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCCStrike15_v2_GC2ServerReservationUpdate& operator=(CMsgGCCStrike15_v2_GC2ServerReservationUpdate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCCStrike15_v2_GC2ServerReservationUpdate& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCCStrike15_v2_GC2ServerReservationUpdate* internal_default_instance() {
    return reinterpret_cast<const CMsgGCCStrike15_v2_GC2ServerReservationUpdate*>(
               &_CMsgGCCStrike15_v2_GC2ServerReservationUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(CMsgGCCStrike15_v2_GC2ServerReservationUpdate& a, CMsgGCCStrike15_v2_GC2ServerReservationUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCCStrike15_v2_GC2ServerReservationUpdate* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCCStrike15_v2_GC2ServerReservationUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCCStrike15_v2_GC2ServerReservationUpdate* New() const final {
    return new CMsgGCCStrike15_v2_GC2ServerReservationUpdate();
  }

  CMsgGCCStrike15_v2_GC2ServerReservationUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCCStrike15_v2_GC2ServerReservationUpdate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCCStrike15_v2_GC2ServerReservationUpdate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgGCCStrike15_v2_GC2ServerReservationUpdate& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCCStrike15_v2_GC2ServerReservationUpdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCCStrike15_v2_GC2ServerReservationUpdate";
  }
  protected:
  explicit CMsgGCCStrike15_v2_GC2ServerReservationUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kViewersExternalTotalFieldNumber = 1,
    kViewersExternalSteamFieldNumber = 2,
  };
  // optional uint32 viewers_external_total = 1;
  bool has_viewers_external_total() const;
  private:
  bool _internal_has_viewers_external_total() const;
  public:
  void clear_viewers_external_total();
  ::PROTOBUF_NAMESPACE_ID::uint32 viewers_external_total() const;
  void set_viewers_external_total(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_viewers_external_total() const;
  void _internal_set_viewers_external_total(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 viewers_external_steam = 2;
  bool has_viewers_external_steam() const;
  private:
  bool _internal_has_viewers_external_steam() const;
  public:
  void clear_viewers_external_steam();
  ::PROTOBUF_NAMESPACE_ID::uint32 viewers_external_steam() const;
  void set_viewers_external_steam(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_viewers_external_steam() const;
  void _internal_set_viewers_external_steam(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_GC2ServerReservationUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 viewers_external_total_;
  ::PROTOBUF_NAMESPACE_ID::uint32 viewers_external_steam_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_MatchmakingStart final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCCStrike15_v2_MatchmakingStart) */ {
 public:
  inline CMsgGCCStrike15_v2_MatchmakingStart() : CMsgGCCStrike15_v2_MatchmakingStart(nullptr) {}
  ~CMsgGCCStrike15_v2_MatchmakingStart() override;
  explicit constexpr CMsgGCCStrike15_v2_MatchmakingStart(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCCStrike15_v2_MatchmakingStart(const CMsgGCCStrike15_v2_MatchmakingStart& from);
  CMsgGCCStrike15_v2_MatchmakingStart(CMsgGCCStrike15_v2_MatchmakingStart&& from) noexcept
    : CMsgGCCStrike15_v2_MatchmakingStart() {
    *this = ::std::move(from);
  }

  inline CMsgGCCStrike15_v2_MatchmakingStart& operator=(const CMsgGCCStrike15_v2_MatchmakingStart& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCCStrike15_v2_MatchmakingStart& operator=(CMsgGCCStrike15_v2_MatchmakingStart&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCCStrike15_v2_MatchmakingStart& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCCStrike15_v2_MatchmakingStart* internal_default_instance() {
    return reinterpret_cast<const CMsgGCCStrike15_v2_MatchmakingStart*>(
               &_CMsgGCCStrike15_v2_MatchmakingStart_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(CMsgGCCStrike15_v2_MatchmakingStart& a, CMsgGCCStrike15_v2_MatchmakingStart& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCCStrike15_v2_MatchmakingStart* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCCStrike15_v2_MatchmakingStart* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCCStrike15_v2_MatchmakingStart* New() const final {
    return new CMsgGCCStrike15_v2_MatchmakingStart();
  }

  CMsgGCCStrike15_v2_MatchmakingStart* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCCStrike15_v2_MatchmakingStart>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCCStrike15_v2_MatchmakingStart& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgGCCStrike15_v2_MatchmakingStart& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCCStrike15_v2_MatchmakingStart* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCCStrike15_v2_MatchmakingStart";
  }
  protected:
  explicit CMsgGCCStrike15_v2_MatchmakingStart(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdsFieldNumber = 1,
    kTicketDataFieldNumber = 3,
    kTournamentMatchFieldNumber = 5,
    kGameTypeFieldNumber = 2,
    kClientVersionFieldNumber = 4,
    kPrimeOnlyFieldNumber = 6,
  };
  // repeated uint32 account_ids = 1;
  int account_ids_size() const;
  private:
  int _internal_account_ids_size() const;
  public:
  void clear_account_ids();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_account_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_account_ids() const;
  void _internal_add_account_ids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_account_ids();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 account_ids(int index) const;
  void set_account_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_account_ids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      account_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_account_ids();

  // optional string ticket_data = 3;
  bool has_ticket_data() const;
  private:
  bool _internal_has_ticket_data() const;
  public:
  void clear_ticket_data();
  const std::string& ticket_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ticket_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ticket_data();
  PROTOBUF_MUST_USE_RESULT std::string* release_ticket_data();
  void set_allocated_ticket_data(std::string* ticket_data);
  private:
  const std::string& _internal_ticket_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ticket_data(const std::string& value);
  std::string* _internal_mutable_ticket_data();
  public:

  // optional .TournamentMatchSetup tournament_match = 5;
  bool has_tournament_match() const;
  private:
  bool _internal_has_tournament_match() const;
  public:
  void clear_tournament_match();
  const ::TournamentMatchSetup& tournament_match() const;
  PROTOBUF_MUST_USE_RESULT ::TournamentMatchSetup* release_tournament_match();
  ::TournamentMatchSetup* mutable_tournament_match();
  void set_allocated_tournament_match(::TournamentMatchSetup* tournament_match);
  private:
  const ::TournamentMatchSetup& _internal_tournament_match() const;
  ::TournamentMatchSetup* _internal_mutable_tournament_match();
  public:
  void unsafe_arena_set_allocated_tournament_match(
      ::TournamentMatchSetup* tournament_match);
  ::TournamentMatchSetup* unsafe_arena_release_tournament_match();

  // optional uint32 game_type = 2;
  bool has_game_type() const;
  private:
  bool _internal_has_game_type() const;
  public:
  void clear_game_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 game_type() const;
  void set_game_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_game_type() const;
  void _internal_set_game_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 client_version = 4;
  bool has_client_version() const;
  private:
  bool _internal_has_client_version() const;
  public:
  void clear_client_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 client_version() const;
  void set_client_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_client_version() const;
  void _internal_set_client_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool prime_only = 6;
  bool has_prime_only() const;
  private:
  bool _internal_has_prime_only() const;
  public:
  void clear_prime_only();
  bool prime_only() const;
  void set_prime_only(bool value);
  private:
  bool _internal_prime_only() const;
  void _internal_set_prime_only(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_MatchmakingStart)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > account_ids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ticket_data_;
  ::TournamentMatchSetup* tournament_match_;
  ::PROTOBUF_NAMESPACE_ID::uint32 game_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 client_version_;
  bool prime_only_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_MatchmakingStop final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCCStrike15_v2_MatchmakingStop) */ {
 public:
  inline CMsgGCCStrike15_v2_MatchmakingStop() : CMsgGCCStrike15_v2_MatchmakingStop(nullptr) {}
  ~CMsgGCCStrike15_v2_MatchmakingStop() override;
  explicit constexpr CMsgGCCStrike15_v2_MatchmakingStop(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCCStrike15_v2_MatchmakingStop(const CMsgGCCStrike15_v2_MatchmakingStop& from);
  CMsgGCCStrike15_v2_MatchmakingStop(CMsgGCCStrike15_v2_MatchmakingStop&& from) noexcept
    : CMsgGCCStrike15_v2_MatchmakingStop() {
    *this = ::std::move(from);
  }

  inline CMsgGCCStrike15_v2_MatchmakingStop& operator=(const CMsgGCCStrike15_v2_MatchmakingStop& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCCStrike15_v2_MatchmakingStop& operator=(CMsgGCCStrike15_v2_MatchmakingStop&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCCStrike15_v2_MatchmakingStop& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCCStrike15_v2_MatchmakingStop* internal_default_instance() {
    return reinterpret_cast<const CMsgGCCStrike15_v2_MatchmakingStop*>(
               &_CMsgGCCStrike15_v2_MatchmakingStop_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(CMsgGCCStrike15_v2_MatchmakingStop& a, CMsgGCCStrike15_v2_MatchmakingStop& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCCStrike15_v2_MatchmakingStop* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCCStrike15_v2_MatchmakingStop* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCCStrike15_v2_MatchmakingStop* New() const final {
    return new CMsgGCCStrike15_v2_MatchmakingStop();
  }

  CMsgGCCStrike15_v2_MatchmakingStop* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCCStrike15_v2_MatchmakingStop>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCCStrike15_v2_MatchmakingStop& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgGCCStrike15_v2_MatchmakingStop& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCCStrike15_v2_MatchmakingStop* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCCStrike15_v2_MatchmakingStop";
  }
  protected:
  explicit CMsgGCCStrike15_v2_MatchmakingStop(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAbandonFieldNumber = 1,
  };
  // optional int32 abandon = 1;
  bool has_abandon() const;
  private:
  bool _internal_has_abandon() const;
  public:
  void clear_abandon();
  ::PROTOBUF_NAMESPACE_ID::int32 abandon() const;
  void set_abandon(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_abandon() const;
  void _internal_set_abandon(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_MatchmakingStop)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 abandon_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_MatchmakingClient2ServerPing final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCCStrike15_v2_MatchmakingClient2ServerPing) */ {
 public:
  inline CMsgGCCStrike15_v2_MatchmakingClient2ServerPing() : CMsgGCCStrike15_v2_MatchmakingClient2ServerPing(nullptr) {}
  ~CMsgGCCStrike15_v2_MatchmakingClient2ServerPing() override;
  explicit constexpr CMsgGCCStrike15_v2_MatchmakingClient2ServerPing(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCCStrike15_v2_MatchmakingClient2ServerPing(const CMsgGCCStrike15_v2_MatchmakingClient2ServerPing& from);
  CMsgGCCStrike15_v2_MatchmakingClient2ServerPing(CMsgGCCStrike15_v2_MatchmakingClient2ServerPing&& from) noexcept
    : CMsgGCCStrike15_v2_MatchmakingClient2ServerPing() {
    *this = ::std::move(from);
  }

  inline CMsgGCCStrike15_v2_MatchmakingClient2ServerPing& operator=(const CMsgGCCStrike15_v2_MatchmakingClient2ServerPing& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCCStrike15_v2_MatchmakingClient2ServerPing& operator=(CMsgGCCStrike15_v2_MatchmakingClient2ServerPing&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCCStrike15_v2_MatchmakingClient2ServerPing& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCCStrike15_v2_MatchmakingClient2ServerPing* internal_default_instance() {
    return reinterpret_cast<const CMsgGCCStrike15_v2_MatchmakingClient2ServerPing*>(
               &_CMsgGCCStrike15_v2_MatchmakingClient2ServerPing_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(CMsgGCCStrike15_v2_MatchmakingClient2ServerPing& a, CMsgGCCStrike15_v2_MatchmakingClient2ServerPing& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCCStrike15_v2_MatchmakingClient2ServerPing* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCCStrike15_v2_MatchmakingClient2ServerPing* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCCStrike15_v2_MatchmakingClient2ServerPing* New() const final {
    return new CMsgGCCStrike15_v2_MatchmakingClient2ServerPing();
  }

  CMsgGCCStrike15_v2_MatchmakingClient2ServerPing* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCCStrike15_v2_MatchmakingClient2ServerPing>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCCStrike15_v2_MatchmakingClient2ServerPing& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgGCCStrike15_v2_MatchmakingClient2ServerPing& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCCStrike15_v2_MatchmakingClient2ServerPing* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCCStrike15_v2_MatchmakingClient2ServerPing";
  }
  protected:
  explicit CMsgGCCStrike15_v2_MatchmakingClient2ServerPing(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameserverpingsFieldNumber = 1,
    kDataCenterPingsFieldNumber = 4,
    kOffsetIndexFieldNumber = 2,
    kFinalBatchFieldNumber = 3,
    kMaxPingFieldNumber = 5,
  };
  // repeated .GameServerPing gameserverpings = 1;
  int gameserverpings_size() const;
  private:
  int _internal_gameserverpings_size() const;
  public:
  void clear_gameserverpings();
  ::GameServerPing* mutable_gameserverpings(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GameServerPing >*
      mutable_gameserverpings();
  private:
  const ::GameServerPing& _internal_gameserverpings(int index) const;
  ::GameServerPing* _internal_add_gameserverpings();
  public:
  const ::GameServerPing& gameserverpings(int index) const;
  ::GameServerPing* add_gameserverpings();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GameServerPing >&
      gameserverpings() const;

  // repeated .DataCenterPing data_center_pings = 4;
  int data_center_pings_size() const;
  private:
  int _internal_data_center_pings_size() const;
  public:
  void clear_data_center_pings();
  ::DataCenterPing* mutable_data_center_pings(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DataCenterPing >*
      mutable_data_center_pings();
  private:
  const ::DataCenterPing& _internal_data_center_pings(int index) const;
  ::DataCenterPing* _internal_add_data_center_pings();
  public:
  const ::DataCenterPing& data_center_pings(int index) const;
  ::DataCenterPing* add_data_center_pings();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DataCenterPing >&
      data_center_pings() const;

  // optional int32 offset_index = 2;
  bool has_offset_index() const;
  private:
  bool _internal_has_offset_index() const;
  public:
  void clear_offset_index();
  ::PROTOBUF_NAMESPACE_ID::int32 offset_index() const;
  void set_offset_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_offset_index() const;
  void _internal_set_offset_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 final_batch = 3;
  bool has_final_batch() const;
  private:
  bool _internal_has_final_batch() const;
  public:
  void clear_final_batch();
  ::PROTOBUF_NAMESPACE_ID::int32 final_batch() const;
  void set_final_batch(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_final_batch() const;
  void _internal_set_final_batch(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint32 max_ping = 5;
  bool has_max_ping() const;
  private:
  bool _internal_has_max_ping() const;
  public:
  void clear_max_ping();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_ping() const;
  void set_max_ping(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_ping() const;
  void _internal_set_max_ping(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_MatchmakingClient2ServerPing)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GameServerPing > gameserverpings_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DataCenterPing > data_center_pings_;
  ::PROTOBUF_NAMESPACE_ID::int32 offset_index_;
  ::PROTOBUF_NAMESPACE_ID::int32 final_batch_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_ping_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.Note) */ {
 public:
  inline CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note() : CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note(nullptr) {}
  ~CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note() override;
  explicit constexpr CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note(const CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note& from);
  CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note(CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note&& from) noexcept
    : CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note() {
    *this = ::std::move(from);
  }

  inline CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note& operator=(const CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note& operator=(CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note* internal_default_instance() {
    return reinterpret_cast<const CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note*>(
               &_CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note& a, CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note* New() const final {
    return new CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note();
  }

  CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.Note";
  }
  protected:
  explicit CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kRegionIdFieldNumber = 2,
    kRegionRFieldNumber = 3,
    kDistanceFieldNumber = 4,
  };
  // optional int32 type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 region_id = 2;
  bool has_region_id() const;
  private:
  bool _internal_has_region_id() const;
  public:
  void clear_region_id();
  ::PROTOBUF_NAMESPACE_ID::int32 region_id() const;
  void set_region_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_region_id() const;
  void _internal_set_region_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float region_r = 3;
  bool has_region_r() const;
  private:
  bool _internal_has_region_r() const;
  public:
  void clear_region_r();
  float region_r() const;
  void set_region_r(float value);
  private:
  float _internal_region_r() const;
  void _internal_set_region_r(float value);
  public:

  // optional float distance = 4;
  bool has_distance() const;
  private:
  bool _internal_has_distance() const;
  public:
  void clear_distance();
  float distance() const;
  void set_distance(float value);
  private:
  float _internal_distance() const;
  void _internal_set_distance(float value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.Note)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::int32 region_id_;
  float region_r_;
  float distance_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate) */ {
 public:
  inline CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate() : CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate(nullptr) {}
  ~CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate() override;
  explicit constexpr CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate(const CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate& from);
  CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate(CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate&& from) noexcept
    : CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate() {
    *this = ::std::move(from);
  }

  inline CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate& operator=(const CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate& operator=(CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate* internal_default_instance() {
    return reinterpret_cast<const CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate*>(
               &_CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate& a, CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate* New() const final {
    return new CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate();
  }

  CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate";
  }
  protected:
  explicit CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note Note;

  // accessors -------------------------------------------------------

  enum : int {
    kWaitingAccountIdSessionsFieldNumber = 2,
    kOngoingmatchAccountIdSessionsFieldNumber = 6,
    kFailpingAccountIdSessionsFieldNumber = 8,
    kPenaltyAccountIdSessionsFieldNumber = 9,
    kFailreadyAccountIdSessionsFieldNumber = 10,
    kVacbannedAccountIdSessionsFieldNumber = 11,
    kNotesFieldNumber = 13,
    kPenaltyAccountIdSessionsGreenFieldNumber = 14,
    kInsufficientlevelSessionsFieldNumber = 15,
    kVsncheckAccountIdSessionsFieldNumber = 16,
    kLauncherMismatchSessionsFieldNumber = 17,
    kErrorFieldNumber = 3,
    kGlobalStatsFieldNumber = 7,
    kServerIpaddressMaskFieldNumber = 12,
    kMatchmakingFieldNumber = 1,
  };
  // repeated uint32 waiting_account_id_sessions = 2;
  int waiting_account_id_sessions_size() const;
  private:
  int _internal_waiting_account_id_sessions_size() const;
  public:
  void clear_waiting_account_id_sessions();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_waiting_account_id_sessions(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_waiting_account_id_sessions() const;
  void _internal_add_waiting_account_id_sessions(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_waiting_account_id_sessions();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 waiting_account_id_sessions(int index) const;
  void set_waiting_account_id_sessions(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_waiting_account_id_sessions(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      waiting_account_id_sessions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_waiting_account_id_sessions();

  // repeated uint32 ongoingmatch_account_id_sessions = 6;
  int ongoingmatch_account_id_sessions_size() const;
  private:
  int _internal_ongoingmatch_account_id_sessions_size() const;
  public:
  void clear_ongoingmatch_account_id_sessions();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ongoingmatch_account_id_sessions(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_ongoingmatch_account_id_sessions() const;
  void _internal_add_ongoingmatch_account_id_sessions(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_ongoingmatch_account_id_sessions();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 ongoingmatch_account_id_sessions(int index) const;
  void set_ongoingmatch_account_id_sessions(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_ongoingmatch_account_id_sessions(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      ongoingmatch_account_id_sessions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_ongoingmatch_account_id_sessions();

  // repeated uint32 failping_account_id_sessions = 8;
  int failping_account_id_sessions_size() const;
  private:
  int _internal_failping_account_id_sessions_size() const;
  public:
  void clear_failping_account_id_sessions();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_failping_account_id_sessions(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_failping_account_id_sessions() const;
  void _internal_add_failping_account_id_sessions(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_failping_account_id_sessions();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 failping_account_id_sessions(int index) const;
  void set_failping_account_id_sessions(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_failping_account_id_sessions(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      failping_account_id_sessions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_failping_account_id_sessions();

  // repeated uint32 penalty_account_id_sessions = 9;
  int penalty_account_id_sessions_size() const;
  private:
  int _internal_penalty_account_id_sessions_size() const;
  public:
  void clear_penalty_account_id_sessions();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_penalty_account_id_sessions(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_penalty_account_id_sessions() const;
  void _internal_add_penalty_account_id_sessions(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_penalty_account_id_sessions();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 penalty_account_id_sessions(int index) const;
  void set_penalty_account_id_sessions(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_penalty_account_id_sessions(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      penalty_account_id_sessions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_penalty_account_id_sessions();

  // repeated uint32 failready_account_id_sessions = 10;
  int failready_account_id_sessions_size() const;
  private:
  int _internal_failready_account_id_sessions_size() const;
  public:
  void clear_failready_account_id_sessions();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_failready_account_id_sessions(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_failready_account_id_sessions() const;
  void _internal_add_failready_account_id_sessions(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_failready_account_id_sessions();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 failready_account_id_sessions(int index) const;
  void set_failready_account_id_sessions(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_failready_account_id_sessions(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      failready_account_id_sessions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_failready_account_id_sessions();

  // repeated uint32 vacbanned_account_id_sessions = 11;
  int vacbanned_account_id_sessions_size() const;
  private:
  int _internal_vacbanned_account_id_sessions_size() const;
  public:
  void clear_vacbanned_account_id_sessions();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_vacbanned_account_id_sessions(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_vacbanned_account_id_sessions() const;
  void _internal_add_vacbanned_account_id_sessions(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_vacbanned_account_id_sessions();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 vacbanned_account_id_sessions(int index) const;
  void set_vacbanned_account_id_sessions(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_vacbanned_account_id_sessions(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      vacbanned_account_id_sessions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_vacbanned_account_id_sessions();

  // repeated .CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.Note notes = 13;
  int notes_size() const;
  private:
  int _internal_notes_size() const;
  public:
  void clear_notes();
  ::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note* mutable_notes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note >*
      mutable_notes();
  private:
  const ::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note& _internal_notes(int index) const;
  ::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note* _internal_add_notes();
  public:
  const ::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note& notes(int index) const;
  ::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note* add_notes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note >&
      notes() const;

  // repeated uint32 penalty_account_id_sessions_green = 14;
  int penalty_account_id_sessions_green_size() const;
  private:
  int _internal_penalty_account_id_sessions_green_size() const;
  public:
  void clear_penalty_account_id_sessions_green();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_penalty_account_id_sessions_green(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_penalty_account_id_sessions_green() const;
  void _internal_add_penalty_account_id_sessions_green(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_penalty_account_id_sessions_green();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 penalty_account_id_sessions_green(int index) const;
  void set_penalty_account_id_sessions_green(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_penalty_account_id_sessions_green(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      penalty_account_id_sessions_green() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_penalty_account_id_sessions_green();

  // repeated uint32 insufficientlevel_sessions = 15;
  int insufficientlevel_sessions_size() const;
  private:
  int _internal_insufficientlevel_sessions_size() const;
  public:
  void clear_insufficientlevel_sessions();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_insufficientlevel_sessions(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_insufficientlevel_sessions() const;
  void _internal_add_insufficientlevel_sessions(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_insufficientlevel_sessions();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 insufficientlevel_sessions(int index) const;
  void set_insufficientlevel_sessions(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_insufficientlevel_sessions(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      insufficientlevel_sessions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_insufficientlevel_sessions();

  // repeated uint32 vsncheck_account_id_sessions = 16;
  int vsncheck_account_id_sessions_size() const;
  private:
  int _internal_vsncheck_account_id_sessions_size() const;
  public:
  void clear_vsncheck_account_id_sessions();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_vsncheck_account_id_sessions(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_vsncheck_account_id_sessions() const;
  void _internal_add_vsncheck_account_id_sessions(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_vsncheck_account_id_sessions();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 vsncheck_account_id_sessions(int index) const;
  void set_vsncheck_account_id_sessions(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_vsncheck_account_id_sessions(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      vsncheck_account_id_sessions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_vsncheck_account_id_sessions();

  // repeated uint32 launcher_mismatch_sessions = 17;
  int launcher_mismatch_sessions_size() const;
  private:
  int _internal_launcher_mismatch_sessions_size() const;
  public:
  void clear_launcher_mismatch_sessions();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_launcher_mismatch_sessions(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_launcher_mismatch_sessions() const;
  void _internal_add_launcher_mismatch_sessions(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_launcher_mismatch_sessions();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 launcher_mismatch_sessions(int index) const;
  void set_launcher_mismatch_sessions(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_launcher_mismatch_sessions(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      launcher_mismatch_sessions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_launcher_mismatch_sessions();

  // optional string error = 3;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const std::string& error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error();
  PROTOBUF_MUST_USE_RESULT std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // optional .GlobalStatistics global_stats = 7;
  bool has_global_stats() const;
  private:
  bool _internal_has_global_stats() const;
  public:
  void clear_global_stats();
  const ::GlobalStatistics& global_stats() const;
  PROTOBUF_MUST_USE_RESULT ::GlobalStatistics* release_global_stats();
  ::GlobalStatistics* mutable_global_stats();
  void set_allocated_global_stats(::GlobalStatistics* global_stats);
  private:
  const ::GlobalStatistics& _internal_global_stats() const;
  ::GlobalStatistics* _internal_mutable_global_stats();
  public:
  void unsafe_arena_set_allocated_global_stats(
      ::GlobalStatistics* global_stats);
  ::GlobalStatistics* unsafe_arena_release_global_stats();

  // optional .IpAddressMask server_ipaddress_mask = 12;
  bool has_server_ipaddress_mask() const;
  private:
  bool _internal_has_server_ipaddress_mask() const;
  public:
  void clear_server_ipaddress_mask();
  const ::IpAddressMask& server_ipaddress_mask() const;
  PROTOBUF_MUST_USE_RESULT ::IpAddressMask* release_server_ipaddress_mask();
  ::IpAddressMask* mutable_server_ipaddress_mask();
  void set_allocated_server_ipaddress_mask(::IpAddressMask* server_ipaddress_mask);
  private:
  const ::IpAddressMask& _internal_server_ipaddress_mask() const;
  ::IpAddressMask* _internal_mutable_server_ipaddress_mask();
  public:
  void unsafe_arena_set_allocated_server_ipaddress_mask(
      ::IpAddressMask* server_ipaddress_mask);
  ::IpAddressMask* unsafe_arena_release_server_ipaddress_mask();

  // optional int32 matchmaking = 1;
  bool has_matchmaking() const;
  private:
  bool _internal_has_matchmaking() const;
  public:
  void clear_matchmaking();
  ::PROTOBUF_NAMESPACE_ID::int32 matchmaking() const;
  void set_matchmaking(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_matchmaking() const;
  void _internal_set_matchmaking(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > waiting_account_id_sessions_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > ongoingmatch_account_id_sessions_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > failping_account_id_sessions_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > penalty_account_id_sessions_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > failready_account_id_sessions_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > vacbanned_account_id_sessions_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note > notes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > penalty_account_id_sessions_green_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > insufficientlevel_sessions_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > vsncheck_account_id_sessions_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > launcher_mismatch_sessions_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  ::GlobalStatistics* global_stats_;
  ::IpAddressMask* server_ipaddress_mask_;
  ::PROTOBUF_NAMESPACE_ID::int32 matchmaking_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CDataGCCStrike15_v2_TournamentMatchDraft_Entry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDataGCCStrike15_v2_TournamentMatchDraft.Entry) */ {
 public:
  inline CDataGCCStrike15_v2_TournamentMatchDraft_Entry() : CDataGCCStrike15_v2_TournamentMatchDraft_Entry(nullptr) {}
  ~CDataGCCStrike15_v2_TournamentMatchDraft_Entry() override;
  explicit constexpr CDataGCCStrike15_v2_TournamentMatchDraft_Entry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDataGCCStrike15_v2_TournamentMatchDraft_Entry(const CDataGCCStrike15_v2_TournamentMatchDraft_Entry& from);
  CDataGCCStrike15_v2_TournamentMatchDraft_Entry(CDataGCCStrike15_v2_TournamentMatchDraft_Entry&& from) noexcept
    : CDataGCCStrike15_v2_TournamentMatchDraft_Entry() {
    *this = ::std::move(from);
  }

  inline CDataGCCStrike15_v2_TournamentMatchDraft_Entry& operator=(const CDataGCCStrike15_v2_TournamentMatchDraft_Entry& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDataGCCStrike15_v2_TournamentMatchDraft_Entry& operator=(CDataGCCStrike15_v2_TournamentMatchDraft_Entry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDataGCCStrike15_v2_TournamentMatchDraft_Entry& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDataGCCStrike15_v2_TournamentMatchDraft_Entry* internal_default_instance() {
    return reinterpret_cast<const CDataGCCStrike15_v2_TournamentMatchDraft_Entry*>(
               &_CDataGCCStrike15_v2_TournamentMatchDraft_Entry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(CDataGCCStrike15_v2_TournamentMatchDraft_Entry& a, CDataGCCStrike15_v2_TournamentMatchDraft_Entry& b) {
    a.Swap(&b);
  }
  inline void Swap(CDataGCCStrike15_v2_TournamentMatchDraft_Entry* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDataGCCStrike15_v2_TournamentMatchDraft_Entry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CDataGCCStrike15_v2_TournamentMatchDraft_Entry* New() const final {
    return new CDataGCCStrike15_v2_TournamentMatchDraft_Entry();
  }

  CDataGCCStrike15_v2_TournamentMatchDraft_Entry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CDataGCCStrike15_v2_TournamentMatchDraft_Entry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDataGCCStrike15_v2_TournamentMatchDraft_Entry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CDataGCCStrike15_v2_TournamentMatchDraft_Entry& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDataGCCStrike15_v2_TournamentMatchDraft_Entry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDataGCCStrike15_v2_TournamentMatchDraft.Entry";
  }
  protected:
  explicit CDataGCCStrike15_v2_TournamentMatchDraft_Entry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMapidFieldNumber = 1,
    kTeamIdCtFieldNumber = 2,
  };
  // optional int32 mapid = 1;
  bool has_mapid() const;
  private:
  bool _internal_has_mapid() const;
  public:
  void clear_mapid();
  ::PROTOBUF_NAMESPACE_ID::int32 mapid() const;
  void set_mapid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mapid() const;
  void _internal_set_mapid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 team_id_ct = 2;
  bool has_team_id_ct() const;
  private:
  bool _internal_has_team_id_ct() const;
  public:
  void clear_team_id_ct();
  ::PROTOBUF_NAMESPACE_ID::int32 team_id_ct() const;
  void set_team_id_ct(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_team_id_ct() const;
  void _internal_set_team_id_ct(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CDataGCCStrike15_v2_TournamentMatchDraft.Entry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 mapid_;
  ::PROTOBUF_NAMESPACE_ID::int32 team_id_ct_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CDataGCCStrike15_v2_TournamentMatchDraft final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDataGCCStrike15_v2_TournamentMatchDraft) */ {
 public:
  inline CDataGCCStrike15_v2_TournamentMatchDraft() : CDataGCCStrike15_v2_TournamentMatchDraft(nullptr) {}
  ~CDataGCCStrike15_v2_TournamentMatchDraft() override;
  explicit constexpr CDataGCCStrike15_v2_TournamentMatchDraft(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDataGCCStrike15_v2_TournamentMatchDraft(const CDataGCCStrike15_v2_TournamentMatchDraft& from);
  CDataGCCStrike15_v2_TournamentMatchDraft(CDataGCCStrike15_v2_TournamentMatchDraft&& from) noexcept
    : CDataGCCStrike15_v2_TournamentMatchDraft() {
    *this = ::std::move(from);
  }

  inline CDataGCCStrike15_v2_TournamentMatchDraft& operator=(const CDataGCCStrike15_v2_TournamentMatchDraft& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDataGCCStrike15_v2_TournamentMatchDraft& operator=(CDataGCCStrike15_v2_TournamentMatchDraft&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDataGCCStrike15_v2_TournamentMatchDraft& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDataGCCStrike15_v2_TournamentMatchDraft* internal_default_instance() {
    return reinterpret_cast<const CDataGCCStrike15_v2_TournamentMatchDraft*>(
               &_CDataGCCStrike15_v2_TournamentMatchDraft_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(CDataGCCStrike15_v2_TournamentMatchDraft& a, CDataGCCStrike15_v2_TournamentMatchDraft& b) {
    a.Swap(&b);
  }
  inline void Swap(CDataGCCStrike15_v2_TournamentMatchDraft* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDataGCCStrike15_v2_TournamentMatchDraft* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CDataGCCStrike15_v2_TournamentMatchDraft* New() const final {
    return new CDataGCCStrike15_v2_TournamentMatchDraft();
  }

  CDataGCCStrike15_v2_TournamentMatchDraft* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CDataGCCStrike15_v2_TournamentMatchDraft>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDataGCCStrike15_v2_TournamentMatchDraft& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CDataGCCStrike15_v2_TournamentMatchDraft& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDataGCCStrike15_v2_TournamentMatchDraft* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDataGCCStrike15_v2_TournamentMatchDraft";
  }
  protected:
  explicit CDataGCCStrike15_v2_TournamentMatchDraft(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CDataGCCStrike15_v2_TournamentMatchDraft_Entry Entry;

  // accessors -------------------------------------------------------

  enum : int {
    kDraftsFieldNumber = 10,
    kEventIdFieldNumber = 1,
    kEventStageIdFieldNumber = 2,
    kTeamId0FieldNumber = 3,
    kTeamId1FieldNumber = 4,
    kMapsCountFieldNumber = 5,
    kMapsCurrentFieldNumber = 6,
    kTeamIdStartFieldNumber = 7,
    kTeamIdVeto1FieldNumber = 8,
    kTeamIdPicknFieldNumber = 9,
  };
  // repeated .CDataGCCStrike15_v2_TournamentMatchDraft.Entry drafts = 10;
  int drafts_size() const;
  private:
  int _internal_drafts_size() const;
  public:
  void clear_drafts();
  ::CDataGCCStrike15_v2_TournamentMatchDraft_Entry* mutable_drafts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDataGCCStrike15_v2_TournamentMatchDraft_Entry >*
      mutable_drafts();
  private:
  const ::CDataGCCStrike15_v2_TournamentMatchDraft_Entry& _internal_drafts(int index) const;
  ::CDataGCCStrike15_v2_TournamentMatchDraft_Entry* _internal_add_drafts();
  public:
  const ::CDataGCCStrike15_v2_TournamentMatchDraft_Entry& drafts(int index) const;
  ::CDataGCCStrike15_v2_TournamentMatchDraft_Entry* add_drafts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDataGCCStrike15_v2_TournamentMatchDraft_Entry >&
      drafts() const;

  // optional int32 event_id = 1;
  bool has_event_id() const;
  private:
  bool _internal_has_event_id() const;
  public:
  void clear_event_id();
  ::PROTOBUF_NAMESPACE_ID::int32 event_id() const;
  void set_event_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_event_id() const;
  void _internal_set_event_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 event_stage_id = 2;
  bool has_event_stage_id() const;
  private:
  bool _internal_has_event_stage_id() const;
  public:
  void clear_event_stage_id();
  ::PROTOBUF_NAMESPACE_ID::int32 event_stage_id() const;
  void set_event_stage_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_event_stage_id() const;
  void _internal_set_event_stage_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 team_id_0 = 3;
  bool has_team_id_0() const;
  private:
  bool _internal_has_team_id_0() const;
  public:
  void clear_team_id_0();
  ::PROTOBUF_NAMESPACE_ID::int32 team_id_0() const;
  void set_team_id_0(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_team_id_0() const;
  void _internal_set_team_id_0(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 team_id_1 = 4;
  bool has_team_id_1() const;
  private:
  bool _internal_has_team_id_1() const;
  public:
  void clear_team_id_1();
  ::PROTOBUF_NAMESPACE_ID::int32 team_id_1() const;
  void set_team_id_1(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_team_id_1() const;
  void _internal_set_team_id_1(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 maps_count = 5;
  bool has_maps_count() const;
  private:
  bool _internal_has_maps_count() const;
  public:
  void clear_maps_count();
  ::PROTOBUF_NAMESPACE_ID::int32 maps_count() const;
  void set_maps_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_maps_count() const;
  void _internal_set_maps_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 maps_current = 6;
  bool has_maps_current() const;
  private:
  bool _internal_has_maps_current() const;
  public:
  void clear_maps_current();
  ::PROTOBUF_NAMESPACE_ID::int32 maps_current() const;
  void set_maps_current(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_maps_current() const;
  void _internal_set_maps_current(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 team_id_start = 7;
  bool has_team_id_start() const;
  private:
  bool _internal_has_team_id_start() const;
  public:
  void clear_team_id_start();
  ::PROTOBUF_NAMESPACE_ID::int32 team_id_start() const;
  void set_team_id_start(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_team_id_start() const;
  void _internal_set_team_id_start(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 team_id_veto1 = 8;
  bool has_team_id_veto1() const;
  private:
  bool _internal_has_team_id_veto1() const;
  public:
  void clear_team_id_veto1();
  ::PROTOBUF_NAMESPACE_ID::int32 team_id_veto1() const;
  void set_team_id_veto1(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_team_id_veto1() const;
  void _internal_set_team_id_veto1(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 team_id_pickn = 9;
  bool has_team_id_pickn() const;
  private:
  bool _internal_has_team_id_pickn() const;
  public:
  void clear_team_id_pickn();
  ::PROTOBUF_NAMESPACE_ID::int32 team_id_pickn() const;
  void set_team_id_pickn(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_team_id_pickn() const;
  void _internal_set_team_id_pickn(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CDataGCCStrike15_v2_TournamentMatchDraft)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDataGCCStrike15_v2_TournamentMatchDraft_Entry > drafts_;
  ::PROTOBUF_NAMESPACE_ID::int32 event_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 event_stage_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 team_id_0_;
  ::PROTOBUF_NAMESPACE_ID::int32 team_id_1_;
  ::PROTOBUF_NAMESPACE_ID::int32 maps_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 maps_current_;
  ::PROTOBUF_NAMESPACE_ID::int32 team_id_start_;
  ::PROTOBUF_NAMESPACE_ID::int32 team_id_veto1_;
  ::PROTOBUF_NAMESPACE_ID::int32 team_id_pickn_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CPreMatchInfoData_TeamStats final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPreMatchInfoData.TeamStats) */ {
 public:
  inline CPreMatchInfoData_TeamStats() : CPreMatchInfoData_TeamStats(nullptr) {}
  ~CPreMatchInfoData_TeamStats() override;
  explicit constexpr CPreMatchInfoData_TeamStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPreMatchInfoData_TeamStats(const CPreMatchInfoData_TeamStats& from);
  CPreMatchInfoData_TeamStats(CPreMatchInfoData_TeamStats&& from) noexcept
    : CPreMatchInfoData_TeamStats() {
    *this = ::std::move(from);
  }

  inline CPreMatchInfoData_TeamStats& operator=(const CPreMatchInfoData_TeamStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPreMatchInfoData_TeamStats& operator=(CPreMatchInfoData_TeamStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPreMatchInfoData_TeamStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPreMatchInfoData_TeamStats* internal_default_instance() {
    return reinterpret_cast<const CPreMatchInfoData_TeamStats*>(
               &_CPreMatchInfoData_TeamStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(CPreMatchInfoData_TeamStats& a, CPreMatchInfoData_TeamStats& b) {
    a.Swap(&b);
  }
  inline void Swap(CPreMatchInfoData_TeamStats* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPreMatchInfoData_TeamStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CPreMatchInfoData_TeamStats* New() const final {
    return new CPreMatchInfoData_TeamStats();
  }

  CPreMatchInfoData_TeamStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CPreMatchInfoData_TeamStats>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPreMatchInfoData_TeamStats& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPreMatchInfoData_TeamStats& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPreMatchInfoData_TeamStats* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPreMatchInfoData.TeamStats";
  }
  protected:
  explicit CPreMatchInfoData_TeamStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMatchInfoTeamsFieldNumber = 3,
    kMatchInfoTxtFieldNumber = 2,
    kMatchInfoIdxtxtFieldNumber = 1,
  };
  // repeated string match_info_teams = 3;
  int match_info_teams_size() const;
  private:
  int _internal_match_info_teams_size() const;
  public:
  void clear_match_info_teams();
  const std::string& match_info_teams(int index) const;
  std::string* mutable_match_info_teams(int index);
  void set_match_info_teams(int index, const std::string& value);
  void set_match_info_teams(int index, std::string&& value);
  void set_match_info_teams(int index, const char* value);
  void set_match_info_teams(int index, const char* value, size_t size);
  std::string* add_match_info_teams();
  void add_match_info_teams(const std::string& value);
  void add_match_info_teams(std::string&& value);
  void add_match_info_teams(const char* value);
  void add_match_info_teams(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& match_info_teams() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_match_info_teams();
  private:
  const std::string& _internal_match_info_teams(int index) const;
  std::string* _internal_add_match_info_teams();
  public:

  // optional string match_info_txt = 2;
  bool has_match_info_txt() const;
  private:
  bool _internal_has_match_info_txt() const;
  public:
  void clear_match_info_txt();
  const std::string& match_info_txt() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_match_info_txt(ArgT0&& arg0, ArgT... args);
  std::string* mutable_match_info_txt();
  PROTOBUF_MUST_USE_RESULT std::string* release_match_info_txt();
  void set_allocated_match_info_txt(std::string* match_info_txt);
  private:
  const std::string& _internal_match_info_txt() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_match_info_txt(const std::string& value);
  std::string* _internal_mutable_match_info_txt();
  public:

  // optional int32 match_info_idxtxt = 1;
  bool has_match_info_idxtxt() const;
  private:
  bool _internal_has_match_info_idxtxt() const;
  public:
  void clear_match_info_idxtxt();
  ::PROTOBUF_NAMESPACE_ID::int32 match_info_idxtxt() const;
  void set_match_info_idxtxt(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_match_info_idxtxt() const;
  void _internal_set_match_info_idxtxt(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CPreMatchInfoData.TeamStats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> match_info_teams_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr match_info_txt_;
  ::PROTOBUF_NAMESPACE_ID::int32 match_info_idxtxt_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CPreMatchInfoData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPreMatchInfoData) */ {
 public:
  inline CPreMatchInfoData() : CPreMatchInfoData(nullptr) {}
  ~CPreMatchInfoData() override;
  explicit constexpr CPreMatchInfoData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPreMatchInfoData(const CPreMatchInfoData& from);
  CPreMatchInfoData(CPreMatchInfoData&& from) noexcept
    : CPreMatchInfoData() {
    *this = ::std::move(from);
  }

  inline CPreMatchInfoData& operator=(const CPreMatchInfoData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPreMatchInfoData& operator=(CPreMatchInfoData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPreMatchInfoData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPreMatchInfoData* internal_default_instance() {
    return reinterpret_cast<const CPreMatchInfoData*>(
               &_CPreMatchInfoData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(CPreMatchInfoData& a, CPreMatchInfoData& b) {
    a.Swap(&b);
  }
  inline void Swap(CPreMatchInfoData* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPreMatchInfoData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CPreMatchInfoData* New() const final {
    return new CPreMatchInfoData();
  }

  CPreMatchInfoData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CPreMatchInfoData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPreMatchInfoData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CPreMatchInfoData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPreMatchInfoData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPreMatchInfoData";
  }
  protected:
  explicit CPreMatchInfoData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CPreMatchInfoData_TeamStats TeamStats;

  // accessors -------------------------------------------------------

  enum : int {
    kStatsFieldNumber = 5,
    kDraftFieldNumber = 4,
    kPredictionsPctFieldNumber = 1,
  };
  // repeated .CPreMatchInfoData.TeamStats stats = 5;
  int stats_size() const;
  private:
  int _internal_stats_size() const;
  public:
  void clear_stats();
  ::CPreMatchInfoData_TeamStats* mutable_stats(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPreMatchInfoData_TeamStats >*
      mutable_stats();
  private:
  const ::CPreMatchInfoData_TeamStats& _internal_stats(int index) const;
  ::CPreMatchInfoData_TeamStats* _internal_add_stats();
  public:
  const ::CPreMatchInfoData_TeamStats& stats(int index) const;
  ::CPreMatchInfoData_TeamStats* add_stats();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPreMatchInfoData_TeamStats >&
      stats() const;

  // optional .CDataGCCStrike15_v2_TournamentMatchDraft draft = 4;
  bool has_draft() const;
  private:
  bool _internal_has_draft() const;
  public:
  void clear_draft();
  const ::CDataGCCStrike15_v2_TournamentMatchDraft& draft() const;
  PROTOBUF_MUST_USE_RESULT ::CDataGCCStrike15_v2_TournamentMatchDraft* release_draft();
  ::CDataGCCStrike15_v2_TournamentMatchDraft* mutable_draft();
  void set_allocated_draft(::CDataGCCStrike15_v2_TournamentMatchDraft* draft);
  private:
  const ::CDataGCCStrike15_v2_TournamentMatchDraft& _internal_draft() const;
  ::CDataGCCStrike15_v2_TournamentMatchDraft* _internal_mutable_draft();
  public:
  void unsafe_arena_set_allocated_draft(
      ::CDataGCCStrike15_v2_TournamentMatchDraft* draft);
  ::CDataGCCStrike15_v2_TournamentMatchDraft* unsafe_arena_release_draft();

  // optional int32 predictions_pct = 1;
  bool has_predictions_pct() const;
  private:
  bool _internal_has_predictions_pct() const;
  public:
  void clear_predictions_pct();
  ::PROTOBUF_NAMESPACE_ID::int32 predictions_pct() const;
  void set_predictions_pct(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_predictions_pct() const;
  void _internal_set_predictions_pct(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CPreMatchInfoData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPreMatchInfoData_TeamStats > stats_;
  ::CDataGCCStrike15_v2_TournamentMatchDraft* draft_;
  ::PROTOBUF_NAMESPACE_ID::int32 predictions_pct_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve) */ {
 public:
  inline CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve() : CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve(nullptr) {}
  ~CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve() override;
  explicit constexpr CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve(const CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve& from);
  CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve(CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve&& from) noexcept
    : CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve() {
    *this = ::std::move(from);
  }

  inline CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve& operator=(const CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve& operator=(CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* internal_default_instance() {
    return reinterpret_cast<const CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve*>(
               &_CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve& a, CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* New() const final {
    return new CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve();
  }

  CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve";
  }
  protected:
  explicit CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdsFieldNumber = 1,
    kRankingsFieldNumber = 5,
    kPartyIdsFieldNumber = 8,
    kWhitelistFieldNumber = 9,
    kTournamentTeamsFieldNumber = 12,
    kTournamentCastersAccountIdsFieldNumber = 13,
    kTournamentEventFieldNumber = 11,
    kPreMatchDataFieldNumber = 15,
    kMatchIdFieldNumber = 3,
    kGameTypeFieldNumber = 2,
    kServerVersionFieldNumber = 4,
    kEncryptionKeyFieldNumber = 6,
    kEncryptionKeyPubFieldNumber = 7,
    kTvMasterSteamidFieldNumber = 10,
    kTvRelaySteamidFieldNumber = 14,
  };
  // repeated uint32 account_ids = 1;
  int account_ids_size() const;
  private:
  int _internal_account_ids_size() const;
  public:
  void clear_account_ids();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_account_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_account_ids() const;
  void _internal_add_account_ids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_account_ids();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 account_ids(int index) const;
  void set_account_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_account_ids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      account_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_account_ids();

  // repeated .PlayerRankingInfo rankings = 5;
  int rankings_size() const;
  private:
  int _internal_rankings_size() const;
  public:
  void clear_rankings();
  ::PlayerRankingInfo* mutable_rankings(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlayerRankingInfo >*
      mutable_rankings();
  private:
  const ::PlayerRankingInfo& _internal_rankings(int index) const;
  ::PlayerRankingInfo* _internal_add_rankings();
  public:
  const ::PlayerRankingInfo& rankings(int index) const;
  ::PlayerRankingInfo* add_rankings();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlayerRankingInfo >&
      rankings() const;

  // repeated uint32 party_ids = 8;
  int party_ids_size() const;
  private:
  int _internal_party_ids_size() const;
  public:
  void clear_party_ids();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_party_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_party_ids() const;
  void _internal_add_party_ids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_party_ids();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 party_ids(int index) const;
  void set_party_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_party_ids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      party_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_party_ids();

  // repeated .IpAddressMask whitelist = 9;
  int whitelist_size() const;
  private:
  int _internal_whitelist_size() const;
  public:
  void clear_whitelist();
  ::IpAddressMask* mutable_whitelist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IpAddressMask >*
      mutable_whitelist();
  private:
  const ::IpAddressMask& _internal_whitelist(int index) const;
  ::IpAddressMask* _internal_add_whitelist();
  public:
  const ::IpAddressMask& whitelist(int index) const;
  ::IpAddressMask* add_whitelist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IpAddressMask >&
      whitelist() const;

  // repeated .TournamentTeam tournament_teams = 12;
  int tournament_teams_size() const;
  private:
  int _internal_tournament_teams_size() const;
  public:
  void clear_tournament_teams();
  ::TournamentTeam* mutable_tournament_teams(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TournamentTeam >*
      mutable_tournament_teams();
  private:
  const ::TournamentTeam& _internal_tournament_teams(int index) const;
  ::TournamentTeam* _internal_add_tournament_teams();
  public:
  const ::TournamentTeam& tournament_teams(int index) const;
  ::TournamentTeam* add_tournament_teams();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TournamentTeam >&
      tournament_teams() const;

  // repeated uint32 tournament_casters_account_ids = 13;
  int tournament_casters_account_ids_size() const;
  private:
  int _internal_tournament_casters_account_ids_size() const;
  public:
  void clear_tournament_casters_account_ids();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tournament_casters_account_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_tournament_casters_account_ids() const;
  void _internal_add_tournament_casters_account_ids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_tournament_casters_account_ids();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 tournament_casters_account_ids(int index) const;
  void set_tournament_casters_account_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_tournament_casters_account_ids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      tournament_casters_account_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_tournament_casters_account_ids();

  // optional .TournamentEvent tournament_event = 11;
  bool has_tournament_event() const;
  private:
  bool _internal_has_tournament_event() const;
  public:
  void clear_tournament_event();
  const ::TournamentEvent& tournament_event() const;
  PROTOBUF_MUST_USE_RESULT ::TournamentEvent* release_tournament_event();
  ::TournamentEvent* mutable_tournament_event();
  void set_allocated_tournament_event(::TournamentEvent* tournament_event);
  private:
  const ::TournamentEvent& _internal_tournament_event() const;
  ::TournamentEvent* _internal_mutable_tournament_event();
  public:
  void unsafe_arena_set_allocated_tournament_event(
      ::TournamentEvent* tournament_event);
  ::TournamentEvent* unsafe_arena_release_tournament_event();

  // optional .CPreMatchInfoData pre_match_data = 15;
  bool has_pre_match_data() const;
  private:
  bool _internal_has_pre_match_data() const;
  public:
  void clear_pre_match_data();
  const ::CPreMatchInfoData& pre_match_data() const;
  PROTOBUF_MUST_USE_RESULT ::CPreMatchInfoData* release_pre_match_data();
  ::CPreMatchInfoData* mutable_pre_match_data();
  void set_allocated_pre_match_data(::CPreMatchInfoData* pre_match_data);
  private:
  const ::CPreMatchInfoData& _internal_pre_match_data() const;
  ::CPreMatchInfoData* _internal_mutable_pre_match_data();
  public:
  void unsafe_arena_set_allocated_pre_match_data(
      ::CPreMatchInfoData* pre_match_data);
  ::CPreMatchInfoData* unsafe_arena_release_pre_match_data();

  // optional uint64 match_id = 3;
  bool has_match_id() const;
  private:
  bool _internal_has_match_id() const;
  public:
  void clear_match_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 match_id() const;
  void set_match_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_match_id() const;
  void _internal_set_match_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 game_type = 2;
  bool has_game_type() const;
  private:
  bool _internal_has_game_type() const;
  public:
  void clear_game_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 game_type() const;
  void set_game_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_game_type() const;
  void _internal_set_game_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 server_version = 4;
  bool has_server_version() const;
  private:
  bool _internal_has_server_version() const;
  public:
  void clear_server_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 server_version() const;
  void set_server_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_server_version() const;
  void _internal_set_server_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint64 encryption_key = 6;
  bool has_encryption_key() const;
  private:
  bool _internal_has_encryption_key() const;
  public:
  void clear_encryption_key();
  ::PROTOBUF_NAMESPACE_ID::uint64 encryption_key() const;
  void set_encryption_key(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_encryption_key() const;
  void _internal_set_encryption_key(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 encryption_key_pub = 7;
  bool has_encryption_key_pub() const;
  private:
  bool _internal_has_encryption_key_pub() const;
  public:
  void clear_encryption_key_pub();
  ::PROTOBUF_NAMESPACE_ID::uint64 encryption_key_pub() const;
  void set_encryption_key_pub(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_encryption_key_pub() const;
  void _internal_set_encryption_key_pub(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 tv_master_steamid = 10;
  bool has_tv_master_steamid() const;
  private:
  bool _internal_has_tv_master_steamid() const;
  public:
  void clear_tv_master_steamid();
  ::PROTOBUF_NAMESPACE_ID::uint64 tv_master_steamid() const;
  void set_tv_master_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_tv_master_steamid() const;
  void _internal_set_tv_master_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 tv_relay_steamid = 14;
  bool has_tv_relay_steamid() const;
  private:
  bool _internal_has_tv_relay_steamid() const;
  public:
  void clear_tv_relay_steamid();
  ::PROTOBUF_NAMESPACE_ID::uint64 tv_relay_steamid() const;
  void set_tv_relay_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_tv_relay_steamid() const;
  void _internal_set_tv_relay_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > account_ids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlayerRankingInfo > rankings_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > party_ids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IpAddressMask > whitelist_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TournamentTeam > tournament_teams_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > tournament_casters_account_ids_;
  ::TournamentEvent* tournament_event_;
  ::CPreMatchInfoData* pre_match_data_;
  ::PROTOBUF_NAMESPACE_ID::uint64 match_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 game_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 server_version_;
  ::PROTOBUF_NAMESPACE_ID::uint64 encryption_key_;
  ::PROTOBUF_NAMESPACE_ID::uint64 encryption_key_pub_;
  ::PROTOBUF_NAMESPACE_ID::uint64 tv_master_steamid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 tv_relay_steamid_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_MatchmakingServerReservationResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCCStrike15_v2_MatchmakingServerReservationResponse) */ {
 public:
  inline CMsgGCCStrike15_v2_MatchmakingServerReservationResponse() : CMsgGCCStrike15_v2_MatchmakingServerReservationResponse(nullptr) {}
  ~CMsgGCCStrike15_v2_MatchmakingServerReservationResponse() override;
  explicit constexpr CMsgGCCStrike15_v2_MatchmakingServerReservationResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCCStrike15_v2_MatchmakingServerReservationResponse(const CMsgGCCStrike15_v2_MatchmakingServerReservationResponse& from);
  CMsgGCCStrike15_v2_MatchmakingServerReservationResponse(CMsgGCCStrike15_v2_MatchmakingServerReservationResponse&& from) noexcept
    : CMsgGCCStrike15_v2_MatchmakingServerReservationResponse() {
    *this = ::std::move(from);
  }

  inline CMsgGCCStrike15_v2_MatchmakingServerReservationResponse& operator=(const CMsgGCCStrike15_v2_MatchmakingServerReservationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCCStrike15_v2_MatchmakingServerReservationResponse& operator=(CMsgGCCStrike15_v2_MatchmakingServerReservationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCCStrike15_v2_MatchmakingServerReservationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCCStrike15_v2_MatchmakingServerReservationResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgGCCStrike15_v2_MatchmakingServerReservationResponse*>(
               &_CMsgGCCStrike15_v2_MatchmakingServerReservationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(CMsgGCCStrike15_v2_MatchmakingServerReservationResponse& a, CMsgGCCStrike15_v2_MatchmakingServerReservationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCCStrike15_v2_MatchmakingServerReservationResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCCStrike15_v2_MatchmakingServerReservationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCCStrike15_v2_MatchmakingServerReservationResponse* New() const final {
    return new CMsgGCCStrike15_v2_MatchmakingServerReservationResponse();
  }

  CMsgGCCStrike15_v2_MatchmakingServerReservationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCCStrike15_v2_MatchmakingServerReservationResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCCStrike15_v2_MatchmakingServerReservationResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgGCCStrike15_v2_MatchmakingServerReservationResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCCStrike15_v2_MatchmakingServerReservationResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCCStrike15_v2_MatchmakingServerReservationResponse";
  }
  protected:
  explicit CMsgGCCStrike15_v2_MatchmakingServerReservationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRewardPlayerAccountsFieldNumber = 7,
    kIdlePlayerAccountsFieldNumber = 8,
    kMapFieldNumber = 3,
    kTournamentTagFieldNumber = 13,
    kReservationFieldNumber = 2,
    kTvInfoFieldNumber = 6,
    kReservationidFieldNumber = 1,
    kGcReservationSentFieldNumber = 4,
    kServerVersionFieldNumber = 5,
    kRewardItemAttrDefIdxFieldNumber = 9,
    kRewardItemAttrValueFieldNumber = 10,
    kRewardItemAttrRewardIdxFieldNumber = 11,
    kRewardDropListFieldNumber = 12,
    kSteamdatagramPortFieldNumber = 14,
  };
  // repeated uint32 reward_player_accounts = 7;
  int reward_player_accounts_size() const;
  private:
  int _internal_reward_player_accounts_size() const;
  public:
  void clear_reward_player_accounts();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_reward_player_accounts(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_reward_player_accounts() const;
  void _internal_add_reward_player_accounts(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_reward_player_accounts();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 reward_player_accounts(int index) const;
  void set_reward_player_accounts(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_reward_player_accounts(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      reward_player_accounts() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_reward_player_accounts();

  // repeated uint32 idle_player_accounts = 8;
  int idle_player_accounts_size() const;
  private:
  int _internal_idle_player_accounts_size() const;
  public:
  void clear_idle_player_accounts();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_idle_player_accounts(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_idle_player_accounts() const;
  void _internal_add_idle_player_accounts(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_idle_player_accounts();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 idle_player_accounts(int index) const;
  void set_idle_player_accounts(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_idle_player_accounts(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      idle_player_accounts() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_idle_player_accounts();

  // optional string map = 3;
  bool has_map() const;
  private:
  bool _internal_has_map() const;
  public:
  void clear_map();
  const std::string& map() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_map(ArgT0&& arg0, ArgT... args);
  std::string* mutable_map();
  PROTOBUF_MUST_USE_RESULT std::string* release_map();
  void set_allocated_map(std::string* map);
  private:
  const std::string& _internal_map() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_map(const std::string& value);
  std::string* _internal_mutable_map();
  public:

  // optional string tournament_tag = 13;
  bool has_tournament_tag() const;
  private:
  bool _internal_has_tournament_tag() const;
  public:
  void clear_tournament_tag();
  const std::string& tournament_tag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tournament_tag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tournament_tag();
  PROTOBUF_MUST_USE_RESULT std::string* release_tournament_tag();
  void set_allocated_tournament_tag(std::string* tournament_tag);
  private:
  const std::string& _internal_tournament_tag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tournament_tag(const std::string& value);
  std::string* _internal_mutable_tournament_tag();
  public:

  // optional .CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve reservation = 2;
  bool has_reservation() const;
  private:
  bool _internal_has_reservation() const;
  public:
  void clear_reservation();
  const ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve& reservation() const;
  PROTOBUF_MUST_USE_RESULT ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* release_reservation();
  ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* mutable_reservation();
  void set_allocated_reservation(::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* reservation);
  private:
  const ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve& _internal_reservation() const;
  ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* _internal_mutable_reservation();
  public:
  void unsafe_arena_set_allocated_reservation(
      ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* reservation);
  ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* unsafe_arena_release_reservation();

  // optional .ServerHltvInfo tv_info = 6;
  bool has_tv_info() const;
  private:
  bool _internal_has_tv_info() const;
  public:
  void clear_tv_info();
  const ::ServerHltvInfo& tv_info() const;
  PROTOBUF_MUST_USE_RESULT ::ServerHltvInfo* release_tv_info();
  ::ServerHltvInfo* mutable_tv_info();
  void set_allocated_tv_info(::ServerHltvInfo* tv_info);
  private:
  const ::ServerHltvInfo& _internal_tv_info() const;
  ::ServerHltvInfo* _internal_mutable_tv_info();
  public:
  void unsafe_arena_set_allocated_tv_info(
      ::ServerHltvInfo* tv_info);
  ::ServerHltvInfo* unsafe_arena_release_tv_info();

  // optional uint64 reservationid = 1;
  bool has_reservationid() const;
  private:
  bool _internal_has_reservationid() const;
  public:
  void clear_reservationid();
  ::PROTOBUF_NAMESPACE_ID::uint64 reservationid() const;
  void set_reservationid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_reservationid() const;
  void _internal_set_reservationid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 gc_reservation_sent = 4;
  bool has_gc_reservation_sent() const;
  private:
  bool _internal_has_gc_reservation_sent() const;
  public:
  void clear_gc_reservation_sent();
  ::PROTOBUF_NAMESPACE_ID::uint64 gc_reservation_sent() const;
  void set_gc_reservation_sent(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_gc_reservation_sent() const;
  void _internal_set_gc_reservation_sent(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 server_version = 5;
  bool has_server_version() const;
  private:
  bool _internal_has_server_version() const;
  public:
  void clear_server_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 server_version() const;
  void set_server_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_server_version() const;
  void _internal_set_server_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 reward_item_attr_def_idx = 9;
  bool has_reward_item_attr_def_idx() const;
  private:
  bool _internal_has_reward_item_attr_def_idx() const;
  public:
  void clear_reward_item_attr_def_idx();
  ::PROTOBUF_NAMESPACE_ID::uint32 reward_item_attr_def_idx() const;
  void set_reward_item_attr_def_idx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_reward_item_attr_def_idx() const;
  void _internal_set_reward_item_attr_def_idx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 reward_item_attr_value = 10;
  bool has_reward_item_attr_value() const;
  private:
  bool _internal_has_reward_item_attr_value() const;
  public:
  void clear_reward_item_attr_value();
  ::PROTOBUF_NAMESPACE_ID::uint32 reward_item_attr_value() const;
  void set_reward_item_attr_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_reward_item_attr_value() const;
  void _internal_set_reward_item_attr_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 reward_item_attr_reward_idx = 11;
  bool has_reward_item_attr_reward_idx() const;
  private:
  bool _internal_has_reward_item_attr_reward_idx() const;
  public:
  void clear_reward_item_attr_reward_idx();
  ::PROTOBUF_NAMESPACE_ID::uint32 reward_item_attr_reward_idx() const;
  void set_reward_item_attr_reward_idx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_reward_item_attr_reward_idx() const;
  void _internal_set_reward_item_attr_reward_idx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 reward_drop_list = 12;
  bool has_reward_drop_list() const;
  private:
  bool _internal_has_reward_drop_list() const;
  public:
  void clear_reward_drop_list();
  ::PROTOBUF_NAMESPACE_ID::uint32 reward_drop_list() const;
  void set_reward_drop_list(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_reward_drop_list() const;
  void _internal_set_reward_drop_list(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 steamdatagram_port = 14;
  bool has_steamdatagram_port() const;
  private:
  bool _internal_has_steamdatagram_port() const;
  public:
  void clear_steamdatagram_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 steamdatagram_port() const;
  void set_steamdatagram_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_steamdatagram_port() const;
  void _internal_set_steamdatagram_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_MatchmakingServerReservationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > reward_player_accounts_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > idle_player_accounts_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr map_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tournament_tag_;
  ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* reservation_;
  ::ServerHltvInfo* tv_info_;
  ::PROTOBUF_NAMESPACE_ID::uint64 reservationid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 gc_reservation_sent_;
  ::PROTOBUF_NAMESPACE_ID::uint32 server_version_;
  ::PROTOBUF_NAMESPACE_ID::uint32 reward_item_attr_def_idx_;
  ::PROTOBUF_NAMESPACE_ID::uint32 reward_item_attr_value_;
  ::PROTOBUF_NAMESPACE_ID::uint32 reward_item_attr_reward_idx_;
  ::PROTOBUF_NAMESPACE_ID::uint32 reward_drop_list_;
  ::PROTOBUF_NAMESPACE_ID::uint32 steamdatagram_port_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve) */ {
 public:
  inline CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve() : CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve(nullptr) {}
  ~CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve() override;
  explicit constexpr CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve(const CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve& from);
  CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve(CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve&& from) noexcept
    : CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve() {
    *this = ::std::move(from);
  }

  inline CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve& operator=(const CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve& operator=(CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* internal_default_instance() {
    return reinterpret_cast<const CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve*>(
               &_CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve& a, CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* New() const final {
    return new CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve();
  }

  CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve";
  }
  protected:
  explicit CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMapFieldNumber = 6,
    kServerAddressFieldNumber = 7,
    kReservationFieldNumber = 5,
    kServeridFieldNumber = 1,
    kDirectUdpIpFieldNumber = 2,
    kDirectUdpPortFieldNumber = 3,
    kReservationidFieldNumber = 4,
  };
  // optional string map = 6;
  bool has_map() const;
  private:
  bool _internal_has_map() const;
  public:
  void clear_map();
  const std::string& map() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_map(ArgT0&& arg0, ArgT... args);
  std::string* mutable_map();
  PROTOBUF_MUST_USE_RESULT std::string* release_map();
  void set_allocated_map(std::string* map);
  private:
  const std::string& _internal_map() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_map(const std::string& value);
  std::string* _internal_mutable_map();
  public:

  // optional string server_address = 7;
  bool has_server_address() const;
  private:
  bool _internal_has_server_address() const;
  public:
  void clear_server_address();
  const std::string& server_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_server_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_server_address();
  PROTOBUF_MUST_USE_RESULT std::string* release_server_address();
  void set_allocated_server_address(std::string* server_address);
  private:
  const std::string& _internal_server_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_server_address(const std::string& value);
  std::string* _internal_mutable_server_address();
  public:

  // optional .CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve reservation = 5;
  bool has_reservation() const;
  private:
  bool _internal_has_reservation() const;
  public:
  void clear_reservation();
  const ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve& reservation() const;
  PROTOBUF_MUST_USE_RESULT ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* release_reservation();
  ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* mutable_reservation();
  void set_allocated_reservation(::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* reservation);
  private:
  const ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve& _internal_reservation() const;
  ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* _internal_mutable_reservation();
  public:
  void unsafe_arena_set_allocated_reservation(
      ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* reservation);
  ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* unsafe_arena_release_reservation();

  // optional uint64 serverid = 1;
  bool has_serverid() const;
  private:
  bool _internal_has_serverid() const;
  public:
  void clear_serverid();
  ::PROTOBUF_NAMESPACE_ID::uint64 serverid() const;
  void set_serverid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_serverid() const;
  void _internal_set_serverid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 direct_udp_ip = 2;
  bool has_direct_udp_ip() const;
  private:
  bool _internal_has_direct_udp_ip() const;
  public:
  void clear_direct_udp_ip();
  ::PROTOBUF_NAMESPACE_ID::uint32 direct_udp_ip() const;
  void set_direct_udp_ip(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_direct_udp_ip() const;
  void _internal_set_direct_udp_ip(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 direct_udp_port = 3;
  bool has_direct_udp_port() const;
  private:
  bool _internal_has_direct_udp_port() const;
  public:
  void clear_direct_udp_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 direct_udp_port() const;
  void set_direct_udp_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_direct_udp_port() const;
  void _internal_set_direct_udp_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint64 reservationid = 4;
  bool has_reservationid() const;
  private:
  bool _internal_has_reservationid() const;
  public:
  void clear_reservationid();
  ::PROTOBUF_NAMESPACE_ID::uint64 reservationid() const;
  void set_reservationid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_reservationid() const;
  void _internal_set_reservationid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr map_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr server_address_;
  ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* reservation_;
  ::PROTOBUF_NAMESPACE_ID::uint64 serverid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 direct_udp_ip_;
  ::PROTOBUF_NAMESPACE_ID::uint32 direct_udp_port_;
  ::PROTOBUF_NAMESPACE_ID::uint64 reservationid_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.DropInfo) */ {
 public:
  inline CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo() : CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo(nullptr) {}
  ~CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo() override;
  explicit constexpr CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo(const CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo& from);
  CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo(CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo&& from) noexcept
    : CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo() {
    *this = ::std::move(from);
  }

  inline CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo& operator=(const CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo& operator=(CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo* internal_default_instance() {
    return reinterpret_cast<const CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo*>(
               &_CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo& a, CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo* New() const final {
    return new CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo();
  }

  CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCCStrike15_v2_MatchmakingServerRoundStats.DropInfo";
  }
  protected:
  explicit CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountMvpFieldNumber = 1,
  };
  // optional uint32 account_mvp = 1;
  bool has_account_mvp() const;
  private:
  bool _internal_has_account_mvp() const;
  public:
  void clear_account_mvp();
  ::PROTOBUF_NAMESPACE_ID::uint32 account_mvp() const;
  void set_account_mvp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_account_mvp() const;
  void _internal_set_account_mvp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.DropInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 account_mvp_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_MatchmakingServerRoundStats final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCCStrike15_v2_MatchmakingServerRoundStats) */ {
 public:
  inline CMsgGCCStrike15_v2_MatchmakingServerRoundStats() : CMsgGCCStrike15_v2_MatchmakingServerRoundStats(nullptr) {}
  ~CMsgGCCStrike15_v2_MatchmakingServerRoundStats() override;
  explicit constexpr CMsgGCCStrike15_v2_MatchmakingServerRoundStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCCStrike15_v2_MatchmakingServerRoundStats(const CMsgGCCStrike15_v2_MatchmakingServerRoundStats& from);
  CMsgGCCStrike15_v2_MatchmakingServerRoundStats(CMsgGCCStrike15_v2_MatchmakingServerRoundStats&& from) noexcept
    : CMsgGCCStrike15_v2_MatchmakingServerRoundStats() {
    *this = ::std::move(from);
  }

  inline CMsgGCCStrike15_v2_MatchmakingServerRoundStats& operator=(const CMsgGCCStrike15_v2_MatchmakingServerRoundStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCCStrike15_v2_MatchmakingServerRoundStats& operator=(CMsgGCCStrike15_v2_MatchmakingServerRoundStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCCStrike15_v2_MatchmakingServerRoundStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCCStrike15_v2_MatchmakingServerRoundStats* internal_default_instance() {
    return reinterpret_cast<const CMsgGCCStrike15_v2_MatchmakingServerRoundStats*>(
               &_CMsgGCCStrike15_v2_MatchmakingServerRoundStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(CMsgGCCStrike15_v2_MatchmakingServerRoundStats& a, CMsgGCCStrike15_v2_MatchmakingServerRoundStats& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCCStrike15_v2_MatchmakingServerRoundStats* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCCStrike15_v2_MatchmakingServerRoundStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCCStrike15_v2_MatchmakingServerRoundStats* New() const final {
    return new CMsgGCCStrike15_v2_MatchmakingServerRoundStats();
  }

  CMsgGCCStrike15_v2_MatchmakingServerRoundStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCCStrike15_v2_MatchmakingServerRoundStats>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCCStrike15_v2_MatchmakingServerRoundStats& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgGCCStrike15_v2_MatchmakingServerRoundStats& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCCStrike15_v2_MatchmakingServerRoundStats* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCCStrike15_v2_MatchmakingServerRoundStats";
  }
  protected:
  explicit CMsgGCCStrike15_v2_MatchmakingServerRoundStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo DropInfo;

  // accessors -------------------------------------------------------

  enum : int {
    kKillsFieldNumber = 5,
    kAssistsFieldNumber = 6,
    kDeathsFieldNumber = 7,
    kScoresFieldNumber = 8,
    kPingsFieldNumber = 9,
    kTeamScoresFieldNumber = 12,
    kEnemyKillsFieldNumber = 16,
    kEnemyHeadshotsFieldNumber = 17,
    kEnemy3KsFieldNumber = 18,
    kEnemy4KsFieldNumber = 19,
    kEnemy5KsFieldNumber = 20,
    kMvpsFieldNumber = 21,
    kEnemyKillsAggFieldNumber = 25,
    kMapFieldNumber = 3,
    kReservationFieldNumber = 2,
    kConfirmFieldNumber = 13,
    kDropInfoFieldNumber = 26,
    kReservationidFieldNumber = 1,
    kRoundFieldNumber = 4,
    kRoundResultFieldNumber = 10,
    kMatchResultFieldNumber = 11,
    kReservationStageFieldNumber = 14,
    kMatchDurationFieldNumber = 15,
    kSpectatorsCountFieldNumber = 22,
    kSpectatorsCountTvFieldNumber = 23,
    kSpectatorsCountLnkFieldNumber = 24,
  };
  // repeated int32 kills = 5;
  int kills_size() const;
  private:
  int _internal_kills_size() const;
  public:
  void clear_kills();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_kills(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_kills() const;
  void _internal_add_kills(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_kills();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 kills(int index) const;
  void set_kills(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_kills(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      kills() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_kills();

  // repeated int32 assists = 6;
  int assists_size() const;
  private:
  int _internal_assists_size() const;
  public:
  void clear_assists();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_assists(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_assists() const;
  void _internal_add_assists(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_assists();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 assists(int index) const;
  void set_assists(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_assists(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      assists() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_assists();

  // repeated int32 deaths = 7;
  int deaths_size() const;
  private:
  int _internal_deaths_size() const;
  public:
  void clear_deaths();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_deaths(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_deaths() const;
  void _internal_add_deaths(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_deaths();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 deaths(int index) const;
  void set_deaths(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_deaths(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      deaths() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_deaths();

  // repeated int32 scores = 8;
  int scores_size() const;
  private:
  int _internal_scores_size() const;
  public:
  void clear_scores();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_scores(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_scores() const;
  void _internal_add_scores(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_scores();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 scores(int index) const;
  void set_scores(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_scores(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      scores() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_scores();

  // repeated int32 pings = 9;
  int pings_size() const;
  private:
  int _internal_pings_size() const;
  public:
  void clear_pings();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pings(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_pings() const;
  void _internal_add_pings(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_pings();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 pings(int index) const;
  void set_pings(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_pings(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      pings() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_pings();

  // repeated int32 team_scores = 12;
  int team_scores_size() const;
  private:
  int _internal_team_scores_size() const;
  public:
  void clear_team_scores();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_team_scores(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_team_scores() const;
  void _internal_add_team_scores(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_team_scores();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 team_scores(int index) const;
  void set_team_scores(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_team_scores(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      team_scores() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_team_scores();

  // repeated int32 enemy_kills = 16;
  int enemy_kills_size() const;
  private:
  int _internal_enemy_kills_size() const;
  public:
  void clear_enemy_kills();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_enemy_kills(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_enemy_kills() const;
  void _internal_add_enemy_kills(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_enemy_kills();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 enemy_kills(int index) const;
  void set_enemy_kills(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_enemy_kills(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      enemy_kills() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_enemy_kills();

  // repeated int32 enemy_headshots = 17;
  int enemy_headshots_size() const;
  private:
  int _internal_enemy_headshots_size() const;
  public:
  void clear_enemy_headshots();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_enemy_headshots(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_enemy_headshots() const;
  void _internal_add_enemy_headshots(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_enemy_headshots();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 enemy_headshots(int index) const;
  void set_enemy_headshots(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_enemy_headshots(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      enemy_headshots() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_enemy_headshots();

  // repeated int32 enemy_3ks = 18;
  int enemy_3ks_size() const;
  private:
  int _internal_enemy_3ks_size() const;
  public:
  void clear_enemy_3ks();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_enemy_3ks(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_enemy_3ks() const;
  void _internal_add_enemy_3ks(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_enemy_3ks();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 enemy_3ks(int index) const;
  void set_enemy_3ks(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_enemy_3ks(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      enemy_3ks() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_enemy_3ks();

  // repeated int32 enemy_4ks = 19;
  int enemy_4ks_size() const;
  private:
  int _internal_enemy_4ks_size() const;
  public:
  void clear_enemy_4ks();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_enemy_4ks(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_enemy_4ks() const;
  void _internal_add_enemy_4ks(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_enemy_4ks();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 enemy_4ks(int index) const;
  void set_enemy_4ks(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_enemy_4ks(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      enemy_4ks() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_enemy_4ks();

  // repeated int32 enemy_5ks = 20;
  int enemy_5ks_size() const;
  private:
  int _internal_enemy_5ks_size() const;
  public:
  void clear_enemy_5ks();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_enemy_5ks(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_enemy_5ks() const;
  void _internal_add_enemy_5ks(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_enemy_5ks();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 enemy_5ks(int index) const;
  void set_enemy_5ks(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_enemy_5ks(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      enemy_5ks() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_enemy_5ks();

  // repeated int32 mvps = 21;
  int mvps_size() const;
  private:
  int _internal_mvps_size() const;
  public:
  void clear_mvps();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mvps(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_mvps() const;
  void _internal_add_mvps(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_mvps();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 mvps(int index) const;
  void set_mvps(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_mvps(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      mvps() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_mvps();

  // repeated int32 enemy_kills_agg = 25;
  int enemy_kills_agg_size() const;
  private:
  int _internal_enemy_kills_agg_size() const;
  public:
  void clear_enemy_kills_agg();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_enemy_kills_agg(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_enemy_kills_agg() const;
  void _internal_add_enemy_kills_agg(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_enemy_kills_agg();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 enemy_kills_agg(int index) const;
  void set_enemy_kills_agg(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_enemy_kills_agg(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      enemy_kills_agg() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_enemy_kills_agg();

  // optional string map = 3;
  bool has_map() const;
  private:
  bool _internal_has_map() const;
  public:
  void clear_map();
  const std::string& map() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_map(ArgT0&& arg0, ArgT... args);
  std::string* mutable_map();
  PROTOBUF_MUST_USE_RESULT std::string* release_map();
  void set_allocated_map(std::string* map);
  private:
  const std::string& _internal_map() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_map(const std::string& value);
  std::string* _internal_mutable_map();
  public:

  // optional .CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve reservation = 2;
  bool has_reservation() const;
  private:
  bool _internal_has_reservation() const;
  public:
  void clear_reservation();
  const ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve& reservation() const;
  PROTOBUF_MUST_USE_RESULT ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* release_reservation();
  ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* mutable_reservation();
  void set_allocated_reservation(::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* reservation);
  private:
  const ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve& _internal_reservation() const;
  ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* _internal_mutable_reservation();
  public:
  void unsafe_arena_set_allocated_reservation(
      ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* reservation);
  ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* unsafe_arena_release_reservation();

  // optional .CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm confirm = 13;
  bool has_confirm() const;
  private:
  bool _internal_has_confirm() const;
  public:
  void clear_confirm();
  const ::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm& confirm() const;
  PROTOBUF_MUST_USE_RESULT ::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm* release_confirm();
  ::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm* mutable_confirm();
  void set_allocated_confirm(::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm* confirm);
  private:
  const ::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm& _internal_confirm() const;
  ::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm* _internal_mutable_confirm();
  public:
  void unsafe_arena_set_allocated_confirm(
      ::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm* confirm);
  ::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm* unsafe_arena_release_confirm();

  // optional .CMsgGCCStrike15_v2_MatchmakingServerRoundStats.DropInfo drop_info = 26;
  bool has_drop_info() const;
  private:
  bool _internal_has_drop_info() const;
  public:
  void clear_drop_info();
  const ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo& drop_info() const;
  PROTOBUF_MUST_USE_RESULT ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo* release_drop_info();
  ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo* mutable_drop_info();
  void set_allocated_drop_info(::CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo* drop_info);
  private:
  const ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo& _internal_drop_info() const;
  ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo* _internal_mutable_drop_info();
  public:
  void unsafe_arena_set_allocated_drop_info(
      ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo* drop_info);
  ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo* unsafe_arena_release_drop_info();

  // optional uint64 reservationid = 1;
  bool has_reservationid() const;
  private:
  bool _internal_has_reservationid() const;
  public:
  void clear_reservationid();
  ::PROTOBUF_NAMESPACE_ID::uint64 reservationid() const;
  void set_reservationid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_reservationid() const;
  void _internal_set_reservationid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional int32 round = 4;
  bool has_round() const;
  private:
  bool _internal_has_round() const;
  public:
  void clear_round();
  ::PROTOBUF_NAMESPACE_ID::int32 round() const;
  void set_round(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_round() const;
  void _internal_set_round(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 round_result = 10;
  bool has_round_result() const;
  private:
  bool _internal_has_round_result() const;
  public:
  void clear_round_result();
  ::PROTOBUF_NAMESPACE_ID::int32 round_result() const;
  void set_round_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_round_result() const;
  void _internal_set_round_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 match_result = 11;
  bool has_match_result() const;
  private:
  bool _internal_has_match_result() const;
  public:
  void clear_match_result();
  ::PROTOBUF_NAMESPACE_ID::int32 match_result() const;
  void set_match_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_match_result() const;
  void _internal_set_match_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 reservation_stage = 14;
  bool has_reservation_stage() const;
  private:
  bool _internal_has_reservation_stage() const;
  public:
  void clear_reservation_stage();
  ::PROTOBUF_NAMESPACE_ID::int32 reservation_stage() const;
  void set_reservation_stage(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_reservation_stage() const;
  void _internal_set_reservation_stage(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 match_duration = 15;
  bool has_match_duration() const;
  private:
  bool _internal_has_match_duration() const;
  public:
  void clear_match_duration();
  ::PROTOBUF_NAMESPACE_ID::int32 match_duration() const;
  void set_match_duration(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_match_duration() const;
  void _internal_set_match_duration(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint32 spectators_count = 22;
  bool has_spectators_count() const;
  private:
  bool _internal_has_spectators_count() const;
  public:
  void clear_spectators_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 spectators_count() const;
  void set_spectators_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_spectators_count() const;
  void _internal_set_spectators_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 spectators_count_tv = 23;
  bool has_spectators_count_tv() const;
  private:
  bool _internal_has_spectators_count_tv() const;
  public:
  void clear_spectators_count_tv();
  ::PROTOBUF_NAMESPACE_ID::uint32 spectators_count_tv() const;
  void set_spectators_count_tv(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_spectators_count_tv() const;
  void _internal_set_spectators_count_tv(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 spectators_count_lnk = 24;
  bool has_spectators_count_lnk() const;
  private:
  bool _internal_has_spectators_count_lnk() const;
  public:
  void clear_spectators_count_lnk();
  ::PROTOBUF_NAMESPACE_ID::uint32 spectators_count_lnk() const;
  void set_spectators_count_lnk(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_spectators_count_lnk() const;
  void _internal_set_spectators_count_lnk(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_MatchmakingServerRoundStats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > kills_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > assists_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > deaths_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > scores_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > pings_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > team_scores_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > enemy_kills_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > enemy_headshots_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > enemy_3ks_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > enemy_4ks_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > enemy_5ks_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > mvps_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > enemy_kills_agg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr map_;
  ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* reservation_;
  ::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm* confirm_;
  ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo* drop_info_;
  ::PROTOBUF_NAMESPACE_ID::uint64 reservationid_;
  ::PROTOBUF_NAMESPACE_ID::int32 round_;
  ::PROTOBUF_NAMESPACE_ID::int32 round_result_;
  ::PROTOBUF_NAMESPACE_ID::int32 match_result_;
  ::PROTOBUF_NAMESPACE_ID::int32 reservation_stage_;
  ::PROTOBUF_NAMESPACE_ID::int32 match_duration_;
  ::PROTOBUF_NAMESPACE_ID::uint32 spectators_count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 spectators_count_tv_;
  ::PROTOBUF_NAMESPACE_ID::uint32 spectators_count_lnk_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_MatchmakingServerMatchEnd final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCCStrike15_v2_MatchmakingServerMatchEnd) */ {
 public:
  inline CMsgGCCStrike15_v2_MatchmakingServerMatchEnd() : CMsgGCCStrike15_v2_MatchmakingServerMatchEnd(nullptr) {}
  ~CMsgGCCStrike15_v2_MatchmakingServerMatchEnd() override;
  explicit constexpr CMsgGCCStrike15_v2_MatchmakingServerMatchEnd(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCCStrike15_v2_MatchmakingServerMatchEnd(const CMsgGCCStrike15_v2_MatchmakingServerMatchEnd& from);
  CMsgGCCStrike15_v2_MatchmakingServerMatchEnd(CMsgGCCStrike15_v2_MatchmakingServerMatchEnd&& from) noexcept
    : CMsgGCCStrike15_v2_MatchmakingServerMatchEnd() {
    *this = ::std::move(from);
  }

  inline CMsgGCCStrike15_v2_MatchmakingServerMatchEnd& operator=(const CMsgGCCStrike15_v2_MatchmakingServerMatchEnd& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCCStrike15_v2_MatchmakingServerMatchEnd& operator=(CMsgGCCStrike15_v2_MatchmakingServerMatchEnd&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCCStrike15_v2_MatchmakingServerMatchEnd& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCCStrike15_v2_MatchmakingServerMatchEnd* internal_default_instance() {
    return reinterpret_cast<const CMsgGCCStrike15_v2_MatchmakingServerMatchEnd*>(
               &_CMsgGCCStrike15_v2_MatchmakingServerMatchEnd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(CMsgGCCStrike15_v2_MatchmakingServerMatchEnd& a, CMsgGCCStrike15_v2_MatchmakingServerMatchEnd& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCCStrike15_v2_MatchmakingServerMatchEnd* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCCStrike15_v2_MatchmakingServerMatchEnd* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCCStrike15_v2_MatchmakingServerMatchEnd* New() const final {
    return new CMsgGCCStrike15_v2_MatchmakingServerMatchEnd();
  }

  CMsgGCCStrike15_v2_MatchmakingServerMatchEnd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCCStrike15_v2_MatchmakingServerMatchEnd>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCCStrike15_v2_MatchmakingServerMatchEnd& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgGCCStrike15_v2_MatchmakingServerMatchEnd& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCCStrike15_v2_MatchmakingServerMatchEnd* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCCStrike15_v2_MatchmakingServerMatchEnd";
  }
  protected:
  explicit CMsgGCCStrike15_v2_MatchmakingServerMatchEnd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatsFieldNumber = 1,
    kConfirmFieldNumber = 3,
    kMatchEndQuestDataFieldNumber = 8,
    kRematchFieldNumber = 4,
    kReplayTokenFieldNumber = 5,
    kReplayClusterIdFieldNumber = 6,
    kAbortedMatchFieldNumber = 7,
    kServerVersionFieldNumber = 9,
  };
  // optional .CMsgGCCStrike15_v2_MatchmakingServerRoundStats stats = 1;
  bool has_stats() const;
  private:
  bool _internal_has_stats() const;
  public:
  void clear_stats();
  const ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats& stats() const;
  PROTOBUF_MUST_USE_RESULT ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats* release_stats();
  ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats* mutable_stats();
  void set_allocated_stats(::CMsgGCCStrike15_v2_MatchmakingServerRoundStats* stats);
  private:
  const ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats& _internal_stats() const;
  ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats* _internal_mutable_stats();
  public:
  void unsafe_arena_set_allocated_stats(
      ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats* stats);
  ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats* unsafe_arena_release_stats();

  // optional .CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm confirm = 3;
  bool has_confirm() const;
  private:
  bool _internal_has_confirm() const;
  public:
  void clear_confirm();
  const ::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm& confirm() const;
  PROTOBUF_MUST_USE_RESULT ::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm* release_confirm();
  ::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm* mutable_confirm();
  void set_allocated_confirm(::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm* confirm);
  private:
  const ::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm& _internal_confirm() const;
  ::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm* _internal_mutable_confirm();
  public:
  void unsafe_arena_set_allocated_confirm(
      ::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm* confirm);
  ::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm* unsafe_arena_release_confirm();

  // optional .CMsgGC_ServerQuestUpdateData match_end_quest_data = 8;
  bool has_match_end_quest_data() const;
  private:
  bool _internal_has_match_end_quest_data() const;
  public:
  void clear_match_end_quest_data();
  const ::CMsgGC_ServerQuestUpdateData& match_end_quest_data() const;
  PROTOBUF_MUST_USE_RESULT ::CMsgGC_ServerQuestUpdateData* release_match_end_quest_data();
  ::CMsgGC_ServerQuestUpdateData* mutable_match_end_quest_data();
  void set_allocated_match_end_quest_data(::CMsgGC_ServerQuestUpdateData* match_end_quest_data);
  private:
  const ::CMsgGC_ServerQuestUpdateData& _internal_match_end_quest_data() const;
  ::CMsgGC_ServerQuestUpdateData* _internal_mutable_match_end_quest_data();
  public:
  void unsafe_arena_set_allocated_match_end_quest_data(
      ::CMsgGC_ServerQuestUpdateData* match_end_quest_data);
  ::CMsgGC_ServerQuestUpdateData* unsafe_arena_release_match_end_quest_data();

  // optional uint64 rematch = 4;
  bool has_rematch() const;
  private:
  bool _internal_has_rematch() const;
  public:
  void clear_rematch();
  ::PROTOBUF_NAMESPACE_ID::uint64 rematch() const;
  void set_rematch(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_rematch() const;
  void _internal_set_rematch(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 replay_token = 5;
  bool has_replay_token() const;
  private:
  bool _internal_has_replay_token() const;
  public:
  void clear_replay_token();
  ::PROTOBUF_NAMESPACE_ID::uint32 replay_token() const;
  void set_replay_token(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_replay_token() const;
  void _internal_set_replay_token(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 replay_cluster_id = 6;
  bool has_replay_cluster_id() const;
  private:
  bool _internal_has_replay_cluster_id() const;
  public:
  void clear_replay_cluster_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 replay_cluster_id() const;
  void set_replay_cluster_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_replay_cluster_id() const;
  void _internal_set_replay_cluster_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool aborted_match = 7;
  bool has_aborted_match() const;
  private:
  bool _internal_has_aborted_match() const;
  public:
  void clear_aborted_match();
  bool aborted_match() const;
  void set_aborted_match(bool value);
  private:
  bool _internal_aborted_match() const;
  void _internal_set_aborted_match(bool value);
  public:

  // optional uint32 server_version = 9;
  bool has_server_version() const;
  private:
  bool _internal_has_server_version() const;
  public:
  void clear_server_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 server_version() const;
  void set_server_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_server_version() const;
  void _internal_set_server_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_MatchmakingServerMatchEnd)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats* stats_;
  ::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm* confirm_;
  ::CMsgGC_ServerQuestUpdateData* match_end_quest_data_;
  ::PROTOBUF_NAMESPACE_ID::uint64 rematch_;
  ::PROTOBUF_NAMESPACE_ID::uint32 replay_token_;
  ::PROTOBUF_NAMESPACE_ID::uint32 replay_cluster_id_;
  bool aborted_match_;
  ::PROTOBUF_NAMESPACE_ID::uint32 server_version_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_MatchmakingClient2GCHello final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CMsgGCCStrike15_v2_MatchmakingClient2GCHello) */ {
 public:
  inline CMsgGCCStrike15_v2_MatchmakingClient2GCHello() : CMsgGCCStrike15_v2_MatchmakingClient2GCHello(nullptr) {}
  explicit constexpr CMsgGCCStrike15_v2_MatchmakingClient2GCHello(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCCStrike15_v2_MatchmakingClient2GCHello(const CMsgGCCStrike15_v2_MatchmakingClient2GCHello& from);
  CMsgGCCStrike15_v2_MatchmakingClient2GCHello(CMsgGCCStrike15_v2_MatchmakingClient2GCHello&& from) noexcept
    : CMsgGCCStrike15_v2_MatchmakingClient2GCHello() {
    *this = ::std::move(from);
  }

  inline CMsgGCCStrike15_v2_MatchmakingClient2GCHello& operator=(const CMsgGCCStrike15_v2_MatchmakingClient2GCHello& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCCStrike15_v2_MatchmakingClient2GCHello& operator=(CMsgGCCStrike15_v2_MatchmakingClient2GCHello&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCCStrike15_v2_MatchmakingClient2GCHello& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCCStrike15_v2_MatchmakingClient2GCHello* internal_default_instance() {
    return reinterpret_cast<const CMsgGCCStrike15_v2_MatchmakingClient2GCHello*>(
               &_CMsgGCCStrike15_v2_MatchmakingClient2GCHello_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(CMsgGCCStrike15_v2_MatchmakingClient2GCHello& a, CMsgGCCStrike15_v2_MatchmakingClient2GCHello& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCCStrike15_v2_MatchmakingClient2GCHello* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCCStrike15_v2_MatchmakingClient2GCHello* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCCStrike15_v2_MatchmakingClient2GCHello* New() const final {
    return new CMsgGCCStrike15_v2_MatchmakingClient2GCHello();
  }

  CMsgGCCStrike15_v2_MatchmakingClient2GCHello* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCCStrike15_v2_MatchmakingClient2GCHello>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CMsgGCCStrike15_v2_MatchmakingClient2GCHello& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CMsgGCCStrike15_v2_MatchmakingClient2GCHello& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCCStrike15_v2_MatchmakingClient2GCHello";
  }
  protected:
  explicit CMsgGCCStrike15_v2_MatchmakingClient2GCHello(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_MatchmakingClient2GCHello)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_MatchmakingGC2ClientHello final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCCStrike15_v2_MatchmakingGC2ClientHello) */ {
 public:
  inline CMsgGCCStrike15_v2_MatchmakingGC2ClientHello() : CMsgGCCStrike15_v2_MatchmakingGC2ClientHello(nullptr) {}
  ~CMsgGCCStrike15_v2_MatchmakingGC2ClientHello() override;
  explicit constexpr CMsgGCCStrike15_v2_MatchmakingGC2ClientHello(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCCStrike15_v2_MatchmakingGC2ClientHello(const CMsgGCCStrike15_v2_MatchmakingGC2ClientHello& from);
  CMsgGCCStrike15_v2_MatchmakingGC2ClientHello(CMsgGCCStrike15_v2_MatchmakingGC2ClientHello&& from) noexcept
    : CMsgGCCStrike15_v2_MatchmakingGC2ClientHello() {
    *this = ::std::move(from);
  }

  inline CMsgGCCStrike15_v2_MatchmakingGC2ClientHello& operator=(const CMsgGCCStrike15_v2_MatchmakingGC2ClientHello& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCCStrike15_v2_MatchmakingGC2ClientHello& operator=(CMsgGCCStrike15_v2_MatchmakingGC2ClientHello&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCCStrike15_v2_MatchmakingGC2ClientHello& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCCStrike15_v2_MatchmakingGC2ClientHello* internal_default_instance() {
    return reinterpret_cast<const CMsgGCCStrike15_v2_MatchmakingGC2ClientHello*>(
               &_CMsgGCCStrike15_v2_MatchmakingGC2ClientHello_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(CMsgGCCStrike15_v2_MatchmakingGC2ClientHello& a, CMsgGCCStrike15_v2_MatchmakingGC2ClientHello& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCCStrike15_v2_MatchmakingGC2ClientHello* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCCStrike15_v2_MatchmakingGC2ClientHello* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCCStrike15_v2_MatchmakingGC2ClientHello* New() const final {
    return new CMsgGCCStrike15_v2_MatchmakingGC2ClientHello();
  }

  CMsgGCCStrike15_v2_MatchmakingGC2ClientHello* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCCStrike15_v2_MatchmakingGC2ClientHello>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCCStrike15_v2_MatchmakingGC2ClientHello& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgGCCStrike15_v2_MatchmakingGC2ClientHello& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCCStrike15_v2_MatchmakingGC2ClientHello* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCCStrike15_v2_MatchmakingGC2ClientHello";
  }
  protected:
  explicit CMsgGCCStrike15_v2_MatchmakingGC2ClientHello(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMyCurrentEventTeamsFieldNumber = 11,
    kMyCurrentEventStagesFieldNumber = 13,
    kOngoingmatchFieldNumber = 2,
    kGlobalStatsFieldNumber = 3,
    kRankingFieldNumber = 7,
    kCommendationFieldNumber = 8,
    kMedalsFieldNumber = 9,
    kMyCurrentEventFieldNumber = 10,
    kMyCurrentTeamFieldNumber = 12,
    kActivityFieldNumber = 15,
    kAccountIdFieldNumber = 1,
    kPenaltySecondsFieldNumber = 4,
    kPenaltyReasonFieldNumber = 5,
    kVacBannedFieldNumber = 6,
    kSurveyVoteFieldNumber = 14,
    kPlayerLevelFieldNumber = 17,
    kPlayerCurXpFieldNumber = 18,
    kPlayerXpBonusFlagsFieldNumber = 19,
  };
  // repeated .TournamentTeam my_current_event_teams = 11;
  int my_current_event_teams_size() const;
  private:
  int _internal_my_current_event_teams_size() const;
  public:
  void clear_my_current_event_teams();
  ::TournamentTeam* mutable_my_current_event_teams(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TournamentTeam >*
      mutable_my_current_event_teams();
  private:
  const ::TournamentTeam& _internal_my_current_event_teams(int index) const;
  ::TournamentTeam* _internal_add_my_current_event_teams();
  public:
  const ::TournamentTeam& my_current_event_teams(int index) const;
  ::TournamentTeam* add_my_current_event_teams();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TournamentTeam >&
      my_current_event_teams() const;

  // repeated .TournamentEvent my_current_event_stages = 13;
  int my_current_event_stages_size() const;
  private:
  int _internal_my_current_event_stages_size() const;
  public:
  void clear_my_current_event_stages();
  ::TournamentEvent* mutable_my_current_event_stages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TournamentEvent >*
      mutable_my_current_event_stages();
  private:
  const ::TournamentEvent& _internal_my_current_event_stages(int index) const;
  ::TournamentEvent* _internal_add_my_current_event_stages();
  public:
  const ::TournamentEvent& my_current_event_stages(int index) const;
  ::TournamentEvent* add_my_current_event_stages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TournamentEvent >&
      my_current_event_stages() const;

  // optional .CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve ongoingmatch = 2;
  bool has_ongoingmatch() const;
  private:
  bool _internal_has_ongoingmatch() const;
  public:
  void clear_ongoingmatch();
  const ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve& ongoingmatch() const;
  PROTOBUF_MUST_USE_RESULT ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* release_ongoingmatch();
  ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* mutable_ongoingmatch();
  void set_allocated_ongoingmatch(::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* ongoingmatch);
  private:
  const ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve& _internal_ongoingmatch() const;
  ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* _internal_mutable_ongoingmatch();
  public:
  void unsafe_arena_set_allocated_ongoingmatch(
      ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* ongoingmatch);
  ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* unsafe_arena_release_ongoingmatch();

  // optional .GlobalStatistics global_stats = 3;
  bool has_global_stats() const;
  private:
  bool _internal_has_global_stats() const;
  public:
  void clear_global_stats();
  const ::GlobalStatistics& global_stats() const;
  PROTOBUF_MUST_USE_RESULT ::GlobalStatistics* release_global_stats();
  ::GlobalStatistics* mutable_global_stats();
  void set_allocated_global_stats(::GlobalStatistics* global_stats);
  private:
  const ::GlobalStatistics& _internal_global_stats() const;
  ::GlobalStatistics* _internal_mutable_global_stats();
  public:
  void unsafe_arena_set_allocated_global_stats(
      ::GlobalStatistics* global_stats);
  ::GlobalStatistics* unsafe_arena_release_global_stats();

  // optional .PlayerRankingInfo ranking = 7;
  bool has_ranking() const;
  private:
  bool _internal_has_ranking() const;
  public:
  void clear_ranking();
  const ::PlayerRankingInfo& ranking() const;
  PROTOBUF_MUST_USE_RESULT ::PlayerRankingInfo* release_ranking();
  ::PlayerRankingInfo* mutable_ranking();
  void set_allocated_ranking(::PlayerRankingInfo* ranking);
  private:
  const ::PlayerRankingInfo& _internal_ranking() const;
  ::PlayerRankingInfo* _internal_mutable_ranking();
  public:
  void unsafe_arena_set_allocated_ranking(
      ::PlayerRankingInfo* ranking);
  ::PlayerRankingInfo* unsafe_arena_release_ranking();

  // optional .PlayerCommendationInfo commendation = 8;
  bool has_commendation() const;
  private:
  bool _internal_has_commendation() const;
  public:
  void clear_commendation();
  const ::PlayerCommendationInfo& commendation() const;
  PROTOBUF_MUST_USE_RESULT ::PlayerCommendationInfo* release_commendation();
  ::PlayerCommendationInfo* mutable_commendation();
  void set_allocated_commendation(::PlayerCommendationInfo* commendation);
  private:
  const ::PlayerCommendationInfo& _internal_commendation() const;
  ::PlayerCommendationInfo* _internal_mutable_commendation();
  public:
  void unsafe_arena_set_allocated_commendation(
      ::PlayerCommendationInfo* commendation);
  ::PlayerCommendationInfo* unsafe_arena_release_commendation();

  // optional .PlayerMedalsInfo medals = 9;
  bool has_medals() const;
  private:
  bool _internal_has_medals() const;
  public:
  void clear_medals();
  const ::PlayerMedalsInfo& medals() const;
  PROTOBUF_MUST_USE_RESULT ::PlayerMedalsInfo* release_medals();
  ::PlayerMedalsInfo* mutable_medals();
  void set_allocated_medals(::PlayerMedalsInfo* medals);
  private:
  const ::PlayerMedalsInfo& _internal_medals() const;
  ::PlayerMedalsInfo* _internal_mutable_medals();
  public:
  void unsafe_arena_set_allocated_medals(
      ::PlayerMedalsInfo* medals);
  ::PlayerMedalsInfo* unsafe_arena_release_medals();

  // optional .TournamentEvent my_current_event = 10;
  bool has_my_current_event() const;
  private:
  bool _internal_has_my_current_event() const;
  public:
  void clear_my_current_event();
  const ::TournamentEvent& my_current_event() const;
  PROTOBUF_MUST_USE_RESULT ::TournamentEvent* release_my_current_event();
  ::TournamentEvent* mutable_my_current_event();
  void set_allocated_my_current_event(::TournamentEvent* my_current_event);
  private:
  const ::TournamentEvent& _internal_my_current_event() const;
  ::TournamentEvent* _internal_mutable_my_current_event();
  public:
  void unsafe_arena_set_allocated_my_current_event(
      ::TournamentEvent* my_current_event);
  ::TournamentEvent* unsafe_arena_release_my_current_event();

  // optional .TournamentTeam my_current_team = 12;
  bool has_my_current_team() const;
  private:
  bool _internal_has_my_current_team() const;
  public:
  void clear_my_current_team();
  const ::TournamentTeam& my_current_team() const;
  PROTOBUF_MUST_USE_RESULT ::TournamentTeam* release_my_current_team();
  ::TournamentTeam* mutable_my_current_team();
  void set_allocated_my_current_team(::TournamentTeam* my_current_team);
  private:
  const ::TournamentTeam& _internal_my_current_team() const;
  ::TournamentTeam* _internal_mutable_my_current_team();
  public:
  void unsafe_arena_set_allocated_my_current_team(
      ::TournamentTeam* my_current_team);
  ::TournamentTeam* unsafe_arena_release_my_current_team();

  // optional .AccountActivity activity = 15;
  bool has_activity() const;
  private:
  bool _internal_has_activity() const;
  public:
  void clear_activity();
  const ::AccountActivity& activity() const;
  PROTOBUF_MUST_USE_RESULT ::AccountActivity* release_activity();
  ::AccountActivity* mutable_activity();
  void set_allocated_activity(::AccountActivity* activity);
  private:
  const ::AccountActivity& _internal_activity() const;
  ::AccountActivity* _internal_mutable_activity();
  public:
  void unsafe_arena_set_allocated_activity(
      ::AccountActivity* activity);
  ::AccountActivity* unsafe_arena_release_activity();

  // optional uint32 account_id = 1;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 account_id() const;
  void set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_account_id() const;
  void _internal_set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 penalty_seconds = 4;
  bool has_penalty_seconds() const;
  private:
  bool _internal_has_penalty_seconds() const;
  public:
  void clear_penalty_seconds();
  ::PROTOBUF_NAMESPACE_ID::uint32 penalty_seconds() const;
  void set_penalty_seconds(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_penalty_seconds() const;
  void _internal_set_penalty_seconds(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 penalty_reason = 5;
  bool has_penalty_reason() const;
  private:
  bool _internal_has_penalty_reason() const;
  public:
  void clear_penalty_reason();
  ::PROTOBUF_NAMESPACE_ID::uint32 penalty_reason() const;
  void set_penalty_reason(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_penalty_reason() const;
  void _internal_set_penalty_reason(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int32 vac_banned = 6;
  bool has_vac_banned() const;
  private:
  bool _internal_has_vac_banned() const;
  public:
  void clear_vac_banned();
  ::PROTOBUF_NAMESPACE_ID::int32 vac_banned() const;
  void set_vac_banned(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_vac_banned() const;
  void _internal_set_vac_banned(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint32 survey_vote = 14;
  bool has_survey_vote() const;
  private:
  bool _internal_has_survey_vote() const;
  public:
  void clear_survey_vote();
  ::PROTOBUF_NAMESPACE_ID::uint32 survey_vote() const;
  void set_survey_vote(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_survey_vote() const;
  void _internal_set_survey_vote(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int32 player_level = 17;
  bool has_player_level() const;
  private:
  bool _internal_has_player_level() const;
  public:
  void clear_player_level();
  ::PROTOBUF_NAMESPACE_ID::int32 player_level() const;
  void set_player_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_player_level() const;
  void _internal_set_player_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 player_cur_xp = 18;
  bool has_player_cur_xp() const;
  private:
  bool _internal_has_player_cur_xp() const;
  public:
  void clear_player_cur_xp();
  ::PROTOBUF_NAMESPACE_ID::int32 player_cur_xp() const;
  void set_player_cur_xp(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_player_cur_xp() const;
  void _internal_set_player_cur_xp(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 player_xp_bonus_flags = 19;
  bool has_player_xp_bonus_flags() const;
  private:
  bool _internal_has_player_xp_bonus_flags() const;
  public:
  void clear_player_xp_bonus_flags();
  ::PROTOBUF_NAMESPACE_ID::int32 player_xp_bonus_flags() const;
  void set_player_xp_bonus_flags(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_player_xp_bonus_flags() const;
  void _internal_set_player_xp_bonus_flags(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_MatchmakingGC2ClientHello)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TournamentTeam > my_current_event_teams_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TournamentEvent > my_current_event_stages_;
  ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* ongoingmatch_;
  ::GlobalStatistics* global_stats_;
  ::PlayerRankingInfo* ranking_;
  ::PlayerCommendationInfo* commendation_;
  ::PlayerMedalsInfo* medals_;
  ::TournamentEvent* my_current_event_;
  ::TournamentTeam* my_current_team_;
  ::AccountActivity* activity_;
  ::PROTOBUF_NAMESPACE_ID::uint32 account_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 penalty_seconds_;
  ::PROTOBUF_NAMESPACE_ID::uint32 penalty_reason_;
  ::PROTOBUF_NAMESPACE_ID::int32 vac_banned_;
  ::PROTOBUF_NAMESPACE_ID::uint32 survey_vote_;
  ::PROTOBUF_NAMESPACE_ID::int32 player_level_;
  ::PROTOBUF_NAMESPACE_ID::int32 player_cur_xp_;
  ::PROTOBUF_NAMESPACE_ID::int32 player_xp_bonus_flags_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_AccountPrivacySettings_Setting final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCCStrike15_v2_AccountPrivacySettings.Setting) */ {
 public:
  inline CMsgGCCStrike15_v2_AccountPrivacySettings_Setting() : CMsgGCCStrike15_v2_AccountPrivacySettings_Setting(nullptr) {}
  ~CMsgGCCStrike15_v2_AccountPrivacySettings_Setting() override;
  explicit constexpr CMsgGCCStrike15_v2_AccountPrivacySettings_Setting(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCCStrike15_v2_AccountPrivacySettings_Setting(const CMsgGCCStrike15_v2_AccountPrivacySettings_Setting& from);
  CMsgGCCStrike15_v2_AccountPrivacySettings_Setting(CMsgGCCStrike15_v2_AccountPrivacySettings_Setting&& from) noexcept
    : CMsgGCCStrike15_v2_AccountPrivacySettings_Setting() {
    *this = ::std::move(from);
  }

  inline CMsgGCCStrike15_v2_AccountPrivacySettings_Setting& operator=(const CMsgGCCStrike15_v2_AccountPrivacySettings_Setting& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCCStrike15_v2_AccountPrivacySettings_Setting& operator=(CMsgGCCStrike15_v2_AccountPrivacySettings_Setting&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCCStrike15_v2_AccountPrivacySettings_Setting& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCCStrike15_v2_AccountPrivacySettings_Setting* internal_default_instance() {
    return reinterpret_cast<const CMsgGCCStrike15_v2_AccountPrivacySettings_Setting*>(
               &_CMsgGCCStrike15_v2_AccountPrivacySettings_Setting_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(CMsgGCCStrike15_v2_AccountPrivacySettings_Setting& a, CMsgGCCStrike15_v2_AccountPrivacySettings_Setting& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCCStrike15_v2_AccountPrivacySettings_Setting* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCCStrike15_v2_AccountPrivacySettings_Setting* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCCStrike15_v2_AccountPrivacySettings_Setting* New() const final {
    return new CMsgGCCStrike15_v2_AccountPrivacySettings_Setting();
  }

  CMsgGCCStrike15_v2_AccountPrivacySettings_Setting* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCCStrike15_v2_AccountPrivacySettings_Setting>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCCStrike15_v2_AccountPrivacySettings_Setting& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgGCCStrike15_v2_AccountPrivacySettings_Setting& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCCStrike15_v2_AccountPrivacySettings_Setting* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCCStrike15_v2_AccountPrivacySettings.Setting";
  }
  protected:
  explicit CMsgGCCStrike15_v2_AccountPrivacySettings_Setting(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSettingTypeFieldNumber = 1,
    kSettingValueFieldNumber = 2,
  };
  // optional uint32 setting_type = 1;
  bool has_setting_type() const;
  private:
  bool _internal_has_setting_type() const;
  public:
  void clear_setting_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 setting_type() const;
  void set_setting_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_setting_type() const;
  void _internal_set_setting_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 setting_value = 2;
  bool has_setting_value() const;
  private:
  bool _internal_has_setting_value() const;
  public:
  void clear_setting_value();
  ::PROTOBUF_NAMESPACE_ID::uint32 setting_value() const;
  void set_setting_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_setting_value() const;
  void _internal_set_setting_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_AccountPrivacySettings.Setting)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 setting_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 setting_value_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_AccountPrivacySettings final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCCStrike15_v2_AccountPrivacySettings) */ {
 public:
  inline CMsgGCCStrike15_v2_AccountPrivacySettings() : CMsgGCCStrike15_v2_AccountPrivacySettings(nullptr) {}
  ~CMsgGCCStrike15_v2_AccountPrivacySettings() override;
  explicit constexpr CMsgGCCStrike15_v2_AccountPrivacySettings(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCCStrike15_v2_AccountPrivacySettings(const CMsgGCCStrike15_v2_AccountPrivacySettings& from);
  CMsgGCCStrike15_v2_AccountPrivacySettings(CMsgGCCStrike15_v2_AccountPrivacySettings&& from) noexcept
    : CMsgGCCStrike15_v2_AccountPrivacySettings() {
    *this = ::std::move(from);
  }

  inline CMsgGCCStrike15_v2_AccountPrivacySettings& operator=(const CMsgGCCStrike15_v2_AccountPrivacySettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCCStrike15_v2_AccountPrivacySettings& operator=(CMsgGCCStrike15_v2_AccountPrivacySettings&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCCStrike15_v2_AccountPrivacySettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCCStrike15_v2_AccountPrivacySettings* internal_default_instance() {
    return reinterpret_cast<const CMsgGCCStrike15_v2_AccountPrivacySettings*>(
               &_CMsgGCCStrike15_v2_AccountPrivacySettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(CMsgGCCStrike15_v2_AccountPrivacySettings& a, CMsgGCCStrike15_v2_AccountPrivacySettings& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCCStrike15_v2_AccountPrivacySettings* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCCStrike15_v2_AccountPrivacySettings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCCStrike15_v2_AccountPrivacySettings* New() const final {
    return new CMsgGCCStrike15_v2_AccountPrivacySettings();
  }

  CMsgGCCStrike15_v2_AccountPrivacySettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCCStrike15_v2_AccountPrivacySettings>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCCStrike15_v2_AccountPrivacySettings& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgGCCStrike15_v2_AccountPrivacySettings& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCCStrike15_v2_AccountPrivacySettings* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCCStrike15_v2_AccountPrivacySettings";
  }
  protected:
  explicit CMsgGCCStrike15_v2_AccountPrivacySettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgGCCStrike15_v2_AccountPrivacySettings_Setting Setting;

  // accessors -------------------------------------------------------

  enum : int {
    kSettingsFieldNumber = 1,
  };
  // repeated .CMsgGCCStrike15_v2_AccountPrivacySettings.Setting settings = 1;
  int settings_size() const;
  private:
  int _internal_settings_size() const;
  public:
  void clear_settings();
  ::CMsgGCCStrike15_v2_AccountPrivacySettings_Setting* mutable_settings(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCCStrike15_v2_AccountPrivacySettings_Setting >*
      mutable_settings();
  private:
  const ::CMsgGCCStrike15_v2_AccountPrivacySettings_Setting& _internal_settings(int index) const;
  ::CMsgGCCStrike15_v2_AccountPrivacySettings_Setting* _internal_add_settings();
  public:
  const ::CMsgGCCStrike15_v2_AccountPrivacySettings_Setting& settings(int index) const;
  ::CMsgGCCStrike15_v2_AccountPrivacySettings_Setting* add_settings();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCCStrike15_v2_AccountPrivacySettings_Setting >&
      settings() const;

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_AccountPrivacySettings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCCStrike15_v2_AccountPrivacySettings_Setting > settings_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon) */ {
 public:
  inline CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon() : CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon(nullptr) {}
  ~CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon() override;
  explicit constexpr CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon(const CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon& from);
  CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon(CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon&& from) noexcept
    : CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon() {
    *this = ::std::move(from);
  }

  inline CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon& operator=(const CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon& operator=(CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon* internal_default_instance() {
    return reinterpret_cast<const CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon*>(
               &_CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon& a, CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon* New() const final {
    return new CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon();
  }

  CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon";
  }
  protected:
  explicit CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAbandonedMatchFieldNumber = 2,
    kAccountIdFieldNumber = 1,
    kPenaltySecondsFieldNumber = 3,
    kPenaltyReasonFieldNumber = 4,
  };
  // optional .CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve abandoned_match = 2;
  bool has_abandoned_match() const;
  private:
  bool _internal_has_abandoned_match() const;
  public:
  void clear_abandoned_match();
  const ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve& abandoned_match() const;
  PROTOBUF_MUST_USE_RESULT ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* release_abandoned_match();
  ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* mutable_abandoned_match();
  void set_allocated_abandoned_match(::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* abandoned_match);
  private:
  const ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve& _internal_abandoned_match() const;
  ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* _internal_mutable_abandoned_match();
  public:
  void unsafe_arena_set_allocated_abandoned_match(
      ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* abandoned_match);
  ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* unsafe_arena_release_abandoned_match();

  // optional uint32 account_id = 1;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 account_id() const;
  void set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_account_id() const;
  void _internal_set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 penalty_seconds = 3;
  bool has_penalty_seconds() const;
  private:
  bool _internal_has_penalty_seconds() const;
  public:
  void clear_penalty_seconds();
  ::PROTOBUF_NAMESPACE_ID::uint32 penalty_seconds() const;
  void set_penalty_seconds(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_penalty_seconds() const;
  void _internal_set_penalty_seconds(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 penalty_reason = 4;
  bool has_penalty_reason() const;
  private:
  bool _internal_has_penalty_reason() const;
  public:
  void clear_penalty_reason();
  ::PROTOBUF_NAMESPACE_ID::uint32 penalty_reason() const;
  void set_penalty_reason(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_penalty_reason() const;
  void _internal_set_penalty_reason(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* abandoned_match_;
  ::PROTOBUF_NAMESPACE_ID::uint32 account_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 penalty_seconds_;
  ::PROTOBUF_NAMESPACE_ID::uint32 penalty_reason_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_MatchmakingServer2GCKick final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCCStrike15_v2_MatchmakingServer2GCKick) */ {
 public:
  inline CMsgGCCStrike15_v2_MatchmakingServer2GCKick() : CMsgGCCStrike15_v2_MatchmakingServer2GCKick(nullptr) {}
  ~CMsgGCCStrike15_v2_MatchmakingServer2GCKick() override;
  explicit constexpr CMsgGCCStrike15_v2_MatchmakingServer2GCKick(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCCStrike15_v2_MatchmakingServer2GCKick(const CMsgGCCStrike15_v2_MatchmakingServer2GCKick& from);
  CMsgGCCStrike15_v2_MatchmakingServer2GCKick(CMsgGCCStrike15_v2_MatchmakingServer2GCKick&& from) noexcept
    : CMsgGCCStrike15_v2_MatchmakingServer2GCKick() {
    *this = ::std::move(from);
  }

  inline CMsgGCCStrike15_v2_MatchmakingServer2GCKick& operator=(const CMsgGCCStrike15_v2_MatchmakingServer2GCKick& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCCStrike15_v2_MatchmakingServer2GCKick& operator=(CMsgGCCStrike15_v2_MatchmakingServer2GCKick&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCCStrike15_v2_MatchmakingServer2GCKick& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCCStrike15_v2_MatchmakingServer2GCKick* internal_default_instance() {
    return reinterpret_cast<const CMsgGCCStrike15_v2_MatchmakingServer2GCKick*>(
               &_CMsgGCCStrike15_v2_MatchmakingServer2GCKick_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(CMsgGCCStrike15_v2_MatchmakingServer2GCKick& a, CMsgGCCStrike15_v2_MatchmakingServer2GCKick& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCCStrike15_v2_MatchmakingServer2GCKick* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCCStrike15_v2_MatchmakingServer2GCKick* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCCStrike15_v2_MatchmakingServer2GCKick* New() const final {
    return new CMsgGCCStrike15_v2_MatchmakingServer2GCKick();
  }

  CMsgGCCStrike15_v2_MatchmakingServer2GCKick* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCCStrike15_v2_MatchmakingServer2GCKick>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCCStrike15_v2_MatchmakingServer2GCKick& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgGCCStrike15_v2_MatchmakingServer2GCKick& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCCStrike15_v2_MatchmakingServer2GCKick* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCCStrike15_v2_MatchmakingServer2GCKick";
  }
  protected:
  explicit CMsgGCCStrike15_v2_MatchmakingServer2GCKick(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReservationFieldNumber = 2,
    kAccountIdFieldNumber = 1,
    kReasonFieldNumber = 3,
  };
  // optional .CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve reservation = 2;
  bool has_reservation() const;
  private:
  bool _internal_has_reservation() const;
  public:
  void clear_reservation();
  const ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve& reservation() const;
  PROTOBUF_MUST_USE_RESULT ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* release_reservation();
  ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* mutable_reservation();
  void set_allocated_reservation(::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* reservation);
  private:
  const ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve& _internal_reservation() const;
  ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* _internal_mutable_reservation();
  public:
  void unsafe_arena_set_allocated_reservation(
      ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* reservation);
  ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* unsafe_arena_release_reservation();

  // optional uint32 account_id = 1;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 account_id() const;
  void set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_account_id() const;
  void _internal_set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 reason = 3;
  bool has_reason() const;
  private:
  bool _internal_has_reason() const;
  public:
  void clear_reason();
  ::PROTOBUF_NAMESPACE_ID::uint32 reason() const;
  void set_reason(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_reason() const;
  void _internal_set_reason(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_MatchmakingServer2GCKick)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* reservation_;
  ::PROTOBUF_NAMESPACE_ID::uint32 account_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 reason_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate) */ {
 public:
  inline CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate() : CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate(nullptr) {}
  ~CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate() override;
  explicit constexpr CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate(const CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate& from);
  CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate(CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate&& from) noexcept
    : CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate() {
    *this = ::std::move(from);
  }

  inline CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate& operator=(const CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate& operator=(CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate* internal_default_instance() {
    return reinterpret_cast<const CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate*>(
               &_CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate& a, CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate* New() const final {
    return new CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate();
  }

  CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate";
  }
  protected:
  explicit CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRankingsFieldNumber = 1,
    kMatchIdFieldNumber = 2,
  };
  // repeated .PlayerRankingInfo rankings = 1;
  int rankings_size() const;
  private:
  int _internal_rankings_size() const;
  public:
  void clear_rankings();
  ::PlayerRankingInfo* mutable_rankings(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlayerRankingInfo >*
      mutable_rankings();
  private:
  const ::PlayerRankingInfo& _internal_rankings(int index) const;
  ::PlayerRankingInfo* _internal_add_rankings();
  public:
  const ::PlayerRankingInfo& rankings(int index) const;
  ::PlayerRankingInfo* add_rankings();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlayerRankingInfo >&
      rankings() const;

  // optional uint64 match_id = 2;
  bool has_match_id() const;
  private:
  bool _internal_has_match_id() const;
  public:
  void clear_match_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 match_id() const;
  void set_match_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_match_id() const;
  void _internal_set_match_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlayerRankingInfo > rankings_;
  ::PROTOBUF_NAMESPACE_ID::uint64 match_id_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate) */ {
 public:
  inline CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate() : CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate(nullptr) {}
  ~CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate() override;
  explicit constexpr CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate(const CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate& from);
  CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate(CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate&& from) noexcept
    : CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate() {
    *this = ::std::move(from);
  }

  inline CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate& operator=(const CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate& operator=(CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate* internal_default_instance() {
    return reinterpret_cast<const CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate*>(
               &_CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate& a, CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate* New() const final {
    return new CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate();
  }

  CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate";
  }
  protected:
  explicit CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMainPostUrlFieldNumber = 1,
  };
  // optional string main_post_url = 1;
  bool has_main_post_url() const;
  private:
  bool _internal_has_main_post_url() const;
  public:
  void clear_main_post_url();
  const std::string& main_post_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_main_post_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_main_post_url();
  PROTOBUF_MUST_USE_RESULT std::string* release_main_post_url();
  void set_allocated_main_post_url(std::string* main_post_url);
  private:
  const std::string& _internal_main_post_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_main_post_url(const std::string& value);
  std::string* _internal_mutable_main_post_url();
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr main_post_url_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_ServerNotificationForUserPenalty final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCCStrike15_v2_ServerNotificationForUserPenalty) */ {
 public:
  inline CMsgGCCStrike15_v2_ServerNotificationForUserPenalty() : CMsgGCCStrike15_v2_ServerNotificationForUserPenalty(nullptr) {}
  ~CMsgGCCStrike15_v2_ServerNotificationForUserPenalty() override;
  explicit constexpr CMsgGCCStrike15_v2_ServerNotificationForUserPenalty(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCCStrike15_v2_ServerNotificationForUserPenalty(const CMsgGCCStrike15_v2_ServerNotificationForUserPenalty& from);
  CMsgGCCStrike15_v2_ServerNotificationForUserPenalty(CMsgGCCStrike15_v2_ServerNotificationForUserPenalty&& from) noexcept
    : CMsgGCCStrike15_v2_ServerNotificationForUserPenalty() {
    *this = ::std::move(from);
  }

  inline CMsgGCCStrike15_v2_ServerNotificationForUserPenalty& operator=(const CMsgGCCStrike15_v2_ServerNotificationForUserPenalty& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCCStrike15_v2_ServerNotificationForUserPenalty& operator=(CMsgGCCStrike15_v2_ServerNotificationForUserPenalty&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCCStrike15_v2_ServerNotificationForUserPenalty& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCCStrike15_v2_ServerNotificationForUserPenalty* internal_default_instance() {
    return reinterpret_cast<const CMsgGCCStrike15_v2_ServerNotificationForUserPenalty*>(
               &_CMsgGCCStrike15_v2_ServerNotificationForUserPenalty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(CMsgGCCStrike15_v2_ServerNotificationForUserPenalty& a, CMsgGCCStrike15_v2_ServerNotificationForUserPenalty& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCCStrike15_v2_ServerNotificationForUserPenalty* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCCStrike15_v2_ServerNotificationForUserPenalty* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCCStrike15_v2_ServerNotificationForUserPenalty* New() const final {
    return new CMsgGCCStrike15_v2_ServerNotificationForUserPenalty();
  }

  CMsgGCCStrike15_v2_ServerNotificationForUserPenalty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCCStrike15_v2_ServerNotificationForUserPenalty>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCCStrike15_v2_ServerNotificationForUserPenalty& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgGCCStrike15_v2_ServerNotificationForUserPenalty& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCCStrike15_v2_ServerNotificationForUserPenalty* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCCStrike15_v2_ServerNotificationForUserPenalty";
  }
  protected:
  explicit CMsgGCCStrike15_v2_ServerNotificationForUserPenalty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 1,
    kReasonFieldNumber = 2,
    kSecondsFieldNumber = 3,
  };
  // optional uint32 account_id = 1;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 account_id() const;
  void set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_account_id() const;
  void _internal_set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 reason = 2;
  bool has_reason() const;
  private:
  bool _internal_has_reason() const;
  public:
  void clear_reason();
  ::PROTOBUF_NAMESPACE_ID::uint32 reason() const;
  void set_reason(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_reason() const;
  void _internal_set_reason(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 seconds = 3;
  bool has_seconds() const;
  private:
  bool _internal_has_seconds() const;
  public:
  void clear_seconds();
  ::PROTOBUF_NAMESPACE_ID::uint32 seconds() const;
  void set_seconds(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_seconds() const;
  void _internal_set_seconds(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_ServerNotificationForUserPenalty)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 account_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 reason_;
  ::PROTOBUF_NAMESPACE_ID::uint32 seconds_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_ClientReportPlayer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCCStrike15_v2_ClientReportPlayer) */ {
 public:
  inline CMsgGCCStrike15_v2_ClientReportPlayer() : CMsgGCCStrike15_v2_ClientReportPlayer(nullptr) {}
  ~CMsgGCCStrike15_v2_ClientReportPlayer() override;
  explicit constexpr CMsgGCCStrike15_v2_ClientReportPlayer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCCStrike15_v2_ClientReportPlayer(const CMsgGCCStrike15_v2_ClientReportPlayer& from);
  CMsgGCCStrike15_v2_ClientReportPlayer(CMsgGCCStrike15_v2_ClientReportPlayer&& from) noexcept
    : CMsgGCCStrike15_v2_ClientReportPlayer() {
    *this = ::std::move(from);
  }

  inline CMsgGCCStrike15_v2_ClientReportPlayer& operator=(const CMsgGCCStrike15_v2_ClientReportPlayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCCStrike15_v2_ClientReportPlayer& operator=(CMsgGCCStrike15_v2_ClientReportPlayer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCCStrike15_v2_ClientReportPlayer& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCCStrike15_v2_ClientReportPlayer* internal_default_instance() {
    return reinterpret_cast<const CMsgGCCStrike15_v2_ClientReportPlayer*>(
               &_CMsgGCCStrike15_v2_ClientReportPlayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(CMsgGCCStrike15_v2_ClientReportPlayer& a, CMsgGCCStrike15_v2_ClientReportPlayer& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCCStrike15_v2_ClientReportPlayer* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCCStrike15_v2_ClientReportPlayer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCCStrike15_v2_ClientReportPlayer* New() const final {
    return new CMsgGCCStrike15_v2_ClientReportPlayer();
  }

  CMsgGCCStrike15_v2_ClientReportPlayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCCStrike15_v2_ClientReportPlayer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCCStrike15_v2_ClientReportPlayer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgGCCStrike15_v2_ClientReportPlayer& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCCStrike15_v2_ClientReportPlayer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCCStrike15_v2_ClientReportPlayer";
  }
  protected:
  explicit CMsgGCCStrike15_v2_ClientReportPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 1,
    kRptAimbotFieldNumber = 2,
    kRptWallhackFieldNumber = 3,
    kRptSpeedhackFieldNumber = 4,
    kRptTeamharmFieldNumber = 5,
    kRptTextabuseFieldNumber = 6,
    kMatchIdFieldNumber = 8,
    kRptVoiceabuseFieldNumber = 7,
  };
  // optional uint32 account_id = 1;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 account_id() const;
  void set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_account_id() const;
  void _internal_set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 rpt_aimbot = 2;
  bool has_rpt_aimbot() const;
  private:
  bool _internal_has_rpt_aimbot() const;
  public:
  void clear_rpt_aimbot();
  ::PROTOBUF_NAMESPACE_ID::uint32 rpt_aimbot() const;
  void set_rpt_aimbot(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rpt_aimbot() const;
  void _internal_set_rpt_aimbot(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 rpt_wallhack = 3;
  bool has_rpt_wallhack() const;
  private:
  bool _internal_has_rpt_wallhack() const;
  public:
  void clear_rpt_wallhack();
  ::PROTOBUF_NAMESPACE_ID::uint32 rpt_wallhack() const;
  void set_rpt_wallhack(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rpt_wallhack() const;
  void _internal_set_rpt_wallhack(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 rpt_speedhack = 4;
  bool has_rpt_speedhack() const;
  private:
  bool _internal_has_rpt_speedhack() const;
  public:
  void clear_rpt_speedhack();
  ::PROTOBUF_NAMESPACE_ID::uint32 rpt_speedhack() const;
  void set_rpt_speedhack(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rpt_speedhack() const;
  void _internal_set_rpt_speedhack(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 rpt_teamharm = 5;
  bool has_rpt_teamharm() const;
  private:
  bool _internal_has_rpt_teamharm() const;
  public:
  void clear_rpt_teamharm();
  ::PROTOBUF_NAMESPACE_ID::uint32 rpt_teamharm() const;
  void set_rpt_teamharm(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rpt_teamharm() const;
  void _internal_set_rpt_teamharm(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 rpt_textabuse = 6;
  bool has_rpt_textabuse() const;
  private:
  bool _internal_has_rpt_textabuse() const;
  public:
  void clear_rpt_textabuse();
  ::PROTOBUF_NAMESPACE_ID::uint32 rpt_textabuse() const;
  void set_rpt_textabuse(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rpt_textabuse() const;
  void _internal_set_rpt_textabuse(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint64 match_id = 8;
  bool has_match_id() const;
  private:
  bool _internal_has_match_id() const;
  public:
  void clear_match_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 match_id() const;
  void set_match_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_match_id() const;
  void _internal_set_match_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 rpt_voiceabuse = 7;
  bool has_rpt_voiceabuse() const;
  private:
  bool _internal_has_rpt_voiceabuse() const;
  public:
  void clear_rpt_voiceabuse();
  ::PROTOBUF_NAMESPACE_ID::uint32 rpt_voiceabuse() const;
  void set_rpt_voiceabuse(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rpt_voiceabuse() const;
  void _internal_set_rpt_voiceabuse(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_ClientReportPlayer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 account_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rpt_aimbot_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rpt_wallhack_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rpt_speedhack_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rpt_teamharm_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rpt_textabuse_;
  ::PROTOBUF_NAMESPACE_ID::uint64 match_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rpt_voiceabuse_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_ClientCommendPlayer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCCStrike15_v2_ClientCommendPlayer) */ {
 public:
  inline CMsgGCCStrike15_v2_ClientCommendPlayer() : CMsgGCCStrike15_v2_ClientCommendPlayer(nullptr) {}
  ~CMsgGCCStrike15_v2_ClientCommendPlayer() override;
  explicit constexpr CMsgGCCStrike15_v2_ClientCommendPlayer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCCStrike15_v2_ClientCommendPlayer(const CMsgGCCStrike15_v2_ClientCommendPlayer& from);
  CMsgGCCStrike15_v2_ClientCommendPlayer(CMsgGCCStrike15_v2_ClientCommendPlayer&& from) noexcept
    : CMsgGCCStrike15_v2_ClientCommendPlayer() {
    *this = ::std::move(from);
  }

  inline CMsgGCCStrike15_v2_ClientCommendPlayer& operator=(const CMsgGCCStrike15_v2_ClientCommendPlayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCCStrike15_v2_ClientCommendPlayer& operator=(CMsgGCCStrike15_v2_ClientCommendPlayer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCCStrike15_v2_ClientCommendPlayer& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCCStrike15_v2_ClientCommendPlayer* internal_default_instance() {
    return reinterpret_cast<const CMsgGCCStrike15_v2_ClientCommendPlayer*>(
               &_CMsgGCCStrike15_v2_ClientCommendPlayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(CMsgGCCStrike15_v2_ClientCommendPlayer& a, CMsgGCCStrike15_v2_ClientCommendPlayer& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCCStrike15_v2_ClientCommendPlayer* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCCStrike15_v2_ClientCommendPlayer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCCStrike15_v2_ClientCommendPlayer* New() const final {
    return new CMsgGCCStrike15_v2_ClientCommendPlayer();
  }

  CMsgGCCStrike15_v2_ClientCommendPlayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCCStrike15_v2_ClientCommendPlayer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCCStrike15_v2_ClientCommendPlayer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgGCCStrike15_v2_ClientCommendPlayer& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCCStrike15_v2_ClientCommendPlayer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCCStrike15_v2_ClientCommendPlayer";
  }
  protected:
  explicit CMsgGCCStrike15_v2_ClientCommendPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommendationFieldNumber = 9,
    kAccountIdFieldNumber = 1,
    kTokensFieldNumber = 10,
    kMatchIdFieldNumber = 8,
  };
  // optional .PlayerCommendationInfo commendation = 9;
  bool has_commendation() const;
  private:
  bool _internal_has_commendation() const;
  public:
  void clear_commendation();
  const ::PlayerCommendationInfo& commendation() const;
  PROTOBUF_MUST_USE_RESULT ::PlayerCommendationInfo* release_commendation();
  ::PlayerCommendationInfo* mutable_commendation();
  void set_allocated_commendation(::PlayerCommendationInfo* commendation);
  private:
  const ::PlayerCommendationInfo& _internal_commendation() const;
  ::PlayerCommendationInfo* _internal_mutable_commendation();
  public:
  void unsafe_arena_set_allocated_commendation(
      ::PlayerCommendationInfo* commendation);
  ::PlayerCommendationInfo* unsafe_arena_release_commendation();

  // optional uint32 account_id = 1;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 account_id() const;
  void set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_account_id() const;
  void _internal_set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 tokens = 10;
  bool has_tokens() const;
  private:
  bool _internal_has_tokens() const;
  public:
  void clear_tokens();
  ::PROTOBUF_NAMESPACE_ID::uint32 tokens() const;
  void set_tokens(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tokens() const;
  void _internal_set_tokens(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint64 match_id = 8;
  bool has_match_id() const;
  private:
  bool _internal_has_match_id() const;
  public:
  void clear_match_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 match_id() const;
  void set_match_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_match_id() const;
  void _internal_set_match_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_ClientCommendPlayer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PlayerCommendationInfo* commendation_;
  ::PROTOBUF_NAMESPACE_ID::uint32 account_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tokens_;
  ::PROTOBUF_NAMESPACE_ID::uint64 match_id_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_ClientReportServer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCCStrike15_v2_ClientReportServer) */ {
 public:
  inline CMsgGCCStrike15_v2_ClientReportServer() : CMsgGCCStrike15_v2_ClientReportServer(nullptr) {}
  ~CMsgGCCStrike15_v2_ClientReportServer() override;
  explicit constexpr CMsgGCCStrike15_v2_ClientReportServer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCCStrike15_v2_ClientReportServer(const CMsgGCCStrike15_v2_ClientReportServer& from);
  CMsgGCCStrike15_v2_ClientReportServer(CMsgGCCStrike15_v2_ClientReportServer&& from) noexcept
    : CMsgGCCStrike15_v2_ClientReportServer() {
    *this = ::std::move(from);
  }

  inline CMsgGCCStrike15_v2_ClientReportServer& operator=(const CMsgGCCStrike15_v2_ClientReportServer& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCCStrike15_v2_ClientReportServer& operator=(CMsgGCCStrike15_v2_ClientReportServer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCCStrike15_v2_ClientReportServer& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCCStrike15_v2_ClientReportServer* internal_default_instance() {
    return reinterpret_cast<const CMsgGCCStrike15_v2_ClientReportServer*>(
               &_CMsgGCCStrike15_v2_ClientReportServer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(CMsgGCCStrike15_v2_ClientReportServer& a, CMsgGCCStrike15_v2_ClientReportServer& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCCStrike15_v2_ClientReportServer* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCCStrike15_v2_ClientReportServer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCCStrike15_v2_ClientReportServer* New() const final {
    return new CMsgGCCStrike15_v2_ClientReportServer();
  }

  CMsgGCCStrike15_v2_ClientReportServer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCCStrike15_v2_ClientReportServer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCCStrike15_v2_ClientReportServer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgGCCStrike15_v2_ClientReportServer& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCCStrike15_v2_ClientReportServer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCCStrike15_v2_ClientReportServer";
  }
  protected:
  explicit CMsgGCCStrike15_v2_ClientReportServer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRptPoorperfFieldNumber = 1,
    kRptAbusivemodelsFieldNumber = 2,
    kRptBadmotdFieldNumber = 3,
    kRptListingabuseFieldNumber = 4,
    kRptInventoryabuseFieldNumber = 5,
    kMatchIdFieldNumber = 8,
  };
  // optional uint32 rpt_poorperf = 1;
  bool has_rpt_poorperf() const;
  private:
  bool _internal_has_rpt_poorperf() const;
  public:
  void clear_rpt_poorperf();
  ::PROTOBUF_NAMESPACE_ID::uint32 rpt_poorperf() const;
  void set_rpt_poorperf(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rpt_poorperf() const;
  void _internal_set_rpt_poorperf(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 rpt_abusivemodels = 2;
  bool has_rpt_abusivemodels() const;
  private:
  bool _internal_has_rpt_abusivemodels() const;
  public:
  void clear_rpt_abusivemodels();
  ::PROTOBUF_NAMESPACE_ID::uint32 rpt_abusivemodels() const;
  void set_rpt_abusivemodels(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rpt_abusivemodels() const;
  void _internal_set_rpt_abusivemodels(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 rpt_badmotd = 3;
  bool has_rpt_badmotd() const;
  private:
  bool _internal_has_rpt_badmotd() const;
  public:
  void clear_rpt_badmotd();
  ::PROTOBUF_NAMESPACE_ID::uint32 rpt_badmotd() const;
  void set_rpt_badmotd(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rpt_badmotd() const;
  void _internal_set_rpt_badmotd(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 rpt_listingabuse = 4;
  bool has_rpt_listingabuse() const;
  private:
  bool _internal_has_rpt_listingabuse() const;
  public:
  void clear_rpt_listingabuse();
  ::PROTOBUF_NAMESPACE_ID::uint32 rpt_listingabuse() const;
  void set_rpt_listingabuse(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rpt_listingabuse() const;
  void _internal_set_rpt_listingabuse(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 rpt_inventoryabuse = 5;
  bool has_rpt_inventoryabuse() const;
  private:
  bool _internal_has_rpt_inventoryabuse() const;
  public:
  void clear_rpt_inventoryabuse();
  ::PROTOBUF_NAMESPACE_ID::uint32 rpt_inventoryabuse() const;
  void set_rpt_inventoryabuse(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rpt_inventoryabuse() const;
  void _internal_set_rpt_inventoryabuse(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint64 match_id = 8;
  bool has_match_id() const;
  private:
  bool _internal_has_match_id() const;
  public:
  void clear_match_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 match_id() const;
  void set_match_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_match_id() const;
  void _internal_set_match_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_ClientReportServer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rpt_poorperf_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rpt_abusivemodels_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rpt_badmotd_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rpt_listingabuse_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rpt_inventoryabuse_;
  ::PROTOBUF_NAMESPACE_ID::uint64 match_id_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_ClientReportResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCCStrike15_v2_ClientReportResponse) */ {
 public:
  inline CMsgGCCStrike15_v2_ClientReportResponse() : CMsgGCCStrike15_v2_ClientReportResponse(nullptr) {}
  ~CMsgGCCStrike15_v2_ClientReportResponse() override;
  explicit constexpr CMsgGCCStrike15_v2_ClientReportResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCCStrike15_v2_ClientReportResponse(const CMsgGCCStrike15_v2_ClientReportResponse& from);
  CMsgGCCStrike15_v2_ClientReportResponse(CMsgGCCStrike15_v2_ClientReportResponse&& from) noexcept
    : CMsgGCCStrike15_v2_ClientReportResponse() {
    *this = ::std::move(from);
  }

  inline CMsgGCCStrike15_v2_ClientReportResponse& operator=(const CMsgGCCStrike15_v2_ClientReportResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCCStrike15_v2_ClientReportResponse& operator=(CMsgGCCStrike15_v2_ClientReportResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCCStrike15_v2_ClientReportResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCCStrike15_v2_ClientReportResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgGCCStrike15_v2_ClientReportResponse*>(
               &_CMsgGCCStrike15_v2_ClientReportResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(CMsgGCCStrike15_v2_ClientReportResponse& a, CMsgGCCStrike15_v2_ClientReportResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCCStrike15_v2_ClientReportResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCCStrike15_v2_ClientReportResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCCStrike15_v2_ClientReportResponse* New() const final {
    return new CMsgGCCStrike15_v2_ClientReportResponse();
  }

  CMsgGCCStrike15_v2_ClientReportResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCCStrike15_v2_ClientReportResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCCStrike15_v2_ClientReportResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgGCCStrike15_v2_ClientReportResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCCStrike15_v2_ClientReportResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCCStrike15_v2_ClientReportResponse";
  }
  protected:
  explicit CMsgGCCStrike15_v2_ClientReportResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfirmationIdFieldNumber = 1,
    kAccountIdFieldNumber = 2,
    kServerIpFieldNumber = 3,
    kResponseTypeFieldNumber = 4,
    kResponseResultFieldNumber = 5,
    kTokensFieldNumber = 6,
  };
  // optional uint64 confirmation_id = 1;
  bool has_confirmation_id() const;
  private:
  bool _internal_has_confirmation_id() const;
  public:
  void clear_confirmation_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 confirmation_id() const;
  void set_confirmation_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_confirmation_id() const;
  void _internal_set_confirmation_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 account_id = 2;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 account_id() const;
  void set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_account_id() const;
  void _internal_set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 server_ip = 3;
  bool has_server_ip() const;
  private:
  bool _internal_has_server_ip() const;
  public:
  void clear_server_ip();
  ::PROTOBUF_NAMESPACE_ID::uint32 server_ip() const;
  void set_server_ip(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_server_ip() const;
  void _internal_set_server_ip(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 response_type = 4;
  bool has_response_type() const;
  private:
  bool _internal_has_response_type() const;
  public:
  void clear_response_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 response_type() const;
  void set_response_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_response_type() const;
  void _internal_set_response_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 response_result = 5;
  bool has_response_result() const;
  private:
  bool _internal_has_response_result() const;
  public:
  void clear_response_result();
  ::PROTOBUF_NAMESPACE_ID::uint32 response_result() const;
  void set_response_result(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_response_result() const;
  void _internal_set_response_result(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 tokens = 6;
  bool has_tokens() const;
  private:
  bool _internal_has_tokens() const;
  public:
  void clear_tokens();
  ::PROTOBUF_NAMESPACE_ID::uint32 tokens() const;
  void set_tokens(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tokens() const;
  void _internal_set_tokens(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_ClientReportResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 confirmation_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 account_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 server_ip_;
  ::PROTOBUF_NAMESPACE_ID::uint32 response_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 response_result_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tokens_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends) */ {
 public:
  inline CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends() : CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends(nullptr) {}
  ~CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends() override;
  explicit constexpr CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends(const CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends& from);
  CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends(CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends&& from) noexcept
    : CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends() {
    *this = ::std::move(from);
  }

  inline CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends& operator=(const CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends& operator=(CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends* internal_default_instance() {
    return reinterpret_cast<const CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends*>(
               &_CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends& a, CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends* New() const final {
    return new CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends();
  }

  CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends";
  }
  protected:
  explicit CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdsFieldNumber = 2,
    kServeridFieldNumber = 3,
    kMatchidFieldNumber = 4,
    kRequestIdFieldNumber = 1,
  };
  // repeated uint32 account_ids = 2;
  int account_ids_size() const;
  private:
  int _internal_account_ids_size() const;
  public:
  void clear_account_ids();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_account_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_account_ids() const;
  void _internal_add_account_ids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_account_ids();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 account_ids(int index) const;
  void set_account_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_account_ids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      account_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_account_ids();

  // optional uint64 serverid = 3;
  bool has_serverid() const;
  private:
  bool _internal_has_serverid() const;
  public:
  void clear_serverid();
  ::PROTOBUF_NAMESPACE_ID::uint64 serverid() const;
  void set_serverid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_serverid() const;
  void _internal_set_serverid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 matchid = 4;
  bool has_matchid() const;
  private:
  bool _internal_has_matchid() const;
  public:
  void clear_matchid();
  ::PROTOBUF_NAMESPACE_ID::uint64 matchid() const;
  void set_matchid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_matchid() const;
  void _internal_set_matchid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 request_id = 1;
  bool has_request_id() const;
  private:
  bool _internal_has_request_id() const;
  public:
  void clear_request_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 request_id() const;
  void set_request_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_request_id() const;
  void _internal_set_request_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > account_ids_;
  ::PROTOBUF_NAMESPACE_ID::uint64 serverid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 matchid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 request_id_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class WatchableMatchInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:WatchableMatchInfo) */ {
 public:
  inline WatchableMatchInfo() : WatchableMatchInfo(nullptr) {}
  ~WatchableMatchInfo() override;
  explicit constexpr WatchableMatchInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WatchableMatchInfo(const WatchableMatchInfo& from);
  WatchableMatchInfo(WatchableMatchInfo&& from) noexcept
    : WatchableMatchInfo() {
    *this = ::std::move(from);
  }

  inline WatchableMatchInfo& operator=(const WatchableMatchInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline WatchableMatchInfo& operator=(WatchableMatchInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WatchableMatchInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const WatchableMatchInfo* internal_default_instance() {
    return reinterpret_cast<const WatchableMatchInfo*>(
               &_WatchableMatchInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(WatchableMatchInfo& a, WatchableMatchInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(WatchableMatchInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WatchableMatchInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WatchableMatchInfo* New() const final {
    return new WatchableMatchInfo();
  }

  WatchableMatchInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WatchableMatchInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WatchableMatchInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WatchableMatchInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WatchableMatchInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "WatchableMatchInfo";
  }
  protected:
  explicit WatchableMatchInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTvWatchPasswordFieldNumber = 5,
    kGameMapgroupFieldNumber = 9,
    kGameMapFieldNumber = 10,
    kServerIpFieldNumber = 1,
    kTvPortFieldNumber = 2,
    kTvSpectatorsFieldNumber = 3,
    kTvTimeFieldNumber = 4,
    kClDecryptdataKeyFieldNumber = 6,
    kClDecryptdataKeyPubFieldNumber = 7,
    kServerIdFieldNumber = 11,
    kMatchIdFieldNumber = 12,
    kReservationIdFieldNumber = 13,
    kGameTypeFieldNumber = 8,
  };
  // optional bytes tv_watch_password = 5;
  bool has_tv_watch_password() const;
  private:
  bool _internal_has_tv_watch_password() const;
  public:
  void clear_tv_watch_password();
  const std::string& tv_watch_password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tv_watch_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tv_watch_password();
  PROTOBUF_MUST_USE_RESULT std::string* release_tv_watch_password();
  void set_allocated_tv_watch_password(std::string* tv_watch_password);
  private:
  const std::string& _internal_tv_watch_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tv_watch_password(const std::string& value);
  std::string* _internal_mutable_tv_watch_password();
  public:

  // optional string game_mapgroup = 9;
  bool has_game_mapgroup() const;
  private:
  bool _internal_has_game_mapgroup() const;
  public:
  void clear_game_mapgroup();
  const std::string& game_mapgroup() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_game_mapgroup(ArgT0&& arg0, ArgT... args);
  std::string* mutable_game_mapgroup();
  PROTOBUF_MUST_USE_RESULT std::string* release_game_mapgroup();
  void set_allocated_game_mapgroup(std::string* game_mapgroup);
  private:
  const std::string& _internal_game_mapgroup() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_game_mapgroup(const std::string& value);
  std::string* _internal_mutable_game_mapgroup();
  public:

  // optional string game_map = 10;
  bool has_game_map() const;
  private:
  bool _internal_has_game_map() const;
  public:
  void clear_game_map();
  const std::string& game_map() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_game_map(ArgT0&& arg0, ArgT... args);
  std::string* mutable_game_map();
  PROTOBUF_MUST_USE_RESULT std::string* release_game_map();
  void set_allocated_game_map(std::string* game_map);
  private:
  const std::string& _internal_game_map() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_game_map(const std::string& value);
  std::string* _internal_mutable_game_map();
  public:

  // optional uint32 server_ip = 1;
  bool has_server_ip() const;
  private:
  bool _internal_has_server_ip() const;
  public:
  void clear_server_ip();
  ::PROTOBUF_NAMESPACE_ID::uint32 server_ip() const;
  void set_server_ip(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_server_ip() const;
  void _internal_set_server_ip(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 tv_port = 2;
  bool has_tv_port() const;
  private:
  bool _internal_has_tv_port() const;
  public:
  void clear_tv_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 tv_port() const;
  void set_tv_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tv_port() const;
  void _internal_set_tv_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 tv_spectators = 3;
  bool has_tv_spectators() const;
  private:
  bool _internal_has_tv_spectators() const;
  public:
  void clear_tv_spectators();
  ::PROTOBUF_NAMESPACE_ID::uint32 tv_spectators() const;
  void set_tv_spectators(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tv_spectators() const;
  void _internal_set_tv_spectators(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 tv_time = 4;
  bool has_tv_time() const;
  private:
  bool _internal_has_tv_time() const;
  public:
  void clear_tv_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 tv_time() const;
  void set_tv_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tv_time() const;
  void _internal_set_tv_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint64 cl_decryptdata_key = 6;
  bool has_cl_decryptdata_key() const;
  private:
  bool _internal_has_cl_decryptdata_key() const;
  public:
  void clear_cl_decryptdata_key();
  ::PROTOBUF_NAMESPACE_ID::uint64 cl_decryptdata_key() const;
  void set_cl_decryptdata_key(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_cl_decryptdata_key() const;
  void _internal_set_cl_decryptdata_key(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 cl_decryptdata_key_pub = 7;
  bool has_cl_decryptdata_key_pub() const;
  private:
  bool _internal_has_cl_decryptdata_key_pub() const;
  public:
  void clear_cl_decryptdata_key_pub();
  ::PROTOBUF_NAMESPACE_ID::uint64 cl_decryptdata_key_pub() const;
  void set_cl_decryptdata_key_pub(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_cl_decryptdata_key_pub() const;
  void _internal_set_cl_decryptdata_key_pub(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 server_id = 11;
  bool has_server_id() const;
  private:
  bool _internal_has_server_id() const;
  public:
  void clear_server_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 server_id() const;
  void set_server_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_server_id() const;
  void _internal_set_server_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 match_id = 12;
  bool has_match_id() const;
  private:
  bool _internal_has_match_id() const;
  public:
  void clear_match_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 match_id() const;
  void set_match_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_match_id() const;
  void _internal_set_match_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 reservation_id = 13;
  bool has_reservation_id() const;
  private:
  bool _internal_has_reservation_id() const;
  public:
  void clear_reservation_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 reservation_id() const;
  void set_reservation_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_reservation_id() const;
  void _internal_set_reservation_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 game_type = 8;
  bool has_game_type() const;
  private:
  bool _internal_has_game_type() const;
  public:
  void clear_game_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 game_type() const;
  void set_game_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_game_type() const;
  void _internal_set_game_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:WatchableMatchInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tv_watch_password_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr game_mapgroup_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr game_map_;
  ::PROTOBUF_NAMESPACE_ID::uint32 server_ip_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tv_port_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tv_spectators_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tv_time_;
  ::PROTOBUF_NAMESPACE_ID::uint64 cl_decryptdata_key_;
  ::PROTOBUF_NAMESPACE_ID::uint64 cl_decryptdata_key_pub_;
  ::PROTOBUF_NAMESPACE_ID::uint64 server_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 match_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 reservation_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 game_type_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_ClientRequestJoinFriendData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCCStrike15_v2_ClientRequestJoinFriendData) */ {
 public:
  inline CMsgGCCStrike15_v2_ClientRequestJoinFriendData() : CMsgGCCStrike15_v2_ClientRequestJoinFriendData(nullptr) {}
  ~CMsgGCCStrike15_v2_ClientRequestJoinFriendData() override;
  explicit constexpr CMsgGCCStrike15_v2_ClientRequestJoinFriendData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCCStrike15_v2_ClientRequestJoinFriendData(const CMsgGCCStrike15_v2_ClientRequestJoinFriendData& from);
  CMsgGCCStrike15_v2_ClientRequestJoinFriendData(CMsgGCCStrike15_v2_ClientRequestJoinFriendData&& from) noexcept
    : CMsgGCCStrike15_v2_ClientRequestJoinFriendData() {
    *this = ::std::move(from);
  }

  inline CMsgGCCStrike15_v2_ClientRequestJoinFriendData& operator=(const CMsgGCCStrike15_v2_ClientRequestJoinFriendData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCCStrike15_v2_ClientRequestJoinFriendData& operator=(CMsgGCCStrike15_v2_ClientRequestJoinFriendData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCCStrike15_v2_ClientRequestJoinFriendData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCCStrike15_v2_ClientRequestJoinFriendData* internal_default_instance() {
    return reinterpret_cast<const CMsgGCCStrike15_v2_ClientRequestJoinFriendData*>(
               &_CMsgGCCStrike15_v2_ClientRequestJoinFriendData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(CMsgGCCStrike15_v2_ClientRequestJoinFriendData& a, CMsgGCCStrike15_v2_ClientRequestJoinFriendData& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCCStrike15_v2_ClientRequestJoinFriendData* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCCStrike15_v2_ClientRequestJoinFriendData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCCStrike15_v2_ClientRequestJoinFriendData* New() const final {
    return new CMsgGCCStrike15_v2_ClientRequestJoinFriendData();
  }

  CMsgGCCStrike15_v2_ClientRequestJoinFriendData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCCStrike15_v2_ClientRequestJoinFriendData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCCStrike15_v2_ClientRequestJoinFriendData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgGCCStrike15_v2_ClientRequestJoinFriendData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCCStrike15_v2_ClientRequestJoinFriendData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCCStrike15_v2_ClientRequestJoinFriendData";
  }
  protected:
  explicit CMsgGCCStrike15_v2_ClientRequestJoinFriendData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrormsgFieldNumber = 6,
    kResFieldNumber = 5,
    kVersionFieldNumber = 1,
    kAccountIdFieldNumber = 2,
    kJoinTokenFieldNumber = 3,
    kJoinIppFieldNumber = 4,
  };
  // optional string errormsg = 6;
  bool has_errormsg() const;
  private:
  bool _internal_has_errormsg() const;
  public:
  void clear_errormsg();
  const std::string& errormsg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_errormsg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_errormsg();
  PROTOBUF_MUST_USE_RESULT std::string* release_errormsg();
  void set_allocated_errormsg(std::string* errormsg);
  private:
  const std::string& _internal_errormsg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_errormsg(const std::string& value);
  std::string* _internal_mutable_errormsg();
  public:

  // optional .CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve res = 5;
  bool has_res() const;
  private:
  bool _internal_has_res() const;
  public:
  void clear_res();
  const ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve& res() const;
  PROTOBUF_MUST_USE_RESULT ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* release_res();
  ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* mutable_res();
  void set_allocated_res(::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* res);
  private:
  const ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve& _internal_res() const;
  ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* _internal_mutable_res();
  public:
  void unsafe_arena_set_allocated_res(
      ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* res);
  ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* unsafe_arena_release_res();

  // optional uint32 version = 1;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 account_id = 2;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 account_id() const;
  void set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_account_id() const;
  void _internal_set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 join_token = 3;
  bool has_join_token() const;
  private:
  bool _internal_has_join_token() const;
  public:
  void clear_join_token();
  ::PROTOBUF_NAMESPACE_ID::uint32 join_token() const;
  void set_join_token(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_join_token() const;
  void _internal_set_join_token(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 join_ipp = 4;
  bool has_join_ipp() const;
  private:
  bool _internal_has_join_ipp() const;
  public:
  void clear_join_ipp();
  ::PROTOBUF_NAMESPACE_ID::uint32 join_ipp() const;
  void set_join_ipp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_join_ipp() const;
  void _internal_set_join_ipp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_ClientRequestJoinFriendData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errormsg_;
  ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* res_;
  ::PROTOBUF_NAMESPACE_ID::uint32 version_;
  ::PROTOBUF_NAMESPACE_ID::uint32 account_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 join_token_;
  ::PROTOBUF_NAMESPACE_ID::uint32 join_ipp_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_ClientRequestJoinServerData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCCStrike15_v2_ClientRequestJoinServerData) */ {
 public:
  inline CMsgGCCStrike15_v2_ClientRequestJoinServerData() : CMsgGCCStrike15_v2_ClientRequestJoinServerData(nullptr) {}
  ~CMsgGCCStrike15_v2_ClientRequestJoinServerData() override;
  explicit constexpr CMsgGCCStrike15_v2_ClientRequestJoinServerData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCCStrike15_v2_ClientRequestJoinServerData(const CMsgGCCStrike15_v2_ClientRequestJoinServerData& from);
  CMsgGCCStrike15_v2_ClientRequestJoinServerData(CMsgGCCStrike15_v2_ClientRequestJoinServerData&& from) noexcept
    : CMsgGCCStrike15_v2_ClientRequestJoinServerData() {
    *this = ::std::move(from);
  }

  inline CMsgGCCStrike15_v2_ClientRequestJoinServerData& operator=(const CMsgGCCStrike15_v2_ClientRequestJoinServerData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCCStrike15_v2_ClientRequestJoinServerData& operator=(CMsgGCCStrike15_v2_ClientRequestJoinServerData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCCStrike15_v2_ClientRequestJoinServerData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCCStrike15_v2_ClientRequestJoinServerData* internal_default_instance() {
    return reinterpret_cast<const CMsgGCCStrike15_v2_ClientRequestJoinServerData*>(
               &_CMsgGCCStrike15_v2_ClientRequestJoinServerData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(CMsgGCCStrike15_v2_ClientRequestJoinServerData& a, CMsgGCCStrike15_v2_ClientRequestJoinServerData& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCCStrike15_v2_ClientRequestJoinServerData* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCCStrike15_v2_ClientRequestJoinServerData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCCStrike15_v2_ClientRequestJoinServerData* New() const final {
    return new CMsgGCCStrike15_v2_ClientRequestJoinServerData();
  }

  CMsgGCCStrike15_v2_ClientRequestJoinServerData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCCStrike15_v2_ClientRequestJoinServerData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCCStrike15_v2_ClientRequestJoinServerData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgGCCStrike15_v2_ClientRequestJoinServerData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCCStrike15_v2_ClientRequestJoinServerData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCCStrike15_v2_ClientRequestJoinServerData";
  }
  protected:
  explicit CMsgGCCStrike15_v2_ClientRequestJoinServerData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrormsgFieldNumber = 7,
    kResFieldNumber = 6,
    kVersionFieldNumber = 1,
    kAccountIdFieldNumber = 2,
    kServeridFieldNumber = 3,
    kServerIpFieldNumber = 4,
    kServerPortFieldNumber = 5,
  };
  // optional string errormsg = 7;
  bool has_errormsg() const;
  private:
  bool _internal_has_errormsg() const;
  public:
  void clear_errormsg();
  const std::string& errormsg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_errormsg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_errormsg();
  PROTOBUF_MUST_USE_RESULT std::string* release_errormsg();
  void set_allocated_errormsg(std::string* errormsg);
  private:
  const std::string& _internal_errormsg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_errormsg(const std::string& value);
  std::string* _internal_mutable_errormsg();
  public:

  // optional .CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve res = 6;
  bool has_res() const;
  private:
  bool _internal_has_res() const;
  public:
  void clear_res();
  const ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve& res() const;
  PROTOBUF_MUST_USE_RESULT ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* release_res();
  ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* mutable_res();
  void set_allocated_res(::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* res);
  private:
  const ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve& _internal_res() const;
  ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* _internal_mutable_res();
  public:
  void unsafe_arena_set_allocated_res(
      ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* res);
  ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* unsafe_arena_release_res();

  // optional uint32 version = 1;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 account_id = 2;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 account_id() const;
  void set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_account_id() const;
  void _internal_set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint64 serverid = 3;
  bool has_serverid() const;
  private:
  bool _internal_has_serverid() const;
  public:
  void clear_serverid();
  ::PROTOBUF_NAMESPACE_ID::uint64 serverid() const;
  void set_serverid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_serverid() const;
  void _internal_set_serverid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 server_ip = 4;
  bool has_server_ip() const;
  private:
  bool _internal_has_server_ip() const;
  public:
  void clear_server_ip();
  ::PROTOBUF_NAMESPACE_ID::uint32 server_ip() const;
  void set_server_ip(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_server_ip() const;
  void _internal_set_server_ip(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 server_port = 5;
  bool has_server_port() const;
  private:
  bool _internal_has_server_port() const;
  public:
  void clear_server_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 server_port() const;
  void set_server_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_server_port() const;
  void _internal_set_server_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_ClientRequestJoinServerData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errormsg_;
  ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* res_;
  ::PROTOBUF_NAMESPACE_ID::uint32 version_;
  ::PROTOBUF_NAMESPACE_ID::uint32 account_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 serverid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 server_ip_;
  ::PROTOBUF_NAMESPACE_ID::uint32 server_port_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCCstrike15_v2_ClientRequestNewMission final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCCstrike15_v2_ClientRequestNewMission) */ {
 public:
  inline CMsgGCCstrike15_v2_ClientRequestNewMission() : CMsgGCCstrike15_v2_ClientRequestNewMission(nullptr) {}
  ~CMsgGCCstrike15_v2_ClientRequestNewMission() override;
  explicit constexpr CMsgGCCstrike15_v2_ClientRequestNewMission(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCCstrike15_v2_ClientRequestNewMission(const CMsgGCCstrike15_v2_ClientRequestNewMission& from);
  CMsgGCCstrike15_v2_ClientRequestNewMission(CMsgGCCstrike15_v2_ClientRequestNewMission&& from) noexcept
    : CMsgGCCstrike15_v2_ClientRequestNewMission() {
    *this = ::std::move(from);
  }

  inline CMsgGCCstrike15_v2_ClientRequestNewMission& operator=(const CMsgGCCstrike15_v2_ClientRequestNewMission& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCCstrike15_v2_ClientRequestNewMission& operator=(CMsgGCCstrike15_v2_ClientRequestNewMission&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCCstrike15_v2_ClientRequestNewMission& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCCstrike15_v2_ClientRequestNewMission* internal_default_instance() {
    return reinterpret_cast<const CMsgGCCstrike15_v2_ClientRequestNewMission*>(
               &_CMsgGCCstrike15_v2_ClientRequestNewMission_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(CMsgGCCstrike15_v2_ClientRequestNewMission& a, CMsgGCCstrike15_v2_ClientRequestNewMission& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCCstrike15_v2_ClientRequestNewMission* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCCstrike15_v2_ClientRequestNewMission* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCCstrike15_v2_ClientRequestNewMission* New() const final {
    return new CMsgGCCstrike15_v2_ClientRequestNewMission();
  }

  CMsgGCCstrike15_v2_ClientRequestNewMission* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCCstrike15_v2_ClientRequestNewMission>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCCstrike15_v2_ClientRequestNewMission& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgGCCstrike15_v2_ClientRequestNewMission& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCCstrike15_v2_ClientRequestNewMission* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCCstrike15_v2_ClientRequestNewMission";
  }
  protected:
  explicit CMsgGCCstrike15_v2_ClientRequestNewMission(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMissionIdFieldNumber = 2,
    kCampaignIdFieldNumber = 3,
  };
  // optional uint32 mission_id = 2;
  bool has_mission_id() const;
  private:
  bool _internal_has_mission_id() const;
  public:
  void clear_mission_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 mission_id() const;
  void set_mission_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_mission_id() const;
  void _internal_set_mission_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 campaign_id = 3;
  bool has_campaign_id() const;
  private:
  bool _internal_has_campaign_id() const;
  public:
  void clear_campaign_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 campaign_id() const;
  void set_campaign_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_campaign_id() const;
  void _internal_set_campaign_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCCstrike15_v2_ClientRequestNewMission)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mission_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 campaign_id_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded) */ {
 public:
  inline CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded() : CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded(nullptr) {}
  ~CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded() override;
  explicit constexpr CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded(const CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded& from);
  CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded(CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded&& from) noexcept
    : CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded() {
    *this = ::std::move(from);
  }

  inline CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded& operator=(const CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded& operator=(CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded* internal_default_instance() {
    return reinterpret_cast<const CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded*>(
               &_CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded& a, CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded* New() const final {
    return new CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded();
  }

  CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded";
  }
  protected:
  explicit CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpProgressDataFieldNumber = 1,
    kAccountIdFieldNumber = 2,
    kCurrentXpFieldNumber = 3,
    kCurrentLevelFieldNumber = 4,
    kUpgradedDefidxFieldNumber = 5,
  };
  // repeated .XpProgressData xp_progress_data = 1;
  int xp_progress_data_size() const;
  private:
  int _internal_xp_progress_data_size() const;
  public:
  void clear_xp_progress_data();
  ::XpProgressData* mutable_xp_progress_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XpProgressData >*
      mutable_xp_progress_data();
  private:
  const ::XpProgressData& _internal_xp_progress_data(int index) const;
  ::XpProgressData* _internal_add_xp_progress_data();
  public:
  const ::XpProgressData& xp_progress_data(int index) const;
  ::XpProgressData* add_xp_progress_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XpProgressData >&
      xp_progress_data() const;

  // optional uint32 account_id = 2;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 account_id() const;
  void set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_account_id() const;
  void _internal_set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 current_xp = 3;
  bool has_current_xp() const;
  private:
  bool _internal_has_current_xp() const;
  public:
  void clear_current_xp();
  ::PROTOBUF_NAMESPACE_ID::uint32 current_xp() const;
  void set_current_xp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_current_xp() const;
  void _internal_set_current_xp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 current_level = 4;
  bool has_current_level() const;
  private:
  bool _internal_has_current_level() const;
  public:
  void clear_current_level();
  ::PROTOBUF_NAMESPACE_ID::uint32 current_level() const;
  void set_current_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_current_level() const;
  void _internal_set_current_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 upgraded_defidx = 5;
  bool has_upgraded_defidx() const;
  private:
  bool _internal_has_upgraded_defidx() const;
  public:
  void clear_upgraded_defidx();
  ::PROTOBUF_NAMESPACE_ID::uint32 upgraded_defidx() const;
  void set_upgraded_defidx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_upgraded_defidx() const;
  void _internal_set_upgraded_defidx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XpProgressData > xp_progress_data_;
  ::PROTOBUF_NAMESPACE_ID::uint32 account_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 current_xp_;
  ::PROTOBUF_NAMESPACE_ID::uint32 current_level_;
  ::PROTOBUF_NAMESPACE_ID::uint32 upgraded_defidx_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_WatchInfoUsers final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCCStrike15_v2_WatchInfoUsers) */ {
 public:
  inline CMsgGCCStrike15_v2_WatchInfoUsers() : CMsgGCCStrike15_v2_WatchInfoUsers(nullptr) {}
  ~CMsgGCCStrike15_v2_WatchInfoUsers() override;
  explicit constexpr CMsgGCCStrike15_v2_WatchInfoUsers(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCCStrike15_v2_WatchInfoUsers(const CMsgGCCStrike15_v2_WatchInfoUsers& from);
  CMsgGCCStrike15_v2_WatchInfoUsers(CMsgGCCStrike15_v2_WatchInfoUsers&& from) noexcept
    : CMsgGCCStrike15_v2_WatchInfoUsers() {
    *this = ::std::move(from);
  }

  inline CMsgGCCStrike15_v2_WatchInfoUsers& operator=(const CMsgGCCStrike15_v2_WatchInfoUsers& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCCStrike15_v2_WatchInfoUsers& operator=(CMsgGCCStrike15_v2_WatchInfoUsers&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCCStrike15_v2_WatchInfoUsers& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCCStrike15_v2_WatchInfoUsers* internal_default_instance() {
    return reinterpret_cast<const CMsgGCCStrike15_v2_WatchInfoUsers*>(
               &_CMsgGCCStrike15_v2_WatchInfoUsers_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(CMsgGCCStrike15_v2_WatchInfoUsers& a, CMsgGCCStrike15_v2_WatchInfoUsers& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCCStrike15_v2_WatchInfoUsers* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCCStrike15_v2_WatchInfoUsers* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCCStrike15_v2_WatchInfoUsers* New() const final {
    return new CMsgGCCStrike15_v2_WatchInfoUsers();
  }

  CMsgGCCStrike15_v2_WatchInfoUsers* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCCStrike15_v2_WatchInfoUsers>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCCStrike15_v2_WatchInfoUsers& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgGCCStrike15_v2_WatchInfoUsers& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCCStrike15_v2_WatchInfoUsers* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCCStrike15_v2_WatchInfoUsers";
  }
  protected:
  explicit CMsgGCCStrike15_v2_WatchInfoUsers(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdsFieldNumber = 2,
    kWatchableMatchInfosFieldNumber = 3,
    kRequestIdFieldNumber = 1,
    kExtendedTimeoutFieldNumber = 5,
  };
  // repeated uint32 account_ids = 2;
  int account_ids_size() const;
  private:
  int _internal_account_ids_size() const;
  public:
  void clear_account_ids();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_account_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_account_ids() const;
  void _internal_add_account_ids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_account_ids();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 account_ids(int index) const;
  void set_account_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_account_ids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      account_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_account_ids();

  // repeated .WatchableMatchInfo watchable_match_infos = 3;
  int watchable_match_infos_size() const;
  private:
  int _internal_watchable_match_infos_size() const;
  public:
  void clear_watchable_match_infos();
  ::WatchableMatchInfo* mutable_watchable_match_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::WatchableMatchInfo >*
      mutable_watchable_match_infos();
  private:
  const ::WatchableMatchInfo& _internal_watchable_match_infos(int index) const;
  ::WatchableMatchInfo* _internal_add_watchable_match_infos();
  public:
  const ::WatchableMatchInfo& watchable_match_infos(int index) const;
  ::WatchableMatchInfo* add_watchable_match_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::WatchableMatchInfo >&
      watchable_match_infos() const;

  // optional uint32 request_id = 1;
  bool has_request_id() const;
  private:
  bool _internal_has_request_id() const;
  public:
  void clear_request_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 request_id() const;
  void set_request_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_request_id() const;
  void _internal_set_request_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 extended_timeout = 5;
  bool has_extended_timeout() const;
  private:
  bool _internal_has_extended_timeout() const;
  public:
  void clear_extended_timeout();
  ::PROTOBUF_NAMESPACE_ID::uint32 extended_timeout() const;
  void set_extended_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_extended_timeout() const;
  void _internal_set_extended_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_WatchInfoUsers)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > account_ids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::WatchableMatchInfo > watchable_match_infos_;
  ::PROTOBUF_NAMESPACE_ID::uint32 request_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 extended_timeout_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_ClientRequestPlayersProfile final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCCStrike15_v2_ClientRequestPlayersProfile) */ {
 public:
  inline CMsgGCCStrike15_v2_ClientRequestPlayersProfile() : CMsgGCCStrike15_v2_ClientRequestPlayersProfile(nullptr) {}
  ~CMsgGCCStrike15_v2_ClientRequestPlayersProfile() override;
  explicit constexpr CMsgGCCStrike15_v2_ClientRequestPlayersProfile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCCStrike15_v2_ClientRequestPlayersProfile(const CMsgGCCStrike15_v2_ClientRequestPlayersProfile& from);
  CMsgGCCStrike15_v2_ClientRequestPlayersProfile(CMsgGCCStrike15_v2_ClientRequestPlayersProfile&& from) noexcept
    : CMsgGCCStrike15_v2_ClientRequestPlayersProfile() {
    *this = ::std::move(from);
  }

  inline CMsgGCCStrike15_v2_ClientRequestPlayersProfile& operator=(const CMsgGCCStrike15_v2_ClientRequestPlayersProfile& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCCStrike15_v2_ClientRequestPlayersProfile& operator=(CMsgGCCStrike15_v2_ClientRequestPlayersProfile&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCCStrike15_v2_ClientRequestPlayersProfile& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCCStrike15_v2_ClientRequestPlayersProfile* internal_default_instance() {
    return reinterpret_cast<const CMsgGCCStrike15_v2_ClientRequestPlayersProfile*>(
               &_CMsgGCCStrike15_v2_ClientRequestPlayersProfile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(CMsgGCCStrike15_v2_ClientRequestPlayersProfile& a, CMsgGCCStrike15_v2_ClientRequestPlayersProfile& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCCStrike15_v2_ClientRequestPlayersProfile* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCCStrike15_v2_ClientRequestPlayersProfile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCCStrike15_v2_ClientRequestPlayersProfile* New() const final {
    return new CMsgGCCStrike15_v2_ClientRequestPlayersProfile();
  }

  CMsgGCCStrike15_v2_ClientRequestPlayersProfile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCCStrike15_v2_ClientRequestPlayersProfile>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCCStrike15_v2_ClientRequestPlayersProfile& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgGCCStrike15_v2_ClientRequestPlayersProfile& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCCStrike15_v2_ClientRequestPlayersProfile* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCCStrike15_v2_ClientRequestPlayersProfile";
  }
  protected:
  explicit CMsgGCCStrike15_v2_ClientRequestPlayersProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdsDeprecatedFieldNumber = 2,
    kRequestIdDeprecatedFieldNumber = 1,
    kAccountIdFieldNumber = 3,
    kRequestLevelFieldNumber = 4,
  };
  // repeated uint32 account_ids__deprecated = 2;
  int account_ids__deprecated_size() const;
  private:
  int _internal_account_ids__deprecated_size() const;
  public:
  void clear_account_ids__deprecated();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_account_ids__deprecated(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_account_ids__deprecated() const;
  void _internal_add_account_ids__deprecated(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_account_ids__deprecated();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 account_ids__deprecated(int index) const;
  void set_account_ids__deprecated(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_account_ids__deprecated(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      account_ids__deprecated() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_account_ids__deprecated();

  // optional uint32 request_id__deprecated = 1;
  bool has_request_id__deprecated() const;
  private:
  bool _internal_has_request_id__deprecated() const;
  public:
  void clear_request_id__deprecated();
  ::PROTOBUF_NAMESPACE_ID::uint32 request_id__deprecated() const;
  void set_request_id__deprecated(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_request_id__deprecated() const;
  void _internal_set_request_id__deprecated(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 account_id = 3;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 account_id() const;
  void set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_account_id() const;
  void _internal_set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 request_level = 4;
  bool has_request_level() const;
  private:
  bool _internal_has_request_level() const;
  public:
  void clear_request_level();
  ::PROTOBUF_NAMESPACE_ID::uint32 request_level() const;
  void set_request_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_request_level() const;
  void _internal_set_request_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_ClientRequestPlayersProfile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > account_ids__deprecated_;
  ::PROTOBUF_NAMESPACE_ID::uint32 request_id__deprecated_;
  ::PROTOBUF_NAMESPACE_ID::uint32 account_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 request_level_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_PlayersProfile final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCCStrike15_v2_PlayersProfile) */ {
 public:
  inline CMsgGCCStrike15_v2_PlayersProfile() : CMsgGCCStrike15_v2_PlayersProfile(nullptr) {}
  ~CMsgGCCStrike15_v2_PlayersProfile() override;
  explicit constexpr CMsgGCCStrike15_v2_PlayersProfile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCCStrike15_v2_PlayersProfile(const CMsgGCCStrike15_v2_PlayersProfile& from);
  CMsgGCCStrike15_v2_PlayersProfile(CMsgGCCStrike15_v2_PlayersProfile&& from) noexcept
    : CMsgGCCStrike15_v2_PlayersProfile() {
    *this = ::std::move(from);
  }

  inline CMsgGCCStrike15_v2_PlayersProfile& operator=(const CMsgGCCStrike15_v2_PlayersProfile& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCCStrike15_v2_PlayersProfile& operator=(CMsgGCCStrike15_v2_PlayersProfile&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCCStrike15_v2_PlayersProfile& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCCStrike15_v2_PlayersProfile* internal_default_instance() {
    return reinterpret_cast<const CMsgGCCStrike15_v2_PlayersProfile*>(
               &_CMsgGCCStrike15_v2_PlayersProfile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(CMsgGCCStrike15_v2_PlayersProfile& a, CMsgGCCStrike15_v2_PlayersProfile& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCCStrike15_v2_PlayersProfile* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCCStrike15_v2_PlayersProfile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCCStrike15_v2_PlayersProfile* New() const final {
    return new CMsgGCCStrike15_v2_PlayersProfile();
  }

  CMsgGCCStrike15_v2_PlayersProfile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCCStrike15_v2_PlayersProfile>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCCStrike15_v2_PlayersProfile& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgGCCStrike15_v2_PlayersProfile& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCCStrike15_v2_PlayersProfile* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCCStrike15_v2_PlayersProfile";
  }
  protected:
  explicit CMsgGCCStrike15_v2_PlayersProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountProfilesFieldNumber = 2,
    kRequestIdFieldNumber = 1,
  };
  // repeated .CMsgGCCStrike15_v2_MatchmakingGC2ClientHello account_profiles = 2;
  int account_profiles_size() const;
  private:
  int _internal_account_profiles_size() const;
  public:
  void clear_account_profiles();
  ::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello* mutable_account_profiles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello >*
      mutable_account_profiles();
  private:
  const ::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello& _internal_account_profiles(int index) const;
  ::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello* _internal_add_account_profiles();
  public:
  const ::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello& account_profiles(int index) const;
  ::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello* add_account_profiles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello >&
      account_profiles() const;

  // optional uint32 request_id = 1;
  bool has_request_id() const;
  private:
  bool _internal_has_request_id() const;
  public:
  void clear_request_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 request_id() const;
  void set_request_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_request_id() const;
  void _internal_set_request_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_PlayersProfile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello > account_profiles_;
  ::PROTOBUF_NAMESPACE_ID::uint32 request_id_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate) */ {
 public:
  inline CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate() : CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate(nullptr) {}
  ~CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate() override;
  explicit constexpr CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate(const CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate& from);
  CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate(CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate&& from) noexcept
    : CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate() {
    *this = ::std::move(from);
  }

  inline CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate& operator=(const CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate& operator=(CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate* internal_default_instance() {
    return reinterpret_cast<const CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate*>(
               &_CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate& a, CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate* New() const final {
    return new CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate();
  }

  CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate";
  }
  protected:
  explicit CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCaseidFieldNumber = 1,
    kSuspectidFieldNumber = 3,
    kFractionidFieldNumber = 4,
    kRptAimbotFieldNumber = 5,
    kRptWallhackFieldNumber = 6,
    kRptSpeedhackFieldNumber = 7,
    kRptTeamharmFieldNumber = 8,
    kReasonFieldNumber = 9,
  };
  // optional uint64 caseid = 1;
  bool has_caseid() const;
  private:
  bool _internal_has_caseid() const;
  public:
  void clear_caseid();
  ::PROTOBUF_NAMESPACE_ID::uint64 caseid() const;
  void set_caseid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_caseid() const;
  void _internal_set_caseid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 suspectid = 3;
  bool has_suspectid() const;
  private:
  bool _internal_has_suspectid() const;
  public:
  void clear_suspectid();
  ::PROTOBUF_NAMESPACE_ID::uint32 suspectid() const;
  void set_suspectid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_suspectid() const;
  void _internal_set_suspectid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 fractionid = 4;
  bool has_fractionid() const;
  private:
  bool _internal_has_fractionid() const;
  public:
  void clear_fractionid();
  ::PROTOBUF_NAMESPACE_ID::uint32 fractionid() const;
  void set_fractionid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fractionid() const;
  void _internal_set_fractionid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 rpt_aimbot = 5;
  bool has_rpt_aimbot() const;
  private:
  bool _internal_has_rpt_aimbot() const;
  public:
  void clear_rpt_aimbot();
  ::PROTOBUF_NAMESPACE_ID::uint32 rpt_aimbot() const;
  void set_rpt_aimbot(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rpt_aimbot() const;
  void _internal_set_rpt_aimbot(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 rpt_wallhack = 6;
  bool has_rpt_wallhack() const;
  private:
  bool _internal_has_rpt_wallhack() const;
  public:
  void clear_rpt_wallhack();
  ::PROTOBUF_NAMESPACE_ID::uint32 rpt_wallhack() const;
  void set_rpt_wallhack(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rpt_wallhack() const;
  void _internal_set_rpt_wallhack(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 rpt_speedhack = 7;
  bool has_rpt_speedhack() const;
  private:
  bool _internal_has_rpt_speedhack() const;
  public:
  void clear_rpt_speedhack();
  ::PROTOBUF_NAMESPACE_ID::uint32 rpt_speedhack() const;
  void set_rpt_speedhack(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rpt_speedhack() const;
  void _internal_set_rpt_speedhack(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 rpt_teamharm = 8;
  bool has_rpt_teamharm() const;
  private:
  bool _internal_has_rpt_teamharm() const;
  public:
  void clear_rpt_teamharm();
  ::PROTOBUF_NAMESPACE_ID::uint32 rpt_teamharm() const;
  void set_rpt_teamharm(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rpt_teamharm() const;
  void _internal_set_rpt_teamharm(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 reason = 9;
  bool has_reason() const;
  private:
  bool _internal_has_reason() const;
  public:
  void clear_reason();
  ::PROTOBUF_NAMESPACE_ID::uint32 reason() const;
  void set_reason(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_reason() const;
  void _internal_set_reason(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 caseid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 suspectid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fractionid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rpt_aimbot_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rpt_wallhack_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rpt_speedhack_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rpt_teamharm_;
  ::PROTOBUF_NAMESPACE_ID::uint32 reason_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment) */ {
 public:
  inline CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment() : CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment(nullptr) {}
  ~CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment() override;
  explicit constexpr CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment(const CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment& from);
  CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment(CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment&& from) noexcept
    : CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment() {
    *this = ::std::move(from);
  }

  inline CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment& operator=(const CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment& operator=(CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment* internal_default_instance() {
    return reinterpret_cast<const CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment*>(
               &_CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  friend void swap(CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment& a, CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment* New() const final {
    return new CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment();
  }

  CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment";
  }
  protected:
  explicit CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCaseurlFieldNumber = 2,
    kCaseidFieldNumber = 1,
    kVerdictFieldNumber = 3,
    kTimestampFieldNumber = 4,
    kThrottlesecondsFieldNumber = 5,
    kSuspectidFieldNumber = 6,
    kFractionidFieldNumber = 7,
    kNumroundsFieldNumber = 8,
    kFractionroundsFieldNumber = 9,
    kStreakconvictionsFieldNumber = 10,
    kReasonFieldNumber = 11,
  };
  // optional string caseurl = 2;
  bool has_caseurl() const;
  private:
  bool _internal_has_caseurl() const;
  public:
  void clear_caseurl();
  const std::string& caseurl() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_caseurl(ArgT0&& arg0, ArgT... args);
  std::string* mutable_caseurl();
  PROTOBUF_MUST_USE_RESULT std::string* release_caseurl();
  void set_allocated_caseurl(std::string* caseurl);
  private:
  const std::string& _internal_caseurl() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_caseurl(const std::string& value);
  std::string* _internal_mutable_caseurl();
  public:

  // optional uint64 caseid = 1;
  bool has_caseid() const;
  private:
  bool _internal_has_caseid() const;
  public:
  void clear_caseid();
  ::PROTOBUF_NAMESPACE_ID::uint64 caseid() const;
  void set_caseid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_caseid() const;
  void _internal_set_caseid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 verdict = 3;
  bool has_verdict() const;
  private:
  bool _internal_has_verdict() const;
  public:
  void clear_verdict();
  ::PROTOBUF_NAMESPACE_ID::uint32 verdict() const;
  void set_verdict(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_verdict() const;
  void _internal_set_verdict(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 timestamp = 4;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint32 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 throttleseconds = 5;
  bool has_throttleseconds() const;
  private:
  bool _internal_has_throttleseconds() const;
  public:
  void clear_throttleseconds();
  ::PROTOBUF_NAMESPACE_ID::uint32 throttleseconds() const;
  void set_throttleseconds(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_throttleseconds() const;
  void _internal_set_throttleseconds(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 suspectid = 6;
  bool has_suspectid() const;
  private:
  bool _internal_has_suspectid() const;
  public:
  void clear_suspectid();
  ::PROTOBUF_NAMESPACE_ID::uint32 suspectid() const;
  void set_suspectid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_suspectid() const;
  void _internal_set_suspectid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 fractionid = 7;
  bool has_fractionid() const;
  private:
  bool _internal_has_fractionid() const;
  public:
  void clear_fractionid();
  ::PROTOBUF_NAMESPACE_ID::uint32 fractionid() const;
  void set_fractionid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fractionid() const;
  void _internal_set_fractionid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 numrounds = 8;
  bool has_numrounds() const;
  private:
  bool _internal_has_numrounds() const;
  public:
  void clear_numrounds();
  ::PROTOBUF_NAMESPACE_ID::uint32 numrounds() const;
  void set_numrounds(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_numrounds() const;
  void _internal_set_numrounds(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 fractionrounds = 9;
  bool has_fractionrounds() const;
  private:
  bool _internal_has_fractionrounds() const;
  public:
  void clear_fractionrounds();
  ::PROTOBUF_NAMESPACE_ID::uint32 fractionrounds() const;
  void set_fractionrounds(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fractionrounds() const;
  void _internal_set_fractionrounds(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int32 streakconvictions = 10;
  bool has_streakconvictions() const;
  private:
  bool _internal_has_streakconvictions() const;
  public:
  void clear_streakconvictions();
  ::PROTOBUF_NAMESPACE_ID::int32 streakconvictions() const;
  void set_streakconvictions(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_streakconvictions() const;
  void _internal_set_streakconvictions(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint32 reason = 11;
  bool has_reason() const;
  private:
  bool _internal_has_reason() const;
  public:
  void clear_reason();
  ::PROTOBUF_NAMESPACE_ID::uint32 reason() const;
  void set_reason(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_reason() const;
  void _internal_set_reason(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr caseurl_;
  ::PROTOBUF_NAMESPACE_ID::uint64 caseid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 verdict_;
  ::PROTOBUF_NAMESPACE_ID::uint32 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint32 throttleseconds_;
  ::PROTOBUF_NAMESPACE_ID::uint32 suspectid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fractionid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 numrounds_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fractionrounds_;
  ::PROTOBUF_NAMESPACE_ID::int32 streakconvictions_;
  ::PROTOBUF_NAMESPACE_ID::uint32 reason_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus) */ {
 public:
  inline CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus() : CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus(nullptr) {}
  ~CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus() override;
  explicit constexpr CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus(const CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus& from);
  CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus(CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus&& from) noexcept
    : CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus() {
    *this = ::std::move(from);
  }

  inline CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus& operator=(const CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus& operator=(CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus* internal_default_instance() {
    return reinterpret_cast<const CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus*>(
               &_CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  friend void swap(CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus& a, CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus* New() const final {
    return new CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus();
  }

  CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus";
  }
  protected:
  explicit CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCaseidFieldNumber = 1,
    kStatusidFieldNumber = 2,
  };
  // optional uint64 caseid = 1;
  bool has_caseid() const;
  private:
  bool _internal_has_caseid() const;
  public:
  void clear_caseid();
  ::PROTOBUF_NAMESPACE_ID::uint64 caseid() const;
  void set_caseid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_caseid() const;
  void _internal_set_caseid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 statusid = 2;
  bool has_statusid() const;
  private:
  bool _internal_has_statusid() const;
  public:
  void clear_statusid();
  ::PROTOBUF_NAMESPACE_ID::uint32 statusid() const;
  void set_statusid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_statusid() const;
  void _internal_set_statusid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 caseid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 statusid_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CClientHeaderOverwatchEvidence final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CClientHeaderOverwatchEvidence) */ {
 public:
  inline CClientHeaderOverwatchEvidence() : CClientHeaderOverwatchEvidence(nullptr) {}
  ~CClientHeaderOverwatchEvidence() override;
  explicit constexpr CClientHeaderOverwatchEvidence(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CClientHeaderOverwatchEvidence(const CClientHeaderOverwatchEvidence& from);
  CClientHeaderOverwatchEvidence(CClientHeaderOverwatchEvidence&& from) noexcept
    : CClientHeaderOverwatchEvidence() {
    *this = ::std::move(from);
  }

  inline CClientHeaderOverwatchEvidence& operator=(const CClientHeaderOverwatchEvidence& from) {
    CopyFrom(from);
    return *this;
  }
  inline CClientHeaderOverwatchEvidence& operator=(CClientHeaderOverwatchEvidence&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CClientHeaderOverwatchEvidence& default_instance() {
    return *internal_default_instance();
  }
  static inline const CClientHeaderOverwatchEvidence* internal_default_instance() {
    return reinterpret_cast<const CClientHeaderOverwatchEvidence*>(
               &_CClientHeaderOverwatchEvidence_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  friend void swap(CClientHeaderOverwatchEvidence& a, CClientHeaderOverwatchEvidence& b) {
    a.Swap(&b);
  }
  inline void Swap(CClientHeaderOverwatchEvidence* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CClientHeaderOverwatchEvidence* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CClientHeaderOverwatchEvidence* New() const final {
    return new CClientHeaderOverwatchEvidence();
  }

  CClientHeaderOverwatchEvidence* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CClientHeaderOverwatchEvidence>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CClientHeaderOverwatchEvidence& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CClientHeaderOverwatchEvidence& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CClientHeaderOverwatchEvidence* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CClientHeaderOverwatchEvidence";
  }
  protected:
  explicit CClientHeaderOverwatchEvidence(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCaseidFieldNumber = 2,
    kAccountidFieldNumber = 1,
  };
  // optional uint64 caseid = 2;
  bool has_caseid() const;
  private:
  bool _internal_has_caseid() const;
  public:
  void clear_caseid();
  ::PROTOBUF_NAMESPACE_ID::uint64 caseid() const;
  void set_caseid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_caseid() const;
  void _internal_set_caseid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 accountid = 1;
  bool has_accountid() const;
  private:
  bool _internal_has_accountid() const;
  public:
  void clear_accountid();
  ::PROTOBUF_NAMESPACE_ID::uint32 accountid() const;
  void set_accountid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_accountid() const;
  void _internal_set_accountid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CClientHeaderOverwatchEvidence)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 caseid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 accountid_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_GC2ClientTextMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCCStrike15_v2_GC2ClientTextMsg) */ {
 public:
  inline CMsgGCCStrike15_v2_GC2ClientTextMsg() : CMsgGCCStrike15_v2_GC2ClientTextMsg(nullptr) {}
  ~CMsgGCCStrike15_v2_GC2ClientTextMsg() override;
  explicit constexpr CMsgGCCStrike15_v2_GC2ClientTextMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCCStrike15_v2_GC2ClientTextMsg(const CMsgGCCStrike15_v2_GC2ClientTextMsg& from);
  CMsgGCCStrike15_v2_GC2ClientTextMsg(CMsgGCCStrike15_v2_GC2ClientTextMsg&& from) noexcept
    : CMsgGCCStrike15_v2_GC2ClientTextMsg() {
    *this = ::std::move(from);
  }

  inline CMsgGCCStrike15_v2_GC2ClientTextMsg& operator=(const CMsgGCCStrike15_v2_GC2ClientTextMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCCStrike15_v2_GC2ClientTextMsg& operator=(CMsgGCCStrike15_v2_GC2ClientTextMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCCStrike15_v2_GC2ClientTextMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCCStrike15_v2_GC2ClientTextMsg* internal_default_instance() {
    return reinterpret_cast<const CMsgGCCStrike15_v2_GC2ClientTextMsg*>(
               &_CMsgGCCStrike15_v2_GC2ClientTextMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  friend void swap(CMsgGCCStrike15_v2_GC2ClientTextMsg& a, CMsgGCCStrike15_v2_GC2ClientTextMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCCStrike15_v2_GC2ClientTextMsg* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCCStrike15_v2_GC2ClientTextMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCCStrike15_v2_GC2ClientTextMsg* New() const final {
    return new CMsgGCCStrike15_v2_GC2ClientTextMsg();
  }

  CMsgGCCStrike15_v2_GC2ClientTextMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCCStrike15_v2_GC2ClientTextMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCCStrike15_v2_GC2ClientTextMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgGCCStrike15_v2_GC2ClientTextMsg& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCCStrike15_v2_GC2ClientTextMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCCStrike15_v2_GC2ClientTextMsg";
  }
  protected:
  explicit CMsgGCCStrike15_v2_GC2ClientTextMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPayloadFieldNumber = 3,
    kIdFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // optional bytes payload = 3;
  bool has_payload() const;
  private:
  bool _internal_has_payload() const;
  public:
  void clear_payload();
  const std::string& payload() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_payload(ArgT0&& arg0, ArgT... args);
  std::string* mutable_payload();
  PROTOBUF_MUST_USE_RESULT std::string* release_payload();
  void set_allocated_payload(std::string* payload);
  private:
  const std::string& _internal_payload() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_payload(const std::string& value);
  std::string* _internal_mutable_payload();
  public:

  // optional uint32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 type = 2;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_GC2ClientTextMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_Client2GCTextMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCCStrike15_v2_Client2GCTextMsg) */ {
 public:
  inline CMsgGCCStrike15_v2_Client2GCTextMsg() : CMsgGCCStrike15_v2_Client2GCTextMsg(nullptr) {}
  ~CMsgGCCStrike15_v2_Client2GCTextMsg() override;
  explicit constexpr CMsgGCCStrike15_v2_Client2GCTextMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCCStrike15_v2_Client2GCTextMsg(const CMsgGCCStrike15_v2_Client2GCTextMsg& from);
  CMsgGCCStrike15_v2_Client2GCTextMsg(CMsgGCCStrike15_v2_Client2GCTextMsg&& from) noexcept
    : CMsgGCCStrike15_v2_Client2GCTextMsg() {
    *this = ::std::move(from);
  }

  inline CMsgGCCStrike15_v2_Client2GCTextMsg& operator=(const CMsgGCCStrike15_v2_Client2GCTextMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCCStrike15_v2_Client2GCTextMsg& operator=(CMsgGCCStrike15_v2_Client2GCTextMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCCStrike15_v2_Client2GCTextMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCCStrike15_v2_Client2GCTextMsg* internal_default_instance() {
    return reinterpret_cast<const CMsgGCCStrike15_v2_Client2GCTextMsg*>(
               &_CMsgGCCStrike15_v2_Client2GCTextMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  friend void swap(CMsgGCCStrike15_v2_Client2GCTextMsg& a, CMsgGCCStrike15_v2_Client2GCTextMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCCStrike15_v2_Client2GCTextMsg* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCCStrike15_v2_Client2GCTextMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCCStrike15_v2_Client2GCTextMsg* New() const final {
    return new CMsgGCCStrike15_v2_Client2GCTextMsg();
  }

  CMsgGCCStrike15_v2_Client2GCTextMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCCStrike15_v2_Client2GCTextMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCCStrike15_v2_Client2GCTextMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgGCCStrike15_v2_Client2GCTextMsg& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCCStrike15_v2_Client2GCTextMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCCStrike15_v2_Client2GCTextMsg";
  }
  protected:
  explicit CMsgGCCStrike15_v2_Client2GCTextMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArgsFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // repeated bytes args = 2;
  int args_size() const;
  private:
  int _internal_args_size() const;
  public:
  void clear_args();
  const std::string& args(int index) const;
  std::string* mutable_args(int index);
  void set_args(int index, const std::string& value);
  void set_args(int index, std::string&& value);
  void set_args(int index, const char* value);
  void set_args(int index, const void* value, size_t size);
  std::string* add_args();
  void add_args(const std::string& value);
  void add_args(std::string&& value);
  void add_args(const char* value);
  void add_args(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& args() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_args();
  private:
  const std::string& _internal_args(int index) const;
  std::string* _internal_add_args();
  public:

  // optional uint32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_Client2GCTextMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> args_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_MatchEndRunRewardDrops final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCCStrike15_v2_MatchEndRunRewardDrops) */ {
 public:
  inline CMsgGCCStrike15_v2_MatchEndRunRewardDrops() : CMsgGCCStrike15_v2_MatchEndRunRewardDrops(nullptr) {}
  ~CMsgGCCStrike15_v2_MatchEndRunRewardDrops() override;
  explicit constexpr CMsgGCCStrike15_v2_MatchEndRunRewardDrops(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCCStrike15_v2_MatchEndRunRewardDrops(const CMsgGCCStrike15_v2_MatchEndRunRewardDrops& from);
  CMsgGCCStrike15_v2_MatchEndRunRewardDrops(CMsgGCCStrike15_v2_MatchEndRunRewardDrops&& from) noexcept
    : CMsgGCCStrike15_v2_MatchEndRunRewardDrops() {
    *this = ::std::move(from);
  }

  inline CMsgGCCStrike15_v2_MatchEndRunRewardDrops& operator=(const CMsgGCCStrike15_v2_MatchEndRunRewardDrops& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCCStrike15_v2_MatchEndRunRewardDrops& operator=(CMsgGCCStrike15_v2_MatchEndRunRewardDrops&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCCStrike15_v2_MatchEndRunRewardDrops& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCCStrike15_v2_MatchEndRunRewardDrops* internal_default_instance() {
    return reinterpret_cast<const CMsgGCCStrike15_v2_MatchEndRunRewardDrops*>(
               &_CMsgGCCStrike15_v2_MatchEndRunRewardDrops_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  friend void swap(CMsgGCCStrike15_v2_MatchEndRunRewardDrops& a, CMsgGCCStrike15_v2_MatchEndRunRewardDrops& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCCStrike15_v2_MatchEndRunRewardDrops* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCCStrike15_v2_MatchEndRunRewardDrops* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCCStrike15_v2_MatchEndRunRewardDrops* New() const final {
    return new CMsgGCCStrike15_v2_MatchEndRunRewardDrops();
  }

  CMsgGCCStrike15_v2_MatchEndRunRewardDrops* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCCStrike15_v2_MatchEndRunRewardDrops>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCCStrike15_v2_MatchEndRunRewardDrops& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgGCCStrike15_v2_MatchEndRunRewardDrops& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCCStrike15_v2_MatchEndRunRewardDrops* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCCStrike15_v2_MatchEndRunRewardDrops";
  }
  protected:
  explicit CMsgGCCStrike15_v2_MatchEndRunRewardDrops(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerinfoFieldNumber = 3,
    kMatchEndQuestDataFieldNumber = 4,
  };
  // optional .CMsgGCCStrike15_v2_MatchmakingServerReservationResponse serverinfo = 3;
  bool has_serverinfo() const;
  private:
  bool _internal_has_serverinfo() const;
  public:
  void clear_serverinfo();
  const ::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse& serverinfo() const;
  PROTOBUF_MUST_USE_RESULT ::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse* release_serverinfo();
  ::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse* mutable_serverinfo();
  void set_allocated_serverinfo(::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse* serverinfo);
  private:
  const ::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse& _internal_serverinfo() const;
  ::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse* _internal_mutable_serverinfo();
  public:
  void unsafe_arena_set_allocated_serverinfo(
      ::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse* serverinfo);
  ::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse* unsafe_arena_release_serverinfo();

  // optional .CMsgGC_ServerQuestUpdateData match_end_quest_data = 4;
  bool has_match_end_quest_data() const;
  private:
  bool _internal_has_match_end_quest_data() const;
  public:
  void clear_match_end_quest_data();
  const ::CMsgGC_ServerQuestUpdateData& match_end_quest_data() const;
  PROTOBUF_MUST_USE_RESULT ::CMsgGC_ServerQuestUpdateData* release_match_end_quest_data();
  ::CMsgGC_ServerQuestUpdateData* mutable_match_end_quest_data();
  void set_allocated_match_end_quest_data(::CMsgGC_ServerQuestUpdateData* match_end_quest_data);
  private:
  const ::CMsgGC_ServerQuestUpdateData& _internal_match_end_quest_data() const;
  ::CMsgGC_ServerQuestUpdateData* _internal_mutable_match_end_quest_data();
  public:
  void unsafe_arena_set_allocated_match_end_quest_data(
      ::CMsgGC_ServerQuestUpdateData* match_end_quest_data);
  ::CMsgGC_ServerQuestUpdateData* unsafe_arena_release_match_end_quest_data();

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_MatchEndRunRewardDrops)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse* serverinfo_;
  ::CMsgGC_ServerQuestUpdateData* match_end_quest_data_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CEconItemPreviewDataBlock_Sticker final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CEconItemPreviewDataBlock.Sticker) */ {
 public:
  inline CEconItemPreviewDataBlock_Sticker() : CEconItemPreviewDataBlock_Sticker(nullptr) {}
  ~CEconItemPreviewDataBlock_Sticker() override;
  explicit constexpr CEconItemPreviewDataBlock_Sticker(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CEconItemPreviewDataBlock_Sticker(const CEconItemPreviewDataBlock_Sticker& from);
  CEconItemPreviewDataBlock_Sticker(CEconItemPreviewDataBlock_Sticker&& from) noexcept
    : CEconItemPreviewDataBlock_Sticker() {
    *this = ::std::move(from);
  }

  inline CEconItemPreviewDataBlock_Sticker& operator=(const CEconItemPreviewDataBlock_Sticker& from) {
    CopyFrom(from);
    return *this;
  }
  inline CEconItemPreviewDataBlock_Sticker& operator=(CEconItemPreviewDataBlock_Sticker&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CEconItemPreviewDataBlock_Sticker& default_instance() {
    return *internal_default_instance();
  }
  static inline const CEconItemPreviewDataBlock_Sticker* internal_default_instance() {
    return reinterpret_cast<const CEconItemPreviewDataBlock_Sticker*>(
               &_CEconItemPreviewDataBlock_Sticker_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    72;

  friend void swap(CEconItemPreviewDataBlock_Sticker& a, CEconItemPreviewDataBlock_Sticker& b) {
    a.Swap(&b);
  }
  inline void Swap(CEconItemPreviewDataBlock_Sticker* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CEconItemPreviewDataBlock_Sticker* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CEconItemPreviewDataBlock_Sticker* New() const final {
    return new CEconItemPreviewDataBlock_Sticker();
  }

  CEconItemPreviewDataBlock_Sticker* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CEconItemPreviewDataBlock_Sticker>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CEconItemPreviewDataBlock_Sticker& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CEconItemPreviewDataBlock_Sticker& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CEconItemPreviewDataBlock_Sticker* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CEconItemPreviewDataBlock.Sticker";
  }
  protected:
  explicit CEconItemPreviewDataBlock_Sticker(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSlotFieldNumber = 1,
    kStickerIdFieldNumber = 2,
    kWearFieldNumber = 3,
    kScaleFieldNumber = 4,
    kRotationFieldNumber = 5,
    kTintIdFieldNumber = 6,
  };
  // optional uint32 slot = 1;
  bool has_slot() const;
  private:
  bool _internal_has_slot() const;
  public:
  void clear_slot();
  ::PROTOBUF_NAMESPACE_ID::uint32 slot() const;
  void set_slot(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_slot() const;
  void _internal_set_slot(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 sticker_id = 2;
  bool has_sticker_id() const;
  private:
  bool _internal_has_sticker_id() const;
  public:
  void clear_sticker_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 sticker_id() const;
  void set_sticker_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sticker_id() const;
  void _internal_set_sticker_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float wear = 3;
  bool has_wear() const;
  private:
  bool _internal_has_wear() const;
  public:
  void clear_wear();
  float wear() const;
  void set_wear(float value);
  private:
  float _internal_wear() const;
  void _internal_set_wear(float value);
  public:

  // optional float scale = 4;
  bool has_scale() const;
  private:
  bool _internal_has_scale() const;
  public:
  void clear_scale();
  float scale() const;
  void set_scale(float value);
  private:
  float _internal_scale() const;
  void _internal_set_scale(float value);
  public:

  // optional float rotation = 5;
  bool has_rotation() const;
  private:
  bool _internal_has_rotation() const;
  public:
  void clear_rotation();
  float rotation() const;
  void set_rotation(float value);
  private:
  float _internal_rotation() const;
  void _internal_set_rotation(float value);
  public:

  // optional uint32 tint_id = 6;
  bool has_tint_id() const;
  private:
  bool _internal_has_tint_id() const;
  public:
  void clear_tint_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 tint_id() const;
  void set_tint_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tint_id() const;
  void _internal_set_tint_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CEconItemPreviewDataBlock.Sticker)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 slot_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sticker_id_;
  float wear_;
  float scale_;
  float rotation_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tint_id_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CEconItemPreviewDataBlock final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CEconItemPreviewDataBlock) */ {
 public:
  inline CEconItemPreviewDataBlock() : CEconItemPreviewDataBlock(nullptr) {}
  ~CEconItemPreviewDataBlock() override;
  explicit constexpr CEconItemPreviewDataBlock(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CEconItemPreviewDataBlock(const CEconItemPreviewDataBlock& from);
  CEconItemPreviewDataBlock(CEconItemPreviewDataBlock&& from) noexcept
    : CEconItemPreviewDataBlock() {
    *this = ::std::move(from);
  }

  inline CEconItemPreviewDataBlock& operator=(const CEconItemPreviewDataBlock& from) {
    CopyFrom(from);
    return *this;
  }
  inline CEconItemPreviewDataBlock& operator=(CEconItemPreviewDataBlock&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CEconItemPreviewDataBlock& default_instance() {
    return *internal_default_instance();
  }
  static inline const CEconItemPreviewDataBlock* internal_default_instance() {
    return reinterpret_cast<const CEconItemPreviewDataBlock*>(
               &_CEconItemPreviewDataBlock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  friend void swap(CEconItemPreviewDataBlock& a, CEconItemPreviewDataBlock& b) {
    a.Swap(&b);
  }
  inline void Swap(CEconItemPreviewDataBlock* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CEconItemPreviewDataBlock* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CEconItemPreviewDataBlock* New() const final {
    return new CEconItemPreviewDataBlock();
  }

  CEconItemPreviewDataBlock* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CEconItemPreviewDataBlock>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CEconItemPreviewDataBlock& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CEconItemPreviewDataBlock& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CEconItemPreviewDataBlock* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CEconItemPreviewDataBlock";
  }
  protected:
  explicit CEconItemPreviewDataBlock(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CEconItemPreviewDataBlock_Sticker Sticker;

  // accessors -------------------------------------------------------

  enum : int {
    kStickersFieldNumber = 12,
    kCustomnameFieldNumber = 11,
    kItemidFieldNumber = 2,
    kAccountidFieldNumber = 1,
    kDefindexFieldNumber = 3,
    kPaintindexFieldNumber = 4,
    kRarityFieldNumber = 5,
    kQualityFieldNumber = 6,
    kPaintwearFieldNumber = 7,
    kPaintseedFieldNumber = 8,
    kKilleaterscoretypeFieldNumber = 9,
    kKilleatervalueFieldNumber = 10,
    kInventoryFieldNumber = 13,
    kOriginFieldNumber = 14,
    kQuestidFieldNumber = 15,
    kDropreasonFieldNumber = 16,
    kMusicindexFieldNumber = 17,
  };
  // repeated .CEconItemPreviewDataBlock.Sticker stickers = 12;
  int stickers_size() const;
  private:
  int _internal_stickers_size() const;
  public:
  void clear_stickers();
  ::CEconItemPreviewDataBlock_Sticker* mutable_stickers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CEconItemPreviewDataBlock_Sticker >*
      mutable_stickers();
  private:
  const ::CEconItemPreviewDataBlock_Sticker& _internal_stickers(int index) const;
  ::CEconItemPreviewDataBlock_Sticker* _internal_add_stickers();
  public:
  const ::CEconItemPreviewDataBlock_Sticker& stickers(int index) const;
  ::CEconItemPreviewDataBlock_Sticker* add_stickers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CEconItemPreviewDataBlock_Sticker >&
      stickers() const;

  // optional string customname = 11;
  bool has_customname() const;
  private:
  bool _internal_has_customname() const;
  public:
  void clear_customname();
  const std::string& customname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_customname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_customname();
  PROTOBUF_MUST_USE_RESULT std::string* release_customname();
  void set_allocated_customname(std::string* customname);
  private:
  const std::string& _internal_customname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_customname(const std::string& value);
  std::string* _internal_mutable_customname();
  public:

  // optional uint64 itemid = 2;
  bool has_itemid() const;
  private:
  bool _internal_has_itemid() const;
  public:
  void clear_itemid();
  ::PROTOBUF_NAMESPACE_ID::uint64 itemid() const;
  void set_itemid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_itemid() const;
  void _internal_set_itemid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 accountid = 1;
  bool has_accountid() const;
  private:
  bool _internal_has_accountid() const;
  public:
  void clear_accountid();
  ::PROTOBUF_NAMESPACE_ID::uint32 accountid() const;
  void set_accountid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_accountid() const;
  void _internal_set_accountid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 defindex = 3;
  bool has_defindex() const;
  private:
  bool _internal_has_defindex() const;
  public:
  void clear_defindex();
  ::PROTOBUF_NAMESPACE_ID::uint32 defindex() const;
  void set_defindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_defindex() const;
  void _internal_set_defindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 paintindex = 4;
  bool has_paintindex() const;
  private:
  bool _internal_has_paintindex() const;
  public:
  void clear_paintindex();
  ::PROTOBUF_NAMESPACE_ID::uint32 paintindex() const;
  void set_paintindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_paintindex() const;
  void _internal_set_paintindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 rarity = 5;
  bool has_rarity() const;
  private:
  bool _internal_has_rarity() const;
  public:
  void clear_rarity();
  ::PROTOBUF_NAMESPACE_ID::uint32 rarity() const;
  void set_rarity(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rarity() const;
  void _internal_set_rarity(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 quality = 6;
  bool has_quality() const;
  private:
  bool _internal_has_quality() const;
  public:
  void clear_quality();
  ::PROTOBUF_NAMESPACE_ID::uint32 quality() const;
  void set_quality(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_quality() const;
  void _internal_set_quality(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 paintwear = 7;
  bool has_paintwear() const;
  private:
  bool _internal_has_paintwear() const;
  public:
  void clear_paintwear();
  ::PROTOBUF_NAMESPACE_ID::uint32 paintwear() const;
  void set_paintwear(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_paintwear() const;
  void _internal_set_paintwear(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 paintseed = 8;
  bool has_paintseed() const;
  private:
  bool _internal_has_paintseed() const;
  public:
  void clear_paintseed();
  ::PROTOBUF_NAMESPACE_ID::uint32 paintseed() const;
  void set_paintseed(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_paintseed() const;
  void _internal_set_paintseed(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 killeaterscoretype = 9;
  bool has_killeaterscoretype() const;
  private:
  bool _internal_has_killeaterscoretype() const;
  public:
  void clear_killeaterscoretype();
  ::PROTOBUF_NAMESPACE_ID::uint32 killeaterscoretype() const;
  void set_killeaterscoretype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_killeaterscoretype() const;
  void _internal_set_killeaterscoretype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 killeatervalue = 10;
  bool has_killeatervalue() const;
  private:
  bool _internal_has_killeatervalue() const;
  public:
  void clear_killeatervalue();
  ::PROTOBUF_NAMESPACE_ID::uint32 killeatervalue() const;
  void set_killeatervalue(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_killeatervalue() const;
  void _internal_set_killeatervalue(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 inventory = 13;
  bool has_inventory() const;
  private:
  bool _internal_has_inventory() const;
  public:
  void clear_inventory();
  ::PROTOBUF_NAMESPACE_ID::uint32 inventory() const;
  void set_inventory(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_inventory() const;
  void _internal_set_inventory(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 origin = 14;
  bool has_origin() const;
  private:
  bool _internal_has_origin() const;
  public:
  void clear_origin();
  ::PROTOBUF_NAMESPACE_ID::uint32 origin() const;
  void set_origin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_origin() const;
  void _internal_set_origin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 questid = 15;
  bool has_questid() const;
  private:
  bool _internal_has_questid() const;
  public:
  void clear_questid();
  ::PROTOBUF_NAMESPACE_ID::uint32 questid() const;
  void set_questid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_questid() const;
  void _internal_set_questid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 dropreason = 16;
  bool has_dropreason() const;
  private:
  bool _internal_has_dropreason() const;
  public:
  void clear_dropreason();
  ::PROTOBUF_NAMESPACE_ID::uint32 dropreason() const;
  void set_dropreason(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_dropreason() const;
  void _internal_set_dropreason(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 musicindex = 17;
  bool has_musicindex() const;
  private:
  bool _internal_has_musicindex() const;
  public:
  void clear_musicindex();
  ::PROTOBUF_NAMESPACE_ID::uint32 musicindex() const;
  void set_musicindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_musicindex() const;
  void _internal_set_musicindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CEconItemPreviewDataBlock)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CEconItemPreviewDataBlock_Sticker > stickers_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr customname_;
  ::PROTOBUF_NAMESPACE_ID::uint64 itemid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 accountid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 defindex_;
  ::PROTOBUF_NAMESPACE_ID::uint32 paintindex_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rarity_;
  ::PROTOBUF_NAMESPACE_ID::uint32 quality_;
  ::PROTOBUF_NAMESPACE_ID::uint32 paintwear_;
  ::PROTOBUF_NAMESPACE_ID::uint32 paintseed_;
  ::PROTOBUF_NAMESPACE_ID::uint32 killeaterscoretype_;
  ::PROTOBUF_NAMESPACE_ID::uint32 killeatervalue_;
  ::PROTOBUF_NAMESPACE_ID::uint32 inventory_;
  ::PROTOBUF_NAMESPACE_ID::uint32 origin_;
  ::PROTOBUF_NAMESPACE_ID::uint32 questid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 dropreason_;
  ::PROTOBUF_NAMESPACE_ID::uint32 musicindex_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_MatchEndRewardDropsNotification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCCStrike15_v2_MatchEndRewardDropsNotification) */ {
 public:
  inline CMsgGCCStrike15_v2_MatchEndRewardDropsNotification() : CMsgGCCStrike15_v2_MatchEndRewardDropsNotification(nullptr) {}
  ~CMsgGCCStrike15_v2_MatchEndRewardDropsNotification() override;
  explicit constexpr CMsgGCCStrike15_v2_MatchEndRewardDropsNotification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCCStrike15_v2_MatchEndRewardDropsNotification(const CMsgGCCStrike15_v2_MatchEndRewardDropsNotification& from);
  CMsgGCCStrike15_v2_MatchEndRewardDropsNotification(CMsgGCCStrike15_v2_MatchEndRewardDropsNotification&& from) noexcept
    : CMsgGCCStrike15_v2_MatchEndRewardDropsNotification() {
    *this = ::std::move(from);
  }

  inline CMsgGCCStrike15_v2_MatchEndRewardDropsNotification& operator=(const CMsgGCCStrike15_v2_MatchEndRewardDropsNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCCStrike15_v2_MatchEndRewardDropsNotification& operator=(CMsgGCCStrike15_v2_MatchEndRewardDropsNotification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCCStrike15_v2_MatchEndRewardDropsNotification& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCCStrike15_v2_MatchEndRewardDropsNotification* internal_default_instance() {
    return reinterpret_cast<const CMsgGCCStrike15_v2_MatchEndRewardDropsNotification*>(
               &_CMsgGCCStrike15_v2_MatchEndRewardDropsNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    74;

  friend void swap(CMsgGCCStrike15_v2_MatchEndRewardDropsNotification& a, CMsgGCCStrike15_v2_MatchEndRewardDropsNotification& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCCStrike15_v2_MatchEndRewardDropsNotification* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCCStrike15_v2_MatchEndRewardDropsNotification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCCStrike15_v2_MatchEndRewardDropsNotification* New() const final {
    return new CMsgGCCStrike15_v2_MatchEndRewardDropsNotification();
  }

  CMsgGCCStrike15_v2_MatchEndRewardDropsNotification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCCStrike15_v2_MatchEndRewardDropsNotification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCCStrike15_v2_MatchEndRewardDropsNotification& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgGCCStrike15_v2_MatchEndRewardDropsNotification& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCCStrike15_v2_MatchEndRewardDropsNotification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCCStrike15_v2_MatchEndRewardDropsNotification";
  }
  protected:
  explicit CMsgGCCStrike15_v2_MatchEndRewardDropsNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIteminfoFieldNumber = 6,
  };
  // optional .CEconItemPreviewDataBlock iteminfo = 6;
  bool has_iteminfo() const;
  private:
  bool _internal_has_iteminfo() const;
  public:
  void clear_iteminfo();
  const ::CEconItemPreviewDataBlock& iteminfo() const;
  PROTOBUF_MUST_USE_RESULT ::CEconItemPreviewDataBlock* release_iteminfo();
  ::CEconItemPreviewDataBlock* mutable_iteminfo();
  void set_allocated_iteminfo(::CEconItemPreviewDataBlock* iteminfo);
  private:
  const ::CEconItemPreviewDataBlock& _internal_iteminfo() const;
  ::CEconItemPreviewDataBlock* _internal_mutable_iteminfo();
  public:
  void unsafe_arena_set_allocated_iteminfo(
      ::CEconItemPreviewDataBlock* iteminfo);
  ::CEconItemPreviewDataBlock* unsafe_arena_release_iteminfo();

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_MatchEndRewardDropsNotification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CEconItemPreviewDataBlock* iteminfo_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgItemAcknowledged final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgItemAcknowledged) */ {
 public:
  inline CMsgItemAcknowledged() : CMsgItemAcknowledged(nullptr) {}
  ~CMsgItemAcknowledged() override;
  explicit constexpr CMsgItemAcknowledged(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgItemAcknowledged(const CMsgItemAcknowledged& from);
  CMsgItemAcknowledged(CMsgItemAcknowledged&& from) noexcept
    : CMsgItemAcknowledged() {
    *this = ::std::move(from);
  }

  inline CMsgItemAcknowledged& operator=(const CMsgItemAcknowledged& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgItemAcknowledged& operator=(CMsgItemAcknowledged&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgItemAcknowledged& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgItemAcknowledged* internal_default_instance() {
    return reinterpret_cast<const CMsgItemAcknowledged*>(
               &_CMsgItemAcknowledged_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    75;

  friend void swap(CMsgItemAcknowledged& a, CMsgItemAcknowledged& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgItemAcknowledged* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgItemAcknowledged* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgItemAcknowledged* New() const final {
    return new CMsgItemAcknowledged();
  }

  CMsgItemAcknowledged* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgItemAcknowledged>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgItemAcknowledged& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgItemAcknowledged& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgItemAcknowledged* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgItemAcknowledged";
  }
  protected:
  explicit CMsgItemAcknowledged(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIteminfoFieldNumber = 1,
  };
  // optional .CEconItemPreviewDataBlock iteminfo = 1;
  bool has_iteminfo() const;
  private:
  bool _internal_has_iteminfo() const;
  public:
  void clear_iteminfo();
  const ::CEconItemPreviewDataBlock& iteminfo() const;
  PROTOBUF_MUST_USE_RESULT ::CEconItemPreviewDataBlock* release_iteminfo();
  ::CEconItemPreviewDataBlock* mutable_iteminfo();
  void set_allocated_iteminfo(::CEconItemPreviewDataBlock* iteminfo);
  private:
  const ::CEconItemPreviewDataBlock& _internal_iteminfo() const;
  ::CEconItemPreviewDataBlock* _internal_mutable_iteminfo();
  public:
  void unsafe_arena_set_allocated_iteminfo(
      ::CEconItemPreviewDataBlock* iteminfo);
  ::CEconItemPreviewDataBlock* unsafe_arena_release_iteminfo();

  // @@protoc_insertion_point(class_scope:CMsgItemAcknowledged)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CEconItemPreviewDataBlock* iteminfo_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest) */ {
 public:
  inline CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest() : CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest(nullptr) {}
  ~CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest() override;
  explicit constexpr CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest(const CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest& from);
  CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest(CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest&& from) noexcept
    : CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest() {
    *this = ::std::move(from);
  }

  inline CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest& operator=(const CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest& operator=(CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest*>(
               &_CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    76;

  friend void swap(CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest& a, CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest* New() const final {
    return new CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest();
  }

  CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest";
  }
  protected:
  explicit CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParamSFieldNumber = 1,
    kParamAFieldNumber = 2,
    kParamDFieldNumber = 3,
    kParamMFieldNumber = 4,
  };
  // optional uint64 param_s = 1;
  bool has_param_s() const;
  private:
  bool _internal_has_param_s() const;
  public:
  void clear_param_s();
  ::PROTOBUF_NAMESPACE_ID::uint64 param_s() const;
  void set_param_s(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_param_s() const;
  void _internal_set_param_s(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 param_a = 2;
  bool has_param_a() const;
  private:
  bool _internal_has_param_a() const;
  public:
  void clear_param_a();
  ::PROTOBUF_NAMESPACE_ID::uint64 param_a() const;
  void set_param_a(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_param_a() const;
  void _internal_set_param_a(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 param_d = 3;
  bool has_param_d() const;
  private:
  bool _internal_has_param_d() const;
  public:
  void clear_param_d();
  ::PROTOBUF_NAMESPACE_ID::uint64 param_d() const;
  void set_param_d(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_param_d() const;
  void _internal_set_param_d(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 param_m = 4;
  bool has_param_m() const;
  private:
  bool _internal_has_param_m() const;
  public:
  void clear_param_m();
  ::PROTOBUF_NAMESPACE_ID::uint64 param_m() const;
  void set_param_m(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_param_m() const;
  void _internal_set_param_m(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 param_s_;
  ::PROTOBUF_NAMESPACE_ID::uint64 param_a_;
  ::PROTOBUF_NAMESPACE_ID::uint64 param_d_;
  ::PROTOBUF_NAMESPACE_ID::uint64 param_m_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse) */ {
 public:
  inline CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse() : CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse(nullptr) {}
  ~CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse() override;
  explicit constexpr CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse(const CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse& from);
  CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse(CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse&& from) noexcept
    : CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse() {
    *this = ::std::move(from);
  }

  inline CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse& operator=(const CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse& operator=(CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse*>(
               &_CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    77;

  friend void swap(CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse& a, CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse* New() const final {
    return new CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse();
  }

  CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse";
  }
  protected:
  explicit CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIteminfoFieldNumber = 1,
  };
  // optional .CEconItemPreviewDataBlock iteminfo = 1;
  bool has_iteminfo() const;
  private:
  bool _internal_has_iteminfo() const;
  public:
  void clear_iteminfo();
  const ::CEconItemPreviewDataBlock& iteminfo() const;
  PROTOBUF_MUST_USE_RESULT ::CEconItemPreviewDataBlock* release_iteminfo();
  ::CEconItemPreviewDataBlock* mutable_iteminfo();
  void set_allocated_iteminfo(::CEconItemPreviewDataBlock* iteminfo);
  private:
  const ::CEconItemPreviewDataBlock& _internal_iteminfo() const;
  ::CEconItemPreviewDataBlock* _internal_mutable_iteminfo();
  public:
  void unsafe_arena_set_allocated_iteminfo(
      ::CEconItemPreviewDataBlock* iteminfo);
  ::CEconItemPreviewDataBlock* unsafe_arena_release_iteminfo();

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CEconItemPreviewDataBlock* iteminfo_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification) */ {
 public:
  inline CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification() : CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification(nullptr) {}
  ~CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification() override;
  explicit constexpr CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification(const CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification& from);
  CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification(CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification&& from) noexcept
    : CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification() {
    *this = ::std::move(from);
  }

  inline CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification& operator=(const CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification& operator=(CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification* internal_default_instance() {
    return reinterpret_cast<const CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification*>(
               &_CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    78;

  friend void swap(CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification& a, CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification* New() const final {
    return new CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification();
  }

  CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification";
  }
  protected:
  explicit CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountidsFieldNumber = 3,
    kMatchIdFieldNumber = 1,
    kDefindexFieldNumber = 2,
  };
  // repeated uint32 accountids = 3;
  int accountids_size() const;
  private:
  int _internal_accountids_size() const;
  public:
  void clear_accountids();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_accountids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_accountids() const;
  void _internal_add_accountids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_accountids();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 accountids(int index) const;
  void set_accountids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_accountids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      accountids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_accountids();

  // optional uint64 match_id = 1;
  bool has_match_id() const;
  private:
  bool _internal_has_match_id() const;
  public:
  void clear_match_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 match_id() const;
  void set_match_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_match_id() const;
  void _internal_set_match_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 defindex = 2;
  bool has_defindex() const;
  private:
  bool _internal_has_defindex() const;
  public:
  void clear_defindex();
  ::PROTOBUF_NAMESPACE_ID::uint32 defindex() const;
  void set_defindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_defindex() const;
  void _internal_set_defindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > accountids_;
  ::PROTOBUF_NAMESPACE_ID::uint64 match_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 defindex_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames) */ {
 public:
  inline CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames() : CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames(nullptr) {}
  explicit constexpr CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames(const CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames& from);
  CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames(CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames&& from) noexcept
    : CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames() {
    *this = ::std::move(from);
  }

  inline CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames& operator=(const CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames& operator=(CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames* internal_default_instance() {
    return reinterpret_cast<const CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames*>(
               &_CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    79;

  friend void swap(CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames& a, CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames* New() const final {
    return new CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames();
  }

  CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames";
  }
  protected:
  explicit CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser) */ {
 public:
  inline CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser() : CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser(nullptr) {}
  ~CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser() override;
  explicit constexpr CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser(const CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser& from);
  CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser(CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser&& from) noexcept
    : CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser() {
    *this = ::std::move(from);
  }

  inline CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser& operator=(const CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser& operator=(CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser* internal_default_instance() {
    return reinterpret_cast<const CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser*>(
               &_CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    80;

  friend void swap(CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser& a, CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser* New() const final {
    return new CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser();
  }

  CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser";
  }
  protected:
  explicit CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountidFieldNumber = 1,
  };
  // optional uint32 accountid = 1;
  bool has_accountid() const;
  private:
  bool _internal_has_accountid() const;
  public:
  void clear_accountid();
  ::PROTOBUF_NAMESPACE_ID::uint32 accountid() const;
  void set_accountid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_accountid() const;
  void _internal_set_accountid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 accountid_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_MatchListRequestRecentUserGames final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCCStrike15_v2_MatchListRequestRecentUserGames) */ {
 public:
  inline CMsgGCCStrike15_v2_MatchListRequestRecentUserGames() : CMsgGCCStrike15_v2_MatchListRequestRecentUserGames(nullptr) {}
  ~CMsgGCCStrike15_v2_MatchListRequestRecentUserGames() override;
  explicit constexpr CMsgGCCStrike15_v2_MatchListRequestRecentUserGames(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCCStrike15_v2_MatchListRequestRecentUserGames(const CMsgGCCStrike15_v2_MatchListRequestRecentUserGames& from);
  CMsgGCCStrike15_v2_MatchListRequestRecentUserGames(CMsgGCCStrike15_v2_MatchListRequestRecentUserGames&& from) noexcept
    : CMsgGCCStrike15_v2_MatchListRequestRecentUserGames() {
    *this = ::std::move(from);
  }

  inline CMsgGCCStrike15_v2_MatchListRequestRecentUserGames& operator=(const CMsgGCCStrike15_v2_MatchListRequestRecentUserGames& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCCStrike15_v2_MatchListRequestRecentUserGames& operator=(CMsgGCCStrike15_v2_MatchListRequestRecentUserGames&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCCStrike15_v2_MatchListRequestRecentUserGames& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCCStrike15_v2_MatchListRequestRecentUserGames* internal_default_instance() {
    return reinterpret_cast<const CMsgGCCStrike15_v2_MatchListRequestRecentUserGames*>(
               &_CMsgGCCStrike15_v2_MatchListRequestRecentUserGames_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    81;

  friend void swap(CMsgGCCStrike15_v2_MatchListRequestRecentUserGames& a, CMsgGCCStrike15_v2_MatchListRequestRecentUserGames& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCCStrike15_v2_MatchListRequestRecentUserGames* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCCStrike15_v2_MatchListRequestRecentUserGames* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCCStrike15_v2_MatchListRequestRecentUserGames* New() const final {
    return new CMsgGCCStrike15_v2_MatchListRequestRecentUserGames();
  }

  CMsgGCCStrike15_v2_MatchListRequestRecentUserGames* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCCStrike15_v2_MatchListRequestRecentUserGames>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCCStrike15_v2_MatchListRequestRecentUserGames& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgGCCStrike15_v2_MatchListRequestRecentUserGames& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCCStrike15_v2_MatchListRequestRecentUserGames* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCCStrike15_v2_MatchListRequestRecentUserGames";
  }
  protected:
  explicit CMsgGCCStrike15_v2_MatchListRequestRecentUserGames(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountidFieldNumber = 1,
  };
  // optional uint32 accountid = 1;
  bool has_accountid() const;
  private:
  bool _internal_has_accountid() const;
  public:
  void clear_accountid();
  ::PROTOBUF_NAMESPACE_ID::uint32 accountid() const;
  void set_accountid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_accountid() const;
  void _internal_set_accountid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_MatchListRequestRecentUserGames)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 accountid_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_MatchListRequestTournamentGames final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCCStrike15_v2_MatchListRequestTournamentGames) */ {
 public:
  inline CMsgGCCStrike15_v2_MatchListRequestTournamentGames() : CMsgGCCStrike15_v2_MatchListRequestTournamentGames(nullptr) {}
  ~CMsgGCCStrike15_v2_MatchListRequestTournamentGames() override;
  explicit constexpr CMsgGCCStrike15_v2_MatchListRequestTournamentGames(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCCStrike15_v2_MatchListRequestTournamentGames(const CMsgGCCStrike15_v2_MatchListRequestTournamentGames& from);
  CMsgGCCStrike15_v2_MatchListRequestTournamentGames(CMsgGCCStrike15_v2_MatchListRequestTournamentGames&& from) noexcept
    : CMsgGCCStrike15_v2_MatchListRequestTournamentGames() {
    *this = ::std::move(from);
  }

  inline CMsgGCCStrike15_v2_MatchListRequestTournamentGames& operator=(const CMsgGCCStrike15_v2_MatchListRequestTournamentGames& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCCStrike15_v2_MatchListRequestTournamentGames& operator=(CMsgGCCStrike15_v2_MatchListRequestTournamentGames&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCCStrike15_v2_MatchListRequestTournamentGames& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCCStrike15_v2_MatchListRequestTournamentGames* internal_default_instance() {
    return reinterpret_cast<const CMsgGCCStrike15_v2_MatchListRequestTournamentGames*>(
               &_CMsgGCCStrike15_v2_MatchListRequestTournamentGames_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    82;

  friend void swap(CMsgGCCStrike15_v2_MatchListRequestTournamentGames& a, CMsgGCCStrike15_v2_MatchListRequestTournamentGames& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCCStrike15_v2_MatchListRequestTournamentGames* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCCStrike15_v2_MatchListRequestTournamentGames* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCCStrike15_v2_MatchListRequestTournamentGames* New() const final {
    return new CMsgGCCStrike15_v2_MatchListRequestTournamentGames();
  }

  CMsgGCCStrike15_v2_MatchListRequestTournamentGames* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCCStrike15_v2_MatchListRequestTournamentGames>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCCStrike15_v2_MatchListRequestTournamentGames& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgGCCStrike15_v2_MatchListRequestTournamentGames& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCCStrike15_v2_MatchListRequestTournamentGames* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCCStrike15_v2_MatchListRequestTournamentGames";
  }
  protected:
  explicit CMsgGCCStrike15_v2_MatchListRequestTournamentGames(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventidFieldNumber = 1,
  };
  // optional int32 eventid = 1;
  bool has_eventid() const;
  private:
  bool _internal_has_eventid() const;
  public:
  void clear_eventid();
  ::PROTOBUF_NAMESPACE_ID::int32 eventid() const;
  void set_eventid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_eventid() const;
  void _internal_set_eventid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_MatchListRequestTournamentGames)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 eventid_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_MatchListRequestFullGameInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCCStrike15_v2_MatchListRequestFullGameInfo) */ {
 public:
  inline CMsgGCCStrike15_v2_MatchListRequestFullGameInfo() : CMsgGCCStrike15_v2_MatchListRequestFullGameInfo(nullptr) {}
  ~CMsgGCCStrike15_v2_MatchListRequestFullGameInfo() override;
  explicit constexpr CMsgGCCStrike15_v2_MatchListRequestFullGameInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCCStrike15_v2_MatchListRequestFullGameInfo(const CMsgGCCStrike15_v2_MatchListRequestFullGameInfo& from);
  CMsgGCCStrike15_v2_MatchListRequestFullGameInfo(CMsgGCCStrike15_v2_MatchListRequestFullGameInfo&& from) noexcept
    : CMsgGCCStrike15_v2_MatchListRequestFullGameInfo() {
    *this = ::std::move(from);
  }

  inline CMsgGCCStrike15_v2_MatchListRequestFullGameInfo& operator=(const CMsgGCCStrike15_v2_MatchListRequestFullGameInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCCStrike15_v2_MatchListRequestFullGameInfo& operator=(CMsgGCCStrike15_v2_MatchListRequestFullGameInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCCStrike15_v2_MatchListRequestFullGameInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCCStrike15_v2_MatchListRequestFullGameInfo* internal_default_instance() {
    return reinterpret_cast<const CMsgGCCStrike15_v2_MatchListRequestFullGameInfo*>(
               &_CMsgGCCStrike15_v2_MatchListRequestFullGameInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    83;

  friend void swap(CMsgGCCStrike15_v2_MatchListRequestFullGameInfo& a, CMsgGCCStrike15_v2_MatchListRequestFullGameInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCCStrike15_v2_MatchListRequestFullGameInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCCStrike15_v2_MatchListRequestFullGameInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCCStrike15_v2_MatchListRequestFullGameInfo* New() const final {
    return new CMsgGCCStrike15_v2_MatchListRequestFullGameInfo();
  }

  CMsgGCCStrike15_v2_MatchListRequestFullGameInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCCStrike15_v2_MatchListRequestFullGameInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCCStrike15_v2_MatchListRequestFullGameInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgGCCStrike15_v2_MatchListRequestFullGameInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCCStrike15_v2_MatchListRequestFullGameInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCCStrike15_v2_MatchListRequestFullGameInfo";
  }
  protected:
  explicit CMsgGCCStrike15_v2_MatchListRequestFullGameInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMatchidFieldNumber = 1,
    kOutcomeidFieldNumber = 2,
    kTokenFieldNumber = 3,
  };
  // optional uint64 matchid = 1;
  bool has_matchid() const;
  private:
  bool _internal_has_matchid() const;
  public:
  void clear_matchid();
  ::PROTOBUF_NAMESPACE_ID::uint64 matchid() const;
  void set_matchid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_matchid() const;
  void _internal_set_matchid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 outcomeid = 2;
  bool has_outcomeid() const;
  private:
  bool _internal_has_outcomeid() const;
  public:
  void clear_outcomeid();
  ::PROTOBUF_NAMESPACE_ID::uint64 outcomeid() const;
  void set_outcomeid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_outcomeid() const;
  void _internal_set_outcomeid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 token = 3;
  bool has_token() const;
  private:
  bool _internal_has_token() const;
  public:
  void clear_token();
  ::PROTOBUF_NAMESPACE_ID::uint32 token() const;
  void set_token(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_token() const;
  void _internal_set_token(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_MatchListRequestFullGameInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 matchid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 outcomeid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 token_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CDataGCCStrike15_v2_MatchInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDataGCCStrike15_v2_MatchInfo) */ {
 public:
  inline CDataGCCStrike15_v2_MatchInfo() : CDataGCCStrike15_v2_MatchInfo(nullptr) {}
  ~CDataGCCStrike15_v2_MatchInfo() override;
  explicit constexpr CDataGCCStrike15_v2_MatchInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDataGCCStrike15_v2_MatchInfo(const CDataGCCStrike15_v2_MatchInfo& from);
  CDataGCCStrike15_v2_MatchInfo(CDataGCCStrike15_v2_MatchInfo&& from) noexcept
    : CDataGCCStrike15_v2_MatchInfo() {
    *this = ::std::move(from);
  }

  inline CDataGCCStrike15_v2_MatchInfo& operator=(const CDataGCCStrike15_v2_MatchInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDataGCCStrike15_v2_MatchInfo& operator=(CDataGCCStrike15_v2_MatchInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDataGCCStrike15_v2_MatchInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDataGCCStrike15_v2_MatchInfo* internal_default_instance() {
    return reinterpret_cast<const CDataGCCStrike15_v2_MatchInfo*>(
               &_CDataGCCStrike15_v2_MatchInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    84;

  friend void swap(CDataGCCStrike15_v2_MatchInfo& a, CDataGCCStrike15_v2_MatchInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CDataGCCStrike15_v2_MatchInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDataGCCStrike15_v2_MatchInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CDataGCCStrike15_v2_MatchInfo* New() const final {
    return new CDataGCCStrike15_v2_MatchInfo();
  }

  CDataGCCStrike15_v2_MatchInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CDataGCCStrike15_v2_MatchInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDataGCCStrike15_v2_MatchInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CDataGCCStrike15_v2_MatchInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDataGCCStrike15_v2_MatchInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDataGCCStrike15_v2_MatchInfo";
  }
  protected:
  explicit CDataGCCStrike15_v2_MatchInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoundstatsallFieldNumber = 5,
    kWatchablematchinfoFieldNumber = 3,
    kRoundstatsLegacyFieldNumber = 4,
    kMatchidFieldNumber = 1,
    kMatchtimeFieldNumber = 2,
  };
  // repeated .CMsgGCCStrike15_v2_MatchmakingServerRoundStats roundstatsall = 5;
  int roundstatsall_size() const;
  private:
  int _internal_roundstatsall_size() const;
  public:
  void clear_roundstatsall();
  ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats* mutable_roundstatsall(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats >*
      mutable_roundstatsall();
  private:
  const ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats& _internal_roundstatsall(int index) const;
  ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats* _internal_add_roundstatsall();
  public:
  const ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats& roundstatsall(int index) const;
  ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats* add_roundstatsall();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats >&
      roundstatsall() const;

  // optional .WatchableMatchInfo watchablematchinfo = 3;
  bool has_watchablematchinfo() const;
  private:
  bool _internal_has_watchablematchinfo() const;
  public:
  void clear_watchablematchinfo();
  const ::WatchableMatchInfo& watchablematchinfo() const;
  PROTOBUF_MUST_USE_RESULT ::WatchableMatchInfo* release_watchablematchinfo();
  ::WatchableMatchInfo* mutable_watchablematchinfo();
  void set_allocated_watchablematchinfo(::WatchableMatchInfo* watchablematchinfo);
  private:
  const ::WatchableMatchInfo& _internal_watchablematchinfo() const;
  ::WatchableMatchInfo* _internal_mutable_watchablematchinfo();
  public:
  void unsafe_arena_set_allocated_watchablematchinfo(
      ::WatchableMatchInfo* watchablematchinfo);
  ::WatchableMatchInfo* unsafe_arena_release_watchablematchinfo();

  // optional .CMsgGCCStrike15_v2_MatchmakingServerRoundStats roundstats_legacy = 4;
  bool has_roundstats_legacy() const;
  private:
  bool _internal_has_roundstats_legacy() const;
  public:
  void clear_roundstats_legacy();
  const ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats& roundstats_legacy() const;
  PROTOBUF_MUST_USE_RESULT ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats* release_roundstats_legacy();
  ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats* mutable_roundstats_legacy();
  void set_allocated_roundstats_legacy(::CMsgGCCStrike15_v2_MatchmakingServerRoundStats* roundstats_legacy);
  private:
  const ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats& _internal_roundstats_legacy() const;
  ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats* _internal_mutable_roundstats_legacy();
  public:
  void unsafe_arena_set_allocated_roundstats_legacy(
      ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats* roundstats_legacy);
  ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats* unsafe_arena_release_roundstats_legacy();

  // optional uint64 matchid = 1;
  bool has_matchid() const;
  private:
  bool _internal_has_matchid() const;
  public:
  void clear_matchid();
  ::PROTOBUF_NAMESPACE_ID::uint64 matchid() const;
  void set_matchid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_matchid() const;
  void _internal_set_matchid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 matchtime = 2;
  bool has_matchtime() const;
  private:
  bool _internal_has_matchtime() const;
  public:
  void clear_matchtime();
  ::PROTOBUF_NAMESPACE_ID::uint32 matchtime() const;
  void set_matchtime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_matchtime() const;
  void _internal_set_matchtime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CDataGCCStrike15_v2_MatchInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats > roundstatsall_;
  ::WatchableMatchInfo* watchablematchinfo_;
  ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats* roundstats_legacy_;
  ::PROTOBUF_NAMESPACE_ID::uint64 matchid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 matchtime_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CDataGCCStrike15_v2_TournamentGroupTeam final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDataGCCStrike15_v2_TournamentGroupTeam) */ {
 public:
  inline CDataGCCStrike15_v2_TournamentGroupTeam() : CDataGCCStrike15_v2_TournamentGroupTeam(nullptr) {}
  ~CDataGCCStrike15_v2_TournamentGroupTeam() override;
  explicit constexpr CDataGCCStrike15_v2_TournamentGroupTeam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDataGCCStrike15_v2_TournamentGroupTeam(const CDataGCCStrike15_v2_TournamentGroupTeam& from);
  CDataGCCStrike15_v2_TournamentGroupTeam(CDataGCCStrike15_v2_TournamentGroupTeam&& from) noexcept
    : CDataGCCStrike15_v2_TournamentGroupTeam() {
    *this = ::std::move(from);
  }

  inline CDataGCCStrike15_v2_TournamentGroupTeam& operator=(const CDataGCCStrike15_v2_TournamentGroupTeam& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDataGCCStrike15_v2_TournamentGroupTeam& operator=(CDataGCCStrike15_v2_TournamentGroupTeam&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDataGCCStrike15_v2_TournamentGroupTeam& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDataGCCStrike15_v2_TournamentGroupTeam* internal_default_instance() {
    return reinterpret_cast<const CDataGCCStrike15_v2_TournamentGroupTeam*>(
               &_CDataGCCStrike15_v2_TournamentGroupTeam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    85;

  friend void swap(CDataGCCStrike15_v2_TournamentGroupTeam& a, CDataGCCStrike15_v2_TournamentGroupTeam& b) {
    a.Swap(&b);
  }
  inline void Swap(CDataGCCStrike15_v2_TournamentGroupTeam* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDataGCCStrike15_v2_TournamentGroupTeam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CDataGCCStrike15_v2_TournamentGroupTeam* New() const final {
    return new CDataGCCStrike15_v2_TournamentGroupTeam();
  }

  CDataGCCStrike15_v2_TournamentGroupTeam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CDataGCCStrike15_v2_TournamentGroupTeam>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDataGCCStrike15_v2_TournamentGroupTeam& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CDataGCCStrike15_v2_TournamentGroupTeam& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDataGCCStrike15_v2_TournamentGroupTeam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDataGCCStrike15_v2_TournamentGroupTeam";
  }
  protected:
  explicit CDataGCCStrike15_v2_TournamentGroupTeam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTeamIdFieldNumber = 1,
    kScoreFieldNumber = 2,
    kCorrectpickFieldNumber = 3,
  };
  // optional int32 team_id = 1;
  bool has_team_id() const;
  private:
  bool _internal_has_team_id() const;
  public:
  void clear_team_id();
  ::PROTOBUF_NAMESPACE_ID::int32 team_id() const;
  void set_team_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_team_id() const;
  void _internal_set_team_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 score = 2;
  bool has_score() const;
  private:
  bool _internal_has_score() const;
  public:
  void clear_score();
  ::PROTOBUF_NAMESPACE_ID::int32 score() const;
  void set_score(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_score() const;
  void _internal_set_score(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool correctpick = 3;
  bool has_correctpick() const;
  private:
  bool _internal_has_correctpick() const;
  public:
  void clear_correctpick();
  bool correctpick() const;
  void set_correctpick(bool value);
  private:
  bool _internal_correctpick() const;
  void _internal_set_correctpick(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CDataGCCStrike15_v2_TournamentGroupTeam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 team_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 score_;
  bool correctpick_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CDataGCCStrike15_v2_TournamentGroup_Picks final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDataGCCStrike15_v2_TournamentGroup.Picks) */ {
 public:
  inline CDataGCCStrike15_v2_TournamentGroup_Picks() : CDataGCCStrike15_v2_TournamentGroup_Picks(nullptr) {}
  ~CDataGCCStrike15_v2_TournamentGroup_Picks() override;
  explicit constexpr CDataGCCStrike15_v2_TournamentGroup_Picks(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDataGCCStrike15_v2_TournamentGroup_Picks(const CDataGCCStrike15_v2_TournamentGroup_Picks& from);
  CDataGCCStrike15_v2_TournamentGroup_Picks(CDataGCCStrike15_v2_TournamentGroup_Picks&& from) noexcept
    : CDataGCCStrike15_v2_TournamentGroup_Picks() {
    *this = ::std::move(from);
  }

  inline CDataGCCStrike15_v2_TournamentGroup_Picks& operator=(const CDataGCCStrike15_v2_TournamentGroup_Picks& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDataGCCStrike15_v2_TournamentGroup_Picks& operator=(CDataGCCStrike15_v2_TournamentGroup_Picks&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDataGCCStrike15_v2_TournamentGroup_Picks& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDataGCCStrike15_v2_TournamentGroup_Picks* internal_default_instance() {
    return reinterpret_cast<const CDataGCCStrike15_v2_TournamentGroup_Picks*>(
               &_CDataGCCStrike15_v2_TournamentGroup_Picks_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    86;

  friend void swap(CDataGCCStrike15_v2_TournamentGroup_Picks& a, CDataGCCStrike15_v2_TournamentGroup_Picks& b) {
    a.Swap(&b);
  }
  inline void Swap(CDataGCCStrike15_v2_TournamentGroup_Picks* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDataGCCStrike15_v2_TournamentGroup_Picks* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CDataGCCStrike15_v2_TournamentGroup_Picks* New() const final {
    return new CDataGCCStrike15_v2_TournamentGroup_Picks();
  }

  CDataGCCStrike15_v2_TournamentGroup_Picks* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CDataGCCStrike15_v2_TournamentGroup_Picks>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDataGCCStrike15_v2_TournamentGroup_Picks& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CDataGCCStrike15_v2_TournamentGroup_Picks& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDataGCCStrike15_v2_TournamentGroup_Picks* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDataGCCStrike15_v2_TournamentGroup.Picks";
  }
  protected:
  explicit CDataGCCStrike15_v2_TournamentGroup_Picks(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPickidsFieldNumber = 1,
  };
  // repeated int32 pickids = 1;
  int pickids_size() const;
  private:
  int _internal_pickids_size() const;
  public:
  void clear_pickids();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pickids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_pickids() const;
  void _internal_add_pickids(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_pickids();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 pickids(int index) const;
  void set_pickids(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_pickids(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      pickids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_pickids();

  // @@protoc_insertion_point(class_scope:CDataGCCStrike15_v2_TournamentGroup.Picks)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > pickids_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CDataGCCStrike15_v2_TournamentGroup final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDataGCCStrike15_v2_TournamentGroup) */ {
 public:
  inline CDataGCCStrike15_v2_TournamentGroup() : CDataGCCStrike15_v2_TournamentGroup(nullptr) {}
  ~CDataGCCStrike15_v2_TournamentGroup() override;
  explicit constexpr CDataGCCStrike15_v2_TournamentGroup(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDataGCCStrike15_v2_TournamentGroup(const CDataGCCStrike15_v2_TournamentGroup& from);
  CDataGCCStrike15_v2_TournamentGroup(CDataGCCStrike15_v2_TournamentGroup&& from) noexcept
    : CDataGCCStrike15_v2_TournamentGroup() {
    *this = ::std::move(from);
  }

  inline CDataGCCStrike15_v2_TournamentGroup& operator=(const CDataGCCStrike15_v2_TournamentGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDataGCCStrike15_v2_TournamentGroup& operator=(CDataGCCStrike15_v2_TournamentGroup&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDataGCCStrike15_v2_TournamentGroup& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDataGCCStrike15_v2_TournamentGroup* internal_default_instance() {
    return reinterpret_cast<const CDataGCCStrike15_v2_TournamentGroup*>(
               &_CDataGCCStrike15_v2_TournamentGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    87;

  friend void swap(CDataGCCStrike15_v2_TournamentGroup& a, CDataGCCStrike15_v2_TournamentGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(CDataGCCStrike15_v2_TournamentGroup* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDataGCCStrike15_v2_TournamentGroup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CDataGCCStrike15_v2_TournamentGroup* New() const final {
    return new CDataGCCStrike15_v2_TournamentGroup();
  }

  CDataGCCStrike15_v2_TournamentGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CDataGCCStrike15_v2_TournamentGroup>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDataGCCStrike15_v2_TournamentGroup& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CDataGCCStrike15_v2_TournamentGroup& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDataGCCStrike15_v2_TournamentGroup* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDataGCCStrike15_v2_TournamentGroup";
  }
  protected:
  explicit CDataGCCStrike15_v2_TournamentGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CDataGCCStrike15_v2_TournamentGroup_Picks Picks;

  // accessors -------------------------------------------------------

  enum : int {
    kTeamsFieldNumber = 5,
    kStageIdsFieldNumber = 6,
    kPicksFieldNumber = 10,
    kNameFieldNumber = 2,
    kDescFieldNumber = 3,
    kGroupidFieldNumber = 1,
    kPicksDeprecatedFieldNumber = 4,
    kPicklockuntiltimeFieldNumber = 7,
    kPickableteamsFieldNumber = 8,
    kPointsPerPickFieldNumber = 9,
  };
  // repeated .CDataGCCStrike15_v2_TournamentGroupTeam teams = 5;
  int teams_size() const;
  private:
  int _internal_teams_size() const;
  public:
  void clear_teams();
  ::CDataGCCStrike15_v2_TournamentGroupTeam* mutable_teams(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDataGCCStrike15_v2_TournamentGroupTeam >*
      mutable_teams();
  private:
  const ::CDataGCCStrike15_v2_TournamentGroupTeam& _internal_teams(int index) const;
  ::CDataGCCStrike15_v2_TournamentGroupTeam* _internal_add_teams();
  public:
  const ::CDataGCCStrike15_v2_TournamentGroupTeam& teams(int index) const;
  ::CDataGCCStrike15_v2_TournamentGroupTeam* add_teams();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDataGCCStrike15_v2_TournamentGroupTeam >&
      teams() const;

  // repeated int32 stage_ids = 6;
  int stage_ids_size() const;
  private:
  int _internal_stage_ids_size() const;
  public:
  void clear_stage_ids();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_stage_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_stage_ids() const;
  void _internal_add_stage_ids(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_stage_ids();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 stage_ids(int index) const;
  void set_stage_ids(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_stage_ids(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      stage_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_stage_ids();

  // repeated .CDataGCCStrike15_v2_TournamentGroup.Picks picks = 10;
  int picks_size() const;
  private:
  int _internal_picks_size() const;
  public:
  void clear_picks();
  ::CDataGCCStrike15_v2_TournamentGroup_Picks* mutable_picks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDataGCCStrike15_v2_TournamentGroup_Picks >*
      mutable_picks();
  private:
  const ::CDataGCCStrike15_v2_TournamentGroup_Picks& _internal_picks(int index) const;
  ::CDataGCCStrike15_v2_TournamentGroup_Picks* _internal_add_picks();
  public:
  const ::CDataGCCStrike15_v2_TournamentGroup_Picks& picks(int index) const;
  ::CDataGCCStrike15_v2_TournamentGroup_Picks* add_picks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDataGCCStrike15_v2_TournamentGroup_Picks >&
      picks() const;

  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string desc = 3;
  bool has_desc() const;
  private:
  bool _internal_has_desc() const;
  public:
  void clear_desc();
  const std::string& desc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_desc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_desc();
  PROTOBUF_MUST_USE_RESULT std::string* release_desc();
  void set_allocated_desc(std::string* desc);
  private:
  const std::string& _internal_desc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_desc(const std::string& value);
  std::string* _internal_mutable_desc();
  public:

  // optional uint32 groupid = 1;
  bool has_groupid() const;
  private:
  bool _internal_has_groupid() const;
  public:
  void clear_groupid();
  ::PROTOBUF_NAMESPACE_ID::uint32 groupid() const;
  void set_groupid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_groupid() const;
  void _internal_set_groupid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 picks__deprecated = 4;
  bool has_picks__deprecated() const;
  private:
  bool _internal_has_picks__deprecated() const;
  public:
  void clear_picks__deprecated();
  ::PROTOBUF_NAMESPACE_ID::uint32 picks__deprecated() const;
  void set_picks__deprecated(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_picks__deprecated() const;
  void _internal_set_picks__deprecated(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 picklockuntiltime = 7;
  bool has_picklockuntiltime() const;
  private:
  bool _internal_has_picklockuntiltime() const;
  public:
  void clear_picklockuntiltime();
  ::PROTOBUF_NAMESPACE_ID::uint32 picklockuntiltime() const;
  void set_picklockuntiltime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_picklockuntiltime() const;
  void _internal_set_picklockuntiltime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 pickableteams = 8;
  bool has_pickableteams() const;
  private:
  bool _internal_has_pickableteams() const;
  public:
  void clear_pickableteams();
  ::PROTOBUF_NAMESPACE_ID::uint32 pickableteams() const;
  void set_pickableteams(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pickableteams() const;
  void _internal_set_pickableteams(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 points_per_pick = 9;
  bool has_points_per_pick() const;
  private:
  bool _internal_has_points_per_pick() const;
  public:
  void clear_points_per_pick();
  ::PROTOBUF_NAMESPACE_ID::uint32 points_per_pick() const;
  void set_points_per_pick(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_points_per_pick() const;
  void _internal_set_points_per_pick(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CDataGCCStrike15_v2_TournamentGroup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDataGCCStrike15_v2_TournamentGroupTeam > teams_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > stage_ids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDataGCCStrike15_v2_TournamentGroup_Picks > picks_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr desc_;
  ::PROTOBUF_NAMESPACE_ID::uint32 groupid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 picks__deprecated_;
  ::PROTOBUF_NAMESPACE_ID::uint32 picklockuntiltime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pickableteams_;
  ::PROTOBUF_NAMESPACE_ID::uint32 points_per_pick_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CDataGCCStrike15_v2_TournamentSection final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDataGCCStrike15_v2_TournamentSection) */ {
 public:
  inline CDataGCCStrike15_v2_TournamentSection() : CDataGCCStrike15_v2_TournamentSection(nullptr) {}
  ~CDataGCCStrike15_v2_TournamentSection() override;
  explicit constexpr CDataGCCStrike15_v2_TournamentSection(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDataGCCStrike15_v2_TournamentSection(const CDataGCCStrike15_v2_TournamentSection& from);
  CDataGCCStrike15_v2_TournamentSection(CDataGCCStrike15_v2_TournamentSection&& from) noexcept
    : CDataGCCStrike15_v2_TournamentSection() {
    *this = ::std::move(from);
  }

  inline CDataGCCStrike15_v2_TournamentSection& operator=(const CDataGCCStrike15_v2_TournamentSection& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDataGCCStrike15_v2_TournamentSection& operator=(CDataGCCStrike15_v2_TournamentSection&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDataGCCStrike15_v2_TournamentSection& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDataGCCStrike15_v2_TournamentSection* internal_default_instance() {
    return reinterpret_cast<const CDataGCCStrike15_v2_TournamentSection*>(
               &_CDataGCCStrike15_v2_TournamentSection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    88;

  friend void swap(CDataGCCStrike15_v2_TournamentSection& a, CDataGCCStrike15_v2_TournamentSection& b) {
    a.Swap(&b);
  }
  inline void Swap(CDataGCCStrike15_v2_TournamentSection* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDataGCCStrike15_v2_TournamentSection* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CDataGCCStrike15_v2_TournamentSection* New() const final {
    return new CDataGCCStrike15_v2_TournamentSection();
  }

  CDataGCCStrike15_v2_TournamentSection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CDataGCCStrike15_v2_TournamentSection>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDataGCCStrike15_v2_TournamentSection& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CDataGCCStrike15_v2_TournamentSection& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDataGCCStrike15_v2_TournamentSection* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDataGCCStrike15_v2_TournamentSection";
  }
  protected:
  explicit CDataGCCStrike15_v2_TournamentSection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupsFieldNumber = 4,
    kNameFieldNumber = 2,
    kDescFieldNumber = 3,
    kSectionidFieldNumber = 1,
  };
  // repeated .CDataGCCStrike15_v2_TournamentGroup groups = 4;
  int groups_size() const;
  private:
  int _internal_groups_size() const;
  public:
  void clear_groups();
  ::CDataGCCStrike15_v2_TournamentGroup* mutable_groups(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDataGCCStrike15_v2_TournamentGroup >*
      mutable_groups();
  private:
  const ::CDataGCCStrike15_v2_TournamentGroup& _internal_groups(int index) const;
  ::CDataGCCStrike15_v2_TournamentGroup* _internal_add_groups();
  public:
  const ::CDataGCCStrike15_v2_TournamentGroup& groups(int index) const;
  ::CDataGCCStrike15_v2_TournamentGroup* add_groups();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDataGCCStrike15_v2_TournamentGroup >&
      groups() const;

  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string desc = 3;
  bool has_desc() const;
  private:
  bool _internal_has_desc() const;
  public:
  void clear_desc();
  const std::string& desc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_desc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_desc();
  PROTOBUF_MUST_USE_RESULT std::string* release_desc();
  void set_allocated_desc(std::string* desc);
  private:
  const std::string& _internal_desc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_desc(const std::string& value);
  std::string* _internal_mutable_desc();
  public:

  // optional uint32 sectionid = 1;
  bool has_sectionid() const;
  private:
  bool _internal_has_sectionid() const;
  public:
  void clear_sectionid();
  ::PROTOBUF_NAMESPACE_ID::uint32 sectionid() const;
  void set_sectionid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sectionid() const;
  void _internal_set_sectionid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CDataGCCStrike15_v2_TournamentSection)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDataGCCStrike15_v2_TournamentGroup > groups_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr desc_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sectionid_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CDataGCCStrike15_v2_TournamentInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDataGCCStrike15_v2_TournamentInfo) */ {
 public:
  inline CDataGCCStrike15_v2_TournamentInfo() : CDataGCCStrike15_v2_TournamentInfo(nullptr) {}
  ~CDataGCCStrike15_v2_TournamentInfo() override;
  explicit constexpr CDataGCCStrike15_v2_TournamentInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDataGCCStrike15_v2_TournamentInfo(const CDataGCCStrike15_v2_TournamentInfo& from);
  CDataGCCStrike15_v2_TournamentInfo(CDataGCCStrike15_v2_TournamentInfo&& from) noexcept
    : CDataGCCStrike15_v2_TournamentInfo() {
    *this = ::std::move(from);
  }

  inline CDataGCCStrike15_v2_TournamentInfo& operator=(const CDataGCCStrike15_v2_TournamentInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDataGCCStrike15_v2_TournamentInfo& operator=(CDataGCCStrike15_v2_TournamentInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDataGCCStrike15_v2_TournamentInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDataGCCStrike15_v2_TournamentInfo* internal_default_instance() {
    return reinterpret_cast<const CDataGCCStrike15_v2_TournamentInfo*>(
               &_CDataGCCStrike15_v2_TournamentInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    89;

  friend void swap(CDataGCCStrike15_v2_TournamentInfo& a, CDataGCCStrike15_v2_TournamentInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CDataGCCStrike15_v2_TournamentInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDataGCCStrike15_v2_TournamentInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CDataGCCStrike15_v2_TournamentInfo* New() const final {
    return new CDataGCCStrike15_v2_TournamentInfo();
  }

  CDataGCCStrike15_v2_TournamentInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CDataGCCStrike15_v2_TournamentInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDataGCCStrike15_v2_TournamentInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CDataGCCStrike15_v2_TournamentInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDataGCCStrike15_v2_TournamentInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDataGCCStrike15_v2_TournamentInfo";
  }
  protected:
  explicit CDataGCCStrike15_v2_TournamentInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSectionsFieldNumber = 1,
    kTournamentTeamsFieldNumber = 3,
    kTournamentEventFieldNumber = 2,
  };
  // repeated .CDataGCCStrike15_v2_TournamentSection sections = 1;
  int sections_size() const;
  private:
  int _internal_sections_size() const;
  public:
  void clear_sections();
  ::CDataGCCStrike15_v2_TournamentSection* mutable_sections(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDataGCCStrike15_v2_TournamentSection >*
      mutable_sections();
  private:
  const ::CDataGCCStrike15_v2_TournamentSection& _internal_sections(int index) const;
  ::CDataGCCStrike15_v2_TournamentSection* _internal_add_sections();
  public:
  const ::CDataGCCStrike15_v2_TournamentSection& sections(int index) const;
  ::CDataGCCStrike15_v2_TournamentSection* add_sections();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDataGCCStrike15_v2_TournamentSection >&
      sections() const;

  // repeated .TournamentTeam tournament_teams = 3;
  int tournament_teams_size() const;
  private:
  int _internal_tournament_teams_size() const;
  public:
  void clear_tournament_teams();
  ::TournamentTeam* mutable_tournament_teams(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TournamentTeam >*
      mutable_tournament_teams();
  private:
  const ::TournamentTeam& _internal_tournament_teams(int index) const;
  ::TournamentTeam* _internal_add_tournament_teams();
  public:
  const ::TournamentTeam& tournament_teams(int index) const;
  ::TournamentTeam* add_tournament_teams();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TournamentTeam >&
      tournament_teams() const;

  // optional .TournamentEvent tournament_event = 2;
  bool has_tournament_event() const;
  private:
  bool _internal_has_tournament_event() const;
  public:
  void clear_tournament_event();
  const ::TournamentEvent& tournament_event() const;
  PROTOBUF_MUST_USE_RESULT ::TournamentEvent* release_tournament_event();
  ::TournamentEvent* mutable_tournament_event();
  void set_allocated_tournament_event(::TournamentEvent* tournament_event);
  private:
  const ::TournamentEvent& _internal_tournament_event() const;
  ::TournamentEvent* _internal_mutable_tournament_event();
  public:
  void unsafe_arena_set_allocated_tournament_event(
      ::TournamentEvent* tournament_event);
  ::TournamentEvent* unsafe_arena_release_tournament_event();

  // @@protoc_insertion_point(class_scope:CDataGCCStrike15_v2_TournamentInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDataGCCStrike15_v2_TournamentSection > sections_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TournamentTeam > tournament_teams_;
  ::TournamentEvent* tournament_event_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_MatchList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCCStrike15_v2_MatchList) */ {
 public:
  inline CMsgGCCStrike15_v2_MatchList() : CMsgGCCStrike15_v2_MatchList(nullptr) {}
  ~CMsgGCCStrike15_v2_MatchList() override;
  explicit constexpr CMsgGCCStrike15_v2_MatchList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCCStrike15_v2_MatchList(const CMsgGCCStrike15_v2_MatchList& from);
  CMsgGCCStrike15_v2_MatchList(CMsgGCCStrike15_v2_MatchList&& from) noexcept
    : CMsgGCCStrike15_v2_MatchList() {
    *this = ::std::move(from);
  }

  inline CMsgGCCStrike15_v2_MatchList& operator=(const CMsgGCCStrike15_v2_MatchList& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCCStrike15_v2_MatchList& operator=(CMsgGCCStrike15_v2_MatchList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCCStrike15_v2_MatchList& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCCStrike15_v2_MatchList* internal_default_instance() {
    return reinterpret_cast<const CMsgGCCStrike15_v2_MatchList*>(
               &_CMsgGCCStrike15_v2_MatchList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    90;

  friend void swap(CMsgGCCStrike15_v2_MatchList& a, CMsgGCCStrike15_v2_MatchList& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCCStrike15_v2_MatchList* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCCStrike15_v2_MatchList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCCStrike15_v2_MatchList* New() const final {
    return new CMsgGCCStrike15_v2_MatchList();
  }

  CMsgGCCStrike15_v2_MatchList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCCStrike15_v2_MatchList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCCStrike15_v2_MatchList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgGCCStrike15_v2_MatchList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCCStrike15_v2_MatchList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCCStrike15_v2_MatchList";
  }
  protected:
  explicit CMsgGCCStrike15_v2_MatchList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMatchesFieldNumber = 4,
    kStreamsFieldNumber = 5,
    kTournamentinfoFieldNumber = 6,
    kMsgrequestidFieldNumber = 1,
    kAccountidFieldNumber = 2,
    kServertimeFieldNumber = 3,
  };
  // repeated .CDataGCCStrike15_v2_MatchInfo matches = 4;
  int matches_size() const;
  private:
  int _internal_matches_size() const;
  public:
  void clear_matches();
  ::CDataGCCStrike15_v2_MatchInfo* mutable_matches(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDataGCCStrike15_v2_MatchInfo >*
      mutable_matches();
  private:
  const ::CDataGCCStrike15_v2_MatchInfo& _internal_matches(int index) const;
  ::CDataGCCStrike15_v2_MatchInfo* _internal_add_matches();
  public:
  const ::CDataGCCStrike15_v2_MatchInfo& matches(int index) const;
  ::CDataGCCStrike15_v2_MatchInfo* add_matches();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDataGCCStrike15_v2_MatchInfo >&
      matches() const;

  // repeated .TournamentTeam streams = 5;
  int streams_size() const;
  private:
  int _internal_streams_size() const;
  public:
  void clear_streams();
  ::TournamentTeam* mutable_streams(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TournamentTeam >*
      mutable_streams();
  private:
  const ::TournamentTeam& _internal_streams(int index) const;
  ::TournamentTeam* _internal_add_streams();
  public:
  const ::TournamentTeam& streams(int index) const;
  ::TournamentTeam* add_streams();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TournamentTeam >&
      streams() const;

  // optional .CDataGCCStrike15_v2_TournamentInfo tournamentinfo = 6;
  bool has_tournamentinfo() const;
  private:
  bool _internal_has_tournamentinfo() const;
  public:
  void clear_tournamentinfo();
  const ::CDataGCCStrike15_v2_TournamentInfo& tournamentinfo() const;
  PROTOBUF_MUST_USE_RESULT ::CDataGCCStrike15_v2_TournamentInfo* release_tournamentinfo();
  ::CDataGCCStrike15_v2_TournamentInfo* mutable_tournamentinfo();
  void set_allocated_tournamentinfo(::CDataGCCStrike15_v2_TournamentInfo* tournamentinfo);
  private:
  const ::CDataGCCStrike15_v2_TournamentInfo& _internal_tournamentinfo() const;
  ::CDataGCCStrike15_v2_TournamentInfo* _internal_mutable_tournamentinfo();
  public:
  void unsafe_arena_set_allocated_tournamentinfo(
      ::CDataGCCStrike15_v2_TournamentInfo* tournamentinfo);
  ::CDataGCCStrike15_v2_TournamentInfo* unsafe_arena_release_tournamentinfo();

  // optional uint32 msgrequestid = 1;
  bool has_msgrequestid() const;
  private:
  bool _internal_has_msgrequestid() const;
  public:
  void clear_msgrequestid();
  ::PROTOBUF_NAMESPACE_ID::uint32 msgrequestid() const;
  void set_msgrequestid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_msgrequestid() const;
  void _internal_set_msgrequestid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 accountid = 2;
  bool has_accountid() const;
  private:
  bool _internal_has_accountid() const;
  public:
  void clear_accountid();
  ::PROTOBUF_NAMESPACE_ID::uint32 accountid() const;
  void set_accountid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_accountid() const;
  void _internal_set_accountid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 servertime = 3;
  bool has_servertime() const;
  private:
  bool _internal_has_servertime() const;
  public:
  void clear_servertime();
  ::PROTOBUF_NAMESPACE_ID::uint32 servertime() const;
  void set_servertime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_servertime() const;
  void _internal_set_servertime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_MatchList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDataGCCStrike15_v2_MatchInfo > matches_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TournamentTeam > streams_;
  ::CDataGCCStrike15_v2_TournamentInfo* tournamentinfo_;
  ::PROTOBUF_NAMESPACE_ID::uint32 msgrequestid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 accountid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 servertime_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCCStrike15_v2_Predictions.GroupMatchTeamPick) */ {
 public:
  inline CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick() : CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick(nullptr) {}
  ~CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick() override;
  explicit constexpr CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick(const CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick& from);
  CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick(CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick&& from) noexcept
    : CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick() {
    *this = ::std::move(from);
  }

  inline CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick& operator=(const CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick& operator=(CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick* internal_default_instance() {
    return reinterpret_cast<const CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick*>(
               &_CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    91;

  friend void swap(CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick& a, CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick* New() const final {
    return new CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick();
  }

  CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCCStrike15_v2_Predictions.GroupMatchTeamPick";
  }
  protected:
  explicit CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSectionidFieldNumber = 1,
    kGroupidFieldNumber = 2,
    kIndexFieldNumber = 3,
    kTeamidFieldNumber = 4,
    kItemidFieldNumber = 5,
  };
  // optional int32 sectionid = 1;
  bool has_sectionid() const;
  private:
  bool _internal_has_sectionid() const;
  public:
  void clear_sectionid();
  ::PROTOBUF_NAMESPACE_ID::int32 sectionid() const;
  void set_sectionid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sectionid() const;
  void _internal_set_sectionid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 groupid = 2;
  bool has_groupid() const;
  private:
  bool _internal_has_groupid() const;
  public:
  void clear_groupid();
  ::PROTOBUF_NAMESPACE_ID::int32 groupid() const;
  void set_groupid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_groupid() const;
  void _internal_set_groupid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 index = 3;
  bool has_index() const;
  private:
  bool _internal_has_index() const;
  public:
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::int32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 teamid = 4;
  bool has_teamid() const;
  private:
  bool _internal_has_teamid() const;
  public:
  void clear_teamid();
  ::PROTOBUF_NAMESPACE_ID::int32 teamid() const;
  void set_teamid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_teamid() const;
  void _internal_set_teamid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint64 itemid = 5;
  bool has_itemid() const;
  private:
  bool _internal_has_itemid() const;
  public:
  void clear_itemid();
  ::PROTOBUF_NAMESPACE_ID::uint64 itemid() const;
  void set_itemid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_itemid() const;
  void _internal_set_itemid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_Predictions.GroupMatchTeamPick)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 sectionid_;
  ::PROTOBUF_NAMESPACE_ID::int32 groupid_;
  ::PROTOBUF_NAMESPACE_ID::int32 index_;
  ::PROTOBUF_NAMESPACE_ID::int32 teamid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 itemid_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_Predictions final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCCStrike15_v2_Predictions) */ {
 public:
  inline CMsgGCCStrike15_v2_Predictions() : CMsgGCCStrike15_v2_Predictions(nullptr) {}
  ~CMsgGCCStrike15_v2_Predictions() override;
  explicit constexpr CMsgGCCStrike15_v2_Predictions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCCStrike15_v2_Predictions(const CMsgGCCStrike15_v2_Predictions& from);
  CMsgGCCStrike15_v2_Predictions(CMsgGCCStrike15_v2_Predictions&& from) noexcept
    : CMsgGCCStrike15_v2_Predictions() {
    *this = ::std::move(from);
  }

  inline CMsgGCCStrike15_v2_Predictions& operator=(const CMsgGCCStrike15_v2_Predictions& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCCStrike15_v2_Predictions& operator=(CMsgGCCStrike15_v2_Predictions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCCStrike15_v2_Predictions& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCCStrike15_v2_Predictions* internal_default_instance() {
    return reinterpret_cast<const CMsgGCCStrike15_v2_Predictions*>(
               &_CMsgGCCStrike15_v2_Predictions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    92;

  friend void swap(CMsgGCCStrike15_v2_Predictions& a, CMsgGCCStrike15_v2_Predictions& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCCStrike15_v2_Predictions* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCCStrike15_v2_Predictions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCCStrike15_v2_Predictions* New() const final {
    return new CMsgGCCStrike15_v2_Predictions();
  }

  CMsgGCCStrike15_v2_Predictions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCCStrike15_v2_Predictions>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCCStrike15_v2_Predictions& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgGCCStrike15_v2_Predictions& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCCStrike15_v2_Predictions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCCStrike15_v2_Predictions";
  }
  protected:
  explicit CMsgGCCStrike15_v2_Predictions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick GroupMatchTeamPick;

  // accessors -------------------------------------------------------

  enum : int {
    kGroupMatchTeamPicksFieldNumber = 2,
    kEventIdFieldNumber = 1,
  };
  // repeated .CMsgGCCStrike15_v2_Predictions.GroupMatchTeamPick group_match_team_picks = 2;
  int group_match_team_picks_size() const;
  private:
  int _internal_group_match_team_picks_size() const;
  public:
  void clear_group_match_team_picks();
  ::CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick* mutable_group_match_team_picks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick >*
      mutable_group_match_team_picks();
  private:
  const ::CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick& _internal_group_match_team_picks(int index) const;
  ::CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick* _internal_add_group_match_team_picks();
  public:
  const ::CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick& group_match_team_picks(int index) const;
  ::CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick* add_group_match_team_picks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick >&
      group_match_team_picks() const;

  // optional uint32 event_id = 1;
  bool has_event_id() const;
  private:
  bool _internal_has_event_id() const;
  public:
  void clear_event_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 event_id() const;
  void set_event_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_event_id() const;
  void _internal_set_event_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_Predictions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick > group_match_team_picks_;
  ::PROTOBUF_NAMESPACE_ID::uint32 event_id_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_Fantasy_FantasySlot final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCCStrike15_v2_Fantasy.FantasySlot) */ {
 public:
  inline CMsgGCCStrike15_v2_Fantasy_FantasySlot() : CMsgGCCStrike15_v2_Fantasy_FantasySlot(nullptr) {}
  ~CMsgGCCStrike15_v2_Fantasy_FantasySlot() override;
  explicit constexpr CMsgGCCStrike15_v2_Fantasy_FantasySlot(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCCStrike15_v2_Fantasy_FantasySlot(const CMsgGCCStrike15_v2_Fantasy_FantasySlot& from);
  CMsgGCCStrike15_v2_Fantasy_FantasySlot(CMsgGCCStrike15_v2_Fantasy_FantasySlot&& from) noexcept
    : CMsgGCCStrike15_v2_Fantasy_FantasySlot() {
    *this = ::std::move(from);
  }

  inline CMsgGCCStrike15_v2_Fantasy_FantasySlot& operator=(const CMsgGCCStrike15_v2_Fantasy_FantasySlot& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCCStrike15_v2_Fantasy_FantasySlot& operator=(CMsgGCCStrike15_v2_Fantasy_FantasySlot&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCCStrike15_v2_Fantasy_FantasySlot& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCCStrike15_v2_Fantasy_FantasySlot* internal_default_instance() {
    return reinterpret_cast<const CMsgGCCStrike15_v2_Fantasy_FantasySlot*>(
               &_CMsgGCCStrike15_v2_Fantasy_FantasySlot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    93;

  friend void swap(CMsgGCCStrike15_v2_Fantasy_FantasySlot& a, CMsgGCCStrike15_v2_Fantasy_FantasySlot& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCCStrike15_v2_Fantasy_FantasySlot* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCCStrike15_v2_Fantasy_FantasySlot* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCCStrike15_v2_Fantasy_FantasySlot* New() const final {
    return new CMsgGCCStrike15_v2_Fantasy_FantasySlot();
  }

  CMsgGCCStrike15_v2_Fantasy_FantasySlot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCCStrike15_v2_Fantasy_FantasySlot>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCCStrike15_v2_Fantasy_FantasySlot& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgGCCStrike15_v2_Fantasy_FantasySlot& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCCStrike15_v2_Fantasy_FantasySlot* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCCStrike15_v2_Fantasy.FantasySlot";
  }
  protected:
  explicit CMsgGCCStrike15_v2_Fantasy_FantasySlot(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kPickFieldNumber = 2,
    kItemidFieldNumber = 3,
  };
  // optional int32 type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 pick = 2;
  bool has_pick() const;
  private:
  bool _internal_has_pick() const;
  public:
  void clear_pick();
  ::PROTOBUF_NAMESPACE_ID::int32 pick() const;
  void set_pick(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pick() const;
  void _internal_set_pick(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint64 itemid = 3;
  bool has_itemid() const;
  private:
  bool _internal_has_itemid() const;
  public:
  void clear_itemid();
  ::PROTOBUF_NAMESPACE_ID::uint64 itemid() const;
  void set_itemid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_itemid() const;
  void _internal_set_itemid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_Fantasy.FantasySlot)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::int32 pick_;
  ::PROTOBUF_NAMESPACE_ID::uint64 itemid_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_Fantasy_FantasyTeam final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCCStrike15_v2_Fantasy.FantasyTeam) */ {
 public:
  inline CMsgGCCStrike15_v2_Fantasy_FantasyTeam() : CMsgGCCStrike15_v2_Fantasy_FantasyTeam(nullptr) {}
  ~CMsgGCCStrike15_v2_Fantasy_FantasyTeam() override;
  explicit constexpr CMsgGCCStrike15_v2_Fantasy_FantasyTeam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCCStrike15_v2_Fantasy_FantasyTeam(const CMsgGCCStrike15_v2_Fantasy_FantasyTeam& from);
  CMsgGCCStrike15_v2_Fantasy_FantasyTeam(CMsgGCCStrike15_v2_Fantasy_FantasyTeam&& from) noexcept
    : CMsgGCCStrike15_v2_Fantasy_FantasyTeam() {
    *this = ::std::move(from);
  }

  inline CMsgGCCStrike15_v2_Fantasy_FantasyTeam& operator=(const CMsgGCCStrike15_v2_Fantasy_FantasyTeam& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCCStrike15_v2_Fantasy_FantasyTeam& operator=(CMsgGCCStrike15_v2_Fantasy_FantasyTeam&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCCStrike15_v2_Fantasy_FantasyTeam& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCCStrike15_v2_Fantasy_FantasyTeam* internal_default_instance() {
    return reinterpret_cast<const CMsgGCCStrike15_v2_Fantasy_FantasyTeam*>(
               &_CMsgGCCStrike15_v2_Fantasy_FantasyTeam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    94;

  friend void swap(CMsgGCCStrike15_v2_Fantasy_FantasyTeam& a, CMsgGCCStrike15_v2_Fantasy_FantasyTeam& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCCStrike15_v2_Fantasy_FantasyTeam* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCCStrike15_v2_Fantasy_FantasyTeam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCCStrike15_v2_Fantasy_FantasyTeam* New() const final {
    return new CMsgGCCStrike15_v2_Fantasy_FantasyTeam();
  }

  CMsgGCCStrike15_v2_Fantasy_FantasyTeam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCCStrike15_v2_Fantasy_FantasyTeam>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCCStrike15_v2_Fantasy_FantasyTeam& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgGCCStrike15_v2_Fantasy_FantasyTeam& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCCStrike15_v2_Fantasy_FantasyTeam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCCStrike15_v2_Fantasy.FantasyTeam";
  }
  protected:
  explicit CMsgGCCStrike15_v2_Fantasy_FantasyTeam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSlotsFieldNumber = 2,
    kSectionidFieldNumber = 1,
  };
  // repeated .CMsgGCCStrike15_v2_Fantasy.FantasySlot slots = 2;
  int slots_size() const;
  private:
  int _internal_slots_size() const;
  public:
  void clear_slots();
  ::CMsgGCCStrike15_v2_Fantasy_FantasySlot* mutable_slots(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCCStrike15_v2_Fantasy_FantasySlot >*
      mutable_slots();
  private:
  const ::CMsgGCCStrike15_v2_Fantasy_FantasySlot& _internal_slots(int index) const;
  ::CMsgGCCStrike15_v2_Fantasy_FantasySlot* _internal_add_slots();
  public:
  const ::CMsgGCCStrike15_v2_Fantasy_FantasySlot& slots(int index) const;
  ::CMsgGCCStrike15_v2_Fantasy_FantasySlot* add_slots();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCCStrike15_v2_Fantasy_FantasySlot >&
      slots() const;

  // optional int32 sectionid = 1;
  bool has_sectionid() const;
  private:
  bool _internal_has_sectionid() const;
  public:
  void clear_sectionid();
  ::PROTOBUF_NAMESPACE_ID::int32 sectionid() const;
  void set_sectionid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sectionid() const;
  void _internal_set_sectionid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_Fantasy.FantasyTeam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCCStrike15_v2_Fantasy_FantasySlot > slots_;
  ::PROTOBUF_NAMESPACE_ID::int32 sectionid_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_Fantasy final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCCStrike15_v2_Fantasy) */ {
 public:
  inline CMsgGCCStrike15_v2_Fantasy() : CMsgGCCStrike15_v2_Fantasy(nullptr) {}
  ~CMsgGCCStrike15_v2_Fantasy() override;
  explicit constexpr CMsgGCCStrike15_v2_Fantasy(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCCStrike15_v2_Fantasy(const CMsgGCCStrike15_v2_Fantasy& from);
  CMsgGCCStrike15_v2_Fantasy(CMsgGCCStrike15_v2_Fantasy&& from) noexcept
    : CMsgGCCStrike15_v2_Fantasy() {
    *this = ::std::move(from);
  }

  inline CMsgGCCStrike15_v2_Fantasy& operator=(const CMsgGCCStrike15_v2_Fantasy& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCCStrike15_v2_Fantasy& operator=(CMsgGCCStrike15_v2_Fantasy&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCCStrike15_v2_Fantasy& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCCStrike15_v2_Fantasy* internal_default_instance() {
    return reinterpret_cast<const CMsgGCCStrike15_v2_Fantasy*>(
               &_CMsgGCCStrike15_v2_Fantasy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    95;

  friend void swap(CMsgGCCStrike15_v2_Fantasy& a, CMsgGCCStrike15_v2_Fantasy& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCCStrike15_v2_Fantasy* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCCStrike15_v2_Fantasy* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCCStrike15_v2_Fantasy* New() const final {
    return new CMsgGCCStrike15_v2_Fantasy();
  }

  CMsgGCCStrike15_v2_Fantasy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCCStrike15_v2_Fantasy>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCCStrike15_v2_Fantasy& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgGCCStrike15_v2_Fantasy& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCCStrike15_v2_Fantasy* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCCStrike15_v2_Fantasy";
  }
  protected:
  explicit CMsgGCCStrike15_v2_Fantasy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgGCCStrike15_v2_Fantasy_FantasySlot FantasySlot;
  typedef CMsgGCCStrike15_v2_Fantasy_FantasyTeam FantasyTeam;

  // accessors -------------------------------------------------------

  enum : int {
    kTeamsFieldNumber = 2,
    kEventIdFieldNumber = 1,
  };
  // repeated .CMsgGCCStrike15_v2_Fantasy.FantasyTeam teams = 2;
  int teams_size() const;
  private:
  int _internal_teams_size() const;
  public:
  void clear_teams();
  ::CMsgGCCStrike15_v2_Fantasy_FantasyTeam* mutable_teams(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCCStrike15_v2_Fantasy_FantasyTeam >*
      mutable_teams();
  private:
  const ::CMsgGCCStrike15_v2_Fantasy_FantasyTeam& _internal_teams(int index) const;
  ::CMsgGCCStrike15_v2_Fantasy_FantasyTeam* _internal_add_teams();
  public:
  const ::CMsgGCCStrike15_v2_Fantasy_FantasyTeam& teams(int index) const;
  ::CMsgGCCStrike15_v2_Fantasy_FantasyTeam* add_teams();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCCStrike15_v2_Fantasy_FantasyTeam >&
      teams() const;

  // optional uint32 event_id = 1;
  bool has_event_id() const;
  private:
  bool _internal_has_event_id() const;
  public:
  void clear_event_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 event_id() const;
  void set_event_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_event_id() const;
  void _internal_set_event_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_Fantasy)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCCStrike15_v2_Fantasy_FantasyTeam > teams_;
  ::PROTOBUF_NAMESPACE_ID::uint32 event_id_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CAttribute_String final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CAttribute_String) */ {
 public:
  inline CAttribute_String() : CAttribute_String(nullptr) {}
  ~CAttribute_String() override;
  explicit constexpr CAttribute_String(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CAttribute_String(const CAttribute_String& from);
  CAttribute_String(CAttribute_String&& from) noexcept
    : CAttribute_String() {
    *this = ::std::move(from);
  }

  inline CAttribute_String& operator=(const CAttribute_String& from) {
    CopyFrom(from);
    return *this;
  }
  inline CAttribute_String& operator=(CAttribute_String&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CAttribute_String& default_instance() {
    return *internal_default_instance();
  }
  static inline const CAttribute_String* internal_default_instance() {
    return reinterpret_cast<const CAttribute_String*>(
               &_CAttribute_String_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    96;

  friend void swap(CAttribute_String& a, CAttribute_String& b) {
    a.Swap(&b);
  }
  inline void Swap(CAttribute_String* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CAttribute_String* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CAttribute_String* New() const final {
    return new CAttribute_String();
  }

  CAttribute_String* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CAttribute_String>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CAttribute_String& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CAttribute_String& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CAttribute_String* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CAttribute_String";
  }
  protected:
  explicit CAttribute_String(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // optional string value = 1;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_MUST_USE_RESULT std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:CAttribute_String)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCToGCReloadVersions final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CMsgGCToGCReloadVersions) */ {
 public:
  inline CMsgGCToGCReloadVersions() : CMsgGCToGCReloadVersions(nullptr) {}
  explicit constexpr CMsgGCToGCReloadVersions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCToGCReloadVersions(const CMsgGCToGCReloadVersions& from);
  CMsgGCToGCReloadVersions(CMsgGCToGCReloadVersions&& from) noexcept
    : CMsgGCToGCReloadVersions() {
    *this = ::std::move(from);
  }

  inline CMsgGCToGCReloadVersions& operator=(const CMsgGCToGCReloadVersions& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCToGCReloadVersions& operator=(CMsgGCToGCReloadVersions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCToGCReloadVersions& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCToGCReloadVersions* internal_default_instance() {
    return reinterpret_cast<const CMsgGCToGCReloadVersions*>(
               &_CMsgGCToGCReloadVersions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    97;

  friend void swap(CMsgGCToGCReloadVersions& a, CMsgGCToGCReloadVersions& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCToGCReloadVersions* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCToGCReloadVersions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCToGCReloadVersions* New() const final {
    return new CMsgGCToGCReloadVersions();
  }

  CMsgGCToGCReloadVersions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCToGCReloadVersions>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CMsgGCToGCReloadVersions& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CMsgGCToGCReloadVersions& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCToGCReloadVersions";
  }
  protected:
  explicit CMsgGCToGCReloadVersions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMsgGCToGCReloadVersions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgCStrike15Welcome final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgCStrike15Welcome) */ {
 public:
  inline CMsgCStrike15Welcome() : CMsgCStrike15Welcome(nullptr) {}
  ~CMsgCStrike15Welcome() override;
  explicit constexpr CMsgCStrike15Welcome(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgCStrike15Welcome(const CMsgCStrike15Welcome& from);
  CMsgCStrike15Welcome(CMsgCStrike15Welcome&& from) noexcept
    : CMsgCStrike15Welcome() {
    *this = ::std::move(from);
  }

  inline CMsgCStrike15Welcome& operator=(const CMsgCStrike15Welcome& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgCStrike15Welcome& operator=(CMsgCStrike15Welcome&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgCStrike15Welcome& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgCStrike15Welcome* internal_default_instance() {
    return reinterpret_cast<const CMsgCStrike15Welcome*>(
               &_CMsgCStrike15Welcome_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    98;

  friend void swap(CMsgCStrike15Welcome& a, CMsgCStrike15Welcome& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgCStrike15Welcome* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgCStrike15Welcome* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgCStrike15Welcome* New() const final {
    return new CMsgCStrike15Welcome();
  }

  CMsgCStrike15Welcome* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgCStrike15Welcome>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgCStrike15Welcome& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgCStrike15Welcome& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgCStrike15Welcome* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgCStrike15Welcome";
  }
  protected:
  explicit CMsgCStrike15Welcome(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStoreItemHashFieldNumber = 5,
    kTimeplayedconsecutivelyFieldNumber = 6,
    kLastIpAddressFieldNumber = 13,
    kTimeFirstPlayedFieldNumber = 10,
    kLastTimePlayedFieldNumber = 12,
    kGscookieidFieldNumber = 18,
    kUniqueidFieldNumber = 19,
  };
  // optional uint32 store_item_hash = 5;
  bool has_store_item_hash() const;
  private:
  bool _internal_has_store_item_hash() const;
  public:
  void clear_store_item_hash();
  ::PROTOBUF_NAMESPACE_ID::uint32 store_item_hash() const;
  void set_store_item_hash(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_store_item_hash() const;
  void _internal_set_store_item_hash(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 timeplayedconsecutively = 6;
  bool has_timeplayedconsecutively() const;
  private:
  bool _internal_has_timeplayedconsecutively() const;
  public:
  void clear_timeplayedconsecutively();
  ::PROTOBUF_NAMESPACE_ID::uint32 timeplayedconsecutively() const;
  void set_timeplayedconsecutively(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_timeplayedconsecutively() const;
  void _internal_set_timeplayedconsecutively(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 last_ip_address = 13;
  bool has_last_ip_address() const;
  private:
  bool _internal_has_last_ip_address() const;
  public:
  void clear_last_ip_address();
  ::PROTOBUF_NAMESPACE_ID::uint32 last_ip_address() const;
  void set_last_ip_address(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_last_ip_address() const;
  void _internal_set_last_ip_address(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 time_first_played = 10;
  bool has_time_first_played() const;
  private:
  bool _internal_has_time_first_played() const;
  public:
  void clear_time_first_played();
  ::PROTOBUF_NAMESPACE_ID::uint32 time_first_played() const;
  void set_time_first_played(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_time_first_played() const;
  void _internal_set_time_first_played(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 last_time_played = 12;
  bool has_last_time_played() const;
  private:
  bool _internal_has_last_time_played() const;
  public:
  void clear_last_time_played();
  ::PROTOBUF_NAMESPACE_ID::uint32 last_time_played() const;
  void set_last_time_played(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_last_time_played() const;
  void _internal_set_last_time_played(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint64 gscookieid = 18;
  bool has_gscookieid() const;
  private:
  bool _internal_has_gscookieid() const;
  public:
  void clear_gscookieid();
  ::PROTOBUF_NAMESPACE_ID::uint64 gscookieid() const;
  void set_gscookieid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_gscookieid() const;
  void _internal_set_gscookieid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 uniqueid = 19;
  bool has_uniqueid() const;
  private:
  bool _internal_has_uniqueid() const;
  public:
  void clear_uniqueid();
  ::PROTOBUF_NAMESPACE_ID::uint64 uniqueid() const;
  void set_uniqueid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_uniqueid() const;
  void _internal_set_uniqueid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgCStrike15Welcome)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 store_item_hash_;
  ::PROTOBUF_NAMESPACE_ID::uint32 timeplayedconsecutively_;
  ::PROTOBUF_NAMESPACE_ID::uint32 last_ip_address_;
  ::PROTOBUF_NAMESPACE_ID::uint32 time_first_played_;
  ::PROTOBUF_NAMESPACE_ID::uint32 last_time_played_;
  ::PROTOBUF_NAMESPACE_ID::uint64 gscookieid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 uniqueid_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_ClientVarValueNotificationInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCCStrike15_v2_ClientVarValueNotificationInfo) */ {
 public:
  inline CMsgGCCStrike15_v2_ClientVarValueNotificationInfo() : CMsgGCCStrike15_v2_ClientVarValueNotificationInfo(nullptr) {}
  ~CMsgGCCStrike15_v2_ClientVarValueNotificationInfo() override;
  explicit constexpr CMsgGCCStrike15_v2_ClientVarValueNotificationInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCCStrike15_v2_ClientVarValueNotificationInfo(const CMsgGCCStrike15_v2_ClientVarValueNotificationInfo& from);
  CMsgGCCStrike15_v2_ClientVarValueNotificationInfo(CMsgGCCStrike15_v2_ClientVarValueNotificationInfo&& from) noexcept
    : CMsgGCCStrike15_v2_ClientVarValueNotificationInfo() {
    *this = ::std::move(from);
  }

  inline CMsgGCCStrike15_v2_ClientVarValueNotificationInfo& operator=(const CMsgGCCStrike15_v2_ClientVarValueNotificationInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCCStrike15_v2_ClientVarValueNotificationInfo& operator=(CMsgGCCStrike15_v2_ClientVarValueNotificationInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCCStrike15_v2_ClientVarValueNotificationInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCCStrike15_v2_ClientVarValueNotificationInfo* internal_default_instance() {
    return reinterpret_cast<const CMsgGCCStrike15_v2_ClientVarValueNotificationInfo*>(
               &_CMsgGCCStrike15_v2_ClientVarValueNotificationInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    99;

  friend void swap(CMsgGCCStrike15_v2_ClientVarValueNotificationInfo& a, CMsgGCCStrike15_v2_ClientVarValueNotificationInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCCStrike15_v2_ClientVarValueNotificationInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCCStrike15_v2_ClientVarValueNotificationInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCCStrike15_v2_ClientVarValueNotificationInfo* New() const final {
    return new CMsgGCCStrike15_v2_ClientVarValueNotificationInfo();
  }

  CMsgGCCStrike15_v2_ClientVarValueNotificationInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCCStrike15_v2_ClientVarValueNotificationInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCCStrike15_v2_ClientVarValueNotificationInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgGCCStrike15_v2_ClientVarValueNotificationInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCCStrike15_v2_ClientVarValueNotificationInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCCStrike15_v2_ClientVarValueNotificationInfo";
  }
  protected:
  explicit CMsgGCCStrike15_v2_ClientVarValueNotificationInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChokedBlocksFieldNumber = 5,
    kValueNameFieldNumber = 1,
    kValueIntFieldNumber = 2,
    kServerAddrFieldNumber = 3,
    kServerPortFieldNumber = 4,
  };
  // repeated string choked_blocks = 5;
  int choked_blocks_size() const;
  private:
  int _internal_choked_blocks_size() const;
  public:
  void clear_choked_blocks();
  const std::string& choked_blocks(int index) const;
  std::string* mutable_choked_blocks(int index);
  void set_choked_blocks(int index, const std::string& value);
  void set_choked_blocks(int index, std::string&& value);
  void set_choked_blocks(int index, const char* value);
  void set_choked_blocks(int index, const char* value, size_t size);
  std::string* add_choked_blocks();
  void add_choked_blocks(const std::string& value);
  void add_choked_blocks(std::string&& value);
  void add_choked_blocks(const char* value);
  void add_choked_blocks(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& choked_blocks() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_choked_blocks();
  private:
  const std::string& _internal_choked_blocks(int index) const;
  std::string* _internal_add_choked_blocks();
  public:

  // optional string value_name = 1;
  bool has_value_name() const;
  private:
  bool _internal_has_value_name() const;
  public:
  void clear_value_name();
  const std::string& value_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_value_name();
  void set_allocated_value_name(std::string* value_name);
  private:
  const std::string& _internal_value_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value_name(const std::string& value);
  std::string* _internal_mutable_value_name();
  public:

  // optional int32 value_int = 2;
  bool has_value_int() const;
  private:
  bool _internal_has_value_int() const;
  public:
  void clear_value_int();
  ::PROTOBUF_NAMESPACE_ID::int32 value_int() const;
  void set_value_int(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_value_int() const;
  void _internal_set_value_int(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint32 server_addr = 3;
  bool has_server_addr() const;
  private:
  bool _internal_has_server_addr() const;
  public:
  void clear_server_addr();
  ::PROTOBUF_NAMESPACE_ID::uint32 server_addr() const;
  void set_server_addr(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_server_addr() const;
  void _internal_set_server_addr(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 server_port = 4;
  bool has_server_port() const;
  private:
  bool _internal_has_server_port() const;
  public:
  void clear_server_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 server_port() const;
  void set_server_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_server_port() const;
  void _internal_set_server_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_ClientVarValueNotificationInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> choked_blocks_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 value_int_;
  ::PROTOBUF_NAMESPACE_ID::uint32 server_addr_;
  ::PROTOBUF_NAMESPACE_ID::uint32 server_port_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_ServerVarValueNotificationInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCCStrike15_v2_ServerVarValueNotificationInfo) */ {
 public:
  inline CMsgGCCStrike15_v2_ServerVarValueNotificationInfo() : CMsgGCCStrike15_v2_ServerVarValueNotificationInfo(nullptr) {}
  ~CMsgGCCStrike15_v2_ServerVarValueNotificationInfo() override;
  explicit constexpr CMsgGCCStrike15_v2_ServerVarValueNotificationInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCCStrike15_v2_ServerVarValueNotificationInfo(const CMsgGCCStrike15_v2_ServerVarValueNotificationInfo& from);
  CMsgGCCStrike15_v2_ServerVarValueNotificationInfo(CMsgGCCStrike15_v2_ServerVarValueNotificationInfo&& from) noexcept
    : CMsgGCCStrike15_v2_ServerVarValueNotificationInfo() {
    *this = ::std::move(from);
  }

  inline CMsgGCCStrike15_v2_ServerVarValueNotificationInfo& operator=(const CMsgGCCStrike15_v2_ServerVarValueNotificationInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCCStrike15_v2_ServerVarValueNotificationInfo& operator=(CMsgGCCStrike15_v2_ServerVarValueNotificationInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCCStrike15_v2_ServerVarValueNotificationInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCCStrike15_v2_ServerVarValueNotificationInfo* internal_default_instance() {
    return reinterpret_cast<const CMsgGCCStrike15_v2_ServerVarValueNotificationInfo*>(
               &_CMsgGCCStrike15_v2_ServerVarValueNotificationInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    100;

  friend void swap(CMsgGCCStrike15_v2_ServerVarValueNotificationInfo& a, CMsgGCCStrike15_v2_ServerVarValueNotificationInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCCStrike15_v2_ServerVarValueNotificationInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCCStrike15_v2_ServerVarValueNotificationInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCCStrike15_v2_ServerVarValueNotificationInfo* New() const final {
    return new CMsgGCCStrike15_v2_ServerVarValueNotificationInfo();
  }

  CMsgGCCStrike15_v2_ServerVarValueNotificationInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCCStrike15_v2_ServerVarValueNotificationInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCCStrike15_v2_ServerVarValueNotificationInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgGCCStrike15_v2_ServerVarValueNotificationInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCCStrike15_v2_ServerVarValueNotificationInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCCStrike15_v2_ServerVarValueNotificationInfo";
  }
  protected:
  explicit CMsgGCCStrike15_v2_ServerVarValueNotificationInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kViewanglesFieldNumber = 2,
    kAccountidFieldNumber = 1,
    kTypeFieldNumber = 3,
  };
  // repeated uint32 viewangles = 2;
  int viewangles_size() const;
  private:
  int _internal_viewangles_size() const;
  public:
  void clear_viewangles();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_viewangles(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_viewangles() const;
  void _internal_add_viewangles(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_viewangles();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 viewangles(int index) const;
  void set_viewangles(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_viewangles(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      viewangles() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_viewangles();

  // optional uint32 accountid = 1;
  bool has_accountid() const;
  private:
  bool _internal_has_accountid() const;
  public:
  void clear_accountid();
  ::PROTOBUF_NAMESPACE_ID::uint32 accountid() const;
  void set_accountid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_accountid() const;
  void _internal_set_accountid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 type = 3;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_ServerVarValueNotificationInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > viewangles_;
  ::PROTOBUF_NAMESPACE_ID::uint32 accountid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_GiftsLeaderboardRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CMsgGCCStrike15_v2_GiftsLeaderboardRequest) */ {
 public:
  inline CMsgGCCStrike15_v2_GiftsLeaderboardRequest() : CMsgGCCStrike15_v2_GiftsLeaderboardRequest(nullptr) {}
  explicit constexpr CMsgGCCStrike15_v2_GiftsLeaderboardRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCCStrike15_v2_GiftsLeaderboardRequest(const CMsgGCCStrike15_v2_GiftsLeaderboardRequest& from);
  CMsgGCCStrike15_v2_GiftsLeaderboardRequest(CMsgGCCStrike15_v2_GiftsLeaderboardRequest&& from) noexcept
    : CMsgGCCStrike15_v2_GiftsLeaderboardRequest() {
    *this = ::std::move(from);
  }

  inline CMsgGCCStrike15_v2_GiftsLeaderboardRequest& operator=(const CMsgGCCStrike15_v2_GiftsLeaderboardRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCCStrike15_v2_GiftsLeaderboardRequest& operator=(CMsgGCCStrike15_v2_GiftsLeaderboardRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCCStrike15_v2_GiftsLeaderboardRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCCStrike15_v2_GiftsLeaderboardRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgGCCStrike15_v2_GiftsLeaderboardRequest*>(
               &_CMsgGCCStrike15_v2_GiftsLeaderboardRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    101;

  friend void swap(CMsgGCCStrike15_v2_GiftsLeaderboardRequest& a, CMsgGCCStrike15_v2_GiftsLeaderboardRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCCStrike15_v2_GiftsLeaderboardRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCCStrike15_v2_GiftsLeaderboardRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCCStrike15_v2_GiftsLeaderboardRequest* New() const final {
    return new CMsgGCCStrike15_v2_GiftsLeaderboardRequest();
  }

  CMsgGCCStrike15_v2_GiftsLeaderboardRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCCStrike15_v2_GiftsLeaderboardRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CMsgGCCStrike15_v2_GiftsLeaderboardRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CMsgGCCStrike15_v2_GiftsLeaderboardRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCCStrike15_v2_GiftsLeaderboardRequest";
  }
  protected:
  explicit CMsgGCCStrike15_v2_GiftsLeaderboardRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_GiftsLeaderboardRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCCStrike15_v2_GiftsLeaderboardResponse.GiftLeaderboardEntry) */ {
 public:
  inline CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry() : CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry(nullptr) {}
  ~CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry() override;
  explicit constexpr CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry(const CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry& from);
  CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry(CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry&& from) noexcept
    : CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry() {
    *this = ::std::move(from);
  }

  inline CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry& operator=(const CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry& operator=(CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry* internal_default_instance() {
    return reinterpret_cast<const CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry*>(
               &_CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    102;

  friend void swap(CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry& a, CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry* New() const final {
    return new CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry();
  }

  CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCCStrike15_v2_GiftsLeaderboardResponse.GiftLeaderboardEntry";
  }
  protected:
  explicit CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountidFieldNumber = 1,
    kGiftsFieldNumber = 2,
  };
  // optional uint32 accountid = 1;
  bool has_accountid() const;
  private:
  bool _internal_has_accountid() const;
  public:
  void clear_accountid();
  ::PROTOBUF_NAMESPACE_ID::uint32 accountid() const;
  void set_accountid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_accountid() const;
  void _internal_set_accountid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 gifts = 2;
  bool has_gifts() const;
  private:
  bool _internal_has_gifts() const;
  public:
  void clear_gifts();
  ::PROTOBUF_NAMESPACE_ID::uint32 gifts() const;
  void set_gifts(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_gifts() const;
  void _internal_set_gifts(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_GiftsLeaderboardResponse.GiftLeaderboardEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 accountid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 gifts_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_GiftsLeaderboardResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCCStrike15_v2_GiftsLeaderboardResponse) */ {
 public:
  inline CMsgGCCStrike15_v2_GiftsLeaderboardResponse() : CMsgGCCStrike15_v2_GiftsLeaderboardResponse(nullptr) {}
  ~CMsgGCCStrike15_v2_GiftsLeaderboardResponse() override;
  explicit constexpr CMsgGCCStrike15_v2_GiftsLeaderboardResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCCStrike15_v2_GiftsLeaderboardResponse(const CMsgGCCStrike15_v2_GiftsLeaderboardResponse& from);
  CMsgGCCStrike15_v2_GiftsLeaderboardResponse(CMsgGCCStrike15_v2_GiftsLeaderboardResponse&& from) noexcept
    : CMsgGCCStrike15_v2_GiftsLeaderboardResponse() {
    *this = ::std::move(from);
  }

  inline CMsgGCCStrike15_v2_GiftsLeaderboardResponse& operator=(const CMsgGCCStrike15_v2_GiftsLeaderboardResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCCStrike15_v2_GiftsLeaderboardResponse& operator=(CMsgGCCStrike15_v2_GiftsLeaderboardResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCCStrike15_v2_GiftsLeaderboardResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCCStrike15_v2_GiftsLeaderboardResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgGCCStrike15_v2_GiftsLeaderboardResponse*>(
               &_CMsgGCCStrike15_v2_GiftsLeaderboardResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    103;

  friend void swap(CMsgGCCStrike15_v2_GiftsLeaderboardResponse& a, CMsgGCCStrike15_v2_GiftsLeaderboardResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCCStrike15_v2_GiftsLeaderboardResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCCStrike15_v2_GiftsLeaderboardResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCCStrike15_v2_GiftsLeaderboardResponse* New() const final {
    return new CMsgGCCStrike15_v2_GiftsLeaderboardResponse();
  }

  CMsgGCCStrike15_v2_GiftsLeaderboardResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCCStrike15_v2_GiftsLeaderboardResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCCStrike15_v2_GiftsLeaderboardResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgGCCStrike15_v2_GiftsLeaderboardResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCCStrike15_v2_GiftsLeaderboardResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCCStrike15_v2_GiftsLeaderboardResponse";
  }
  protected:
  explicit CMsgGCCStrike15_v2_GiftsLeaderboardResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry GiftLeaderboardEntry;

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 5,
    kServertimeFieldNumber = 1,
    kTimePeriodSecondsFieldNumber = 2,
    kTotalGiftsGivenFieldNumber = 3,
    kTotalGiversFieldNumber = 4,
  };
  // repeated .CMsgGCCStrike15_v2_GiftsLeaderboardResponse.GiftLeaderboardEntry entries = 5;
  int entries_size() const;
  private:
  int _internal_entries_size() const;
  public:
  void clear_entries();
  ::CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry >*
      mutable_entries();
  private:
  const ::CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry& _internal_entries(int index) const;
  ::CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry* _internal_add_entries();
  public:
  const ::CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry& entries(int index) const;
  ::CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry >&
      entries() const;

  // optional uint32 servertime = 1;
  bool has_servertime() const;
  private:
  bool _internal_has_servertime() const;
  public:
  void clear_servertime();
  ::PROTOBUF_NAMESPACE_ID::uint32 servertime() const;
  void set_servertime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_servertime() const;
  void _internal_set_servertime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 time_period_seconds = 2;
  bool has_time_period_seconds() const;
  private:
  bool _internal_has_time_period_seconds() const;
  public:
  void clear_time_period_seconds();
  ::PROTOBUF_NAMESPACE_ID::uint32 time_period_seconds() const;
  void set_time_period_seconds(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_time_period_seconds() const;
  void _internal_set_time_period_seconds(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 total_gifts_given = 3;
  bool has_total_gifts_given() const;
  private:
  bool _internal_has_total_gifts_given() const;
  public:
  void clear_total_gifts_given();
  ::PROTOBUF_NAMESPACE_ID::uint32 total_gifts_given() const;
  void set_total_gifts_given(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_total_gifts_given() const;
  void _internal_set_total_gifts_given(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 total_givers = 4;
  bool has_total_givers() const;
  private:
  bool _internal_has_total_givers() const;
  public:
  void clear_total_givers();
  ::PROTOBUF_NAMESPACE_ID::uint32 total_givers() const;
  void set_total_givers(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_total_givers() const;
  void _internal_set_total_givers(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_GiftsLeaderboardResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry > entries_;
  ::PROTOBUF_NAMESPACE_ID::uint32 servertime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 time_period_seconds_;
  ::PROTOBUF_NAMESPACE_ID::uint32 total_gifts_given_;
  ::PROTOBUF_NAMESPACE_ID::uint32 total_givers_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_ClientSubmitSurveyVote final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCCStrike15_v2_ClientSubmitSurveyVote) */ {
 public:
  inline CMsgGCCStrike15_v2_ClientSubmitSurveyVote() : CMsgGCCStrike15_v2_ClientSubmitSurveyVote(nullptr) {}
  ~CMsgGCCStrike15_v2_ClientSubmitSurveyVote() override;
  explicit constexpr CMsgGCCStrike15_v2_ClientSubmitSurveyVote(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCCStrike15_v2_ClientSubmitSurveyVote(const CMsgGCCStrike15_v2_ClientSubmitSurveyVote& from);
  CMsgGCCStrike15_v2_ClientSubmitSurveyVote(CMsgGCCStrike15_v2_ClientSubmitSurveyVote&& from) noexcept
    : CMsgGCCStrike15_v2_ClientSubmitSurveyVote() {
    *this = ::std::move(from);
  }

  inline CMsgGCCStrike15_v2_ClientSubmitSurveyVote& operator=(const CMsgGCCStrike15_v2_ClientSubmitSurveyVote& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCCStrike15_v2_ClientSubmitSurveyVote& operator=(CMsgGCCStrike15_v2_ClientSubmitSurveyVote&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCCStrike15_v2_ClientSubmitSurveyVote& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCCStrike15_v2_ClientSubmitSurveyVote* internal_default_instance() {
    return reinterpret_cast<const CMsgGCCStrike15_v2_ClientSubmitSurveyVote*>(
               &_CMsgGCCStrike15_v2_ClientSubmitSurveyVote_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    104;

  friend void swap(CMsgGCCStrike15_v2_ClientSubmitSurveyVote& a, CMsgGCCStrike15_v2_ClientSubmitSurveyVote& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCCStrike15_v2_ClientSubmitSurveyVote* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCCStrike15_v2_ClientSubmitSurveyVote* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCCStrike15_v2_ClientSubmitSurveyVote* New() const final {
    return new CMsgGCCStrike15_v2_ClientSubmitSurveyVote();
  }

  CMsgGCCStrike15_v2_ClientSubmitSurveyVote* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCCStrike15_v2_ClientSubmitSurveyVote>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCCStrike15_v2_ClientSubmitSurveyVote& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgGCCStrike15_v2_ClientSubmitSurveyVote& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCCStrike15_v2_ClientSubmitSurveyVote* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCCStrike15_v2_ClientSubmitSurveyVote";
  }
  protected:
  explicit CMsgGCCStrike15_v2_ClientSubmitSurveyVote(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSurveyIdFieldNumber = 1,
    kVoteFieldNumber = 2,
  };
  // optional uint32 survey_id = 1;
  bool has_survey_id() const;
  private:
  bool _internal_has_survey_id() const;
  public:
  void clear_survey_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 survey_id() const;
  void set_survey_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_survey_id() const;
  void _internal_set_survey_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 vote = 2;
  bool has_vote() const;
  private:
  bool _internal_has_vote() const;
  public:
  void clear_vote();
  ::PROTOBUF_NAMESPACE_ID::uint32 vote() const;
  void set_vote(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_vote() const;
  void _internal_set_vote(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_ClientSubmitSurveyVote)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 survey_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 vote_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_Server2GCClientValidate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCCStrike15_v2_Server2GCClientValidate) */ {
 public:
  inline CMsgGCCStrike15_v2_Server2GCClientValidate() : CMsgGCCStrike15_v2_Server2GCClientValidate(nullptr) {}
  ~CMsgGCCStrike15_v2_Server2GCClientValidate() override;
  explicit constexpr CMsgGCCStrike15_v2_Server2GCClientValidate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCCStrike15_v2_Server2GCClientValidate(const CMsgGCCStrike15_v2_Server2GCClientValidate& from);
  CMsgGCCStrike15_v2_Server2GCClientValidate(CMsgGCCStrike15_v2_Server2GCClientValidate&& from) noexcept
    : CMsgGCCStrike15_v2_Server2GCClientValidate() {
    *this = ::std::move(from);
  }

  inline CMsgGCCStrike15_v2_Server2GCClientValidate& operator=(const CMsgGCCStrike15_v2_Server2GCClientValidate& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCCStrike15_v2_Server2GCClientValidate& operator=(CMsgGCCStrike15_v2_Server2GCClientValidate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCCStrike15_v2_Server2GCClientValidate& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCCStrike15_v2_Server2GCClientValidate* internal_default_instance() {
    return reinterpret_cast<const CMsgGCCStrike15_v2_Server2GCClientValidate*>(
               &_CMsgGCCStrike15_v2_Server2GCClientValidate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    105;

  friend void swap(CMsgGCCStrike15_v2_Server2GCClientValidate& a, CMsgGCCStrike15_v2_Server2GCClientValidate& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCCStrike15_v2_Server2GCClientValidate* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCCStrike15_v2_Server2GCClientValidate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCCStrike15_v2_Server2GCClientValidate* New() const final {
    return new CMsgGCCStrike15_v2_Server2GCClientValidate();
  }

  CMsgGCCStrike15_v2_Server2GCClientValidate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCCStrike15_v2_Server2GCClientValidate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCCStrike15_v2_Server2GCClientValidate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgGCCStrike15_v2_Server2GCClientValidate& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCCStrike15_v2_Server2GCClientValidate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCCStrike15_v2_Server2GCClientValidate";
  }
  protected:
  explicit CMsgGCCStrike15_v2_Server2GCClientValidate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountidFieldNumber = 1,
  };
  // optional uint32 accountid = 1;
  bool has_accountid() const;
  private:
  bool _internal_has_accountid() const;
  public:
  void clear_accountid();
  ::PROTOBUF_NAMESPACE_ID::uint32 accountid() const;
  void set_accountid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_accountid() const;
  void _internal_set_accountid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_Server2GCClientValidate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 accountid_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure) */ {
 public:
  inline CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure() : CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure(nullptr) {}
  ~CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure() override;
  explicit constexpr CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure(const CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure& from);
  CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure(CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure&& from) noexcept
    : CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure() {
    *this = ::std::move(from);
  }

  inline CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure& operator=(const CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure& operator=(CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure* internal_default_instance() {
    return reinterpret_cast<const CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure*>(
               &_CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    106;

  friend void swap(CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure& a, CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure* New() const final {
    return new CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure();
  }

  CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure";
  }
  protected:
  explicit CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 2,
    kFileFieldNumber = 3,
    kAccountidFieldNumber = 1,
    kCrcFieldNumber = 4,
    kHashFieldNumber = 5,
    kLenFieldNumber = 6,
    kPackNumberFieldNumber = 7,
    kPackFileIdFieldNumber = 8,
  };
  // optional string path = 2;
  bool has_path() const;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const std::string& path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_path();
  PROTOBUF_MUST_USE_RESULT std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // optional string file = 3;
  bool has_file() const;
  private:
  bool _internal_has_file() const;
  public:
  void clear_file();
  const std::string& file() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file();
  PROTOBUF_MUST_USE_RESULT std::string* release_file();
  void set_allocated_file(std::string* file);
  private:
  const std::string& _internal_file() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file(const std::string& value);
  std::string* _internal_mutable_file();
  public:

  // optional uint32 accountid = 1;
  bool has_accountid() const;
  private:
  bool _internal_has_accountid() const;
  public:
  void clear_accountid();
  ::PROTOBUF_NAMESPACE_ID::uint32 accountid() const;
  void set_accountid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_accountid() const;
  void _internal_set_accountid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 crc = 4;
  bool has_crc() const;
  private:
  bool _internal_has_crc() const;
  public:
  void clear_crc();
  ::PROTOBUF_NAMESPACE_ID::uint32 crc() const;
  void set_crc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_crc() const;
  void _internal_set_crc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int32 hash = 5;
  bool has_hash() const;
  private:
  bool _internal_has_hash() const;
  public:
  void clear_hash();
  ::PROTOBUF_NAMESPACE_ID::int32 hash() const;
  void set_hash(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_hash() const;
  void _internal_set_hash(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 len = 6;
  bool has_len() const;
  private:
  bool _internal_has_len() const;
  public:
  void clear_len();
  ::PROTOBUF_NAMESPACE_ID::int32 len() const;
  void set_len(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_len() const;
  void _internal_set_len(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 pack_number = 7;
  bool has_pack_number() const;
  private:
  bool _internal_has_pack_number() const;
  public:
  void clear_pack_number();
  ::PROTOBUF_NAMESPACE_ID::int32 pack_number() const;
  void set_pack_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pack_number() const;
  void _internal_set_pack_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 pack_file_id = 8;
  bool has_pack_file_id() const;
  private:
  bool _internal_has_pack_file_id() const;
  public:
  void clear_pack_file_id();
  ::PROTOBUF_NAMESPACE_ID::int32 pack_file_id() const;
  void set_pack_file_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pack_file_id() const;
  void _internal_set_pack_file_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_;
  ::PROTOBUF_NAMESPACE_ID::uint32 accountid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 crc_;
  ::PROTOBUF_NAMESPACE_ID::int32 hash_;
  ::PROTOBUF_NAMESPACE_ID::int32 len_;
  ::PROTOBUF_NAMESPACE_ID::int32 pack_number_;
  ::PROTOBUF_NAMESPACE_ID::int32 pack_file_id_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_GC2ClientTournamentInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCCStrike15_v2_GC2ClientTournamentInfo) */ {
 public:
  inline CMsgGCCStrike15_v2_GC2ClientTournamentInfo() : CMsgGCCStrike15_v2_GC2ClientTournamentInfo(nullptr) {}
  ~CMsgGCCStrike15_v2_GC2ClientTournamentInfo() override;
  explicit constexpr CMsgGCCStrike15_v2_GC2ClientTournamentInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCCStrike15_v2_GC2ClientTournamentInfo(const CMsgGCCStrike15_v2_GC2ClientTournamentInfo& from);
  CMsgGCCStrike15_v2_GC2ClientTournamentInfo(CMsgGCCStrike15_v2_GC2ClientTournamentInfo&& from) noexcept
    : CMsgGCCStrike15_v2_GC2ClientTournamentInfo() {
    *this = ::std::move(from);
  }

  inline CMsgGCCStrike15_v2_GC2ClientTournamentInfo& operator=(const CMsgGCCStrike15_v2_GC2ClientTournamentInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCCStrike15_v2_GC2ClientTournamentInfo& operator=(CMsgGCCStrike15_v2_GC2ClientTournamentInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCCStrike15_v2_GC2ClientTournamentInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCCStrike15_v2_GC2ClientTournamentInfo* internal_default_instance() {
    return reinterpret_cast<const CMsgGCCStrike15_v2_GC2ClientTournamentInfo*>(
               &_CMsgGCCStrike15_v2_GC2ClientTournamentInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    107;

  friend void swap(CMsgGCCStrike15_v2_GC2ClientTournamentInfo& a, CMsgGCCStrike15_v2_GC2ClientTournamentInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCCStrike15_v2_GC2ClientTournamentInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCCStrike15_v2_GC2ClientTournamentInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCCStrike15_v2_GC2ClientTournamentInfo* New() const final {
    return new CMsgGCCStrike15_v2_GC2ClientTournamentInfo();
  }

  CMsgGCCStrike15_v2_GC2ClientTournamentInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCCStrike15_v2_GC2ClientTournamentInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCCStrike15_v2_GC2ClientTournamentInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgGCCStrike15_v2_GC2ClientTournamentInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCCStrike15_v2_GC2ClientTournamentInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCCStrike15_v2_GC2ClientTournamentInfo";
  }
  protected:
  explicit CMsgGCCStrike15_v2_GC2ClientTournamentInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTeamidsFieldNumber = 4,
    kEventidFieldNumber = 1,
    kStageidFieldNumber = 2,
    kGameTypeFieldNumber = 3,
  };
  // repeated uint32 teamids = 4;
  int teamids_size() const;
  private:
  int _internal_teamids_size() const;
  public:
  void clear_teamids();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_teamids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_teamids() const;
  void _internal_add_teamids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_teamids();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 teamids(int index) const;
  void set_teamids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_teamids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      teamids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_teamids();

  // optional uint32 eventid = 1;
  bool has_eventid() const;
  private:
  bool _internal_has_eventid() const;
  public:
  void clear_eventid();
  ::PROTOBUF_NAMESPACE_ID::uint32 eventid() const;
  void set_eventid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_eventid() const;
  void _internal_set_eventid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 stageid = 2;
  bool has_stageid() const;
  private:
  bool _internal_has_stageid() const;
  public:
  void clear_stageid();
  ::PROTOBUF_NAMESPACE_ID::uint32 stageid() const;
  void set_stageid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_stageid() const;
  void _internal_set_stageid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 game_type = 3;
  bool has_game_type() const;
  private:
  bool _internal_has_game_type() const;
  public:
  void clear_game_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 game_type() const;
  void set_game_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_game_type() const;
  void _internal_set_game_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_GC2ClientTournamentInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > teamids_;
  ::PROTOBUF_NAMESPACE_ID::uint32 eventid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 stageid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 game_type_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CSOEconCoupon final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSOEconCoupon) */ {
 public:
  inline CSOEconCoupon() : CSOEconCoupon(nullptr) {}
  ~CSOEconCoupon() override;
  explicit constexpr CSOEconCoupon(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSOEconCoupon(const CSOEconCoupon& from);
  CSOEconCoupon(CSOEconCoupon&& from) noexcept
    : CSOEconCoupon() {
    *this = ::std::move(from);
  }

  inline CSOEconCoupon& operator=(const CSOEconCoupon& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSOEconCoupon& operator=(CSOEconCoupon&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSOEconCoupon& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSOEconCoupon* internal_default_instance() {
    return reinterpret_cast<const CSOEconCoupon*>(
               &_CSOEconCoupon_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    108;

  friend void swap(CSOEconCoupon& a, CSOEconCoupon& b) {
    a.Swap(&b);
  }
  inline void Swap(CSOEconCoupon* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSOEconCoupon* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSOEconCoupon* New() const final {
    return new CSOEconCoupon();
  }

  CSOEconCoupon* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSOEconCoupon>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSOEconCoupon& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CSOEconCoupon& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSOEconCoupon* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSOEconCoupon";
  }
  protected:
  explicit CSOEconCoupon(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntryidFieldNumber = 1,
    kDefidxFieldNumber = 2,
    kExpirationDateFieldNumber = 3,
  };
  // optional uint32 entryid = 1 [(.key_field) = true];
  bool has_entryid() const;
  private:
  bool _internal_has_entryid() const;
  public:
  void clear_entryid();
  ::PROTOBUF_NAMESPACE_ID::uint32 entryid() const;
  void set_entryid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_entryid() const;
  void _internal_set_entryid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 defidx = 2;
  bool has_defidx() const;
  private:
  bool _internal_has_defidx() const;
  public:
  void clear_defidx();
  ::PROTOBUF_NAMESPACE_ID::uint32 defidx() const;
  void set_defidx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_defidx() const;
  void _internal_set_defidx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional fixed32 expiration_date = 3;
  bool has_expiration_date() const;
  private:
  bool _internal_has_expiration_date() const;
  public:
  void clear_expiration_date();
  ::PROTOBUF_NAMESPACE_ID::uint32 expiration_date() const;
  void set_expiration_date(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_expiration_date() const;
  void _internal_set_expiration_date(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CSOEconCoupon)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 entryid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 defidx_;
  ::PROTOBUF_NAMESPACE_ID::uint32 expiration_date_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CSOQuestProgress final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSOQuestProgress) */ {
 public:
  inline CSOQuestProgress() : CSOQuestProgress(nullptr) {}
  ~CSOQuestProgress() override;
  explicit constexpr CSOQuestProgress(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSOQuestProgress(const CSOQuestProgress& from);
  CSOQuestProgress(CSOQuestProgress&& from) noexcept
    : CSOQuestProgress() {
    *this = ::std::move(from);
  }

  inline CSOQuestProgress& operator=(const CSOQuestProgress& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSOQuestProgress& operator=(CSOQuestProgress&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSOQuestProgress& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSOQuestProgress* internal_default_instance() {
    return reinterpret_cast<const CSOQuestProgress*>(
               &_CSOQuestProgress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    109;

  friend void swap(CSOQuestProgress& a, CSOQuestProgress& b) {
    a.Swap(&b);
  }
  inline void Swap(CSOQuestProgress* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSOQuestProgress* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSOQuestProgress* New() const final {
    return new CSOQuestProgress();
  }

  CSOQuestProgress* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSOQuestProgress>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSOQuestProgress& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CSOQuestProgress& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSOQuestProgress* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSOQuestProgress";
  }
  protected:
  explicit CSOQuestProgress(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQuestidFieldNumber = 1,
    kPointsRemainingFieldNumber = 2,
    kBonusPointsFieldNumber = 3,
  };
  // optional uint32 questid = 1 [(.key_field) = true];
  bool has_questid() const;
  private:
  bool _internal_has_questid() const;
  public:
  void clear_questid();
  ::PROTOBUF_NAMESPACE_ID::uint32 questid() const;
  void set_questid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_questid() const;
  void _internal_set_questid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 points_remaining = 2;
  bool has_points_remaining() const;
  private:
  bool _internal_has_points_remaining() const;
  public:
  void clear_points_remaining();
  ::PROTOBUF_NAMESPACE_ID::uint32 points_remaining() const;
  void set_points_remaining(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_points_remaining() const;
  void _internal_set_points_remaining(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 bonus_points = 3;
  bool has_bonus_points() const;
  private:
  bool _internal_has_bonus_points() const;
  public:
  void clear_bonus_points();
  ::PROTOBUF_NAMESPACE_ID::uint32 bonus_points() const;
  void set_bonus_points(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_bonus_points() const;
  void _internal_set_bonus_points(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CSOQuestProgress)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 questid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 points_remaining_;
  ::PROTOBUF_NAMESPACE_ID::uint32 bonus_points_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CSOPersonaDataPublic final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSOPersonaDataPublic) */ {
 public:
  inline CSOPersonaDataPublic() : CSOPersonaDataPublic(nullptr) {}
  ~CSOPersonaDataPublic() override;
  explicit constexpr CSOPersonaDataPublic(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSOPersonaDataPublic(const CSOPersonaDataPublic& from);
  CSOPersonaDataPublic(CSOPersonaDataPublic&& from) noexcept
    : CSOPersonaDataPublic() {
    *this = ::std::move(from);
  }

  inline CSOPersonaDataPublic& operator=(const CSOPersonaDataPublic& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSOPersonaDataPublic& operator=(CSOPersonaDataPublic&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSOPersonaDataPublic& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSOPersonaDataPublic* internal_default_instance() {
    return reinterpret_cast<const CSOPersonaDataPublic*>(
               &_CSOPersonaDataPublic_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    110;

  friend void swap(CSOPersonaDataPublic& a, CSOPersonaDataPublic& b) {
    a.Swap(&b);
  }
  inline void Swap(CSOPersonaDataPublic* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSOPersonaDataPublic* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSOPersonaDataPublic* New() const final {
    return new CSOPersonaDataPublic();
  }

  CSOPersonaDataPublic* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSOPersonaDataPublic>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSOPersonaDataPublic& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CSOPersonaDataPublic& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSOPersonaDataPublic* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSOPersonaDataPublic";
  }
  protected:
  explicit CSOPersonaDataPublic(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommendationFieldNumber = 2,
    kPlayerLevelFieldNumber = 1,
    kElevatedStateFieldNumber = 3,
  };
  // optional .PlayerCommendationInfo commendation = 2;
  bool has_commendation() const;
  private:
  bool _internal_has_commendation() const;
  public:
  void clear_commendation();
  const ::PlayerCommendationInfo& commendation() const;
  PROTOBUF_MUST_USE_RESULT ::PlayerCommendationInfo* release_commendation();
  ::PlayerCommendationInfo* mutable_commendation();
  void set_allocated_commendation(::PlayerCommendationInfo* commendation);
  private:
  const ::PlayerCommendationInfo& _internal_commendation() const;
  ::PlayerCommendationInfo* _internal_mutable_commendation();
  public:
  void unsafe_arena_set_allocated_commendation(
      ::PlayerCommendationInfo* commendation);
  ::PlayerCommendationInfo* unsafe_arena_release_commendation();

  // optional int32 player_level = 1;
  bool has_player_level() const;
  private:
  bool _internal_has_player_level() const;
  public:
  void clear_player_level();
  ::PROTOBUF_NAMESPACE_ID::int32 player_level() const;
  void set_player_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_player_level() const;
  void _internal_set_player_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool elevated_state = 3;
  bool has_elevated_state() const;
  private:
  bool _internal_has_elevated_state() const;
  public:
  void clear_elevated_state();
  bool elevated_state() const;
  void set_elevated_state(bool value);
  private:
  bool _internal_elevated_state() const;
  void _internal_set_elevated_state(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CSOPersonaDataPublic)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PlayerCommendationInfo* commendation_;
  ::PROTOBUF_NAMESPACE_ID::int32 player_level_;
  bool elevated_state_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGC_GlobalGame_Subscribe final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGC_GlobalGame_Subscribe) */ {
 public:
  inline CMsgGC_GlobalGame_Subscribe() : CMsgGC_GlobalGame_Subscribe(nullptr) {}
  ~CMsgGC_GlobalGame_Subscribe() override;
  explicit constexpr CMsgGC_GlobalGame_Subscribe(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGC_GlobalGame_Subscribe(const CMsgGC_GlobalGame_Subscribe& from);
  CMsgGC_GlobalGame_Subscribe(CMsgGC_GlobalGame_Subscribe&& from) noexcept
    : CMsgGC_GlobalGame_Subscribe() {
    *this = ::std::move(from);
  }

  inline CMsgGC_GlobalGame_Subscribe& operator=(const CMsgGC_GlobalGame_Subscribe& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGC_GlobalGame_Subscribe& operator=(CMsgGC_GlobalGame_Subscribe&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGC_GlobalGame_Subscribe& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGC_GlobalGame_Subscribe* internal_default_instance() {
    return reinterpret_cast<const CMsgGC_GlobalGame_Subscribe*>(
               &_CMsgGC_GlobalGame_Subscribe_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    111;

  friend void swap(CMsgGC_GlobalGame_Subscribe& a, CMsgGC_GlobalGame_Subscribe& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGC_GlobalGame_Subscribe* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGC_GlobalGame_Subscribe* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGC_GlobalGame_Subscribe* New() const final {
    return new CMsgGC_GlobalGame_Subscribe();
  }

  CMsgGC_GlobalGame_Subscribe* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGC_GlobalGame_Subscribe>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGC_GlobalGame_Subscribe& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgGC_GlobalGame_Subscribe& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGC_GlobalGame_Subscribe* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGC_GlobalGame_Subscribe";
  }
  protected:
  explicit CMsgGC_GlobalGame_Subscribe(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTicketFieldNumber = 1,
  };
  // optional uint64 ticket = 1;
  bool has_ticket() const;
  private:
  bool _internal_has_ticket() const;
  public:
  void clear_ticket();
  ::PROTOBUF_NAMESPACE_ID::uint64 ticket() const;
  void set_ticket(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_ticket() const;
  void _internal_set_ticket(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGC_GlobalGame_Subscribe)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ticket_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGC_GlobalGame_Unsubscribe final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGC_GlobalGame_Unsubscribe) */ {
 public:
  inline CMsgGC_GlobalGame_Unsubscribe() : CMsgGC_GlobalGame_Unsubscribe(nullptr) {}
  ~CMsgGC_GlobalGame_Unsubscribe() override;
  explicit constexpr CMsgGC_GlobalGame_Unsubscribe(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGC_GlobalGame_Unsubscribe(const CMsgGC_GlobalGame_Unsubscribe& from);
  CMsgGC_GlobalGame_Unsubscribe(CMsgGC_GlobalGame_Unsubscribe&& from) noexcept
    : CMsgGC_GlobalGame_Unsubscribe() {
    *this = ::std::move(from);
  }

  inline CMsgGC_GlobalGame_Unsubscribe& operator=(const CMsgGC_GlobalGame_Unsubscribe& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGC_GlobalGame_Unsubscribe& operator=(CMsgGC_GlobalGame_Unsubscribe&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGC_GlobalGame_Unsubscribe& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGC_GlobalGame_Unsubscribe* internal_default_instance() {
    return reinterpret_cast<const CMsgGC_GlobalGame_Unsubscribe*>(
               &_CMsgGC_GlobalGame_Unsubscribe_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    112;

  friend void swap(CMsgGC_GlobalGame_Unsubscribe& a, CMsgGC_GlobalGame_Unsubscribe& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGC_GlobalGame_Unsubscribe* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGC_GlobalGame_Unsubscribe* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGC_GlobalGame_Unsubscribe* New() const final {
    return new CMsgGC_GlobalGame_Unsubscribe();
  }

  CMsgGC_GlobalGame_Unsubscribe* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGC_GlobalGame_Unsubscribe>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGC_GlobalGame_Unsubscribe& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgGC_GlobalGame_Unsubscribe& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGC_GlobalGame_Unsubscribe* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGC_GlobalGame_Unsubscribe";
  }
  protected:
  explicit CMsgGC_GlobalGame_Unsubscribe(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeleftFieldNumber = 1,
  };
  // optional int32 timeleft = 1;
  bool has_timeleft() const;
  private:
  bool _internal_has_timeleft() const;
  public:
  void clear_timeleft();
  ::PROTOBUF_NAMESPACE_ID::int32 timeleft() const;
  void set_timeleft(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_timeleft() const;
  void _internal_set_timeleft(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGC_GlobalGame_Unsubscribe)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 timeleft_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGC_GlobalGame_Play final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGC_GlobalGame_Play) */ {
 public:
  inline CMsgGC_GlobalGame_Play() : CMsgGC_GlobalGame_Play(nullptr) {}
  ~CMsgGC_GlobalGame_Play() override;
  explicit constexpr CMsgGC_GlobalGame_Play(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGC_GlobalGame_Play(const CMsgGC_GlobalGame_Play& from);
  CMsgGC_GlobalGame_Play(CMsgGC_GlobalGame_Play&& from) noexcept
    : CMsgGC_GlobalGame_Play() {
    *this = ::std::move(from);
  }

  inline CMsgGC_GlobalGame_Play& operator=(const CMsgGC_GlobalGame_Play& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGC_GlobalGame_Play& operator=(CMsgGC_GlobalGame_Play&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGC_GlobalGame_Play& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGC_GlobalGame_Play* internal_default_instance() {
    return reinterpret_cast<const CMsgGC_GlobalGame_Play*>(
               &_CMsgGC_GlobalGame_Play_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    113;

  friend void swap(CMsgGC_GlobalGame_Play& a, CMsgGC_GlobalGame_Play& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGC_GlobalGame_Play* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGC_GlobalGame_Play* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGC_GlobalGame_Play* New() const final {
    return new CMsgGC_GlobalGame_Play();
  }

  CMsgGC_GlobalGame_Play* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGC_GlobalGame_Play>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGC_GlobalGame_Play& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgGC_GlobalGame_Play& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGC_GlobalGame_Play* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGC_GlobalGame_Play";
  }
  protected:
  explicit CMsgGC_GlobalGame_Play(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTicketFieldNumber = 1,
    kGametimemsFieldNumber = 2,
    kMsperpointFieldNumber = 3,
  };
  // optional uint64 ticket = 1;
  bool has_ticket() const;
  private:
  bool _internal_has_ticket() const;
  public:
  void clear_ticket();
  ::PROTOBUF_NAMESPACE_ID::uint64 ticket() const;
  void set_ticket(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_ticket() const;
  void _internal_set_ticket(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 gametimems = 2;
  bool has_gametimems() const;
  private:
  bool _internal_has_gametimems() const;
  public:
  void clear_gametimems();
  ::PROTOBUF_NAMESPACE_ID::uint32 gametimems() const;
  void set_gametimems(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_gametimems() const;
  void _internal_set_gametimems(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 msperpoint = 3;
  bool has_msperpoint() const;
  private:
  bool _internal_has_msperpoint() const;
  public:
  void clear_msperpoint();
  ::PROTOBUF_NAMESPACE_ID::uint32 msperpoint() const;
  void set_msperpoint(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_msperpoint() const;
  void _internal_set_msperpoint(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGC_GlobalGame_Play)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ticket_;
  ::PROTOBUF_NAMESPACE_ID::uint32 gametimems_;
  ::PROTOBUF_NAMESPACE_ID::uint32 msperpoint_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_AcknowledgePenalty final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCCStrike15_v2_AcknowledgePenalty) */ {
 public:
  inline CMsgGCCStrike15_v2_AcknowledgePenalty() : CMsgGCCStrike15_v2_AcknowledgePenalty(nullptr) {}
  ~CMsgGCCStrike15_v2_AcknowledgePenalty() override;
  explicit constexpr CMsgGCCStrike15_v2_AcknowledgePenalty(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCCStrike15_v2_AcknowledgePenalty(const CMsgGCCStrike15_v2_AcknowledgePenalty& from);
  CMsgGCCStrike15_v2_AcknowledgePenalty(CMsgGCCStrike15_v2_AcknowledgePenalty&& from) noexcept
    : CMsgGCCStrike15_v2_AcknowledgePenalty() {
    *this = ::std::move(from);
  }

  inline CMsgGCCStrike15_v2_AcknowledgePenalty& operator=(const CMsgGCCStrike15_v2_AcknowledgePenalty& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCCStrike15_v2_AcknowledgePenalty& operator=(CMsgGCCStrike15_v2_AcknowledgePenalty&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCCStrike15_v2_AcknowledgePenalty& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCCStrike15_v2_AcknowledgePenalty* internal_default_instance() {
    return reinterpret_cast<const CMsgGCCStrike15_v2_AcknowledgePenalty*>(
               &_CMsgGCCStrike15_v2_AcknowledgePenalty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    114;

  friend void swap(CMsgGCCStrike15_v2_AcknowledgePenalty& a, CMsgGCCStrike15_v2_AcknowledgePenalty& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCCStrike15_v2_AcknowledgePenalty* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCCStrike15_v2_AcknowledgePenalty* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCCStrike15_v2_AcknowledgePenalty* New() const final {
    return new CMsgGCCStrike15_v2_AcknowledgePenalty();
  }

  CMsgGCCStrike15_v2_AcknowledgePenalty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCCStrike15_v2_AcknowledgePenalty>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCCStrike15_v2_AcknowledgePenalty& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgGCCStrike15_v2_AcknowledgePenalty& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCCStrike15_v2_AcknowledgePenalty* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCCStrike15_v2_AcknowledgePenalty";
  }
  protected:
  explicit CMsgGCCStrike15_v2_AcknowledgePenalty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAcknowledgedFieldNumber = 1,
  };
  // optional int32 acknowledged = 1;
  bool has_acknowledged() const;
  private:
  bool _internal_has_acknowledged() const;
  public:
  void clear_acknowledged();
  ::PROTOBUF_NAMESPACE_ID::int32 acknowledged() const;
  void set_acknowledged(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_acknowledged() const;
  void _internal_set_acknowledged(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_AcknowledgePenalty)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 acknowledged_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin) */ {
 public:
  inline CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin() : CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin(nullptr) {}
  explicit constexpr CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin(const CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin& from);
  CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin(CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin&& from) noexcept
    : CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin() {
    *this = ::std::move(from);
  }

  inline CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin& operator=(const CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin& operator=(CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin* internal_default_instance() {
    return reinterpret_cast<const CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin*>(
               &_CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    115;

  friend void swap(CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin& a, CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin* New() const final {
    return new CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin();
  }

  CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin";
  }
  protected:
  explicit CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_Client2GCStreamUnlock final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCCStrike15_v2_Client2GCStreamUnlock) */ {
 public:
  inline CMsgGCCStrike15_v2_Client2GCStreamUnlock() : CMsgGCCStrike15_v2_Client2GCStreamUnlock(nullptr) {}
  ~CMsgGCCStrike15_v2_Client2GCStreamUnlock() override;
  explicit constexpr CMsgGCCStrike15_v2_Client2GCStreamUnlock(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCCStrike15_v2_Client2GCStreamUnlock(const CMsgGCCStrike15_v2_Client2GCStreamUnlock& from);
  CMsgGCCStrike15_v2_Client2GCStreamUnlock(CMsgGCCStrike15_v2_Client2GCStreamUnlock&& from) noexcept
    : CMsgGCCStrike15_v2_Client2GCStreamUnlock() {
    *this = ::std::move(from);
  }

  inline CMsgGCCStrike15_v2_Client2GCStreamUnlock& operator=(const CMsgGCCStrike15_v2_Client2GCStreamUnlock& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCCStrike15_v2_Client2GCStreamUnlock& operator=(CMsgGCCStrike15_v2_Client2GCStreamUnlock&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCCStrike15_v2_Client2GCStreamUnlock& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCCStrike15_v2_Client2GCStreamUnlock* internal_default_instance() {
    return reinterpret_cast<const CMsgGCCStrike15_v2_Client2GCStreamUnlock*>(
               &_CMsgGCCStrike15_v2_Client2GCStreamUnlock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    116;

  friend void swap(CMsgGCCStrike15_v2_Client2GCStreamUnlock& a, CMsgGCCStrike15_v2_Client2GCStreamUnlock& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCCStrike15_v2_Client2GCStreamUnlock* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCCStrike15_v2_Client2GCStreamUnlock* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCCStrike15_v2_Client2GCStreamUnlock* New() const final {
    return new CMsgGCCStrike15_v2_Client2GCStreamUnlock();
  }

  CMsgGCCStrike15_v2_Client2GCStreamUnlock* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCCStrike15_v2_Client2GCStreamUnlock>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCCStrike15_v2_Client2GCStreamUnlock& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgGCCStrike15_v2_Client2GCStreamUnlock& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCCStrike15_v2_Client2GCStreamUnlock* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCCStrike15_v2_Client2GCStreamUnlock";
  }
  protected:
  explicit CMsgGCCStrike15_v2_Client2GCStreamUnlock(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTicketFieldNumber = 1,
    kOsFieldNumber = 2,
  };
  // optional uint64 ticket = 1;
  bool has_ticket() const;
  private:
  bool _internal_has_ticket() const;
  public:
  void clear_ticket();
  ::PROTOBUF_NAMESPACE_ID::uint64 ticket() const;
  void set_ticket(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_ticket() const;
  void _internal_set_ticket(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional int32 os = 2;
  bool has_os() const;
  private:
  bool _internal_has_os() const;
  public:
  void clear_os();
  ::PROTOBUF_NAMESPACE_ID::int32 os() const;
  void set_os(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_os() const;
  void _internal_set_os(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_Client2GCStreamUnlock)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ticket_;
  ::PROTOBUF_NAMESPACE_ID::int32 os_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_ClientToGCRequestElevate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCCStrike15_v2_ClientToGCRequestElevate) */ {
 public:
  inline CMsgGCCStrike15_v2_ClientToGCRequestElevate() : CMsgGCCStrike15_v2_ClientToGCRequestElevate(nullptr) {}
  ~CMsgGCCStrike15_v2_ClientToGCRequestElevate() override;
  explicit constexpr CMsgGCCStrike15_v2_ClientToGCRequestElevate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCCStrike15_v2_ClientToGCRequestElevate(const CMsgGCCStrike15_v2_ClientToGCRequestElevate& from);
  CMsgGCCStrike15_v2_ClientToGCRequestElevate(CMsgGCCStrike15_v2_ClientToGCRequestElevate&& from) noexcept
    : CMsgGCCStrike15_v2_ClientToGCRequestElevate() {
    *this = ::std::move(from);
  }

  inline CMsgGCCStrike15_v2_ClientToGCRequestElevate& operator=(const CMsgGCCStrike15_v2_ClientToGCRequestElevate& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCCStrike15_v2_ClientToGCRequestElevate& operator=(CMsgGCCStrike15_v2_ClientToGCRequestElevate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCCStrike15_v2_ClientToGCRequestElevate& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCCStrike15_v2_ClientToGCRequestElevate* internal_default_instance() {
    return reinterpret_cast<const CMsgGCCStrike15_v2_ClientToGCRequestElevate*>(
               &_CMsgGCCStrike15_v2_ClientToGCRequestElevate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    117;

  friend void swap(CMsgGCCStrike15_v2_ClientToGCRequestElevate& a, CMsgGCCStrike15_v2_ClientToGCRequestElevate& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCCStrike15_v2_ClientToGCRequestElevate* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCCStrike15_v2_ClientToGCRequestElevate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCCStrike15_v2_ClientToGCRequestElevate* New() const final {
    return new CMsgGCCStrike15_v2_ClientToGCRequestElevate();
  }

  CMsgGCCStrike15_v2_ClientToGCRequestElevate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCCStrike15_v2_ClientToGCRequestElevate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCCStrike15_v2_ClientToGCRequestElevate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgGCCStrike15_v2_ClientToGCRequestElevate& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCCStrike15_v2_ClientToGCRequestElevate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCCStrike15_v2_ClientToGCRequestElevate";
  }
  protected:
  explicit CMsgGCCStrike15_v2_ClientToGCRequestElevate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStageFieldNumber = 1,
  };
  // optional uint32 stage = 1;
  bool has_stage() const;
  private:
  bool _internal_has_stage() const;
  public:
  void clear_stage();
  ::PROTOBUF_NAMESPACE_ID::uint32 stage() const;
  void set_stage(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_stage() const;
  void _internal_set_stage(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_ClientToGCRequestElevate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 stage_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_ClientToGCChat final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCCStrike15_v2_ClientToGCChat) */ {
 public:
  inline CMsgGCCStrike15_v2_ClientToGCChat() : CMsgGCCStrike15_v2_ClientToGCChat(nullptr) {}
  ~CMsgGCCStrike15_v2_ClientToGCChat() override;
  explicit constexpr CMsgGCCStrike15_v2_ClientToGCChat(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCCStrike15_v2_ClientToGCChat(const CMsgGCCStrike15_v2_ClientToGCChat& from);
  CMsgGCCStrike15_v2_ClientToGCChat(CMsgGCCStrike15_v2_ClientToGCChat&& from) noexcept
    : CMsgGCCStrike15_v2_ClientToGCChat() {
    *this = ::std::move(from);
  }

  inline CMsgGCCStrike15_v2_ClientToGCChat& operator=(const CMsgGCCStrike15_v2_ClientToGCChat& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCCStrike15_v2_ClientToGCChat& operator=(CMsgGCCStrike15_v2_ClientToGCChat&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCCStrike15_v2_ClientToGCChat& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCCStrike15_v2_ClientToGCChat* internal_default_instance() {
    return reinterpret_cast<const CMsgGCCStrike15_v2_ClientToGCChat*>(
               &_CMsgGCCStrike15_v2_ClientToGCChat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    118;

  friend void swap(CMsgGCCStrike15_v2_ClientToGCChat& a, CMsgGCCStrike15_v2_ClientToGCChat& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCCStrike15_v2_ClientToGCChat* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCCStrike15_v2_ClientToGCChat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCCStrike15_v2_ClientToGCChat* New() const final {
    return new CMsgGCCStrike15_v2_ClientToGCChat();
  }

  CMsgGCCStrike15_v2_ClientToGCChat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCCStrike15_v2_ClientToGCChat>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCCStrike15_v2_ClientToGCChat& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgGCCStrike15_v2_ClientToGCChat& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCCStrike15_v2_ClientToGCChat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCCStrike15_v2_ClientToGCChat";
  }
  protected:
  explicit CMsgGCCStrike15_v2_ClientToGCChat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 2,
    kMatchIdFieldNumber = 1,
  };
  // optional string text = 2;
  bool has_text() const;
  private:
  bool _internal_has_text() const;
  public:
  void clear_text();
  const std::string& text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_text();
  PROTOBUF_MUST_USE_RESULT std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // optional uint64 match_id = 1;
  bool has_match_id() const;
  private:
  bool _internal_has_match_id() const;
  public:
  void clear_match_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 match_id() const;
  void set_match_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_match_id() const;
  void _internal_set_match_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_ClientToGCChat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  ::PROTOBUF_NAMESPACE_ID::uint64 match_id_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_GCToClientChat final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCCStrike15_v2_GCToClientChat) */ {
 public:
  inline CMsgGCCStrike15_v2_GCToClientChat() : CMsgGCCStrike15_v2_GCToClientChat(nullptr) {}
  ~CMsgGCCStrike15_v2_GCToClientChat() override;
  explicit constexpr CMsgGCCStrike15_v2_GCToClientChat(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCCStrike15_v2_GCToClientChat(const CMsgGCCStrike15_v2_GCToClientChat& from);
  CMsgGCCStrike15_v2_GCToClientChat(CMsgGCCStrike15_v2_GCToClientChat&& from) noexcept
    : CMsgGCCStrike15_v2_GCToClientChat() {
    *this = ::std::move(from);
  }

  inline CMsgGCCStrike15_v2_GCToClientChat& operator=(const CMsgGCCStrike15_v2_GCToClientChat& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCCStrike15_v2_GCToClientChat& operator=(CMsgGCCStrike15_v2_GCToClientChat&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCCStrike15_v2_GCToClientChat& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCCStrike15_v2_GCToClientChat* internal_default_instance() {
    return reinterpret_cast<const CMsgGCCStrike15_v2_GCToClientChat*>(
               &_CMsgGCCStrike15_v2_GCToClientChat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    119;

  friend void swap(CMsgGCCStrike15_v2_GCToClientChat& a, CMsgGCCStrike15_v2_GCToClientChat& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCCStrike15_v2_GCToClientChat* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCCStrike15_v2_GCToClientChat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCCStrike15_v2_GCToClientChat* New() const final {
    return new CMsgGCCStrike15_v2_GCToClientChat();
  }

  CMsgGCCStrike15_v2_GCToClientChat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCCStrike15_v2_GCToClientChat>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCCStrike15_v2_GCToClientChat& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgGCCStrike15_v2_GCToClientChat& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCCStrike15_v2_GCToClientChat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCCStrike15_v2_GCToClientChat";
  }
  protected:
  explicit CMsgGCCStrike15_v2_GCToClientChat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 2,
    kAccountIdFieldNumber = 1,
  };
  // optional string text = 2;
  bool has_text() const;
  private:
  bool _internal_has_text() const;
  public:
  void clear_text();
  const std::string& text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_text();
  PROTOBUF_MUST_USE_RESULT std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // optional uint32 account_id = 1;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 account_id() const;
  void set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_account_id() const;
  void _internal_set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_GCToClientChat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  ::PROTOBUF_NAMESPACE_ID::uint32 account_id_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_ClientAuthKeyCode final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCCStrike15_v2_ClientAuthKeyCode) */ {
 public:
  inline CMsgGCCStrike15_v2_ClientAuthKeyCode() : CMsgGCCStrike15_v2_ClientAuthKeyCode(nullptr) {}
  ~CMsgGCCStrike15_v2_ClientAuthKeyCode() override;
  explicit constexpr CMsgGCCStrike15_v2_ClientAuthKeyCode(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCCStrike15_v2_ClientAuthKeyCode(const CMsgGCCStrike15_v2_ClientAuthKeyCode& from);
  CMsgGCCStrike15_v2_ClientAuthKeyCode(CMsgGCCStrike15_v2_ClientAuthKeyCode&& from) noexcept
    : CMsgGCCStrike15_v2_ClientAuthKeyCode() {
    *this = ::std::move(from);
  }

  inline CMsgGCCStrike15_v2_ClientAuthKeyCode& operator=(const CMsgGCCStrike15_v2_ClientAuthKeyCode& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCCStrike15_v2_ClientAuthKeyCode& operator=(CMsgGCCStrike15_v2_ClientAuthKeyCode&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCCStrike15_v2_ClientAuthKeyCode& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCCStrike15_v2_ClientAuthKeyCode* internal_default_instance() {
    return reinterpret_cast<const CMsgGCCStrike15_v2_ClientAuthKeyCode*>(
               &_CMsgGCCStrike15_v2_ClientAuthKeyCode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    120;

  friend void swap(CMsgGCCStrike15_v2_ClientAuthKeyCode& a, CMsgGCCStrike15_v2_ClientAuthKeyCode& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCCStrike15_v2_ClientAuthKeyCode* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCCStrike15_v2_ClientAuthKeyCode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCCStrike15_v2_ClientAuthKeyCode* New() const final {
    return new CMsgGCCStrike15_v2_ClientAuthKeyCode();
  }

  CMsgGCCStrike15_v2_ClientAuthKeyCode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCCStrike15_v2_ClientAuthKeyCode>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCCStrike15_v2_ClientAuthKeyCode& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgGCCStrike15_v2_ClientAuthKeyCode& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCCStrike15_v2_ClientAuthKeyCode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCCStrike15_v2_ClientAuthKeyCode";
  }
  protected:
  explicit CMsgGCCStrike15_v2_ClientAuthKeyCode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeFieldNumber = 2,
    kEventidFieldNumber = 1,
  };
  // optional string code = 2;
  bool has_code() const;
  private:
  bool _internal_has_code() const;
  public:
  void clear_code();
  const std::string& code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_code();
  PROTOBUF_MUST_USE_RESULT std::string* release_code();
  void set_allocated_code(std::string* code);
  private:
  const std::string& _internal_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_code(const std::string& value);
  std::string* _internal_mutable_code();
  public:

  // optional uint32 eventid = 1;
  bool has_eventid() const;
  private:
  bool _internal_has_eventid() const;
  public:
  void clear_eventid();
  ::PROTOBUF_NAMESPACE_ID::uint32 eventid() const;
  void set_eventid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_eventid() const;
  void _internal_set_eventid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_ClientAuthKeyCode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
  ::PROTOBUF_NAMESPACE_ID::uint32 eventid_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_GotvSyncPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCCStrike15_GotvSyncPacket) */ {
 public:
  inline CMsgGCCStrike15_GotvSyncPacket() : CMsgGCCStrike15_GotvSyncPacket(nullptr) {}
  ~CMsgGCCStrike15_GotvSyncPacket() override;
  explicit constexpr CMsgGCCStrike15_GotvSyncPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCCStrike15_GotvSyncPacket(const CMsgGCCStrike15_GotvSyncPacket& from);
  CMsgGCCStrike15_GotvSyncPacket(CMsgGCCStrike15_GotvSyncPacket&& from) noexcept
    : CMsgGCCStrike15_GotvSyncPacket() {
    *this = ::std::move(from);
  }

  inline CMsgGCCStrike15_GotvSyncPacket& operator=(const CMsgGCCStrike15_GotvSyncPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCCStrike15_GotvSyncPacket& operator=(CMsgGCCStrike15_GotvSyncPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCCStrike15_GotvSyncPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCCStrike15_GotvSyncPacket* internal_default_instance() {
    return reinterpret_cast<const CMsgGCCStrike15_GotvSyncPacket*>(
               &_CMsgGCCStrike15_GotvSyncPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    121;

  friend void swap(CMsgGCCStrike15_GotvSyncPacket& a, CMsgGCCStrike15_GotvSyncPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCCStrike15_GotvSyncPacket* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCCStrike15_GotvSyncPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCCStrike15_GotvSyncPacket* New() const final {
    return new CMsgGCCStrike15_GotvSyncPacket();
  }

  CMsgGCCStrike15_GotvSyncPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCCStrike15_GotvSyncPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCCStrike15_GotvSyncPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgGCCStrike15_GotvSyncPacket& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCCStrike15_GotvSyncPacket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCCStrike15_GotvSyncPacket";
  }
  protected:
  explicit CMsgGCCStrike15_GotvSyncPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // optional .CEngineGotvSyncPacket data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::CEngineGotvSyncPacket& data() const;
  PROTOBUF_MUST_USE_RESULT ::CEngineGotvSyncPacket* release_data();
  ::CEngineGotvSyncPacket* mutable_data();
  void set_allocated_data(::CEngineGotvSyncPacket* data);
  private:
  const ::CEngineGotvSyncPacket& _internal_data() const;
  ::CEngineGotvSyncPacket* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::CEngineGotvSyncPacket* data);
  ::CEngineGotvSyncPacket* unsafe_arena_release_data();

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_GotvSyncPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CEngineGotvSyncPacket* data_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class PlayerDecalDigitalSignature final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlayerDecalDigitalSignature) */ {
 public:
  inline PlayerDecalDigitalSignature() : PlayerDecalDigitalSignature(nullptr) {}
  ~PlayerDecalDigitalSignature() override;
  explicit constexpr PlayerDecalDigitalSignature(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerDecalDigitalSignature(const PlayerDecalDigitalSignature& from);
  PlayerDecalDigitalSignature(PlayerDecalDigitalSignature&& from) noexcept
    : PlayerDecalDigitalSignature() {
    *this = ::std::move(from);
  }

  inline PlayerDecalDigitalSignature& operator=(const PlayerDecalDigitalSignature& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerDecalDigitalSignature& operator=(PlayerDecalDigitalSignature&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerDecalDigitalSignature& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerDecalDigitalSignature* internal_default_instance() {
    return reinterpret_cast<const PlayerDecalDigitalSignature*>(
               &_PlayerDecalDigitalSignature_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    122;

  friend void swap(PlayerDecalDigitalSignature& a, PlayerDecalDigitalSignature& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerDecalDigitalSignature* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerDecalDigitalSignature* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayerDecalDigitalSignature* New() const final {
    return new PlayerDecalDigitalSignature();
  }

  PlayerDecalDigitalSignature* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerDecalDigitalSignature>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerDecalDigitalSignature& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PlayerDecalDigitalSignature& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerDecalDigitalSignature* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlayerDecalDigitalSignature";
  }
  protected:
  explicit PlayerDecalDigitalSignature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEndposFieldNumber = 4,
    kStartposFieldNumber = 5,
    kRightFieldNumber = 6,
    kNormalFieldNumber = 13,
    kSignatureFieldNumber = 1,
    kAccountidFieldNumber = 2,
    kRtimeFieldNumber = 3,
    kTxDefidxFieldNumber = 7,
    kEntindexFieldNumber = 8,
    kHitboxFieldNumber = 9,
    kCreationtimeFieldNumber = 10,
    kEquipslotFieldNumber = 11,
    kTraceIdFieldNumber = 12,
    kTintIdFieldNumber = 14,
  };
  // repeated float endpos = 4;
  int endpos_size() const;
  private:
  int _internal_endpos_size() const;
  public:
  void clear_endpos();
  private:
  float _internal_endpos(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_endpos() const;
  void _internal_add_endpos(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_endpos();
  public:
  float endpos(int index) const;
  void set_endpos(int index, float value);
  void add_endpos(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      endpos() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_endpos();

  // repeated float startpos = 5;
  int startpos_size() const;
  private:
  int _internal_startpos_size() const;
  public:
  void clear_startpos();
  private:
  float _internal_startpos(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_startpos() const;
  void _internal_add_startpos(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_startpos();
  public:
  float startpos(int index) const;
  void set_startpos(int index, float value);
  void add_startpos(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      startpos() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_startpos();

  // repeated float right = 6;
  int right_size() const;
  private:
  int _internal_right_size() const;
  public:
  void clear_right();
  private:
  float _internal_right(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_right() const;
  void _internal_add_right(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_right();
  public:
  float right(int index) const;
  void set_right(int index, float value);
  void add_right(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      right() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_right();

  // repeated float normal = 13;
  int normal_size() const;
  private:
  int _internal_normal_size() const;
  public:
  void clear_normal();
  private:
  float _internal_normal(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_normal() const;
  void _internal_add_normal(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_normal();
  public:
  float normal(int index) const;
  void set_normal(int index, float value);
  void add_normal(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      normal() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_normal();

  // optional bytes signature = 1;
  bool has_signature() const;
  private:
  bool _internal_has_signature() const;
  public:
  void clear_signature();
  const std::string& signature() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_signature(ArgT0&& arg0, ArgT... args);
  std::string* mutable_signature();
  PROTOBUF_MUST_USE_RESULT std::string* release_signature();
  void set_allocated_signature(std::string* signature);
  private:
  const std::string& _internal_signature() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_signature(const std::string& value);
  std::string* _internal_mutable_signature();
  public:

  // optional uint32 accountid = 2;
  bool has_accountid() const;
  private:
  bool _internal_has_accountid() const;
  public:
  void clear_accountid();
  ::PROTOBUF_NAMESPACE_ID::uint32 accountid() const;
  void set_accountid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_accountid() const;
  void _internal_set_accountid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 rtime = 3;
  bool has_rtime() const;
  private:
  bool _internal_has_rtime() const;
  public:
  void clear_rtime();
  ::PROTOBUF_NAMESPACE_ID::uint32 rtime() const;
  void set_rtime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rtime() const;
  void _internal_set_rtime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 tx_defidx = 7;
  bool has_tx_defidx() const;
  private:
  bool _internal_has_tx_defidx() const;
  public:
  void clear_tx_defidx();
  ::PROTOBUF_NAMESPACE_ID::uint32 tx_defidx() const;
  void set_tx_defidx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tx_defidx() const;
  void _internal_set_tx_defidx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int32 entindex = 8;
  bool has_entindex() const;
  private:
  bool _internal_has_entindex() const;
  public:
  void clear_entindex();
  ::PROTOBUF_NAMESPACE_ID::int32 entindex() const;
  void set_entindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_entindex() const;
  void _internal_set_entindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint32 hitbox = 9;
  bool has_hitbox() const;
  private:
  bool _internal_has_hitbox() const;
  public:
  void clear_hitbox();
  ::PROTOBUF_NAMESPACE_ID::uint32 hitbox() const;
  void set_hitbox(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_hitbox() const;
  void _internal_set_hitbox(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float creationtime = 10;
  bool has_creationtime() const;
  private:
  bool _internal_has_creationtime() const;
  public:
  void clear_creationtime();
  float creationtime() const;
  void set_creationtime(float value);
  private:
  float _internal_creationtime() const;
  void _internal_set_creationtime(float value);
  public:

  // optional uint32 equipslot = 11;
  bool has_equipslot() const;
  private:
  bool _internal_has_equipslot() const;
  public:
  void clear_equipslot();
  ::PROTOBUF_NAMESPACE_ID::uint32 equipslot() const;
  void set_equipslot(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_equipslot() const;
  void _internal_set_equipslot(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 trace_id = 12;
  bool has_trace_id() const;
  private:
  bool _internal_has_trace_id() const;
  public:
  void clear_trace_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 trace_id() const;
  void set_trace_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_trace_id() const;
  void _internal_set_trace_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 tint_id = 14;
  bool has_tint_id() const;
  private:
  bool _internal_has_tint_id() const;
  public:
  void clear_tint_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 tint_id() const;
  void set_tint_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tint_id() const;
  void _internal_set_tint_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlayerDecalDigitalSignature)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > endpos_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > startpos_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > right_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > normal_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
  ::PROTOBUF_NAMESPACE_ID::uint32 accountid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rtime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tx_defidx_;
  ::PROTOBUF_NAMESPACE_ID::int32 entindex_;
  ::PROTOBUF_NAMESPACE_ID::uint32 hitbox_;
  float creationtime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 equipslot_;
  ::PROTOBUF_NAMESPACE_ID::uint32 trace_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tint_id_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_ClientPlayerDecalSign final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCCStrike15_v2_ClientPlayerDecalSign) */ {
 public:
  inline CMsgGCCStrike15_v2_ClientPlayerDecalSign() : CMsgGCCStrike15_v2_ClientPlayerDecalSign(nullptr) {}
  ~CMsgGCCStrike15_v2_ClientPlayerDecalSign() override;
  explicit constexpr CMsgGCCStrike15_v2_ClientPlayerDecalSign(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCCStrike15_v2_ClientPlayerDecalSign(const CMsgGCCStrike15_v2_ClientPlayerDecalSign& from);
  CMsgGCCStrike15_v2_ClientPlayerDecalSign(CMsgGCCStrike15_v2_ClientPlayerDecalSign&& from) noexcept
    : CMsgGCCStrike15_v2_ClientPlayerDecalSign() {
    *this = ::std::move(from);
  }

  inline CMsgGCCStrike15_v2_ClientPlayerDecalSign& operator=(const CMsgGCCStrike15_v2_ClientPlayerDecalSign& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCCStrike15_v2_ClientPlayerDecalSign& operator=(CMsgGCCStrike15_v2_ClientPlayerDecalSign&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCCStrike15_v2_ClientPlayerDecalSign& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCCStrike15_v2_ClientPlayerDecalSign* internal_default_instance() {
    return reinterpret_cast<const CMsgGCCStrike15_v2_ClientPlayerDecalSign*>(
               &_CMsgGCCStrike15_v2_ClientPlayerDecalSign_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    123;

  friend void swap(CMsgGCCStrike15_v2_ClientPlayerDecalSign& a, CMsgGCCStrike15_v2_ClientPlayerDecalSign& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCCStrike15_v2_ClientPlayerDecalSign* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCCStrike15_v2_ClientPlayerDecalSign* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCCStrike15_v2_ClientPlayerDecalSign* New() const final {
    return new CMsgGCCStrike15_v2_ClientPlayerDecalSign();
  }

  CMsgGCCStrike15_v2_ClientPlayerDecalSign* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCCStrike15_v2_ClientPlayerDecalSign>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCCStrike15_v2_ClientPlayerDecalSign& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgGCCStrike15_v2_ClientPlayerDecalSign& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCCStrike15_v2_ClientPlayerDecalSign* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCCStrike15_v2_ClientPlayerDecalSign";
  }
  protected:
  explicit CMsgGCCStrike15_v2_ClientPlayerDecalSign(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
    kItemidFieldNumber = 2,
  };
  // optional .PlayerDecalDigitalSignature data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::PlayerDecalDigitalSignature& data() const;
  PROTOBUF_MUST_USE_RESULT ::PlayerDecalDigitalSignature* release_data();
  ::PlayerDecalDigitalSignature* mutable_data();
  void set_allocated_data(::PlayerDecalDigitalSignature* data);
  private:
  const ::PlayerDecalDigitalSignature& _internal_data() const;
  ::PlayerDecalDigitalSignature* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::PlayerDecalDigitalSignature* data);
  ::PlayerDecalDigitalSignature* unsafe_arena_release_data();

  // optional uint64 itemid = 2;
  bool has_itemid() const;
  private:
  bool _internal_has_itemid() const;
  public:
  void clear_itemid();
  ::PROTOBUF_NAMESPACE_ID::uint64 itemid() const;
  void set_itemid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_itemid() const;
  void _internal_set_itemid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_ClientPlayerDecalSign)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PlayerDecalDigitalSignature* data_;
  ::PROTOBUF_NAMESPACE_ID::uint64 itemid_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_ClientLogonFatalError final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCCStrike15_v2_ClientLogonFatalError) */ {
 public:
  inline CMsgGCCStrike15_v2_ClientLogonFatalError() : CMsgGCCStrike15_v2_ClientLogonFatalError(nullptr) {}
  ~CMsgGCCStrike15_v2_ClientLogonFatalError() override;
  explicit constexpr CMsgGCCStrike15_v2_ClientLogonFatalError(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCCStrike15_v2_ClientLogonFatalError(const CMsgGCCStrike15_v2_ClientLogonFatalError& from);
  CMsgGCCStrike15_v2_ClientLogonFatalError(CMsgGCCStrike15_v2_ClientLogonFatalError&& from) noexcept
    : CMsgGCCStrike15_v2_ClientLogonFatalError() {
    *this = ::std::move(from);
  }

  inline CMsgGCCStrike15_v2_ClientLogonFatalError& operator=(const CMsgGCCStrike15_v2_ClientLogonFatalError& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCCStrike15_v2_ClientLogonFatalError& operator=(CMsgGCCStrike15_v2_ClientLogonFatalError&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCCStrike15_v2_ClientLogonFatalError& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCCStrike15_v2_ClientLogonFatalError* internal_default_instance() {
    return reinterpret_cast<const CMsgGCCStrike15_v2_ClientLogonFatalError*>(
               &_CMsgGCCStrike15_v2_ClientLogonFatalError_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    124;

  friend void swap(CMsgGCCStrike15_v2_ClientLogonFatalError& a, CMsgGCCStrike15_v2_ClientLogonFatalError& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCCStrike15_v2_ClientLogonFatalError* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCCStrike15_v2_ClientLogonFatalError* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCCStrike15_v2_ClientLogonFatalError* New() const final {
    return new CMsgGCCStrike15_v2_ClientLogonFatalError();
  }

  CMsgGCCStrike15_v2_ClientLogonFatalError* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCCStrike15_v2_ClientLogonFatalError>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCCStrike15_v2_ClientLogonFatalError& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgGCCStrike15_v2_ClientLogonFatalError& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCCStrike15_v2_ClientLogonFatalError* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCCStrike15_v2_ClientLogonFatalError";
  }
  protected:
  explicit CMsgGCCStrike15_v2_ClientLogonFatalError(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kErrorcodeFieldNumber = 1,
  };
  // optional string message = 2;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_MUST_USE_RESULT std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // optional uint32 errorcode = 1;
  bool has_errorcode() const;
  private:
  bool _internal_has_errorcode() const;
  public:
  void clear_errorcode();
  ::PROTOBUF_NAMESPACE_ID::uint32 errorcode() const;
  void set_errorcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_errorcode() const;
  void _internal_set_errorcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_ClientLogonFatalError)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::uint32 errorcode_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_ClientPollState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCCStrike15_v2_ClientPollState) */ {
 public:
  inline CMsgGCCStrike15_v2_ClientPollState() : CMsgGCCStrike15_v2_ClientPollState(nullptr) {}
  ~CMsgGCCStrike15_v2_ClientPollState() override;
  explicit constexpr CMsgGCCStrike15_v2_ClientPollState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCCStrike15_v2_ClientPollState(const CMsgGCCStrike15_v2_ClientPollState& from);
  CMsgGCCStrike15_v2_ClientPollState(CMsgGCCStrike15_v2_ClientPollState&& from) noexcept
    : CMsgGCCStrike15_v2_ClientPollState() {
    *this = ::std::move(from);
  }

  inline CMsgGCCStrike15_v2_ClientPollState& operator=(const CMsgGCCStrike15_v2_ClientPollState& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCCStrike15_v2_ClientPollState& operator=(CMsgGCCStrike15_v2_ClientPollState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCCStrike15_v2_ClientPollState& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCCStrike15_v2_ClientPollState* internal_default_instance() {
    return reinterpret_cast<const CMsgGCCStrike15_v2_ClientPollState*>(
               &_CMsgGCCStrike15_v2_ClientPollState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    125;

  friend void swap(CMsgGCCStrike15_v2_ClientPollState& a, CMsgGCCStrike15_v2_ClientPollState& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCCStrike15_v2_ClientPollState* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCCStrike15_v2_ClientPollState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCCStrike15_v2_ClientPollState* New() const final {
    return new CMsgGCCStrike15_v2_ClientPollState();
  }

  CMsgGCCStrike15_v2_ClientPollState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCCStrike15_v2_ClientPollState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCCStrike15_v2_ClientPollState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgGCCStrike15_v2_ClientPollState& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCCStrike15_v2_ClientPollState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCCStrike15_v2_ClientPollState";
  }
  protected:
  explicit CMsgGCCStrike15_v2_ClientPollState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNamesFieldNumber = 2,
    kValuesFieldNumber = 3,
    kPollidFieldNumber = 1,
  };
  // repeated string names = 2;
  int names_size() const;
  private:
  int _internal_names_size() const;
  public:
  void clear_names();
  const std::string& names(int index) const;
  std::string* mutable_names(int index);
  void set_names(int index, const std::string& value);
  void set_names(int index, std::string&& value);
  void set_names(int index, const char* value);
  void set_names(int index, const char* value, size_t size);
  std::string* add_names();
  void add_names(const std::string& value);
  void add_names(std::string&& value);
  void add_names(const char* value);
  void add_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_names();
  private:
  const std::string& _internal_names(int index) const;
  std::string* _internal_add_names();
  public:

  // repeated int32 values = 3;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_values() const;
  void _internal_add_values(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_values();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 values(int index) const;
  void set_values(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_values(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_values();

  // optional uint32 pollid = 1;
  bool has_pollid() const;
  private:
  bool _internal_has_pollid() const;
  public:
  void clear_pollid();
  ::PROTOBUF_NAMESPACE_ID::uint32 pollid() const;
  void set_pollid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pollid() const;
  void _internal_set_pollid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_ClientPollState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> names_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > values_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pollid_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_Party_Register final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCCStrike15_v2_Party_Register) */ {
 public:
  inline CMsgGCCStrike15_v2_Party_Register() : CMsgGCCStrike15_v2_Party_Register(nullptr) {}
  ~CMsgGCCStrike15_v2_Party_Register() override;
  explicit constexpr CMsgGCCStrike15_v2_Party_Register(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCCStrike15_v2_Party_Register(const CMsgGCCStrike15_v2_Party_Register& from);
  CMsgGCCStrike15_v2_Party_Register(CMsgGCCStrike15_v2_Party_Register&& from) noexcept
    : CMsgGCCStrike15_v2_Party_Register() {
    *this = ::std::move(from);
  }

  inline CMsgGCCStrike15_v2_Party_Register& operator=(const CMsgGCCStrike15_v2_Party_Register& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCCStrike15_v2_Party_Register& operator=(CMsgGCCStrike15_v2_Party_Register&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCCStrike15_v2_Party_Register& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCCStrike15_v2_Party_Register* internal_default_instance() {
    return reinterpret_cast<const CMsgGCCStrike15_v2_Party_Register*>(
               &_CMsgGCCStrike15_v2_Party_Register_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    126;

  friend void swap(CMsgGCCStrike15_v2_Party_Register& a, CMsgGCCStrike15_v2_Party_Register& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCCStrike15_v2_Party_Register* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCCStrike15_v2_Party_Register* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCCStrike15_v2_Party_Register* New() const final {
    return new CMsgGCCStrike15_v2_Party_Register();
  }

  CMsgGCCStrike15_v2_Party_Register* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCCStrike15_v2_Party_Register>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCCStrike15_v2_Party_Register& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgGCCStrike15_v2_Party_Register& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCCStrike15_v2_Party_Register* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCCStrike15_v2_Party_Register";
  }
  protected:
  explicit CMsgGCCStrike15_v2_Party_Register(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kVerFieldNumber = 2,
    kAprFieldNumber = 3,
    kArkFieldNumber = 4,
    kNbyFieldNumber = 5,
    kGrpFieldNumber = 6,
    kSlotsFieldNumber = 7,
    kLauncherFieldNumber = 8,
  };
  // optional uint32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 ver = 2;
  bool has_ver() const;
  private:
  bool _internal_has_ver() const;
  public:
  void clear_ver();
  ::PROTOBUF_NAMESPACE_ID::uint32 ver() const;
  void set_ver(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ver() const;
  void _internal_set_ver(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 apr = 3;
  bool has_apr() const;
  private:
  bool _internal_has_apr() const;
  public:
  void clear_apr();
  ::PROTOBUF_NAMESPACE_ID::uint32 apr() const;
  void set_apr(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_apr() const;
  void _internal_set_apr(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 ark = 4;
  bool has_ark() const;
  private:
  bool _internal_has_ark() const;
  public:
  void clear_ark();
  ::PROTOBUF_NAMESPACE_ID::uint32 ark() const;
  void set_ark(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ark() const;
  void _internal_set_ark(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 nby = 5;
  bool has_nby() const;
  private:
  bool _internal_has_nby() const;
  public:
  void clear_nby();
  ::PROTOBUF_NAMESPACE_ID::uint32 nby() const;
  void set_nby(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_nby() const;
  void _internal_set_nby(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 grp = 6;
  bool has_grp() const;
  private:
  bool _internal_has_grp() const;
  public:
  void clear_grp();
  ::PROTOBUF_NAMESPACE_ID::uint32 grp() const;
  void set_grp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_grp() const;
  void _internal_set_grp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 slots = 7;
  bool has_slots() const;
  private:
  bool _internal_has_slots() const;
  public:
  void clear_slots();
  ::PROTOBUF_NAMESPACE_ID::uint32 slots() const;
  void set_slots(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_slots() const;
  void _internal_set_slots(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 launcher = 8;
  bool has_launcher() const;
  private:
  bool _internal_has_launcher() const;
  public:
  void clear_launcher();
  ::PROTOBUF_NAMESPACE_ID::uint32 launcher() const;
  void set_launcher(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_launcher() const;
  void _internal_set_launcher(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_Party_Register)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ver_;
  ::PROTOBUF_NAMESPACE_ID::uint32 apr_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ark_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nby_;
  ::PROTOBUF_NAMESPACE_ID::uint32 grp_;
  ::PROTOBUF_NAMESPACE_ID::uint32 slots_;
  ::PROTOBUF_NAMESPACE_ID::uint32 launcher_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_Party_Search final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCCStrike15_v2_Party_Search) */ {
 public:
  inline CMsgGCCStrike15_v2_Party_Search() : CMsgGCCStrike15_v2_Party_Search(nullptr) {}
  ~CMsgGCCStrike15_v2_Party_Search() override;
  explicit constexpr CMsgGCCStrike15_v2_Party_Search(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCCStrike15_v2_Party_Search(const CMsgGCCStrike15_v2_Party_Search& from);
  CMsgGCCStrike15_v2_Party_Search(CMsgGCCStrike15_v2_Party_Search&& from) noexcept
    : CMsgGCCStrike15_v2_Party_Search() {
    *this = ::std::move(from);
  }

  inline CMsgGCCStrike15_v2_Party_Search& operator=(const CMsgGCCStrike15_v2_Party_Search& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCCStrike15_v2_Party_Search& operator=(CMsgGCCStrike15_v2_Party_Search&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCCStrike15_v2_Party_Search& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCCStrike15_v2_Party_Search* internal_default_instance() {
    return reinterpret_cast<const CMsgGCCStrike15_v2_Party_Search*>(
               &_CMsgGCCStrike15_v2_Party_Search_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    127;

  friend void swap(CMsgGCCStrike15_v2_Party_Search& a, CMsgGCCStrike15_v2_Party_Search& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCCStrike15_v2_Party_Search* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCCStrike15_v2_Party_Search* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCCStrike15_v2_Party_Search* New() const final {
    return new CMsgGCCStrike15_v2_Party_Search();
  }

  CMsgGCCStrike15_v2_Party_Search* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCCStrike15_v2_Party_Search>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCCStrike15_v2_Party_Search& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgGCCStrike15_v2_Party_Search& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCCStrike15_v2_Party_Search* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCCStrike15_v2_Party_Search";
  }
  protected:
  explicit CMsgGCCStrike15_v2_Party_Search(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGrpsFieldNumber = 4,
    kVerFieldNumber = 1,
    kAprFieldNumber = 2,
    kArkFieldNumber = 3,
    kLauncherFieldNumber = 5,
  };
  // repeated uint32 grps = 4;
  int grps_size() const;
  private:
  int _internal_grps_size() const;
  public:
  void clear_grps();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_grps(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_grps() const;
  void _internal_add_grps(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_grps();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 grps(int index) const;
  void set_grps(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_grps(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      grps() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_grps();

  // optional uint32 ver = 1;
  bool has_ver() const;
  private:
  bool _internal_has_ver() const;
  public:
  void clear_ver();
  ::PROTOBUF_NAMESPACE_ID::uint32 ver() const;
  void set_ver(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ver() const;
  void _internal_set_ver(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 apr = 2;
  bool has_apr() const;
  private:
  bool _internal_has_apr() const;
  public:
  void clear_apr();
  ::PROTOBUF_NAMESPACE_ID::uint32 apr() const;
  void set_apr(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_apr() const;
  void _internal_set_apr(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 ark = 3;
  bool has_ark() const;
  private:
  bool _internal_has_ark() const;
  public:
  void clear_ark();
  ::PROTOBUF_NAMESPACE_ID::uint32 ark() const;
  void set_ark(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ark() const;
  void _internal_set_ark(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 launcher = 5;
  bool has_launcher() const;
  private:
  bool _internal_has_launcher() const;
  public:
  void clear_launcher();
  ::PROTOBUF_NAMESPACE_ID::uint32 launcher() const;
  void set_launcher(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_launcher() const;
  void _internal_set_launcher(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_Party_Search)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > grps_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ver_;
  ::PROTOBUF_NAMESPACE_ID::uint32 apr_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ark_;
  ::PROTOBUF_NAMESPACE_ID::uint32 launcher_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_Party_SearchResults_Entry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCCStrike15_v2_Party_SearchResults.Entry) */ {
 public:
  inline CMsgGCCStrike15_v2_Party_SearchResults_Entry() : CMsgGCCStrike15_v2_Party_SearchResults_Entry(nullptr) {}
  ~CMsgGCCStrike15_v2_Party_SearchResults_Entry() override;
  explicit constexpr CMsgGCCStrike15_v2_Party_SearchResults_Entry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCCStrike15_v2_Party_SearchResults_Entry(const CMsgGCCStrike15_v2_Party_SearchResults_Entry& from);
  CMsgGCCStrike15_v2_Party_SearchResults_Entry(CMsgGCCStrike15_v2_Party_SearchResults_Entry&& from) noexcept
    : CMsgGCCStrike15_v2_Party_SearchResults_Entry() {
    *this = ::std::move(from);
  }

  inline CMsgGCCStrike15_v2_Party_SearchResults_Entry& operator=(const CMsgGCCStrike15_v2_Party_SearchResults_Entry& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCCStrike15_v2_Party_SearchResults_Entry& operator=(CMsgGCCStrike15_v2_Party_SearchResults_Entry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCCStrike15_v2_Party_SearchResults_Entry& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCCStrike15_v2_Party_SearchResults_Entry* internal_default_instance() {
    return reinterpret_cast<const CMsgGCCStrike15_v2_Party_SearchResults_Entry*>(
               &_CMsgGCCStrike15_v2_Party_SearchResults_Entry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    128;

  friend void swap(CMsgGCCStrike15_v2_Party_SearchResults_Entry& a, CMsgGCCStrike15_v2_Party_SearchResults_Entry& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCCStrike15_v2_Party_SearchResults_Entry* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCCStrike15_v2_Party_SearchResults_Entry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCCStrike15_v2_Party_SearchResults_Entry* New() const final {
    return new CMsgGCCStrike15_v2_Party_SearchResults_Entry();
  }

  CMsgGCCStrike15_v2_Party_SearchResults_Entry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCCStrike15_v2_Party_SearchResults_Entry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCCStrike15_v2_Party_SearchResults_Entry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgGCCStrike15_v2_Party_SearchResults_Entry& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCCStrike15_v2_Party_SearchResults_Entry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCCStrike15_v2_Party_SearchResults.Entry";
  }
  protected:
  explicit CMsgGCCStrike15_v2_Party_SearchResults_Entry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kGrpFieldNumber = 2,
  };
  // optional uint32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 grp = 2;
  bool has_grp() const;
  private:
  bool _internal_has_grp() const;
  public:
  void clear_grp();
  ::PROTOBUF_NAMESPACE_ID::uint32 grp() const;
  void set_grp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_grp() const;
  void _internal_set_grp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_Party_SearchResults.Entry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 grp_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_Party_SearchResults final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCCStrike15_v2_Party_SearchResults) */ {
 public:
  inline CMsgGCCStrike15_v2_Party_SearchResults() : CMsgGCCStrike15_v2_Party_SearchResults(nullptr) {}
  ~CMsgGCCStrike15_v2_Party_SearchResults() override;
  explicit constexpr CMsgGCCStrike15_v2_Party_SearchResults(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCCStrike15_v2_Party_SearchResults(const CMsgGCCStrike15_v2_Party_SearchResults& from);
  CMsgGCCStrike15_v2_Party_SearchResults(CMsgGCCStrike15_v2_Party_SearchResults&& from) noexcept
    : CMsgGCCStrike15_v2_Party_SearchResults() {
    *this = ::std::move(from);
  }

  inline CMsgGCCStrike15_v2_Party_SearchResults& operator=(const CMsgGCCStrike15_v2_Party_SearchResults& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCCStrike15_v2_Party_SearchResults& operator=(CMsgGCCStrike15_v2_Party_SearchResults&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCCStrike15_v2_Party_SearchResults& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCCStrike15_v2_Party_SearchResults* internal_default_instance() {
    return reinterpret_cast<const CMsgGCCStrike15_v2_Party_SearchResults*>(
               &_CMsgGCCStrike15_v2_Party_SearchResults_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    129;

  friend void swap(CMsgGCCStrike15_v2_Party_SearchResults& a, CMsgGCCStrike15_v2_Party_SearchResults& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCCStrike15_v2_Party_SearchResults* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCCStrike15_v2_Party_SearchResults* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCCStrike15_v2_Party_SearchResults* New() const final {
    return new CMsgGCCStrike15_v2_Party_SearchResults();
  }

  CMsgGCCStrike15_v2_Party_SearchResults* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCCStrike15_v2_Party_SearchResults>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCCStrike15_v2_Party_SearchResults& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgGCCStrike15_v2_Party_SearchResults& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCCStrike15_v2_Party_SearchResults* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCCStrike15_v2_Party_SearchResults";
  }
  protected:
  explicit CMsgGCCStrike15_v2_Party_SearchResults(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgGCCStrike15_v2_Party_SearchResults_Entry Entry;

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 1,
  };
  // repeated .CMsgGCCStrike15_v2_Party_SearchResults.Entry entries = 1;
  int entries_size() const;
  private:
  int _internal_entries_size() const;
  public:
  void clear_entries();
  ::CMsgGCCStrike15_v2_Party_SearchResults_Entry* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCCStrike15_v2_Party_SearchResults_Entry >*
      mutable_entries();
  private:
  const ::CMsgGCCStrike15_v2_Party_SearchResults_Entry& _internal_entries(int index) const;
  ::CMsgGCCStrike15_v2_Party_SearchResults_Entry* _internal_add_entries();
  public:
  const ::CMsgGCCStrike15_v2_Party_SearchResults_Entry& entries(int index) const;
  ::CMsgGCCStrike15_v2_Party_SearchResults_Entry* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCCStrike15_v2_Party_SearchResults_Entry >&
      entries() const;

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_Party_SearchResults)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCCStrike15_v2_Party_SearchResults_Entry > entries_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_Party_Invite final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCCStrike15_v2_Party_Invite) */ {
 public:
  inline CMsgGCCStrike15_v2_Party_Invite() : CMsgGCCStrike15_v2_Party_Invite(nullptr) {}
  ~CMsgGCCStrike15_v2_Party_Invite() override;
  explicit constexpr CMsgGCCStrike15_v2_Party_Invite(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCCStrike15_v2_Party_Invite(const CMsgGCCStrike15_v2_Party_Invite& from);
  CMsgGCCStrike15_v2_Party_Invite(CMsgGCCStrike15_v2_Party_Invite&& from) noexcept
    : CMsgGCCStrike15_v2_Party_Invite() {
    *this = ::std::move(from);
  }

  inline CMsgGCCStrike15_v2_Party_Invite& operator=(const CMsgGCCStrike15_v2_Party_Invite& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCCStrike15_v2_Party_Invite& operator=(CMsgGCCStrike15_v2_Party_Invite&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCCStrike15_v2_Party_Invite& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCCStrike15_v2_Party_Invite* internal_default_instance() {
    return reinterpret_cast<const CMsgGCCStrike15_v2_Party_Invite*>(
               &_CMsgGCCStrike15_v2_Party_Invite_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    130;

  friend void swap(CMsgGCCStrike15_v2_Party_Invite& a, CMsgGCCStrike15_v2_Party_Invite& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCCStrike15_v2_Party_Invite* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCCStrike15_v2_Party_Invite* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCCStrike15_v2_Party_Invite* New() const final {
    return new CMsgGCCStrike15_v2_Party_Invite();
  }

  CMsgGCCStrike15_v2_Party_Invite* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCCStrike15_v2_Party_Invite>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCCStrike15_v2_Party_Invite& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgGCCStrike15_v2_Party_Invite& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCCStrike15_v2_Party_Invite* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCCStrike15_v2_Party_Invite";
  }
  protected:
  explicit CMsgGCCStrike15_v2_Party_Invite(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountidFieldNumber = 1,
    kLobbyidFieldNumber = 2,
  };
  // optional uint32 accountid = 1;
  bool has_accountid() const;
  private:
  bool _internal_has_accountid() const;
  public:
  void clear_accountid();
  ::PROTOBUF_NAMESPACE_ID::uint32 accountid() const;
  void set_accountid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_accountid() const;
  void _internal_set_accountid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 lobbyid = 2;
  bool has_lobbyid() const;
  private:
  bool _internal_has_lobbyid() const;
  public:
  void clear_lobbyid();
  ::PROTOBUF_NAMESPACE_ID::uint32 lobbyid() const;
  void set_lobbyid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_lobbyid() const;
  void _internal_set_lobbyid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_Party_Invite)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 accountid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lobbyid_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_Account_RequestCoPlays_Player final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCCStrike15_v2_Account_RequestCoPlays.Player) */ {
 public:
  inline CMsgGCCStrike15_v2_Account_RequestCoPlays_Player() : CMsgGCCStrike15_v2_Account_RequestCoPlays_Player(nullptr) {}
  ~CMsgGCCStrike15_v2_Account_RequestCoPlays_Player() override;
  explicit constexpr CMsgGCCStrike15_v2_Account_RequestCoPlays_Player(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCCStrike15_v2_Account_RequestCoPlays_Player(const CMsgGCCStrike15_v2_Account_RequestCoPlays_Player& from);
  CMsgGCCStrike15_v2_Account_RequestCoPlays_Player(CMsgGCCStrike15_v2_Account_RequestCoPlays_Player&& from) noexcept
    : CMsgGCCStrike15_v2_Account_RequestCoPlays_Player() {
    *this = ::std::move(from);
  }

  inline CMsgGCCStrike15_v2_Account_RequestCoPlays_Player& operator=(const CMsgGCCStrike15_v2_Account_RequestCoPlays_Player& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCCStrike15_v2_Account_RequestCoPlays_Player& operator=(CMsgGCCStrike15_v2_Account_RequestCoPlays_Player&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCCStrike15_v2_Account_RequestCoPlays_Player& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCCStrike15_v2_Account_RequestCoPlays_Player* internal_default_instance() {
    return reinterpret_cast<const CMsgGCCStrike15_v2_Account_RequestCoPlays_Player*>(
               &_CMsgGCCStrike15_v2_Account_RequestCoPlays_Player_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    131;

  friend void swap(CMsgGCCStrike15_v2_Account_RequestCoPlays_Player& a, CMsgGCCStrike15_v2_Account_RequestCoPlays_Player& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCCStrike15_v2_Account_RequestCoPlays_Player* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCCStrike15_v2_Account_RequestCoPlays_Player* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCCStrike15_v2_Account_RequestCoPlays_Player* New() const final {
    return new CMsgGCCStrike15_v2_Account_RequestCoPlays_Player();
  }

  CMsgGCCStrike15_v2_Account_RequestCoPlays_Player* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCCStrike15_v2_Account_RequestCoPlays_Player>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCCStrike15_v2_Account_RequestCoPlays_Player& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgGCCStrike15_v2_Account_RequestCoPlays_Player& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCCStrike15_v2_Account_RequestCoPlays_Player* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCCStrike15_v2_Account_RequestCoPlays.Player";
  }
  protected:
  explicit CMsgGCCStrike15_v2_Account_RequestCoPlays_Player(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountidFieldNumber = 1,
    kRtcoplayFieldNumber = 2,
    kOnlineFieldNumber = 3,
  };
  // optional uint32 accountid = 1;
  bool has_accountid() const;
  private:
  bool _internal_has_accountid() const;
  public:
  void clear_accountid();
  ::PROTOBUF_NAMESPACE_ID::uint32 accountid() const;
  void set_accountid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_accountid() const;
  void _internal_set_accountid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 rtcoplay = 2;
  bool has_rtcoplay() const;
  private:
  bool _internal_has_rtcoplay() const;
  public:
  void clear_rtcoplay();
  ::PROTOBUF_NAMESPACE_ID::uint32 rtcoplay() const;
  void set_rtcoplay(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rtcoplay() const;
  void _internal_set_rtcoplay(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool online = 3;
  bool has_online() const;
  private:
  bool _internal_has_online() const;
  public:
  void clear_online();
  bool online() const;
  void set_online(bool value);
  private:
  bool _internal_online() const;
  void _internal_set_online(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_Account_RequestCoPlays.Player)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 accountid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rtcoplay_;
  bool online_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_Account_RequestCoPlays final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCCStrike15_v2_Account_RequestCoPlays) */ {
 public:
  inline CMsgGCCStrike15_v2_Account_RequestCoPlays() : CMsgGCCStrike15_v2_Account_RequestCoPlays(nullptr) {}
  ~CMsgGCCStrike15_v2_Account_RequestCoPlays() override;
  explicit constexpr CMsgGCCStrike15_v2_Account_RequestCoPlays(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCCStrike15_v2_Account_RequestCoPlays(const CMsgGCCStrike15_v2_Account_RequestCoPlays& from);
  CMsgGCCStrike15_v2_Account_RequestCoPlays(CMsgGCCStrike15_v2_Account_RequestCoPlays&& from) noexcept
    : CMsgGCCStrike15_v2_Account_RequestCoPlays() {
    *this = ::std::move(from);
  }

  inline CMsgGCCStrike15_v2_Account_RequestCoPlays& operator=(const CMsgGCCStrike15_v2_Account_RequestCoPlays& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCCStrike15_v2_Account_RequestCoPlays& operator=(CMsgGCCStrike15_v2_Account_RequestCoPlays&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCCStrike15_v2_Account_RequestCoPlays& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCCStrike15_v2_Account_RequestCoPlays* internal_default_instance() {
    return reinterpret_cast<const CMsgGCCStrike15_v2_Account_RequestCoPlays*>(
               &_CMsgGCCStrike15_v2_Account_RequestCoPlays_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    132;

  friend void swap(CMsgGCCStrike15_v2_Account_RequestCoPlays& a, CMsgGCCStrike15_v2_Account_RequestCoPlays& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCCStrike15_v2_Account_RequestCoPlays* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCCStrike15_v2_Account_RequestCoPlays* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCCStrike15_v2_Account_RequestCoPlays* New() const final {
    return new CMsgGCCStrike15_v2_Account_RequestCoPlays();
  }

  CMsgGCCStrike15_v2_Account_RequestCoPlays* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCCStrike15_v2_Account_RequestCoPlays>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCCStrike15_v2_Account_RequestCoPlays& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgGCCStrike15_v2_Account_RequestCoPlays& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCCStrike15_v2_Account_RequestCoPlays* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCCStrike15_v2_Account_RequestCoPlays";
  }
  protected:
  explicit CMsgGCCStrike15_v2_Account_RequestCoPlays(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgGCCStrike15_v2_Account_RequestCoPlays_Player Player;

  // accessors -------------------------------------------------------

  enum : int {
    kPlayersFieldNumber = 1,
    kServertimeFieldNumber = 2,
  };
  // repeated .CMsgGCCStrike15_v2_Account_RequestCoPlays.Player players = 1;
  int players_size() const;
  private:
  int _internal_players_size() const;
  public:
  void clear_players();
  ::CMsgGCCStrike15_v2_Account_RequestCoPlays_Player* mutable_players(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCCStrike15_v2_Account_RequestCoPlays_Player >*
      mutable_players();
  private:
  const ::CMsgGCCStrike15_v2_Account_RequestCoPlays_Player& _internal_players(int index) const;
  ::CMsgGCCStrike15_v2_Account_RequestCoPlays_Player* _internal_add_players();
  public:
  const ::CMsgGCCStrike15_v2_Account_RequestCoPlays_Player& players(int index) const;
  ::CMsgGCCStrike15_v2_Account_RequestCoPlays_Player* add_players();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCCStrike15_v2_Account_RequestCoPlays_Player >&
      players() const;

  // optional uint32 servertime = 2;
  bool has_servertime() const;
  private:
  bool _internal_has_servertime() const;
  public:
  void clear_servertime();
  ::PROTOBUF_NAMESPACE_ID::uint32 servertime() const;
  void set_servertime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_servertime() const;
  void _internal_set_servertime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_Account_RequestCoPlays)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCCStrike15_v2_Account_RequestCoPlays_Player > players_;
  ::PROTOBUF_NAMESPACE_ID::uint32 servertime_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCCStrike15_v2_ClientToGCRequestTicket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCCStrike15_v2_ClientToGCRequestTicket) */ {
 public:
  inline CMsgGCCStrike15_v2_ClientToGCRequestTicket() : CMsgGCCStrike15_v2_ClientToGCRequestTicket(nullptr) {}
  ~CMsgGCCStrike15_v2_ClientToGCRequestTicket() override;
  explicit constexpr CMsgGCCStrike15_v2_ClientToGCRequestTicket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCCStrike15_v2_ClientToGCRequestTicket(const CMsgGCCStrike15_v2_ClientToGCRequestTicket& from);
  CMsgGCCStrike15_v2_ClientToGCRequestTicket(CMsgGCCStrike15_v2_ClientToGCRequestTicket&& from) noexcept
    : CMsgGCCStrike15_v2_ClientToGCRequestTicket() {
    *this = ::std::move(from);
  }

  inline CMsgGCCStrike15_v2_ClientToGCRequestTicket& operator=(const CMsgGCCStrike15_v2_ClientToGCRequestTicket& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCCStrike15_v2_ClientToGCRequestTicket& operator=(CMsgGCCStrike15_v2_ClientToGCRequestTicket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCCStrike15_v2_ClientToGCRequestTicket& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCCStrike15_v2_ClientToGCRequestTicket* internal_default_instance() {
    return reinterpret_cast<const CMsgGCCStrike15_v2_ClientToGCRequestTicket*>(
               &_CMsgGCCStrike15_v2_ClientToGCRequestTicket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    133;

  friend void swap(CMsgGCCStrike15_v2_ClientToGCRequestTicket& a, CMsgGCCStrike15_v2_ClientToGCRequestTicket& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCCStrike15_v2_ClientToGCRequestTicket* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCCStrike15_v2_ClientToGCRequestTicket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCCStrike15_v2_ClientToGCRequestTicket* New() const final {
    return new CMsgGCCStrike15_v2_ClientToGCRequestTicket();
  }

  CMsgGCCStrike15_v2_ClientToGCRequestTicket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCCStrike15_v2_ClientToGCRequestTicket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCCStrike15_v2_ClientToGCRequestTicket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgGCCStrike15_v2_ClientToGCRequestTicket& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCCStrike15_v2_ClientToGCRequestTicket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCCStrike15_v2_ClientToGCRequestTicket";
  }
  protected:
  explicit CMsgGCCStrike15_v2_ClientToGCRequestTicket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAuthorizedSteamIdFieldNumber = 1,
    kGameserverSteamIdFieldNumber = 3,
    kGameserverNetIdFieldNumber = 4,
    kAuthorizedPublicIpFieldNumber = 2,
  };
  // optional fixed64 authorized_steam_id = 1;
  bool has_authorized_steam_id() const;
  private:
  bool _internal_has_authorized_steam_id() const;
  public:
  void clear_authorized_steam_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 authorized_steam_id() const;
  void set_authorized_steam_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_authorized_steam_id() const;
  void _internal_set_authorized_steam_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional fixed64 gameserver_steam_id = 3;
  bool has_gameserver_steam_id() const;
  private:
  bool _internal_has_gameserver_steam_id() const;
  public:
  void clear_gameserver_steam_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 gameserver_steam_id() const;
  void set_gameserver_steam_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_gameserver_steam_id() const;
  void _internal_set_gameserver_steam_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional fixed64 gameserver_net_id = 4;
  bool has_gameserver_net_id() const;
  private:
  bool _internal_has_gameserver_net_id() const;
  public:
  void clear_gameserver_net_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 gameserver_net_id() const;
  void set_gameserver_net_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_gameserver_net_id() const;
  void _internal_set_gameserver_net_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional fixed32 authorized_public_ip = 2;
  bool has_authorized_public_ip() const;
  private:
  bool _internal_has_authorized_public_ip() const;
  public:
  void clear_authorized_public_ip();
  ::PROTOBUF_NAMESPACE_ID::uint32 authorized_public_ip() const;
  void set_authorized_public_ip(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_authorized_public_ip() const;
  void _internal_set_authorized_public_ip(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCCStrike15_v2_ClientToGCRequestTicket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 authorized_steam_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 gameserver_steam_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 gameserver_net_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 authorized_public_ip_;
  friend struct ::TableStruct_cstrike15_5fgcmessages_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GameServerPing

// optional int32 ping = 2;
inline bool GameServerPing::_internal_has_ping() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GameServerPing::has_ping() const {
  return _internal_has_ping();
}
inline void GameServerPing::clear_ping() {
  ping_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameServerPing::_internal_ping() const {
  return ping_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameServerPing::ping() const {
  // @@protoc_insertion_point(field_get:GameServerPing.ping)
  return _internal_ping();
}
inline void GameServerPing::_internal_set_ping(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  ping_ = value;
}
inline void GameServerPing::set_ping(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ping(value);
  // @@protoc_insertion_point(field_set:GameServerPing.ping)
}

// optional uint32 ip = 3;
inline bool GameServerPing::_internal_has_ip() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GameServerPing::has_ip() const {
  return _internal_has_ip();
}
inline void GameServerPing::clear_ip() {
  ip_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GameServerPing::_internal_ip() const {
  return ip_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GameServerPing::ip() const {
  // @@protoc_insertion_point(field_get:GameServerPing.ip)
  return _internal_ip();
}
inline void GameServerPing::_internal_set_ip(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  ip_ = value;
}
inline void GameServerPing::set_ip(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:GameServerPing.ip)
}

// optional uint32 instances = 5;
inline bool GameServerPing::_internal_has_instances() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GameServerPing::has_instances() const {
  return _internal_has_instances();
}
inline void GameServerPing::clear_instances() {
  instances_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GameServerPing::_internal_instances() const {
  return instances_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GameServerPing::instances() const {
  // @@protoc_insertion_point(field_get:GameServerPing.instances)
  return _internal_instances();
}
inline void GameServerPing::_internal_set_instances(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  instances_ = value;
}
inline void GameServerPing::set_instances(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_instances(value);
  // @@protoc_insertion_point(field_set:GameServerPing.instances)
}

// -------------------------------------------------------------------

// DataCenterPing

// optional fixed32 data_center_id = 1;
inline bool DataCenterPing::_internal_has_data_center_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DataCenterPing::has_data_center_id() const {
  return _internal_has_data_center_id();
}
inline void DataCenterPing::clear_data_center_id() {
  data_center_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DataCenterPing::_internal_data_center_id() const {
  return data_center_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DataCenterPing::data_center_id() const {
  // @@protoc_insertion_point(field_get:DataCenterPing.data_center_id)
  return _internal_data_center_id();
}
inline void DataCenterPing::_internal_set_data_center_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  data_center_id_ = value;
}
inline void DataCenterPing::set_data_center_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_data_center_id(value);
  // @@protoc_insertion_point(field_set:DataCenterPing.data_center_id)
}

// optional sint32 ping = 2;
inline bool DataCenterPing::_internal_has_ping() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DataCenterPing::has_ping() const {
  return _internal_has_ping();
}
inline void DataCenterPing::clear_ping() {
  ping_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DataCenterPing::_internal_ping() const {
  return ping_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DataCenterPing::ping() const {
  // @@protoc_insertion_point(field_get:DataCenterPing.ping)
  return _internal_ping();
}
inline void DataCenterPing::_internal_set_ping(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  ping_ = value;
}
inline void DataCenterPing::set_ping(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ping(value);
  // @@protoc_insertion_point(field_set:DataCenterPing.ping)
}

// -------------------------------------------------------------------

// DetailedSearchStatistic

// optional uint32 game_type = 1;
inline bool DetailedSearchStatistic::_internal_has_game_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DetailedSearchStatistic::has_game_type() const {
  return _internal_has_game_type();
}
inline void DetailedSearchStatistic::clear_game_type() {
  game_type_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DetailedSearchStatistic::_internal_game_type() const {
  return game_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DetailedSearchStatistic::game_type() const {
  // @@protoc_insertion_point(field_get:DetailedSearchStatistic.game_type)
  return _internal_game_type();
}
inline void DetailedSearchStatistic::_internal_set_game_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  game_type_ = value;
}
inline void DetailedSearchStatistic::set_game_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_game_type(value);
  // @@protoc_insertion_point(field_set:DetailedSearchStatistic.game_type)
}

// optional uint32 search_time_avg = 2;
inline bool DetailedSearchStatistic::_internal_has_search_time_avg() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DetailedSearchStatistic::has_search_time_avg() const {
  return _internal_has_search_time_avg();
}
inline void DetailedSearchStatistic::clear_search_time_avg() {
  search_time_avg_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DetailedSearchStatistic::_internal_search_time_avg() const {
  return search_time_avg_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DetailedSearchStatistic::search_time_avg() const {
  // @@protoc_insertion_point(field_get:DetailedSearchStatistic.search_time_avg)
  return _internal_search_time_avg();
}
inline void DetailedSearchStatistic::_internal_set_search_time_avg(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  search_time_avg_ = value;
}
inline void DetailedSearchStatistic::set_search_time_avg(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_search_time_avg(value);
  // @@protoc_insertion_point(field_set:DetailedSearchStatistic.search_time_avg)
}

// optional uint32 players_searching = 4;
inline bool DetailedSearchStatistic::_internal_has_players_searching() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DetailedSearchStatistic::has_players_searching() const {
  return _internal_has_players_searching();
}
inline void DetailedSearchStatistic::clear_players_searching() {
  players_searching_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DetailedSearchStatistic::_internal_players_searching() const {
  return players_searching_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DetailedSearchStatistic::players_searching() const {
  // @@protoc_insertion_point(field_get:DetailedSearchStatistic.players_searching)
  return _internal_players_searching();
}
inline void DetailedSearchStatistic::_internal_set_players_searching(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  players_searching_ = value;
}
inline void DetailedSearchStatistic::set_players_searching(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_players_searching(value);
  // @@protoc_insertion_point(field_set:DetailedSearchStatistic.players_searching)
}

// -------------------------------------------------------------------

// TournamentPlayer

// optional uint32 account_id = 1;
inline bool TournamentPlayer::_internal_has_account_id() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool TournamentPlayer::has_account_id() const {
  return _internal_has_account_id();
}
inline void TournamentPlayer::clear_account_id() {
  account_id_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TournamentPlayer::_internal_account_id() const {
  return account_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TournamentPlayer::account_id() const {
  // @@protoc_insertion_point(field_get:TournamentPlayer.account_id)
  return _internal_account_id();
}
inline void TournamentPlayer::_internal_set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  account_id_ = value;
}
inline void TournamentPlayer::set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:TournamentPlayer.account_id)
}

// optional string player_nick = 2;
inline bool TournamentPlayer::_internal_has_player_nick() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TournamentPlayer::has_player_nick() const {
  return _internal_has_player_nick();
}
inline void TournamentPlayer::clear_player_nick() {
  player_nick_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TournamentPlayer::player_nick() const {
  // @@protoc_insertion_point(field_get:TournamentPlayer.player_nick)
  return _internal_player_nick();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TournamentPlayer::set_player_nick(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 player_nick_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TournamentPlayer.player_nick)
}
inline std::string* TournamentPlayer::mutable_player_nick() {
  std::string* _s = _internal_mutable_player_nick();
  // @@protoc_insertion_point(field_mutable:TournamentPlayer.player_nick)
  return _s;
}
inline const std::string& TournamentPlayer::_internal_player_nick() const {
  return player_nick_.Get();
}
inline void TournamentPlayer::_internal_set_player_nick(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  player_nick_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TournamentPlayer::_internal_mutable_player_nick() {
  _has_bits_[0] |= 0x00000001u;
  return player_nick_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TournamentPlayer::release_player_nick() {
  // @@protoc_insertion_point(field_release:TournamentPlayer.player_nick)
  if (!_internal_has_player_nick()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return player_nick_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TournamentPlayer::set_allocated_player_nick(std::string* player_nick) {
  if (player_nick != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  player_nick_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), player_nick,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:TournamentPlayer.player_nick)
}

// optional string player_name = 3;
inline bool TournamentPlayer::_internal_has_player_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TournamentPlayer::has_player_name() const {
  return _internal_has_player_name();
}
inline void TournamentPlayer::clear_player_name() {
  player_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TournamentPlayer::player_name() const {
  // @@protoc_insertion_point(field_get:TournamentPlayer.player_name)
  return _internal_player_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TournamentPlayer::set_player_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 player_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TournamentPlayer.player_name)
}
inline std::string* TournamentPlayer::mutable_player_name() {
  std::string* _s = _internal_mutable_player_name();
  // @@protoc_insertion_point(field_mutable:TournamentPlayer.player_name)
  return _s;
}
inline const std::string& TournamentPlayer::_internal_player_name() const {
  return player_name_.Get();
}
inline void TournamentPlayer::_internal_set_player_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  player_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TournamentPlayer::_internal_mutable_player_name() {
  _has_bits_[0] |= 0x00000002u;
  return player_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TournamentPlayer::release_player_name() {
  // @@protoc_insertion_point(field_release:TournamentPlayer.player_name)
  if (!_internal_has_player_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return player_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TournamentPlayer::set_allocated_player_name(std::string* player_name) {
  if (player_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  player_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), player_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:TournamentPlayer.player_name)
}

// optional uint32 player_dob = 4;
inline bool TournamentPlayer::_internal_has_player_dob() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool TournamentPlayer::has_player_dob() const {
  return _internal_has_player_dob();
}
inline void TournamentPlayer::clear_player_dob() {
  player_dob_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TournamentPlayer::_internal_player_dob() const {
  return player_dob_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TournamentPlayer::player_dob() const {
  // @@protoc_insertion_point(field_get:TournamentPlayer.player_dob)
  return _internal_player_dob();
}
inline void TournamentPlayer::_internal_set_player_dob(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  player_dob_ = value;
}
inline void TournamentPlayer::set_player_dob(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_player_dob(value);
  // @@protoc_insertion_point(field_set:TournamentPlayer.player_dob)
}

// optional string player_flag = 5;
inline bool TournamentPlayer::_internal_has_player_flag() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TournamentPlayer::has_player_flag() const {
  return _internal_has_player_flag();
}
inline void TournamentPlayer::clear_player_flag() {
  player_flag_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& TournamentPlayer::player_flag() const {
  // @@protoc_insertion_point(field_get:TournamentPlayer.player_flag)
  return _internal_player_flag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TournamentPlayer::set_player_flag(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 player_flag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TournamentPlayer.player_flag)
}
inline std::string* TournamentPlayer::mutable_player_flag() {
  std::string* _s = _internal_mutable_player_flag();
  // @@protoc_insertion_point(field_mutable:TournamentPlayer.player_flag)
  return _s;
}
inline const std::string& TournamentPlayer::_internal_player_flag() const {
  return player_flag_.Get();
}
inline void TournamentPlayer::_internal_set_player_flag(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  player_flag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TournamentPlayer::_internal_mutable_player_flag() {
  _has_bits_[0] |= 0x00000004u;
  return player_flag_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TournamentPlayer::release_player_flag() {
  // @@protoc_insertion_point(field_release:TournamentPlayer.player_flag)
  if (!_internal_has_player_flag()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return player_flag_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TournamentPlayer::set_allocated_player_flag(std::string* player_flag) {
  if (player_flag != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  player_flag_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), player_flag,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:TournamentPlayer.player_flag)
}

// optional string player_location = 6;
inline bool TournamentPlayer::_internal_has_player_location() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TournamentPlayer::has_player_location() const {
  return _internal_has_player_location();
}
inline void TournamentPlayer::clear_player_location() {
  player_location_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& TournamentPlayer::player_location() const {
  // @@protoc_insertion_point(field_get:TournamentPlayer.player_location)
  return _internal_player_location();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TournamentPlayer::set_player_location(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 player_location_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TournamentPlayer.player_location)
}
inline std::string* TournamentPlayer::mutable_player_location() {
  std::string* _s = _internal_mutable_player_location();
  // @@protoc_insertion_point(field_mutable:TournamentPlayer.player_location)
  return _s;
}
inline const std::string& TournamentPlayer::_internal_player_location() const {
  return player_location_.Get();
}
inline void TournamentPlayer::_internal_set_player_location(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  player_location_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TournamentPlayer::_internal_mutable_player_location() {
  _has_bits_[0] |= 0x00000008u;
  return player_location_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TournamentPlayer::release_player_location() {
  // @@protoc_insertion_point(field_release:TournamentPlayer.player_location)
  if (!_internal_has_player_location()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return player_location_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TournamentPlayer::set_allocated_player_location(std::string* player_location) {
  if (player_location != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  player_location_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), player_location,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:TournamentPlayer.player_location)
}

// optional string player_desc = 7;
inline bool TournamentPlayer::_internal_has_player_desc() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TournamentPlayer::has_player_desc() const {
  return _internal_has_player_desc();
}
inline void TournamentPlayer::clear_player_desc() {
  player_desc_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& TournamentPlayer::player_desc() const {
  // @@protoc_insertion_point(field_get:TournamentPlayer.player_desc)
  return _internal_player_desc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TournamentPlayer::set_player_desc(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000010u;
 player_desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TournamentPlayer.player_desc)
}
inline std::string* TournamentPlayer::mutable_player_desc() {
  std::string* _s = _internal_mutable_player_desc();
  // @@protoc_insertion_point(field_mutable:TournamentPlayer.player_desc)
  return _s;
}
inline const std::string& TournamentPlayer::_internal_player_desc() const {
  return player_desc_.Get();
}
inline void TournamentPlayer::_internal_set_player_desc(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  player_desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TournamentPlayer::_internal_mutable_player_desc() {
  _has_bits_[0] |= 0x00000010u;
  return player_desc_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TournamentPlayer::release_player_desc() {
  // @@protoc_insertion_point(field_release:TournamentPlayer.player_desc)
  if (!_internal_has_player_desc()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return player_desc_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TournamentPlayer::set_allocated_player_desc(std::string* player_desc) {
  if (player_desc != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  player_desc_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), player_desc,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:TournamentPlayer.player_desc)
}

// -------------------------------------------------------------------

// TournamentTeam

// optional int32 team_id = 1;
inline bool TournamentTeam::_internal_has_team_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TournamentTeam::has_team_id() const {
  return _internal_has_team_id();
}
inline void TournamentTeam::clear_team_id() {
  team_id_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TournamentTeam::_internal_team_id() const {
  return team_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TournamentTeam::team_id() const {
  // @@protoc_insertion_point(field_get:TournamentTeam.team_id)
  return _internal_team_id();
}
inline void TournamentTeam::_internal_set_team_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  team_id_ = value;
}
inline void TournamentTeam::set_team_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_team_id(value);
  // @@protoc_insertion_point(field_set:TournamentTeam.team_id)
}

// optional string team_tag = 2;
inline bool TournamentTeam::_internal_has_team_tag() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TournamentTeam::has_team_tag() const {
  return _internal_has_team_tag();
}
inline void TournamentTeam::clear_team_tag() {
  team_tag_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TournamentTeam::team_tag() const {
  // @@protoc_insertion_point(field_get:TournamentTeam.team_tag)
  return _internal_team_tag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TournamentTeam::set_team_tag(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 team_tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TournamentTeam.team_tag)
}
inline std::string* TournamentTeam::mutable_team_tag() {
  std::string* _s = _internal_mutable_team_tag();
  // @@protoc_insertion_point(field_mutable:TournamentTeam.team_tag)
  return _s;
}
inline const std::string& TournamentTeam::_internal_team_tag() const {
  return team_tag_.Get();
}
inline void TournamentTeam::_internal_set_team_tag(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  team_tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TournamentTeam::_internal_mutable_team_tag() {
  _has_bits_[0] |= 0x00000001u;
  return team_tag_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TournamentTeam::release_team_tag() {
  // @@protoc_insertion_point(field_release:TournamentTeam.team_tag)
  if (!_internal_has_team_tag()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return team_tag_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TournamentTeam::set_allocated_team_tag(std::string* team_tag) {
  if (team_tag != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  team_tag_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), team_tag,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:TournamentTeam.team_tag)
}

// optional string team_flag = 3;
inline bool TournamentTeam::_internal_has_team_flag() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TournamentTeam::has_team_flag() const {
  return _internal_has_team_flag();
}
inline void TournamentTeam::clear_team_flag() {
  team_flag_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TournamentTeam::team_flag() const {
  // @@protoc_insertion_point(field_get:TournamentTeam.team_flag)
  return _internal_team_flag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TournamentTeam::set_team_flag(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 team_flag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TournamentTeam.team_flag)
}
inline std::string* TournamentTeam::mutable_team_flag() {
  std::string* _s = _internal_mutable_team_flag();
  // @@protoc_insertion_point(field_mutable:TournamentTeam.team_flag)
  return _s;
}
inline const std::string& TournamentTeam::_internal_team_flag() const {
  return team_flag_.Get();
}
inline void TournamentTeam::_internal_set_team_flag(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  team_flag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TournamentTeam::_internal_mutable_team_flag() {
  _has_bits_[0] |= 0x00000002u;
  return team_flag_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TournamentTeam::release_team_flag() {
  // @@protoc_insertion_point(field_release:TournamentTeam.team_flag)
  if (!_internal_has_team_flag()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return team_flag_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TournamentTeam::set_allocated_team_flag(std::string* team_flag) {
  if (team_flag != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  team_flag_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), team_flag,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:TournamentTeam.team_flag)
}

// optional string team_name = 4;
inline bool TournamentTeam::_internal_has_team_name() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TournamentTeam::has_team_name() const {
  return _internal_has_team_name();
}
inline void TournamentTeam::clear_team_name() {
  team_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& TournamentTeam::team_name() const {
  // @@protoc_insertion_point(field_get:TournamentTeam.team_name)
  return _internal_team_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TournamentTeam::set_team_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 team_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TournamentTeam.team_name)
}
inline std::string* TournamentTeam::mutable_team_name() {
  std::string* _s = _internal_mutable_team_name();
  // @@protoc_insertion_point(field_mutable:TournamentTeam.team_name)
  return _s;
}
inline const std::string& TournamentTeam::_internal_team_name() const {
  return team_name_.Get();
}
inline void TournamentTeam::_internal_set_team_name(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  team_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TournamentTeam::_internal_mutable_team_name() {
  _has_bits_[0] |= 0x00000004u;
  return team_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TournamentTeam::release_team_name() {
  // @@protoc_insertion_point(field_release:TournamentTeam.team_name)
  if (!_internal_has_team_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return team_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TournamentTeam::set_allocated_team_name(std::string* team_name) {
  if (team_name != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  team_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), team_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:TournamentTeam.team_name)
}

// repeated .TournamentPlayer players = 5;
inline int TournamentTeam::_internal_players_size() const {
  return players_.size();
}
inline int TournamentTeam::players_size() const {
  return _internal_players_size();
}
inline void TournamentTeam::clear_players() {
  players_.Clear();
}
inline ::TournamentPlayer* TournamentTeam::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:TournamentTeam.players)
  return players_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TournamentPlayer >*
TournamentTeam::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:TournamentTeam.players)
  return &players_;
}
inline const ::TournamentPlayer& TournamentTeam::_internal_players(int index) const {
  return players_.Get(index);
}
inline const ::TournamentPlayer& TournamentTeam::players(int index) const {
  // @@protoc_insertion_point(field_get:TournamentTeam.players)
  return _internal_players(index);
}
inline ::TournamentPlayer* TournamentTeam::_internal_add_players() {
  return players_.Add();
}
inline ::TournamentPlayer* TournamentTeam::add_players() {
  ::TournamentPlayer* _add = _internal_add_players();
  // @@protoc_insertion_point(field_add:TournamentTeam.players)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TournamentPlayer >&
TournamentTeam::players() const {
  // @@protoc_insertion_point(field_list:TournamentTeam.players)
  return players_;
}

// -------------------------------------------------------------------

// TournamentEvent

// optional int32 event_id = 1;
inline bool TournamentEvent::_internal_has_event_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TournamentEvent::has_event_id() const {
  return _internal_has_event_id();
}
inline void TournamentEvent::clear_event_id() {
  event_id_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TournamentEvent::_internal_event_id() const {
  return event_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TournamentEvent::event_id() const {
  // @@protoc_insertion_point(field_get:TournamentEvent.event_id)
  return _internal_event_id();
}
inline void TournamentEvent::_internal_set_event_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  event_id_ = value;
}
inline void TournamentEvent::set_event_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_event_id(value);
  // @@protoc_insertion_point(field_set:TournamentEvent.event_id)
}

// optional string event_tag = 2;
inline bool TournamentEvent::_internal_has_event_tag() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TournamentEvent::has_event_tag() const {
  return _internal_has_event_tag();
}
inline void TournamentEvent::clear_event_tag() {
  event_tag_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TournamentEvent::event_tag() const {
  // @@protoc_insertion_point(field_get:TournamentEvent.event_tag)
  return _internal_event_tag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TournamentEvent::set_event_tag(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 event_tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TournamentEvent.event_tag)
}
inline std::string* TournamentEvent::mutable_event_tag() {
  std::string* _s = _internal_mutable_event_tag();
  // @@protoc_insertion_point(field_mutable:TournamentEvent.event_tag)
  return _s;
}
inline const std::string& TournamentEvent::_internal_event_tag() const {
  return event_tag_.Get();
}
inline void TournamentEvent::_internal_set_event_tag(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  event_tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TournamentEvent::_internal_mutable_event_tag() {
  _has_bits_[0] |= 0x00000001u;
  return event_tag_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TournamentEvent::release_event_tag() {
  // @@protoc_insertion_point(field_release:TournamentEvent.event_tag)
  if (!_internal_has_event_tag()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return event_tag_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TournamentEvent::set_allocated_event_tag(std::string* event_tag) {
  if (event_tag != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  event_tag_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), event_tag,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:TournamentEvent.event_tag)
}

// optional string event_name = 3;
inline bool TournamentEvent::_internal_has_event_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TournamentEvent::has_event_name() const {
  return _internal_has_event_name();
}
inline void TournamentEvent::clear_event_name() {
  event_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TournamentEvent::event_name() const {
  // @@protoc_insertion_point(field_get:TournamentEvent.event_name)
  return _internal_event_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TournamentEvent::set_event_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 event_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TournamentEvent.event_name)
}
inline std::string* TournamentEvent::mutable_event_name() {
  std::string* _s = _internal_mutable_event_name();
  // @@protoc_insertion_point(field_mutable:TournamentEvent.event_name)
  return _s;
}
inline const std::string& TournamentEvent::_internal_event_name() const {
  return event_name_.Get();
}
inline void TournamentEvent::_internal_set_event_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  event_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TournamentEvent::_internal_mutable_event_name() {
  _has_bits_[0] |= 0x00000002u;
  return event_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TournamentEvent::release_event_name() {
  // @@protoc_insertion_point(field_release:TournamentEvent.event_name)
  if (!_internal_has_event_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return event_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TournamentEvent::set_allocated_event_name(std::string* event_name) {
  if (event_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  event_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), event_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:TournamentEvent.event_name)
}

// optional uint32 event_time_start = 4;
inline bool TournamentEvent::_internal_has_event_time_start() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TournamentEvent::has_event_time_start() const {
  return _internal_has_event_time_start();
}
inline void TournamentEvent::clear_event_time_start() {
  event_time_start_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TournamentEvent::_internal_event_time_start() const {
  return event_time_start_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TournamentEvent::event_time_start() const {
  // @@protoc_insertion_point(field_get:TournamentEvent.event_time_start)
  return _internal_event_time_start();
}
inline void TournamentEvent::_internal_set_event_time_start(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  event_time_start_ = value;
}
inline void TournamentEvent::set_event_time_start(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_event_time_start(value);
  // @@protoc_insertion_point(field_set:TournamentEvent.event_time_start)
}

// optional uint32 event_time_end = 5;
inline bool TournamentEvent::_internal_has_event_time_end() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool TournamentEvent::has_event_time_end() const {
  return _internal_has_event_time_end();
}
inline void TournamentEvent::clear_event_time_end() {
  event_time_end_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TournamentEvent::_internal_event_time_end() const {
  return event_time_end_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TournamentEvent::event_time_end() const {
  // @@protoc_insertion_point(field_get:TournamentEvent.event_time_end)
  return _internal_event_time_end();
}
inline void TournamentEvent::_internal_set_event_time_end(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  event_time_end_ = value;
}
inline void TournamentEvent::set_event_time_end(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_event_time_end(value);
  // @@protoc_insertion_point(field_set:TournamentEvent.event_time_end)
}

// optional int32 event_public = 6;
inline bool TournamentEvent::_internal_has_event_public() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool TournamentEvent::has_event_public() const {
  return _internal_has_event_public();
}
inline void TournamentEvent::clear_event_public() {
  event_public_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TournamentEvent::_internal_event_public() const {
  return event_public_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TournamentEvent::event_public() const {
  // @@protoc_insertion_point(field_get:TournamentEvent.event_public)
  return _internal_event_public();
}
inline void TournamentEvent::_internal_set_event_public(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  event_public_ = value;
}
inline void TournamentEvent::set_event_public(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_event_public(value);
  // @@protoc_insertion_point(field_set:TournamentEvent.event_public)
}

// optional int32 event_stage_id = 7;
inline bool TournamentEvent::_internal_has_event_stage_id() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool TournamentEvent::has_event_stage_id() const {
  return _internal_has_event_stage_id();
}
inline void TournamentEvent::clear_event_stage_id() {
  event_stage_id_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TournamentEvent::_internal_event_stage_id() const {
  return event_stage_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TournamentEvent::event_stage_id() const {
  // @@protoc_insertion_point(field_get:TournamentEvent.event_stage_id)
  return _internal_event_stage_id();
}
inline void TournamentEvent::_internal_set_event_stage_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  event_stage_id_ = value;
}
inline void TournamentEvent::set_event_stage_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_event_stage_id(value);
  // @@protoc_insertion_point(field_set:TournamentEvent.event_stage_id)
}

// optional string event_stage_name = 8;
inline bool TournamentEvent::_internal_has_event_stage_name() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TournamentEvent::has_event_stage_name() const {
  return _internal_has_event_stage_name();
}
inline void TournamentEvent::clear_event_stage_name() {
  event_stage_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& TournamentEvent::event_stage_name() const {
  // @@protoc_insertion_point(field_get:TournamentEvent.event_stage_name)
  return _internal_event_stage_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TournamentEvent::set_event_stage_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 event_stage_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TournamentEvent.event_stage_name)
}
inline std::string* TournamentEvent::mutable_event_stage_name() {
  std::string* _s = _internal_mutable_event_stage_name();
  // @@protoc_insertion_point(field_mutable:TournamentEvent.event_stage_name)
  return _s;
}
inline const std::string& TournamentEvent::_internal_event_stage_name() const {
  return event_stage_name_.Get();
}
inline void TournamentEvent::_internal_set_event_stage_name(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  event_stage_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TournamentEvent::_internal_mutable_event_stage_name() {
  _has_bits_[0] |= 0x00000004u;
  return event_stage_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TournamentEvent::release_event_stage_name() {
  // @@protoc_insertion_point(field_release:TournamentEvent.event_stage_name)
  if (!_internal_has_event_stage_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return event_stage_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TournamentEvent::set_allocated_event_stage_name(std::string* event_stage_name) {
  if (event_stage_name != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  event_stage_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), event_stage_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:TournamentEvent.event_stage_name)
}

// optional uint32 active_section_id = 9;
inline bool TournamentEvent::_internal_has_active_section_id() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool TournamentEvent::has_active_section_id() const {
  return _internal_has_active_section_id();
}
inline void TournamentEvent::clear_active_section_id() {
  active_section_id_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TournamentEvent::_internal_active_section_id() const {
  return active_section_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TournamentEvent::active_section_id() const {
  // @@protoc_insertion_point(field_get:TournamentEvent.active_section_id)
  return _internal_active_section_id();
}
inline void TournamentEvent::_internal_set_active_section_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  active_section_id_ = value;
}
inline void TournamentEvent::set_active_section_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_active_section_id(value);
  // @@protoc_insertion_point(field_set:TournamentEvent.active_section_id)
}

// -------------------------------------------------------------------

// GlobalStatistics

// optional uint32 players_online = 1;
inline bool GlobalStatistics::_internal_has_players_online() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GlobalStatistics::has_players_online() const {
  return _internal_has_players_online();
}
inline void GlobalStatistics::clear_players_online() {
  players_online_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GlobalStatistics::_internal_players_online() const {
  return players_online_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GlobalStatistics::players_online() const {
  // @@protoc_insertion_point(field_get:GlobalStatistics.players_online)
  return _internal_players_online();
}
inline void GlobalStatistics::_internal_set_players_online(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  players_online_ = value;
}
inline void GlobalStatistics::set_players_online(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_players_online(value);
  // @@protoc_insertion_point(field_set:GlobalStatistics.players_online)
}

// optional uint32 servers_online = 2;
inline bool GlobalStatistics::_internal_has_servers_online() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GlobalStatistics::has_servers_online() const {
  return _internal_has_servers_online();
}
inline void GlobalStatistics::clear_servers_online() {
  servers_online_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GlobalStatistics::_internal_servers_online() const {
  return servers_online_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GlobalStatistics::servers_online() const {
  // @@protoc_insertion_point(field_get:GlobalStatistics.servers_online)
  return _internal_servers_online();
}
inline void GlobalStatistics::_internal_set_servers_online(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  servers_online_ = value;
}
inline void GlobalStatistics::set_servers_online(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_servers_online(value);
  // @@protoc_insertion_point(field_set:GlobalStatistics.servers_online)
}

// optional uint32 players_searching = 3;
inline bool GlobalStatistics::_internal_has_players_searching() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool GlobalStatistics::has_players_searching() const {
  return _internal_has_players_searching();
}
inline void GlobalStatistics::clear_players_searching() {
  players_searching_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GlobalStatistics::_internal_players_searching() const {
  return players_searching_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GlobalStatistics::players_searching() const {
  // @@protoc_insertion_point(field_get:GlobalStatistics.players_searching)
  return _internal_players_searching();
}
inline void GlobalStatistics::_internal_set_players_searching(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  players_searching_ = value;
}
inline void GlobalStatistics::set_players_searching(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_players_searching(value);
  // @@protoc_insertion_point(field_set:GlobalStatistics.players_searching)
}

// optional uint32 servers_available = 4;
inline bool GlobalStatistics::_internal_has_servers_available() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool GlobalStatistics::has_servers_available() const {
  return _internal_has_servers_available();
}
inline void GlobalStatistics::clear_servers_available() {
  servers_available_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GlobalStatistics::_internal_servers_available() const {
  return servers_available_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GlobalStatistics::servers_available() const {
  // @@protoc_insertion_point(field_get:GlobalStatistics.servers_available)
  return _internal_servers_available();
}
inline void GlobalStatistics::_internal_set_servers_available(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  servers_available_ = value;
}
inline void GlobalStatistics::set_servers_available(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_servers_available(value);
  // @@protoc_insertion_point(field_set:GlobalStatistics.servers_available)
}

// optional uint32 ongoing_matches = 5;
inline bool GlobalStatistics::_internal_has_ongoing_matches() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool GlobalStatistics::has_ongoing_matches() const {
  return _internal_has_ongoing_matches();
}
inline void GlobalStatistics::clear_ongoing_matches() {
  ongoing_matches_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GlobalStatistics::_internal_ongoing_matches() const {
  return ongoing_matches_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GlobalStatistics::ongoing_matches() const {
  // @@protoc_insertion_point(field_get:GlobalStatistics.ongoing_matches)
  return _internal_ongoing_matches();
}
inline void GlobalStatistics::_internal_set_ongoing_matches(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  ongoing_matches_ = value;
}
inline void GlobalStatistics::set_ongoing_matches(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ongoing_matches(value);
  // @@protoc_insertion_point(field_set:GlobalStatistics.ongoing_matches)
}

// optional uint32 search_time_avg = 6;
inline bool GlobalStatistics::_internal_has_search_time_avg() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool GlobalStatistics::has_search_time_avg() const {
  return _internal_has_search_time_avg();
}
inline void GlobalStatistics::clear_search_time_avg() {
  search_time_avg_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GlobalStatistics::_internal_search_time_avg() const {
  return search_time_avg_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GlobalStatistics::search_time_avg() const {
  // @@protoc_insertion_point(field_get:GlobalStatistics.search_time_avg)
  return _internal_search_time_avg();
}
inline void GlobalStatistics::_internal_set_search_time_avg(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  search_time_avg_ = value;
}
inline void GlobalStatistics::set_search_time_avg(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_search_time_avg(value);
  // @@protoc_insertion_point(field_set:GlobalStatistics.search_time_avg)
}

// repeated .DetailedSearchStatistic search_statistics = 7;
inline int GlobalStatistics::_internal_search_statistics_size() const {
  return search_statistics_.size();
}
inline int GlobalStatistics::search_statistics_size() const {
  return _internal_search_statistics_size();
}
inline void GlobalStatistics::clear_search_statistics() {
  search_statistics_.Clear();
}
inline ::DetailedSearchStatistic* GlobalStatistics::mutable_search_statistics(int index) {
  // @@protoc_insertion_point(field_mutable:GlobalStatistics.search_statistics)
  return search_statistics_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DetailedSearchStatistic >*
GlobalStatistics::mutable_search_statistics() {
  // @@protoc_insertion_point(field_mutable_list:GlobalStatistics.search_statistics)
  return &search_statistics_;
}
inline const ::DetailedSearchStatistic& GlobalStatistics::_internal_search_statistics(int index) const {
  return search_statistics_.Get(index);
}
inline const ::DetailedSearchStatistic& GlobalStatistics::search_statistics(int index) const {
  // @@protoc_insertion_point(field_get:GlobalStatistics.search_statistics)
  return _internal_search_statistics(index);
}
inline ::DetailedSearchStatistic* GlobalStatistics::_internal_add_search_statistics() {
  return search_statistics_.Add();
}
inline ::DetailedSearchStatistic* GlobalStatistics::add_search_statistics() {
  ::DetailedSearchStatistic* _add = _internal_add_search_statistics();
  // @@protoc_insertion_point(field_add:GlobalStatistics.search_statistics)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DetailedSearchStatistic >&
GlobalStatistics::search_statistics() const {
  // @@protoc_insertion_point(field_list:GlobalStatistics.search_statistics)
  return search_statistics_;
}

// optional string main_post_url = 8;
inline bool GlobalStatistics::_internal_has_main_post_url() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GlobalStatistics::has_main_post_url() const {
  return _internal_has_main_post_url();
}
inline void GlobalStatistics::clear_main_post_url() {
  main_post_url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GlobalStatistics::main_post_url() const {
  // @@protoc_insertion_point(field_get:GlobalStatistics.main_post_url)
  return _internal_main_post_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GlobalStatistics::set_main_post_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 main_post_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:GlobalStatistics.main_post_url)
}
inline std::string* GlobalStatistics::mutable_main_post_url() {
  std::string* _s = _internal_mutable_main_post_url();
  // @@protoc_insertion_point(field_mutable:GlobalStatistics.main_post_url)
  return _s;
}
inline const std::string& GlobalStatistics::_internal_main_post_url() const {
  return main_post_url_.Get();
}
inline void GlobalStatistics::_internal_set_main_post_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  main_post_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GlobalStatistics::_internal_mutable_main_post_url() {
  _has_bits_[0] |= 0x00000001u;
  return main_post_url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GlobalStatistics::release_main_post_url() {
  // @@protoc_insertion_point(field_release:GlobalStatistics.main_post_url)
  if (!_internal_has_main_post_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return main_post_url_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GlobalStatistics::set_allocated_main_post_url(std::string* main_post_url) {
  if (main_post_url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  main_post_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), main_post_url,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:GlobalStatistics.main_post_url)
}

// optional uint32 required_appid_version = 9;
inline bool GlobalStatistics::_internal_has_required_appid_version() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool GlobalStatistics::has_required_appid_version() const {
  return _internal_has_required_appid_version();
}
inline void GlobalStatistics::clear_required_appid_version() {
  required_appid_version_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GlobalStatistics::_internal_required_appid_version() const {
  return required_appid_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GlobalStatistics::required_appid_version() const {
  // @@protoc_insertion_point(field_get:GlobalStatistics.required_appid_version)
  return _internal_required_appid_version();
}
inline void GlobalStatistics::_internal_set_required_appid_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  required_appid_version_ = value;
}
inline void GlobalStatistics::set_required_appid_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_required_appid_version(value);
  // @@protoc_insertion_point(field_set:GlobalStatistics.required_appid_version)
}

// optional uint32 pricesheet_version = 10;
inline bool GlobalStatistics::_internal_has_pricesheet_version() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool GlobalStatistics::has_pricesheet_version() const {
  return _internal_has_pricesheet_version();
}
inline void GlobalStatistics::clear_pricesheet_version() {
  pricesheet_version_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GlobalStatistics::_internal_pricesheet_version() const {
  return pricesheet_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GlobalStatistics::pricesheet_version() const {
  // @@protoc_insertion_point(field_get:GlobalStatistics.pricesheet_version)
  return _internal_pricesheet_version();
}
inline void GlobalStatistics::_internal_set_pricesheet_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  pricesheet_version_ = value;
}
inline void GlobalStatistics::set_pricesheet_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pricesheet_version(value);
  // @@protoc_insertion_point(field_set:GlobalStatistics.pricesheet_version)
}

// optional uint32 twitch_streams_version = 11;
inline bool GlobalStatistics::_internal_has_twitch_streams_version() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool GlobalStatistics::has_twitch_streams_version() const {
  return _internal_has_twitch_streams_version();
}
inline void GlobalStatistics::clear_twitch_streams_version() {
  twitch_streams_version_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GlobalStatistics::_internal_twitch_streams_version() const {
  return twitch_streams_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GlobalStatistics::twitch_streams_version() const {
  // @@protoc_insertion_point(field_get:GlobalStatistics.twitch_streams_version)
  return _internal_twitch_streams_version();
}
inline void GlobalStatistics::_internal_set_twitch_streams_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  twitch_streams_version_ = value;
}
inline void GlobalStatistics::set_twitch_streams_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_twitch_streams_version(value);
  // @@protoc_insertion_point(field_set:GlobalStatistics.twitch_streams_version)
}

// optional uint32 active_tournament_eventid = 12;
inline bool GlobalStatistics::_internal_has_active_tournament_eventid() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool GlobalStatistics::has_active_tournament_eventid() const {
  return _internal_has_active_tournament_eventid();
}
inline void GlobalStatistics::clear_active_tournament_eventid() {
  active_tournament_eventid_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GlobalStatistics::_internal_active_tournament_eventid() const {
  return active_tournament_eventid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GlobalStatistics::active_tournament_eventid() const {
  // @@protoc_insertion_point(field_get:GlobalStatistics.active_tournament_eventid)
  return _internal_active_tournament_eventid();
}
inline void GlobalStatistics::_internal_set_active_tournament_eventid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  active_tournament_eventid_ = value;
}
inline void GlobalStatistics::set_active_tournament_eventid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_active_tournament_eventid(value);
  // @@protoc_insertion_point(field_set:GlobalStatistics.active_tournament_eventid)
}

// optional uint32 active_survey_id = 13;
inline bool GlobalStatistics::_internal_has_active_survey_id() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool GlobalStatistics::has_active_survey_id() const {
  return _internal_has_active_survey_id();
}
inline void GlobalStatistics::clear_active_survey_id() {
  active_survey_id_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GlobalStatistics::_internal_active_survey_id() const {
  return active_survey_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GlobalStatistics::active_survey_id() const {
  // @@protoc_insertion_point(field_get:GlobalStatistics.active_survey_id)
  return _internal_active_survey_id();
}
inline void GlobalStatistics::_internal_set_active_survey_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  active_survey_id_ = value;
}
inline void GlobalStatistics::set_active_survey_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_active_survey_id(value);
  // @@protoc_insertion_point(field_set:GlobalStatistics.active_survey_id)
}

// -------------------------------------------------------------------

// OperationalStatisticDescription

// optional string name = 1;
inline bool OperationalStatisticDescription::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool OperationalStatisticDescription::has_name() const {
  return _internal_has_name();
}
inline void OperationalStatisticDescription::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& OperationalStatisticDescription::name() const {
  // @@protoc_insertion_point(field_get:OperationalStatisticDescription.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OperationalStatisticDescription::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:OperationalStatisticDescription.name)
}
inline std::string* OperationalStatisticDescription::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:OperationalStatisticDescription.name)
  return _s;
}
inline const std::string& OperationalStatisticDescription::_internal_name() const {
  return name_.Get();
}
inline void OperationalStatisticDescription::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OperationalStatisticDescription::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OperationalStatisticDescription::release_name() {
  // @@protoc_insertion_point(field_release:OperationalStatisticDescription.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OperationalStatisticDescription::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:OperationalStatisticDescription.name)
}

// optional uint32 idkey = 2;
inline bool OperationalStatisticDescription::_internal_has_idkey() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool OperationalStatisticDescription::has_idkey() const {
  return _internal_has_idkey();
}
inline void OperationalStatisticDescription::clear_idkey() {
  idkey_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OperationalStatisticDescription::_internal_idkey() const {
  return idkey_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OperationalStatisticDescription::idkey() const {
  // @@protoc_insertion_point(field_get:OperationalStatisticDescription.idkey)
  return _internal_idkey();
}
inline void OperationalStatisticDescription::_internal_set_idkey(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  idkey_ = value;
}
inline void OperationalStatisticDescription::set_idkey(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_idkey(value);
  // @@protoc_insertion_point(field_set:OperationalStatisticDescription.idkey)
}

// -------------------------------------------------------------------

// OperationalStatisticElement

// optional uint32 idkey = 1;
inline bool OperationalStatisticElement::_internal_has_idkey() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool OperationalStatisticElement::has_idkey() const {
  return _internal_has_idkey();
}
inline void OperationalStatisticElement::clear_idkey() {
  idkey_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OperationalStatisticElement::_internal_idkey() const {
  return idkey_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OperationalStatisticElement::idkey() const {
  // @@protoc_insertion_point(field_get:OperationalStatisticElement.idkey)
  return _internal_idkey();
}
inline void OperationalStatisticElement::_internal_set_idkey(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  idkey_ = value;
}
inline void OperationalStatisticElement::set_idkey(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_idkey(value);
  // @@protoc_insertion_point(field_set:OperationalStatisticElement.idkey)
}

// repeated int32 values = 2;
inline int OperationalStatisticElement::_internal_values_size() const {
  return values_.size();
}
inline int OperationalStatisticElement::values_size() const {
  return _internal_values_size();
}
inline void OperationalStatisticElement::clear_values() {
  values_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OperationalStatisticElement::_internal_values(int index) const {
  return values_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OperationalStatisticElement::values(int index) const {
  // @@protoc_insertion_point(field_get:OperationalStatisticElement.values)
  return _internal_values(index);
}
inline void OperationalStatisticElement::set_values(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:OperationalStatisticElement.values)
}
inline void OperationalStatisticElement::_internal_add_values(::PROTOBUF_NAMESPACE_ID::int32 value) {
  values_.Add(value);
}
inline void OperationalStatisticElement::add_values(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_values(value);
  // @@protoc_insertion_point(field_add:OperationalStatisticElement.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
OperationalStatisticElement::_internal_values() const {
  return values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
OperationalStatisticElement::values() const {
  // @@protoc_insertion_point(field_list:OperationalStatisticElement.values)
  return _internal_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
OperationalStatisticElement::_internal_mutable_values() {
  return &values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
OperationalStatisticElement::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:OperationalStatisticElement.values)
  return _internal_mutable_values();
}

// -------------------------------------------------------------------

// OperationalStatisticsPacket

// optional int32 packetid = 1;
inline bool OperationalStatisticsPacket::_internal_has_packetid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool OperationalStatisticsPacket::has_packetid() const {
  return _internal_has_packetid();
}
inline void OperationalStatisticsPacket::clear_packetid() {
  packetid_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OperationalStatisticsPacket::_internal_packetid() const {
  return packetid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OperationalStatisticsPacket::packetid() const {
  // @@protoc_insertion_point(field_get:OperationalStatisticsPacket.packetid)
  return _internal_packetid();
}
inline void OperationalStatisticsPacket::_internal_set_packetid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  packetid_ = value;
}
inline void OperationalStatisticsPacket::set_packetid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_packetid(value);
  // @@protoc_insertion_point(field_set:OperationalStatisticsPacket.packetid)
}

// optional int32 mstimestamp = 2;
inline bool OperationalStatisticsPacket::_internal_has_mstimestamp() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool OperationalStatisticsPacket::has_mstimestamp() const {
  return _internal_has_mstimestamp();
}
inline void OperationalStatisticsPacket::clear_mstimestamp() {
  mstimestamp_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OperationalStatisticsPacket::_internal_mstimestamp() const {
  return mstimestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OperationalStatisticsPacket::mstimestamp() const {
  // @@protoc_insertion_point(field_get:OperationalStatisticsPacket.mstimestamp)
  return _internal_mstimestamp();
}
inline void OperationalStatisticsPacket::_internal_set_mstimestamp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  mstimestamp_ = value;
}
inline void OperationalStatisticsPacket::set_mstimestamp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mstimestamp(value);
  // @@protoc_insertion_point(field_set:OperationalStatisticsPacket.mstimestamp)
}

// repeated .OperationalStatisticElement values = 3;
inline int OperationalStatisticsPacket::_internal_values_size() const {
  return values_.size();
}
inline int OperationalStatisticsPacket::values_size() const {
  return _internal_values_size();
}
inline void OperationalStatisticsPacket::clear_values() {
  values_.Clear();
}
inline ::OperationalStatisticElement* OperationalStatisticsPacket::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:OperationalStatisticsPacket.values)
  return values_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OperationalStatisticElement >*
OperationalStatisticsPacket::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:OperationalStatisticsPacket.values)
  return &values_;
}
inline const ::OperationalStatisticElement& OperationalStatisticsPacket::_internal_values(int index) const {
  return values_.Get(index);
}
inline const ::OperationalStatisticElement& OperationalStatisticsPacket::values(int index) const {
  // @@protoc_insertion_point(field_get:OperationalStatisticsPacket.values)
  return _internal_values(index);
}
inline ::OperationalStatisticElement* OperationalStatisticsPacket::_internal_add_values() {
  return values_.Add();
}
inline ::OperationalStatisticElement* OperationalStatisticsPacket::add_values() {
  ::OperationalStatisticElement* _add = _internal_add_values();
  // @@protoc_insertion_point(field_add:OperationalStatisticsPacket.values)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OperationalStatisticElement >&
OperationalStatisticsPacket::values() const {
  // @@protoc_insertion_point(field_list:OperationalStatisticsPacket.values)
  return values_;
}

// -------------------------------------------------------------------

// PlayerRankingInfo

// optional uint32 account_id = 1;
inline bool PlayerRankingInfo::_internal_has_account_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PlayerRankingInfo::has_account_id() const {
  return _internal_has_account_id();
}
inline void PlayerRankingInfo::clear_account_id() {
  account_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PlayerRankingInfo::_internal_account_id() const {
  return account_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PlayerRankingInfo::account_id() const {
  // @@protoc_insertion_point(field_get:PlayerRankingInfo.account_id)
  return _internal_account_id();
}
inline void PlayerRankingInfo::_internal_set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  account_id_ = value;
}
inline void PlayerRankingInfo::set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:PlayerRankingInfo.account_id)
}

// optional uint32 rank_id = 2;
inline bool PlayerRankingInfo::_internal_has_rank_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PlayerRankingInfo::has_rank_id() const {
  return _internal_has_rank_id();
}
inline void PlayerRankingInfo::clear_rank_id() {
  rank_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PlayerRankingInfo::_internal_rank_id() const {
  return rank_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PlayerRankingInfo::rank_id() const {
  // @@protoc_insertion_point(field_get:PlayerRankingInfo.rank_id)
  return _internal_rank_id();
}
inline void PlayerRankingInfo::_internal_set_rank_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  rank_id_ = value;
}
inline void PlayerRankingInfo::set_rank_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rank_id(value);
  // @@protoc_insertion_point(field_set:PlayerRankingInfo.rank_id)
}

// optional uint32 wins = 3;
inline bool PlayerRankingInfo::_internal_has_wins() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PlayerRankingInfo::has_wins() const {
  return _internal_has_wins();
}
inline void PlayerRankingInfo::clear_wins() {
  wins_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PlayerRankingInfo::_internal_wins() const {
  return wins_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PlayerRankingInfo::wins() const {
  // @@protoc_insertion_point(field_get:PlayerRankingInfo.wins)
  return _internal_wins();
}
inline void PlayerRankingInfo::_internal_set_wins(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  wins_ = value;
}
inline void PlayerRankingInfo::set_wins(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_wins(value);
  // @@protoc_insertion_point(field_set:PlayerRankingInfo.wins)
}

// optional float rank_change = 4;
inline bool PlayerRankingInfo::_internal_has_rank_change() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PlayerRankingInfo::has_rank_change() const {
  return _internal_has_rank_change();
}
inline void PlayerRankingInfo::clear_rank_change() {
  rank_change_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float PlayerRankingInfo::_internal_rank_change() const {
  return rank_change_;
}
inline float PlayerRankingInfo::rank_change() const {
  // @@protoc_insertion_point(field_get:PlayerRankingInfo.rank_change)
  return _internal_rank_change();
}
inline void PlayerRankingInfo::_internal_set_rank_change(float value) {
  _has_bits_[0] |= 0x00000008u;
  rank_change_ = value;
}
inline void PlayerRankingInfo::set_rank_change(float value) {
  _internal_set_rank_change(value);
  // @@protoc_insertion_point(field_set:PlayerRankingInfo.rank_change)
}

// -------------------------------------------------------------------

// PlayerCommendationInfo

// optional uint32 cmd_friendly = 1;
inline bool PlayerCommendationInfo::_internal_has_cmd_friendly() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PlayerCommendationInfo::has_cmd_friendly() const {
  return _internal_has_cmd_friendly();
}
inline void PlayerCommendationInfo::clear_cmd_friendly() {
  cmd_friendly_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PlayerCommendationInfo::_internal_cmd_friendly() const {
  return cmd_friendly_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PlayerCommendationInfo::cmd_friendly() const {
  // @@protoc_insertion_point(field_get:PlayerCommendationInfo.cmd_friendly)
  return _internal_cmd_friendly();
}
inline void PlayerCommendationInfo::_internal_set_cmd_friendly(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  cmd_friendly_ = value;
}
inline void PlayerCommendationInfo::set_cmd_friendly(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cmd_friendly(value);
  // @@protoc_insertion_point(field_set:PlayerCommendationInfo.cmd_friendly)
}

// optional uint32 cmd_teaching = 2;
inline bool PlayerCommendationInfo::_internal_has_cmd_teaching() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PlayerCommendationInfo::has_cmd_teaching() const {
  return _internal_has_cmd_teaching();
}
inline void PlayerCommendationInfo::clear_cmd_teaching() {
  cmd_teaching_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PlayerCommendationInfo::_internal_cmd_teaching() const {
  return cmd_teaching_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PlayerCommendationInfo::cmd_teaching() const {
  // @@protoc_insertion_point(field_get:PlayerCommendationInfo.cmd_teaching)
  return _internal_cmd_teaching();
}
inline void PlayerCommendationInfo::_internal_set_cmd_teaching(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  cmd_teaching_ = value;
}
inline void PlayerCommendationInfo::set_cmd_teaching(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cmd_teaching(value);
  // @@protoc_insertion_point(field_set:PlayerCommendationInfo.cmd_teaching)
}

// optional uint32 cmd_leader = 4;
inline bool PlayerCommendationInfo::_internal_has_cmd_leader() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PlayerCommendationInfo::has_cmd_leader() const {
  return _internal_has_cmd_leader();
}
inline void PlayerCommendationInfo::clear_cmd_leader() {
  cmd_leader_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PlayerCommendationInfo::_internal_cmd_leader() const {
  return cmd_leader_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PlayerCommendationInfo::cmd_leader() const {
  // @@protoc_insertion_point(field_get:PlayerCommendationInfo.cmd_leader)
  return _internal_cmd_leader();
}
inline void PlayerCommendationInfo::_internal_set_cmd_leader(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  cmd_leader_ = value;
}
inline void PlayerCommendationInfo::set_cmd_leader(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cmd_leader(value);
  // @@protoc_insertion_point(field_set:PlayerCommendationInfo.cmd_leader)
}

// -------------------------------------------------------------------

// PlayerMedalsInfo

// optional uint32 medal_team = 1;
inline bool PlayerMedalsInfo::_internal_has_medal_team() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PlayerMedalsInfo::has_medal_team() const {
  return _internal_has_medal_team();
}
inline void PlayerMedalsInfo::clear_medal_team() {
  medal_team_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PlayerMedalsInfo::_internal_medal_team() const {
  return medal_team_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PlayerMedalsInfo::medal_team() const {
  // @@protoc_insertion_point(field_get:PlayerMedalsInfo.medal_team)
  return _internal_medal_team();
}
inline void PlayerMedalsInfo::_internal_set_medal_team(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  medal_team_ = value;
}
inline void PlayerMedalsInfo::set_medal_team(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_medal_team(value);
  // @@protoc_insertion_point(field_set:PlayerMedalsInfo.medal_team)
}

// optional uint32 medal_combat = 2;
inline bool PlayerMedalsInfo::_internal_has_medal_combat() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PlayerMedalsInfo::has_medal_combat() const {
  return _internal_has_medal_combat();
}
inline void PlayerMedalsInfo::clear_medal_combat() {
  medal_combat_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PlayerMedalsInfo::_internal_medal_combat() const {
  return medal_combat_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PlayerMedalsInfo::medal_combat() const {
  // @@protoc_insertion_point(field_get:PlayerMedalsInfo.medal_combat)
  return _internal_medal_combat();
}
inline void PlayerMedalsInfo::_internal_set_medal_combat(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  medal_combat_ = value;
}
inline void PlayerMedalsInfo::set_medal_combat(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_medal_combat(value);
  // @@protoc_insertion_point(field_set:PlayerMedalsInfo.medal_combat)
}

// optional uint32 medal_weapon = 3;
inline bool PlayerMedalsInfo::_internal_has_medal_weapon() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PlayerMedalsInfo::has_medal_weapon() const {
  return _internal_has_medal_weapon();
}
inline void PlayerMedalsInfo::clear_medal_weapon() {
  medal_weapon_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PlayerMedalsInfo::_internal_medal_weapon() const {
  return medal_weapon_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PlayerMedalsInfo::medal_weapon() const {
  // @@protoc_insertion_point(field_get:PlayerMedalsInfo.medal_weapon)
  return _internal_medal_weapon();
}
inline void PlayerMedalsInfo::_internal_set_medal_weapon(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  medal_weapon_ = value;
}
inline void PlayerMedalsInfo::set_medal_weapon(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_medal_weapon(value);
  // @@protoc_insertion_point(field_set:PlayerMedalsInfo.medal_weapon)
}

// optional uint32 medal_global = 4;
inline bool PlayerMedalsInfo::_internal_has_medal_global() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PlayerMedalsInfo::has_medal_global() const {
  return _internal_has_medal_global();
}
inline void PlayerMedalsInfo::clear_medal_global() {
  medal_global_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PlayerMedalsInfo::_internal_medal_global() const {
  return medal_global_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PlayerMedalsInfo::medal_global() const {
  // @@protoc_insertion_point(field_get:PlayerMedalsInfo.medal_global)
  return _internal_medal_global();
}
inline void PlayerMedalsInfo::_internal_set_medal_global(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  medal_global_ = value;
}
inline void PlayerMedalsInfo::set_medal_global(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_medal_global(value);
  // @@protoc_insertion_point(field_set:PlayerMedalsInfo.medal_global)
}

// optional uint32 medal_arms = 5;
inline bool PlayerMedalsInfo::_internal_has_medal_arms() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PlayerMedalsInfo::has_medal_arms() const {
  return _internal_has_medal_arms();
}
inline void PlayerMedalsInfo::clear_medal_arms() {
  medal_arms_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PlayerMedalsInfo::_internal_medal_arms() const {
  return medal_arms_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PlayerMedalsInfo::medal_arms() const {
  // @@protoc_insertion_point(field_get:PlayerMedalsInfo.medal_arms)
  return _internal_medal_arms();
}
inline void PlayerMedalsInfo::_internal_set_medal_arms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  medal_arms_ = value;
}
inline void PlayerMedalsInfo::set_medal_arms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_medal_arms(value);
  // @@protoc_insertion_point(field_set:PlayerMedalsInfo.medal_arms)
}

// repeated uint32 display_items_defidx = 7;
inline int PlayerMedalsInfo::_internal_display_items_defidx_size() const {
  return display_items_defidx_.size();
}
inline int PlayerMedalsInfo::display_items_defidx_size() const {
  return _internal_display_items_defidx_size();
}
inline void PlayerMedalsInfo::clear_display_items_defidx() {
  display_items_defidx_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PlayerMedalsInfo::_internal_display_items_defidx(int index) const {
  return display_items_defidx_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PlayerMedalsInfo::display_items_defidx(int index) const {
  // @@protoc_insertion_point(field_get:PlayerMedalsInfo.display_items_defidx)
  return _internal_display_items_defidx(index);
}
inline void PlayerMedalsInfo::set_display_items_defidx(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  display_items_defidx_.Set(index, value);
  // @@protoc_insertion_point(field_set:PlayerMedalsInfo.display_items_defidx)
}
inline void PlayerMedalsInfo::_internal_add_display_items_defidx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  display_items_defidx_.Add(value);
}
inline void PlayerMedalsInfo::add_display_items_defidx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_display_items_defidx(value);
  // @@protoc_insertion_point(field_add:PlayerMedalsInfo.display_items_defidx)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
PlayerMedalsInfo::_internal_display_items_defidx() const {
  return display_items_defidx_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
PlayerMedalsInfo::display_items_defidx() const {
  // @@protoc_insertion_point(field_list:PlayerMedalsInfo.display_items_defidx)
  return _internal_display_items_defidx();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
PlayerMedalsInfo::_internal_mutable_display_items_defidx() {
  return &display_items_defidx_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
PlayerMedalsInfo::mutable_display_items_defidx() {
  // @@protoc_insertion_point(field_mutable_list:PlayerMedalsInfo.display_items_defidx)
  return _internal_mutable_display_items_defidx();
}

// optional uint32 featured_display_item_defidx = 8;
inline bool PlayerMedalsInfo::_internal_has_featured_display_item_defidx() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool PlayerMedalsInfo::has_featured_display_item_defidx() const {
  return _internal_has_featured_display_item_defidx();
}
inline void PlayerMedalsInfo::clear_featured_display_item_defidx() {
  featured_display_item_defidx_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PlayerMedalsInfo::_internal_featured_display_item_defidx() const {
  return featured_display_item_defidx_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PlayerMedalsInfo::featured_display_item_defidx() const {
  // @@protoc_insertion_point(field_get:PlayerMedalsInfo.featured_display_item_defidx)
  return _internal_featured_display_item_defidx();
}
inline void PlayerMedalsInfo::_internal_set_featured_display_item_defidx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  featured_display_item_defidx_ = value;
}
inline void PlayerMedalsInfo::set_featured_display_item_defidx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_featured_display_item_defidx(value);
  // @@protoc_insertion_point(field_set:PlayerMedalsInfo.featured_display_item_defidx)
}

// -------------------------------------------------------------------

// AccountActivity

// optional uint32 activity = 1;
inline bool AccountActivity::_internal_has_activity() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AccountActivity::has_activity() const {
  return _internal_has_activity();
}
inline void AccountActivity::clear_activity() {
  activity_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AccountActivity::_internal_activity() const {
  return activity_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AccountActivity::activity() const {
  // @@protoc_insertion_point(field_get:AccountActivity.activity)
  return _internal_activity();
}
inline void AccountActivity::_internal_set_activity(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  activity_ = value;
}
inline void AccountActivity::set_activity(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_activity(value);
  // @@protoc_insertion_point(field_set:AccountActivity.activity)
}

// optional uint32 mode = 2;
inline bool AccountActivity::_internal_has_mode() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AccountActivity::has_mode() const {
  return _internal_has_mode();
}
inline void AccountActivity::clear_mode() {
  mode_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AccountActivity::_internal_mode() const {
  return mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AccountActivity::mode() const {
  // @@protoc_insertion_point(field_get:AccountActivity.mode)
  return _internal_mode();
}
inline void AccountActivity::_internal_set_mode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  mode_ = value;
}
inline void AccountActivity::set_mode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:AccountActivity.mode)
}

// optional uint32 map = 3;
inline bool AccountActivity::_internal_has_map() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AccountActivity::has_map() const {
  return _internal_has_map();
}
inline void AccountActivity::clear_map() {
  map_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AccountActivity::_internal_map() const {
  return map_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AccountActivity::map() const {
  // @@protoc_insertion_point(field_get:AccountActivity.map)
  return _internal_map();
}
inline void AccountActivity::_internal_set_map(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  map_ = value;
}
inline void AccountActivity::set_map(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_map(value);
  // @@protoc_insertion_point(field_set:AccountActivity.map)
}

// -------------------------------------------------------------------

// TournamentMatchSetup

// optional int32 event_id = 1;
inline bool TournamentMatchSetup::_internal_has_event_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TournamentMatchSetup::has_event_id() const {
  return _internal_has_event_id();
}
inline void TournamentMatchSetup::clear_event_id() {
  event_id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TournamentMatchSetup::_internal_event_id() const {
  return event_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TournamentMatchSetup::event_id() const {
  // @@protoc_insertion_point(field_get:TournamentMatchSetup.event_id)
  return _internal_event_id();
}
inline void TournamentMatchSetup::_internal_set_event_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  event_id_ = value;
}
inline void TournamentMatchSetup::set_event_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_event_id(value);
  // @@protoc_insertion_point(field_set:TournamentMatchSetup.event_id)
}

// optional int32 team_id_ct = 2;
inline bool TournamentMatchSetup::_internal_has_team_id_ct() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TournamentMatchSetup::has_team_id_ct() const {
  return _internal_has_team_id_ct();
}
inline void TournamentMatchSetup::clear_team_id_ct() {
  team_id_ct_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TournamentMatchSetup::_internal_team_id_ct() const {
  return team_id_ct_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TournamentMatchSetup::team_id_ct() const {
  // @@protoc_insertion_point(field_get:TournamentMatchSetup.team_id_ct)
  return _internal_team_id_ct();
}
inline void TournamentMatchSetup::_internal_set_team_id_ct(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  team_id_ct_ = value;
}
inline void TournamentMatchSetup::set_team_id_ct(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_team_id_ct(value);
  // @@protoc_insertion_point(field_set:TournamentMatchSetup.team_id_ct)
}

// optional int32 team_id_t = 3;
inline bool TournamentMatchSetup::_internal_has_team_id_t() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TournamentMatchSetup::has_team_id_t() const {
  return _internal_has_team_id_t();
}
inline void TournamentMatchSetup::clear_team_id_t() {
  team_id_t_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TournamentMatchSetup::_internal_team_id_t() const {
  return team_id_t_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TournamentMatchSetup::team_id_t() const {
  // @@protoc_insertion_point(field_get:TournamentMatchSetup.team_id_t)
  return _internal_team_id_t();
}
inline void TournamentMatchSetup::_internal_set_team_id_t(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  team_id_t_ = value;
}
inline void TournamentMatchSetup::set_team_id_t(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_team_id_t(value);
  // @@protoc_insertion_point(field_set:TournamentMatchSetup.team_id_t)
}

// optional int32 event_stage_id = 4;
inline bool TournamentMatchSetup::_internal_has_event_stage_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TournamentMatchSetup::has_event_stage_id() const {
  return _internal_has_event_stage_id();
}
inline void TournamentMatchSetup::clear_event_stage_id() {
  event_stage_id_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TournamentMatchSetup::_internal_event_stage_id() const {
  return event_stage_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TournamentMatchSetup::event_stage_id() const {
  // @@protoc_insertion_point(field_get:TournamentMatchSetup.event_stage_id)
  return _internal_event_stage_id();
}
inline void TournamentMatchSetup::_internal_set_event_stage_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  event_stage_id_ = value;
}
inline void TournamentMatchSetup::set_event_stage_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_event_stage_id(value);
  // @@protoc_insertion_point(field_set:TournamentMatchSetup.event_stage_id)
}

// -------------------------------------------------------------------

// ServerHltvInfo

// optional uint32 tv_udp_port = 1;
inline bool ServerHltvInfo::_internal_has_tv_udp_port() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ServerHltvInfo::has_tv_udp_port() const {
  return _internal_has_tv_udp_port();
}
inline void ServerHltvInfo::clear_tv_udp_port() {
  tv_udp_port_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServerHltvInfo::_internal_tv_udp_port() const {
  return tv_udp_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServerHltvInfo::tv_udp_port() const {
  // @@protoc_insertion_point(field_get:ServerHltvInfo.tv_udp_port)
  return _internal_tv_udp_port();
}
inline void ServerHltvInfo::_internal_set_tv_udp_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  tv_udp_port_ = value;
}
inline void ServerHltvInfo::set_tv_udp_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tv_udp_port(value);
  // @@protoc_insertion_point(field_set:ServerHltvInfo.tv_udp_port)
}

// optional uint64 tv_watch_key = 2;
inline bool ServerHltvInfo::_internal_has_tv_watch_key() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ServerHltvInfo::has_tv_watch_key() const {
  return _internal_has_tv_watch_key();
}
inline void ServerHltvInfo::clear_tv_watch_key() {
  tv_watch_key_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ServerHltvInfo::_internal_tv_watch_key() const {
  return tv_watch_key_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ServerHltvInfo::tv_watch_key() const {
  // @@protoc_insertion_point(field_get:ServerHltvInfo.tv_watch_key)
  return _internal_tv_watch_key();
}
inline void ServerHltvInfo::_internal_set_tv_watch_key(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  tv_watch_key_ = value;
}
inline void ServerHltvInfo::set_tv_watch_key(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_tv_watch_key(value);
  // @@protoc_insertion_point(field_set:ServerHltvInfo.tv_watch_key)
}

// optional uint32 tv_slots = 3;
inline bool ServerHltvInfo::_internal_has_tv_slots() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ServerHltvInfo::has_tv_slots() const {
  return _internal_has_tv_slots();
}
inline void ServerHltvInfo::clear_tv_slots() {
  tv_slots_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServerHltvInfo::_internal_tv_slots() const {
  return tv_slots_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServerHltvInfo::tv_slots() const {
  // @@protoc_insertion_point(field_get:ServerHltvInfo.tv_slots)
  return _internal_tv_slots();
}
inline void ServerHltvInfo::_internal_set_tv_slots(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  tv_slots_ = value;
}
inline void ServerHltvInfo::set_tv_slots(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tv_slots(value);
  // @@protoc_insertion_point(field_set:ServerHltvInfo.tv_slots)
}

// optional uint32 tv_clients = 4;
inline bool ServerHltvInfo::_internal_has_tv_clients() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ServerHltvInfo::has_tv_clients() const {
  return _internal_has_tv_clients();
}
inline void ServerHltvInfo::clear_tv_clients() {
  tv_clients_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServerHltvInfo::_internal_tv_clients() const {
  return tv_clients_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServerHltvInfo::tv_clients() const {
  // @@protoc_insertion_point(field_get:ServerHltvInfo.tv_clients)
  return _internal_tv_clients();
}
inline void ServerHltvInfo::_internal_set_tv_clients(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  tv_clients_ = value;
}
inline void ServerHltvInfo::set_tv_clients(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tv_clients(value);
  // @@protoc_insertion_point(field_set:ServerHltvInfo.tv_clients)
}

// optional uint32 tv_proxies = 5;
inline bool ServerHltvInfo::_internal_has_tv_proxies() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ServerHltvInfo::has_tv_proxies() const {
  return _internal_has_tv_proxies();
}
inline void ServerHltvInfo::clear_tv_proxies() {
  tv_proxies_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServerHltvInfo::_internal_tv_proxies() const {
  return tv_proxies_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServerHltvInfo::tv_proxies() const {
  // @@protoc_insertion_point(field_get:ServerHltvInfo.tv_proxies)
  return _internal_tv_proxies();
}
inline void ServerHltvInfo::_internal_set_tv_proxies(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  tv_proxies_ = value;
}
inline void ServerHltvInfo::set_tv_proxies(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tv_proxies(value);
  // @@protoc_insertion_point(field_set:ServerHltvInfo.tv_proxies)
}

// optional uint32 tv_time = 6;
inline bool ServerHltvInfo::_internal_has_tv_time() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ServerHltvInfo::has_tv_time() const {
  return _internal_has_tv_time();
}
inline void ServerHltvInfo::clear_tv_time() {
  tv_time_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServerHltvInfo::_internal_tv_time() const {
  return tv_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServerHltvInfo::tv_time() const {
  // @@protoc_insertion_point(field_get:ServerHltvInfo.tv_time)
  return _internal_tv_time();
}
inline void ServerHltvInfo::_internal_set_tv_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  tv_time_ = value;
}
inline void ServerHltvInfo::set_tv_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tv_time(value);
  // @@protoc_insertion_point(field_set:ServerHltvInfo.tv_time)
}

// optional uint32 game_type = 8;
inline bool ServerHltvInfo::_internal_has_game_type() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool ServerHltvInfo::has_game_type() const {
  return _internal_has_game_type();
}
inline void ServerHltvInfo::clear_game_type() {
  game_type_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServerHltvInfo::_internal_game_type() const {
  return game_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServerHltvInfo::game_type() const {
  // @@protoc_insertion_point(field_get:ServerHltvInfo.game_type)
  return _internal_game_type();
}
inline void ServerHltvInfo::_internal_set_game_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  game_type_ = value;
}
inline void ServerHltvInfo::set_game_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_game_type(value);
  // @@protoc_insertion_point(field_set:ServerHltvInfo.game_type)
}

// optional string game_mapgroup = 9;
inline bool ServerHltvInfo::_internal_has_game_mapgroup() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ServerHltvInfo::has_game_mapgroup() const {
  return _internal_has_game_mapgroup();
}
inline void ServerHltvInfo::clear_game_mapgroup() {
  game_mapgroup_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ServerHltvInfo::game_mapgroup() const {
  // @@protoc_insertion_point(field_get:ServerHltvInfo.game_mapgroup)
  return _internal_game_mapgroup();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ServerHltvInfo::set_game_mapgroup(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 game_mapgroup_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ServerHltvInfo.game_mapgroup)
}
inline std::string* ServerHltvInfo::mutable_game_mapgroup() {
  std::string* _s = _internal_mutable_game_mapgroup();
  // @@protoc_insertion_point(field_mutable:ServerHltvInfo.game_mapgroup)
  return _s;
}
inline const std::string& ServerHltvInfo::_internal_game_mapgroup() const {
  return game_mapgroup_.Get();
}
inline void ServerHltvInfo::_internal_set_game_mapgroup(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  game_mapgroup_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ServerHltvInfo::_internal_mutable_game_mapgroup() {
  _has_bits_[0] |= 0x00000001u;
  return game_mapgroup_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ServerHltvInfo::release_game_mapgroup() {
  // @@protoc_insertion_point(field_release:ServerHltvInfo.game_mapgroup)
  if (!_internal_has_game_mapgroup()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return game_mapgroup_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ServerHltvInfo::set_allocated_game_mapgroup(std::string* game_mapgroup) {
  if (game_mapgroup != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  game_mapgroup_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), game_mapgroup,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:ServerHltvInfo.game_mapgroup)
}

// optional string game_map = 10;
inline bool ServerHltvInfo::_internal_has_game_map() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ServerHltvInfo::has_game_map() const {
  return _internal_has_game_map();
}
inline void ServerHltvInfo::clear_game_map() {
  game_map_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ServerHltvInfo::game_map() const {
  // @@protoc_insertion_point(field_get:ServerHltvInfo.game_map)
  return _internal_game_map();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ServerHltvInfo::set_game_map(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 game_map_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ServerHltvInfo.game_map)
}
inline std::string* ServerHltvInfo::mutable_game_map() {
  std::string* _s = _internal_mutable_game_map();
  // @@protoc_insertion_point(field_mutable:ServerHltvInfo.game_map)
  return _s;
}
inline const std::string& ServerHltvInfo::_internal_game_map() const {
  return game_map_.Get();
}
inline void ServerHltvInfo::_internal_set_game_map(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  game_map_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ServerHltvInfo::_internal_mutable_game_map() {
  _has_bits_[0] |= 0x00000002u;
  return game_map_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ServerHltvInfo::release_game_map() {
  // @@protoc_insertion_point(field_release:ServerHltvInfo.game_map)
  if (!_internal_has_game_map()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return game_map_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ServerHltvInfo::set_allocated_game_map(std::string* game_map) {
  if (game_map != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  game_map_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), game_map,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:ServerHltvInfo.game_map)
}

// optional uint64 tv_master_steamid = 11;
inline bool ServerHltvInfo::_internal_has_tv_master_steamid() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool ServerHltvInfo::has_tv_master_steamid() const {
  return _internal_has_tv_master_steamid();
}
inline void ServerHltvInfo::clear_tv_master_steamid() {
  tv_master_steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ServerHltvInfo::_internal_tv_master_steamid() const {
  return tv_master_steamid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ServerHltvInfo::tv_master_steamid() const {
  // @@protoc_insertion_point(field_get:ServerHltvInfo.tv_master_steamid)
  return _internal_tv_master_steamid();
}
inline void ServerHltvInfo::_internal_set_tv_master_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000200u;
  tv_master_steamid_ = value;
}
inline void ServerHltvInfo::set_tv_master_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_tv_master_steamid(value);
  // @@protoc_insertion_point(field_set:ServerHltvInfo.tv_master_steamid)
}

// optional uint32 tv_local_slots = 12;
inline bool ServerHltvInfo::_internal_has_tv_local_slots() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool ServerHltvInfo::has_tv_local_slots() const {
  return _internal_has_tv_local_slots();
}
inline void ServerHltvInfo::clear_tv_local_slots() {
  tv_local_slots_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServerHltvInfo::_internal_tv_local_slots() const {
  return tv_local_slots_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServerHltvInfo::tv_local_slots() const {
  // @@protoc_insertion_point(field_get:ServerHltvInfo.tv_local_slots)
  return _internal_tv_local_slots();
}
inline void ServerHltvInfo::_internal_set_tv_local_slots(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  tv_local_slots_ = value;
}
inline void ServerHltvInfo::set_tv_local_slots(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tv_local_slots(value);
  // @@protoc_insertion_point(field_set:ServerHltvInfo.tv_local_slots)
}

// optional uint32 tv_local_clients = 13;
inline bool ServerHltvInfo::_internal_has_tv_local_clients() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool ServerHltvInfo::has_tv_local_clients() const {
  return _internal_has_tv_local_clients();
}
inline void ServerHltvInfo::clear_tv_local_clients() {
  tv_local_clients_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServerHltvInfo::_internal_tv_local_clients() const {
  return tv_local_clients_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServerHltvInfo::tv_local_clients() const {
  // @@protoc_insertion_point(field_get:ServerHltvInfo.tv_local_clients)
  return _internal_tv_local_clients();
}
inline void ServerHltvInfo::_internal_set_tv_local_clients(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  tv_local_clients_ = value;
}
inline void ServerHltvInfo::set_tv_local_clients(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tv_local_clients(value);
  // @@protoc_insertion_point(field_set:ServerHltvInfo.tv_local_clients)
}

// optional uint32 tv_local_proxies = 14;
inline bool ServerHltvInfo::_internal_has_tv_local_proxies() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool ServerHltvInfo::has_tv_local_proxies() const {
  return _internal_has_tv_local_proxies();
}
inline void ServerHltvInfo::clear_tv_local_proxies() {
  tv_local_proxies_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServerHltvInfo::_internal_tv_local_proxies() const {
  return tv_local_proxies_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServerHltvInfo::tv_local_proxies() const {
  // @@protoc_insertion_point(field_get:ServerHltvInfo.tv_local_proxies)
  return _internal_tv_local_proxies();
}
inline void ServerHltvInfo::_internal_set_tv_local_proxies(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00001000u;
  tv_local_proxies_ = value;
}
inline void ServerHltvInfo::set_tv_local_proxies(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tv_local_proxies(value);
  // @@protoc_insertion_point(field_set:ServerHltvInfo.tv_local_proxies)
}

// optional uint32 tv_relay_slots = 15;
inline bool ServerHltvInfo::_internal_has_tv_relay_slots() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool ServerHltvInfo::has_tv_relay_slots() const {
  return _internal_has_tv_relay_slots();
}
inline void ServerHltvInfo::clear_tv_relay_slots() {
  tv_relay_slots_ = 0u;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServerHltvInfo::_internal_tv_relay_slots() const {
  return tv_relay_slots_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServerHltvInfo::tv_relay_slots() const {
  // @@protoc_insertion_point(field_get:ServerHltvInfo.tv_relay_slots)
  return _internal_tv_relay_slots();
}
inline void ServerHltvInfo::_internal_set_tv_relay_slots(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00002000u;
  tv_relay_slots_ = value;
}
inline void ServerHltvInfo::set_tv_relay_slots(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tv_relay_slots(value);
  // @@protoc_insertion_point(field_set:ServerHltvInfo.tv_relay_slots)
}

// optional uint32 tv_relay_clients = 16;
inline bool ServerHltvInfo::_internal_has_tv_relay_clients() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool ServerHltvInfo::has_tv_relay_clients() const {
  return _internal_has_tv_relay_clients();
}
inline void ServerHltvInfo::clear_tv_relay_clients() {
  tv_relay_clients_ = 0u;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServerHltvInfo::_internal_tv_relay_clients() const {
  return tv_relay_clients_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServerHltvInfo::tv_relay_clients() const {
  // @@protoc_insertion_point(field_get:ServerHltvInfo.tv_relay_clients)
  return _internal_tv_relay_clients();
}
inline void ServerHltvInfo::_internal_set_tv_relay_clients(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00004000u;
  tv_relay_clients_ = value;
}
inline void ServerHltvInfo::set_tv_relay_clients(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tv_relay_clients(value);
  // @@protoc_insertion_point(field_set:ServerHltvInfo.tv_relay_clients)
}

// optional uint32 tv_relay_proxies = 17;
inline bool ServerHltvInfo::_internal_has_tv_relay_proxies() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool ServerHltvInfo::has_tv_relay_proxies() const {
  return _internal_has_tv_relay_proxies();
}
inline void ServerHltvInfo::clear_tv_relay_proxies() {
  tv_relay_proxies_ = 0u;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServerHltvInfo::_internal_tv_relay_proxies() const {
  return tv_relay_proxies_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServerHltvInfo::tv_relay_proxies() const {
  // @@protoc_insertion_point(field_get:ServerHltvInfo.tv_relay_proxies)
  return _internal_tv_relay_proxies();
}
inline void ServerHltvInfo::_internal_set_tv_relay_proxies(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00008000u;
  tv_relay_proxies_ = value;
}
inline void ServerHltvInfo::set_tv_relay_proxies(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tv_relay_proxies(value);
  // @@protoc_insertion_point(field_set:ServerHltvInfo.tv_relay_proxies)
}

// optional uint32 tv_relay_address = 18;
inline bool ServerHltvInfo::_internal_has_tv_relay_address() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool ServerHltvInfo::has_tv_relay_address() const {
  return _internal_has_tv_relay_address();
}
inline void ServerHltvInfo::clear_tv_relay_address() {
  tv_relay_address_ = 0u;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServerHltvInfo::_internal_tv_relay_address() const {
  return tv_relay_address_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServerHltvInfo::tv_relay_address() const {
  // @@protoc_insertion_point(field_get:ServerHltvInfo.tv_relay_address)
  return _internal_tv_relay_address();
}
inline void ServerHltvInfo::_internal_set_tv_relay_address(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00010000u;
  tv_relay_address_ = value;
}
inline void ServerHltvInfo::set_tv_relay_address(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tv_relay_address(value);
  // @@protoc_insertion_point(field_set:ServerHltvInfo.tv_relay_address)
}

// optional uint32 tv_relay_port = 19;
inline bool ServerHltvInfo::_internal_has_tv_relay_port() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool ServerHltvInfo::has_tv_relay_port() const {
  return _internal_has_tv_relay_port();
}
inline void ServerHltvInfo::clear_tv_relay_port() {
  tv_relay_port_ = 0u;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServerHltvInfo::_internal_tv_relay_port() const {
  return tv_relay_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServerHltvInfo::tv_relay_port() const {
  // @@protoc_insertion_point(field_get:ServerHltvInfo.tv_relay_port)
  return _internal_tv_relay_port();
}
inline void ServerHltvInfo::_internal_set_tv_relay_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00020000u;
  tv_relay_port_ = value;
}
inline void ServerHltvInfo::set_tv_relay_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tv_relay_port(value);
  // @@protoc_insertion_point(field_set:ServerHltvInfo.tv_relay_port)
}

// optional uint64 tv_relay_steamid = 20;
inline bool ServerHltvInfo::_internal_has_tv_relay_steamid() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool ServerHltvInfo::has_tv_relay_steamid() const {
  return _internal_has_tv_relay_steamid();
}
inline void ServerHltvInfo::clear_tv_relay_steamid() {
  tv_relay_steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00040000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ServerHltvInfo::_internal_tv_relay_steamid() const {
  return tv_relay_steamid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ServerHltvInfo::tv_relay_steamid() const {
  // @@protoc_insertion_point(field_get:ServerHltvInfo.tv_relay_steamid)
  return _internal_tv_relay_steamid();
}
inline void ServerHltvInfo::_internal_set_tv_relay_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00040000u;
  tv_relay_steamid_ = value;
}
inline void ServerHltvInfo::set_tv_relay_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_tv_relay_steamid(value);
  // @@protoc_insertion_point(field_set:ServerHltvInfo.tv_relay_steamid)
}

// -------------------------------------------------------------------

// IpAddressMask

// optional uint32 a = 1;
inline bool IpAddressMask::_internal_has_a() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool IpAddressMask::has_a() const {
  return _internal_has_a();
}
inline void IpAddressMask::clear_a() {
  a_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IpAddressMask::_internal_a() const {
  return a_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IpAddressMask::a() const {
  // @@protoc_insertion_point(field_get:IpAddressMask.a)
  return _internal_a();
}
inline void IpAddressMask::_internal_set_a(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  a_ = value;
}
inline void IpAddressMask::set_a(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_a(value);
  // @@protoc_insertion_point(field_set:IpAddressMask.a)
}

// optional uint32 b = 2;
inline bool IpAddressMask::_internal_has_b() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool IpAddressMask::has_b() const {
  return _internal_has_b();
}
inline void IpAddressMask::clear_b() {
  b_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IpAddressMask::_internal_b() const {
  return b_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IpAddressMask::b() const {
  // @@protoc_insertion_point(field_get:IpAddressMask.b)
  return _internal_b();
}
inline void IpAddressMask::_internal_set_b(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  b_ = value;
}
inline void IpAddressMask::set_b(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_b(value);
  // @@protoc_insertion_point(field_set:IpAddressMask.b)
}

// optional uint32 c = 3;
inline bool IpAddressMask::_internal_has_c() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool IpAddressMask::has_c() const {
  return _internal_has_c();
}
inline void IpAddressMask::clear_c() {
  c_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IpAddressMask::_internal_c() const {
  return c_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IpAddressMask::c() const {
  // @@protoc_insertion_point(field_get:IpAddressMask.c)
  return _internal_c();
}
inline void IpAddressMask::_internal_set_c(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  c_ = value;
}
inline void IpAddressMask::set_c(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_c(value);
  // @@protoc_insertion_point(field_set:IpAddressMask.c)
}

// optional uint32 d = 4;
inline bool IpAddressMask::_internal_has_d() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool IpAddressMask::has_d() const {
  return _internal_has_d();
}
inline void IpAddressMask::clear_d() {
  d_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IpAddressMask::_internal_d() const {
  return d_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IpAddressMask::d() const {
  // @@protoc_insertion_point(field_get:IpAddressMask.d)
  return _internal_d();
}
inline void IpAddressMask::_internal_set_d(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  d_ = value;
}
inline void IpAddressMask::set_d(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_d(value);
  // @@protoc_insertion_point(field_set:IpAddressMask.d)
}

// optional uint32 bits = 5;
inline bool IpAddressMask::_internal_has_bits() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool IpAddressMask::has_bits() const {
  return _internal_has_bits();
}
inline void IpAddressMask::clear_bits() {
  bits_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IpAddressMask::_internal_bits() const {
  return bits_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IpAddressMask::bits() const {
  // @@protoc_insertion_point(field_get:IpAddressMask.bits)
  return _internal_bits();
}
inline void IpAddressMask::_internal_set_bits(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  bits_ = value;
}
inline void IpAddressMask::set_bits(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_bits(value);
  // @@protoc_insertion_point(field_set:IpAddressMask.bits)
}

// optional uint32 token = 6;
inline bool IpAddressMask::_internal_has_token() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool IpAddressMask::has_token() const {
  return _internal_has_token();
}
inline void IpAddressMask::clear_token() {
  token_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IpAddressMask::_internal_token() const {
  return token_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IpAddressMask::token() const {
  // @@protoc_insertion_point(field_get:IpAddressMask.token)
  return _internal_token();
}
inline void IpAddressMask::_internal_set_token(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  token_ = value;
}
inline void IpAddressMask::set_token(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:IpAddressMask.token)
}

// -------------------------------------------------------------------

// XpProgressData

// optional uint32 xp_points = 1;
inline bool XpProgressData::_internal_has_xp_points() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool XpProgressData::has_xp_points() const {
  return _internal_has_xp_points();
}
inline void XpProgressData::clear_xp_points() {
  xp_points_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 XpProgressData::_internal_xp_points() const {
  return xp_points_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 XpProgressData::xp_points() const {
  // @@protoc_insertion_point(field_get:XpProgressData.xp_points)
  return _internal_xp_points();
}
inline void XpProgressData::_internal_set_xp_points(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  xp_points_ = value;
}
inline void XpProgressData::set_xp_points(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_xp_points(value);
  // @@protoc_insertion_point(field_set:XpProgressData.xp_points)
}

// optional int32 xp_category = 2;
inline bool XpProgressData::_internal_has_xp_category() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool XpProgressData::has_xp_category() const {
  return _internal_has_xp_category();
}
inline void XpProgressData::clear_xp_category() {
  xp_category_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 XpProgressData::_internal_xp_category() const {
  return xp_category_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 XpProgressData::xp_category() const {
  // @@protoc_insertion_point(field_get:XpProgressData.xp_category)
  return _internal_xp_category();
}
inline void XpProgressData::_internal_set_xp_category(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  xp_category_ = value;
}
inline void XpProgressData::set_xp_category(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xp_category(value);
  // @@protoc_insertion_point(field_set:XpProgressData.xp_category)
}

// -------------------------------------------------------------------

// MatchEndItemUpdates

// optional uint64 item_id = 1;
inline bool MatchEndItemUpdates::_internal_has_item_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MatchEndItemUpdates::has_item_id() const {
  return _internal_has_item_id();
}
inline void MatchEndItemUpdates::clear_item_id() {
  item_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MatchEndItemUpdates::_internal_item_id() const {
  return item_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MatchEndItemUpdates::item_id() const {
  // @@protoc_insertion_point(field_get:MatchEndItemUpdates.item_id)
  return _internal_item_id();
}
inline void MatchEndItemUpdates::_internal_set_item_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  item_id_ = value;
}
inline void MatchEndItemUpdates::set_item_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_item_id(value);
  // @@protoc_insertion_point(field_set:MatchEndItemUpdates.item_id)
}

// optional uint32 item_attr_defidx = 2;
inline bool MatchEndItemUpdates::_internal_has_item_attr_defidx() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MatchEndItemUpdates::has_item_attr_defidx() const {
  return _internal_has_item_attr_defidx();
}
inline void MatchEndItemUpdates::clear_item_attr_defidx() {
  item_attr_defidx_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MatchEndItemUpdates::_internal_item_attr_defidx() const {
  return item_attr_defidx_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MatchEndItemUpdates::item_attr_defidx() const {
  // @@protoc_insertion_point(field_get:MatchEndItemUpdates.item_attr_defidx)
  return _internal_item_attr_defidx();
}
inline void MatchEndItemUpdates::_internal_set_item_attr_defidx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  item_attr_defidx_ = value;
}
inline void MatchEndItemUpdates::set_item_attr_defidx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_item_attr_defidx(value);
  // @@protoc_insertion_point(field_set:MatchEndItemUpdates.item_attr_defidx)
}

// optional uint32 item_attr_delta_value = 3;
inline bool MatchEndItemUpdates::_internal_has_item_attr_delta_value() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MatchEndItemUpdates::has_item_attr_delta_value() const {
  return _internal_has_item_attr_delta_value();
}
inline void MatchEndItemUpdates::clear_item_attr_delta_value() {
  item_attr_delta_value_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MatchEndItemUpdates::_internal_item_attr_delta_value() const {
  return item_attr_delta_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MatchEndItemUpdates::item_attr_delta_value() const {
  // @@protoc_insertion_point(field_get:MatchEndItemUpdates.item_attr_delta_value)
  return _internal_item_attr_delta_value();
}
inline void MatchEndItemUpdates::_internal_set_item_attr_delta_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  item_attr_delta_value_ = value;
}
inline void MatchEndItemUpdates::set_item_attr_delta_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_item_attr_delta_value(value);
  // @@protoc_insertion_point(field_set:MatchEndItemUpdates.item_attr_delta_value)
}

// -------------------------------------------------------------------

// ScoreLeaderboardData_Entry

// optional uint32 tag = 1;
inline bool ScoreLeaderboardData_Entry::_internal_has_tag() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ScoreLeaderboardData_Entry::has_tag() const {
  return _internal_has_tag();
}
inline void ScoreLeaderboardData_Entry::clear_tag() {
  tag_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ScoreLeaderboardData_Entry::_internal_tag() const {
  return tag_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ScoreLeaderboardData_Entry::tag() const {
  // @@protoc_insertion_point(field_get:ScoreLeaderboardData.Entry.tag)
  return _internal_tag();
}
inline void ScoreLeaderboardData_Entry::_internal_set_tag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  tag_ = value;
}
inline void ScoreLeaderboardData_Entry::set_tag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tag(value);
  // @@protoc_insertion_point(field_set:ScoreLeaderboardData.Entry.tag)
}

// optional uint32 val = 2;
inline bool ScoreLeaderboardData_Entry::_internal_has_val() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ScoreLeaderboardData_Entry::has_val() const {
  return _internal_has_val();
}
inline void ScoreLeaderboardData_Entry::clear_val() {
  val_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ScoreLeaderboardData_Entry::_internal_val() const {
  return val_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ScoreLeaderboardData_Entry::val() const {
  // @@protoc_insertion_point(field_get:ScoreLeaderboardData.Entry.val)
  return _internal_val();
}
inline void ScoreLeaderboardData_Entry::_internal_set_val(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  val_ = value;
}
inline void ScoreLeaderboardData_Entry::set_val(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_val(value);
  // @@protoc_insertion_point(field_set:ScoreLeaderboardData.Entry.val)
}

// -------------------------------------------------------------------

// ScoreLeaderboardData_AccountEntries

// optional uint32 accountid = 1;
inline bool ScoreLeaderboardData_AccountEntries::_internal_has_accountid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ScoreLeaderboardData_AccountEntries::has_accountid() const {
  return _internal_has_accountid();
}
inline void ScoreLeaderboardData_AccountEntries::clear_accountid() {
  accountid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ScoreLeaderboardData_AccountEntries::_internal_accountid() const {
  return accountid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ScoreLeaderboardData_AccountEntries::accountid() const {
  // @@protoc_insertion_point(field_get:ScoreLeaderboardData.AccountEntries.accountid)
  return _internal_accountid();
}
inline void ScoreLeaderboardData_AccountEntries::_internal_set_accountid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  accountid_ = value;
}
inline void ScoreLeaderboardData_AccountEntries::set_accountid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_accountid(value);
  // @@protoc_insertion_point(field_set:ScoreLeaderboardData.AccountEntries.accountid)
}

// repeated .ScoreLeaderboardData.Entry entries = 2;
inline int ScoreLeaderboardData_AccountEntries::_internal_entries_size() const {
  return entries_.size();
}
inline int ScoreLeaderboardData_AccountEntries::entries_size() const {
  return _internal_entries_size();
}
inline void ScoreLeaderboardData_AccountEntries::clear_entries() {
  entries_.Clear();
}
inline ::ScoreLeaderboardData_Entry* ScoreLeaderboardData_AccountEntries::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:ScoreLeaderboardData.AccountEntries.entries)
  return entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ScoreLeaderboardData_Entry >*
ScoreLeaderboardData_AccountEntries::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:ScoreLeaderboardData.AccountEntries.entries)
  return &entries_;
}
inline const ::ScoreLeaderboardData_Entry& ScoreLeaderboardData_AccountEntries::_internal_entries(int index) const {
  return entries_.Get(index);
}
inline const ::ScoreLeaderboardData_Entry& ScoreLeaderboardData_AccountEntries::entries(int index) const {
  // @@protoc_insertion_point(field_get:ScoreLeaderboardData.AccountEntries.entries)
  return _internal_entries(index);
}
inline ::ScoreLeaderboardData_Entry* ScoreLeaderboardData_AccountEntries::_internal_add_entries() {
  return entries_.Add();
}
inline ::ScoreLeaderboardData_Entry* ScoreLeaderboardData_AccountEntries::add_entries() {
  ::ScoreLeaderboardData_Entry* _add = _internal_add_entries();
  // @@protoc_insertion_point(field_add:ScoreLeaderboardData.AccountEntries.entries)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ScoreLeaderboardData_Entry >&
ScoreLeaderboardData_AccountEntries::entries() const {
  // @@protoc_insertion_point(field_list:ScoreLeaderboardData.AccountEntries.entries)
  return entries_;
}

// -------------------------------------------------------------------

// ScoreLeaderboardData

// optional uint64 quest_id = 1;
inline bool ScoreLeaderboardData::_internal_has_quest_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ScoreLeaderboardData::has_quest_id() const {
  return _internal_has_quest_id();
}
inline void ScoreLeaderboardData::clear_quest_id() {
  quest_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ScoreLeaderboardData::_internal_quest_id() const {
  return quest_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ScoreLeaderboardData::quest_id() const {
  // @@protoc_insertion_point(field_get:ScoreLeaderboardData.quest_id)
  return _internal_quest_id();
}
inline void ScoreLeaderboardData::_internal_set_quest_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  quest_id_ = value;
}
inline void ScoreLeaderboardData::set_quest_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_quest_id(value);
  // @@protoc_insertion_point(field_set:ScoreLeaderboardData.quest_id)
}

// optional uint32 score = 2;
inline bool ScoreLeaderboardData::_internal_has_score() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ScoreLeaderboardData::has_score() const {
  return _internal_has_score();
}
inline void ScoreLeaderboardData::clear_score() {
  score_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ScoreLeaderboardData::_internal_score() const {
  return score_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ScoreLeaderboardData::score() const {
  // @@protoc_insertion_point(field_get:ScoreLeaderboardData.score)
  return _internal_score();
}
inline void ScoreLeaderboardData::_internal_set_score(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  score_ = value;
}
inline void ScoreLeaderboardData::set_score(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:ScoreLeaderboardData.score)
}

// repeated .ScoreLeaderboardData.AccountEntries accountentries = 3;
inline int ScoreLeaderboardData::_internal_accountentries_size() const {
  return accountentries_.size();
}
inline int ScoreLeaderboardData::accountentries_size() const {
  return _internal_accountentries_size();
}
inline void ScoreLeaderboardData::clear_accountentries() {
  accountentries_.Clear();
}
inline ::ScoreLeaderboardData_AccountEntries* ScoreLeaderboardData::mutable_accountentries(int index) {
  // @@protoc_insertion_point(field_mutable:ScoreLeaderboardData.accountentries)
  return accountentries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ScoreLeaderboardData_AccountEntries >*
ScoreLeaderboardData::mutable_accountentries() {
  // @@protoc_insertion_point(field_mutable_list:ScoreLeaderboardData.accountentries)
  return &accountentries_;
}
inline const ::ScoreLeaderboardData_AccountEntries& ScoreLeaderboardData::_internal_accountentries(int index) const {
  return accountentries_.Get(index);
}
inline const ::ScoreLeaderboardData_AccountEntries& ScoreLeaderboardData::accountentries(int index) const {
  // @@protoc_insertion_point(field_get:ScoreLeaderboardData.accountentries)
  return _internal_accountentries(index);
}
inline ::ScoreLeaderboardData_AccountEntries* ScoreLeaderboardData::_internal_add_accountentries() {
  return accountentries_.Add();
}
inline ::ScoreLeaderboardData_AccountEntries* ScoreLeaderboardData::add_accountentries() {
  ::ScoreLeaderboardData_AccountEntries* _add = _internal_add_accountentries();
  // @@protoc_insertion_point(field_add:ScoreLeaderboardData.accountentries)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ScoreLeaderboardData_AccountEntries >&
ScoreLeaderboardData::accountentries() const {
  // @@protoc_insertion_point(field_list:ScoreLeaderboardData.accountentries)
  return accountentries_;
}

// repeated .ScoreLeaderboardData.Entry matchentries = 5;
inline int ScoreLeaderboardData::_internal_matchentries_size() const {
  return matchentries_.size();
}
inline int ScoreLeaderboardData::matchentries_size() const {
  return _internal_matchentries_size();
}
inline void ScoreLeaderboardData::clear_matchentries() {
  matchentries_.Clear();
}
inline ::ScoreLeaderboardData_Entry* ScoreLeaderboardData::mutable_matchentries(int index) {
  // @@protoc_insertion_point(field_mutable:ScoreLeaderboardData.matchentries)
  return matchentries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ScoreLeaderboardData_Entry >*
ScoreLeaderboardData::mutable_matchentries() {
  // @@protoc_insertion_point(field_mutable_list:ScoreLeaderboardData.matchentries)
  return &matchentries_;
}
inline const ::ScoreLeaderboardData_Entry& ScoreLeaderboardData::_internal_matchentries(int index) const {
  return matchentries_.Get(index);
}
inline const ::ScoreLeaderboardData_Entry& ScoreLeaderboardData::matchentries(int index) const {
  // @@protoc_insertion_point(field_get:ScoreLeaderboardData.matchentries)
  return _internal_matchentries(index);
}
inline ::ScoreLeaderboardData_Entry* ScoreLeaderboardData::_internal_add_matchentries() {
  return matchentries_.Add();
}
inline ::ScoreLeaderboardData_Entry* ScoreLeaderboardData::add_matchentries() {
  ::ScoreLeaderboardData_Entry* _add = _internal_add_matchentries();
  // @@protoc_insertion_point(field_add:ScoreLeaderboardData.matchentries)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ScoreLeaderboardData_Entry >&
ScoreLeaderboardData::matchentries() const {
  // @@protoc_insertion_point(field_list:ScoreLeaderboardData.matchentries)
  return matchentries_;
}

// -------------------------------------------------------------------

// PlayerQuestData_QuestItemData

// optional uint64 quest_id = 1;
inline bool PlayerQuestData_QuestItemData::_internal_has_quest_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PlayerQuestData_QuestItemData::has_quest_id() const {
  return _internal_has_quest_id();
}
inline void PlayerQuestData_QuestItemData::clear_quest_id() {
  quest_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PlayerQuestData_QuestItemData::_internal_quest_id() const {
  return quest_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PlayerQuestData_QuestItemData::quest_id() const {
  // @@protoc_insertion_point(field_get:PlayerQuestData.QuestItemData.quest_id)
  return _internal_quest_id();
}
inline void PlayerQuestData_QuestItemData::_internal_set_quest_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  quest_id_ = value;
}
inline void PlayerQuestData_QuestItemData::set_quest_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_quest_id(value);
  // @@protoc_insertion_point(field_set:PlayerQuestData.QuestItemData.quest_id)
}

// optional int32 quest_normal_points_earned = 2;
inline bool PlayerQuestData_QuestItemData::_internal_has_quest_normal_points_earned() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PlayerQuestData_QuestItemData::has_quest_normal_points_earned() const {
  return _internal_has_quest_normal_points_earned();
}
inline void PlayerQuestData_QuestItemData::clear_quest_normal_points_earned() {
  quest_normal_points_earned_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerQuestData_QuestItemData::_internal_quest_normal_points_earned() const {
  return quest_normal_points_earned_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerQuestData_QuestItemData::quest_normal_points_earned() const {
  // @@protoc_insertion_point(field_get:PlayerQuestData.QuestItemData.quest_normal_points_earned)
  return _internal_quest_normal_points_earned();
}
inline void PlayerQuestData_QuestItemData::_internal_set_quest_normal_points_earned(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  quest_normal_points_earned_ = value;
}
inline void PlayerQuestData_QuestItemData::set_quest_normal_points_earned(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_quest_normal_points_earned(value);
  // @@protoc_insertion_point(field_set:PlayerQuestData.QuestItemData.quest_normal_points_earned)
}

// optional int32 quest_bonus_points_earned = 3;
inline bool PlayerQuestData_QuestItemData::_internal_has_quest_bonus_points_earned() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PlayerQuestData_QuestItemData::has_quest_bonus_points_earned() const {
  return _internal_has_quest_bonus_points_earned();
}
inline void PlayerQuestData_QuestItemData::clear_quest_bonus_points_earned() {
  quest_bonus_points_earned_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerQuestData_QuestItemData::_internal_quest_bonus_points_earned() const {
  return quest_bonus_points_earned_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerQuestData_QuestItemData::quest_bonus_points_earned() const {
  // @@protoc_insertion_point(field_get:PlayerQuestData.QuestItemData.quest_bonus_points_earned)
  return _internal_quest_bonus_points_earned();
}
inline void PlayerQuestData_QuestItemData::_internal_set_quest_bonus_points_earned(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  quest_bonus_points_earned_ = value;
}
inline void PlayerQuestData_QuestItemData::set_quest_bonus_points_earned(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_quest_bonus_points_earned(value);
  // @@protoc_insertion_point(field_set:PlayerQuestData.QuestItemData.quest_bonus_points_earned)
}

// -------------------------------------------------------------------

// PlayerQuestData

// optional uint32 quester_account_id = 1;
inline bool PlayerQuestData::_internal_has_quester_account_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PlayerQuestData::has_quester_account_id() const {
  return _internal_has_quester_account_id();
}
inline void PlayerQuestData::clear_quester_account_id() {
  quester_account_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PlayerQuestData::_internal_quester_account_id() const {
  return quester_account_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PlayerQuestData::quester_account_id() const {
  // @@protoc_insertion_point(field_get:PlayerQuestData.quester_account_id)
  return _internal_quester_account_id();
}
inline void PlayerQuestData::_internal_set_quester_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  quester_account_id_ = value;
}
inline void PlayerQuestData::set_quester_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_quester_account_id(value);
  // @@protoc_insertion_point(field_set:PlayerQuestData.quester_account_id)
}

// repeated .PlayerQuestData.QuestItemData quest_item_data = 2;
inline int PlayerQuestData::_internal_quest_item_data_size() const {
  return quest_item_data_.size();
}
inline int PlayerQuestData::quest_item_data_size() const {
  return _internal_quest_item_data_size();
}
inline void PlayerQuestData::clear_quest_item_data() {
  quest_item_data_.Clear();
}
inline ::PlayerQuestData_QuestItemData* PlayerQuestData::mutable_quest_item_data(int index) {
  // @@protoc_insertion_point(field_mutable:PlayerQuestData.quest_item_data)
  return quest_item_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlayerQuestData_QuestItemData >*
PlayerQuestData::mutable_quest_item_data() {
  // @@protoc_insertion_point(field_mutable_list:PlayerQuestData.quest_item_data)
  return &quest_item_data_;
}
inline const ::PlayerQuestData_QuestItemData& PlayerQuestData::_internal_quest_item_data(int index) const {
  return quest_item_data_.Get(index);
}
inline const ::PlayerQuestData_QuestItemData& PlayerQuestData::quest_item_data(int index) const {
  // @@protoc_insertion_point(field_get:PlayerQuestData.quest_item_data)
  return _internal_quest_item_data(index);
}
inline ::PlayerQuestData_QuestItemData* PlayerQuestData::_internal_add_quest_item_data() {
  return quest_item_data_.Add();
}
inline ::PlayerQuestData_QuestItemData* PlayerQuestData::add_quest_item_data() {
  ::PlayerQuestData_QuestItemData* _add = _internal_add_quest_item_data();
  // @@protoc_insertion_point(field_add:PlayerQuestData.quest_item_data)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlayerQuestData_QuestItemData >&
PlayerQuestData::quest_item_data() const {
  // @@protoc_insertion_point(field_list:PlayerQuestData.quest_item_data)
  return quest_item_data_;
}

// repeated .XpProgressData xp_progress_data = 3;
inline int PlayerQuestData::_internal_xp_progress_data_size() const {
  return xp_progress_data_.size();
}
inline int PlayerQuestData::xp_progress_data_size() const {
  return _internal_xp_progress_data_size();
}
inline void PlayerQuestData::clear_xp_progress_data() {
  xp_progress_data_.Clear();
}
inline ::XpProgressData* PlayerQuestData::mutable_xp_progress_data(int index) {
  // @@protoc_insertion_point(field_mutable:PlayerQuestData.xp_progress_data)
  return xp_progress_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XpProgressData >*
PlayerQuestData::mutable_xp_progress_data() {
  // @@protoc_insertion_point(field_mutable_list:PlayerQuestData.xp_progress_data)
  return &xp_progress_data_;
}
inline const ::XpProgressData& PlayerQuestData::_internal_xp_progress_data(int index) const {
  return xp_progress_data_.Get(index);
}
inline const ::XpProgressData& PlayerQuestData::xp_progress_data(int index) const {
  // @@protoc_insertion_point(field_get:PlayerQuestData.xp_progress_data)
  return _internal_xp_progress_data(index);
}
inline ::XpProgressData* PlayerQuestData::_internal_add_xp_progress_data() {
  return xp_progress_data_.Add();
}
inline ::XpProgressData* PlayerQuestData::add_xp_progress_data() {
  ::XpProgressData* _add = _internal_add_xp_progress_data();
  // @@protoc_insertion_point(field_add:PlayerQuestData.xp_progress_data)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XpProgressData >&
PlayerQuestData::xp_progress_data() const {
  // @@protoc_insertion_point(field_list:PlayerQuestData.xp_progress_data)
  return xp_progress_data_;
}

// optional uint32 time_played = 4;
inline bool PlayerQuestData::_internal_has_time_played() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PlayerQuestData::has_time_played() const {
  return _internal_has_time_played();
}
inline void PlayerQuestData::clear_time_played() {
  time_played_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PlayerQuestData::_internal_time_played() const {
  return time_played_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PlayerQuestData::time_played() const {
  // @@protoc_insertion_point(field_get:PlayerQuestData.time_played)
  return _internal_time_played();
}
inline void PlayerQuestData::_internal_set_time_played(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  time_played_ = value;
}
inline void PlayerQuestData::set_time_played(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_time_played(value);
  // @@protoc_insertion_point(field_set:PlayerQuestData.time_played)
}

// optional uint32 mm_game_mode = 5;
inline bool PlayerQuestData::_internal_has_mm_game_mode() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PlayerQuestData::has_mm_game_mode() const {
  return _internal_has_mm_game_mode();
}
inline void PlayerQuestData::clear_mm_game_mode() {
  mm_game_mode_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PlayerQuestData::_internal_mm_game_mode() const {
  return mm_game_mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PlayerQuestData::mm_game_mode() const {
  // @@protoc_insertion_point(field_get:PlayerQuestData.mm_game_mode)
  return _internal_mm_game_mode();
}
inline void PlayerQuestData::_internal_set_mm_game_mode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  mm_game_mode_ = value;
}
inline void PlayerQuestData::set_mm_game_mode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_mm_game_mode(value);
  // @@protoc_insertion_point(field_set:PlayerQuestData.mm_game_mode)
}

// repeated .MatchEndItemUpdates item_updates = 6;
inline int PlayerQuestData::_internal_item_updates_size() const {
  return item_updates_.size();
}
inline int PlayerQuestData::item_updates_size() const {
  return _internal_item_updates_size();
}
inline void PlayerQuestData::clear_item_updates() {
  item_updates_.Clear();
}
inline ::MatchEndItemUpdates* PlayerQuestData::mutable_item_updates(int index) {
  // @@protoc_insertion_point(field_mutable:PlayerQuestData.item_updates)
  return item_updates_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MatchEndItemUpdates >*
PlayerQuestData::mutable_item_updates() {
  // @@protoc_insertion_point(field_mutable_list:PlayerQuestData.item_updates)
  return &item_updates_;
}
inline const ::MatchEndItemUpdates& PlayerQuestData::_internal_item_updates(int index) const {
  return item_updates_.Get(index);
}
inline const ::MatchEndItemUpdates& PlayerQuestData::item_updates(int index) const {
  // @@protoc_insertion_point(field_get:PlayerQuestData.item_updates)
  return _internal_item_updates(index);
}
inline ::MatchEndItemUpdates* PlayerQuestData::_internal_add_item_updates() {
  return item_updates_.Add();
}
inline ::MatchEndItemUpdates* PlayerQuestData::add_item_updates() {
  ::MatchEndItemUpdates* _add = _internal_add_item_updates();
  // @@protoc_insertion_point(field_add:PlayerQuestData.item_updates)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MatchEndItemUpdates >&
PlayerQuestData::item_updates() const {
  // @@protoc_insertion_point(field_list:PlayerQuestData.item_updates)
  return item_updates_;
}

// -------------------------------------------------------------------

// CMsgGC_ServerQuestUpdateData

// repeated .PlayerQuestData player_quest_data = 1;
inline int CMsgGC_ServerQuestUpdateData::_internal_player_quest_data_size() const {
  return player_quest_data_.size();
}
inline int CMsgGC_ServerQuestUpdateData::player_quest_data_size() const {
  return _internal_player_quest_data_size();
}
inline void CMsgGC_ServerQuestUpdateData::clear_player_quest_data() {
  player_quest_data_.Clear();
}
inline ::PlayerQuestData* CMsgGC_ServerQuestUpdateData::mutable_player_quest_data(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgGC_ServerQuestUpdateData.player_quest_data)
  return player_quest_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlayerQuestData >*
CMsgGC_ServerQuestUpdateData::mutable_player_quest_data() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGC_ServerQuestUpdateData.player_quest_data)
  return &player_quest_data_;
}
inline const ::PlayerQuestData& CMsgGC_ServerQuestUpdateData::_internal_player_quest_data(int index) const {
  return player_quest_data_.Get(index);
}
inline const ::PlayerQuestData& CMsgGC_ServerQuestUpdateData::player_quest_data(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGC_ServerQuestUpdateData.player_quest_data)
  return _internal_player_quest_data(index);
}
inline ::PlayerQuestData* CMsgGC_ServerQuestUpdateData::_internal_add_player_quest_data() {
  return player_quest_data_.Add();
}
inline ::PlayerQuestData* CMsgGC_ServerQuestUpdateData::add_player_quest_data() {
  ::PlayerQuestData* _add = _internal_add_player_quest_data();
  // @@protoc_insertion_point(field_add:CMsgGC_ServerQuestUpdateData.player_quest_data)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlayerQuestData >&
CMsgGC_ServerQuestUpdateData::player_quest_data() const {
  // @@protoc_insertion_point(field_list:CMsgGC_ServerQuestUpdateData.player_quest_data)
  return player_quest_data_;
}

// optional bytes binary_data = 2;
inline bool CMsgGC_ServerQuestUpdateData::_internal_has_binary_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGC_ServerQuestUpdateData::has_binary_data() const {
  return _internal_has_binary_data();
}
inline void CMsgGC_ServerQuestUpdateData::clear_binary_data() {
  binary_data_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgGC_ServerQuestUpdateData::binary_data() const {
  // @@protoc_insertion_point(field_get:CMsgGC_ServerQuestUpdateData.binary_data)
  return _internal_binary_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgGC_ServerQuestUpdateData::set_binary_data(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 binary_data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgGC_ServerQuestUpdateData.binary_data)
}
inline std::string* CMsgGC_ServerQuestUpdateData::mutable_binary_data() {
  std::string* _s = _internal_mutable_binary_data();
  // @@protoc_insertion_point(field_mutable:CMsgGC_ServerQuestUpdateData.binary_data)
  return _s;
}
inline const std::string& CMsgGC_ServerQuestUpdateData::_internal_binary_data() const {
  return binary_data_.Get();
}
inline void CMsgGC_ServerQuestUpdateData::_internal_set_binary_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  binary_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgGC_ServerQuestUpdateData::_internal_mutable_binary_data() {
  _has_bits_[0] |= 0x00000001u;
  return binary_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgGC_ServerQuestUpdateData::release_binary_data() {
  // @@protoc_insertion_point(field_release:CMsgGC_ServerQuestUpdateData.binary_data)
  if (!_internal_has_binary_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return binary_data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CMsgGC_ServerQuestUpdateData::set_allocated_binary_data(std::string* binary_data) {
  if (binary_data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  binary_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), binary_data,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CMsgGC_ServerQuestUpdateData.binary_data)
}

// optional uint32 mm_game_mode = 3;
inline bool CMsgGC_ServerQuestUpdateData::_internal_has_mm_game_mode() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgGC_ServerQuestUpdateData::has_mm_game_mode() const {
  return _internal_has_mm_game_mode();
}
inline void CMsgGC_ServerQuestUpdateData::clear_mm_game_mode() {
  mm_game_mode_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGC_ServerQuestUpdateData::_internal_mm_game_mode() const {
  return mm_game_mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGC_ServerQuestUpdateData::mm_game_mode() const {
  // @@protoc_insertion_point(field_get:CMsgGC_ServerQuestUpdateData.mm_game_mode)
  return _internal_mm_game_mode();
}
inline void CMsgGC_ServerQuestUpdateData::_internal_set_mm_game_mode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  mm_game_mode_ = value;
}
inline void CMsgGC_ServerQuestUpdateData::set_mm_game_mode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_mm_game_mode(value);
  // @@protoc_insertion_point(field_set:CMsgGC_ServerQuestUpdateData.mm_game_mode)
}

// optional .ScoreLeaderboardData missionlbsdata = 4;
inline bool CMsgGC_ServerQuestUpdateData::_internal_has_missionlbsdata() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || missionlbsdata_ != nullptr);
  return value;
}
inline bool CMsgGC_ServerQuestUpdateData::has_missionlbsdata() const {
  return _internal_has_missionlbsdata();
}
inline void CMsgGC_ServerQuestUpdateData::clear_missionlbsdata() {
  if (missionlbsdata_ != nullptr) missionlbsdata_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::ScoreLeaderboardData& CMsgGC_ServerQuestUpdateData::_internal_missionlbsdata() const {
  const ::ScoreLeaderboardData* p = missionlbsdata_;
  return p != nullptr ? *p : reinterpret_cast<const ::ScoreLeaderboardData&>(
      ::_ScoreLeaderboardData_default_instance_);
}
inline const ::ScoreLeaderboardData& CMsgGC_ServerQuestUpdateData::missionlbsdata() const {
  // @@protoc_insertion_point(field_get:CMsgGC_ServerQuestUpdateData.missionlbsdata)
  return _internal_missionlbsdata();
}
inline void CMsgGC_ServerQuestUpdateData::unsafe_arena_set_allocated_missionlbsdata(
    ::ScoreLeaderboardData* missionlbsdata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(missionlbsdata_);
  }
  missionlbsdata_ = missionlbsdata;
  if (missionlbsdata) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgGC_ServerQuestUpdateData.missionlbsdata)
}
inline ::ScoreLeaderboardData* CMsgGC_ServerQuestUpdateData::release_missionlbsdata() {
  _has_bits_[0] &= ~0x00000002u;
  ::ScoreLeaderboardData* temp = missionlbsdata_;
  missionlbsdata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ScoreLeaderboardData* CMsgGC_ServerQuestUpdateData::unsafe_arena_release_missionlbsdata() {
  // @@protoc_insertion_point(field_release:CMsgGC_ServerQuestUpdateData.missionlbsdata)
  _has_bits_[0] &= ~0x00000002u;
  ::ScoreLeaderboardData* temp = missionlbsdata_;
  missionlbsdata_ = nullptr;
  return temp;
}
inline ::ScoreLeaderboardData* CMsgGC_ServerQuestUpdateData::_internal_mutable_missionlbsdata() {
  _has_bits_[0] |= 0x00000002u;
  if (missionlbsdata_ == nullptr) {
    auto* p = CreateMaybeMessage<::ScoreLeaderboardData>(GetArenaForAllocation());
    missionlbsdata_ = p;
  }
  return missionlbsdata_;
}
inline ::ScoreLeaderboardData* CMsgGC_ServerQuestUpdateData::mutable_missionlbsdata() {
  ::ScoreLeaderboardData* _msg = _internal_mutable_missionlbsdata();
  // @@protoc_insertion_point(field_mutable:CMsgGC_ServerQuestUpdateData.missionlbsdata)
  return _msg;
}
inline void CMsgGC_ServerQuestUpdateData::set_allocated_missionlbsdata(::ScoreLeaderboardData* missionlbsdata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete missionlbsdata_;
  }
  if (missionlbsdata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ScoreLeaderboardData>::GetOwningArena(missionlbsdata);
    if (message_arena != submessage_arena) {
      missionlbsdata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, missionlbsdata, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  missionlbsdata_ = missionlbsdata;
  // @@protoc_insertion_point(field_set_allocated:CMsgGC_ServerQuestUpdateData.missionlbsdata)
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_MatchmakingGCOperationalStats

// optional int32 packetid = 1;
inline bool CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::_internal_has_packetid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::has_packetid() const {
  return _internal_has_packetid();
}
inline void CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::clear_packetid() {
  packetid_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::_internal_packetid() const {
  return packetid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::packetid() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingGCOperationalStats.packetid)
  return _internal_packetid();
}
inline void CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::_internal_set_packetid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  packetid_ = value;
}
inline void CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::set_packetid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_packetid(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_MatchmakingGCOperationalStats.packetid)
}

// repeated .OperationalStatisticDescription namekeys = 2;
inline int CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::_internal_namekeys_size() const {
  return namekeys_.size();
}
inline int CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::namekeys_size() const {
  return _internal_namekeys_size();
}
inline void CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::clear_namekeys() {
  namekeys_.Clear();
}
inline ::OperationalStatisticDescription* CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::mutable_namekeys(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgGCCStrike15_v2_MatchmakingGCOperationalStats.namekeys)
  return namekeys_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OperationalStatisticDescription >*
CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::mutable_namekeys() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCCStrike15_v2_MatchmakingGCOperationalStats.namekeys)
  return &namekeys_;
}
inline const ::OperationalStatisticDescription& CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::_internal_namekeys(int index) const {
  return namekeys_.Get(index);
}
inline const ::OperationalStatisticDescription& CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::namekeys(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingGCOperationalStats.namekeys)
  return _internal_namekeys(index);
}
inline ::OperationalStatisticDescription* CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::_internal_add_namekeys() {
  return namekeys_.Add();
}
inline ::OperationalStatisticDescription* CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::add_namekeys() {
  ::OperationalStatisticDescription* _add = _internal_add_namekeys();
  // @@protoc_insertion_point(field_add:CMsgGCCStrike15_v2_MatchmakingGCOperationalStats.namekeys)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OperationalStatisticDescription >&
CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::namekeys() const {
  // @@protoc_insertion_point(field_list:CMsgGCCStrike15_v2_MatchmakingGCOperationalStats.namekeys)
  return namekeys_;
}

// repeated .OperationalStatisticsPacket packets = 3;
inline int CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::_internal_packets_size() const {
  return packets_.size();
}
inline int CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::packets_size() const {
  return _internal_packets_size();
}
inline void CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::clear_packets() {
  packets_.Clear();
}
inline ::OperationalStatisticsPacket* CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::mutable_packets(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgGCCStrike15_v2_MatchmakingGCOperationalStats.packets)
  return packets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OperationalStatisticsPacket >*
CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::mutable_packets() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCCStrike15_v2_MatchmakingGCOperationalStats.packets)
  return &packets_;
}
inline const ::OperationalStatisticsPacket& CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::_internal_packets(int index) const {
  return packets_.Get(index);
}
inline const ::OperationalStatisticsPacket& CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::packets(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingGCOperationalStats.packets)
  return _internal_packets(index);
}
inline ::OperationalStatisticsPacket* CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::_internal_add_packets() {
  return packets_.Add();
}
inline ::OperationalStatisticsPacket* CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::add_packets() {
  ::OperationalStatisticsPacket* _add = _internal_add_packets();
  // @@protoc_insertion_point(field_add:CMsgGCCStrike15_v2_MatchmakingGCOperationalStats.packets)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OperationalStatisticsPacket >&
CMsgGCCStrike15_v2_MatchmakingGCOperationalStats::packets() const {
  // @@protoc_insertion_point(field_list:CMsgGCCStrike15_v2_MatchmakingGCOperationalStats.packets)
  return packets_;
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm

// optional uint32 token = 1;
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::_internal_has_token() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::has_token() const {
  return _internal_has_token();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::clear_token() {
  token_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::_internal_token() const {
  return token_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::token() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm.token)
  return _internal_token();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::_internal_set_token(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  token_ = value;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::set_token(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm.token)
}

// optional uint32 stamp = 2;
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::_internal_has_stamp() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::has_stamp() const {
  return _internal_has_stamp();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::clear_stamp() {
  stamp_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::_internal_stamp() const {
  return stamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::stamp() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm.stamp)
  return _internal_stamp();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::_internal_set_stamp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  stamp_ = value;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::set_stamp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_stamp(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm.stamp)
}

// optional uint64 exchange = 3;
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::_internal_has_exchange() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::has_exchange() const {
  return _internal_has_exchange();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::clear_exchange() {
  exchange_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::_internal_exchange() const {
  return exchange_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::exchange() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm.exchange)
  return _internal_exchange();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::_internal_set_exchange(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  exchange_ = value;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::set_exchange(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_exchange(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm.exchange)
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_GC2ServerReservationUpdate

// optional uint32 viewers_external_total = 1;
inline bool CMsgGCCStrike15_v2_GC2ServerReservationUpdate::_internal_has_viewers_external_total() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_GC2ServerReservationUpdate::has_viewers_external_total() const {
  return _internal_has_viewers_external_total();
}
inline void CMsgGCCStrike15_v2_GC2ServerReservationUpdate::clear_viewers_external_total() {
  viewers_external_total_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_GC2ServerReservationUpdate::_internal_viewers_external_total() const {
  return viewers_external_total_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_GC2ServerReservationUpdate::viewers_external_total() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_GC2ServerReservationUpdate.viewers_external_total)
  return _internal_viewers_external_total();
}
inline void CMsgGCCStrike15_v2_GC2ServerReservationUpdate::_internal_set_viewers_external_total(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  viewers_external_total_ = value;
}
inline void CMsgGCCStrike15_v2_GC2ServerReservationUpdate::set_viewers_external_total(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_viewers_external_total(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_GC2ServerReservationUpdate.viewers_external_total)
}

// optional uint32 viewers_external_steam = 2;
inline bool CMsgGCCStrike15_v2_GC2ServerReservationUpdate::_internal_has_viewers_external_steam() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_GC2ServerReservationUpdate::has_viewers_external_steam() const {
  return _internal_has_viewers_external_steam();
}
inline void CMsgGCCStrike15_v2_GC2ServerReservationUpdate::clear_viewers_external_steam() {
  viewers_external_steam_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_GC2ServerReservationUpdate::_internal_viewers_external_steam() const {
  return viewers_external_steam_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_GC2ServerReservationUpdate::viewers_external_steam() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_GC2ServerReservationUpdate.viewers_external_steam)
  return _internal_viewers_external_steam();
}
inline void CMsgGCCStrike15_v2_GC2ServerReservationUpdate::_internal_set_viewers_external_steam(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  viewers_external_steam_ = value;
}
inline void CMsgGCCStrike15_v2_GC2ServerReservationUpdate::set_viewers_external_steam(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_viewers_external_steam(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_GC2ServerReservationUpdate.viewers_external_steam)
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_MatchmakingStart

// repeated uint32 account_ids = 1;
inline int CMsgGCCStrike15_v2_MatchmakingStart::_internal_account_ids_size() const {
  return account_ids_.size();
}
inline int CMsgGCCStrike15_v2_MatchmakingStart::account_ids_size() const {
  return _internal_account_ids_size();
}
inline void CMsgGCCStrike15_v2_MatchmakingStart::clear_account_ids() {
  account_ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_MatchmakingStart::_internal_account_ids(int index) const {
  return account_ids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_MatchmakingStart::account_ids(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingStart.account_ids)
  return _internal_account_ids(index);
}
inline void CMsgGCCStrike15_v2_MatchmakingStart::set_account_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  account_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_MatchmakingStart.account_ids)
}
inline void CMsgGCCStrike15_v2_MatchmakingStart::_internal_add_account_ids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  account_ids_.Add(value);
}
inline void CMsgGCCStrike15_v2_MatchmakingStart::add_account_ids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_account_ids(value);
  // @@protoc_insertion_point(field_add:CMsgGCCStrike15_v2_MatchmakingStart.account_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CMsgGCCStrike15_v2_MatchmakingStart::_internal_account_ids() const {
  return account_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CMsgGCCStrike15_v2_MatchmakingStart::account_ids() const {
  // @@protoc_insertion_point(field_list:CMsgGCCStrike15_v2_MatchmakingStart.account_ids)
  return _internal_account_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CMsgGCCStrike15_v2_MatchmakingStart::_internal_mutable_account_ids() {
  return &account_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CMsgGCCStrike15_v2_MatchmakingStart::mutable_account_ids() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCCStrike15_v2_MatchmakingStart.account_ids)
  return _internal_mutable_account_ids();
}

// optional uint32 game_type = 2;
inline bool CMsgGCCStrike15_v2_MatchmakingStart::_internal_has_game_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_MatchmakingStart::has_game_type() const {
  return _internal_has_game_type();
}
inline void CMsgGCCStrike15_v2_MatchmakingStart::clear_game_type() {
  game_type_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_MatchmakingStart::_internal_game_type() const {
  return game_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_MatchmakingStart::game_type() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingStart.game_type)
  return _internal_game_type();
}
inline void CMsgGCCStrike15_v2_MatchmakingStart::_internal_set_game_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  game_type_ = value;
}
inline void CMsgGCCStrike15_v2_MatchmakingStart::set_game_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_game_type(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_MatchmakingStart.game_type)
}

// optional string ticket_data = 3;
inline bool CMsgGCCStrike15_v2_MatchmakingStart::_internal_has_ticket_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_MatchmakingStart::has_ticket_data() const {
  return _internal_has_ticket_data();
}
inline void CMsgGCCStrike15_v2_MatchmakingStart::clear_ticket_data() {
  ticket_data_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgGCCStrike15_v2_MatchmakingStart::ticket_data() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingStart.ticket_data)
  return _internal_ticket_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgGCCStrike15_v2_MatchmakingStart::set_ticket_data(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 ticket_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_MatchmakingStart.ticket_data)
}
inline std::string* CMsgGCCStrike15_v2_MatchmakingStart::mutable_ticket_data() {
  std::string* _s = _internal_mutable_ticket_data();
  // @@protoc_insertion_point(field_mutable:CMsgGCCStrike15_v2_MatchmakingStart.ticket_data)
  return _s;
}
inline const std::string& CMsgGCCStrike15_v2_MatchmakingStart::_internal_ticket_data() const {
  return ticket_data_.Get();
}
inline void CMsgGCCStrike15_v2_MatchmakingStart::_internal_set_ticket_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  ticket_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgGCCStrike15_v2_MatchmakingStart::_internal_mutable_ticket_data() {
  _has_bits_[0] |= 0x00000001u;
  return ticket_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgGCCStrike15_v2_MatchmakingStart::release_ticket_data() {
  // @@protoc_insertion_point(field_release:CMsgGCCStrike15_v2_MatchmakingStart.ticket_data)
  if (!_internal_has_ticket_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return ticket_data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CMsgGCCStrike15_v2_MatchmakingStart::set_allocated_ticket_data(std::string* ticket_data) {
  if (ticket_data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ticket_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ticket_data,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CMsgGCCStrike15_v2_MatchmakingStart.ticket_data)
}

// optional uint32 client_version = 4;
inline bool CMsgGCCStrike15_v2_MatchmakingStart::_internal_has_client_version() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_MatchmakingStart::has_client_version() const {
  return _internal_has_client_version();
}
inline void CMsgGCCStrike15_v2_MatchmakingStart::clear_client_version() {
  client_version_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_MatchmakingStart::_internal_client_version() const {
  return client_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_MatchmakingStart::client_version() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingStart.client_version)
  return _internal_client_version();
}
inline void CMsgGCCStrike15_v2_MatchmakingStart::_internal_set_client_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  client_version_ = value;
}
inline void CMsgGCCStrike15_v2_MatchmakingStart::set_client_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_client_version(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_MatchmakingStart.client_version)
}

// optional .TournamentMatchSetup tournament_match = 5;
inline bool CMsgGCCStrike15_v2_MatchmakingStart::_internal_has_tournament_match() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || tournament_match_ != nullptr);
  return value;
}
inline bool CMsgGCCStrike15_v2_MatchmakingStart::has_tournament_match() const {
  return _internal_has_tournament_match();
}
inline void CMsgGCCStrike15_v2_MatchmakingStart::clear_tournament_match() {
  if (tournament_match_ != nullptr) tournament_match_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::TournamentMatchSetup& CMsgGCCStrike15_v2_MatchmakingStart::_internal_tournament_match() const {
  const ::TournamentMatchSetup* p = tournament_match_;
  return p != nullptr ? *p : reinterpret_cast<const ::TournamentMatchSetup&>(
      ::_TournamentMatchSetup_default_instance_);
}
inline const ::TournamentMatchSetup& CMsgGCCStrike15_v2_MatchmakingStart::tournament_match() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingStart.tournament_match)
  return _internal_tournament_match();
}
inline void CMsgGCCStrike15_v2_MatchmakingStart::unsafe_arena_set_allocated_tournament_match(
    ::TournamentMatchSetup* tournament_match) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tournament_match_);
  }
  tournament_match_ = tournament_match;
  if (tournament_match) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgGCCStrike15_v2_MatchmakingStart.tournament_match)
}
inline ::TournamentMatchSetup* CMsgGCCStrike15_v2_MatchmakingStart::release_tournament_match() {
  _has_bits_[0] &= ~0x00000002u;
  ::TournamentMatchSetup* temp = tournament_match_;
  tournament_match_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TournamentMatchSetup* CMsgGCCStrike15_v2_MatchmakingStart::unsafe_arena_release_tournament_match() {
  // @@protoc_insertion_point(field_release:CMsgGCCStrike15_v2_MatchmakingStart.tournament_match)
  _has_bits_[0] &= ~0x00000002u;
  ::TournamentMatchSetup* temp = tournament_match_;
  tournament_match_ = nullptr;
  return temp;
}
inline ::TournamentMatchSetup* CMsgGCCStrike15_v2_MatchmakingStart::_internal_mutable_tournament_match() {
  _has_bits_[0] |= 0x00000002u;
  if (tournament_match_ == nullptr) {
    auto* p = CreateMaybeMessage<::TournamentMatchSetup>(GetArenaForAllocation());
    tournament_match_ = p;
  }
  return tournament_match_;
}
inline ::TournamentMatchSetup* CMsgGCCStrike15_v2_MatchmakingStart::mutable_tournament_match() {
  ::TournamentMatchSetup* _msg = _internal_mutable_tournament_match();
  // @@protoc_insertion_point(field_mutable:CMsgGCCStrike15_v2_MatchmakingStart.tournament_match)
  return _msg;
}
inline void CMsgGCCStrike15_v2_MatchmakingStart::set_allocated_tournament_match(::TournamentMatchSetup* tournament_match) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete tournament_match_;
  }
  if (tournament_match) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TournamentMatchSetup>::GetOwningArena(tournament_match);
    if (message_arena != submessage_arena) {
      tournament_match = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tournament_match, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  tournament_match_ = tournament_match;
  // @@protoc_insertion_point(field_set_allocated:CMsgGCCStrike15_v2_MatchmakingStart.tournament_match)
}

// optional bool prime_only = 6;
inline bool CMsgGCCStrike15_v2_MatchmakingStart::_internal_has_prime_only() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_MatchmakingStart::has_prime_only() const {
  return _internal_has_prime_only();
}
inline void CMsgGCCStrike15_v2_MatchmakingStart::clear_prime_only() {
  prime_only_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CMsgGCCStrike15_v2_MatchmakingStart::_internal_prime_only() const {
  return prime_only_;
}
inline bool CMsgGCCStrike15_v2_MatchmakingStart::prime_only() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingStart.prime_only)
  return _internal_prime_only();
}
inline void CMsgGCCStrike15_v2_MatchmakingStart::_internal_set_prime_only(bool value) {
  _has_bits_[0] |= 0x00000010u;
  prime_only_ = value;
}
inline void CMsgGCCStrike15_v2_MatchmakingStart::set_prime_only(bool value) {
  _internal_set_prime_only(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_MatchmakingStart.prime_only)
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_MatchmakingStop

// optional int32 abandon = 1;
inline bool CMsgGCCStrike15_v2_MatchmakingStop::_internal_has_abandon() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_MatchmakingStop::has_abandon() const {
  return _internal_has_abandon();
}
inline void CMsgGCCStrike15_v2_MatchmakingStop::clear_abandon() {
  abandon_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgGCCStrike15_v2_MatchmakingStop::_internal_abandon() const {
  return abandon_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgGCCStrike15_v2_MatchmakingStop::abandon() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingStop.abandon)
  return _internal_abandon();
}
inline void CMsgGCCStrike15_v2_MatchmakingStop::_internal_set_abandon(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  abandon_ = value;
}
inline void CMsgGCCStrike15_v2_MatchmakingStop::set_abandon(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_abandon(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_MatchmakingStop.abandon)
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_MatchmakingClient2ServerPing

// repeated .GameServerPing gameserverpings = 1;
inline int CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::_internal_gameserverpings_size() const {
  return gameserverpings_.size();
}
inline int CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::gameserverpings_size() const {
  return _internal_gameserverpings_size();
}
inline void CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::clear_gameserverpings() {
  gameserverpings_.Clear();
}
inline ::GameServerPing* CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::mutable_gameserverpings(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgGCCStrike15_v2_MatchmakingClient2ServerPing.gameserverpings)
  return gameserverpings_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GameServerPing >*
CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::mutable_gameserverpings() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCCStrike15_v2_MatchmakingClient2ServerPing.gameserverpings)
  return &gameserverpings_;
}
inline const ::GameServerPing& CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::_internal_gameserverpings(int index) const {
  return gameserverpings_.Get(index);
}
inline const ::GameServerPing& CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::gameserverpings(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingClient2ServerPing.gameserverpings)
  return _internal_gameserverpings(index);
}
inline ::GameServerPing* CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::_internal_add_gameserverpings() {
  return gameserverpings_.Add();
}
inline ::GameServerPing* CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::add_gameserverpings() {
  ::GameServerPing* _add = _internal_add_gameserverpings();
  // @@protoc_insertion_point(field_add:CMsgGCCStrike15_v2_MatchmakingClient2ServerPing.gameserverpings)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GameServerPing >&
CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::gameserverpings() const {
  // @@protoc_insertion_point(field_list:CMsgGCCStrike15_v2_MatchmakingClient2ServerPing.gameserverpings)
  return gameserverpings_;
}

// optional int32 offset_index = 2;
inline bool CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::_internal_has_offset_index() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::has_offset_index() const {
  return _internal_has_offset_index();
}
inline void CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::clear_offset_index() {
  offset_index_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::_internal_offset_index() const {
  return offset_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::offset_index() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingClient2ServerPing.offset_index)
  return _internal_offset_index();
}
inline void CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::_internal_set_offset_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  offset_index_ = value;
}
inline void CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::set_offset_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_offset_index(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_MatchmakingClient2ServerPing.offset_index)
}

// optional int32 final_batch = 3;
inline bool CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::_internal_has_final_batch() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::has_final_batch() const {
  return _internal_has_final_batch();
}
inline void CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::clear_final_batch() {
  final_batch_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::_internal_final_batch() const {
  return final_batch_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::final_batch() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingClient2ServerPing.final_batch)
  return _internal_final_batch();
}
inline void CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::_internal_set_final_batch(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  final_batch_ = value;
}
inline void CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::set_final_batch(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_final_batch(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_MatchmakingClient2ServerPing.final_batch)
}

// repeated .DataCenterPing data_center_pings = 4;
inline int CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::_internal_data_center_pings_size() const {
  return data_center_pings_.size();
}
inline int CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::data_center_pings_size() const {
  return _internal_data_center_pings_size();
}
inline void CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::clear_data_center_pings() {
  data_center_pings_.Clear();
}
inline ::DataCenterPing* CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::mutable_data_center_pings(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgGCCStrike15_v2_MatchmakingClient2ServerPing.data_center_pings)
  return data_center_pings_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DataCenterPing >*
CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::mutable_data_center_pings() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCCStrike15_v2_MatchmakingClient2ServerPing.data_center_pings)
  return &data_center_pings_;
}
inline const ::DataCenterPing& CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::_internal_data_center_pings(int index) const {
  return data_center_pings_.Get(index);
}
inline const ::DataCenterPing& CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::data_center_pings(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingClient2ServerPing.data_center_pings)
  return _internal_data_center_pings(index);
}
inline ::DataCenterPing* CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::_internal_add_data_center_pings() {
  return data_center_pings_.Add();
}
inline ::DataCenterPing* CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::add_data_center_pings() {
  ::DataCenterPing* _add = _internal_add_data_center_pings();
  // @@protoc_insertion_point(field_add:CMsgGCCStrike15_v2_MatchmakingClient2ServerPing.data_center_pings)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DataCenterPing >&
CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::data_center_pings() const {
  // @@protoc_insertion_point(field_list:CMsgGCCStrike15_v2_MatchmakingClient2ServerPing.data_center_pings)
  return data_center_pings_;
}

// optional uint32 max_ping = 5;
inline bool CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::_internal_has_max_ping() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::has_max_ping() const {
  return _internal_has_max_ping();
}
inline void CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::clear_max_ping() {
  max_ping_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::_internal_max_ping() const {
  return max_ping_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::max_ping() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingClient2ServerPing.max_ping)
  return _internal_max_ping();
}
inline void CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::_internal_set_max_ping(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  max_ping_ = value;
}
inline void CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::set_max_ping(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_ping(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_MatchmakingClient2ServerPing.max_ping)
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note

// optional int32 type = 1;
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::has_type() const {
  return _internal_has_type();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::type() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.Note.type)
  return _internal_type();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  type_ = value;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.Note.type)
}

// optional int32 region_id = 2;
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::_internal_has_region_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::has_region_id() const {
  return _internal_has_region_id();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::clear_region_id() {
  region_id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::_internal_region_id() const {
  return region_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::region_id() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.Note.region_id)
  return _internal_region_id();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::_internal_set_region_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  region_id_ = value;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::set_region_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_region_id(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.Note.region_id)
}

// optional float region_r = 3;
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::_internal_has_region_r() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::has_region_r() const {
  return _internal_has_region_r();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::clear_region_r() {
  region_r_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::_internal_region_r() const {
  return region_r_;
}
inline float CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::region_r() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.Note.region_r)
  return _internal_region_r();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::_internal_set_region_r(float value) {
  _has_bits_[0] |= 0x00000004u;
  region_r_ = value;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::set_region_r(float value) {
  _internal_set_region_r(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.Note.region_r)
}

// optional float distance = 4;
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::_internal_has_distance() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::has_distance() const {
  return _internal_has_distance();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::clear_distance() {
  distance_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::_internal_distance() const {
  return distance_;
}
inline float CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::distance() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.Note.distance)
  return _internal_distance();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::_internal_set_distance(float value) {
  _has_bits_[0] |= 0x00000008u;
  distance_ = value;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::set_distance(float value) {
  _internal_set_distance(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.Note.distance)
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate

// optional int32 matchmaking = 1;
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::_internal_has_matchmaking() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::has_matchmaking() const {
  return _internal_has_matchmaking();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::clear_matchmaking() {
  matchmaking_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::_internal_matchmaking() const {
  return matchmaking_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::matchmaking() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.matchmaking)
  return _internal_matchmaking();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::_internal_set_matchmaking(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  matchmaking_ = value;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::set_matchmaking(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_matchmaking(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.matchmaking)
}

// repeated uint32 waiting_account_id_sessions = 2;
inline int CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::_internal_waiting_account_id_sessions_size() const {
  return waiting_account_id_sessions_.size();
}
inline int CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::waiting_account_id_sessions_size() const {
  return _internal_waiting_account_id_sessions_size();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::clear_waiting_account_id_sessions() {
  waiting_account_id_sessions_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::_internal_waiting_account_id_sessions(int index) const {
  return waiting_account_id_sessions_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::waiting_account_id_sessions(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.waiting_account_id_sessions)
  return _internal_waiting_account_id_sessions(index);
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::set_waiting_account_id_sessions(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  waiting_account_id_sessions_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.waiting_account_id_sessions)
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::_internal_add_waiting_account_id_sessions(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  waiting_account_id_sessions_.Add(value);
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::add_waiting_account_id_sessions(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_waiting_account_id_sessions(value);
  // @@protoc_insertion_point(field_add:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.waiting_account_id_sessions)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::_internal_waiting_account_id_sessions() const {
  return waiting_account_id_sessions_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::waiting_account_id_sessions() const {
  // @@protoc_insertion_point(field_list:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.waiting_account_id_sessions)
  return _internal_waiting_account_id_sessions();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::_internal_mutable_waiting_account_id_sessions() {
  return &waiting_account_id_sessions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::mutable_waiting_account_id_sessions() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.waiting_account_id_sessions)
  return _internal_mutable_waiting_account_id_sessions();
}

// optional string error = 3;
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::_internal_has_error() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::has_error() const {
  return _internal_has_error();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::clear_error() {
  error_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::error() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.error)
  return _internal_error();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::set_error(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.error)
}
inline std::string* CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.error)
  return _s;
}
inline const std::string& CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::_internal_error() const {
  return error_.Get();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::_internal_set_error(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::_internal_mutable_error() {
  _has_bits_[0] |= 0x00000001u;
  return error_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::release_error() {
  // @@protoc_insertion_point(field_release:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.error)
  if (!_internal_has_error()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return error_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  error_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.error)
}

// repeated uint32 ongoingmatch_account_id_sessions = 6;
inline int CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::_internal_ongoingmatch_account_id_sessions_size() const {
  return ongoingmatch_account_id_sessions_.size();
}
inline int CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::ongoingmatch_account_id_sessions_size() const {
  return _internal_ongoingmatch_account_id_sessions_size();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::clear_ongoingmatch_account_id_sessions() {
  ongoingmatch_account_id_sessions_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::_internal_ongoingmatch_account_id_sessions(int index) const {
  return ongoingmatch_account_id_sessions_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::ongoingmatch_account_id_sessions(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.ongoingmatch_account_id_sessions)
  return _internal_ongoingmatch_account_id_sessions(index);
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::set_ongoingmatch_account_id_sessions(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  ongoingmatch_account_id_sessions_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.ongoingmatch_account_id_sessions)
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::_internal_add_ongoingmatch_account_id_sessions(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  ongoingmatch_account_id_sessions_.Add(value);
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::add_ongoingmatch_account_id_sessions(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_ongoingmatch_account_id_sessions(value);
  // @@protoc_insertion_point(field_add:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.ongoingmatch_account_id_sessions)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::_internal_ongoingmatch_account_id_sessions() const {
  return ongoingmatch_account_id_sessions_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::ongoingmatch_account_id_sessions() const {
  // @@protoc_insertion_point(field_list:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.ongoingmatch_account_id_sessions)
  return _internal_ongoingmatch_account_id_sessions();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::_internal_mutable_ongoingmatch_account_id_sessions() {
  return &ongoingmatch_account_id_sessions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::mutable_ongoingmatch_account_id_sessions() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.ongoingmatch_account_id_sessions)
  return _internal_mutable_ongoingmatch_account_id_sessions();
}

// optional .GlobalStatistics global_stats = 7;
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::_internal_has_global_stats() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || global_stats_ != nullptr);
  return value;
}
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::has_global_stats() const {
  return _internal_has_global_stats();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::clear_global_stats() {
  if (global_stats_ != nullptr) global_stats_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::GlobalStatistics& CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::_internal_global_stats() const {
  const ::GlobalStatistics* p = global_stats_;
  return p != nullptr ? *p : reinterpret_cast<const ::GlobalStatistics&>(
      ::_GlobalStatistics_default_instance_);
}
inline const ::GlobalStatistics& CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::global_stats() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.global_stats)
  return _internal_global_stats();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::unsafe_arena_set_allocated_global_stats(
    ::GlobalStatistics* global_stats) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(global_stats_);
  }
  global_stats_ = global_stats;
  if (global_stats) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.global_stats)
}
inline ::GlobalStatistics* CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::release_global_stats() {
  _has_bits_[0] &= ~0x00000002u;
  ::GlobalStatistics* temp = global_stats_;
  global_stats_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::GlobalStatistics* CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::unsafe_arena_release_global_stats() {
  // @@protoc_insertion_point(field_release:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.global_stats)
  _has_bits_[0] &= ~0x00000002u;
  ::GlobalStatistics* temp = global_stats_;
  global_stats_ = nullptr;
  return temp;
}
inline ::GlobalStatistics* CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::_internal_mutable_global_stats() {
  _has_bits_[0] |= 0x00000002u;
  if (global_stats_ == nullptr) {
    auto* p = CreateMaybeMessage<::GlobalStatistics>(GetArenaForAllocation());
    global_stats_ = p;
  }
  return global_stats_;
}
inline ::GlobalStatistics* CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::mutable_global_stats() {
  ::GlobalStatistics* _msg = _internal_mutable_global_stats();
  // @@protoc_insertion_point(field_mutable:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.global_stats)
  return _msg;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::set_allocated_global_stats(::GlobalStatistics* global_stats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete global_stats_;
  }
  if (global_stats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::GlobalStatistics>::GetOwningArena(global_stats);
    if (message_arena != submessage_arena) {
      global_stats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, global_stats, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  global_stats_ = global_stats;
  // @@protoc_insertion_point(field_set_allocated:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.global_stats)
}

// repeated uint32 failping_account_id_sessions = 8;
inline int CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::_internal_failping_account_id_sessions_size() const {
  return failping_account_id_sessions_.size();
}
inline int CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::failping_account_id_sessions_size() const {
  return _internal_failping_account_id_sessions_size();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::clear_failping_account_id_sessions() {
  failping_account_id_sessions_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::_internal_failping_account_id_sessions(int index) const {
  return failping_account_id_sessions_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::failping_account_id_sessions(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.failping_account_id_sessions)
  return _internal_failping_account_id_sessions(index);
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::set_failping_account_id_sessions(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  failping_account_id_sessions_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.failping_account_id_sessions)
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::_internal_add_failping_account_id_sessions(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  failping_account_id_sessions_.Add(value);
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::add_failping_account_id_sessions(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_failping_account_id_sessions(value);
  // @@protoc_insertion_point(field_add:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.failping_account_id_sessions)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::_internal_failping_account_id_sessions() const {
  return failping_account_id_sessions_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::failping_account_id_sessions() const {
  // @@protoc_insertion_point(field_list:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.failping_account_id_sessions)
  return _internal_failping_account_id_sessions();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::_internal_mutable_failping_account_id_sessions() {
  return &failping_account_id_sessions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::mutable_failping_account_id_sessions() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.failping_account_id_sessions)
  return _internal_mutable_failping_account_id_sessions();
}

// repeated uint32 penalty_account_id_sessions = 9;
inline int CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::_internal_penalty_account_id_sessions_size() const {
  return penalty_account_id_sessions_.size();
}
inline int CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::penalty_account_id_sessions_size() const {
  return _internal_penalty_account_id_sessions_size();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::clear_penalty_account_id_sessions() {
  penalty_account_id_sessions_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::_internal_penalty_account_id_sessions(int index) const {
  return penalty_account_id_sessions_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::penalty_account_id_sessions(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.penalty_account_id_sessions)
  return _internal_penalty_account_id_sessions(index);
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::set_penalty_account_id_sessions(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  penalty_account_id_sessions_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.penalty_account_id_sessions)
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::_internal_add_penalty_account_id_sessions(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  penalty_account_id_sessions_.Add(value);
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::add_penalty_account_id_sessions(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_penalty_account_id_sessions(value);
  // @@protoc_insertion_point(field_add:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.penalty_account_id_sessions)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::_internal_penalty_account_id_sessions() const {
  return penalty_account_id_sessions_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::penalty_account_id_sessions() const {
  // @@protoc_insertion_point(field_list:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.penalty_account_id_sessions)
  return _internal_penalty_account_id_sessions();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::_internal_mutable_penalty_account_id_sessions() {
  return &penalty_account_id_sessions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::mutable_penalty_account_id_sessions() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.penalty_account_id_sessions)
  return _internal_mutable_penalty_account_id_sessions();
}

// repeated uint32 failready_account_id_sessions = 10;
inline int CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::_internal_failready_account_id_sessions_size() const {
  return failready_account_id_sessions_.size();
}
inline int CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::failready_account_id_sessions_size() const {
  return _internal_failready_account_id_sessions_size();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::clear_failready_account_id_sessions() {
  failready_account_id_sessions_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::_internal_failready_account_id_sessions(int index) const {
  return failready_account_id_sessions_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::failready_account_id_sessions(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.failready_account_id_sessions)
  return _internal_failready_account_id_sessions(index);
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::set_failready_account_id_sessions(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  failready_account_id_sessions_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.failready_account_id_sessions)
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::_internal_add_failready_account_id_sessions(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  failready_account_id_sessions_.Add(value);
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::add_failready_account_id_sessions(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_failready_account_id_sessions(value);
  // @@protoc_insertion_point(field_add:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.failready_account_id_sessions)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::_internal_failready_account_id_sessions() const {
  return failready_account_id_sessions_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::failready_account_id_sessions() const {
  // @@protoc_insertion_point(field_list:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.failready_account_id_sessions)
  return _internal_failready_account_id_sessions();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::_internal_mutable_failready_account_id_sessions() {
  return &failready_account_id_sessions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::mutable_failready_account_id_sessions() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.failready_account_id_sessions)
  return _internal_mutable_failready_account_id_sessions();
}

// repeated uint32 vacbanned_account_id_sessions = 11;
inline int CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::_internal_vacbanned_account_id_sessions_size() const {
  return vacbanned_account_id_sessions_.size();
}
inline int CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::vacbanned_account_id_sessions_size() const {
  return _internal_vacbanned_account_id_sessions_size();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::clear_vacbanned_account_id_sessions() {
  vacbanned_account_id_sessions_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::_internal_vacbanned_account_id_sessions(int index) const {
  return vacbanned_account_id_sessions_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::vacbanned_account_id_sessions(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.vacbanned_account_id_sessions)
  return _internal_vacbanned_account_id_sessions(index);
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::set_vacbanned_account_id_sessions(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  vacbanned_account_id_sessions_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.vacbanned_account_id_sessions)
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::_internal_add_vacbanned_account_id_sessions(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  vacbanned_account_id_sessions_.Add(value);
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::add_vacbanned_account_id_sessions(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_vacbanned_account_id_sessions(value);
  // @@protoc_insertion_point(field_add:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.vacbanned_account_id_sessions)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::_internal_vacbanned_account_id_sessions() const {
  return vacbanned_account_id_sessions_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::vacbanned_account_id_sessions() const {
  // @@protoc_insertion_point(field_list:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.vacbanned_account_id_sessions)
  return _internal_vacbanned_account_id_sessions();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::_internal_mutable_vacbanned_account_id_sessions() {
  return &vacbanned_account_id_sessions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::mutable_vacbanned_account_id_sessions() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.vacbanned_account_id_sessions)
  return _internal_mutable_vacbanned_account_id_sessions();
}

// optional .IpAddressMask server_ipaddress_mask = 12;
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::_internal_has_server_ipaddress_mask() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || server_ipaddress_mask_ != nullptr);
  return value;
}
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::has_server_ipaddress_mask() const {
  return _internal_has_server_ipaddress_mask();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::clear_server_ipaddress_mask() {
  if (server_ipaddress_mask_ != nullptr) server_ipaddress_mask_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::IpAddressMask& CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::_internal_server_ipaddress_mask() const {
  const ::IpAddressMask* p = server_ipaddress_mask_;
  return p != nullptr ? *p : reinterpret_cast<const ::IpAddressMask&>(
      ::_IpAddressMask_default_instance_);
}
inline const ::IpAddressMask& CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::server_ipaddress_mask() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.server_ipaddress_mask)
  return _internal_server_ipaddress_mask();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::unsafe_arena_set_allocated_server_ipaddress_mask(
    ::IpAddressMask* server_ipaddress_mask) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(server_ipaddress_mask_);
  }
  server_ipaddress_mask_ = server_ipaddress_mask;
  if (server_ipaddress_mask) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.server_ipaddress_mask)
}
inline ::IpAddressMask* CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::release_server_ipaddress_mask() {
  _has_bits_[0] &= ~0x00000004u;
  ::IpAddressMask* temp = server_ipaddress_mask_;
  server_ipaddress_mask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::IpAddressMask* CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::unsafe_arena_release_server_ipaddress_mask() {
  // @@protoc_insertion_point(field_release:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.server_ipaddress_mask)
  _has_bits_[0] &= ~0x00000004u;
  ::IpAddressMask* temp = server_ipaddress_mask_;
  server_ipaddress_mask_ = nullptr;
  return temp;
}
inline ::IpAddressMask* CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::_internal_mutable_server_ipaddress_mask() {
  _has_bits_[0] |= 0x00000004u;
  if (server_ipaddress_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::IpAddressMask>(GetArenaForAllocation());
    server_ipaddress_mask_ = p;
  }
  return server_ipaddress_mask_;
}
inline ::IpAddressMask* CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::mutable_server_ipaddress_mask() {
  ::IpAddressMask* _msg = _internal_mutable_server_ipaddress_mask();
  // @@protoc_insertion_point(field_mutable:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.server_ipaddress_mask)
  return _msg;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::set_allocated_server_ipaddress_mask(::IpAddressMask* server_ipaddress_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete server_ipaddress_mask_;
  }
  if (server_ipaddress_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::IpAddressMask>::GetOwningArena(server_ipaddress_mask);
    if (message_arena != submessage_arena) {
      server_ipaddress_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, server_ipaddress_mask, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  server_ipaddress_mask_ = server_ipaddress_mask;
  // @@protoc_insertion_point(field_set_allocated:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.server_ipaddress_mask)
}

// repeated .CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.Note notes = 13;
inline int CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::_internal_notes_size() const {
  return notes_.size();
}
inline int CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::notes_size() const {
  return _internal_notes_size();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::clear_notes() {
  notes_.Clear();
}
inline ::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note* CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::mutable_notes(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.notes)
  return notes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note >*
CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::mutable_notes() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.notes)
  return &notes_;
}
inline const ::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note& CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::_internal_notes(int index) const {
  return notes_.Get(index);
}
inline const ::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note& CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::notes(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.notes)
  return _internal_notes(index);
}
inline ::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note* CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::_internal_add_notes() {
  return notes_.Add();
}
inline ::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note* CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::add_notes() {
  ::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note* _add = _internal_add_notes();
  // @@protoc_insertion_point(field_add:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.notes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note >&
CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::notes() const {
  // @@protoc_insertion_point(field_list:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.notes)
  return notes_;
}

// repeated uint32 penalty_account_id_sessions_green = 14;
inline int CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::_internal_penalty_account_id_sessions_green_size() const {
  return penalty_account_id_sessions_green_.size();
}
inline int CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::penalty_account_id_sessions_green_size() const {
  return _internal_penalty_account_id_sessions_green_size();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::clear_penalty_account_id_sessions_green() {
  penalty_account_id_sessions_green_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::_internal_penalty_account_id_sessions_green(int index) const {
  return penalty_account_id_sessions_green_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::penalty_account_id_sessions_green(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.penalty_account_id_sessions_green)
  return _internal_penalty_account_id_sessions_green(index);
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::set_penalty_account_id_sessions_green(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  penalty_account_id_sessions_green_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.penalty_account_id_sessions_green)
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::_internal_add_penalty_account_id_sessions_green(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  penalty_account_id_sessions_green_.Add(value);
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::add_penalty_account_id_sessions_green(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_penalty_account_id_sessions_green(value);
  // @@protoc_insertion_point(field_add:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.penalty_account_id_sessions_green)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::_internal_penalty_account_id_sessions_green() const {
  return penalty_account_id_sessions_green_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::penalty_account_id_sessions_green() const {
  // @@protoc_insertion_point(field_list:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.penalty_account_id_sessions_green)
  return _internal_penalty_account_id_sessions_green();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::_internal_mutable_penalty_account_id_sessions_green() {
  return &penalty_account_id_sessions_green_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::mutable_penalty_account_id_sessions_green() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.penalty_account_id_sessions_green)
  return _internal_mutable_penalty_account_id_sessions_green();
}

// repeated uint32 insufficientlevel_sessions = 15;
inline int CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::_internal_insufficientlevel_sessions_size() const {
  return insufficientlevel_sessions_.size();
}
inline int CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::insufficientlevel_sessions_size() const {
  return _internal_insufficientlevel_sessions_size();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::clear_insufficientlevel_sessions() {
  insufficientlevel_sessions_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::_internal_insufficientlevel_sessions(int index) const {
  return insufficientlevel_sessions_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::insufficientlevel_sessions(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.insufficientlevel_sessions)
  return _internal_insufficientlevel_sessions(index);
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::set_insufficientlevel_sessions(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  insufficientlevel_sessions_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.insufficientlevel_sessions)
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::_internal_add_insufficientlevel_sessions(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  insufficientlevel_sessions_.Add(value);
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::add_insufficientlevel_sessions(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_insufficientlevel_sessions(value);
  // @@protoc_insertion_point(field_add:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.insufficientlevel_sessions)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::_internal_insufficientlevel_sessions() const {
  return insufficientlevel_sessions_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::insufficientlevel_sessions() const {
  // @@protoc_insertion_point(field_list:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.insufficientlevel_sessions)
  return _internal_insufficientlevel_sessions();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::_internal_mutable_insufficientlevel_sessions() {
  return &insufficientlevel_sessions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::mutable_insufficientlevel_sessions() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.insufficientlevel_sessions)
  return _internal_mutable_insufficientlevel_sessions();
}

// repeated uint32 vsncheck_account_id_sessions = 16;
inline int CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::_internal_vsncheck_account_id_sessions_size() const {
  return vsncheck_account_id_sessions_.size();
}
inline int CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::vsncheck_account_id_sessions_size() const {
  return _internal_vsncheck_account_id_sessions_size();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::clear_vsncheck_account_id_sessions() {
  vsncheck_account_id_sessions_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::_internal_vsncheck_account_id_sessions(int index) const {
  return vsncheck_account_id_sessions_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::vsncheck_account_id_sessions(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.vsncheck_account_id_sessions)
  return _internal_vsncheck_account_id_sessions(index);
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::set_vsncheck_account_id_sessions(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  vsncheck_account_id_sessions_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.vsncheck_account_id_sessions)
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::_internal_add_vsncheck_account_id_sessions(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  vsncheck_account_id_sessions_.Add(value);
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::add_vsncheck_account_id_sessions(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_vsncheck_account_id_sessions(value);
  // @@protoc_insertion_point(field_add:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.vsncheck_account_id_sessions)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::_internal_vsncheck_account_id_sessions() const {
  return vsncheck_account_id_sessions_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::vsncheck_account_id_sessions() const {
  // @@protoc_insertion_point(field_list:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.vsncheck_account_id_sessions)
  return _internal_vsncheck_account_id_sessions();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::_internal_mutable_vsncheck_account_id_sessions() {
  return &vsncheck_account_id_sessions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::mutable_vsncheck_account_id_sessions() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.vsncheck_account_id_sessions)
  return _internal_mutable_vsncheck_account_id_sessions();
}

// repeated uint32 launcher_mismatch_sessions = 17;
inline int CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::_internal_launcher_mismatch_sessions_size() const {
  return launcher_mismatch_sessions_.size();
}
inline int CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::launcher_mismatch_sessions_size() const {
  return _internal_launcher_mismatch_sessions_size();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::clear_launcher_mismatch_sessions() {
  launcher_mismatch_sessions_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::_internal_launcher_mismatch_sessions(int index) const {
  return launcher_mismatch_sessions_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::launcher_mismatch_sessions(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.launcher_mismatch_sessions)
  return _internal_launcher_mismatch_sessions(index);
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::set_launcher_mismatch_sessions(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  launcher_mismatch_sessions_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.launcher_mismatch_sessions)
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::_internal_add_launcher_mismatch_sessions(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  launcher_mismatch_sessions_.Add(value);
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::add_launcher_mismatch_sessions(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_launcher_mismatch_sessions(value);
  // @@protoc_insertion_point(field_add:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.launcher_mismatch_sessions)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::_internal_launcher_mismatch_sessions() const {
  return launcher_mismatch_sessions_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::launcher_mismatch_sessions() const {
  // @@protoc_insertion_point(field_list:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.launcher_mismatch_sessions)
  return _internal_launcher_mismatch_sessions();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::_internal_mutable_launcher_mismatch_sessions() {
  return &launcher_mismatch_sessions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::mutable_launcher_mismatch_sessions() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.launcher_mismatch_sessions)
  return _internal_mutable_launcher_mismatch_sessions();
}

// -------------------------------------------------------------------

// CDataGCCStrike15_v2_TournamentMatchDraft_Entry

// optional int32 mapid = 1;
inline bool CDataGCCStrike15_v2_TournamentMatchDraft_Entry::_internal_has_mapid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDataGCCStrike15_v2_TournamentMatchDraft_Entry::has_mapid() const {
  return _internal_has_mapid();
}
inline void CDataGCCStrike15_v2_TournamentMatchDraft_Entry::clear_mapid() {
  mapid_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CDataGCCStrike15_v2_TournamentMatchDraft_Entry::_internal_mapid() const {
  return mapid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CDataGCCStrike15_v2_TournamentMatchDraft_Entry::mapid() const {
  // @@protoc_insertion_point(field_get:CDataGCCStrike15_v2_TournamentMatchDraft.Entry.mapid)
  return _internal_mapid();
}
inline void CDataGCCStrike15_v2_TournamentMatchDraft_Entry::_internal_set_mapid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  mapid_ = value;
}
inline void CDataGCCStrike15_v2_TournamentMatchDraft_Entry::set_mapid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mapid(value);
  // @@protoc_insertion_point(field_set:CDataGCCStrike15_v2_TournamentMatchDraft.Entry.mapid)
}

// optional int32 team_id_ct = 2;
inline bool CDataGCCStrike15_v2_TournamentMatchDraft_Entry::_internal_has_team_id_ct() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDataGCCStrike15_v2_TournamentMatchDraft_Entry::has_team_id_ct() const {
  return _internal_has_team_id_ct();
}
inline void CDataGCCStrike15_v2_TournamentMatchDraft_Entry::clear_team_id_ct() {
  team_id_ct_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CDataGCCStrike15_v2_TournamentMatchDraft_Entry::_internal_team_id_ct() const {
  return team_id_ct_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CDataGCCStrike15_v2_TournamentMatchDraft_Entry::team_id_ct() const {
  // @@protoc_insertion_point(field_get:CDataGCCStrike15_v2_TournamentMatchDraft.Entry.team_id_ct)
  return _internal_team_id_ct();
}
inline void CDataGCCStrike15_v2_TournamentMatchDraft_Entry::_internal_set_team_id_ct(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  team_id_ct_ = value;
}
inline void CDataGCCStrike15_v2_TournamentMatchDraft_Entry::set_team_id_ct(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_team_id_ct(value);
  // @@protoc_insertion_point(field_set:CDataGCCStrike15_v2_TournamentMatchDraft.Entry.team_id_ct)
}

// -------------------------------------------------------------------

// CDataGCCStrike15_v2_TournamentMatchDraft

// optional int32 event_id = 1;
inline bool CDataGCCStrike15_v2_TournamentMatchDraft::_internal_has_event_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDataGCCStrike15_v2_TournamentMatchDraft::has_event_id() const {
  return _internal_has_event_id();
}
inline void CDataGCCStrike15_v2_TournamentMatchDraft::clear_event_id() {
  event_id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CDataGCCStrike15_v2_TournamentMatchDraft::_internal_event_id() const {
  return event_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CDataGCCStrike15_v2_TournamentMatchDraft::event_id() const {
  // @@protoc_insertion_point(field_get:CDataGCCStrike15_v2_TournamentMatchDraft.event_id)
  return _internal_event_id();
}
inline void CDataGCCStrike15_v2_TournamentMatchDraft::_internal_set_event_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  event_id_ = value;
}
inline void CDataGCCStrike15_v2_TournamentMatchDraft::set_event_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_event_id(value);
  // @@protoc_insertion_point(field_set:CDataGCCStrike15_v2_TournamentMatchDraft.event_id)
}

// optional int32 event_stage_id = 2;
inline bool CDataGCCStrike15_v2_TournamentMatchDraft::_internal_has_event_stage_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDataGCCStrike15_v2_TournamentMatchDraft::has_event_stage_id() const {
  return _internal_has_event_stage_id();
}
inline void CDataGCCStrike15_v2_TournamentMatchDraft::clear_event_stage_id() {
  event_stage_id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CDataGCCStrike15_v2_TournamentMatchDraft::_internal_event_stage_id() const {
  return event_stage_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CDataGCCStrike15_v2_TournamentMatchDraft::event_stage_id() const {
  // @@protoc_insertion_point(field_get:CDataGCCStrike15_v2_TournamentMatchDraft.event_stage_id)
  return _internal_event_stage_id();
}
inline void CDataGCCStrike15_v2_TournamentMatchDraft::_internal_set_event_stage_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  event_stage_id_ = value;
}
inline void CDataGCCStrike15_v2_TournamentMatchDraft::set_event_stage_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_event_stage_id(value);
  // @@protoc_insertion_point(field_set:CDataGCCStrike15_v2_TournamentMatchDraft.event_stage_id)
}

// optional int32 team_id_0 = 3;
inline bool CDataGCCStrike15_v2_TournamentMatchDraft::_internal_has_team_id_0() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CDataGCCStrike15_v2_TournamentMatchDraft::has_team_id_0() const {
  return _internal_has_team_id_0();
}
inline void CDataGCCStrike15_v2_TournamentMatchDraft::clear_team_id_0() {
  team_id_0_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CDataGCCStrike15_v2_TournamentMatchDraft::_internal_team_id_0() const {
  return team_id_0_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CDataGCCStrike15_v2_TournamentMatchDraft::team_id_0() const {
  // @@protoc_insertion_point(field_get:CDataGCCStrike15_v2_TournamentMatchDraft.team_id_0)
  return _internal_team_id_0();
}
inline void CDataGCCStrike15_v2_TournamentMatchDraft::_internal_set_team_id_0(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  team_id_0_ = value;
}
inline void CDataGCCStrike15_v2_TournamentMatchDraft::set_team_id_0(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_team_id_0(value);
  // @@protoc_insertion_point(field_set:CDataGCCStrike15_v2_TournamentMatchDraft.team_id_0)
}

// optional int32 team_id_1 = 4;
inline bool CDataGCCStrike15_v2_TournamentMatchDraft::_internal_has_team_id_1() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CDataGCCStrike15_v2_TournamentMatchDraft::has_team_id_1() const {
  return _internal_has_team_id_1();
}
inline void CDataGCCStrike15_v2_TournamentMatchDraft::clear_team_id_1() {
  team_id_1_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CDataGCCStrike15_v2_TournamentMatchDraft::_internal_team_id_1() const {
  return team_id_1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CDataGCCStrike15_v2_TournamentMatchDraft::team_id_1() const {
  // @@protoc_insertion_point(field_get:CDataGCCStrike15_v2_TournamentMatchDraft.team_id_1)
  return _internal_team_id_1();
}
inline void CDataGCCStrike15_v2_TournamentMatchDraft::_internal_set_team_id_1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  team_id_1_ = value;
}
inline void CDataGCCStrike15_v2_TournamentMatchDraft::set_team_id_1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_team_id_1(value);
  // @@protoc_insertion_point(field_set:CDataGCCStrike15_v2_TournamentMatchDraft.team_id_1)
}

// optional int32 maps_count = 5;
inline bool CDataGCCStrike15_v2_TournamentMatchDraft::_internal_has_maps_count() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CDataGCCStrike15_v2_TournamentMatchDraft::has_maps_count() const {
  return _internal_has_maps_count();
}
inline void CDataGCCStrike15_v2_TournamentMatchDraft::clear_maps_count() {
  maps_count_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CDataGCCStrike15_v2_TournamentMatchDraft::_internal_maps_count() const {
  return maps_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CDataGCCStrike15_v2_TournamentMatchDraft::maps_count() const {
  // @@protoc_insertion_point(field_get:CDataGCCStrike15_v2_TournamentMatchDraft.maps_count)
  return _internal_maps_count();
}
inline void CDataGCCStrike15_v2_TournamentMatchDraft::_internal_set_maps_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  maps_count_ = value;
}
inline void CDataGCCStrike15_v2_TournamentMatchDraft::set_maps_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_maps_count(value);
  // @@protoc_insertion_point(field_set:CDataGCCStrike15_v2_TournamentMatchDraft.maps_count)
}

// optional int32 maps_current = 6;
inline bool CDataGCCStrike15_v2_TournamentMatchDraft::_internal_has_maps_current() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CDataGCCStrike15_v2_TournamentMatchDraft::has_maps_current() const {
  return _internal_has_maps_current();
}
inline void CDataGCCStrike15_v2_TournamentMatchDraft::clear_maps_current() {
  maps_current_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CDataGCCStrike15_v2_TournamentMatchDraft::_internal_maps_current() const {
  return maps_current_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CDataGCCStrike15_v2_TournamentMatchDraft::maps_current() const {
  // @@protoc_insertion_point(field_get:CDataGCCStrike15_v2_TournamentMatchDraft.maps_current)
  return _internal_maps_current();
}
inline void CDataGCCStrike15_v2_TournamentMatchDraft::_internal_set_maps_current(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  maps_current_ = value;
}
inline void CDataGCCStrike15_v2_TournamentMatchDraft::set_maps_current(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_maps_current(value);
  // @@protoc_insertion_point(field_set:CDataGCCStrike15_v2_TournamentMatchDraft.maps_current)
}

// optional int32 team_id_start = 7;
inline bool CDataGCCStrike15_v2_TournamentMatchDraft::_internal_has_team_id_start() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CDataGCCStrike15_v2_TournamentMatchDraft::has_team_id_start() const {
  return _internal_has_team_id_start();
}
inline void CDataGCCStrike15_v2_TournamentMatchDraft::clear_team_id_start() {
  team_id_start_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CDataGCCStrike15_v2_TournamentMatchDraft::_internal_team_id_start() const {
  return team_id_start_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CDataGCCStrike15_v2_TournamentMatchDraft::team_id_start() const {
  // @@protoc_insertion_point(field_get:CDataGCCStrike15_v2_TournamentMatchDraft.team_id_start)
  return _internal_team_id_start();
}
inline void CDataGCCStrike15_v2_TournamentMatchDraft::_internal_set_team_id_start(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  team_id_start_ = value;
}
inline void CDataGCCStrike15_v2_TournamentMatchDraft::set_team_id_start(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_team_id_start(value);
  // @@protoc_insertion_point(field_set:CDataGCCStrike15_v2_TournamentMatchDraft.team_id_start)
}

// optional int32 team_id_veto1 = 8;
inline bool CDataGCCStrike15_v2_TournamentMatchDraft::_internal_has_team_id_veto1() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CDataGCCStrike15_v2_TournamentMatchDraft::has_team_id_veto1() const {
  return _internal_has_team_id_veto1();
}
inline void CDataGCCStrike15_v2_TournamentMatchDraft::clear_team_id_veto1() {
  team_id_veto1_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CDataGCCStrike15_v2_TournamentMatchDraft::_internal_team_id_veto1() const {
  return team_id_veto1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CDataGCCStrike15_v2_TournamentMatchDraft::team_id_veto1() const {
  // @@protoc_insertion_point(field_get:CDataGCCStrike15_v2_TournamentMatchDraft.team_id_veto1)
  return _internal_team_id_veto1();
}
inline void CDataGCCStrike15_v2_TournamentMatchDraft::_internal_set_team_id_veto1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  team_id_veto1_ = value;
}
inline void CDataGCCStrike15_v2_TournamentMatchDraft::set_team_id_veto1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_team_id_veto1(value);
  // @@protoc_insertion_point(field_set:CDataGCCStrike15_v2_TournamentMatchDraft.team_id_veto1)
}

// optional int32 team_id_pickn = 9;
inline bool CDataGCCStrike15_v2_TournamentMatchDraft::_internal_has_team_id_pickn() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CDataGCCStrike15_v2_TournamentMatchDraft::has_team_id_pickn() const {
  return _internal_has_team_id_pickn();
}
inline void CDataGCCStrike15_v2_TournamentMatchDraft::clear_team_id_pickn() {
  team_id_pickn_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CDataGCCStrike15_v2_TournamentMatchDraft::_internal_team_id_pickn() const {
  return team_id_pickn_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CDataGCCStrike15_v2_TournamentMatchDraft::team_id_pickn() const {
  // @@protoc_insertion_point(field_get:CDataGCCStrike15_v2_TournamentMatchDraft.team_id_pickn)
  return _internal_team_id_pickn();
}
inline void CDataGCCStrike15_v2_TournamentMatchDraft::_internal_set_team_id_pickn(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  team_id_pickn_ = value;
}
inline void CDataGCCStrike15_v2_TournamentMatchDraft::set_team_id_pickn(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_team_id_pickn(value);
  // @@protoc_insertion_point(field_set:CDataGCCStrike15_v2_TournamentMatchDraft.team_id_pickn)
}

// repeated .CDataGCCStrike15_v2_TournamentMatchDraft.Entry drafts = 10;
inline int CDataGCCStrike15_v2_TournamentMatchDraft::_internal_drafts_size() const {
  return drafts_.size();
}
inline int CDataGCCStrike15_v2_TournamentMatchDraft::drafts_size() const {
  return _internal_drafts_size();
}
inline void CDataGCCStrike15_v2_TournamentMatchDraft::clear_drafts() {
  drafts_.Clear();
}
inline ::CDataGCCStrike15_v2_TournamentMatchDraft_Entry* CDataGCCStrike15_v2_TournamentMatchDraft::mutable_drafts(int index) {
  // @@protoc_insertion_point(field_mutable:CDataGCCStrike15_v2_TournamentMatchDraft.drafts)
  return drafts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDataGCCStrike15_v2_TournamentMatchDraft_Entry >*
CDataGCCStrike15_v2_TournamentMatchDraft::mutable_drafts() {
  // @@protoc_insertion_point(field_mutable_list:CDataGCCStrike15_v2_TournamentMatchDraft.drafts)
  return &drafts_;
}
inline const ::CDataGCCStrike15_v2_TournamentMatchDraft_Entry& CDataGCCStrike15_v2_TournamentMatchDraft::_internal_drafts(int index) const {
  return drafts_.Get(index);
}
inline const ::CDataGCCStrike15_v2_TournamentMatchDraft_Entry& CDataGCCStrike15_v2_TournamentMatchDraft::drafts(int index) const {
  // @@protoc_insertion_point(field_get:CDataGCCStrike15_v2_TournamentMatchDraft.drafts)
  return _internal_drafts(index);
}
inline ::CDataGCCStrike15_v2_TournamentMatchDraft_Entry* CDataGCCStrike15_v2_TournamentMatchDraft::_internal_add_drafts() {
  return drafts_.Add();
}
inline ::CDataGCCStrike15_v2_TournamentMatchDraft_Entry* CDataGCCStrike15_v2_TournamentMatchDraft::add_drafts() {
  ::CDataGCCStrike15_v2_TournamentMatchDraft_Entry* _add = _internal_add_drafts();
  // @@protoc_insertion_point(field_add:CDataGCCStrike15_v2_TournamentMatchDraft.drafts)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDataGCCStrike15_v2_TournamentMatchDraft_Entry >&
CDataGCCStrike15_v2_TournamentMatchDraft::drafts() const {
  // @@protoc_insertion_point(field_list:CDataGCCStrike15_v2_TournamentMatchDraft.drafts)
  return drafts_;
}

// -------------------------------------------------------------------

// CPreMatchInfoData_TeamStats

// optional int32 match_info_idxtxt = 1;
inline bool CPreMatchInfoData_TeamStats::_internal_has_match_info_idxtxt() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CPreMatchInfoData_TeamStats::has_match_info_idxtxt() const {
  return _internal_has_match_info_idxtxt();
}
inline void CPreMatchInfoData_TeamStats::clear_match_info_idxtxt() {
  match_info_idxtxt_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CPreMatchInfoData_TeamStats::_internal_match_info_idxtxt() const {
  return match_info_idxtxt_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CPreMatchInfoData_TeamStats::match_info_idxtxt() const {
  // @@protoc_insertion_point(field_get:CPreMatchInfoData.TeamStats.match_info_idxtxt)
  return _internal_match_info_idxtxt();
}
inline void CPreMatchInfoData_TeamStats::_internal_set_match_info_idxtxt(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  match_info_idxtxt_ = value;
}
inline void CPreMatchInfoData_TeamStats::set_match_info_idxtxt(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_match_info_idxtxt(value);
  // @@protoc_insertion_point(field_set:CPreMatchInfoData.TeamStats.match_info_idxtxt)
}

// optional string match_info_txt = 2;
inline bool CPreMatchInfoData_TeamStats::_internal_has_match_info_txt() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPreMatchInfoData_TeamStats::has_match_info_txt() const {
  return _internal_has_match_info_txt();
}
inline void CPreMatchInfoData_TeamStats::clear_match_info_txt() {
  match_info_txt_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CPreMatchInfoData_TeamStats::match_info_txt() const {
  // @@protoc_insertion_point(field_get:CPreMatchInfoData.TeamStats.match_info_txt)
  return _internal_match_info_txt();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CPreMatchInfoData_TeamStats::set_match_info_txt(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 match_info_txt_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CPreMatchInfoData.TeamStats.match_info_txt)
}
inline std::string* CPreMatchInfoData_TeamStats::mutable_match_info_txt() {
  std::string* _s = _internal_mutable_match_info_txt();
  // @@protoc_insertion_point(field_mutable:CPreMatchInfoData.TeamStats.match_info_txt)
  return _s;
}
inline const std::string& CPreMatchInfoData_TeamStats::_internal_match_info_txt() const {
  return match_info_txt_.Get();
}
inline void CPreMatchInfoData_TeamStats::_internal_set_match_info_txt(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  match_info_txt_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CPreMatchInfoData_TeamStats::_internal_mutable_match_info_txt() {
  _has_bits_[0] |= 0x00000001u;
  return match_info_txt_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CPreMatchInfoData_TeamStats::release_match_info_txt() {
  // @@protoc_insertion_point(field_release:CPreMatchInfoData.TeamStats.match_info_txt)
  if (!_internal_has_match_info_txt()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return match_info_txt_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CPreMatchInfoData_TeamStats::set_allocated_match_info_txt(std::string* match_info_txt) {
  if (match_info_txt != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  match_info_txt_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), match_info_txt,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CPreMatchInfoData.TeamStats.match_info_txt)
}

// repeated string match_info_teams = 3;
inline int CPreMatchInfoData_TeamStats::_internal_match_info_teams_size() const {
  return match_info_teams_.size();
}
inline int CPreMatchInfoData_TeamStats::match_info_teams_size() const {
  return _internal_match_info_teams_size();
}
inline void CPreMatchInfoData_TeamStats::clear_match_info_teams() {
  match_info_teams_.Clear();
}
inline std::string* CPreMatchInfoData_TeamStats::add_match_info_teams() {
  std::string* _s = _internal_add_match_info_teams();
  // @@protoc_insertion_point(field_add_mutable:CPreMatchInfoData.TeamStats.match_info_teams)
  return _s;
}
inline const std::string& CPreMatchInfoData_TeamStats::_internal_match_info_teams(int index) const {
  return match_info_teams_.Get(index);
}
inline const std::string& CPreMatchInfoData_TeamStats::match_info_teams(int index) const {
  // @@protoc_insertion_point(field_get:CPreMatchInfoData.TeamStats.match_info_teams)
  return _internal_match_info_teams(index);
}
inline std::string* CPreMatchInfoData_TeamStats::mutable_match_info_teams(int index) {
  // @@protoc_insertion_point(field_mutable:CPreMatchInfoData.TeamStats.match_info_teams)
  return match_info_teams_.Mutable(index);
}
inline void CPreMatchInfoData_TeamStats::set_match_info_teams(int index, const std::string& value) {
  match_info_teams_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:CPreMatchInfoData.TeamStats.match_info_teams)
}
inline void CPreMatchInfoData_TeamStats::set_match_info_teams(int index, std::string&& value) {
  match_info_teams_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:CPreMatchInfoData.TeamStats.match_info_teams)
}
inline void CPreMatchInfoData_TeamStats::set_match_info_teams(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  match_info_teams_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CPreMatchInfoData.TeamStats.match_info_teams)
}
inline void CPreMatchInfoData_TeamStats::set_match_info_teams(int index, const char* value, size_t size) {
  match_info_teams_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CPreMatchInfoData.TeamStats.match_info_teams)
}
inline std::string* CPreMatchInfoData_TeamStats::_internal_add_match_info_teams() {
  return match_info_teams_.Add();
}
inline void CPreMatchInfoData_TeamStats::add_match_info_teams(const std::string& value) {
  match_info_teams_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CPreMatchInfoData.TeamStats.match_info_teams)
}
inline void CPreMatchInfoData_TeamStats::add_match_info_teams(std::string&& value) {
  match_info_teams_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CPreMatchInfoData.TeamStats.match_info_teams)
}
inline void CPreMatchInfoData_TeamStats::add_match_info_teams(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  match_info_teams_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CPreMatchInfoData.TeamStats.match_info_teams)
}
inline void CPreMatchInfoData_TeamStats::add_match_info_teams(const char* value, size_t size) {
  match_info_teams_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CPreMatchInfoData.TeamStats.match_info_teams)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CPreMatchInfoData_TeamStats::match_info_teams() const {
  // @@protoc_insertion_point(field_list:CPreMatchInfoData.TeamStats.match_info_teams)
  return match_info_teams_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CPreMatchInfoData_TeamStats::mutable_match_info_teams() {
  // @@protoc_insertion_point(field_mutable_list:CPreMatchInfoData.TeamStats.match_info_teams)
  return &match_info_teams_;
}

// -------------------------------------------------------------------

// CPreMatchInfoData

// optional int32 predictions_pct = 1;
inline bool CPreMatchInfoData::_internal_has_predictions_pct() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CPreMatchInfoData::has_predictions_pct() const {
  return _internal_has_predictions_pct();
}
inline void CPreMatchInfoData::clear_predictions_pct() {
  predictions_pct_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CPreMatchInfoData::_internal_predictions_pct() const {
  return predictions_pct_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CPreMatchInfoData::predictions_pct() const {
  // @@protoc_insertion_point(field_get:CPreMatchInfoData.predictions_pct)
  return _internal_predictions_pct();
}
inline void CPreMatchInfoData::_internal_set_predictions_pct(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  predictions_pct_ = value;
}
inline void CPreMatchInfoData::set_predictions_pct(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_predictions_pct(value);
  // @@protoc_insertion_point(field_set:CPreMatchInfoData.predictions_pct)
}

// optional .CDataGCCStrike15_v2_TournamentMatchDraft draft = 4;
inline bool CPreMatchInfoData::_internal_has_draft() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || draft_ != nullptr);
  return value;
}
inline bool CPreMatchInfoData::has_draft() const {
  return _internal_has_draft();
}
inline void CPreMatchInfoData::clear_draft() {
  if (draft_ != nullptr) draft_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CDataGCCStrike15_v2_TournamentMatchDraft& CPreMatchInfoData::_internal_draft() const {
  const ::CDataGCCStrike15_v2_TournamentMatchDraft* p = draft_;
  return p != nullptr ? *p : reinterpret_cast<const ::CDataGCCStrike15_v2_TournamentMatchDraft&>(
      ::_CDataGCCStrike15_v2_TournamentMatchDraft_default_instance_);
}
inline const ::CDataGCCStrike15_v2_TournamentMatchDraft& CPreMatchInfoData::draft() const {
  // @@protoc_insertion_point(field_get:CPreMatchInfoData.draft)
  return _internal_draft();
}
inline void CPreMatchInfoData::unsafe_arena_set_allocated_draft(
    ::CDataGCCStrike15_v2_TournamentMatchDraft* draft) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(draft_);
  }
  draft_ = draft;
  if (draft) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CPreMatchInfoData.draft)
}
inline ::CDataGCCStrike15_v2_TournamentMatchDraft* CPreMatchInfoData::release_draft() {
  _has_bits_[0] &= ~0x00000001u;
  ::CDataGCCStrike15_v2_TournamentMatchDraft* temp = draft_;
  draft_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CDataGCCStrike15_v2_TournamentMatchDraft* CPreMatchInfoData::unsafe_arena_release_draft() {
  // @@protoc_insertion_point(field_release:CPreMatchInfoData.draft)
  _has_bits_[0] &= ~0x00000001u;
  ::CDataGCCStrike15_v2_TournamentMatchDraft* temp = draft_;
  draft_ = nullptr;
  return temp;
}
inline ::CDataGCCStrike15_v2_TournamentMatchDraft* CPreMatchInfoData::_internal_mutable_draft() {
  _has_bits_[0] |= 0x00000001u;
  if (draft_ == nullptr) {
    auto* p = CreateMaybeMessage<::CDataGCCStrike15_v2_TournamentMatchDraft>(GetArenaForAllocation());
    draft_ = p;
  }
  return draft_;
}
inline ::CDataGCCStrike15_v2_TournamentMatchDraft* CPreMatchInfoData::mutable_draft() {
  ::CDataGCCStrike15_v2_TournamentMatchDraft* _msg = _internal_mutable_draft();
  // @@protoc_insertion_point(field_mutable:CPreMatchInfoData.draft)
  return _msg;
}
inline void CPreMatchInfoData::set_allocated_draft(::CDataGCCStrike15_v2_TournamentMatchDraft* draft) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete draft_;
  }
  if (draft) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CDataGCCStrike15_v2_TournamentMatchDraft>::GetOwningArena(draft);
    if (message_arena != submessage_arena) {
      draft = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, draft, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  draft_ = draft;
  // @@protoc_insertion_point(field_set_allocated:CPreMatchInfoData.draft)
}

// repeated .CPreMatchInfoData.TeamStats stats = 5;
inline int CPreMatchInfoData::_internal_stats_size() const {
  return stats_.size();
}
inline int CPreMatchInfoData::stats_size() const {
  return _internal_stats_size();
}
inline void CPreMatchInfoData::clear_stats() {
  stats_.Clear();
}
inline ::CPreMatchInfoData_TeamStats* CPreMatchInfoData::mutable_stats(int index) {
  // @@protoc_insertion_point(field_mutable:CPreMatchInfoData.stats)
  return stats_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPreMatchInfoData_TeamStats >*
CPreMatchInfoData::mutable_stats() {
  // @@protoc_insertion_point(field_mutable_list:CPreMatchInfoData.stats)
  return &stats_;
}
inline const ::CPreMatchInfoData_TeamStats& CPreMatchInfoData::_internal_stats(int index) const {
  return stats_.Get(index);
}
inline const ::CPreMatchInfoData_TeamStats& CPreMatchInfoData::stats(int index) const {
  // @@protoc_insertion_point(field_get:CPreMatchInfoData.stats)
  return _internal_stats(index);
}
inline ::CPreMatchInfoData_TeamStats* CPreMatchInfoData::_internal_add_stats() {
  return stats_.Add();
}
inline ::CPreMatchInfoData_TeamStats* CPreMatchInfoData::add_stats() {
  ::CPreMatchInfoData_TeamStats* _add = _internal_add_stats();
  // @@protoc_insertion_point(field_add:CPreMatchInfoData.stats)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPreMatchInfoData_TeamStats >&
CPreMatchInfoData::stats() const {
  // @@protoc_insertion_point(field_list:CPreMatchInfoData.stats)
  return stats_;
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve

// repeated uint32 account_ids = 1;
inline int CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::_internal_account_ids_size() const {
  return account_ids_.size();
}
inline int CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::account_ids_size() const {
  return _internal_account_ids_size();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::clear_account_ids() {
  account_ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::_internal_account_ids(int index) const {
  return account_ids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::account_ids(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.account_ids)
  return _internal_account_ids(index);
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::set_account_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  account_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.account_ids)
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::_internal_add_account_ids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  account_ids_.Add(value);
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::add_account_ids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_account_ids(value);
  // @@protoc_insertion_point(field_add:CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.account_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::_internal_account_ids() const {
  return account_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::account_ids() const {
  // @@protoc_insertion_point(field_list:CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.account_ids)
  return _internal_account_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::_internal_mutable_account_ids() {
  return &account_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::mutable_account_ids() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.account_ids)
  return _internal_mutable_account_ids();
}

// optional uint32 game_type = 2;
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::_internal_has_game_type() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::has_game_type() const {
  return _internal_has_game_type();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::clear_game_type() {
  game_type_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::_internal_game_type() const {
  return game_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::game_type() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.game_type)
  return _internal_game_type();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::_internal_set_game_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  game_type_ = value;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::set_game_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_game_type(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.game_type)
}

// optional uint64 match_id = 3;
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::_internal_has_match_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::has_match_id() const {
  return _internal_has_match_id();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::clear_match_id() {
  match_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::_internal_match_id() const {
  return match_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::match_id() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.match_id)
  return _internal_match_id();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::_internal_set_match_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  match_id_ = value;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::set_match_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_match_id(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.match_id)
}

// optional uint32 server_version = 4;
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::_internal_has_server_version() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::has_server_version() const {
  return _internal_has_server_version();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::clear_server_version() {
  server_version_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::_internal_server_version() const {
  return server_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::server_version() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.server_version)
  return _internal_server_version();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::_internal_set_server_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  server_version_ = value;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::set_server_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_server_version(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.server_version)
}

// repeated .PlayerRankingInfo rankings = 5;
inline int CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::_internal_rankings_size() const {
  return rankings_.size();
}
inline int CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::rankings_size() const {
  return _internal_rankings_size();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::clear_rankings() {
  rankings_.Clear();
}
inline ::PlayerRankingInfo* CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::mutable_rankings(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.rankings)
  return rankings_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlayerRankingInfo >*
CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::mutable_rankings() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.rankings)
  return &rankings_;
}
inline const ::PlayerRankingInfo& CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::_internal_rankings(int index) const {
  return rankings_.Get(index);
}
inline const ::PlayerRankingInfo& CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::rankings(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.rankings)
  return _internal_rankings(index);
}
inline ::PlayerRankingInfo* CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::_internal_add_rankings() {
  return rankings_.Add();
}
inline ::PlayerRankingInfo* CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::add_rankings() {
  ::PlayerRankingInfo* _add = _internal_add_rankings();
  // @@protoc_insertion_point(field_add:CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.rankings)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlayerRankingInfo >&
CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::rankings() const {
  // @@protoc_insertion_point(field_list:CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.rankings)
  return rankings_;
}

// optional uint64 encryption_key = 6;
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::_internal_has_encryption_key() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::has_encryption_key() const {
  return _internal_has_encryption_key();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::clear_encryption_key() {
  encryption_key_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::_internal_encryption_key() const {
  return encryption_key_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::encryption_key() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.encryption_key)
  return _internal_encryption_key();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::_internal_set_encryption_key(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  encryption_key_ = value;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::set_encryption_key(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_encryption_key(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.encryption_key)
}

// optional uint64 encryption_key_pub = 7;
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::_internal_has_encryption_key_pub() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::has_encryption_key_pub() const {
  return _internal_has_encryption_key_pub();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::clear_encryption_key_pub() {
  encryption_key_pub_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::_internal_encryption_key_pub() const {
  return encryption_key_pub_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::encryption_key_pub() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.encryption_key_pub)
  return _internal_encryption_key_pub();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::_internal_set_encryption_key_pub(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  encryption_key_pub_ = value;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::set_encryption_key_pub(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_encryption_key_pub(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.encryption_key_pub)
}

// repeated uint32 party_ids = 8;
inline int CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::_internal_party_ids_size() const {
  return party_ids_.size();
}
inline int CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::party_ids_size() const {
  return _internal_party_ids_size();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::clear_party_ids() {
  party_ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::_internal_party_ids(int index) const {
  return party_ids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::party_ids(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.party_ids)
  return _internal_party_ids(index);
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::set_party_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  party_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.party_ids)
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::_internal_add_party_ids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  party_ids_.Add(value);
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::add_party_ids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_party_ids(value);
  // @@protoc_insertion_point(field_add:CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.party_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::_internal_party_ids() const {
  return party_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::party_ids() const {
  // @@protoc_insertion_point(field_list:CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.party_ids)
  return _internal_party_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::_internal_mutable_party_ids() {
  return &party_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::mutable_party_ids() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.party_ids)
  return _internal_mutable_party_ids();
}

// repeated .IpAddressMask whitelist = 9;
inline int CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::_internal_whitelist_size() const {
  return whitelist_.size();
}
inline int CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::whitelist_size() const {
  return _internal_whitelist_size();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::clear_whitelist() {
  whitelist_.Clear();
}
inline ::IpAddressMask* CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::mutable_whitelist(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.whitelist)
  return whitelist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IpAddressMask >*
CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::mutable_whitelist() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.whitelist)
  return &whitelist_;
}
inline const ::IpAddressMask& CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::_internal_whitelist(int index) const {
  return whitelist_.Get(index);
}
inline const ::IpAddressMask& CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::whitelist(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.whitelist)
  return _internal_whitelist(index);
}
inline ::IpAddressMask* CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::_internal_add_whitelist() {
  return whitelist_.Add();
}
inline ::IpAddressMask* CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::add_whitelist() {
  ::IpAddressMask* _add = _internal_add_whitelist();
  // @@protoc_insertion_point(field_add:CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.whitelist)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IpAddressMask >&
CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::whitelist() const {
  // @@protoc_insertion_point(field_list:CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.whitelist)
  return whitelist_;
}

// optional uint64 tv_master_steamid = 10;
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::_internal_has_tv_master_steamid() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::has_tv_master_steamid() const {
  return _internal_has_tv_master_steamid();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::clear_tv_master_steamid() {
  tv_master_steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::_internal_tv_master_steamid() const {
  return tv_master_steamid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::tv_master_steamid() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.tv_master_steamid)
  return _internal_tv_master_steamid();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::_internal_set_tv_master_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000080u;
  tv_master_steamid_ = value;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::set_tv_master_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_tv_master_steamid(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.tv_master_steamid)
}

// optional .TournamentEvent tournament_event = 11;
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::_internal_has_tournament_event() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || tournament_event_ != nullptr);
  return value;
}
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::has_tournament_event() const {
  return _internal_has_tournament_event();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::clear_tournament_event() {
  if (tournament_event_ != nullptr) tournament_event_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TournamentEvent& CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::_internal_tournament_event() const {
  const ::TournamentEvent* p = tournament_event_;
  return p != nullptr ? *p : reinterpret_cast<const ::TournamentEvent&>(
      ::_TournamentEvent_default_instance_);
}
inline const ::TournamentEvent& CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::tournament_event() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.tournament_event)
  return _internal_tournament_event();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::unsafe_arena_set_allocated_tournament_event(
    ::TournamentEvent* tournament_event) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tournament_event_);
  }
  tournament_event_ = tournament_event;
  if (tournament_event) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.tournament_event)
}
inline ::TournamentEvent* CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::release_tournament_event() {
  _has_bits_[0] &= ~0x00000001u;
  ::TournamentEvent* temp = tournament_event_;
  tournament_event_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TournamentEvent* CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::unsafe_arena_release_tournament_event() {
  // @@protoc_insertion_point(field_release:CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.tournament_event)
  _has_bits_[0] &= ~0x00000001u;
  ::TournamentEvent* temp = tournament_event_;
  tournament_event_ = nullptr;
  return temp;
}
inline ::TournamentEvent* CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::_internal_mutable_tournament_event() {
  _has_bits_[0] |= 0x00000001u;
  if (tournament_event_ == nullptr) {
    auto* p = CreateMaybeMessage<::TournamentEvent>(GetArenaForAllocation());
    tournament_event_ = p;
  }
  return tournament_event_;
}
inline ::TournamentEvent* CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::mutable_tournament_event() {
  ::TournamentEvent* _msg = _internal_mutable_tournament_event();
  // @@protoc_insertion_point(field_mutable:CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.tournament_event)
  return _msg;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::set_allocated_tournament_event(::TournamentEvent* tournament_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete tournament_event_;
  }
  if (tournament_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TournamentEvent>::GetOwningArena(tournament_event);
    if (message_arena != submessage_arena) {
      tournament_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tournament_event, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  tournament_event_ = tournament_event;
  // @@protoc_insertion_point(field_set_allocated:CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.tournament_event)
}

// repeated .TournamentTeam tournament_teams = 12;
inline int CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::_internal_tournament_teams_size() const {
  return tournament_teams_.size();
}
inline int CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::tournament_teams_size() const {
  return _internal_tournament_teams_size();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::clear_tournament_teams() {
  tournament_teams_.Clear();
}
inline ::TournamentTeam* CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::mutable_tournament_teams(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.tournament_teams)
  return tournament_teams_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TournamentTeam >*
CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::mutable_tournament_teams() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.tournament_teams)
  return &tournament_teams_;
}
inline const ::TournamentTeam& CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::_internal_tournament_teams(int index) const {
  return tournament_teams_.Get(index);
}
inline const ::TournamentTeam& CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::tournament_teams(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.tournament_teams)
  return _internal_tournament_teams(index);
}
inline ::TournamentTeam* CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::_internal_add_tournament_teams() {
  return tournament_teams_.Add();
}
inline ::TournamentTeam* CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::add_tournament_teams() {
  ::TournamentTeam* _add = _internal_add_tournament_teams();
  // @@protoc_insertion_point(field_add:CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.tournament_teams)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TournamentTeam >&
CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::tournament_teams() const {
  // @@protoc_insertion_point(field_list:CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.tournament_teams)
  return tournament_teams_;
}

// repeated uint32 tournament_casters_account_ids = 13;
inline int CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::_internal_tournament_casters_account_ids_size() const {
  return tournament_casters_account_ids_.size();
}
inline int CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::tournament_casters_account_ids_size() const {
  return _internal_tournament_casters_account_ids_size();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::clear_tournament_casters_account_ids() {
  tournament_casters_account_ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::_internal_tournament_casters_account_ids(int index) const {
  return tournament_casters_account_ids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::tournament_casters_account_ids(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.tournament_casters_account_ids)
  return _internal_tournament_casters_account_ids(index);
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::set_tournament_casters_account_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  tournament_casters_account_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.tournament_casters_account_ids)
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::_internal_add_tournament_casters_account_ids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  tournament_casters_account_ids_.Add(value);
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::add_tournament_casters_account_ids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_tournament_casters_account_ids(value);
  // @@protoc_insertion_point(field_add:CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.tournament_casters_account_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::_internal_tournament_casters_account_ids() const {
  return tournament_casters_account_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::tournament_casters_account_ids() const {
  // @@protoc_insertion_point(field_list:CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.tournament_casters_account_ids)
  return _internal_tournament_casters_account_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::_internal_mutable_tournament_casters_account_ids() {
  return &tournament_casters_account_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::mutable_tournament_casters_account_ids() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.tournament_casters_account_ids)
  return _internal_mutable_tournament_casters_account_ids();
}

// optional uint64 tv_relay_steamid = 14;
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::_internal_has_tv_relay_steamid() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::has_tv_relay_steamid() const {
  return _internal_has_tv_relay_steamid();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::clear_tv_relay_steamid() {
  tv_relay_steamid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::_internal_tv_relay_steamid() const {
  return tv_relay_steamid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::tv_relay_steamid() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.tv_relay_steamid)
  return _internal_tv_relay_steamid();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::_internal_set_tv_relay_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000100u;
  tv_relay_steamid_ = value;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::set_tv_relay_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_tv_relay_steamid(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.tv_relay_steamid)
}

// optional .CPreMatchInfoData pre_match_data = 15;
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::_internal_has_pre_match_data() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || pre_match_data_ != nullptr);
  return value;
}
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::has_pre_match_data() const {
  return _internal_has_pre_match_data();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::clear_pre_match_data() {
  if (pre_match_data_ != nullptr) pre_match_data_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::CPreMatchInfoData& CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::_internal_pre_match_data() const {
  const ::CPreMatchInfoData* p = pre_match_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::CPreMatchInfoData&>(
      ::_CPreMatchInfoData_default_instance_);
}
inline const ::CPreMatchInfoData& CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::pre_match_data() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.pre_match_data)
  return _internal_pre_match_data();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::unsafe_arena_set_allocated_pre_match_data(
    ::CPreMatchInfoData* pre_match_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pre_match_data_);
  }
  pre_match_data_ = pre_match_data;
  if (pre_match_data) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.pre_match_data)
}
inline ::CPreMatchInfoData* CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::release_pre_match_data() {
  _has_bits_[0] &= ~0x00000002u;
  ::CPreMatchInfoData* temp = pre_match_data_;
  pre_match_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CPreMatchInfoData* CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::unsafe_arena_release_pre_match_data() {
  // @@protoc_insertion_point(field_release:CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.pre_match_data)
  _has_bits_[0] &= ~0x00000002u;
  ::CPreMatchInfoData* temp = pre_match_data_;
  pre_match_data_ = nullptr;
  return temp;
}
inline ::CPreMatchInfoData* CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::_internal_mutable_pre_match_data() {
  _has_bits_[0] |= 0x00000002u;
  if (pre_match_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::CPreMatchInfoData>(GetArenaForAllocation());
    pre_match_data_ = p;
  }
  return pre_match_data_;
}
inline ::CPreMatchInfoData* CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::mutable_pre_match_data() {
  ::CPreMatchInfoData* _msg = _internal_mutable_pre_match_data();
  // @@protoc_insertion_point(field_mutable:CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.pre_match_data)
  return _msg;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::set_allocated_pre_match_data(::CPreMatchInfoData* pre_match_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete pre_match_data_;
  }
  if (pre_match_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CPreMatchInfoData>::GetOwningArena(pre_match_data);
    if (message_arena != submessage_arena) {
      pre_match_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pre_match_data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  pre_match_data_ = pre_match_data;
  // @@protoc_insertion_point(field_set_allocated:CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.pre_match_data)
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_MatchmakingServerReservationResponse

// optional uint64 reservationid = 1;
inline bool CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::_internal_has_reservationid() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::has_reservationid() const {
  return _internal_has_reservationid();
}
inline void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::clear_reservationid() {
  reservationid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::_internal_reservationid() const {
  return reservationid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::reservationid() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.reservationid)
  return _internal_reservationid();
}
inline void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::_internal_set_reservationid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  reservationid_ = value;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::set_reservationid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_reservationid(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.reservationid)
}

// optional .CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve reservation = 2;
inline bool CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::_internal_has_reservation() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || reservation_ != nullptr);
  return value;
}
inline bool CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::has_reservation() const {
  return _internal_has_reservation();
}
inline void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::clear_reservation() {
  if (reservation_ != nullptr) reservation_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve& CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::_internal_reservation() const {
  const ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* p = reservation_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve&>(
      ::_CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve_default_instance_);
}
inline const ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve& CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::reservation() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.reservation)
  return _internal_reservation();
}
inline void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::unsafe_arena_set_allocated_reservation(
    ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* reservation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reservation_);
  }
  reservation_ = reservation;
  if (reservation) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.reservation)
}
inline ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::release_reservation() {
  _has_bits_[0] &= ~0x00000004u;
  ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* temp = reservation_;
  reservation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::unsafe_arena_release_reservation() {
  // @@protoc_insertion_point(field_release:CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.reservation)
  _has_bits_[0] &= ~0x00000004u;
  ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* temp = reservation_;
  reservation_ = nullptr;
  return temp;
}
inline ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::_internal_mutable_reservation() {
  _has_bits_[0] |= 0x00000004u;
  if (reservation_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve>(GetArenaForAllocation());
    reservation_ = p;
  }
  return reservation_;
}
inline ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::mutable_reservation() {
  ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* _msg = _internal_mutable_reservation();
  // @@protoc_insertion_point(field_mutable:CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.reservation)
  return _msg;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::set_allocated_reservation(::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* reservation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reservation_;
  }
  if (reservation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve>::GetOwningArena(reservation);
    if (message_arena != submessage_arena) {
      reservation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reservation, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  reservation_ = reservation;
  // @@protoc_insertion_point(field_set_allocated:CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.reservation)
}

// optional string map = 3;
inline bool CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::_internal_has_map() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::has_map() const {
  return _internal_has_map();
}
inline void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::clear_map() {
  map_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::map() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.map)
  return _internal_map();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::set_map(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 map_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.map)
}
inline std::string* CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::mutable_map() {
  std::string* _s = _internal_mutable_map();
  // @@protoc_insertion_point(field_mutable:CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.map)
  return _s;
}
inline const std::string& CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::_internal_map() const {
  return map_.Get();
}
inline void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::_internal_set_map(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  map_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::_internal_mutable_map() {
  _has_bits_[0] |= 0x00000001u;
  return map_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::release_map() {
  // @@protoc_insertion_point(field_release:CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.map)
  if (!_internal_has_map()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return map_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::set_allocated_map(std::string* map) {
  if (map != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  map_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), map,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.map)
}

// optional uint64 gc_reservation_sent = 4;
inline bool CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::_internal_has_gc_reservation_sent() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::has_gc_reservation_sent() const {
  return _internal_has_gc_reservation_sent();
}
inline void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::clear_gc_reservation_sent() {
  gc_reservation_sent_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::_internal_gc_reservation_sent() const {
  return gc_reservation_sent_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::gc_reservation_sent() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.gc_reservation_sent)
  return _internal_gc_reservation_sent();
}
inline void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::_internal_set_gc_reservation_sent(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  gc_reservation_sent_ = value;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::set_gc_reservation_sent(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_gc_reservation_sent(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.gc_reservation_sent)
}

// optional uint32 server_version = 5;
inline bool CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::_internal_has_server_version() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::has_server_version() const {
  return _internal_has_server_version();
}
inline void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::clear_server_version() {
  server_version_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::_internal_server_version() const {
  return server_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::server_version() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.server_version)
  return _internal_server_version();
}
inline void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::_internal_set_server_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  server_version_ = value;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::set_server_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_server_version(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.server_version)
}

// optional .ServerHltvInfo tv_info = 6;
inline bool CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::_internal_has_tv_info() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || tv_info_ != nullptr);
  return value;
}
inline bool CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::has_tv_info() const {
  return _internal_has_tv_info();
}
inline void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::clear_tv_info() {
  if (tv_info_ != nullptr) tv_info_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::ServerHltvInfo& CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::_internal_tv_info() const {
  const ::ServerHltvInfo* p = tv_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::ServerHltvInfo&>(
      ::_ServerHltvInfo_default_instance_);
}
inline const ::ServerHltvInfo& CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::tv_info() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.tv_info)
  return _internal_tv_info();
}
inline void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::unsafe_arena_set_allocated_tv_info(
    ::ServerHltvInfo* tv_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tv_info_);
  }
  tv_info_ = tv_info;
  if (tv_info) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.tv_info)
}
inline ::ServerHltvInfo* CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::release_tv_info() {
  _has_bits_[0] &= ~0x00000008u;
  ::ServerHltvInfo* temp = tv_info_;
  tv_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ServerHltvInfo* CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::unsafe_arena_release_tv_info() {
  // @@protoc_insertion_point(field_release:CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.tv_info)
  _has_bits_[0] &= ~0x00000008u;
  ::ServerHltvInfo* temp = tv_info_;
  tv_info_ = nullptr;
  return temp;
}
inline ::ServerHltvInfo* CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::_internal_mutable_tv_info() {
  _has_bits_[0] |= 0x00000008u;
  if (tv_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::ServerHltvInfo>(GetArenaForAllocation());
    tv_info_ = p;
  }
  return tv_info_;
}
inline ::ServerHltvInfo* CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::mutable_tv_info() {
  ::ServerHltvInfo* _msg = _internal_mutable_tv_info();
  // @@protoc_insertion_point(field_mutable:CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.tv_info)
  return _msg;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::set_allocated_tv_info(::ServerHltvInfo* tv_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete tv_info_;
  }
  if (tv_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ServerHltvInfo>::GetOwningArena(tv_info);
    if (message_arena != submessage_arena) {
      tv_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tv_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  tv_info_ = tv_info;
  // @@protoc_insertion_point(field_set_allocated:CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.tv_info)
}

// repeated uint32 reward_player_accounts = 7;
inline int CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::_internal_reward_player_accounts_size() const {
  return reward_player_accounts_.size();
}
inline int CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::reward_player_accounts_size() const {
  return _internal_reward_player_accounts_size();
}
inline void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::clear_reward_player_accounts() {
  reward_player_accounts_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::_internal_reward_player_accounts(int index) const {
  return reward_player_accounts_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::reward_player_accounts(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.reward_player_accounts)
  return _internal_reward_player_accounts(index);
}
inline void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::set_reward_player_accounts(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  reward_player_accounts_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.reward_player_accounts)
}
inline void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::_internal_add_reward_player_accounts(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  reward_player_accounts_.Add(value);
}
inline void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::add_reward_player_accounts(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_reward_player_accounts(value);
  // @@protoc_insertion_point(field_add:CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.reward_player_accounts)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::_internal_reward_player_accounts() const {
  return reward_player_accounts_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::reward_player_accounts() const {
  // @@protoc_insertion_point(field_list:CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.reward_player_accounts)
  return _internal_reward_player_accounts();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::_internal_mutable_reward_player_accounts() {
  return &reward_player_accounts_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::mutable_reward_player_accounts() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.reward_player_accounts)
  return _internal_mutable_reward_player_accounts();
}

// repeated uint32 idle_player_accounts = 8;
inline int CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::_internal_idle_player_accounts_size() const {
  return idle_player_accounts_.size();
}
inline int CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::idle_player_accounts_size() const {
  return _internal_idle_player_accounts_size();
}
inline void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::clear_idle_player_accounts() {
  idle_player_accounts_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::_internal_idle_player_accounts(int index) const {
  return idle_player_accounts_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::idle_player_accounts(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.idle_player_accounts)
  return _internal_idle_player_accounts(index);
}
inline void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::set_idle_player_accounts(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  idle_player_accounts_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.idle_player_accounts)
}
inline void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::_internal_add_idle_player_accounts(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  idle_player_accounts_.Add(value);
}
inline void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::add_idle_player_accounts(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_idle_player_accounts(value);
  // @@protoc_insertion_point(field_add:CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.idle_player_accounts)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::_internal_idle_player_accounts() const {
  return idle_player_accounts_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::idle_player_accounts() const {
  // @@protoc_insertion_point(field_list:CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.idle_player_accounts)
  return _internal_idle_player_accounts();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::_internal_mutable_idle_player_accounts() {
  return &idle_player_accounts_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::mutable_idle_player_accounts() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.idle_player_accounts)
  return _internal_mutable_idle_player_accounts();
}

// optional uint32 reward_item_attr_def_idx = 9;
inline bool CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::_internal_has_reward_item_attr_def_idx() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::has_reward_item_attr_def_idx() const {
  return _internal_has_reward_item_attr_def_idx();
}
inline void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::clear_reward_item_attr_def_idx() {
  reward_item_attr_def_idx_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::_internal_reward_item_attr_def_idx() const {
  return reward_item_attr_def_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::reward_item_attr_def_idx() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.reward_item_attr_def_idx)
  return _internal_reward_item_attr_def_idx();
}
inline void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::_internal_set_reward_item_attr_def_idx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  reward_item_attr_def_idx_ = value;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::set_reward_item_attr_def_idx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_reward_item_attr_def_idx(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.reward_item_attr_def_idx)
}

// optional uint32 reward_item_attr_value = 10;
inline bool CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::_internal_has_reward_item_attr_value() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::has_reward_item_attr_value() const {
  return _internal_has_reward_item_attr_value();
}
inline void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::clear_reward_item_attr_value() {
  reward_item_attr_value_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::_internal_reward_item_attr_value() const {
  return reward_item_attr_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::reward_item_attr_value() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.reward_item_attr_value)
  return _internal_reward_item_attr_value();
}
inline void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::_internal_set_reward_item_attr_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  reward_item_attr_value_ = value;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::set_reward_item_attr_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_reward_item_attr_value(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.reward_item_attr_value)
}

// optional uint32 reward_item_attr_reward_idx = 11;
inline bool CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::_internal_has_reward_item_attr_reward_idx() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::has_reward_item_attr_reward_idx() const {
  return _internal_has_reward_item_attr_reward_idx();
}
inline void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::clear_reward_item_attr_reward_idx() {
  reward_item_attr_reward_idx_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::_internal_reward_item_attr_reward_idx() const {
  return reward_item_attr_reward_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::reward_item_attr_reward_idx() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.reward_item_attr_reward_idx)
  return _internal_reward_item_attr_reward_idx();
}
inline void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::_internal_set_reward_item_attr_reward_idx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  reward_item_attr_reward_idx_ = value;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::set_reward_item_attr_reward_idx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_reward_item_attr_reward_idx(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.reward_item_attr_reward_idx)
}

// optional uint32 reward_drop_list = 12;
inline bool CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::_internal_has_reward_drop_list() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::has_reward_drop_list() const {
  return _internal_has_reward_drop_list();
}
inline void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::clear_reward_drop_list() {
  reward_drop_list_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::_internal_reward_drop_list() const {
  return reward_drop_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::reward_drop_list() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.reward_drop_list)
  return _internal_reward_drop_list();
}
inline void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::_internal_set_reward_drop_list(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  reward_drop_list_ = value;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::set_reward_drop_list(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_reward_drop_list(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.reward_drop_list)
}

// optional string tournament_tag = 13;
inline bool CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::_internal_has_tournament_tag() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::has_tournament_tag() const {
  return _internal_has_tournament_tag();
}
inline void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::clear_tournament_tag() {
  tournament_tag_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::tournament_tag() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.tournament_tag)
  return _internal_tournament_tag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::set_tournament_tag(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 tournament_tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.tournament_tag)
}
inline std::string* CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::mutable_tournament_tag() {
  std::string* _s = _internal_mutable_tournament_tag();
  // @@protoc_insertion_point(field_mutable:CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.tournament_tag)
  return _s;
}
inline const std::string& CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::_internal_tournament_tag() const {
  return tournament_tag_.Get();
}
inline void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::_internal_set_tournament_tag(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  tournament_tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::_internal_mutable_tournament_tag() {
  _has_bits_[0] |= 0x00000002u;
  return tournament_tag_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::release_tournament_tag() {
  // @@protoc_insertion_point(field_release:CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.tournament_tag)
  if (!_internal_has_tournament_tag()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return tournament_tag_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::set_allocated_tournament_tag(std::string* tournament_tag) {
  if (tournament_tag != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  tournament_tag_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tournament_tag,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.tournament_tag)
}

// optional uint32 steamdatagram_port = 14;
inline bool CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::_internal_has_steamdatagram_port() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::has_steamdatagram_port() const {
  return _internal_has_steamdatagram_port();
}
inline void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::clear_steamdatagram_port() {
  steamdatagram_port_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::_internal_steamdatagram_port() const {
  return steamdatagram_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::steamdatagram_port() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.steamdatagram_port)
  return _internal_steamdatagram_port();
}
inline void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::_internal_set_steamdatagram_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  steamdatagram_port_ = value;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::set_steamdatagram_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_steamdatagram_port(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.steamdatagram_port)
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve

// optional uint64 serverid = 1;
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::_internal_has_serverid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::has_serverid() const {
  return _internal_has_serverid();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::clear_serverid() {
  serverid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::_internal_serverid() const {
  return serverid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::serverid() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.serverid)
  return _internal_serverid();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::_internal_set_serverid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  serverid_ = value;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::set_serverid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_serverid(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.serverid)
}

// optional uint32 direct_udp_ip = 2;
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::_internal_has_direct_udp_ip() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::has_direct_udp_ip() const {
  return _internal_has_direct_udp_ip();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::clear_direct_udp_ip() {
  direct_udp_ip_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::_internal_direct_udp_ip() const {
  return direct_udp_ip_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::direct_udp_ip() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.direct_udp_ip)
  return _internal_direct_udp_ip();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::_internal_set_direct_udp_ip(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  direct_udp_ip_ = value;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::set_direct_udp_ip(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_direct_udp_ip(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.direct_udp_ip)
}

// optional uint32 direct_udp_port = 3;
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::_internal_has_direct_udp_port() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::has_direct_udp_port() const {
  return _internal_has_direct_udp_port();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::clear_direct_udp_port() {
  direct_udp_port_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::_internal_direct_udp_port() const {
  return direct_udp_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::direct_udp_port() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.direct_udp_port)
  return _internal_direct_udp_port();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::_internal_set_direct_udp_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  direct_udp_port_ = value;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::set_direct_udp_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_direct_udp_port(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.direct_udp_port)
}

// optional uint64 reservationid = 4;
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::_internal_has_reservationid() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::has_reservationid() const {
  return _internal_has_reservationid();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::clear_reservationid() {
  reservationid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::_internal_reservationid() const {
  return reservationid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::reservationid() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.reservationid)
  return _internal_reservationid();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::_internal_set_reservationid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  reservationid_ = value;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::set_reservationid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_reservationid(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.reservationid)
}

// optional .CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve reservation = 5;
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::_internal_has_reservation() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || reservation_ != nullptr);
  return value;
}
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::has_reservation() const {
  return _internal_has_reservation();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::clear_reservation() {
  if (reservation_ != nullptr) reservation_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve& CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::_internal_reservation() const {
  const ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* p = reservation_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve&>(
      ::_CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve_default_instance_);
}
inline const ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve& CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::reservation() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.reservation)
  return _internal_reservation();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::unsafe_arena_set_allocated_reservation(
    ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* reservation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reservation_);
  }
  reservation_ = reservation;
  if (reservation) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.reservation)
}
inline ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::release_reservation() {
  _has_bits_[0] &= ~0x00000004u;
  ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* temp = reservation_;
  reservation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::unsafe_arena_release_reservation() {
  // @@protoc_insertion_point(field_release:CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.reservation)
  _has_bits_[0] &= ~0x00000004u;
  ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* temp = reservation_;
  reservation_ = nullptr;
  return temp;
}
inline ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::_internal_mutable_reservation() {
  _has_bits_[0] |= 0x00000004u;
  if (reservation_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve>(GetArenaForAllocation());
    reservation_ = p;
  }
  return reservation_;
}
inline ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::mutable_reservation() {
  ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* _msg = _internal_mutable_reservation();
  // @@protoc_insertion_point(field_mutable:CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.reservation)
  return _msg;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::set_allocated_reservation(::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* reservation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reservation_;
  }
  if (reservation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve>::GetOwningArena(reservation);
    if (message_arena != submessage_arena) {
      reservation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reservation, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  reservation_ = reservation;
  // @@protoc_insertion_point(field_set_allocated:CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.reservation)
}

// optional string map = 6;
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::_internal_has_map() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::has_map() const {
  return _internal_has_map();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::clear_map() {
  map_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::map() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.map)
  return _internal_map();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::set_map(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 map_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.map)
}
inline std::string* CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::mutable_map() {
  std::string* _s = _internal_mutable_map();
  // @@protoc_insertion_point(field_mutable:CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.map)
  return _s;
}
inline const std::string& CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::_internal_map() const {
  return map_.Get();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::_internal_set_map(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  map_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::_internal_mutable_map() {
  _has_bits_[0] |= 0x00000001u;
  return map_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::release_map() {
  // @@protoc_insertion_point(field_release:CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.map)
  if (!_internal_has_map()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return map_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::set_allocated_map(std::string* map) {
  if (map != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  map_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), map,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.map)
}

// optional string server_address = 7;
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::_internal_has_server_address() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::has_server_address() const {
  return _internal_has_server_address();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::clear_server_address() {
  server_address_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::server_address() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.server_address)
  return _internal_server_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::set_server_address(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 server_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.server_address)
}
inline std::string* CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::mutable_server_address() {
  std::string* _s = _internal_mutable_server_address();
  // @@protoc_insertion_point(field_mutable:CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.server_address)
  return _s;
}
inline const std::string& CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::_internal_server_address() const {
  return server_address_.Get();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::_internal_set_server_address(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  server_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::_internal_mutable_server_address() {
  _has_bits_[0] |= 0x00000002u;
  return server_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::release_server_address() {
  // @@protoc_insertion_point(field_release:CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.server_address)
  if (!_internal_has_server_address()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return server_address_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::set_allocated_server_address(std::string* server_address) {
  if (server_address != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  server_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), server_address,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.server_address)
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo

// optional uint32 account_mvp = 1;
inline bool CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo::_internal_has_account_mvp() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo::has_account_mvp() const {
  return _internal_has_account_mvp();
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo::clear_account_mvp() {
  account_mvp_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo::_internal_account_mvp() const {
  return account_mvp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo::account_mvp() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.DropInfo.account_mvp)
  return _internal_account_mvp();
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo::_internal_set_account_mvp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  account_mvp_ = value;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo::set_account_mvp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_account_mvp(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.DropInfo.account_mvp)
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_MatchmakingServerRoundStats

// optional uint64 reservationid = 1;
inline bool CMsgGCCStrike15_v2_MatchmakingServerRoundStats::_internal_has_reservationid() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_MatchmakingServerRoundStats::has_reservationid() const {
  return _internal_has_reservationid();
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::clear_reservationid() {
  reservationid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCCStrike15_v2_MatchmakingServerRoundStats::_internal_reservationid() const {
  return reservationid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCCStrike15_v2_MatchmakingServerRoundStats::reservationid() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.reservationid)
  return _internal_reservationid();
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::_internal_set_reservationid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  reservationid_ = value;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::set_reservationid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_reservationid(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.reservationid)
}

// optional .CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve reservation = 2;
inline bool CMsgGCCStrike15_v2_MatchmakingServerRoundStats::_internal_has_reservation() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || reservation_ != nullptr);
  return value;
}
inline bool CMsgGCCStrike15_v2_MatchmakingServerRoundStats::has_reservation() const {
  return _internal_has_reservation();
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::clear_reservation() {
  if (reservation_ != nullptr) reservation_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve& CMsgGCCStrike15_v2_MatchmakingServerRoundStats::_internal_reservation() const {
  const ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* p = reservation_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve&>(
      ::_CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve_default_instance_);
}
inline const ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve& CMsgGCCStrike15_v2_MatchmakingServerRoundStats::reservation() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.reservation)
  return _internal_reservation();
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::unsafe_arena_set_allocated_reservation(
    ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* reservation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reservation_);
  }
  reservation_ = reservation;
  if (reservation) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.reservation)
}
inline ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* CMsgGCCStrike15_v2_MatchmakingServerRoundStats::release_reservation() {
  _has_bits_[0] &= ~0x00000002u;
  ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* temp = reservation_;
  reservation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* CMsgGCCStrike15_v2_MatchmakingServerRoundStats::unsafe_arena_release_reservation() {
  // @@protoc_insertion_point(field_release:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.reservation)
  _has_bits_[0] &= ~0x00000002u;
  ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* temp = reservation_;
  reservation_ = nullptr;
  return temp;
}
inline ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* CMsgGCCStrike15_v2_MatchmakingServerRoundStats::_internal_mutable_reservation() {
  _has_bits_[0] |= 0x00000002u;
  if (reservation_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve>(GetArenaForAllocation());
    reservation_ = p;
  }
  return reservation_;
}
inline ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* CMsgGCCStrike15_v2_MatchmakingServerRoundStats::mutable_reservation() {
  ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* _msg = _internal_mutable_reservation();
  // @@protoc_insertion_point(field_mutable:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.reservation)
  return _msg;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::set_allocated_reservation(::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* reservation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reservation_;
  }
  if (reservation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve>::GetOwningArena(reservation);
    if (message_arena != submessage_arena) {
      reservation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reservation, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  reservation_ = reservation;
  // @@protoc_insertion_point(field_set_allocated:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.reservation)
}

// optional string map = 3;
inline bool CMsgGCCStrike15_v2_MatchmakingServerRoundStats::_internal_has_map() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_MatchmakingServerRoundStats::has_map() const {
  return _internal_has_map();
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::clear_map() {
  map_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgGCCStrike15_v2_MatchmakingServerRoundStats::map() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.map)
  return _internal_map();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::set_map(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 map_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.map)
}
inline std::string* CMsgGCCStrike15_v2_MatchmakingServerRoundStats::mutable_map() {
  std::string* _s = _internal_mutable_map();
  // @@protoc_insertion_point(field_mutable:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.map)
  return _s;
}
inline const std::string& CMsgGCCStrike15_v2_MatchmakingServerRoundStats::_internal_map() const {
  return map_.Get();
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::_internal_set_map(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  map_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgGCCStrike15_v2_MatchmakingServerRoundStats::_internal_mutable_map() {
  _has_bits_[0] |= 0x00000001u;
  return map_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgGCCStrike15_v2_MatchmakingServerRoundStats::release_map() {
  // @@protoc_insertion_point(field_release:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.map)
  if (!_internal_has_map()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return map_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::set_allocated_map(std::string* map) {
  if (map != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  map_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), map,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.map)
}

// optional int32 round = 4;
inline bool CMsgGCCStrike15_v2_MatchmakingServerRoundStats::_internal_has_round() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_MatchmakingServerRoundStats::has_round() const {
  return _internal_has_round();
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::clear_round() {
  round_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgGCCStrike15_v2_MatchmakingServerRoundStats::_internal_round() const {
  return round_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgGCCStrike15_v2_MatchmakingServerRoundStats::round() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.round)
  return _internal_round();
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::_internal_set_round(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  round_ = value;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::set_round(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_round(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.round)
}

// repeated int32 kills = 5;
inline int CMsgGCCStrike15_v2_MatchmakingServerRoundStats::_internal_kills_size() const {
  return kills_.size();
}
inline int CMsgGCCStrike15_v2_MatchmakingServerRoundStats::kills_size() const {
  return _internal_kills_size();
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::clear_kills() {
  kills_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgGCCStrike15_v2_MatchmakingServerRoundStats::_internal_kills(int index) const {
  return kills_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgGCCStrike15_v2_MatchmakingServerRoundStats::kills(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.kills)
  return _internal_kills(index);
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::set_kills(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  kills_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.kills)
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::_internal_add_kills(::PROTOBUF_NAMESPACE_ID::int32 value) {
  kills_.Add(value);
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::add_kills(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_kills(value);
  // @@protoc_insertion_point(field_add:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.kills)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CMsgGCCStrike15_v2_MatchmakingServerRoundStats::_internal_kills() const {
  return kills_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CMsgGCCStrike15_v2_MatchmakingServerRoundStats::kills() const {
  // @@protoc_insertion_point(field_list:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.kills)
  return _internal_kills();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CMsgGCCStrike15_v2_MatchmakingServerRoundStats::_internal_mutable_kills() {
  return &kills_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CMsgGCCStrike15_v2_MatchmakingServerRoundStats::mutable_kills() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.kills)
  return _internal_mutable_kills();
}

// repeated int32 assists = 6;
inline int CMsgGCCStrike15_v2_MatchmakingServerRoundStats::_internal_assists_size() const {
  return assists_.size();
}
inline int CMsgGCCStrike15_v2_MatchmakingServerRoundStats::assists_size() const {
  return _internal_assists_size();
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::clear_assists() {
  assists_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgGCCStrike15_v2_MatchmakingServerRoundStats::_internal_assists(int index) const {
  return assists_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgGCCStrike15_v2_MatchmakingServerRoundStats::assists(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.assists)
  return _internal_assists(index);
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::set_assists(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  assists_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.assists)
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::_internal_add_assists(::PROTOBUF_NAMESPACE_ID::int32 value) {
  assists_.Add(value);
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::add_assists(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_assists(value);
  // @@protoc_insertion_point(field_add:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.assists)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CMsgGCCStrike15_v2_MatchmakingServerRoundStats::_internal_assists() const {
  return assists_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CMsgGCCStrike15_v2_MatchmakingServerRoundStats::assists() const {
  // @@protoc_insertion_point(field_list:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.assists)
  return _internal_assists();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CMsgGCCStrike15_v2_MatchmakingServerRoundStats::_internal_mutable_assists() {
  return &assists_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CMsgGCCStrike15_v2_MatchmakingServerRoundStats::mutable_assists() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.assists)
  return _internal_mutable_assists();
}

// repeated int32 deaths = 7;
inline int CMsgGCCStrike15_v2_MatchmakingServerRoundStats::_internal_deaths_size() const {
  return deaths_.size();
}
inline int CMsgGCCStrike15_v2_MatchmakingServerRoundStats::deaths_size() const {
  return _internal_deaths_size();
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::clear_deaths() {
  deaths_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgGCCStrike15_v2_MatchmakingServerRoundStats::_internal_deaths(int index) const {
  return deaths_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgGCCStrike15_v2_MatchmakingServerRoundStats::deaths(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.deaths)
  return _internal_deaths(index);
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::set_deaths(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  deaths_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.deaths)
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::_internal_add_deaths(::PROTOBUF_NAMESPACE_ID::int32 value) {
  deaths_.Add(value);
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::add_deaths(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_deaths(value);
  // @@protoc_insertion_point(field_add:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.deaths)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CMsgGCCStrike15_v2_MatchmakingServerRoundStats::_internal_deaths() const {
  return deaths_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CMsgGCCStrike15_v2_MatchmakingServerRoundStats::deaths() const {
  // @@protoc_insertion_point(field_list:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.deaths)
  return _internal_deaths();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CMsgGCCStrike15_v2_MatchmakingServerRoundStats::_internal_mutable_deaths() {
  return &deaths_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CMsgGCCStrike15_v2_MatchmakingServerRoundStats::mutable_deaths() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.deaths)
  return _internal_mutable_deaths();
}

// repeated int32 scores = 8;
inline int CMsgGCCStrike15_v2_MatchmakingServerRoundStats::_internal_scores_size() const {
  return scores_.size();
}
inline int CMsgGCCStrike15_v2_MatchmakingServerRoundStats::scores_size() const {
  return _internal_scores_size();
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::clear_scores() {
  scores_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgGCCStrike15_v2_MatchmakingServerRoundStats::_internal_scores(int index) const {
  return scores_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgGCCStrike15_v2_MatchmakingServerRoundStats::scores(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.scores)
  return _internal_scores(index);
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::set_scores(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  scores_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.scores)
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::_internal_add_scores(::PROTOBUF_NAMESPACE_ID::int32 value) {
  scores_.Add(value);
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::add_scores(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_scores(value);
  // @@protoc_insertion_point(field_add:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.scores)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CMsgGCCStrike15_v2_MatchmakingServerRoundStats::_internal_scores() const {
  return scores_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CMsgGCCStrike15_v2_MatchmakingServerRoundStats::scores() const {
  // @@protoc_insertion_point(field_list:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.scores)
  return _internal_scores();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CMsgGCCStrike15_v2_MatchmakingServerRoundStats::_internal_mutable_scores() {
  return &scores_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CMsgGCCStrike15_v2_MatchmakingServerRoundStats::mutable_scores() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.scores)
  return _internal_mutable_scores();
}

// repeated int32 pings = 9;
inline int CMsgGCCStrike15_v2_MatchmakingServerRoundStats::_internal_pings_size() const {
  return pings_.size();
}
inline int CMsgGCCStrike15_v2_MatchmakingServerRoundStats::pings_size() const {
  return _internal_pings_size();
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::clear_pings() {
  pings_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgGCCStrike15_v2_MatchmakingServerRoundStats::_internal_pings(int index) const {
  return pings_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgGCCStrike15_v2_MatchmakingServerRoundStats::pings(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.pings)
  return _internal_pings(index);
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::set_pings(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  pings_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.pings)
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::_internal_add_pings(::PROTOBUF_NAMESPACE_ID::int32 value) {
  pings_.Add(value);
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::add_pings(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_pings(value);
  // @@protoc_insertion_point(field_add:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.pings)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CMsgGCCStrike15_v2_MatchmakingServerRoundStats::_internal_pings() const {
  return pings_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CMsgGCCStrike15_v2_MatchmakingServerRoundStats::pings() const {
  // @@protoc_insertion_point(field_list:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.pings)
  return _internal_pings();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CMsgGCCStrike15_v2_MatchmakingServerRoundStats::_internal_mutable_pings() {
  return &pings_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CMsgGCCStrike15_v2_MatchmakingServerRoundStats::mutable_pings() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.pings)
  return _internal_mutable_pings();
}

// optional int32 round_result = 10;
inline bool CMsgGCCStrike15_v2_MatchmakingServerRoundStats::_internal_has_round_result() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_MatchmakingServerRoundStats::has_round_result() const {
  return _internal_has_round_result();
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::clear_round_result() {
  round_result_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgGCCStrike15_v2_MatchmakingServerRoundStats::_internal_round_result() const {
  return round_result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgGCCStrike15_v2_MatchmakingServerRoundStats::round_result() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.round_result)
  return _internal_round_result();
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::_internal_set_round_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  round_result_ = value;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::set_round_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_round_result(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.round_result)
}

// optional int32 match_result = 11;
inline bool CMsgGCCStrike15_v2_MatchmakingServerRoundStats::_internal_has_match_result() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_MatchmakingServerRoundStats::has_match_result() const {
  return _internal_has_match_result();
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::clear_match_result() {
  match_result_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgGCCStrike15_v2_MatchmakingServerRoundStats::_internal_match_result() const {
  return match_result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgGCCStrike15_v2_MatchmakingServerRoundStats::match_result() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.match_result)
  return _internal_match_result();
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::_internal_set_match_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  match_result_ = value;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::set_match_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_match_result(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.match_result)
}

// repeated int32 team_scores = 12;
inline int CMsgGCCStrike15_v2_MatchmakingServerRoundStats::_internal_team_scores_size() const {
  return team_scores_.size();
}
inline int CMsgGCCStrike15_v2_MatchmakingServerRoundStats::team_scores_size() const {
  return _internal_team_scores_size();
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::clear_team_scores() {
  team_scores_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgGCCStrike15_v2_MatchmakingServerRoundStats::_internal_team_scores(int index) const {
  return team_scores_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgGCCStrike15_v2_MatchmakingServerRoundStats::team_scores(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.team_scores)
  return _internal_team_scores(index);
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::set_team_scores(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  team_scores_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.team_scores)
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::_internal_add_team_scores(::PROTOBUF_NAMESPACE_ID::int32 value) {
  team_scores_.Add(value);
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::add_team_scores(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_team_scores(value);
  // @@protoc_insertion_point(field_add:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.team_scores)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CMsgGCCStrike15_v2_MatchmakingServerRoundStats::_internal_team_scores() const {
  return team_scores_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CMsgGCCStrike15_v2_MatchmakingServerRoundStats::team_scores() const {
  // @@protoc_insertion_point(field_list:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.team_scores)
  return _internal_team_scores();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CMsgGCCStrike15_v2_MatchmakingServerRoundStats::_internal_mutable_team_scores() {
  return &team_scores_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CMsgGCCStrike15_v2_MatchmakingServerRoundStats::mutable_team_scores() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.team_scores)
  return _internal_mutable_team_scores();
}

// optional .CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm confirm = 13;
inline bool CMsgGCCStrike15_v2_MatchmakingServerRoundStats::_internal_has_confirm() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || confirm_ != nullptr);
  return value;
}
inline bool CMsgGCCStrike15_v2_MatchmakingServerRoundStats::has_confirm() const {
  return _internal_has_confirm();
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::clear_confirm() {
  if (confirm_ != nullptr) confirm_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm& CMsgGCCStrike15_v2_MatchmakingServerRoundStats::_internal_confirm() const {
  const ::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm* p = confirm_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm&>(
      ::_CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm_default_instance_);
}
inline const ::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm& CMsgGCCStrike15_v2_MatchmakingServerRoundStats::confirm() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.confirm)
  return _internal_confirm();
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::unsafe_arena_set_allocated_confirm(
    ::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm* confirm) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(confirm_);
  }
  confirm_ = confirm;
  if (confirm) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.confirm)
}
inline ::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm* CMsgGCCStrike15_v2_MatchmakingServerRoundStats::release_confirm() {
  _has_bits_[0] &= ~0x00000004u;
  ::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm* temp = confirm_;
  confirm_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm* CMsgGCCStrike15_v2_MatchmakingServerRoundStats::unsafe_arena_release_confirm() {
  // @@protoc_insertion_point(field_release:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.confirm)
  _has_bits_[0] &= ~0x00000004u;
  ::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm* temp = confirm_;
  confirm_ = nullptr;
  return temp;
}
inline ::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm* CMsgGCCStrike15_v2_MatchmakingServerRoundStats::_internal_mutable_confirm() {
  _has_bits_[0] |= 0x00000004u;
  if (confirm_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm>(GetArenaForAllocation());
    confirm_ = p;
  }
  return confirm_;
}
inline ::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm* CMsgGCCStrike15_v2_MatchmakingServerRoundStats::mutable_confirm() {
  ::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm* _msg = _internal_mutable_confirm();
  // @@protoc_insertion_point(field_mutable:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.confirm)
  return _msg;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::set_allocated_confirm(::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm* confirm) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete confirm_;
  }
  if (confirm) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm>::GetOwningArena(confirm);
    if (message_arena != submessage_arena) {
      confirm = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, confirm, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  confirm_ = confirm;
  // @@protoc_insertion_point(field_set_allocated:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.confirm)
}

// optional int32 reservation_stage = 14;
inline bool CMsgGCCStrike15_v2_MatchmakingServerRoundStats::_internal_has_reservation_stage() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_MatchmakingServerRoundStats::has_reservation_stage() const {
  return _internal_has_reservation_stage();
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::clear_reservation_stage() {
  reservation_stage_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgGCCStrike15_v2_MatchmakingServerRoundStats::_internal_reservation_stage() const {
  return reservation_stage_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgGCCStrike15_v2_MatchmakingServerRoundStats::reservation_stage() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.reservation_stage)
  return _internal_reservation_stage();
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::_internal_set_reservation_stage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  reservation_stage_ = value;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::set_reservation_stage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_reservation_stage(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.reservation_stage)
}

// optional int32 match_duration = 15;
inline bool CMsgGCCStrike15_v2_MatchmakingServerRoundStats::_internal_has_match_duration() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_MatchmakingServerRoundStats::has_match_duration() const {
  return _internal_has_match_duration();
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::clear_match_duration() {
  match_duration_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgGCCStrike15_v2_MatchmakingServerRoundStats::_internal_match_duration() const {
  return match_duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgGCCStrike15_v2_MatchmakingServerRoundStats::match_duration() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.match_duration)
  return _internal_match_duration();
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::_internal_set_match_duration(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  match_duration_ = value;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::set_match_duration(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_match_duration(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.match_duration)
}

// repeated int32 enemy_kills = 16;
inline int CMsgGCCStrike15_v2_MatchmakingServerRoundStats::_internal_enemy_kills_size() const {
  return enemy_kills_.size();
}
inline int CMsgGCCStrike15_v2_MatchmakingServerRoundStats::enemy_kills_size() const {
  return _internal_enemy_kills_size();
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::clear_enemy_kills() {
  enemy_kills_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgGCCStrike15_v2_MatchmakingServerRoundStats::_internal_enemy_kills(int index) const {
  return enemy_kills_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgGCCStrike15_v2_MatchmakingServerRoundStats::enemy_kills(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.enemy_kills)
  return _internal_enemy_kills(index);
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::set_enemy_kills(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  enemy_kills_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.enemy_kills)
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::_internal_add_enemy_kills(::PROTOBUF_NAMESPACE_ID::int32 value) {
  enemy_kills_.Add(value);
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::add_enemy_kills(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_enemy_kills(value);
  // @@protoc_insertion_point(field_add:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.enemy_kills)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CMsgGCCStrike15_v2_MatchmakingServerRoundStats::_internal_enemy_kills() const {
  return enemy_kills_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CMsgGCCStrike15_v2_MatchmakingServerRoundStats::enemy_kills() const {
  // @@protoc_insertion_point(field_list:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.enemy_kills)
  return _internal_enemy_kills();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CMsgGCCStrike15_v2_MatchmakingServerRoundStats::_internal_mutable_enemy_kills() {
  return &enemy_kills_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CMsgGCCStrike15_v2_MatchmakingServerRoundStats::mutable_enemy_kills() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.enemy_kills)
  return _internal_mutable_enemy_kills();
}

// repeated int32 enemy_headshots = 17;
inline int CMsgGCCStrike15_v2_MatchmakingServerRoundStats::_internal_enemy_headshots_size() const {
  return enemy_headshots_.size();
}
inline int CMsgGCCStrike15_v2_MatchmakingServerRoundStats::enemy_headshots_size() const {
  return _internal_enemy_headshots_size();
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::clear_enemy_headshots() {
  enemy_headshots_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgGCCStrike15_v2_MatchmakingServerRoundStats::_internal_enemy_headshots(int index) const {
  return enemy_headshots_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgGCCStrike15_v2_MatchmakingServerRoundStats::enemy_headshots(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.enemy_headshots)
  return _internal_enemy_headshots(index);
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::set_enemy_headshots(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  enemy_headshots_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.enemy_headshots)
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::_internal_add_enemy_headshots(::PROTOBUF_NAMESPACE_ID::int32 value) {
  enemy_headshots_.Add(value);
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::add_enemy_headshots(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_enemy_headshots(value);
  // @@protoc_insertion_point(field_add:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.enemy_headshots)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CMsgGCCStrike15_v2_MatchmakingServerRoundStats::_internal_enemy_headshots() const {
  return enemy_headshots_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CMsgGCCStrike15_v2_MatchmakingServerRoundStats::enemy_headshots() const {
  // @@protoc_insertion_point(field_list:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.enemy_headshots)
  return _internal_enemy_headshots();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CMsgGCCStrike15_v2_MatchmakingServerRoundStats::_internal_mutable_enemy_headshots() {
  return &enemy_headshots_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CMsgGCCStrike15_v2_MatchmakingServerRoundStats::mutable_enemy_headshots() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.enemy_headshots)
  return _internal_mutable_enemy_headshots();
}

// repeated int32 enemy_3ks = 18;
inline int CMsgGCCStrike15_v2_MatchmakingServerRoundStats::_internal_enemy_3ks_size() const {
  return enemy_3ks_.size();
}
inline int CMsgGCCStrike15_v2_MatchmakingServerRoundStats::enemy_3ks_size() const {
  return _internal_enemy_3ks_size();
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::clear_enemy_3ks() {
  enemy_3ks_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgGCCStrike15_v2_MatchmakingServerRoundStats::_internal_enemy_3ks(int index) const {
  return enemy_3ks_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgGCCStrike15_v2_MatchmakingServerRoundStats::enemy_3ks(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.enemy_3ks)
  return _internal_enemy_3ks(index);
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::set_enemy_3ks(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  enemy_3ks_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.enemy_3ks)
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::_internal_add_enemy_3ks(::PROTOBUF_NAMESPACE_ID::int32 value) {
  enemy_3ks_.Add(value);
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::add_enemy_3ks(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_enemy_3ks(value);
  // @@protoc_insertion_point(field_add:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.enemy_3ks)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CMsgGCCStrike15_v2_MatchmakingServerRoundStats::_internal_enemy_3ks() const {
  return enemy_3ks_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CMsgGCCStrike15_v2_MatchmakingServerRoundStats::enemy_3ks() const {
  // @@protoc_insertion_point(field_list:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.enemy_3ks)
  return _internal_enemy_3ks();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CMsgGCCStrike15_v2_MatchmakingServerRoundStats::_internal_mutable_enemy_3ks() {
  return &enemy_3ks_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CMsgGCCStrike15_v2_MatchmakingServerRoundStats::mutable_enemy_3ks() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.enemy_3ks)
  return _internal_mutable_enemy_3ks();
}

// repeated int32 enemy_4ks = 19;
inline int CMsgGCCStrike15_v2_MatchmakingServerRoundStats::_internal_enemy_4ks_size() const {
  return enemy_4ks_.size();
}
inline int CMsgGCCStrike15_v2_MatchmakingServerRoundStats::enemy_4ks_size() const {
  return _internal_enemy_4ks_size();
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::clear_enemy_4ks() {
  enemy_4ks_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgGCCStrike15_v2_MatchmakingServerRoundStats::_internal_enemy_4ks(int index) const {
  return enemy_4ks_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgGCCStrike15_v2_MatchmakingServerRoundStats::enemy_4ks(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.enemy_4ks)
  return _internal_enemy_4ks(index);
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::set_enemy_4ks(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  enemy_4ks_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.enemy_4ks)
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::_internal_add_enemy_4ks(::PROTOBUF_NAMESPACE_ID::int32 value) {
  enemy_4ks_.Add(value);
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::add_enemy_4ks(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_enemy_4ks(value);
  // @@protoc_insertion_point(field_add:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.enemy_4ks)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CMsgGCCStrike15_v2_MatchmakingServerRoundStats::_internal_enemy_4ks() const {
  return enemy_4ks_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CMsgGCCStrike15_v2_MatchmakingServerRoundStats::enemy_4ks() const {
  // @@protoc_insertion_point(field_list:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.enemy_4ks)
  return _internal_enemy_4ks();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CMsgGCCStrike15_v2_MatchmakingServerRoundStats::_internal_mutable_enemy_4ks() {
  return &enemy_4ks_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CMsgGCCStrike15_v2_MatchmakingServerRoundStats::mutable_enemy_4ks() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.enemy_4ks)
  return _internal_mutable_enemy_4ks();
}

// repeated int32 enemy_5ks = 20;
inline int CMsgGCCStrike15_v2_MatchmakingServerRoundStats::_internal_enemy_5ks_size() const {
  return enemy_5ks_.size();
}
inline int CMsgGCCStrike15_v2_MatchmakingServerRoundStats::enemy_5ks_size() const {
  return _internal_enemy_5ks_size();
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::clear_enemy_5ks() {
  enemy_5ks_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgGCCStrike15_v2_MatchmakingServerRoundStats::_internal_enemy_5ks(int index) const {
  return enemy_5ks_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgGCCStrike15_v2_MatchmakingServerRoundStats::enemy_5ks(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.enemy_5ks)
  return _internal_enemy_5ks(index);
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::set_enemy_5ks(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  enemy_5ks_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.enemy_5ks)
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::_internal_add_enemy_5ks(::PROTOBUF_NAMESPACE_ID::int32 value) {
  enemy_5ks_.Add(value);
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::add_enemy_5ks(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_enemy_5ks(value);
  // @@protoc_insertion_point(field_add:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.enemy_5ks)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CMsgGCCStrike15_v2_MatchmakingServerRoundStats::_internal_enemy_5ks() const {
  return enemy_5ks_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CMsgGCCStrike15_v2_MatchmakingServerRoundStats::enemy_5ks() const {
  // @@protoc_insertion_point(field_list:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.enemy_5ks)
  return _internal_enemy_5ks();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CMsgGCCStrike15_v2_MatchmakingServerRoundStats::_internal_mutable_enemy_5ks() {
  return &enemy_5ks_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CMsgGCCStrike15_v2_MatchmakingServerRoundStats::mutable_enemy_5ks() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.enemy_5ks)
  return _internal_mutable_enemy_5ks();
}

// repeated int32 mvps = 21;
inline int CMsgGCCStrike15_v2_MatchmakingServerRoundStats::_internal_mvps_size() const {
  return mvps_.size();
}
inline int CMsgGCCStrike15_v2_MatchmakingServerRoundStats::mvps_size() const {
  return _internal_mvps_size();
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::clear_mvps() {
  mvps_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgGCCStrike15_v2_MatchmakingServerRoundStats::_internal_mvps(int index) const {
  return mvps_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgGCCStrike15_v2_MatchmakingServerRoundStats::mvps(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.mvps)
  return _internal_mvps(index);
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::set_mvps(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  mvps_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.mvps)
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::_internal_add_mvps(::PROTOBUF_NAMESPACE_ID::int32 value) {
  mvps_.Add(value);
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::add_mvps(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_mvps(value);
  // @@protoc_insertion_point(field_add:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.mvps)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CMsgGCCStrike15_v2_MatchmakingServerRoundStats::_internal_mvps() const {
  return mvps_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CMsgGCCStrike15_v2_MatchmakingServerRoundStats::mvps() const {
  // @@protoc_insertion_point(field_list:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.mvps)
  return _internal_mvps();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CMsgGCCStrike15_v2_MatchmakingServerRoundStats::_internal_mutable_mvps() {
  return &mvps_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CMsgGCCStrike15_v2_MatchmakingServerRoundStats::mutable_mvps() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.mvps)
  return _internal_mutable_mvps();
}

// optional uint32 spectators_count = 22;
inline bool CMsgGCCStrike15_v2_MatchmakingServerRoundStats::_internal_has_spectators_count() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_MatchmakingServerRoundStats::has_spectators_count() const {
  return _internal_has_spectators_count();
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::clear_spectators_count() {
  spectators_count_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_MatchmakingServerRoundStats::_internal_spectators_count() const {
  return spectators_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_MatchmakingServerRoundStats::spectators_count() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.spectators_count)
  return _internal_spectators_count();
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::_internal_set_spectators_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  spectators_count_ = value;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::set_spectators_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_spectators_count(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.spectators_count)
}

// optional uint32 spectators_count_tv = 23;
inline bool CMsgGCCStrike15_v2_MatchmakingServerRoundStats::_internal_has_spectators_count_tv() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_MatchmakingServerRoundStats::has_spectators_count_tv() const {
  return _internal_has_spectators_count_tv();
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::clear_spectators_count_tv() {
  spectators_count_tv_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_MatchmakingServerRoundStats::_internal_spectators_count_tv() const {
  return spectators_count_tv_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_MatchmakingServerRoundStats::spectators_count_tv() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.spectators_count_tv)
  return _internal_spectators_count_tv();
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::_internal_set_spectators_count_tv(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  spectators_count_tv_ = value;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::set_spectators_count_tv(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_spectators_count_tv(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.spectators_count_tv)
}

// optional uint32 spectators_count_lnk = 24;
inline bool CMsgGCCStrike15_v2_MatchmakingServerRoundStats::_internal_has_spectators_count_lnk() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_MatchmakingServerRoundStats::has_spectators_count_lnk() const {
  return _internal_has_spectators_count_lnk();
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::clear_spectators_count_lnk() {
  spectators_count_lnk_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_MatchmakingServerRoundStats::_internal_spectators_count_lnk() const {
  return spectators_count_lnk_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_MatchmakingServerRoundStats::spectators_count_lnk() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.spectators_count_lnk)
  return _internal_spectators_count_lnk();
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::_internal_set_spectators_count_lnk(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00001000u;
  spectators_count_lnk_ = value;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::set_spectators_count_lnk(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_spectators_count_lnk(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.spectators_count_lnk)
}

// repeated int32 enemy_kills_agg = 25;
inline int CMsgGCCStrike15_v2_MatchmakingServerRoundStats::_internal_enemy_kills_agg_size() const {
  return enemy_kills_agg_.size();
}
inline int CMsgGCCStrike15_v2_MatchmakingServerRoundStats::enemy_kills_agg_size() const {
  return _internal_enemy_kills_agg_size();
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::clear_enemy_kills_agg() {
  enemy_kills_agg_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgGCCStrike15_v2_MatchmakingServerRoundStats::_internal_enemy_kills_agg(int index) const {
  return enemy_kills_agg_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgGCCStrike15_v2_MatchmakingServerRoundStats::enemy_kills_agg(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.enemy_kills_agg)
  return _internal_enemy_kills_agg(index);
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::set_enemy_kills_agg(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  enemy_kills_agg_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.enemy_kills_agg)
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::_internal_add_enemy_kills_agg(::PROTOBUF_NAMESPACE_ID::int32 value) {
  enemy_kills_agg_.Add(value);
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::add_enemy_kills_agg(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_enemy_kills_agg(value);
  // @@protoc_insertion_point(field_add:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.enemy_kills_agg)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CMsgGCCStrike15_v2_MatchmakingServerRoundStats::_internal_enemy_kills_agg() const {
  return enemy_kills_agg_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CMsgGCCStrike15_v2_MatchmakingServerRoundStats::enemy_kills_agg() const {
  // @@protoc_insertion_point(field_list:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.enemy_kills_agg)
  return _internal_enemy_kills_agg();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CMsgGCCStrike15_v2_MatchmakingServerRoundStats::_internal_mutable_enemy_kills_agg() {
  return &enemy_kills_agg_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CMsgGCCStrike15_v2_MatchmakingServerRoundStats::mutable_enemy_kills_agg() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.enemy_kills_agg)
  return _internal_mutable_enemy_kills_agg();
}

// optional .CMsgGCCStrike15_v2_MatchmakingServerRoundStats.DropInfo drop_info = 26;
inline bool CMsgGCCStrike15_v2_MatchmakingServerRoundStats::_internal_has_drop_info() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || drop_info_ != nullptr);
  return value;
}
inline bool CMsgGCCStrike15_v2_MatchmakingServerRoundStats::has_drop_info() const {
  return _internal_has_drop_info();
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::clear_drop_info() {
  if (drop_info_ != nullptr) drop_info_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo& CMsgGCCStrike15_v2_MatchmakingServerRoundStats::_internal_drop_info() const {
  const ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo* p = drop_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo&>(
      ::_CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo_default_instance_);
}
inline const ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo& CMsgGCCStrike15_v2_MatchmakingServerRoundStats::drop_info() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.drop_info)
  return _internal_drop_info();
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::unsafe_arena_set_allocated_drop_info(
    ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo* drop_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(drop_info_);
  }
  drop_info_ = drop_info;
  if (drop_info) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.drop_info)
}
inline ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo* CMsgGCCStrike15_v2_MatchmakingServerRoundStats::release_drop_info() {
  _has_bits_[0] &= ~0x00000008u;
  ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo* temp = drop_info_;
  drop_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo* CMsgGCCStrike15_v2_MatchmakingServerRoundStats::unsafe_arena_release_drop_info() {
  // @@protoc_insertion_point(field_release:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.drop_info)
  _has_bits_[0] &= ~0x00000008u;
  ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo* temp = drop_info_;
  drop_info_ = nullptr;
  return temp;
}
inline ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo* CMsgGCCStrike15_v2_MatchmakingServerRoundStats::_internal_mutable_drop_info() {
  _has_bits_[0] |= 0x00000008u;
  if (drop_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo>(GetArenaForAllocation());
    drop_info_ = p;
  }
  return drop_info_;
}
inline ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo* CMsgGCCStrike15_v2_MatchmakingServerRoundStats::mutable_drop_info() {
  ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo* _msg = _internal_mutable_drop_info();
  // @@protoc_insertion_point(field_mutable:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.drop_info)
  return _msg;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::set_allocated_drop_info(::CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo* drop_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete drop_info_;
  }
  if (drop_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo>::GetOwningArena(drop_info);
    if (message_arena != submessage_arena) {
      drop_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, drop_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  drop_info_ = drop_info;
  // @@protoc_insertion_point(field_set_allocated:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.drop_info)
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_MatchmakingServerMatchEnd

// optional .CMsgGCCStrike15_v2_MatchmakingServerRoundStats stats = 1;
inline bool CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::_internal_has_stats() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || stats_ != nullptr);
  return value;
}
inline bool CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::has_stats() const {
  return _internal_has_stats();
}
inline void CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::clear_stats() {
  if (stats_ != nullptr) stats_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats& CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::_internal_stats() const {
  const ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats* p = stats_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats&>(
      ::_CMsgGCCStrike15_v2_MatchmakingServerRoundStats_default_instance_);
}
inline const ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats& CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::stats() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingServerMatchEnd.stats)
  return _internal_stats();
}
inline void CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::unsafe_arena_set_allocated_stats(
    ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats* stats) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stats_);
  }
  stats_ = stats;
  if (stats) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgGCCStrike15_v2_MatchmakingServerMatchEnd.stats)
}
inline ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats* CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::release_stats() {
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats* temp = stats_;
  stats_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats* CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::unsafe_arena_release_stats() {
  // @@protoc_insertion_point(field_release:CMsgGCCStrike15_v2_MatchmakingServerMatchEnd.stats)
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats* temp = stats_;
  stats_ = nullptr;
  return temp;
}
inline ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats* CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::_internal_mutable_stats() {
  _has_bits_[0] |= 0x00000001u;
  if (stats_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgGCCStrike15_v2_MatchmakingServerRoundStats>(GetArenaForAllocation());
    stats_ = p;
  }
  return stats_;
}
inline ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats* CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::mutable_stats() {
  ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats* _msg = _internal_mutable_stats();
  // @@protoc_insertion_point(field_mutable:CMsgGCCStrike15_v2_MatchmakingServerMatchEnd.stats)
  return _msg;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::set_allocated_stats(::CMsgGCCStrike15_v2_MatchmakingServerRoundStats* stats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete stats_;
  }
  if (stats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgGCCStrike15_v2_MatchmakingServerRoundStats>::GetOwningArena(stats);
    if (message_arena != submessage_arena) {
      stats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stats, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  stats_ = stats;
  // @@protoc_insertion_point(field_set_allocated:CMsgGCCStrike15_v2_MatchmakingServerMatchEnd.stats)
}

// optional .CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm confirm = 3;
inline bool CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::_internal_has_confirm() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || confirm_ != nullptr);
  return value;
}
inline bool CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::has_confirm() const {
  return _internal_has_confirm();
}
inline void CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::clear_confirm() {
  if (confirm_ != nullptr) confirm_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm& CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::_internal_confirm() const {
  const ::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm* p = confirm_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm&>(
      ::_CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm_default_instance_);
}
inline const ::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm& CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::confirm() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingServerMatchEnd.confirm)
  return _internal_confirm();
}
inline void CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::unsafe_arena_set_allocated_confirm(
    ::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm* confirm) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(confirm_);
  }
  confirm_ = confirm;
  if (confirm) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgGCCStrike15_v2_MatchmakingServerMatchEnd.confirm)
}
inline ::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm* CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::release_confirm() {
  _has_bits_[0] &= ~0x00000002u;
  ::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm* temp = confirm_;
  confirm_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm* CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::unsafe_arena_release_confirm() {
  // @@protoc_insertion_point(field_release:CMsgGCCStrike15_v2_MatchmakingServerMatchEnd.confirm)
  _has_bits_[0] &= ~0x00000002u;
  ::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm* temp = confirm_;
  confirm_ = nullptr;
  return temp;
}
inline ::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm* CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::_internal_mutable_confirm() {
  _has_bits_[0] |= 0x00000002u;
  if (confirm_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm>(GetArenaForAllocation());
    confirm_ = p;
  }
  return confirm_;
}
inline ::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm* CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::mutable_confirm() {
  ::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm* _msg = _internal_mutable_confirm();
  // @@protoc_insertion_point(field_mutable:CMsgGCCStrike15_v2_MatchmakingServerMatchEnd.confirm)
  return _msg;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::set_allocated_confirm(::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm* confirm) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete confirm_;
  }
  if (confirm) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm>::GetOwningArena(confirm);
    if (message_arena != submessage_arena) {
      confirm = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, confirm, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  confirm_ = confirm;
  // @@protoc_insertion_point(field_set_allocated:CMsgGCCStrike15_v2_MatchmakingServerMatchEnd.confirm)
}

// optional uint64 rematch = 4;
inline bool CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::_internal_has_rematch() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::has_rematch() const {
  return _internal_has_rematch();
}
inline void CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::clear_rematch() {
  rematch_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::_internal_rematch() const {
  return rematch_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::rematch() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingServerMatchEnd.rematch)
  return _internal_rematch();
}
inline void CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::_internal_set_rematch(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  rematch_ = value;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::set_rematch(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_rematch(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_MatchmakingServerMatchEnd.rematch)
}

// optional uint32 replay_token = 5;
inline bool CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::_internal_has_replay_token() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::has_replay_token() const {
  return _internal_has_replay_token();
}
inline void CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::clear_replay_token() {
  replay_token_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::_internal_replay_token() const {
  return replay_token_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::replay_token() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingServerMatchEnd.replay_token)
  return _internal_replay_token();
}
inline void CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::_internal_set_replay_token(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  replay_token_ = value;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::set_replay_token(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_replay_token(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_MatchmakingServerMatchEnd.replay_token)
}

// optional uint32 replay_cluster_id = 6;
inline bool CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::_internal_has_replay_cluster_id() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::has_replay_cluster_id() const {
  return _internal_has_replay_cluster_id();
}
inline void CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::clear_replay_cluster_id() {
  replay_cluster_id_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::_internal_replay_cluster_id() const {
  return replay_cluster_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::replay_cluster_id() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingServerMatchEnd.replay_cluster_id)
  return _internal_replay_cluster_id();
}
inline void CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::_internal_set_replay_cluster_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  replay_cluster_id_ = value;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::set_replay_cluster_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_replay_cluster_id(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_MatchmakingServerMatchEnd.replay_cluster_id)
}

// optional bool aborted_match = 7;
inline bool CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::_internal_has_aborted_match() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::has_aborted_match() const {
  return _internal_has_aborted_match();
}
inline void CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::clear_aborted_match() {
  aborted_match_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::_internal_aborted_match() const {
  return aborted_match_;
}
inline bool CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::aborted_match() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingServerMatchEnd.aborted_match)
  return _internal_aborted_match();
}
inline void CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::_internal_set_aborted_match(bool value) {
  _has_bits_[0] |= 0x00000040u;
  aborted_match_ = value;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::set_aborted_match(bool value) {
  _internal_set_aborted_match(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_MatchmakingServerMatchEnd.aborted_match)
}

// optional .CMsgGC_ServerQuestUpdateData match_end_quest_data = 8;
inline bool CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::_internal_has_match_end_quest_data() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || match_end_quest_data_ != nullptr);
  return value;
}
inline bool CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::has_match_end_quest_data() const {
  return _internal_has_match_end_quest_data();
}
inline void CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::clear_match_end_quest_data() {
  if (match_end_quest_data_ != nullptr) match_end_quest_data_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::CMsgGC_ServerQuestUpdateData& CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::_internal_match_end_quest_data() const {
  const ::CMsgGC_ServerQuestUpdateData* p = match_end_quest_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgGC_ServerQuestUpdateData&>(
      ::_CMsgGC_ServerQuestUpdateData_default_instance_);
}
inline const ::CMsgGC_ServerQuestUpdateData& CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::match_end_quest_data() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingServerMatchEnd.match_end_quest_data)
  return _internal_match_end_quest_data();
}
inline void CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::unsafe_arena_set_allocated_match_end_quest_data(
    ::CMsgGC_ServerQuestUpdateData* match_end_quest_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(match_end_quest_data_);
  }
  match_end_quest_data_ = match_end_quest_data;
  if (match_end_quest_data) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgGCCStrike15_v2_MatchmakingServerMatchEnd.match_end_quest_data)
}
inline ::CMsgGC_ServerQuestUpdateData* CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::release_match_end_quest_data() {
  _has_bits_[0] &= ~0x00000004u;
  ::CMsgGC_ServerQuestUpdateData* temp = match_end_quest_data_;
  match_end_quest_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgGC_ServerQuestUpdateData* CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::unsafe_arena_release_match_end_quest_data() {
  // @@protoc_insertion_point(field_release:CMsgGCCStrike15_v2_MatchmakingServerMatchEnd.match_end_quest_data)
  _has_bits_[0] &= ~0x00000004u;
  ::CMsgGC_ServerQuestUpdateData* temp = match_end_quest_data_;
  match_end_quest_data_ = nullptr;
  return temp;
}
inline ::CMsgGC_ServerQuestUpdateData* CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::_internal_mutable_match_end_quest_data() {
  _has_bits_[0] |= 0x00000004u;
  if (match_end_quest_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgGC_ServerQuestUpdateData>(GetArenaForAllocation());
    match_end_quest_data_ = p;
  }
  return match_end_quest_data_;
}
inline ::CMsgGC_ServerQuestUpdateData* CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::mutable_match_end_quest_data() {
  ::CMsgGC_ServerQuestUpdateData* _msg = _internal_mutable_match_end_quest_data();
  // @@protoc_insertion_point(field_mutable:CMsgGCCStrike15_v2_MatchmakingServerMatchEnd.match_end_quest_data)
  return _msg;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::set_allocated_match_end_quest_data(::CMsgGC_ServerQuestUpdateData* match_end_quest_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete match_end_quest_data_;
  }
  if (match_end_quest_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgGC_ServerQuestUpdateData>::GetOwningArena(match_end_quest_data);
    if (message_arena != submessage_arena) {
      match_end_quest_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, match_end_quest_data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  match_end_quest_data_ = match_end_quest_data;
  // @@protoc_insertion_point(field_set_allocated:CMsgGCCStrike15_v2_MatchmakingServerMatchEnd.match_end_quest_data)
}

// optional uint32 server_version = 9;
inline bool CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::_internal_has_server_version() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::has_server_version() const {
  return _internal_has_server_version();
}
inline void CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::clear_server_version() {
  server_version_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::_internal_server_version() const {
  return server_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::server_version() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingServerMatchEnd.server_version)
  return _internal_server_version();
}
inline void CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::_internal_set_server_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  server_version_ = value;
}
inline void CMsgGCCStrike15_v2_MatchmakingServerMatchEnd::set_server_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_server_version(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_MatchmakingServerMatchEnd.server_version)
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_MatchmakingClient2GCHello

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_MatchmakingGC2ClientHello

// optional uint32 account_id = 1;
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::_internal_has_account_id() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::has_account_id() const {
  return _internal_has_account_id();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::clear_account_id() {
  account_id_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::_internal_account_id() const {
  return account_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.account_id)
  return _internal_account_id();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::_internal_set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  account_id_ = value;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.account_id)
}

// optional .CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve ongoingmatch = 2;
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::_internal_has_ongoingmatch() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || ongoingmatch_ != nullptr);
  return value;
}
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::has_ongoingmatch() const {
  return _internal_has_ongoingmatch();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::clear_ongoingmatch() {
  if (ongoingmatch_ != nullptr) ongoingmatch_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve& CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::_internal_ongoingmatch() const {
  const ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* p = ongoingmatch_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve&>(
      ::_CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve_default_instance_);
}
inline const ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve& CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::ongoingmatch() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.ongoingmatch)
  return _internal_ongoingmatch();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::unsafe_arena_set_allocated_ongoingmatch(
    ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* ongoingmatch) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ongoingmatch_);
  }
  ongoingmatch_ = ongoingmatch;
  if (ongoingmatch) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.ongoingmatch)
}
inline ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::release_ongoingmatch() {
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* temp = ongoingmatch_;
  ongoingmatch_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::unsafe_arena_release_ongoingmatch() {
  // @@protoc_insertion_point(field_release:CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.ongoingmatch)
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* temp = ongoingmatch_;
  ongoingmatch_ = nullptr;
  return temp;
}
inline ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::_internal_mutable_ongoingmatch() {
  _has_bits_[0] |= 0x00000001u;
  if (ongoingmatch_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve>(GetArenaForAllocation());
    ongoingmatch_ = p;
  }
  return ongoingmatch_;
}
inline ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::mutable_ongoingmatch() {
  ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* _msg = _internal_mutable_ongoingmatch();
  // @@protoc_insertion_point(field_mutable:CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.ongoingmatch)
  return _msg;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::set_allocated_ongoingmatch(::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* ongoingmatch) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete ongoingmatch_;
  }
  if (ongoingmatch) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve>::GetOwningArena(ongoingmatch);
    if (message_arena != submessage_arena) {
      ongoingmatch = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ongoingmatch, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ongoingmatch_ = ongoingmatch;
  // @@protoc_insertion_point(field_set_allocated:CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.ongoingmatch)
}

// optional .GlobalStatistics global_stats = 3;
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::_internal_has_global_stats() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || global_stats_ != nullptr);
  return value;
}
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::has_global_stats() const {
  return _internal_has_global_stats();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::clear_global_stats() {
  if (global_stats_ != nullptr) global_stats_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::GlobalStatistics& CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::_internal_global_stats() const {
  const ::GlobalStatistics* p = global_stats_;
  return p != nullptr ? *p : reinterpret_cast<const ::GlobalStatistics&>(
      ::_GlobalStatistics_default_instance_);
}
inline const ::GlobalStatistics& CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::global_stats() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.global_stats)
  return _internal_global_stats();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::unsafe_arena_set_allocated_global_stats(
    ::GlobalStatistics* global_stats) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(global_stats_);
  }
  global_stats_ = global_stats;
  if (global_stats) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.global_stats)
}
inline ::GlobalStatistics* CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::release_global_stats() {
  _has_bits_[0] &= ~0x00000002u;
  ::GlobalStatistics* temp = global_stats_;
  global_stats_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::GlobalStatistics* CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::unsafe_arena_release_global_stats() {
  // @@protoc_insertion_point(field_release:CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.global_stats)
  _has_bits_[0] &= ~0x00000002u;
  ::GlobalStatistics* temp = global_stats_;
  global_stats_ = nullptr;
  return temp;
}
inline ::GlobalStatistics* CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::_internal_mutable_global_stats() {
  _has_bits_[0] |= 0x00000002u;
  if (global_stats_ == nullptr) {
    auto* p = CreateMaybeMessage<::GlobalStatistics>(GetArenaForAllocation());
    global_stats_ = p;
  }
  return global_stats_;
}
inline ::GlobalStatistics* CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::mutable_global_stats() {
  ::GlobalStatistics* _msg = _internal_mutable_global_stats();
  // @@protoc_insertion_point(field_mutable:CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.global_stats)
  return _msg;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::set_allocated_global_stats(::GlobalStatistics* global_stats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete global_stats_;
  }
  if (global_stats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::GlobalStatistics>::GetOwningArena(global_stats);
    if (message_arena != submessage_arena) {
      global_stats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, global_stats, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  global_stats_ = global_stats;
  // @@protoc_insertion_point(field_set_allocated:CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.global_stats)
}

// optional uint32 penalty_seconds = 4;
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::_internal_has_penalty_seconds() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::has_penalty_seconds() const {
  return _internal_has_penalty_seconds();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::clear_penalty_seconds() {
  penalty_seconds_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::_internal_penalty_seconds() const {
  return penalty_seconds_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::penalty_seconds() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.penalty_seconds)
  return _internal_penalty_seconds();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::_internal_set_penalty_seconds(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  penalty_seconds_ = value;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::set_penalty_seconds(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_penalty_seconds(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.penalty_seconds)
}

// optional uint32 penalty_reason = 5;
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::_internal_has_penalty_reason() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::has_penalty_reason() const {
  return _internal_has_penalty_reason();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::clear_penalty_reason() {
  penalty_reason_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::_internal_penalty_reason() const {
  return penalty_reason_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::penalty_reason() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.penalty_reason)
  return _internal_penalty_reason();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::_internal_set_penalty_reason(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  penalty_reason_ = value;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::set_penalty_reason(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_penalty_reason(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.penalty_reason)
}

// optional int32 vac_banned = 6;
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::_internal_has_vac_banned() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::has_vac_banned() const {
  return _internal_has_vac_banned();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::clear_vac_banned() {
  vac_banned_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::_internal_vac_banned() const {
  return vac_banned_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::vac_banned() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.vac_banned)
  return _internal_vac_banned();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::_internal_set_vac_banned(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000800u;
  vac_banned_ = value;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::set_vac_banned(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_vac_banned(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.vac_banned)
}

// optional .PlayerRankingInfo ranking = 7;
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::_internal_has_ranking() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || ranking_ != nullptr);
  return value;
}
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::has_ranking() const {
  return _internal_has_ranking();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::clear_ranking() {
  if (ranking_ != nullptr) ranking_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::PlayerRankingInfo& CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::_internal_ranking() const {
  const ::PlayerRankingInfo* p = ranking_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlayerRankingInfo&>(
      ::_PlayerRankingInfo_default_instance_);
}
inline const ::PlayerRankingInfo& CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::ranking() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.ranking)
  return _internal_ranking();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::unsafe_arena_set_allocated_ranking(
    ::PlayerRankingInfo* ranking) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ranking_);
  }
  ranking_ = ranking;
  if (ranking) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.ranking)
}
inline ::PlayerRankingInfo* CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::release_ranking() {
  _has_bits_[0] &= ~0x00000004u;
  ::PlayerRankingInfo* temp = ranking_;
  ranking_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PlayerRankingInfo* CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::unsafe_arena_release_ranking() {
  // @@protoc_insertion_point(field_release:CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.ranking)
  _has_bits_[0] &= ~0x00000004u;
  ::PlayerRankingInfo* temp = ranking_;
  ranking_ = nullptr;
  return temp;
}
inline ::PlayerRankingInfo* CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::_internal_mutable_ranking() {
  _has_bits_[0] |= 0x00000004u;
  if (ranking_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlayerRankingInfo>(GetArenaForAllocation());
    ranking_ = p;
  }
  return ranking_;
}
inline ::PlayerRankingInfo* CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::mutable_ranking() {
  ::PlayerRankingInfo* _msg = _internal_mutable_ranking();
  // @@protoc_insertion_point(field_mutable:CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.ranking)
  return _msg;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::set_allocated_ranking(::PlayerRankingInfo* ranking) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete ranking_;
  }
  if (ranking) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::PlayerRankingInfo>::GetOwningArena(ranking);
    if (message_arena != submessage_arena) {
      ranking = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ranking, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  ranking_ = ranking;
  // @@protoc_insertion_point(field_set_allocated:CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.ranking)
}

// optional .PlayerCommendationInfo commendation = 8;
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::_internal_has_commendation() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || commendation_ != nullptr);
  return value;
}
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::has_commendation() const {
  return _internal_has_commendation();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::clear_commendation() {
  if (commendation_ != nullptr) commendation_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::PlayerCommendationInfo& CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::_internal_commendation() const {
  const ::PlayerCommendationInfo* p = commendation_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlayerCommendationInfo&>(
      ::_PlayerCommendationInfo_default_instance_);
}
inline const ::PlayerCommendationInfo& CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::commendation() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.commendation)
  return _internal_commendation();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::unsafe_arena_set_allocated_commendation(
    ::PlayerCommendationInfo* commendation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(commendation_);
  }
  commendation_ = commendation;
  if (commendation) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.commendation)
}
inline ::PlayerCommendationInfo* CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::release_commendation() {
  _has_bits_[0] &= ~0x00000008u;
  ::PlayerCommendationInfo* temp = commendation_;
  commendation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PlayerCommendationInfo* CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::unsafe_arena_release_commendation() {
  // @@protoc_insertion_point(field_release:CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.commendation)
  _has_bits_[0] &= ~0x00000008u;
  ::PlayerCommendationInfo* temp = commendation_;
  commendation_ = nullptr;
  return temp;
}
inline ::PlayerCommendationInfo* CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::_internal_mutable_commendation() {
  _has_bits_[0] |= 0x00000008u;
  if (commendation_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlayerCommendationInfo>(GetArenaForAllocation());
    commendation_ = p;
  }
  return commendation_;
}
inline ::PlayerCommendationInfo* CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::mutable_commendation() {
  ::PlayerCommendationInfo* _msg = _internal_mutable_commendation();
  // @@protoc_insertion_point(field_mutable:CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.commendation)
  return _msg;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::set_allocated_commendation(::PlayerCommendationInfo* commendation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete commendation_;
  }
  if (commendation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::PlayerCommendationInfo>::GetOwningArena(commendation);
    if (message_arena != submessage_arena) {
      commendation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, commendation, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  commendation_ = commendation;
  // @@protoc_insertion_point(field_set_allocated:CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.commendation)
}

// optional .PlayerMedalsInfo medals = 9;
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::_internal_has_medals() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || medals_ != nullptr);
  return value;
}
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::has_medals() const {
  return _internal_has_medals();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::clear_medals() {
  if (medals_ != nullptr) medals_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::PlayerMedalsInfo& CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::_internal_medals() const {
  const ::PlayerMedalsInfo* p = medals_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlayerMedalsInfo&>(
      ::_PlayerMedalsInfo_default_instance_);
}
inline const ::PlayerMedalsInfo& CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::medals() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.medals)
  return _internal_medals();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::unsafe_arena_set_allocated_medals(
    ::PlayerMedalsInfo* medals) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(medals_);
  }
  medals_ = medals;
  if (medals) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.medals)
}
inline ::PlayerMedalsInfo* CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::release_medals() {
  _has_bits_[0] &= ~0x00000010u;
  ::PlayerMedalsInfo* temp = medals_;
  medals_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PlayerMedalsInfo* CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::unsafe_arena_release_medals() {
  // @@protoc_insertion_point(field_release:CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.medals)
  _has_bits_[0] &= ~0x00000010u;
  ::PlayerMedalsInfo* temp = medals_;
  medals_ = nullptr;
  return temp;
}
inline ::PlayerMedalsInfo* CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::_internal_mutable_medals() {
  _has_bits_[0] |= 0x00000010u;
  if (medals_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlayerMedalsInfo>(GetArenaForAllocation());
    medals_ = p;
  }
  return medals_;
}
inline ::PlayerMedalsInfo* CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::mutable_medals() {
  ::PlayerMedalsInfo* _msg = _internal_mutable_medals();
  // @@protoc_insertion_point(field_mutable:CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.medals)
  return _msg;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::set_allocated_medals(::PlayerMedalsInfo* medals) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete medals_;
  }
  if (medals) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::PlayerMedalsInfo>::GetOwningArena(medals);
    if (message_arena != submessage_arena) {
      medals = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, medals, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  medals_ = medals;
  // @@protoc_insertion_point(field_set_allocated:CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.medals)
}

// optional .TournamentEvent my_current_event = 10;
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::_internal_has_my_current_event() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || my_current_event_ != nullptr);
  return value;
}
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::has_my_current_event() const {
  return _internal_has_my_current_event();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::clear_my_current_event() {
  if (my_current_event_ != nullptr) my_current_event_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::TournamentEvent& CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::_internal_my_current_event() const {
  const ::TournamentEvent* p = my_current_event_;
  return p != nullptr ? *p : reinterpret_cast<const ::TournamentEvent&>(
      ::_TournamentEvent_default_instance_);
}
inline const ::TournamentEvent& CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::my_current_event() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.my_current_event)
  return _internal_my_current_event();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::unsafe_arena_set_allocated_my_current_event(
    ::TournamentEvent* my_current_event) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(my_current_event_);
  }
  my_current_event_ = my_current_event;
  if (my_current_event) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.my_current_event)
}
inline ::TournamentEvent* CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::release_my_current_event() {
  _has_bits_[0] &= ~0x00000020u;
  ::TournamentEvent* temp = my_current_event_;
  my_current_event_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TournamentEvent* CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::unsafe_arena_release_my_current_event() {
  // @@protoc_insertion_point(field_release:CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.my_current_event)
  _has_bits_[0] &= ~0x00000020u;
  ::TournamentEvent* temp = my_current_event_;
  my_current_event_ = nullptr;
  return temp;
}
inline ::TournamentEvent* CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::_internal_mutable_my_current_event() {
  _has_bits_[0] |= 0x00000020u;
  if (my_current_event_ == nullptr) {
    auto* p = CreateMaybeMessage<::TournamentEvent>(GetArenaForAllocation());
    my_current_event_ = p;
  }
  return my_current_event_;
}
inline ::TournamentEvent* CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::mutable_my_current_event() {
  ::TournamentEvent* _msg = _internal_mutable_my_current_event();
  // @@protoc_insertion_point(field_mutable:CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.my_current_event)
  return _msg;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::set_allocated_my_current_event(::TournamentEvent* my_current_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete my_current_event_;
  }
  if (my_current_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TournamentEvent>::GetOwningArena(my_current_event);
    if (message_arena != submessage_arena) {
      my_current_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, my_current_event, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  my_current_event_ = my_current_event;
  // @@protoc_insertion_point(field_set_allocated:CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.my_current_event)
}

// repeated .TournamentTeam my_current_event_teams = 11;
inline int CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::_internal_my_current_event_teams_size() const {
  return my_current_event_teams_.size();
}
inline int CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::my_current_event_teams_size() const {
  return _internal_my_current_event_teams_size();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::clear_my_current_event_teams() {
  my_current_event_teams_.Clear();
}
inline ::TournamentTeam* CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::mutable_my_current_event_teams(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.my_current_event_teams)
  return my_current_event_teams_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TournamentTeam >*
CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::mutable_my_current_event_teams() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.my_current_event_teams)
  return &my_current_event_teams_;
}
inline const ::TournamentTeam& CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::_internal_my_current_event_teams(int index) const {
  return my_current_event_teams_.Get(index);
}
inline const ::TournamentTeam& CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::my_current_event_teams(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.my_current_event_teams)
  return _internal_my_current_event_teams(index);
}
inline ::TournamentTeam* CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::_internal_add_my_current_event_teams() {
  return my_current_event_teams_.Add();
}
inline ::TournamentTeam* CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::add_my_current_event_teams() {
  ::TournamentTeam* _add = _internal_add_my_current_event_teams();
  // @@protoc_insertion_point(field_add:CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.my_current_event_teams)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TournamentTeam >&
CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::my_current_event_teams() const {
  // @@protoc_insertion_point(field_list:CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.my_current_event_teams)
  return my_current_event_teams_;
}

// optional .TournamentTeam my_current_team = 12;
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::_internal_has_my_current_team() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || my_current_team_ != nullptr);
  return value;
}
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::has_my_current_team() const {
  return _internal_has_my_current_team();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::clear_my_current_team() {
  if (my_current_team_ != nullptr) my_current_team_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::TournamentTeam& CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::_internal_my_current_team() const {
  const ::TournamentTeam* p = my_current_team_;
  return p != nullptr ? *p : reinterpret_cast<const ::TournamentTeam&>(
      ::_TournamentTeam_default_instance_);
}
inline const ::TournamentTeam& CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::my_current_team() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.my_current_team)
  return _internal_my_current_team();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::unsafe_arena_set_allocated_my_current_team(
    ::TournamentTeam* my_current_team) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(my_current_team_);
  }
  my_current_team_ = my_current_team;
  if (my_current_team) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.my_current_team)
}
inline ::TournamentTeam* CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::release_my_current_team() {
  _has_bits_[0] &= ~0x00000040u;
  ::TournamentTeam* temp = my_current_team_;
  my_current_team_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TournamentTeam* CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::unsafe_arena_release_my_current_team() {
  // @@protoc_insertion_point(field_release:CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.my_current_team)
  _has_bits_[0] &= ~0x00000040u;
  ::TournamentTeam* temp = my_current_team_;
  my_current_team_ = nullptr;
  return temp;
}
inline ::TournamentTeam* CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::_internal_mutable_my_current_team() {
  _has_bits_[0] |= 0x00000040u;
  if (my_current_team_ == nullptr) {
    auto* p = CreateMaybeMessage<::TournamentTeam>(GetArenaForAllocation());
    my_current_team_ = p;
  }
  return my_current_team_;
}
inline ::TournamentTeam* CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::mutable_my_current_team() {
  ::TournamentTeam* _msg = _internal_mutable_my_current_team();
  // @@protoc_insertion_point(field_mutable:CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.my_current_team)
  return _msg;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::set_allocated_my_current_team(::TournamentTeam* my_current_team) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete my_current_team_;
  }
  if (my_current_team) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TournamentTeam>::GetOwningArena(my_current_team);
    if (message_arena != submessage_arena) {
      my_current_team = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, my_current_team, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  my_current_team_ = my_current_team;
  // @@protoc_insertion_point(field_set_allocated:CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.my_current_team)
}

// repeated .TournamentEvent my_current_event_stages = 13;
inline int CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::_internal_my_current_event_stages_size() const {
  return my_current_event_stages_.size();
}
inline int CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::my_current_event_stages_size() const {
  return _internal_my_current_event_stages_size();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::clear_my_current_event_stages() {
  my_current_event_stages_.Clear();
}
inline ::TournamentEvent* CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::mutable_my_current_event_stages(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.my_current_event_stages)
  return my_current_event_stages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TournamentEvent >*
CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::mutable_my_current_event_stages() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.my_current_event_stages)
  return &my_current_event_stages_;
}
inline const ::TournamentEvent& CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::_internal_my_current_event_stages(int index) const {
  return my_current_event_stages_.Get(index);
}
inline const ::TournamentEvent& CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::my_current_event_stages(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.my_current_event_stages)
  return _internal_my_current_event_stages(index);
}
inline ::TournamentEvent* CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::_internal_add_my_current_event_stages() {
  return my_current_event_stages_.Add();
}
inline ::TournamentEvent* CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::add_my_current_event_stages() {
  ::TournamentEvent* _add = _internal_add_my_current_event_stages();
  // @@protoc_insertion_point(field_add:CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.my_current_event_stages)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TournamentEvent >&
CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::my_current_event_stages() const {
  // @@protoc_insertion_point(field_list:CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.my_current_event_stages)
  return my_current_event_stages_;
}

// optional uint32 survey_vote = 14;
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::_internal_has_survey_vote() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::has_survey_vote() const {
  return _internal_has_survey_vote();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::clear_survey_vote() {
  survey_vote_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::_internal_survey_vote() const {
  return survey_vote_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::survey_vote() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.survey_vote)
  return _internal_survey_vote();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::_internal_set_survey_vote(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00001000u;
  survey_vote_ = value;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::set_survey_vote(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_survey_vote(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.survey_vote)
}

// optional .AccountActivity activity = 15;
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::_internal_has_activity() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || activity_ != nullptr);
  return value;
}
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::has_activity() const {
  return _internal_has_activity();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::clear_activity() {
  if (activity_ != nullptr) activity_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::AccountActivity& CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::_internal_activity() const {
  const ::AccountActivity* p = activity_;
  return p != nullptr ? *p : reinterpret_cast<const ::AccountActivity&>(
      ::_AccountActivity_default_instance_);
}
inline const ::AccountActivity& CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::activity() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.activity)
  return _internal_activity();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::unsafe_arena_set_allocated_activity(
    ::AccountActivity* activity) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(activity_);
  }
  activity_ = activity;
  if (activity) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.activity)
}
inline ::AccountActivity* CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::release_activity() {
  _has_bits_[0] &= ~0x00000080u;
  ::AccountActivity* temp = activity_;
  activity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::AccountActivity* CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::unsafe_arena_release_activity() {
  // @@protoc_insertion_point(field_release:CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.activity)
  _has_bits_[0] &= ~0x00000080u;
  ::AccountActivity* temp = activity_;
  activity_ = nullptr;
  return temp;
}
inline ::AccountActivity* CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::_internal_mutable_activity() {
  _has_bits_[0] |= 0x00000080u;
  if (activity_ == nullptr) {
    auto* p = CreateMaybeMessage<::AccountActivity>(GetArenaForAllocation());
    activity_ = p;
  }
  return activity_;
}
inline ::AccountActivity* CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::mutable_activity() {
  ::AccountActivity* _msg = _internal_mutable_activity();
  // @@protoc_insertion_point(field_mutable:CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.activity)
  return _msg;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::set_allocated_activity(::AccountActivity* activity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete activity_;
  }
  if (activity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::AccountActivity>::GetOwningArena(activity);
    if (message_arena != submessage_arena) {
      activity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, activity, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  activity_ = activity;
  // @@protoc_insertion_point(field_set_allocated:CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.activity)
}

// optional int32 player_level = 17;
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::_internal_has_player_level() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::has_player_level() const {
  return _internal_has_player_level();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::clear_player_level() {
  player_level_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::_internal_player_level() const {
  return player_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::player_level() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.player_level)
  return _internal_player_level();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::_internal_set_player_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00002000u;
  player_level_ = value;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::set_player_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_player_level(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.player_level)
}

// optional int32 player_cur_xp = 18;
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::_internal_has_player_cur_xp() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::has_player_cur_xp() const {
  return _internal_has_player_cur_xp();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::clear_player_cur_xp() {
  player_cur_xp_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::_internal_player_cur_xp() const {
  return player_cur_xp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::player_cur_xp() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.player_cur_xp)
  return _internal_player_cur_xp();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::_internal_set_player_cur_xp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00004000u;
  player_cur_xp_ = value;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::set_player_cur_xp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_player_cur_xp(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.player_cur_xp)
}

// optional int32 player_xp_bonus_flags = 19;
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::_internal_has_player_xp_bonus_flags() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::has_player_xp_bonus_flags() const {
  return _internal_has_player_xp_bonus_flags();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::clear_player_xp_bonus_flags() {
  player_xp_bonus_flags_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::_internal_player_xp_bonus_flags() const {
  return player_xp_bonus_flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::player_xp_bonus_flags() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.player_xp_bonus_flags)
  return _internal_player_xp_bonus_flags();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::_internal_set_player_xp_bonus_flags(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00008000u;
  player_xp_bonus_flags_ = value;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::set_player_xp_bonus_flags(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_player_xp_bonus_flags(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.player_xp_bonus_flags)
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_AccountPrivacySettings_Setting

// optional uint32 setting_type = 1;
inline bool CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::_internal_has_setting_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::has_setting_type() const {
  return _internal_has_setting_type();
}
inline void CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::clear_setting_type() {
  setting_type_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::_internal_setting_type() const {
  return setting_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::setting_type() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_AccountPrivacySettings.Setting.setting_type)
  return _internal_setting_type();
}
inline void CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::_internal_set_setting_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  setting_type_ = value;
}
inline void CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::set_setting_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_setting_type(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_AccountPrivacySettings.Setting.setting_type)
}

// optional uint32 setting_value = 2;
inline bool CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::_internal_has_setting_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::has_setting_value() const {
  return _internal_has_setting_value();
}
inline void CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::clear_setting_value() {
  setting_value_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::_internal_setting_value() const {
  return setting_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::setting_value() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_AccountPrivacySettings.Setting.setting_value)
  return _internal_setting_value();
}
inline void CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::_internal_set_setting_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  setting_value_ = value;
}
inline void CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::set_setting_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_setting_value(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_AccountPrivacySettings.Setting.setting_value)
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_AccountPrivacySettings

// repeated .CMsgGCCStrike15_v2_AccountPrivacySettings.Setting settings = 1;
inline int CMsgGCCStrike15_v2_AccountPrivacySettings::_internal_settings_size() const {
  return settings_.size();
}
inline int CMsgGCCStrike15_v2_AccountPrivacySettings::settings_size() const {
  return _internal_settings_size();
}
inline void CMsgGCCStrike15_v2_AccountPrivacySettings::clear_settings() {
  settings_.Clear();
}
inline ::CMsgGCCStrike15_v2_AccountPrivacySettings_Setting* CMsgGCCStrike15_v2_AccountPrivacySettings::mutable_settings(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgGCCStrike15_v2_AccountPrivacySettings.settings)
  return settings_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCCStrike15_v2_AccountPrivacySettings_Setting >*
CMsgGCCStrike15_v2_AccountPrivacySettings::mutable_settings() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCCStrike15_v2_AccountPrivacySettings.settings)
  return &settings_;
}
inline const ::CMsgGCCStrike15_v2_AccountPrivacySettings_Setting& CMsgGCCStrike15_v2_AccountPrivacySettings::_internal_settings(int index) const {
  return settings_.Get(index);
}
inline const ::CMsgGCCStrike15_v2_AccountPrivacySettings_Setting& CMsgGCCStrike15_v2_AccountPrivacySettings::settings(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_AccountPrivacySettings.settings)
  return _internal_settings(index);
}
inline ::CMsgGCCStrike15_v2_AccountPrivacySettings_Setting* CMsgGCCStrike15_v2_AccountPrivacySettings::_internal_add_settings() {
  return settings_.Add();
}
inline ::CMsgGCCStrike15_v2_AccountPrivacySettings_Setting* CMsgGCCStrike15_v2_AccountPrivacySettings::add_settings() {
  ::CMsgGCCStrike15_v2_AccountPrivacySettings_Setting* _add = _internal_add_settings();
  // @@protoc_insertion_point(field_add:CMsgGCCStrike15_v2_AccountPrivacySettings.settings)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCCStrike15_v2_AccountPrivacySettings_Setting >&
CMsgGCCStrike15_v2_AccountPrivacySettings::settings() const {
  // @@protoc_insertion_point(field_list:CMsgGCCStrike15_v2_AccountPrivacySettings.settings)
  return settings_;
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon

// optional uint32 account_id = 1;
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::_internal_has_account_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::has_account_id() const {
  return _internal_has_account_id();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::clear_account_id() {
  account_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::_internal_account_id() const {
  return account_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon.account_id)
  return _internal_account_id();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::_internal_set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  account_id_ = value;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon.account_id)
}

// optional .CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve abandoned_match = 2;
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::_internal_has_abandoned_match() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || abandoned_match_ != nullptr);
  return value;
}
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::has_abandoned_match() const {
  return _internal_has_abandoned_match();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::clear_abandoned_match() {
  if (abandoned_match_ != nullptr) abandoned_match_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve& CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::_internal_abandoned_match() const {
  const ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* p = abandoned_match_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve&>(
      ::_CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve_default_instance_);
}
inline const ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve& CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::abandoned_match() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon.abandoned_match)
  return _internal_abandoned_match();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::unsafe_arena_set_allocated_abandoned_match(
    ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* abandoned_match) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(abandoned_match_);
  }
  abandoned_match_ = abandoned_match;
  if (abandoned_match) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon.abandoned_match)
}
inline ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::release_abandoned_match() {
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* temp = abandoned_match_;
  abandoned_match_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::unsafe_arena_release_abandoned_match() {
  // @@protoc_insertion_point(field_release:CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon.abandoned_match)
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* temp = abandoned_match_;
  abandoned_match_ = nullptr;
  return temp;
}
inline ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::_internal_mutable_abandoned_match() {
  _has_bits_[0] |= 0x00000001u;
  if (abandoned_match_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve>(GetArenaForAllocation());
    abandoned_match_ = p;
  }
  return abandoned_match_;
}
inline ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::mutable_abandoned_match() {
  ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* _msg = _internal_mutable_abandoned_match();
  // @@protoc_insertion_point(field_mutable:CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon.abandoned_match)
  return _msg;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::set_allocated_abandoned_match(::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* abandoned_match) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete abandoned_match_;
  }
  if (abandoned_match) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve>::GetOwningArena(abandoned_match);
    if (message_arena != submessage_arena) {
      abandoned_match = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, abandoned_match, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  abandoned_match_ = abandoned_match;
  // @@protoc_insertion_point(field_set_allocated:CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon.abandoned_match)
}

// optional uint32 penalty_seconds = 3;
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::_internal_has_penalty_seconds() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::has_penalty_seconds() const {
  return _internal_has_penalty_seconds();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::clear_penalty_seconds() {
  penalty_seconds_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::_internal_penalty_seconds() const {
  return penalty_seconds_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::penalty_seconds() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon.penalty_seconds)
  return _internal_penalty_seconds();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::_internal_set_penalty_seconds(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  penalty_seconds_ = value;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::set_penalty_seconds(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_penalty_seconds(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon.penalty_seconds)
}

// optional uint32 penalty_reason = 4;
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::_internal_has_penalty_reason() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::has_penalty_reason() const {
  return _internal_has_penalty_reason();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::clear_penalty_reason() {
  penalty_reason_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::_internal_penalty_reason() const {
  return penalty_reason_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::penalty_reason() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon.penalty_reason)
  return _internal_penalty_reason();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::_internal_set_penalty_reason(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  penalty_reason_ = value;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::set_penalty_reason(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_penalty_reason(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon.penalty_reason)
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_MatchmakingServer2GCKick

// optional uint32 account_id = 1;
inline bool CMsgGCCStrike15_v2_MatchmakingServer2GCKick::_internal_has_account_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_MatchmakingServer2GCKick::has_account_id() const {
  return _internal_has_account_id();
}
inline void CMsgGCCStrike15_v2_MatchmakingServer2GCKick::clear_account_id() {
  account_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_MatchmakingServer2GCKick::_internal_account_id() const {
  return account_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_MatchmakingServer2GCKick::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingServer2GCKick.account_id)
  return _internal_account_id();
}
inline void CMsgGCCStrike15_v2_MatchmakingServer2GCKick::_internal_set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  account_id_ = value;
}
inline void CMsgGCCStrike15_v2_MatchmakingServer2GCKick::set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_MatchmakingServer2GCKick.account_id)
}

// optional .CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve reservation = 2;
inline bool CMsgGCCStrike15_v2_MatchmakingServer2GCKick::_internal_has_reservation() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || reservation_ != nullptr);
  return value;
}
inline bool CMsgGCCStrike15_v2_MatchmakingServer2GCKick::has_reservation() const {
  return _internal_has_reservation();
}
inline void CMsgGCCStrike15_v2_MatchmakingServer2GCKick::clear_reservation() {
  if (reservation_ != nullptr) reservation_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve& CMsgGCCStrike15_v2_MatchmakingServer2GCKick::_internal_reservation() const {
  const ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* p = reservation_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve&>(
      ::_CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve_default_instance_);
}
inline const ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve& CMsgGCCStrike15_v2_MatchmakingServer2GCKick::reservation() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingServer2GCKick.reservation)
  return _internal_reservation();
}
inline void CMsgGCCStrike15_v2_MatchmakingServer2GCKick::unsafe_arena_set_allocated_reservation(
    ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* reservation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reservation_);
  }
  reservation_ = reservation;
  if (reservation) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgGCCStrike15_v2_MatchmakingServer2GCKick.reservation)
}
inline ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* CMsgGCCStrike15_v2_MatchmakingServer2GCKick::release_reservation() {
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* temp = reservation_;
  reservation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* CMsgGCCStrike15_v2_MatchmakingServer2GCKick::unsafe_arena_release_reservation() {
  // @@protoc_insertion_point(field_release:CMsgGCCStrike15_v2_MatchmakingServer2GCKick.reservation)
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* temp = reservation_;
  reservation_ = nullptr;
  return temp;
}
inline ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* CMsgGCCStrike15_v2_MatchmakingServer2GCKick::_internal_mutable_reservation() {
  _has_bits_[0] |= 0x00000001u;
  if (reservation_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve>(GetArenaForAllocation());
    reservation_ = p;
  }
  return reservation_;
}
inline ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* CMsgGCCStrike15_v2_MatchmakingServer2GCKick::mutable_reservation() {
  ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* _msg = _internal_mutable_reservation();
  // @@protoc_insertion_point(field_mutable:CMsgGCCStrike15_v2_MatchmakingServer2GCKick.reservation)
  return _msg;
}
inline void CMsgGCCStrike15_v2_MatchmakingServer2GCKick::set_allocated_reservation(::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* reservation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reservation_;
  }
  if (reservation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve>::GetOwningArena(reservation);
    if (message_arena != submessage_arena) {
      reservation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reservation, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  reservation_ = reservation;
  // @@protoc_insertion_point(field_set_allocated:CMsgGCCStrike15_v2_MatchmakingServer2GCKick.reservation)
}

// optional uint32 reason = 3;
inline bool CMsgGCCStrike15_v2_MatchmakingServer2GCKick::_internal_has_reason() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_MatchmakingServer2GCKick::has_reason() const {
  return _internal_has_reason();
}
inline void CMsgGCCStrike15_v2_MatchmakingServer2GCKick::clear_reason() {
  reason_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_MatchmakingServer2GCKick::_internal_reason() const {
  return reason_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_MatchmakingServer2GCKick::reason() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingServer2GCKick.reason)
  return _internal_reason();
}
inline void CMsgGCCStrike15_v2_MatchmakingServer2GCKick::_internal_set_reason(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  reason_ = value;
}
inline void CMsgGCCStrike15_v2_MatchmakingServer2GCKick::set_reason(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_MatchmakingServer2GCKick.reason)
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate

// repeated .PlayerRankingInfo rankings = 1;
inline int CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate::_internal_rankings_size() const {
  return rankings_.size();
}
inline int CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate::rankings_size() const {
  return _internal_rankings_size();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate::clear_rankings() {
  rankings_.Clear();
}
inline ::PlayerRankingInfo* CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate::mutable_rankings(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate.rankings)
  return rankings_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlayerRankingInfo >*
CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate::mutable_rankings() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate.rankings)
  return &rankings_;
}
inline const ::PlayerRankingInfo& CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate::_internal_rankings(int index) const {
  return rankings_.Get(index);
}
inline const ::PlayerRankingInfo& CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate::rankings(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate.rankings)
  return _internal_rankings(index);
}
inline ::PlayerRankingInfo* CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate::_internal_add_rankings() {
  return rankings_.Add();
}
inline ::PlayerRankingInfo* CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate::add_rankings() {
  ::PlayerRankingInfo* _add = _internal_add_rankings();
  // @@protoc_insertion_point(field_add:CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate.rankings)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlayerRankingInfo >&
CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate::rankings() const {
  // @@protoc_insertion_point(field_list:CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate.rankings)
  return rankings_;
}

// optional uint64 match_id = 2;
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate::_internal_has_match_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate::has_match_id() const {
  return _internal_has_match_id();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate::clear_match_id() {
  match_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate::_internal_match_id() const {
  return match_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate::match_id() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate.match_id)
  return _internal_match_id();
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate::_internal_set_match_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  match_id_ = value;
}
inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate::set_match_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_match_id(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate.match_id)
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate

// optional string main_post_url = 1;
inline bool CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate::_internal_has_main_post_url() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate::has_main_post_url() const {
  return _internal_has_main_post_url();
}
inline void CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate::clear_main_post_url() {
  main_post_url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate::main_post_url() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate.main_post_url)
  return _internal_main_post_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate::set_main_post_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 main_post_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate.main_post_url)
}
inline std::string* CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate::mutable_main_post_url() {
  std::string* _s = _internal_mutable_main_post_url();
  // @@protoc_insertion_point(field_mutable:CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate.main_post_url)
  return _s;
}
inline const std::string& CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate::_internal_main_post_url() const {
  return main_post_url_.Get();
}
inline void CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate::_internal_set_main_post_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  main_post_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate::_internal_mutable_main_post_url() {
  _has_bits_[0] |= 0x00000001u;
  return main_post_url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate::release_main_post_url() {
  // @@protoc_insertion_point(field_release:CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate.main_post_url)
  if (!_internal_has_main_post_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return main_post_url_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate::set_allocated_main_post_url(std::string* main_post_url) {
  if (main_post_url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  main_post_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), main_post_url,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate.main_post_url)
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_ServerNotificationForUserPenalty

// optional uint32 account_id = 1;
inline bool CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::_internal_has_account_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::has_account_id() const {
  return _internal_has_account_id();
}
inline void CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::clear_account_id() {
  account_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::_internal_account_id() const {
  return account_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_ServerNotificationForUserPenalty.account_id)
  return _internal_account_id();
}
inline void CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::_internal_set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  account_id_ = value;
}
inline void CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_ServerNotificationForUserPenalty.account_id)
}

// optional uint32 reason = 2;
inline bool CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::_internal_has_reason() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::has_reason() const {
  return _internal_has_reason();
}
inline void CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::clear_reason() {
  reason_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::_internal_reason() const {
  return reason_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::reason() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_ServerNotificationForUserPenalty.reason)
  return _internal_reason();
}
inline void CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::_internal_set_reason(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  reason_ = value;
}
inline void CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::set_reason(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_ServerNotificationForUserPenalty.reason)
}

// optional uint32 seconds = 3;
inline bool CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::_internal_has_seconds() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::has_seconds() const {
  return _internal_has_seconds();
}
inline void CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::clear_seconds() {
  seconds_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::_internal_seconds() const {
  return seconds_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::seconds() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_ServerNotificationForUserPenalty.seconds)
  return _internal_seconds();
}
inline void CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::_internal_set_seconds(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  seconds_ = value;
}
inline void CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::set_seconds(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_seconds(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_ServerNotificationForUserPenalty.seconds)
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_ClientReportPlayer

// optional uint32 account_id = 1;
inline bool CMsgGCCStrike15_v2_ClientReportPlayer::_internal_has_account_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_ClientReportPlayer::has_account_id() const {
  return _internal_has_account_id();
}
inline void CMsgGCCStrike15_v2_ClientReportPlayer::clear_account_id() {
  account_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_ClientReportPlayer::_internal_account_id() const {
  return account_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_ClientReportPlayer::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_ClientReportPlayer.account_id)
  return _internal_account_id();
}
inline void CMsgGCCStrike15_v2_ClientReportPlayer::_internal_set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  account_id_ = value;
}
inline void CMsgGCCStrike15_v2_ClientReportPlayer::set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_ClientReportPlayer.account_id)
}

// optional uint32 rpt_aimbot = 2;
inline bool CMsgGCCStrike15_v2_ClientReportPlayer::_internal_has_rpt_aimbot() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_ClientReportPlayer::has_rpt_aimbot() const {
  return _internal_has_rpt_aimbot();
}
inline void CMsgGCCStrike15_v2_ClientReportPlayer::clear_rpt_aimbot() {
  rpt_aimbot_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_ClientReportPlayer::_internal_rpt_aimbot() const {
  return rpt_aimbot_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_ClientReportPlayer::rpt_aimbot() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_ClientReportPlayer.rpt_aimbot)
  return _internal_rpt_aimbot();
}
inline void CMsgGCCStrike15_v2_ClientReportPlayer::_internal_set_rpt_aimbot(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  rpt_aimbot_ = value;
}
inline void CMsgGCCStrike15_v2_ClientReportPlayer::set_rpt_aimbot(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rpt_aimbot(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_ClientReportPlayer.rpt_aimbot)
}

// optional uint32 rpt_wallhack = 3;
inline bool CMsgGCCStrike15_v2_ClientReportPlayer::_internal_has_rpt_wallhack() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_ClientReportPlayer::has_rpt_wallhack() const {
  return _internal_has_rpt_wallhack();
}
inline void CMsgGCCStrike15_v2_ClientReportPlayer::clear_rpt_wallhack() {
  rpt_wallhack_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_ClientReportPlayer::_internal_rpt_wallhack() const {
  return rpt_wallhack_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_ClientReportPlayer::rpt_wallhack() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_ClientReportPlayer.rpt_wallhack)
  return _internal_rpt_wallhack();
}
inline void CMsgGCCStrike15_v2_ClientReportPlayer::_internal_set_rpt_wallhack(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  rpt_wallhack_ = value;
}
inline void CMsgGCCStrike15_v2_ClientReportPlayer::set_rpt_wallhack(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rpt_wallhack(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_ClientReportPlayer.rpt_wallhack)
}

// optional uint32 rpt_speedhack = 4;
inline bool CMsgGCCStrike15_v2_ClientReportPlayer::_internal_has_rpt_speedhack() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_ClientReportPlayer::has_rpt_speedhack() const {
  return _internal_has_rpt_speedhack();
}
inline void CMsgGCCStrike15_v2_ClientReportPlayer::clear_rpt_speedhack() {
  rpt_speedhack_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_ClientReportPlayer::_internal_rpt_speedhack() const {
  return rpt_speedhack_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_ClientReportPlayer::rpt_speedhack() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_ClientReportPlayer.rpt_speedhack)
  return _internal_rpt_speedhack();
}
inline void CMsgGCCStrike15_v2_ClientReportPlayer::_internal_set_rpt_speedhack(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  rpt_speedhack_ = value;
}
inline void CMsgGCCStrike15_v2_ClientReportPlayer::set_rpt_speedhack(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rpt_speedhack(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_ClientReportPlayer.rpt_speedhack)
}

// optional uint32 rpt_teamharm = 5;
inline bool CMsgGCCStrike15_v2_ClientReportPlayer::_internal_has_rpt_teamharm() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_ClientReportPlayer::has_rpt_teamharm() const {
  return _internal_has_rpt_teamharm();
}
inline void CMsgGCCStrike15_v2_ClientReportPlayer::clear_rpt_teamharm() {
  rpt_teamharm_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_ClientReportPlayer::_internal_rpt_teamharm() const {
  return rpt_teamharm_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_ClientReportPlayer::rpt_teamharm() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_ClientReportPlayer.rpt_teamharm)
  return _internal_rpt_teamharm();
}
inline void CMsgGCCStrike15_v2_ClientReportPlayer::_internal_set_rpt_teamharm(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  rpt_teamharm_ = value;
}
inline void CMsgGCCStrike15_v2_ClientReportPlayer::set_rpt_teamharm(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rpt_teamharm(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_ClientReportPlayer.rpt_teamharm)
}

// optional uint32 rpt_textabuse = 6;
inline bool CMsgGCCStrike15_v2_ClientReportPlayer::_internal_has_rpt_textabuse() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_ClientReportPlayer::has_rpt_textabuse() const {
  return _internal_has_rpt_textabuse();
}
inline void CMsgGCCStrike15_v2_ClientReportPlayer::clear_rpt_textabuse() {
  rpt_textabuse_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_ClientReportPlayer::_internal_rpt_textabuse() const {
  return rpt_textabuse_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_ClientReportPlayer::rpt_textabuse() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_ClientReportPlayer.rpt_textabuse)
  return _internal_rpt_textabuse();
}
inline void CMsgGCCStrike15_v2_ClientReportPlayer::_internal_set_rpt_textabuse(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  rpt_textabuse_ = value;
}
inline void CMsgGCCStrike15_v2_ClientReportPlayer::set_rpt_textabuse(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rpt_textabuse(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_ClientReportPlayer.rpt_textabuse)
}

// optional uint32 rpt_voiceabuse = 7;
inline bool CMsgGCCStrike15_v2_ClientReportPlayer::_internal_has_rpt_voiceabuse() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_ClientReportPlayer::has_rpt_voiceabuse() const {
  return _internal_has_rpt_voiceabuse();
}
inline void CMsgGCCStrike15_v2_ClientReportPlayer::clear_rpt_voiceabuse() {
  rpt_voiceabuse_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_ClientReportPlayer::_internal_rpt_voiceabuse() const {
  return rpt_voiceabuse_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_ClientReportPlayer::rpt_voiceabuse() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_ClientReportPlayer.rpt_voiceabuse)
  return _internal_rpt_voiceabuse();
}
inline void CMsgGCCStrike15_v2_ClientReportPlayer::_internal_set_rpt_voiceabuse(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  rpt_voiceabuse_ = value;
}
inline void CMsgGCCStrike15_v2_ClientReportPlayer::set_rpt_voiceabuse(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rpt_voiceabuse(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_ClientReportPlayer.rpt_voiceabuse)
}

// optional uint64 match_id = 8;
inline bool CMsgGCCStrike15_v2_ClientReportPlayer::_internal_has_match_id() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_ClientReportPlayer::has_match_id() const {
  return _internal_has_match_id();
}
inline void CMsgGCCStrike15_v2_ClientReportPlayer::clear_match_id() {
  match_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCCStrike15_v2_ClientReportPlayer::_internal_match_id() const {
  return match_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCCStrike15_v2_ClientReportPlayer::match_id() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_ClientReportPlayer.match_id)
  return _internal_match_id();
}
inline void CMsgGCCStrike15_v2_ClientReportPlayer::_internal_set_match_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  match_id_ = value;
}
inline void CMsgGCCStrike15_v2_ClientReportPlayer::set_match_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_match_id(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_ClientReportPlayer.match_id)
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_ClientCommendPlayer

// optional uint32 account_id = 1;
inline bool CMsgGCCStrike15_v2_ClientCommendPlayer::_internal_has_account_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_ClientCommendPlayer::has_account_id() const {
  return _internal_has_account_id();
}
inline void CMsgGCCStrike15_v2_ClientCommendPlayer::clear_account_id() {
  account_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_ClientCommendPlayer::_internal_account_id() const {
  return account_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_ClientCommendPlayer::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_ClientCommendPlayer.account_id)
  return _internal_account_id();
}
inline void CMsgGCCStrike15_v2_ClientCommendPlayer::_internal_set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  account_id_ = value;
}
inline void CMsgGCCStrike15_v2_ClientCommendPlayer::set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_ClientCommendPlayer.account_id)
}

// optional uint64 match_id = 8;
inline bool CMsgGCCStrike15_v2_ClientCommendPlayer::_internal_has_match_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_ClientCommendPlayer::has_match_id() const {
  return _internal_has_match_id();
}
inline void CMsgGCCStrike15_v2_ClientCommendPlayer::clear_match_id() {
  match_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCCStrike15_v2_ClientCommendPlayer::_internal_match_id() const {
  return match_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCCStrike15_v2_ClientCommendPlayer::match_id() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_ClientCommendPlayer.match_id)
  return _internal_match_id();
}
inline void CMsgGCCStrike15_v2_ClientCommendPlayer::_internal_set_match_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  match_id_ = value;
}
inline void CMsgGCCStrike15_v2_ClientCommendPlayer::set_match_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_match_id(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_ClientCommendPlayer.match_id)
}

// optional .PlayerCommendationInfo commendation = 9;
inline bool CMsgGCCStrike15_v2_ClientCommendPlayer::_internal_has_commendation() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || commendation_ != nullptr);
  return value;
}
inline bool CMsgGCCStrike15_v2_ClientCommendPlayer::has_commendation() const {
  return _internal_has_commendation();
}
inline void CMsgGCCStrike15_v2_ClientCommendPlayer::clear_commendation() {
  if (commendation_ != nullptr) commendation_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::PlayerCommendationInfo& CMsgGCCStrike15_v2_ClientCommendPlayer::_internal_commendation() const {
  const ::PlayerCommendationInfo* p = commendation_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlayerCommendationInfo&>(
      ::_PlayerCommendationInfo_default_instance_);
}
inline const ::PlayerCommendationInfo& CMsgGCCStrike15_v2_ClientCommendPlayer::commendation() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_ClientCommendPlayer.commendation)
  return _internal_commendation();
}
inline void CMsgGCCStrike15_v2_ClientCommendPlayer::unsafe_arena_set_allocated_commendation(
    ::PlayerCommendationInfo* commendation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(commendation_);
  }
  commendation_ = commendation;
  if (commendation) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgGCCStrike15_v2_ClientCommendPlayer.commendation)
}
inline ::PlayerCommendationInfo* CMsgGCCStrike15_v2_ClientCommendPlayer::release_commendation() {
  _has_bits_[0] &= ~0x00000001u;
  ::PlayerCommendationInfo* temp = commendation_;
  commendation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PlayerCommendationInfo* CMsgGCCStrike15_v2_ClientCommendPlayer::unsafe_arena_release_commendation() {
  // @@protoc_insertion_point(field_release:CMsgGCCStrike15_v2_ClientCommendPlayer.commendation)
  _has_bits_[0] &= ~0x00000001u;
  ::PlayerCommendationInfo* temp = commendation_;
  commendation_ = nullptr;
  return temp;
}
inline ::PlayerCommendationInfo* CMsgGCCStrike15_v2_ClientCommendPlayer::_internal_mutable_commendation() {
  _has_bits_[0] |= 0x00000001u;
  if (commendation_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlayerCommendationInfo>(GetArenaForAllocation());
    commendation_ = p;
  }
  return commendation_;
}
inline ::PlayerCommendationInfo* CMsgGCCStrike15_v2_ClientCommendPlayer::mutable_commendation() {
  ::PlayerCommendationInfo* _msg = _internal_mutable_commendation();
  // @@protoc_insertion_point(field_mutable:CMsgGCCStrike15_v2_ClientCommendPlayer.commendation)
  return _msg;
}
inline void CMsgGCCStrike15_v2_ClientCommendPlayer::set_allocated_commendation(::PlayerCommendationInfo* commendation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete commendation_;
  }
  if (commendation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::PlayerCommendationInfo>::GetOwningArena(commendation);
    if (message_arena != submessage_arena) {
      commendation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, commendation, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  commendation_ = commendation;
  // @@protoc_insertion_point(field_set_allocated:CMsgGCCStrike15_v2_ClientCommendPlayer.commendation)
}

// optional uint32 tokens = 10;
inline bool CMsgGCCStrike15_v2_ClientCommendPlayer::_internal_has_tokens() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_ClientCommendPlayer::has_tokens() const {
  return _internal_has_tokens();
}
inline void CMsgGCCStrike15_v2_ClientCommendPlayer::clear_tokens() {
  tokens_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_ClientCommendPlayer::_internal_tokens() const {
  return tokens_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_ClientCommendPlayer::tokens() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_ClientCommendPlayer.tokens)
  return _internal_tokens();
}
inline void CMsgGCCStrike15_v2_ClientCommendPlayer::_internal_set_tokens(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  tokens_ = value;
}
inline void CMsgGCCStrike15_v2_ClientCommendPlayer::set_tokens(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tokens(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_ClientCommendPlayer.tokens)
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_ClientReportServer

// optional uint32 rpt_poorperf = 1;
inline bool CMsgGCCStrike15_v2_ClientReportServer::_internal_has_rpt_poorperf() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_ClientReportServer::has_rpt_poorperf() const {
  return _internal_has_rpt_poorperf();
}
inline void CMsgGCCStrike15_v2_ClientReportServer::clear_rpt_poorperf() {
  rpt_poorperf_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_ClientReportServer::_internal_rpt_poorperf() const {
  return rpt_poorperf_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_ClientReportServer::rpt_poorperf() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_ClientReportServer.rpt_poorperf)
  return _internal_rpt_poorperf();
}
inline void CMsgGCCStrike15_v2_ClientReportServer::_internal_set_rpt_poorperf(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  rpt_poorperf_ = value;
}
inline void CMsgGCCStrike15_v2_ClientReportServer::set_rpt_poorperf(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rpt_poorperf(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_ClientReportServer.rpt_poorperf)
}

// optional uint32 rpt_abusivemodels = 2;
inline bool CMsgGCCStrike15_v2_ClientReportServer::_internal_has_rpt_abusivemodels() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_ClientReportServer::has_rpt_abusivemodels() const {
  return _internal_has_rpt_abusivemodels();
}
inline void CMsgGCCStrike15_v2_ClientReportServer::clear_rpt_abusivemodels() {
  rpt_abusivemodels_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_ClientReportServer::_internal_rpt_abusivemodels() const {
  return rpt_abusivemodels_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_ClientReportServer::rpt_abusivemodels() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_ClientReportServer.rpt_abusivemodels)
  return _internal_rpt_abusivemodels();
}
inline void CMsgGCCStrike15_v2_ClientReportServer::_internal_set_rpt_abusivemodels(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  rpt_abusivemodels_ = value;
}
inline void CMsgGCCStrike15_v2_ClientReportServer::set_rpt_abusivemodels(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rpt_abusivemodels(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_ClientReportServer.rpt_abusivemodels)
}

// optional uint32 rpt_badmotd = 3;
inline bool CMsgGCCStrike15_v2_ClientReportServer::_internal_has_rpt_badmotd() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_ClientReportServer::has_rpt_badmotd() const {
  return _internal_has_rpt_badmotd();
}
inline void CMsgGCCStrike15_v2_ClientReportServer::clear_rpt_badmotd() {
  rpt_badmotd_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_ClientReportServer::_internal_rpt_badmotd() const {
  return rpt_badmotd_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_ClientReportServer::rpt_badmotd() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_ClientReportServer.rpt_badmotd)
  return _internal_rpt_badmotd();
}
inline void CMsgGCCStrike15_v2_ClientReportServer::_internal_set_rpt_badmotd(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  rpt_badmotd_ = value;
}
inline void CMsgGCCStrike15_v2_ClientReportServer::set_rpt_badmotd(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rpt_badmotd(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_ClientReportServer.rpt_badmotd)
}

// optional uint32 rpt_listingabuse = 4;
inline bool CMsgGCCStrike15_v2_ClientReportServer::_internal_has_rpt_listingabuse() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_ClientReportServer::has_rpt_listingabuse() const {
  return _internal_has_rpt_listingabuse();
}
inline void CMsgGCCStrike15_v2_ClientReportServer::clear_rpt_listingabuse() {
  rpt_listingabuse_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_ClientReportServer::_internal_rpt_listingabuse() const {
  return rpt_listingabuse_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_ClientReportServer::rpt_listingabuse() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_ClientReportServer.rpt_listingabuse)
  return _internal_rpt_listingabuse();
}
inline void CMsgGCCStrike15_v2_ClientReportServer::_internal_set_rpt_listingabuse(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  rpt_listingabuse_ = value;
}
inline void CMsgGCCStrike15_v2_ClientReportServer::set_rpt_listingabuse(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rpt_listingabuse(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_ClientReportServer.rpt_listingabuse)
}

// optional uint32 rpt_inventoryabuse = 5;
inline bool CMsgGCCStrike15_v2_ClientReportServer::_internal_has_rpt_inventoryabuse() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_ClientReportServer::has_rpt_inventoryabuse() const {
  return _internal_has_rpt_inventoryabuse();
}
inline void CMsgGCCStrike15_v2_ClientReportServer::clear_rpt_inventoryabuse() {
  rpt_inventoryabuse_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_ClientReportServer::_internal_rpt_inventoryabuse() const {
  return rpt_inventoryabuse_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_ClientReportServer::rpt_inventoryabuse() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_ClientReportServer.rpt_inventoryabuse)
  return _internal_rpt_inventoryabuse();
}
inline void CMsgGCCStrike15_v2_ClientReportServer::_internal_set_rpt_inventoryabuse(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  rpt_inventoryabuse_ = value;
}
inline void CMsgGCCStrike15_v2_ClientReportServer::set_rpt_inventoryabuse(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rpt_inventoryabuse(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_ClientReportServer.rpt_inventoryabuse)
}

// optional uint64 match_id = 8;
inline bool CMsgGCCStrike15_v2_ClientReportServer::_internal_has_match_id() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_ClientReportServer::has_match_id() const {
  return _internal_has_match_id();
}
inline void CMsgGCCStrike15_v2_ClientReportServer::clear_match_id() {
  match_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCCStrike15_v2_ClientReportServer::_internal_match_id() const {
  return match_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCCStrike15_v2_ClientReportServer::match_id() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_ClientReportServer.match_id)
  return _internal_match_id();
}
inline void CMsgGCCStrike15_v2_ClientReportServer::_internal_set_match_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  match_id_ = value;
}
inline void CMsgGCCStrike15_v2_ClientReportServer::set_match_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_match_id(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_ClientReportServer.match_id)
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_ClientReportResponse

// optional uint64 confirmation_id = 1;
inline bool CMsgGCCStrike15_v2_ClientReportResponse::_internal_has_confirmation_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_ClientReportResponse::has_confirmation_id() const {
  return _internal_has_confirmation_id();
}
inline void CMsgGCCStrike15_v2_ClientReportResponse::clear_confirmation_id() {
  confirmation_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCCStrike15_v2_ClientReportResponse::_internal_confirmation_id() const {
  return confirmation_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCCStrike15_v2_ClientReportResponse::confirmation_id() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_ClientReportResponse.confirmation_id)
  return _internal_confirmation_id();
}
inline void CMsgGCCStrike15_v2_ClientReportResponse::_internal_set_confirmation_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  confirmation_id_ = value;
}
inline void CMsgGCCStrike15_v2_ClientReportResponse::set_confirmation_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_confirmation_id(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_ClientReportResponse.confirmation_id)
}

// optional uint32 account_id = 2;
inline bool CMsgGCCStrike15_v2_ClientReportResponse::_internal_has_account_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_ClientReportResponse::has_account_id() const {
  return _internal_has_account_id();
}
inline void CMsgGCCStrike15_v2_ClientReportResponse::clear_account_id() {
  account_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_ClientReportResponse::_internal_account_id() const {
  return account_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_ClientReportResponse::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_ClientReportResponse.account_id)
  return _internal_account_id();
}
inline void CMsgGCCStrike15_v2_ClientReportResponse::_internal_set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  account_id_ = value;
}
inline void CMsgGCCStrike15_v2_ClientReportResponse::set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_ClientReportResponse.account_id)
}

// optional uint32 server_ip = 3;
inline bool CMsgGCCStrike15_v2_ClientReportResponse::_internal_has_server_ip() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_ClientReportResponse::has_server_ip() const {
  return _internal_has_server_ip();
}
inline void CMsgGCCStrike15_v2_ClientReportResponse::clear_server_ip() {
  server_ip_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_ClientReportResponse::_internal_server_ip() const {
  return server_ip_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_ClientReportResponse::server_ip() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_ClientReportResponse.server_ip)
  return _internal_server_ip();
}
inline void CMsgGCCStrike15_v2_ClientReportResponse::_internal_set_server_ip(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  server_ip_ = value;
}
inline void CMsgGCCStrike15_v2_ClientReportResponse::set_server_ip(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_server_ip(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_ClientReportResponse.server_ip)
}

// optional uint32 response_type = 4;
inline bool CMsgGCCStrike15_v2_ClientReportResponse::_internal_has_response_type() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_ClientReportResponse::has_response_type() const {
  return _internal_has_response_type();
}
inline void CMsgGCCStrike15_v2_ClientReportResponse::clear_response_type() {
  response_type_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_ClientReportResponse::_internal_response_type() const {
  return response_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_ClientReportResponse::response_type() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_ClientReportResponse.response_type)
  return _internal_response_type();
}
inline void CMsgGCCStrike15_v2_ClientReportResponse::_internal_set_response_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  response_type_ = value;
}
inline void CMsgGCCStrike15_v2_ClientReportResponse::set_response_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_response_type(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_ClientReportResponse.response_type)
}

// optional uint32 response_result = 5;
inline bool CMsgGCCStrike15_v2_ClientReportResponse::_internal_has_response_result() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_ClientReportResponse::has_response_result() const {
  return _internal_has_response_result();
}
inline void CMsgGCCStrike15_v2_ClientReportResponse::clear_response_result() {
  response_result_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_ClientReportResponse::_internal_response_result() const {
  return response_result_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_ClientReportResponse::response_result() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_ClientReportResponse.response_result)
  return _internal_response_result();
}
inline void CMsgGCCStrike15_v2_ClientReportResponse::_internal_set_response_result(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  response_result_ = value;
}
inline void CMsgGCCStrike15_v2_ClientReportResponse::set_response_result(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_response_result(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_ClientReportResponse.response_result)
}

// optional uint32 tokens = 6;
inline bool CMsgGCCStrike15_v2_ClientReportResponse::_internal_has_tokens() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_ClientReportResponse::has_tokens() const {
  return _internal_has_tokens();
}
inline void CMsgGCCStrike15_v2_ClientReportResponse::clear_tokens() {
  tokens_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_ClientReportResponse::_internal_tokens() const {
  return tokens_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_ClientReportResponse::tokens() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_ClientReportResponse.tokens)
  return _internal_tokens();
}
inline void CMsgGCCStrike15_v2_ClientReportResponse::_internal_set_tokens(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  tokens_ = value;
}
inline void CMsgGCCStrike15_v2_ClientReportResponse::set_tokens(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tokens(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_ClientReportResponse.tokens)
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends

// optional uint32 request_id = 1;
inline bool CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::_internal_has_request_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::has_request_id() const {
  return _internal_has_request_id();
}
inline void CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::clear_request_id() {
  request_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::_internal_request_id() const {
  return request_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::request_id() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends.request_id)
  return _internal_request_id();
}
inline void CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::_internal_set_request_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  request_id_ = value;
}
inline void CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::set_request_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends.request_id)
}

// repeated uint32 account_ids = 2;
inline int CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::_internal_account_ids_size() const {
  return account_ids_.size();
}
inline int CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::account_ids_size() const {
  return _internal_account_ids_size();
}
inline void CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::clear_account_ids() {
  account_ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::_internal_account_ids(int index) const {
  return account_ids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::account_ids(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends.account_ids)
  return _internal_account_ids(index);
}
inline void CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::set_account_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  account_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends.account_ids)
}
inline void CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::_internal_add_account_ids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  account_ids_.Add(value);
}
inline void CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::add_account_ids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_account_ids(value);
  // @@protoc_insertion_point(field_add:CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends.account_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::_internal_account_ids() const {
  return account_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::account_ids() const {
  // @@protoc_insertion_point(field_list:CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends.account_ids)
  return _internal_account_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::_internal_mutable_account_ids() {
  return &account_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::mutable_account_ids() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends.account_ids)
  return _internal_mutable_account_ids();
}

// optional uint64 serverid = 3;
inline bool CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::_internal_has_serverid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::has_serverid() const {
  return _internal_has_serverid();
}
inline void CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::clear_serverid() {
  serverid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::_internal_serverid() const {
  return serverid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::serverid() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends.serverid)
  return _internal_serverid();
}
inline void CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::_internal_set_serverid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  serverid_ = value;
}
inline void CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::set_serverid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_serverid(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends.serverid)
}

// optional uint64 matchid = 4;
inline bool CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::_internal_has_matchid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::has_matchid() const {
  return _internal_has_matchid();
}
inline void CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::clear_matchid() {
  matchid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::_internal_matchid() const {
  return matchid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::matchid() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends.matchid)
  return _internal_matchid();
}
inline void CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::_internal_set_matchid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  matchid_ = value;
}
inline void CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::set_matchid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_matchid(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends.matchid)
}

// -------------------------------------------------------------------

// WatchableMatchInfo

// optional uint32 server_ip = 1;
inline bool WatchableMatchInfo::_internal_has_server_ip() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool WatchableMatchInfo::has_server_ip() const {
  return _internal_has_server_ip();
}
inline void WatchableMatchInfo::clear_server_ip() {
  server_ip_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WatchableMatchInfo::_internal_server_ip() const {
  return server_ip_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WatchableMatchInfo::server_ip() const {
  // @@protoc_insertion_point(field_get:WatchableMatchInfo.server_ip)
  return _internal_server_ip();
}
inline void WatchableMatchInfo::_internal_set_server_ip(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  server_ip_ = value;
}
inline void WatchableMatchInfo::set_server_ip(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_server_ip(value);
  // @@protoc_insertion_point(field_set:WatchableMatchInfo.server_ip)
}

// optional uint32 tv_port = 2;
inline bool WatchableMatchInfo::_internal_has_tv_port() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool WatchableMatchInfo::has_tv_port() const {
  return _internal_has_tv_port();
}
inline void WatchableMatchInfo::clear_tv_port() {
  tv_port_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WatchableMatchInfo::_internal_tv_port() const {
  return tv_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WatchableMatchInfo::tv_port() const {
  // @@protoc_insertion_point(field_get:WatchableMatchInfo.tv_port)
  return _internal_tv_port();
}
inline void WatchableMatchInfo::_internal_set_tv_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  tv_port_ = value;
}
inline void WatchableMatchInfo::set_tv_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tv_port(value);
  // @@protoc_insertion_point(field_set:WatchableMatchInfo.tv_port)
}

// optional uint32 tv_spectators = 3;
inline bool WatchableMatchInfo::_internal_has_tv_spectators() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool WatchableMatchInfo::has_tv_spectators() const {
  return _internal_has_tv_spectators();
}
inline void WatchableMatchInfo::clear_tv_spectators() {
  tv_spectators_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WatchableMatchInfo::_internal_tv_spectators() const {
  return tv_spectators_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WatchableMatchInfo::tv_spectators() const {
  // @@protoc_insertion_point(field_get:WatchableMatchInfo.tv_spectators)
  return _internal_tv_spectators();
}
inline void WatchableMatchInfo::_internal_set_tv_spectators(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  tv_spectators_ = value;
}
inline void WatchableMatchInfo::set_tv_spectators(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tv_spectators(value);
  // @@protoc_insertion_point(field_set:WatchableMatchInfo.tv_spectators)
}

// optional uint32 tv_time = 4;
inline bool WatchableMatchInfo::_internal_has_tv_time() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool WatchableMatchInfo::has_tv_time() const {
  return _internal_has_tv_time();
}
inline void WatchableMatchInfo::clear_tv_time() {
  tv_time_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WatchableMatchInfo::_internal_tv_time() const {
  return tv_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WatchableMatchInfo::tv_time() const {
  // @@protoc_insertion_point(field_get:WatchableMatchInfo.tv_time)
  return _internal_tv_time();
}
inline void WatchableMatchInfo::_internal_set_tv_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  tv_time_ = value;
}
inline void WatchableMatchInfo::set_tv_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tv_time(value);
  // @@protoc_insertion_point(field_set:WatchableMatchInfo.tv_time)
}

// optional bytes tv_watch_password = 5;
inline bool WatchableMatchInfo::_internal_has_tv_watch_password() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool WatchableMatchInfo::has_tv_watch_password() const {
  return _internal_has_tv_watch_password();
}
inline void WatchableMatchInfo::clear_tv_watch_password() {
  tv_watch_password_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& WatchableMatchInfo::tv_watch_password() const {
  // @@protoc_insertion_point(field_get:WatchableMatchInfo.tv_watch_password)
  return _internal_tv_watch_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WatchableMatchInfo::set_tv_watch_password(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 tv_watch_password_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:WatchableMatchInfo.tv_watch_password)
}
inline std::string* WatchableMatchInfo::mutable_tv_watch_password() {
  std::string* _s = _internal_mutable_tv_watch_password();
  // @@protoc_insertion_point(field_mutable:WatchableMatchInfo.tv_watch_password)
  return _s;
}
inline const std::string& WatchableMatchInfo::_internal_tv_watch_password() const {
  return tv_watch_password_.Get();
}
inline void WatchableMatchInfo::_internal_set_tv_watch_password(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  tv_watch_password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* WatchableMatchInfo::_internal_mutable_tv_watch_password() {
  _has_bits_[0] |= 0x00000001u;
  return tv_watch_password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* WatchableMatchInfo::release_tv_watch_password() {
  // @@protoc_insertion_point(field_release:WatchableMatchInfo.tv_watch_password)
  if (!_internal_has_tv_watch_password()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return tv_watch_password_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void WatchableMatchInfo::set_allocated_tv_watch_password(std::string* tv_watch_password) {
  if (tv_watch_password != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  tv_watch_password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tv_watch_password,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:WatchableMatchInfo.tv_watch_password)
}

// optional uint64 cl_decryptdata_key = 6;
inline bool WatchableMatchInfo::_internal_has_cl_decryptdata_key() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool WatchableMatchInfo::has_cl_decryptdata_key() const {
  return _internal_has_cl_decryptdata_key();
}
inline void WatchableMatchInfo::clear_cl_decryptdata_key() {
  cl_decryptdata_key_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 WatchableMatchInfo::_internal_cl_decryptdata_key() const {
  return cl_decryptdata_key_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 WatchableMatchInfo::cl_decryptdata_key() const {
  // @@protoc_insertion_point(field_get:WatchableMatchInfo.cl_decryptdata_key)
  return _internal_cl_decryptdata_key();
}
inline void WatchableMatchInfo::_internal_set_cl_decryptdata_key(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000080u;
  cl_decryptdata_key_ = value;
}
inline void WatchableMatchInfo::set_cl_decryptdata_key(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_cl_decryptdata_key(value);
  // @@protoc_insertion_point(field_set:WatchableMatchInfo.cl_decryptdata_key)
}

// optional uint64 cl_decryptdata_key_pub = 7;
inline bool WatchableMatchInfo::_internal_has_cl_decryptdata_key_pub() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool WatchableMatchInfo::has_cl_decryptdata_key_pub() const {
  return _internal_has_cl_decryptdata_key_pub();
}
inline void WatchableMatchInfo::clear_cl_decryptdata_key_pub() {
  cl_decryptdata_key_pub_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 WatchableMatchInfo::_internal_cl_decryptdata_key_pub() const {
  return cl_decryptdata_key_pub_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 WatchableMatchInfo::cl_decryptdata_key_pub() const {
  // @@protoc_insertion_point(field_get:WatchableMatchInfo.cl_decryptdata_key_pub)
  return _internal_cl_decryptdata_key_pub();
}
inline void WatchableMatchInfo::_internal_set_cl_decryptdata_key_pub(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000100u;
  cl_decryptdata_key_pub_ = value;
}
inline void WatchableMatchInfo::set_cl_decryptdata_key_pub(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_cl_decryptdata_key_pub(value);
  // @@protoc_insertion_point(field_set:WatchableMatchInfo.cl_decryptdata_key_pub)
}

// optional uint32 game_type = 8;
inline bool WatchableMatchInfo::_internal_has_game_type() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool WatchableMatchInfo::has_game_type() const {
  return _internal_has_game_type();
}
inline void WatchableMatchInfo::clear_game_type() {
  game_type_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WatchableMatchInfo::_internal_game_type() const {
  return game_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WatchableMatchInfo::game_type() const {
  // @@protoc_insertion_point(field_get:WatchableMatchInfo.game_type)
  return _internal_game_type();
}
inline void WatchableMatchInfo::_internal_set_game_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00001000u;
  game_type_ = value;
}
inline void WatchableMatchInfo::set_game_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_game_type(value);
  // @@protoc_insertion_point(field_set:WatchableMatchInfo.game_type)
}

// optional string game_mapgroup = 9;
inline bool WatchableMatchInfo::_internal_has_game_mapgroup() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool WatchableMatchInfo::has_game_mapgroup() const {
  return _internal_has_game_mapgroup();
}
inline void WatchableMatchInfo::clear_game_mapgroup() {
  game_mapgroup_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& WatchableMatchInfo::game_mapgroup() const {
  // @@protoc_insertion_point(field_get:WatchableMatchInfo.game_mapgroup)
  return _internal_game_mapgroup();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WatchableMatchInfo::set_game_mapgroup(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 game_mapgroup_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:WatchableMatchInfo.game_mapgroup)
}
inline std::string* WatchableMatchInfo::mutable_game_mapgroup() {
  std::string* _s = _internal_mutable_game_mapgroup();
  // @@protoc_insertion_point(field_mutable:WatchableMatchInfo.game_mapgroup)
  return _s;
}
inline const std::string& WatchableMatchInfo::_internal_game_mapgroup() const {
  return game_mapgroup_.Get();
}
inline void WatchableMatchInfo::_internal_set_game_mapgroup(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  game_mapgroup_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* WatchableMatchInfo::_internal_mutable_game_mapgroup() {
  _has_bits_[0] |= 0x00000002u;
  return game_mapgroup_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* WatchableMatchInfo::release_game_mapgroup() {
  // @@protoc_insertion_point(field_release:WatchableMatchInfo.game_mapgroup)
  if (!_internal_has_game_mapgroup()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return game_mapgroup_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void WatchableMatchInfo::set_allocated_game_mapgroup(std::string* game_mapgroup) {
  if (game_mapgroup != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  game_mapgroup_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), game_mapgroup,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:WatchableMatchInfo.game_mapgroup)
}

// optional string game_map = 10;
inline bool WatchableMatchInfo::_internal_has_game_map() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool WatchableMatchInfo::has_game_map() const {
  return _internal_has_game_map();
}
inline void WatchableMatchInfo::clear_game_map() {
  game_map_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& WatchableMatchInfo::game_map() const {
  // @@protoc_insertion_point(field_get:WatchableMatchInfo.game_map)
  return _internal_game_map();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WatchableMatchInfo::set_game_map(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 game_map_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:WatchableMatchInfo.game_map)
}
inline std::string* WatchableMatchInfo::mutable_game_map() {
  std::string* _s = _internal_mutable_game_map();
  // @@protoc_insertion_point(field_mutable:WatchableMatchInfo.game_map)
  return _s;
}
inline const std::string& WatchableMatchInfo::_internal_game_map() const {
  return game_map_.Get();
}
inline void WatchableMatchInfo::_internal_set_game_map(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  game_map_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* WatchableMatchInfo::_internal_mutable_game_map() {
  _has_bits_[0] |= 0x00000004u;
  return game_map_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* WatchableMatchInfo::release_game_map() {
  // @@protoc_insertion_point(field_release:WatchableMatchInfo.game_map)
  if (!_internal_has_game_map()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return game_map_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void WatchableMatchInfo::set_allocated_game_map(std::string* game_map) {
  if (game_map != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  game_map_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), game_map,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:WatchableMatchInfo.game_map)
}

// optional uint64 server_id = 11;
inline bool WatchableMatchInfo::_internal_has_server_id() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool WatchableMatchInfo::has_server_id() const {
  return _internal_has_server_id();
}
inline void WatchableMatchInfo::clear_server_id() {
  server_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 WatchableMatchInfo::_internal_server_id() const {
  return server_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 WatchableMatchInfo::server_id() const {
  // @@protoc_insertion_point(field_get:WatchableMatchInfo.server_id)
  return _internal_server_id();
}
inline void WatchableMatchInfo::_internal_set_server_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000200u;
  server_id_ = value;
}
inline void WatchableMatchInfo::set_server_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_server_id(value);
  // @@protoc_insertion_point(field_set:WatchableMatchInfo.server_id)
}

// optional uint64 match_id = 12;
inline bool WatchableMatchInfo::_internal_has_match_id() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool WatchableMatchInfo::has_match_id() const {
  return _internal_has_match_id();
}
inline void WatchableMatchInfo::clear_match_id() {
  match_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 WatchableMatchInfo::_internal_match_id() const {
  return match_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 WatchableMatchInfo::match_id() const {
  // @@protoc_insertion_point(field_get:WatchableMatchInfo.match_id)
  return _internal_match_id();
}
inline void WatchableMatchInfo::_internal_set_match_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000400u;
  match_id_ = value;
}
inline void WatchableMatchInfo::set_match_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_match_id(value);
  // @@protoc_insertion_point(field_set:WatchableMatchInfo.match_id)
}

// optional uint64 reservation_id = 13;
inline bool WatchableMatchInfo::_internal_has_reservation_id() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool WatchableMatchInfo::has_reservation_id() const {
  return _internal_has_reservation_id();
}
inline void WatchableMatchInfo::clear_reservation_id() {
  reservation_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 WatchableMatchInfo::_internal_reservation_id() const {
  return reservation_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 WatchableMatchInfo::reservation_id() const {
  // @@protoc_insertion_point(field_get:WatchableMatchInfo.reservation_id)
  return _internal_reservation_id();
}
inline void WatchableMatchInfo::_internal_set_reservation_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000800u;
  reservation_id_ = value;
}
inline void WatchableMatchInfo::set_reservation_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_reservation_id(value);
  // @@protoc_insertion_point(field_set:WatchableMatchInfo.reservation_id)
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_ClientRequestJoinFriendData

// optional uint32 version = 1;
inline bool CMsgGCCStrike15_v2_ClientRequestJoinFriendData::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_ClientRequestJoinFriendData::has_version() const {
  return _internal_has_version();
}
inline void CMsgGCCStrike15_v2_ClientRequestJoinFriendData::clear_version() {
  version_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_ClientRequestJoinFriendData::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_ClientRequestJoinFriendData::version() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_ClientRequestJoinFriendData.version)
  return _internal_version();
}
inline void CMsgGCCStrike15_v2_ClientRequestJoinFriendData::_internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  version_ = value;
}
inline void CMsgGCCStrike15_v2_ClientRequestJoinFriendData::set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_ClientRequestJoinFriendData.version)
}

// optional uint32 account_id = 2;
inline bool CMsgGCCStrike15_v2_ClientRequestJoinFriendData::_internal_has_account_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_ClientRequestJoinFriendData::has_account_id() const {
  return _internal_has_account_id();
}
inline void CMsgGCCStrike15_v2_ClientRequestJoinFriendData::clear_account_id() {
  account_id_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_ClientRequestJoinFriendData::_internal_account_id() const {
  return account_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_ClientRequestJoinFriendData::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_ClientRequestJoinFriendData.account_id)
  return _internal_account_id();
}
inline void CMsgGCCStrike15_v2_ClientRequestJoinFriendData::_internal_set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  account_id_ = value;
}
inline void CMsgGCCStrike15_v2_ClientRequestJoinFriendData::set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_ClientRequestJoinFriendData.account_id)
}

// optional uint32 join_token = 3;
inline bool CMsgGCCStrike15_v2_ClientRequestJoinFriendData::_internal_has_join_token() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_ClientRequestJoinFriendData::has_join_token() const {
  return _internal_has_join_token();
}
inline void CMsgGCCStrike15_v2_ClientRequestJoinFriendData::clear_join_token() {
  join_token_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_ClientRequestJoinFriendData::_internal_join_token() const {
  return join_token_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_ClientRequestJoinFriendData::join_token() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_ClientRequestJoinFriendData.join_token)
  return _internal_join_token();
}
inline void CMsgGCCStrike15_v2_ClientRequestJoinFriendData::_internal_set_join_token(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  join_token_ = value;
}
inline void CMsgGCCStrike15_v2_ClientRequestJoinFriendData::set_join_token(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_join_token(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_ClientRequestJoinFriendData.join_token)
}

// optional uint32 join_ipp = 4;
inline bool CMsgGCCStrike15_v2_ClientRequestJoinFriendData::_internal_has_join_ipp() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_ClientRequestJoinFriendData::has_join_ipp() const {
  return _internal_has_join_ipp();
}
inline void CMsgGCCStrike15_v2_ClientRequestJoinFriendData::clear_join_ipp() {
  join_ipp_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_ClientRequestJoinFriendData::_internal_join_ipp() const {
  return join_ipp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_ClientRequestJoinFriendData::join_ipp() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_ClientRequestJoinFriendData.join_ipp)
  return _internal_join_ipp();
}
inline void CMsgGCCStrike15_v2_ClientRequestJoinFriendData::_internal_set_join_ipp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  join_ipp_ = value;
}
inline void CMsgGCCStrike15_v2_ClientRequestJoinFriendData::set_join_ipp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_join_ipp(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_ClientRequestJoinFriendData.join_ipp)
}

// optional .CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve res = 5;
inline bool CMsgGCCStrike15_v2_ClientRequestJoinFriendData::_internal_has_res() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || res_ != nullptr);
  return value;
}
inline bool CMsgGCCStrike15_v2_ClientRequestJoinFriendData::has_res() const {
  return _internal_has_res();
}
inline void CMsgGCCStrike15_v2_ClientRequestJoinFriendData::clear_res() {
  if (res_ != nullptr) res_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve& CMsgGCCStrike15_v2_ClientRequestJoinFriendData::_internal_res() const {
  const ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* p = res_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve&>(
      ::_CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve_default_instance_);
}
inline const ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve& CMsgGCCStrike15_v2_ClientRequestJoinFriendData::res() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_ClientRequestJoinFriendData.res)
  return _internal_res();
}
inline void CMsgGCCStrike15_v2_ClientRequestJoinFriendData::unsafe_arena_set_allocated_res(
    ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* res) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(res_);
  }
  res_ = res;
  if (res) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgGCCStrike15_v2_ClientRequestJoinFriendData.res)
}
inline ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* CMsgGCCStrike15_v2_ClientRequestJoinFriendData::release_res() {
  _has_bits_[0] &= ~0x00000002u;
  ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* temp = res_;
  res_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* CMsgGCCStrike15_v2_ClientRequestJoinFriendData::unsafe_arena_release_res() {
  // @@protoc_insertion_point(field_release:CMsgGCCStrike15_v2_ClientRequestJoinFriendData.res)
  _has_bits_[0] &= ~0x00000002u;
  ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* temp = res_;
  res_ = nullptr;
  return temp;
}
inline ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* CMsgGCCStrike15_v2_ClientRequestJoinFriendData::_internal_mutable_res() {
  _has_bits_[0] |= 0x00000002u;
  if (res_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve>(GetArenaForAllocation());
    res_ = p;
  }
  return res_;
}
inline ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* CMsgGCCStrike15_v2_ClientRequestJoinFriendData::mutable_res() {
  ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* _msg = _internal_mutable_res();
  // @@protoc_insertion_point(field_mutable:CMsgGCCStrike15_v2_ClientRequestJoinFriendData.res)
  return _msg;
}
inline void CMsgGCCStrike15_v2_ClientRequestJoinFriendData::set_allocated_res(::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* res) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete res_;
  }
  if (res) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve>::GetOwningArena(res);
    if (message_arena != submessage_arena) {
      res = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, res, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  res_ = res;
  // @@protoc_insertion_point(field_set_allocated:CMsgGCCStrike15_v2_ClientRequestJoinFriendData.res)
}

// optional string errormsg = 6;
inline bool CMsgGCCStrike15_v2_ClientRequestJoinFriendData::_internal_has_errormsg() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_ClientRequestJoinFriendData::has_errormsg() const {
  return _internal_has_errormsg();
}
inline void CMsgGCCStrike15_v2_ClientRequestJoinFriendData::clear_errormsg() {
  errormsg_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgGCCStrike15_v2_ClientRequestJoinFriendData::errormsg() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_ClientRequestJoinFriendData.errormsg)
  return _internal_errormsg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgGCCStrike15_v2_ClientRequestJoinFriendData::set_errormsg(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 errormsg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_ClientRequestJoinFriendData.errormsg)
}
inline std::string* CMsgGCCStrike15_v2_ClientRequestJoinFriendData::mutable_errormsg() {
  std::string* _s = _internal_mutable_errormsg();
  // @@protoc_insertion_point(field_mutable:CMsgGCCStrike15_v2_ClientRequestJoinFriendData.errormsg)
  return _s;
}
inline const std::string& CMsgGCCStrike15_v2_ClientRequestJoinFriendData::_internal_errormsg() const {
  return errormsg_.Get();
}
inline void CMsgGCCStrike15_v2_ClientRequestJoinFriendData::_internal_set_errormsg(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  errormsg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgGCCStrike15_v2_ClientRequestJoinFriendData::_internal_mutable_errormsg() {
  _has_bits_[0] |= 0x00000001u;
  return errormsg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgGCCStrike15_v2_ClientRequestJoinFriendData::release_errormsg() {
  // @@protoc_insertion_point(field_release:CMsgGCCStrike15_v2_ClientRequestJoinFriendData.errormsg)
  if (!_internal_has_errormsg()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return errormsg_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CMsgGCCStrike15_v2_ClientRequestJoinFriendData::set_allocated_errormsg(std::string* errormsg) {
  if (errormsg != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  errormsg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errormsg,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CMsgGCCStrike15_v2_ClientRequestJoinFriendData.errormsg)
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_ClientRequestJoinServerData

// optional uint32 version = 1;
inline bool CMsgGCCStrike15_v2_ClientRequestJoinServerData::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_ClientRequestJoinServerData::has_version() const {
  return _internal_has_version();
}
inline void CMsgGCCStrike15_v2_ClientRequestJoinServerData::clear_version() {
  version_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_ClientRequestJoinServerData::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_ClientRequestJoinServerData::version() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_ClientRequestJoinServerData.version)
  return _internal_version();
}
inline void CMsgGCCStrike15_v2_ClientRequestJoinServerData::_internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  version_ = value;
}
inline void CMsgGCCStrike15_v2_ClientRequestJoinServerData::set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_ClientRequestJoinServerData.version)
}

// optional uint32 account_id = 2;
inline bool CMsgGCCStrike15_v2_ClientRequestJoinServerData::_internal_has_account_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_ClientRequestJoinServerData::has_account_id() const {
  return _internal_has_account_id();
}
inline void CMsgGCCStrike15_v2_ClientRequestJoinServerData::clear_account_id() {
  account_id_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_ClientRequestJoinServerData::_internal_account_id() const {
  return account_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_ClientRequestJoinServerData::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_ClientRequestJoinServerData.account_id)
  return _internal_account_id();
}
inline void CMsgGCCStrike15_v2_ClientRequestJoinServerData::_internal_set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  account_id_ = value;
}
inline void CMsgGCCStrike15_v2_ClientRequestJoinServerData::set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_ClientRequestJoinServerData.account_id)
}

// optional uint64 serverid = 3;
inline bool CMsgGCCStrike15_v2_ClientRequestJoinServerData::_internal_has_serverid() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_ClientRequestJoinServerData::has_serverid() const {
  return _internal_has_serverid();
}
inline void CMsgGCCStrike15_v2_ClientRequestJoinServerData::clear_serverid() {
  serverid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCCStrike15_v2_ClientRequestJoinServerData::_internal_serverid() const {
  return serverid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCCStrike15_v2_ClientRequestJoinServerData::serverid() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_ClientRequestJoinServerData.serverid)
  return _internal_serverid();
}
inline void CMsgGCCStrike15_v2_ClientRequestJoinServerData::_internal_set_serverid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  serverid_ = value;
}
inline void CMsgGCCStrike15_v2_ClientRequestJoinServerData::set_serverid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_serverid(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_ClientRequestJoinServerData.serverid)
}

// optional uint32 server_ip = 4;
inline bool CMsgGCCStrike15_v2_ClientRequestJoinServerData::_internal_has_server_ip() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_ClientRequestJoinServerData::has_server_ip() const {
  return _internal_has_server_ip();
}
inline void CMsgGCCStrike15_v2_ClientRequestJoinServerData::clear_server_ip() {
  server_ip_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_ClientRequestJoinServerData::_internal_server_ip() const {
  return server_ip_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_ClientRequestJoinServerData::server_ip() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_ClientRequestJoinServerData.server_ip)
  return _internal_server_ip();
}
inline void CMsgGCCStrike15_v2_ClientRequestJoinServerData::_internal_set_server_ip(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  server_ip_ = value;
}
inline void CMsgGCCStrike15_v2_ClientRequestJoinServerData::set_server_ip(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_server_ip(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_ClientRequestJoinServerData.server_ip)
}

// optional uint32 server_port = 5;
inline bool CMsgGCCStrike15_v2_ClientRequestJoinServerData::_internal_has_server_port() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_ClientRequestJoinServerData::has_server_port() const {
  return _internal_has_server_port();
}
inline void CMsgGCCStrike15_v2_ClientRequestJoinServerData::clear_server_port() {
  server_port_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_ClientRequestJoinServerData::_internal_server_port() const {
  return server_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_ClientRequestJoinServerData::server_port() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_ClientRequestJoinServerData.server_port)
  return _internal_server_port();
}
inline void CMsgGCCStrike15_v2_ClientRequestJoinServerData::_internal_set_server_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  server_port_ = value;
}
inline void CMsgGCCStrike15_v2_ClientRequestJoinServerData::set_server_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_server_port(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_ClientRequestJoinServerData.server_port)
}

// optional .CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve res = 6;
inline bool CMsgGCCStrike15_v2_ClientRequestJoinServerData::_internal_has_res() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || res_ != nullptr);
  return value;
}
inline bool CMsgGCCStrike15_v2_ClientRequestJoinServerData::has_res() const {
  return _internal_has_res();
}
inline void CMsgGCCStrike15_v2_ClientRequestJoinServerData::clear_res() {
  if (res_ != nullptr) res_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve& CMsgGCCStrike15_v2_ClientRequestJoinServerData::_internal_res() const {
  const ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* p = res_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve&>(
      ::_CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve_default_instance_);
}
inline const ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve& CMsgGCCStrike15_v2_ClientRequestJoinServerData::res() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_ClientRequestJoinServerData.res)
  return _internal_res();
}
inline void CMsgGCCStrike15_v2_ClientRequestJoinServerData::unsafe_arena_set_allocated_res(
    ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* res) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(res_);
  }
  res_ = res;
  if (res) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgGCCStrike15_v2_ClientRequestJoinServerData.res)
}
inline ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* CMsgGCCStrike15_v2_ClientRequestJoinServerData::release_res() {
  _has_bits_[0] &= ~0x00000002u;
  ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* temp = res_;
  res_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* CMsgGCCStrike15_v2_ClientRequestJoinServerData::unsafe_arena_release_res() {
  // @@protoc_insertion_point(field_release:CMsgGCCStrike15_v2_ClientRequestJoinServerData.res)
  _has_bits_[0] &= ~0x00000002u;
  ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* temp = res_;
  res_ = nullptr;
  return temp;
}
inline ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* CMsgGCCStrike15_v2_ClientRequestJoinServerData::_internal_mutable_res() {
  _has_bits_[0] |= 0x00000002u;
  if (res_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve>(GetArenaForAllocation());
    res_ = p;
  }
  return res_;
}
inline ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* CMsgGCCStrike15_v2_ClientRequestJoinServerData::mutable_res() {
  ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* _msg = _internal_mutable_res();
  // @@protoc_insertion_point(field_mutable:CMsgGCCStrike15_v2_ClientRequestJoinServerData.res)
  return _msg;
}
inline void CMsgGCCStrike15_v2_ClientRequestJoinServerData::set_allocated_res(::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* res) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete res_;
  }
  if (res) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve>::GetOwningArena(res);
    if (message_arena != submessage_arena) {
      res = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, res, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  res_ = res;
  // @@protoc_insertion_point(field_set_allocated:CMsgGCCStrike15_v2_ClientRequestJoinServerData.res)
}

// optional string errormsg = 7;
inline bool CMsgGCCStrike15_v2_ClientRequestJoinServerData::_internal_has_errormsg() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_ClientRequestJoinServerData::has_errormsg() const {
  return _internal_has_errormsg();
}
inline void CMsgGCCStrike15_v2_ClientRequestJoinServerData::clear_errormsg() {
  errormsg_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgGCCStrike15_v2_ClientRequestJoinServerData::errormsg() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_ClientRequestJoinServerData.errormsg)
  return _internal_errormsg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgGCCStrike15_v2_ClientRequestJoinServerData::set_errormsg(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 errormsg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_ClientRequestJoinServerData.errormsg)
}
inline std::string* CMsgGCCStrike15_v2_ClientRequestJoinServerData::mutable_errormsg() {
  std::string* _s = _internal_mutable_errormsg();
  // @@protoc_insertion_point(field_mutable:CMsgGCCStrike15_v2_ClientRequestJoinServerData.errormsg)
  return _s;
}
inline const std::string& CMsgGCCStrike15_v2_ClientRequestJoinServerData::_internal_errormsg() const {
  return errormsg_.Get();
}
inline void CMsgGCCStrike15_v2_ClientRequestJoinServerData::_internal_set_errormsg(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  errormsg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgGCCStrike15_v2_ClientRequestJoinServerData::_internal_mutable_errormsg() {
  _has_bits_[0] |= 0x00000001u;
  return errormsg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgGCCStrike15_v2_ClientRequestJoinServerData::release_errormsg() {
  // @@protoc_insertion_point(field_release:CMsgGCCStrike15_v2_ClientRequestJoinServerData.errormsg)
  if (!_internal_has_errormsg()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return errormsg_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CMsgGCCStrike15_v2_ClientRequestJoinServerData::set_allocated_errormsg(std::string* errormsg) {
  if (errormsg != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  errormsg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errormsg,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CMsgGCCStrike15_v2_ClientRequestJoinServerData.errormsg)
}

// -------------------------------------------------------------------

// CMsgGCCstrike15_v2_ClientRequestNewMission

// optional uint32 mission_id = 2;
inline bool CMsgGCCstrike15_v2_ClientRequestNewMission::_internal_has_mission_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCCstrike15_v2_ClientRequestNewMission::has_mission_id() const {
  return _internal_has_mission_id();
}
inline void CMsgGCCstrike15_v2_ClientRequestNewMission::clear_mission_id() {
  mission_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCstrike15_v2_ClientRequestNewMission::_internal_mission_id() const {
  return mission_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCstrike15_v2_ClientRequestNewMission::mission_id() const {
  // @@protoc_insertion_point(field_get:CMsgGCCstrike15_v2_ClientRequestNewMission.mission_id)
  return _internal_mission_id();
}
inline void CMsgGCCstrike15_v2_ClientRequestNewMission::_internal_set_mission_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  mission_id_ = value;
}
inline void CMsgGCCstrike15_v2_ClientRequestNewMission::set_mission_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_mission_id(value);
  // @@protoc_insertion_point(field_set:CMsgGCCstrike15_v2_ClientRequestNewMission.mission_id)
}

// optional uint32 campaign_id = 3;
inline bool CMsgGCCstrike15_v2_ClientRequestNewMission::_internal_has_campaign_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGCCstrike15_v2_ClientRequestNewMission::has_campaign_id() const {
  return _internal_has_campaign_id();
}
inline void CMsgGCCstrike15_v2_ClientRequestNewMission::clear_campaign_id() {
  campaign_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCstrike15_v2_ClientRequestNewMission::_internal_campaign_id() const {
  return campaign_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCstrike15_v2_ClientRequestNewMission::campaign_id() const {
  // @@protoc_insertion_point(field_get:CMsgGCCstrike15_v2_ClientRequestNewMission.campaign_id)
  return _internal_campaign_id();
}
inline void CMsgGCCstrike15_v2_ClientRequestNewMission::_internal_set_campaign_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  campaign_id_ = value;
}
inline void CMsgGCCstrike15_v2_ClientRequestNewMission::set_campaign_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_campaign_id(value);
  // @@protoc_insertion_point(field_set:CMsgGCCstrike15_v2_ClientRequestNewMission.campaign_id)
}

// -------------------------------------------------------------------

// CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded

// repeated .XpProgressData xp_progress_data = 1;
inline int CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::_internal_xp_progress_data_size() const {
  return xp_progress_data_.size();
}
inline int CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::xp_progress_data_size() const {
  return _internal_xp_progress_data_size();
}
inline void CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::clear_xp_progress_data() {
  xp_progress_data_.Clear();
}
inline ::XpProgressData* CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::mutable_xp_progress_data(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded.xp_progress_data)
  return xp_progress_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XpProgressData >*
CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::mutable_xp_progress_data() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded.xp_progress_data)
  return &xp_progress_data_;
}
inline const ::XpProgressData& CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::_internal_xp_progress_data(int index) const {
  return xp_progress_data_.Get(index);
}
inline const ::XpProgressData& CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::xp_progress_data(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded.xp_progress_data)
  return _internal_xp_progress_data(index);
}
inline ::XpProgressData* CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::_internal_add_xp_progress_data() {
  return xp_progress_data_.Add();
}
inline ::XpProgressData* CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::add_xp_progress_data() {
  ::XpProgressData* _add = _internal_add_xp_progress_data();
  // @@protoc_insertion_point(field_add:CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded.xp_progress_data)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XpProgressData >&
CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::xp_progress_data() const {
  // @@protoc_insertion_point(field_list:CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded.xp_progress_data)
  return xp_progress_data_;
}

// optional uint32 account_id = 2;
inline bool CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::_internal_has_account_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::has_account_id() const {
  return _internal_has_account_id();
}
inline void CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::clear_account_id() {
  account_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::_internal_account_id() const {
  return account_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded.account_id)
  return _internal_account_id();
}
inline void CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::_internal_set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  account_id_ = value;
}
inline void CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded.account_id)
}

// optional uint32 current_xp = 3;
inline bool CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::_internal_has_current_xp() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::has_current_xp() const {
  return _internal_has_current_xp();
}
inline void CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::clear_current_xp() {
  current_xp_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::_internal_current_xp() const {
  return current_xp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::current_xp() const {
  // @@protoc_insertion_point(field_get:CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded.current_xp)
  return _internal_current_xp();
}
inline void CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::_internal_set_current_xp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  current_xp_ = value;
}
inline void CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::set_current_xp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_current_xp(value);
  // @@protoc_insertion_point(field_set:CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded.current_xp)
}

// optional uint32 current_level = 4;
inline bool CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::_internal_has_current_level() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::has_current_level() const {
  return _internal_has_current_level();
}
inline void CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::clear_current_level() {
  current_level_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::_internal_current_level() const {
  return current_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::current_level() const {
  // @@protoc_insertion_point(field_get:CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded.current_level)
  return _internal_current_level();
}
inline void CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::_internal_set_current_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  current_level_ = value;
}
inline void CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::set_current_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_current_level(value);
  // @@protoc_insertion_point(field_set:CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded.current_level)
}

// optional uint32 upgraded_defidx = 5;
inline bool CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::_internal_has_upgraded_defidx() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::has_upgraded_defidx() const {
  return _internal_has_upgraded_defidx();
}
inline void CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::clear_upgraded_defidx() {
  upgraded_defidx_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::_internal_upgraded_defidx() const {
  return upgraded_defidx_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::upgraded_defidx() const {
  // @@protoc_insertion_point(field_get:CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded.upgraded_defidx)
  return _internal_upgraded_defidx();
}
inline void CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::_internal_set_upgraded_defidx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  upgraded_defidx_ = value;
}
inline void CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::set_upgraded_defidx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_upgraded_defidx(value);
  // @@protoc_insertion_point(field_set:CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded.upgraded_defidx)
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_WatchInfoUsers

// optional uint32 request_id = 1;
inline bool CMsgGCCStrike15_v2_WatchInfoUsers::_internal_has_request_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_WatchInfoUsers::has_request_id() const {
  return _internal_has_request_id();
}
inline void CMsgGCCStrike15_v2_WatchInfoUsers::clear_request_id() {
  request_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_WatchInfoUsers::_internal_request_id() const {
  return request_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_WatchInfoUsers::request_id() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_WatchInfoUsers.request_id)
  return _internal_request_id();
}
inline void CMsgGCCStrike15_v2_WatchInfoUsers::_internal_set_request_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  request_id_ = value;
}
inline void CMsgGCCStrike15_v2_WatchInfoUsers::set_request_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_WatchInfoUsers.request_id)
}

// repeated uint32 account_ids = 2;
inline int CMsgGCCStrike15_v2_WatchInfoUsers::_internal_account_ids_size() const {
  return account_ids_.size();
}
inline int CMsgGCCStrike15_v2_WatchInfoUsers::account_ids_size() const {
  return _internal_account_ids_size();
}
inline void CMsgGCCStrike15_v2_WatchInfoUsers::clear_account_ids() {
  account_ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_WatchInfoUsers::_internal_account_ids(int index) const {
  return account_ids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_WatchInfoUsers::account_ids(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_WatchInfoUsers.account_ids)
  return _internal_account_ids(index);
}
inline void CMsgGCCStrike15_v2_WatchInfoUsers::set_account_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  account_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_WatchInfoUsers.account_ids)
}
inline void CMsgGCCStrike15_v2_WatchInfoUsers::_internal_add_account_ids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  account_ids_.Add(value);
}
inline void CMsgGCCStrike15_v2_WatchInfoUsers::add_account_ids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_account_ids(value);
  // @@protoc_insertion_point(field_add:CMsgGCCStrike15_v2_WatchInfoUsers.account_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CMsgGCCStrike15_v2_WatchInfoUsers::_internal_account_ids() const {
  return account_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CMsgGCCStrike15_v2_WatchInfoUsers::account_ids() const {
  // @@protoc_insertion_point(field_list:CMsgGCCStrike15_v2_WatchInfoUsers.account_ids)
  return _internal_account_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CMsgGCCStrike15_v2_WatchInfoUsers::_internal_mutable_account_ids() {
  return &account_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CMsgGCCStrike15_v2_WatchInfoUsers::mutable_account_ids() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCCStrike15_v2_WatchInfoUsers.account_ids)
  return _internal_mutable_account_ids();
}

// repeated .WatchableMatchInfo watchable_match_infos = 3;
inline int CMsgGCCStrike15_v2_WatchInfoUsers::_internal_watchable_match_infos_size() const {
  return watchable_match_infos_.size();
}
inline int CMsgGCCStrike15_v2_WatchInfoUsers::watchable_match_infos_size() const {
  return _internal_watchable_match_infos_size();
}
inline void CMsgGCCStrike15_v2_WatchInfoUsers::clear_watchable_match_infos() {
  watchable_match_infos_.Clear();
}
inline ::WatchableMatchInfo* CMsgGCCStrike15_v2_WatchInfoUsers::mutable_watchable_match_infos(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgGCCStrike15_v2_WatchInfoUsers.watchable_match_infos)
  return watchable_match_infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::WatchableMatchInfo >*
CMsgGCCStrike15_v2_WatchInfoUsers::mutable_watchable_match_infos() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCCStrike15_v2_WatchInfoUsers.watchable_match_infos)
  return &watchable_match_infos_;
}
inline const ::WatchableMatchInfo& CMsgGCCStrike15_v2_WatchInfoUsers::_internal_watchable_match_infos(int index) const {
  return watchable_match_infos_.Get(index);
}
inline const ::WatchableMatchInfo& CMsgGCCStrike15_v2_WatchInfoUsers::watchable_match_infos(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_WatchInfoUsers.watchable_match_infos)
  return _internal_watchable_match_infos(index);
}
inline ::WatchableMatchInfo* CMsgGCCStrike15_v2_WatchInfoUsers::_internal_add_watchable_match_infos() {
  return watchable_match_infos_.Add();
}
inline ::WatchableMatchInfo* CMsgGCCStrike15_v2_WatchInfoUsers::add_watchable_match_infos() {
  ::WatchableMatchInfo* _add = _internal_add_watchable_match_infos();
  // @@protoc_insertion_point(field_add:CMsgGCCStrike15_v2_WatchInfoUsers.watchable_match_infos)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::WatchableMatchInfo >&
CMsgGCCStrike15_v2_WatchInfoUsers::watchable_match_infos() const {
  // @@protoc_insertion_point(field_list:CMsgGCCStrike15_v2_WatchInfoUsers.watchable_match_infos)
  return watchable_match_infos_;
}

// optional uint32 extended_timeout = 5;
inline bool CMsgGCCStrike15_v2_WatchInfoUsers::_internal_has_extended_timeout() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_WatchInfoUsers::has_extended_timeout() const {
  return _internal_has_extended_timeout();
}
inline void CMsgGCCStrike15_v2_WatchInfoUsers::clear_extended_timeout() {
  extended_timeout_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_WatchInfoUsers::_internal_extended_timeout() const {
  return extended_timeout_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_WatchInfoUsers::extended_timeout() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_WatchInfoUsers.extended_timeout)
  return _internal_extended_timeout();
}
inline void CMsgGCCStrike15_v2_WatchInfoUsers::_internal_set_extended_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  extended_timeout_ = value;
}
inline void CMsgGCCStrike15_v2_WatchInfoUsers::set_extended_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_extended_timeout(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_WatchInfoUsers.extended_timeout)
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_ClientRequestPlayersProfile

// optional uint32 request_id__deprecated = 1;
inline bool CMsgGCCStrike15_v2_ClientRequestPlayersProfile::_internal_has_request_id__deprecated() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_ClientRequestPlayersProfile::has_request_id__deprecated() const {
  return _internal_has_request_id__deprecated();
}
inline void CMsgGCCStrike15_v2_ClientRequestPlayersProfile::clear_request_id__deprecated() {
  request_id__deprecated_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_ClientRequestPlayersProfile::_internal_request_id__deprecated() const {
  return request_id__deprecated_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_ClientRequestPlayersProfile::request_id__deprecated() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_ClientRequestPlayersProfile.request_id__deprecated)
  return _internal_request_id__deprecated();
}
inline void CMsgGCCStrike15_v2_ClientRequestPlayersProfile::_internal_set_request_id__deprecated(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  request_id__deprecated_ = value;
}
inline void CMsgGCCStrike15_v2_ClientRequestPlayersProfile::set_request_id__deprecated(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_request_id__deprecated(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_ClientRequestPlayersProfile.request_id__deprecated)
}

// repeated uint32 account_ids__deprecated = 2;
inline int CMsgGCCStrike15_v2_ClientRequestPlayersProfile::_internal_account_ids__deprecated_size() const {
  return account_ids__deprecated_.size();
}
inline int CMsgGCCStrike15_v2_ClientRequestPlayersProfile::account_ids__deprecated_size() const {
  return _internal_account_ids__deprecated_size();
}
inline void CMsgGCCStrike15_v2_ClientRequestPlayersProfile::clear_account_ids__deprecated() {
  account_ids__deprecated_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_ClientRequestPlayersProfile::_internal_account_ids__deprecated(int index) const {
  return account_ids__deprecated_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_ClientRequestPlayersProfile::account_ids__deprecated(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_ClientRequestPlayersProfile.account_ids__deprecated)
  return _internal_account_ids__deprecated(index);
}
inline void CMsgGCCStrike15_v2_ClientRequestPlayersProfile::set_account_ids__deprecated(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  account_ids__deprecated_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_ClientRequestPlayersProfile.account_ids__deprecated)
}
inline void CMsgGCCStrike15_v2_ClientRequestPlayersProfile::_internal_add_account_ids__deprecated(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  account_ids__deprecated_.Add(value);
}
inline void CMsgGCCStrike15_v2_ClientRequestPlayersProfile::add_account_ids__deprecated(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_account_ids__deprecated(value);
  // @@protoc_insertion_point(field_add:CMsgGCCStrike15_v2_ClientRequestPlayersProfile.account_ids__deprecated)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CMsgGCCStrike15_v2_ClientRequestPlayersProfile::_internal_account_ids__deprecated() const {
  return account_ids__deprecated_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CMsgGCCStrike15_v2_ClientRequestPlayersProfile::account_ids__deprecated() const {
  // @@protoc_insertion_point(field_list:CMsgGCCStrike15_v2_ClientRequestPlayersProfile.account_ids__deprecated)
  return _internal_account_ids__deprecated();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CMsgGCCStrike15_v2_ClientRequestPlayersProfile::_internal_mutable_account_ids__deprecated() {
  return &account_ids__deprecated_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CMsgGCCStrike15_v2_ClientRequestPlayersProfile::mutable_account_ids__deprecated() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCCStrike15_v2_ClientRequestPlayersProfile.account_ids__deprecated)
  return _internal_mutable_account_ids__deprecated();
}

// optional uint32 account_id = 3;
inline bool CMsgGCCStrike15_v2_ClientRequestPlayersProfile::_internal_has_account_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_ClientRequestPlayersProfile::has_account_id() const {
  return _internal_has_account_id();
}
inline void CMsgGCCStrike15_v2_ClientRequestPlayersProfile::clear_account_id() {
  account_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_ClientRequestPlayersProfile::_internal_account_id() const {
  return account_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_ClientRequestPlayersProfile::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_ClientRequestPlayersProfile.account_id)
  return _internal_account_id();
}
inline void CMsgGCCStrike15_v2_ClientRequestPlayersProfile::_internal_set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  account_id_ = value;
}
inline void CMsgGCCStrike15_v2_ClientRequestPlayersProfile::set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_ClientRequestPlayersProfile.account_id)
}

// optional uint32 request_level = 4;
inline bool CMsgGCCStrike15_v2_ClientRequestPlayersProfile::_internal_has_request_level() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_ClientRequestPlayersProfile::has_request_level() const {
  return _internal_has_request_level();
}
inline void CMsgGCCStrike15_v2_ClientRequestPlayersProfile::clear_request_level() {
  request_level_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_ClientRequestPlayersProfile::_internal_request_level() const {
  return request_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_ClientRequestPlayersProfile::request_level() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_ClientRequestPlayersProfile.request_level)
  return _internal_request_level();
}
inline void CMsgGCCStrike15_v2_ClientRequestPlayersProfile::_internal_set_request_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  request_level_ = value;
}
inline void CMsgGCCStrike15_v2_ClientRequestPlayersProfile::set_request_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_request_level(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_ClientRequestPlayersProfile.request_level)
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_PlayersProfile

// optional uint32 request_id = 1;
inline bool CMsgGCCStrike15_v2_PlayersProfile::_internal_has_request_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_PlayersProfile::has_request_id() const {
  return _internal_has_request_id();
}
inline void CMsgGCCStrike15_v2_PlayersProfile::clear_request_id() {
  request_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_PlayersProfile::_internal_request_id() const {
  return request_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_PlayersProfile::request_id() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_PlayersProfile.request_id)
  return _internal_request_id();
}
inline void CMsgGCCStrike15_v2_PlayersProfile::_internal_set_request_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  request_id_ = value;
}
inline void CMsgGCCStrike15_v2_PlayersProfile::set_request_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_PlayersProfile.request_id)
}

// repeated .CMsgGCCStrike15_v2_MatchmakingGC2ClientHello account_profiles = 2;
inline int CMsgGCCStrike15_v2_PlayersProfile::_internal_account_profiles_size() const {
  return account_profiles_.size();
}
inline int CMsgGCCStrike15_v2_PlayersProfile::account_profiles_size() const {
  return _internal_account_profiles_size();
}
inline void CMsgGCCStrike15_v2_PlayersProfile::clear_account_profiles() {
  account_profiles_.Clear();
}
inline ::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello* CMsgGCCStrike15_v2_PlayersProfile::mutable_account_profiles(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgGCCStrike15_v2_PlayersProfile.account_profiles)
  return account_profiles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello >*
CMsgGCCStrike15_v2_PlayersProfile::mutable_account_profiles() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCCStrike15_v2_PlayersProfile.account_profiles)
  return &account_profiles_;
}
inline const ::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello& CMsgGCCStrike15_v2_PlayersProfile::_internal_account_profiles(int index) const {
  return account_profiles_.Get(index);
}
inline const ::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello& CMsgGCCStrike15_v2_PlayersProfile::account_profiles(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_PlayersProfile.account_profiles)
  return _internal_account_profiles(index);
}
inline ::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello* CMsgGCCStrike15_v2_PlayersProfile::_internal_add_account_profiles() {
  return account_profiles_.Add();
}
inline ::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello* CMsgGCCStrike15_v2_PlayersProfile::add_account_profiles() {
  ::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello* _add = _internal_add_account_profiles();
  // @@protoc_insertion_point(field_add:CMsgGCCStrike15_v2_PlayersProfile.account_profiles)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello >&
CMsgGCCStrike15_v2_PlayersProfile::account_profiles() const {
  // @@protoc_insertion_point(field_list:CMsgGCCStrike15_v2_PlayersProfile.account_profiles)
  return account_profiles_;
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate

// optional uint64 caseid = 1;
inline bool CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::_internal_has_caseid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::has_caseid() const {
  return _internal_has_caseid();
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::clear_caseid() {
  caseid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::_internal_caseid() const {
  return caseid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::caseid() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate.caseid)
  return _internal_caseid();
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::_internal_set_caseid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  caseid_ = value;
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::set_caseid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_caseid(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate.caseid)
}

// optional uint32 suspectid = 3;
inline bool CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::_internal_has_suspectid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::has_suspectid() const {
  return _internal_has_suspectid();
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::clear_suspectid() {
  suspectid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::_internal_suspectid() const {
  return suspectid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::suspectid() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate.suspectid)
  return _internal_suspectid();
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::_internal_set_suspectid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  suspectid_ = value;
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::set_suspectid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_suspectid(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate.suspectid)
}

// optional uint32 fractionid = 4;
inline bool CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::_internal_has_fractionid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::has_fractionid() const {
  return _internal_has_fractionid();
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::clear_fractionid() {
  fractionid_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::_internal_fractionid() const {
  return fractionid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::fractionid() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate.fractionid)
  return _internal_fractionid();
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::_internal_set_fractionid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  fractionid_ = value;
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::set_fractionid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fractionid(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate.fractionid)
}

// optional uint32 rpt_aimbot = 5;
inline bool CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::_internal_has_rpt_aimbot() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::has_rpt_aimbot() const {
  return _internal_has_rpt_aimbot();
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::clear_rpt_aimbot() {
  rpt_aimbot_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::_internal_rpt_aimbot() const {
  return rpt_aimbot_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::rpt_aimbot() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate.rpt_aimbot)
  return _internal_rpt_aimbot();
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::_internal_set_rpt_aimbot(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  rpt_aimbot_ = value;
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::set_rpt_aimbot(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rpt_aimbot(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate.rpt_aimbot)
}

// optional uint32 rpt_wallhack = 6;
inline bool CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::_internal_has_rpt_wallhack() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::has_rpt_wallhack() const {
  return _internal_has_rpt_wallhack();
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::clear_rpt_wallhack() {
  rpt_wallhack_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::_internal_rpt_wallhack() const {
  return rpt_wallhack_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::rpt_wallhack() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate.rpt_wallhack)
  return _internal_rpt_wallhack();
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::_internal_set_rpt_wallhack(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  rpt_wallhack_ = value;
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::set_rpt_wallhack(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rpt_wallhack(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate.rpt_wallhack)
}

// optional uint32 rpt_speedhack = 7;
inline bool CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::_internal_has_rpt_speedhack() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::has_rpt_speedhack() const {
  return _internal_has_rpt_speedhack();
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::clear_rpt_speedhack() {
  rpt_speedhack_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::_internal_rpt_speedhack() const {
  return rpt_speedhack_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::rpt_speedhack() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate.rpt_speedhack)
  return _internal_rpt_speedhack();
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::_internal_set_rpt_speedhack(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  rpt_speedhack_ = value;
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::set_rpt_speedhack(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rpt_speedhack(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate.rpt_speedhack)
}

// optional uint32 rpt_teamharm = 8;
inline bool CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::_internal_has_rpt_teamharm() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::has_rpt_teamharm() const {
  return _internal_has_rpt_teamharm();
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::clear_rpt_teamharm() {
  rpt_teamharm_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::_internal_rpt_teamharm() const {
  return rpt_teamharm_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::rpt_teamharm() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate.rpt_teamharm)
  return _internal_rpt_teamharm();
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::_internal_set_rpt_teamharm(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  rpt_teamharm_ = value;
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::set_rpt_teamharm(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rpt_teamharm(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate.rpt_teamharm)
}

// optional uint32 reason = 9;
inline bool CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::_internal_has_reason() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::has_reason() const {
  return _internal_has_reason();
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::clear_reason() {
  reason_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::_internal_reason() const {
  return reason_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::reason() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate.reason)
  return _internal_reason();
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::_internal_set_reason(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  reason_ = value;
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::set_reason(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate.reason)
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment

// optional uint64 caseid = 1;
inline bool CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::_internal_has_caseid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::has_caseid() const {
  return _internal_has_caseid();
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::clear_caseid() {
  caseid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::_internal_caseid() const {
  return caseid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::caseid() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment.caseid)
  return _internal_caseid();
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::_internal_set_caseid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  caseid_ = value;
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::set_caseid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_caseid(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment.caseid)
}

// optional string caseurl = 2;
inline bool CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::_internal_has_caseurl() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::has_caseurl() const {
  return _internal_has_caseurl();
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::clear_caseurl() {
  caseurl_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::caseurl() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment.caseurl)
  return _internal_caseurl();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::set_caseurl(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 caseurl_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment.caseurl)
}
inline std::string* CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::mutable_caseurl() {
  std::string* _s = _internal_mutable_caseurl();
  // @@protoc_insertion_point(field_mutable:CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment.caseurl)
  return _s;
}
inline const std::string& CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::_internal_caseurl() const {
  return caseurl_.Get();
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::_internal_set_caseurl(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  caseurl_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::_internal_mutable_caseurl() {
  _has_bits_[0] |= 0x00000001u;
  return caseurl_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::release_caseurl() {
  // @@protoc_insertion_point(field_release:CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment.caseurl)
  if (!_internal_has_caseurl()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return caseurl_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::set_allocated_caseurl(std::string* caseurl) {
  if (caseurl != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  caseurl_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), caseurl,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment.caseurl)
}

// optional uint32 verdict = 3;
inline bool CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::_internal_has_verdict() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::has_verdict() const {
  return _internal_has_verdict();
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::clear_verdict() {
  verdict_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::_internal_verdict() const {
  return verdict_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::verdict() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment.verdict)
  return _internal_verdict();
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::_internal_set_verdict(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  verdict_ = value;
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::set_verdict(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_verdict(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment.verdict)
}

// optional uint32 timestamp = 4;
inline bool CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::_internal_has_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::clear_timestamp() {
  timestamp_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::timestamp() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment.timestamp)
  return _internal_timestamp();
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  timestamp_ = value;
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment.timestamp)
}

// optional uint32 throttleseconds = 5;
inline bool CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::_internal_has_throttleseconds() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::has_throttleseconds() const {
  return _internal_has_throttleseconds();
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::clear_throttleseconds() {
  throttleseconds_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::_internal_throttleseconds() const {
  return throttleseconds_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::throttleseconds() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment.throttleseconds)
  return _internal_throttleseconds();
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::_internal_set_throttleseconds(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  throttleseconds_ = value;
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::set_throttleseconds(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_throttleseconds(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment.throttleseconds)
}

// optional uint32 suspectid = 6;
inline bool CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::_internal_has_suspectid() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::has_suspectid() const {
  return _internal_has_suspectid();
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::clear_suspectid() {
  suspectid_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::_internal_suspectid() const {
  return suspectid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::suspectid() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment.suspectid)
  return _internal_suspectid();
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::_internal_set_suspectid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  suspectid_ = value;
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::set_suspectid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_suspectid(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment.suspectid)
}

// optional uint32 fractionid = 7;
inline bool CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::_internal_has_fractionid() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::has_fractionid() const {
  return _internal_has_fractionid();
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::clear_fractionid() {
  fractionid_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::_internal_fractionid() const {
  return fractionid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::fractionid() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment.fractionid)
  return _internal_fractionid();
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::_internal_set_fractionid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  fractionid_ = value;
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::set_fractionid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fractionid(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment.fractionid)
}

// optional uint32 numrounds = 8;
inline bool CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::_internal_has_numrounds() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::has_numrounds() const {
  return _internal_has_numrounds();
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::clear_numrounds() {
  numrounds_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::_internal_numrounds() const {
  return numrounds_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::numrounds() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment.numrounds)
  return _internal_numrounds();
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::_internal_set_numrounds(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  numrounds_ = value;
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::set_numrounds(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_numrounds(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment.numrounds)
}

// optional uint32 fractionrounds = 9;
inline bool CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::_internal_has_fractionrounds() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::has_fractionrounds() const {
  return _internal_has_fractionrounds();
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::clear_fractionrounds() {
  fractionrounds_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::_internal_fractionrounds() const {
  return fractionrounds_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::fractionrounds() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment.fractionrounds)
  return _internal_fractionrounds();
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::_internal_set_fractionrounds(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  fractionrounds_ = value;
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::set_fractionrounds(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fractionrounds(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment.fractionrounds)
}

// optional int32 streakconvictions = 10;
inline bool CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::_internal_has_streakconvictions() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::has_streakconvictions() const {
  return _internal_has_streakconvictions();
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::clear_streakconvictions() {
  streakconvictions_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::_internal_streakconvictions() const {
  return streakconvictions_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::streakconvictions() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment.streakconvictions)
  return _internal_streakconvictions();
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::_internal_set_streakconvictions(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  streakconvictions_ = value;
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::set_streakconvictions(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_streakconvictions(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment.streakconvictions)
}

// optional uint32 reason = 11;
inline bool CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::_internal_has_reason() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::has_reason() const {
  return _internal_has_reason();
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::clear_reason() {
  reason_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::_internal_reason() const {
  return reason_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::reason() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment.reason)
  return _internal_reason();
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::_internal_set_reason(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  reason_ = value;
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::set_reason(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment.reason)
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus

// optional uint64 caseid = 1;
inline bool CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::_internal_has_caseid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::has_caseid() const {
  return _internal_has_caseid();
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::clear_caseid() {
  caseid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::_internal_caseid() const {
  return caseid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::caseid() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus.caseid)
  return _internal_caseid();
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::_internal_set_caseid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  caseid_ = value;
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::set_caseid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_caseid(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus.caseid)
}

// optional uint32 statusid = 2;
inline bool CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::_internal_has_statusid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::has_statusid() const {
  return _internal_has_statusid();
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::clear_statusid() {
  statusid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::_internal_statusid() const {
  return statusid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::statusid() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus.statusid)
  return _internal_statusid();
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::_internal_set_statusid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  statusid_ = value;
}
inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::set_statusid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_statusid(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus.statusid)
}

// -------------------------------------------------------------------

// CClientHeaderOverwatchEvidence

// optional uint32 accountid = 1;
inline bool CClientHeaderOverwatchEvidence::_internal_has_accountid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CClientHeaderOverwatchEvidence::has_accountid() const {
  return _internal_has_accountid();
}
inline void CClientHeaderOverwatchEvidence::clear_accountid() {
  accountid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CClientHeaderOverwatchEvidence::_internal_accountid() const {
  return accountid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CClientHeaderOverwatchEvidence::accountid() const {
  // @@protoc_insertion_point(field_get:CClientHeaderOverwatchEvidence.accountid)
  return _internal_accountid();
}
inline void CClientHeaderOverwatchEvidence::_internal_set_accountid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  accountid_ = value;
}
inline void CClientHeaderOverwatchEvidence::set_accountid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_accountid(value);
  // @@protoc_insertion_point(field_set:CClientHeaderOverwatchEvidence.accountid)
}

// optional uint64 caseid = 2;
inline bool CClientHeaderOverwatchEvidence::_internal_has_caseid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CClientHeaderOverwatchEvidence::has_caseid() const {
  return _internal_has_caseid();
}
inline void CClientHeaderOverwatchEvidence::clear_caseid() {
  caseid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CClientHeaderOverwatchEvidence::_internal_caseid() const {
  return caseid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CClientHeaderOverwatchEvidence::caseid() const {
  // @@protoc_insertion_point(field_get:CClientHeaderOverwatchEvidence.caseid)
  return _internal_caseid();
}
inline void CClientHeaderOverwatchEvidence::_internal_set_caseid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  caseid_ = value;
}
inline void CClientHeaderOverwatchEvidence::set_caseid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_caseid(value);
  // @@protoc_insertion_point(field_set:CClientHeaderOverwatchEvidence.caseid)
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_GC2ClientTextMsg

// optional uint32 id = 1;
inline bool CMsgGCCStrike15_v2_GC2ClientTextMsg::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_GC2ClientTextMsg::has_id() const {
  return _internal_has_id();
}
inline void CMsgGCCStrike15_v2_GC2ClientTextMsg::clear_id() {
  id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_GC2ClientTextMsg::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_GC2ClientTextMsg::id() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_GC2ClientTextMsg.id)
  return _internal_id();
}
inline void CMsgGCCStrike15_v2_GC2ClientTextMsg::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
}
inline void CMsgGCCStrike15_v2_GC2ClientTextMsg::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_GC2ClientTextMsg.id)
}

// optional uint32 type = 2;
inline bool CMsgGCCStrike15_v2_GC2ClientTextMsg::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_GC2ClientTextMsg::has_type() const {
  return _internal_has_type();
}
inline void CMsgGCCStrike15_v2_GC2ClientTextMsg::clear_type() {
  type_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_GC2ClientTextMsg::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_GC2ClientTextMsg::type() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_GC2ClientTextMsg.type)
  return _internal_type();
}
inline void CMsgGCCStrike15_v2_GC2ClientTextMsg::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  type_ = value;
}
inline void CMsgGCCStrike15_v2_GC2ClientTextMsg::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_GC2ClientTextMsg.type)
}

// optional bytes payload = 3;
inline bool CMsgGCCStrike15_v2_GC2ClientTextMsg::_internal_has_payload() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_GC2ClientTextMsg::has_payload() const {
  return _internal_has_payload();
}
inline void CMsgGCCStrike15_v2_GC2ClientTextMsg::clear_payload() {
  payload_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgGCCStrike15_v2_GC2ClientTextMsg::payload() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_GC2ClientTextMsg.payload)
  return _internal_payload();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgGCCStrike15_v2_GC2ClientTextMsg::set_payload(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 payload_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_GC2ClientTextMsg.payload)
}
inline std::string* CMsgGCCStrike15_v2_GC2ClientTextMsg::mutable_payload() {
  std::string* _s = _internal_mutable_payload();
  // @@protoc_insertion_point(field_mutable:CMsgGCCStrike15_v2_GC2ClientTextMsg.payload)
  return _s;
}
inline const std::string& CMsgGCCStrike15_v2_GC2ClientTextMsg::_internal_payload() const {
  return payload_.Get();
}
inline void CMsgGCCStrike15_v2_GC2ClientTextMsg::_internal_set_payload(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgGCCStrike15_v2_GC2ClientTextMsg::_internal_mutable_payload() {
  _has_bits_[0] |= 0x00000001u;
  return payload_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgGCCStrike15_v2_GC2ClientTextMsg::release_payload() {
  // @@protoc_insertion_point(field_release:CMsgGCCStrike15_v2_GC2ClientTextMsg.payload)
  if (!_internal_has_payload()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return payload_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CMsgGCCStrike15_v2_GC2ClientTextMsg::set_allocated_payload(std::string* payload) {
  if (payload != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  payload_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payload,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CMsgGCCStrike15_v2_GC2ClientTextMsg.payload)
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_Client2GCTextMsg

// optional uint32 id = 1;
inline bool CMsgGCCStrike15_v2_Client2GCTextMsg::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_Client2GCTextMsg::has_id() const {
  return _internal_has_id();
}
inline void CMsgGCCStrike15_v2_Client2GCTextMsg::clear_id() {
  id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_Client2GCTextMsg::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_Client2GCTextMsg::id() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_Client2GCTextMsg.id)
  return _internal_id();
}
inline void CMsgGCCStrike15_v2_Client2GCTextMsg::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
}
inline void CMsgGCCStrike15_v2_Client2GCTextMsg::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_Client2GCTextMsg.id)
}

// repeated bytes args = 2;
inline int CMsgGCCStrike15_v2_Client2GCTextMsg::_internal_args_size() const {
  return args_.size();
}
inline int CMsgGCCStrike15_v2_Client2GCTextMsg::args_size() const {
  return _internal_args_size();
}
inline void CMsgGCCStrike15_v2_Client2GCTextMsg::clear_args() {
  args_.Clear();
}
inline std::string* CMsgGCCStrike15_v2_Client2GCTextMsg::add_args() {
  std::string* _s = _internal_add_args();
  // @@protoc_insertion_point(field_add_mutable:CMsgGCCStrike15_v2_Client2GCTextMsg.args)
  return _s;
}
inline const std::string& CMsgGCCStrike15_v2_Client2GCTextMsg::_internal_args(int index) const {
  return args_.Get(index);
}
inline const std::string& CMsgGCCStrike15_v2_Client2GCTextMsg::args(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_Client2GCTextMsg.args)
  return _internal_args(index);
}
inline std::string* CMsgGCCStrike15_v2_Client2GCTextMsg::mutable_args(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgGCCStrike15_v2_Client2GCTextMsg.args)
  return args_.Mutable(index);
}
inline void CMsgGCCStrike15_v2_Client2GCTextMsg::set_args(int index, const std::string& value) {
  args_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_Client2GCTextMsg.args)
}
inline void CMsgGCCStrike15_v2_Client2GCTextMsg::set_args(int index, std::string&& value) {
  args_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_Client2GCTextMsg.args)
}
inline void CMsgGCCStrike15_v2_Client2GCTextMsg::set_args(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  args_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgGCCStrike15_v2_Client2GCTextMsg.args)
}
inline void CMsgGCCStrike15_v2_Client2GCTextMsg::set_args(int index, const void* value, size_t size) {
  args_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgGCCStrike15_v2_Client2GCTextMsg.args)
}
inline std::string* CMsgGCCStrike15_v2_Client2GCTextMsg::_internal_add_args() {
  return args_.Add();
}
inline void CMsgGCCStrike15_v2_Client2GCTextMsg::add_args(const std::string& value) {
  args_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CMsgGCCStrike15_v2_Client2GCTextMsg.args)
}
inline void CMsgGCCStrike15_v2_Client2GCTextMsg::add_args(std::string&& value) {
  args_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CMsgGCCStrike15_v2_Client2GCTextMsg.args)
}
inline void CMsgGCCStrike15_v2_Client2GCTextMsg::add_args(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  args_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CMsgGCCStrike15_v2_Client2GCTextMsg.args)
}
inline void CMsgGCCStrike15_v2_Client2GCTextMsg::add_args(const void* value, size_t size) {
  args_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CMsgGCCStrike15_v2_Client2GCTextMsg.args)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CMsgGCCStrike15_v2_Client2GCTextMsg::args() const {
  // @@protoc_insertion_point(field_list:CMsgGCCStrike15_v2_Client2GCTextMsg.args)
  return args_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CMsgGCCStrike15_v2_Client2GCTextMsg::mutable_args() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCCStrike15_v2_Client2GCTextMsg.args)
  return &args_;
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_MatchEndRunRewardDrops

// optional .CMsgGCCStrike15_v2_MatchmakingServerReservationResponse serverinfo = 3;
inline bool CMsgGCCStrike15_v2_MatchEndRunRewardDrops::_internal_has_serverinfo() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || serverinfo_ != nullptr);
  return value;
}
inline bool CMsgGCCStrike15_v2_MatchEndRunRewardDrops::has_serverinfo() const {
  return _internal_has_serverinfo();
}
inline void CMsgGCCStrike15_v2_MatchEndRunRewardDrops::clear_serverinfo() {
  if (serverinfo_ != nullptr) serverinfo_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse& CMsgGCCStrike15_v2_MatchEndRunRewardDrops::_internal_serverinfo() const {
  const ::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse* p = serverinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse&>(
      ::_CMsgGCCStrike15_v2_MatchmakingServerReservationResponse_default_instance_);
}
inline const ::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse& CMsgGCCStrike15_v2_MatchEndRunRewardDrops::serverinfo() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchEndRunRewardDrops.serverinfo)
  return _internal_serverinfo();
}
inline void CMsgGCCStrike15_v2_MatchEndRunRewardDrops::unsafe_arena_set_allocated_serverinfo(
    ::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse* serverinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(serverinfo_);
  }
  serverinfo_ = serverinfo;
  if (serverinfo) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgGCCStrike15_v2_MatchEndRunRewardDrops.serverinfo)
}
inline ::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse* CMsgGCCStrike15_v2_MatchEndRunRewardDrops::release_serverinfo() {
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse* temp = serverinfo_;
  serverinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse* CMsgGCCStrike15_v2_MatchEndRunRewardDrops::unsafe_arena_release_serverinfo() {
  // @@protoc_insertion_point(field_release:CMsgGCCStrike15_v2_MatchEndRunRewardDrops.serverinfo)
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse* temp = serverinfo_;
  serverinfo_ = nullptr;
  return temp;
}
inline ::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse* CMsgGCCStrike15_v2_MatchEndRunRewardDrops::_internal_mutable_serverinfo() {
  _has_bits_[0] |= 0x00000001u;
  if (serverinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse>(GetArenaForAllocation());
    serverinfo_ = p;
  }
  return serverinfo_;
}
inline ::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse* CMsgGCCStrike15_v2_MatchEndRunRewardDrops::mutable_serverinfo() {
  ::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse* _msg = _internal_mutable_serverinfo();
  // @@protoc_insertion_point(field_mutable:CMsgGCCStrike15_v2_MatchEndRunRewardDrops.serverinfo)
  return _msg;
}
inline void CMsgGCCStrike15_v2_MatchEndRunRewardDrops::set_allocated_serverinfo(::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse* serverinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete serverinfo_;
  }
  if (serverinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse>::GetOwningArena(serverinfo);
    if (message_arena != submessage_arena) {
      serverinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, serverinfo, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  serverinfo_ = serverinfo;
  // @@protoc_insertion_point(field_set_allocated:CMsgGCCStrike15_v2_MatchEndRunRewardDrops.serverinfo)
}

// optional .CMsgGC_ServerQuestUpdateData match_end_quest_data = 4;
inline bool CMsgGCCStrike15_v2_MatchEndRunRewardDrops::_internal_has_match_end_quest_data() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || match_end_quest_data_ != nullptr);
  return value;
}
inline bool CMsgGCCStrike15_v2_MatchEndRunRewardDrops::has_match_end_quest_data() const {
  return _internal_has_match_end_quest_data();
}
inline void CMsgGCCStrike15_v2_MatchEndRunRewardDrops::clear_match_end_quest_data() {
  if (match_end_quest_data_ != nullptr) match_end_quest_data_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::CMsgGC_ServerQuestUpdateData& CMsgGCCStrike15_v2_MatchEndRunRewardDrops::_internal_match_end_quest_data() const {
  const ::CMsgGC_ServerQuestUpdateData* p = match_end_quest_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgGC_ServerQuestUpdateData&>(
      ::_CMsgGC_ServerQuestUpdateData_default_instance_);
}
inline const ::CMsgGC_ServerQuestUpdateData& CMsgGCCStrike15_v2_MatchEndRunRewardDrops::match_end_quest_data() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchEndRunRewardDrops.match_end_quest_data)
  return _internal_match_end_quest_data();
}
inline void CMsgGCCStrike15_v2_MatchEndRunRewardDrops::unsafe_arena_set_allocated_match_end_quest_data(
    ::CMsgGC_ServerQuestUpdateData* match_end_quest_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(match_end_quest_data_);
  }
  match_end_quest_data_ = match_end_quest_data;
  if (match_end_quest_data) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgGCCStrike15_v2_MatchEndRunRewardDrops.match_end_quest_data)
}
inline ::CMsgGC_ServerQuestUpdateData* CMsgGCCStrike15_v2_MatchEndRunRewardDrops::release_match_end_quest_data() {
  _has_bits_[0] &= ~0x00000002u;
  ::CMsgGC_ServerQuestUpdateData* temp = match_end_quest_data_;
  match_end_quest_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgGC_ServerQuestUpdateData* CMsgGCCStrike15_v2_MatchEndRunRewardDrops::unsafe_arena_release_match_end_quest_data() {
  // @@protoc_insertion_point(field_release:CMsgGCCStrike15_v2_MatchEndRunRewardDrops.match_end_quest_data)
  _has_bits_[0] &= ~0x00000002u;
  ::CMsgGC_ServerQuestUpdateData* temp = match_end_quest_data_;
  match_end_quest_data_ = nullptr;
  return temp;
}
inline ::CMsgGC_ServerQuestUpdateData* CMsgGCCStrike15_v2_MatchEndRunRewardDrops::_internal_mutable_match_end_quest_data() {
  _has_bits_[0] |= 0x00000002u;
  if (match_end_quest_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgGC_ServerQuestUpdateData>(GetArenaForAllocation());
    match_end_quest_data_ = p;
  }
  return match_end_quest_data_;
}
inline ::CMsgGC_ServerQuestUpdateData* CMsgGCCStrike15_v2_MatchEndRunRewardDrops::mutable_match_end_quest_data() {
  ::CMsgGC_ServerQuestUpdateData* _msg = _internal_mutable_match_end_quest_data();
  // @@protoc_insertion_point(field_mutable:CMsgGCCStrike15_v2_MatchEndRunRewardDrops.match_end_quest_data)
  return _msg;
}
inline void CMsgGCCStrike15_v2_MatchEndRunRewardDrops::set_allocated_match_end_quest_data(::CMsgGC_ServerQuestUpdateData* match_end_quest_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete match_end_quest_data_;
  }
  if (match_end_quest_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgGC_ServerQuestUpdateData>::GetOwningArena(match_end_quest_data);
    if (message_arena != submessage_arena) {
      match_end_quest_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, match_end_quest_data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  match_end_quest_data_ = match_end_quest_data;
  // @@protoc_insertion_point(field_set_allocated:CMsgGCCStrike15_v2_MatchEndRunRewardDrops.match_end_quest_data)
}

// -------------------------------------------------------------------

// CEconItemPreviewDataBlock_Sticker

// optional uint32 slot = 1;
inline bool CEconItemPreviewDataBlock_Sticker::_internal_has_slot() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CEconItemPreviewDataBlock_Sticker::has_slot() const {
  return _internal_has_slot();
}
inline void CEconItemPreviewDataBlock_Sticker::clear_slot() {
  slot_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CEconItemPreviewDataBlock_Sticker::_internal_slot() const {
  return slot_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CEconItemPreviewDataBlock_Sticker::slot() const {
  // @@protoc_insertion_point(field_get:CEconItemPreviewDataBlock.Sticker.slot)
  return _internal_slot();
}
inline void CEconItemPreviewDataBlock_Sticker::_internal_set_slot(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  slot_ = value;
}
inline void CEconItemPreviewDataBlock_Sticker::set_slot(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_slot(value);
  // @@protoc_insertion_point(field_set:CEconItemPreviewDataBlock.Sticker.slot)
}

// optional uint32 sticker_id = 2;
inline bool CEconItemPreviewDataBlock_Sticker::_internal_has_sticker_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CEconItemPreviewDataBlock_Sticker::has_sticker_id() const {
  return _internal_has_sticker_id();
}
inline void CEconItemPreviewDataBlock_Sticker::clear_sticker_id() {
  sticker_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CEconItemPreviewDataBlock_Sticker::_internal_sticker_id() const {
  return sticker_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CEconItemPreviewDataBlock_Sticker::sticker_id() const {
  // @@protoc_insertion_point(field_get:CEconItemPreviewDataBlock.Sticker.sticker_id)
  return _internal_sticker_id();
}
inline void CEconItemPreviewDataBlock_Sticker::_internal_set_sticker_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  sticker_id_ = value;
}
inline void CEconItemPreviewDataBlock_Sticker::set_sticker_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sticker_id(value);
  // @@protoc_insertion_point(field_set:CEconItemPreviewDataBlock.Sticker.sticker_id)
}

// optional float wear = 3;
inline bool CEconItemPreviewDataBlock_Sticker::_internal_has_wear() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CEconItemPreviewDataBlock_Sticker::has_wear() const {
  return _internal_has_wear();
}
inline void CEconItemPreviewDataBlock_Sticker::clear_wear() {
  wear_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float CEconItemPreviewDataBlock_Sticker::_internal_wear() const {
  return wear_;
}
inline float CEconItemPreviewDataBlock_Sticker::wear() const {
  // @@protoc_insertion_point(field_get:CEconItemPreviewDataBlock.Sticker.wear)
  return _internal_wear();
}
inline void CEconItemPreviewDataBlock_Sticker::_internal_set_wear(float value) {
  _has_bits_[0] |= 0x00000004u;
  wear_ = value;
}
inline void CEconItemPreviewDataBlock_Sticker::set_wear(float value) {
  _internal_set_wear(value);
  // @@protoc_insertion_point(field_set:CEconItemPreviewDataBlock.Sticker.wear)
}

// optional float scale = 4;
inline bool CEconItemPreviewDataBlock_Sticker::_internal_has_scale() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CEconItemPreviewDataBlock_Sticker::has_scale() const {
  return _internal_has_scale();
}
inline void CEconItemPreviewDataBlock_Sticker::clear_scale() {
  scale_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float CEconItemPreviewDataBlock_Sticker::_internal_scale() const {
  return scale_;
}
inline float CEconItemPreviewDataBlock_Sticker::scale() const {
  // @@protoc_insertion_point(field_get:CEconItemPreviewDataBlock.Sticker.scale)
  return _internal_scale();
}
inline void CEconItemPreviewDataBlock_Sticker::_internal_set_scale(float value) {
  _has_bits_[0] |= 0x00000008u;
  scale_ = value;
}
inline void CEconItemPreviewDataBlock_Sticker::set_scale(float value) {
  _internal_set_scale(value);
  // @@protoc_insertion_point(field_set:CEconItemPreviewDataBlock.Sticker.scale)
}

// optional float rotation = 5;
inline bool CEconItemPreviewDataBlock_Sticker::_internal_has_rotation() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CEconItemPreviewDataBlock_Sticker::has_rotation() const {
  return _internal_has_rotation();
}
inline void CEconItemPreviewDataBlock_Sticker::clear_rotation() {
  rotation_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float CEconItemPreviewDataBlock_Sticker::_internal_rotation() const {
  return rotation_;
}
inline float CEconItemPreviewDataBlock_Sticker::rotation() const {
  // @@protoc_insertion_point(field_get:CEconItemPreviewDataBlock.Sticker.rotation)
  return _internal_rotation();
}
inline void CEconItemPreviewDataBlock_Sticker::_internal_set_rotation(float value) {
  _has_bits_[0] |= 0x00000010u;
  rotation_ = value;
}
inline void CEconItemPreviewDataBlock_Sticker::set_rotation(float value) {
  _internal_set_rotation(value);
  // @@protoc_insertion_point(field_set:CEconItemPreviewDataBlock.Sticker.rotation)
}

// optional uint32 tint_id = 6;
inline bool CEconItemPreviewDataBlock_Sticker::_internal_has_tint_id() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CEconItemPreviewDataBlock_Sticker::has_tint_id() const {
  return _internal_has_tint_id();
}
inline void CEconItemPreviewDataBlock_Sticker::clear_tint_id() {
  tint_id_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CEconItemPreviewDataBlock_Sticker::_internal_tint_id() const {
  return tint_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CEconItemPreviewDataBlock_Sticker::tint_id() const {
  // @@protoc_insertion_point(field_get:CEconItemPreviewDataBlock.Sticker.tint_id)
  return _internal_tint_id();
}
inline void CEconItemPreviewDataBlock_Sticker::_internal_set_tint_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  tint_id_ = value;
}
inline void CEconItemPreviewDataBlock_Sticker::set_tint_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tint_id(value);
  // @@protoc_insertion_point(field_set:CEconItemPreviewDataBlock.Sticker.tint_id)
}

// -------------------------------------------------------------------

// CEconItemPreviewDataBlock

// optional uint32 accountid = 1;
inline bool CEconItemPreviewDataBlock::_internal_has_accountid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CEconItemPreviewDataBlock::has_accountid() const {
  return _internal_has_accountid();
}
inline void CEconItemPreviewDataBlock::clear_accountid() {
  accountid_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CEconItemPreviewDataBlock::_internal_accountid() const {
  return accountid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CEconItemPreviewDataBlock::accountid() const {
  // @@protoc_insertion_point(field_get:CEconItemPreviewDataBlock.accountid)
  return _internal_accountid();
}
inline void CEconItemPreviewDataBlock::_internal_set_accountid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  accountid_ = value;
}
inline void CEconItemPreviewDataBlock::set_accountid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_accountid(value);
  // @@protoc_insertion_point(field_set:CEconItemPreviewDataBlock.accountid)
}

// optional uint64 itemid = 2;
inline bool CEconItemPreviewDataBlock::_internal_has_itemid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CEconItemPreviewDataBlock::has_itemid() const {
  return _internal_has_itemid();
}
inline void CEconItemPreviewDataBlock::clear_itemid() {
  itemid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CEconItemPreviewDataBlock::_internal_itemid() const {
  return itemid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CEconItemPreviewDataBlock::itemid() const {
  // @@protoc_insertion_point(field_get:CEconItemPreviewDataBlock.itemid)
  return _internal_itemid();
}
inline void CEconItemPreviewDataBlock::_internal_set_itemid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  itemid_ = value;
}
inline void CEconItemPreviewDataBlock::set_itemid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_itemid(value);
  // @@protoc_insertion_point(field_set:CEconItemPreviewDataBlock.itemid)
}

// optional uint32 defindex = 3;
inline bool CEconItemPreviewDataBlock::_internal_has_defindex() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CEconItemPreviewDataBlock::has_defindex() const {
  return _internal_has_defindex();
}
inline void CEconItemPreviewDataBlock::clear_defindex() {
  defindex_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CEconItemPreviewDataBlock::_internal_defindex() const {
  return defindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CEconItemPreviewDataBlock::defindex() const {
  // @@protoc_insertion_point(field_get:CEconItemPreviewDataBlock.defindex)
  return _internal_defindex();
}
inline void CEconItemPreviewDataBlock::_internal_set_defindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  defindex_ = value;
}
inline void CEconItemPreviewDataBlock::set_defindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_defindex(value);
  // @@protoc_insertion_point(field_set:CEconItemPreviewDataBlock.defindex)
}

// optional uint32 paintindex = 4;
inline bool CEconItemPreviewDataBlock::_internal_has_paintindex() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CEconItemPreviewDataBlock::has_paintindex() const {
  return _internal_has_paintindex();
}
inline void CEconItemPreviewDataBlock::clear_paintindex() {
  paintindex_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CEconItemPreviewDataBlock::_internal_paintindex() const {
  return paintindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CEconItemPreviewDataBlock::paintindex() const {
  // @@protoc_insertion_point(field_get:CEconItemPreviewDataBlock.paintindex)
  return _internal_paintindex();
}
inline void CEconItemPreviewDataBlock::_internal_set_paintindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  paintindex_ = value;
}
inline void CEconItemPreviewDataBlock::set_paintindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_paintindex(value);
  // @@protoc_insertion_point(field_set:CEconItemPreviewDataBlock.paintindex)
}

// optional uint32 rarity = 5;
inline bool CEconItemPreviewDataBlock::_internal_has_rarity() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CEconItemPreviewDataBlock::has_rarity() const {
  return _internal_has_rarity();
}
inline void CEconItemPreviewDataBlock::clear_rarity() {
  rarity_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CEconItemPreviewDataBlock::_internal_rarity() const {
  return rarity_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CEconItemPreviewDataBlock::rarity() const {
  // @@protoc_insertion_point(field_get:CEconItemPreviewDataBlock.rarity)
  return _internal_rarity();
}
inline void CEconItemPreviewDataBlock::_internal_set_rarity(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  rarity_ = value;
}
inline void CEconItemPreviewDataBlock::set_rarity(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rarity(value);
  // @@protoc_insertion_point(field_set:CEconItemPreviewDataBlock.rarity)
}

// optional uint32 quality = 6;
inline bool CEconItemPreviewDataBlock::_internal_has_quality() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CEconItemPreviewDataBlock::has_quality() const {
  return _internal_has_quality();
}
inline void CEconItemPreviewDataBlock::clear_quality() {
  quality_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CEconItemPreviewDataBlock::_internal_quality() const {
  return quality_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CEconItemPreviewDataBlock::quality() const {
  // @@protoc_insertion_point(field_get:CEconItemPreviewDataBlock.quality)
  return _internal_quality();
}
inline void CEconItemPreviewDataBlock::_internal_set_quality(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  quality_ = value;
}
inline void CEconItemPreviewDataBlock::set_quality(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_quality(value);
  // @@protoc_insertion_point(field_set:CEconItemPreviewDataBlock.quality)
}

// optional uint32 paintwear = 7;
inline bool CEconItemPreviewDataBlock::_internal_has_paintwear() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CEconItemPreviewDataBlock::has_paintwear() const {
  return _internal_has_paintwear();
}
inline void CEconItemPreviewDataBlock::clear_paintwear() {
  paintwear_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CEconItemPreviewDataBlock::_internal_paintwear() const {
  return paintwear_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CEconItemPreviewDataBlock::paintwear() const {
  // @@protoc_insertion_point(field_get:CEconItemPreviewDataBlock.paintwear)
  return _internal_paintwear();
}
inline void CEconItemPreviewDataBlock::_internal_set_paintwear(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  paintwear_ = value;
}
inline void CEconItemPreviewDataBlock::set_paintwear(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_paintwear(value);
  // @@protoc_insertion_point(field_set:CEconItemPreviewDataBlock.paintwear)
}

// optional uint32 paintseed = 8;
inline bool CEconItemPreviewDataBlock::_internal_has_paintseed() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CEconItemPreviewDataBlock::has_paintseed() const {
  return _internal_has_paintseed();
}
inline void CEconItemPreviewDataBlock::clear_paintseed() {
  paintseed_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CEconItemPreviewDataBlock::_internal_paintseed() const {
  return paintseed_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CEconItemPreviewDataBlock::paintseed() const {
  // @@protoc_insertion_point(field_get:CEconItemPreviewDataBlock.paintseed)
  return _internal_paintseed();
}
inline void CEconItemPreviewDataBlock::_internal_set_paintseed(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  paintseed_ = value;
}
inline void CEconItemPreviewDataBlock::set_paintseed(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_paintseed(value);
  // @@protoc_insertion_point(field_set:CEconItemPreviewDataBlock.paintseed)
}

// optional uint32 killeaterscoretype = 9;
inline bool CEconItemPreviewDataBlock::_internal_has_killeaterscoretype() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CEconItemPreviewDataBlock::has_killeaterscoretype() const {
  return _internal_has_killeaterscoretype();
}
inline void CEconItemPreviewDataBlock::clear_killeaterscoretype() {
  killeaterscoretype_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CEconItemPreviewDataBlock::_internal_killeaterscoretype() const {
  return killeaterscoretype_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CEconItemPreviewDataBlock::killeaterscoretype() const {
  // @@protoc_insertion_point(field_get:CEconItemPreviewDataBlock.killeaterscoretype)
  return _internal_killeaterscoretype();
}
inline void CEconItemPreviewDataBlock::_internal_set_killeaterscoretype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  killeaterscoretype_ = value;
}
inline void CEconItemPreviewDataBlock::set_killeaterscoretype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_killeaterscoretype(value);
  // @@protoc_insertion_point(field_set:CEconItemPreviewDataBlock.killeaterscoretype)
}

// optional uint32 killeatervalue = 10;
inline bool CEconItemPreviewDataBlock::_internal_has_killeatervalue() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CEconItemPreviewDataBlock::has_killeatervalue() const {
  return _internal_has_killeatervalue();
}
inline void CEconItemPreviewDataBlock::clear_killeatervalue() {
  killeatervalue_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CEconItemPreviewDataBlock::_internal_killeatervalue() const {
  return killeatervalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CEconItemPreviewDataBlock::killeatervalue() const {
  // @@protoc_insertion_point(field_get:CEconItemPreviewDataBlock.killeatervalue)
  return _internal_killeatervalue();
}
inline void CEconItemPreviewDataBlock::_internal_set_killeatervalue(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  killeatervalue_ = value;
}
inline void CEconItemPreviewDataBlock::set_killeatervalue(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_killeatervalue(value);
  // @@protoc_insertion_point(field_set:CEconItemPreviewDataBlock.killeatervalue)
}

// optional string customname = 11;
inline bool CEconItemPreviewDataBlock::_internal_has_customname() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CEconItemPreviewDataBlock::has_customname() const {
  return _internal_has_customname();
}
inline void CEconItemPreviewDataBlock::clear_customname() {
  customname_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CEconItemPreviewDataBlock::customname() const {
  // @@protoc_insertion_point(field_get:CEconItemPreviewDataBlock.customname)
  return _internal_customname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CEconItemPreviewDataBlock::set_customname(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 customname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CEconItemPreviewDataBlock.customname)
}
inline std::string* CEconItemPreviewDataBlock::mutable_customname() {
  std::string* _s = _internal_mutable_customname();
  // @@protoc_insertion_point(field_mutable:CEconItemPreviewDataBlock.customname)
  return _s;
}
inline const std::string& CEconItemPreviewDataBlock::_internal_customname() const {
  return customname_.Get();
}
inline void CEconItemPreviewDataBlock::_internal_set_customname(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  customname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CEconItemPreviewDataBlock::_internal_mutable_customname() {
  _has_bits_[0] |= 0x00000001u;
  return customname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CEconItemPreviewDataBlock::release_customname() {
  // @@protoc_insertion_point(field_release:CEconItemPreviewDataBlock.customname)
  if (!_internal_has_customname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return customname_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CEconItemPreviewDataBlock::set_allocated_customname(std::string* customname) {
  if (customname != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  customname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), customname,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CEconItemPreviewDataBlock.customname)
}

// repeated .CEconItemPreviewDataBlock.Sticker stickers = 12;
inline int CEconItemPreviewDataBlock::_internal_stickers_size() const {
  return stickers_.size();
}
inline int CEconItemPreviewDataBlock::stickers_size() const {
  return _internal_stickers_size();
}
inline void CEconItemPreviewDataBlock::clear_stickers() {
  stickers_.Clear();
}
inline ::CEconItemPreviewDataBlock_Sticker* CEconItemPreviewDataBlock::mutable_stickers(int index) {
  // @@protoc_insertion_point(field_mutable:CEconItemPreviewDataBlock.stickers)
  return stickers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CEconItemPreviewDataBlock_Sticker >*
CEconItemPreviewDataBlock::mutable_stickers() {
  // @@protoc_insertion_point(field_mutable_list:CEconItemPreviewDataBlock.stickers)
  return &stickers_;
}
inline const ::CEconItemPreviewDataBlock_Sticker& CEconItemPreviewDataBlock::_internal_stickers(int index) const {
  return stickers_.Get(index);
}
inline const ::CEconItemPreviewDataBlock_Sticker& CEconItemPreviewDataBlock::stickers(int index) const {
  // @@protoc_insertion_point(field_get:CEconItemPreviewDataBlock.stickers)
  return _internal_stickers(index);
}
inline ::CEconItemPreviewDataBlock_Sticker* CEconItemPreviewDataBlock::_internal_add_stickers() {
  return stickers_.Add();
}
inline ::CEconItemPreviewDataBlock_Sticker* CEconItemPreviewDataBlock::add_stickers() {
  ::CEconItemPreviewDataBlock_Sticker* _add = _internal_add_stickers();
  // @@protoc_insertion_point(field_add:CEconItemPreviewDataBlock.stickers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CEconItemPreviewDataBlock_Sticker >&
CEconItemPreviewDataBlock::stickers() const {
  // @@protoc_insertion_point(field_list:CEconItemPreviewDataBlock.stickers)
  return stickers_;
}

// optional uint32 inventory = 13;
inline bool CEconItemPreviewDataBlock::_internal_has_inventory() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CEconItemPreviewDataBlock::has_inventory() const {
  return _internal_has_inventory();
}
inline void CEconItemPreviewDataBlock::clear_inventory() {
  inventory_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CEconItemPreviewDataBlock::_internal_inventory() const {
  return inventory_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CEconItemPreviewDataBlock::inventory() const {
  // @@protoc_insertion_point(field_get:CEconItemPreviewDataBlock.inventory)
  return _internal_inventory();
}
inline void CEconItemPreviewDataBlock::_internal_set_inventory(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  inventory_ = value;
}
inline void CEconItemPreviewDataBlock::set_inventory(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_inventory(value);
  // @@protoc_insertion_point(field_set:CEconItemPreviewDataBlock.inventory)
}

// optional uint32 origin = 14;
inline bool CEconItemPreviewDataBlock::_internal_has_origin() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CEconItemPreviewDataBlock::has_origin() const {
  return _internal_has_origin();
}
inline void CEconItemPreviewDataBlock::clear_origin() {
  origin_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CEconItemPreviewDataBlock::_internal_origin() const {
  return origin_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CEconItemPreviewDataBlock::origin() const {
  // @@protoc_insertion_point(field_get:CEconItemPreviewDataBlock.origin)
  return _internal_origin();
}
inline void CEconItemPreviewDataBlock::_internal_set_origin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00001000u;
  origin_ = value;
}
inline void CEconItemPreviewDataBlock::set_origin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_origin(value);
  // @@protoc_insertion_point(field_set:CEconItemPreviewDataBlock.origin)
}

// optional uint32 questid = 15;
inline bool CEconItemPreviewDataBlock::_internal_has_questid() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CEconItemPreviewDataBlock::has_questid() const {
  return _internal_has_questid();
}
inline void CEconItemPreviewDataBlock::clear_questid() {
  questid_ = 0u;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CEconItemPreviewDataBlock::_internal_questid() const {
  return questid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CEconItemPreviewDataBlock::questid() const {
  // @@protoc_insertion_point(field_get:CEconItemPreviewDataBlock.questid)
  return _internal_questid();
}
inline void CEconItemPreviewDataBlock::_internal_set_questid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00002000u;
  questid_ = value;
}
inline void CEconItemPreviewDataBlock::set_questid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_questid(value);
  // @@protoc_insertion_point(field_set:CEconItemPreviewDataBlock.questid)
}

// optional uint32 dropreason = 16;
inline bool CEconItemPreviewDataBlock::_internal_has_dropreason() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CEconItemPreviewDataBlock::has_dropreason() const {
  return _internal_has_dropreason();
}
inline void CEconItemPreviewDataBlock::clear_dropreason() {
  dropreason_ = 0u;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CEconItemPreviewDataBlock::_internal_dropreason() const {
  return dropreason_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CEconItemPreviewDataBlock::dropreason() const {
  // @@protoc_insertion_point(field_get:CEconItemPreviewDataBlock.dropreason)
  return _internal_dropreason();
}
inline void CEconItemPreviewDataBlock::_internal_set_dropreason(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00004000u;
  dropreason_ = value;
}
inline void CEconItemPreviewDataBlock::set_dropreason(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_dropreason(value);
  // @@protoc_insertion_point(field_set:CEconItemPreviewDataBlock.dropreason)
}

// optional uint32 musicindex = 17;
inline bool CEconItemPreviewDataBlock::_internal_has_musicindex() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool CEconItemPreviewDataBlock::has_musicindex() const {
  return _internal_has_musicindex();
}
inline void CEconItemPreviewDataBlock::clear_musicindex() {
  musicindex_ = 0u;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CEconItemPreviewDataBlock::_internal_musicindex() const {
  return musicindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CEconItemPreviewDataBlock::musicindex() const {
  // @@protoc_insertion_point(field_get:CEconItemPreviewDataBlock.musicindex)
  return _internal_musicindex();
}
inline void CEconItemPreviewDataBlock::_internal_set_musicindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00008000u;
  musicindex_ = value;
}
inline void CEconItemPreviewDataBlock::set_musicindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_musicindex(value);
  // @@protoc_insertion_point(field_set:CEconItemPreviewDataBlock.musicindex)
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_MatchEndRewardDropsNotification

// optional .CEconItemPreviewDataBlock iteminfo = 6;
inline bool CMsgGCCStrike15_v2_MatchEndRewardDropsNotification::_internal_has_iteminfo() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || iteminfo_ != nullptr);
  return value;
}
inline bool CMsgGCCStrike15_v2_MatchEndRewardDropsNotification::has_iteminfo() const {
  return _internal_has_iteminfo();
}
inline void CMsgGCCStrike15_v2_MatchEndRewardDropsNotification::clear_iteminfo() {
  if (iteminfo_ != nullptr) iteminfo_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CEconItemPreviewDataBlock& CMsgGCCStrike15_v2_MatchEndRewardDropsNotification::_internal_iteminfo() const {
  const ::CEconItemPreviewDataBlock* p = iteminfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::CEconItemPreviewDataBlock&>(
      ::_CEconItemPreviewDataBlock_default_instance_);
}
inline const ::CEconItemPreviewDataBlock& CMsgGCCStrike15_v2_MatchEndRewardDropsNotification::iteminfo() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchEndRewardDropsNotification.iteminfo)
  return _internal_iteminfo();
}
inline void CMsgGCCStrike15_v2_MatchEndRewardDropsNotification::unsafe_arena_set_allocated_iteminfo(
    ::CEconItemPreviewDataBlock* iteminfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(iteminfo_);
  }
  iteminfo_ = iteminfo;
  if (iteminfo) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgGCCStrike15_v2_MatchEndRewardDropsNotification.iteminfo)
}
inline ::CEconItemPreviewDataBlock* CMsgGCCStrike15_v2_MatchEndRewardDropsNotification::release_iteminfo() {
  _has_bits_[0] &= ~0x00000001u;
  ::CEconItemPreviewDataBlock* temp = iteminfo_;
  iteminfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CEconItemPreviewDataBlock* CMsgGCCStrike15_v2_MatchEndRewardDropsNotification::unsafe_arena_release_iteminfo() {
  // @@protoc_insertion_point(field_release:CMsgGCCStrike15_v2_MatchEndRewardDropsNotification.iteminfo)
  _has_bits_[0] &= ~0x00000001u;
  ::CEconItemPreviewDataBlock* temp = iteminfo_;
  iteminfo_ = nullptr;
  return temp;
}
inline ::CEconItemPreviewDataBlock* CMsgGCCStrike15_v2_MatchEndRewardDropsNotification::_internal_mutable_iteminfo() {
  _has_bits_[0] |= 0x00000001u;
  if (iteminfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::CEconItemPreviewDataBlock>(GetArenaForAllocation());
    iteminfo_ = p;
  }
  return iteminfo_;
}
inline ::CEconItemPreviewDataBlock* CMsgGCCStrike15_v2_MatchEndRewardDropsNotification::mutable_iteminfo() {
  ::CEconItemPreviewDataBlock* _msg = _internal_mutable_iteminfo();
  // @@protoc_insertion_point(field_mutable:CMsgGCCStrike15_v2_MatchEndRewardDropsNotification.iteminfo)
  return _msg;
}
inline void CMsgGCCStrike15_v2_MatchEndRewardDropsNotification::set_allocated_iteminfo(::CEconItemPreviewDataBlock* iteminfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete iteminfo_;
  }
  if (iteminfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CEconItemPreviewDataBlock>::GetOwningArena(iteminfo);
    if (message_arena != submessage_arena) {
      iteminfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, iteminfo, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  iteminfo_ = iteminfo;
  // @@protoc_insertion_point(field_set_allocated:CMsgGCCStrike15_v2_MatchEndRewardDropsNotification.iteminfo)
}

// -------------------------------------------------------------------

// CMsgItemAcknowledged

// optional .CEconItemPreviewDataBlock iteminfo = 1;
inline bool CMsgItemAcknowledged::_internal_has_iteminfo() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || iteminfo_ != nullptr);
  return value;
}
inline bool CMsgItemAcknowledged::has_iteminfo() const {
  return _internal_has_iteminfo();
}
inline void CMsgItemAcknowledged::clear_iteminfo() {
  if (iteminfo_ != nullptr) iteminfo_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CEconItemPreviewDataBlock& CMsgItemAcknowledged::_internal_iteminfo() const {
  const ::CEconItemPreviewDataBlock* p = iteminfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::CEconItemPreviewDataBlock&>(
      ::_CEconItemPreviewDataBlock_default_instance_);
}
inline const ::CEconItemPreviewDataBlock& CMsgItemAcknowledged::iteminfo() const {
  // @@protoc_insertion_point(field_get:CMsgItemAcknowledged.iteminfo)
  return _internal_iteminfo();
}
inline void CMsgItemAcknowledged::unsafe_arena_set_allocated_iteminfo(
    ::CEconItemPreviewDataBlock* iteminfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(iteminfo_);
  }
  iteminfo_ = iteminfo;
  if (iteminfo) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgItemAcknowledged.iteminfo)
}
inline ::CEconItemPreviewDataBlock* CMsgItemAcknowledged::release_iteminfo() {
  _has_bits_[0] &= ~0x00000001u;
  ::CEconItemPreviewDataBlock* temp = iteminfo_;
  iteminfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CEconItemPreviewDataBlock* CMsgItemAcknowledged::unsafe_arena_release_iteminfo() {
  // @@protoc_insertion_point(field_release:CMsgItemAcknowledged.iteminfo)
  _has_bits_[0] &= ~0x00000001u;
  ::CEconItemPreviewDataBlock* temp = iteminfo_;
  iteminfo_ = nullptr;
  return temp;
}
inline ::CEconItemPreviewDataBlock* CMsgItemAcknowledged::_internal_mutable_iteminfo() {
  _has_bits_[0] |= 0x00000001u;
  if (iteminfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::CEconItemPreviewDataBlock>(GetArenaForAllocation());
    iteminfo_ = p;
  }
  return iteminfo_;
}
inline ::CEconItemPreviewDataBlock* CMsgItemAcknowledged::mutable_iteminfo() {
  ::CEconItemPreviewDataBlock* _msg = _internal_mutable_iteminfo();
  // @@protoc_insertion_point(field_mutable:CMsgItemAcknowledged.iteminfo)
  return _msg;
}
inline void CMsgItemAcknowledged::set_allocated_iteminfo(::CEconItemPreviewDataBlock* iteminfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete iteminfo_;
  }
  if (iteminfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CEconItemPreviewDataBlock>::GetOwningArena(iteminfo);
    if (message_arena != submessage_arena) {
      iteminfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, iteminfo, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  iteminfo_ = iteminfo;
  // @@protoc_insertion_point(field_set_allocated:CMsgItemAcknowledged.iteminfo)
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest

// optional uint64 param_s = 1;
inline bool CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::_internal_has_param_s() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::has_param_s() const {
  return _internal_has_param_s();
}
inline void CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::clear_param_s() {
  param_s_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::_internal_param_s() const {
  return param_s_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::param_s() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest.param_s)
  return _internal_param_s();
}
inline void CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::_internal_set_param_s(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  param_s_ = value;
}
inline void CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::set_param_s(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_param_s(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest.param_s)
}

// optional uint64 param_a = 2;
inline bool CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::_internal_has_param_a() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::has_param_a() const {
  return _internal_has_param_a();
}
inline void CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::clear_param_a() {
  param_a_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::_internal_param_a() const {
  return param_a_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::param_a() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest.param_a)
  return _internal_param_a();
}
inline void CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::_internal_set_param_a(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  param_a_ = value;
}
inline void CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::set_param_a(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_param_a(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest.param_a)
}

// optional uint64 param_d = 3;
inline bool CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::_internal_has_param_d() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::has_param_d() const {
  return _internal_has_param_d();
}
inline void CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::clear_param_d() {
  param_d_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::_internal_param_d() const {
  return param_d_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::param_d() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest.param_d)
  return _internal_param_d();
}
inline void CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::_internal_set_param_d(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  param_d_ = value;
}
inline void CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::set_param_d(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_param_d(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest.param_d)
}

// optional uint64 param_m = 4;
inline bool CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::_internal_has_param_m() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::has_param_m() const {
  return _internal_has_param_m();
}
inline void CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::clear_param_m() {
  param_m_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::_internal_param_m() const {
  return param_m_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::param_m() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest.param_m)
  return _internal_param_m();
}
inline void CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::_internal_set_param_m(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  param_m_ = value;
}
inline void CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::set_param_m(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_param_m(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest.param_m)
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse

// optional .CEconItemPreviewDataBlock iteminfo = 1;
inline bool CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse::_internal_has_iteminfo() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || iteminfo_ != nullptr);
  return value;
}
inline bool CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse::has_iteminfo() const {
  return _internal_has_iteminfo();
}
inline void CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse::clear_iteminfo() {
  if (iteminfo_ != nullptr) iteminfo_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CEconItemPreviewDataBlock& CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse::_internal_iteminfo() const {
  const ::CEconItemPreviewDataBlock* p = iteminfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::CEconItemPreviewDataBlock&>(
      ::_CEconItemPreviewDataBlock_default_instance_);
}
inline const ::CEconItemPreviewDataBlock& CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse::iteminfo() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse.iteminfo)
  return _internal_iteminfo();
}
inline void CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse::unsafe_arena_set_allocated_iteminfo(
    ::CEconItemPreviewDataBlock* iteminfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(iteminfo_);
  }
  iteminfo_ = iteminfo;
  if (iteminfo) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse.iteminfo)
}
inline ::CEconItemPreviewDataBlock* CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse::release_iteminfo() {
  _has_bits_[0] &= ~0x00000001u;
  ::CEconItemPreviewDataBlock* temp = iteminfo_;
  iteminfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CEconItemPreviewDataBlock* CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse::unsafe_arena_release_iteminfo() {
  // @@protoc_insertion_point(field_release:CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse.iteminfo)
  _has_bits_[0] &= ~0x00000001u;
  ::CEconItemPreviewDataBlock* temp = iteminfo_;
  iteminfo_ = nullptr;
  return temp;
}
inline ::CEconItemPreviewDataBlock* CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse::_internal_mutable_iteminfo() {
  _has_bits_[0] |= 0x00000001u;
  if (iteminfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::CEconItemPreviewDataBlock>(GetArenaForAllocation());
    iteminfo_ = p;
  }
  return iteminfo_;
}
inline ::CEconItemPreviewDataBlock* CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse::mutable_iteminfo() {
  ::CEconItemPreviewDataBlock* _msg = _internal_mutable_iteminfo();
  // @@protoc_insertion_point(field_mutable:CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse.iteminfo)
  return _msg;
}
inline void CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse::set_allocated_iteminfo(::CEconItemPreviewDataBlock* iteminfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete iteminfo_;
  }
  if (iteminfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CEconItemPreviewDataBlock>::GetOwningArena(iteminfo);
    if (message_arena != submessage_arena) {
      iteminfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, iteminfo, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  iteminfo_ = iteminfo;
  // @@protoc_insertion_point(field_set_allocated:CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse.iteminfo)
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification

// optional uint64 match_id = 1;
inline bool CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification::_internal_has_match_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification::has_match_id() const {
  return _internal_has_match_id();
}
inline void CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification::clear_match_id() {
  match_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification::_internal_match_id() const {
  return match_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification::match_id() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification.match_id)
  return _internal_match_id();
}
inline void CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification::_internal_set_match_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  match_id_ = value;
}
inline void CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification::set_match_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_match_id(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification.match_id)
}

// optional uint32 defindex = 2;
inline bool CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification::_internal_has_defindex() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification::has_defindex() const {
  return _internal_has_defindex();
}
inline void CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification::clear_defindex() {
  defindex_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification::_internal_defindex() const {
  return defindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification::defindex() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification.defindex)
  return _internal_defindex();
}
inline void CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification::_internal_set_defindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  defindex_ = value;
}
inline void CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification::set_defindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_defindex(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification.defindex)
}

// repeated uint32 accountids = 3;
inline int CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification::_internal_accountids_size() const {
  return accountids_.size();
}
inline int CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification::accountids_size() const {
  return _internal_accountids_size();
}
inline void CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification::clear_accountids() {
  accountids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification::_internal_accountids(int index) const {
  return accountids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification::accountids(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification.accountids)
  return _internal_accountids(index);
}
inline void CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification::set_accountids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  accountids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification.accountids)
}
inline void CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification::_internal_add_accountids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  accountids_.Add(value);
}
inline void CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification::add_accountids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_accountids(value);
  // @@protoc_insertion_point(field_add:CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification.accountids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification::_internal_accountids() const {
  return accountids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification::accountids() const {
  // @@protoc_insertion_point(field_list:CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification.accountids)
  return _internal_accountids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification::_internal_mutable_accountids() {
  return &accountids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification::mutable_accountids() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification.accountids)
  return _internal_mutable_accountids();
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser

// optional uint32 accountid = 1;
inline bool CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser::_internal_has_accountid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser::has_accountid() const {
  return _internal_has_accountid();
}
inline void CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser::clear_accountid() {
  accountid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser::_internal_accountid() const {
  return accountid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser::accountid() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser.accountid)
  return _internal_accountid();
}
inline void CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser::_internal_set_accountid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  accountid_ = value;
}
inline void CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser::set_accountid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_accountid(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser.accountid)
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_MatchListRequestRecentUserGames

// optional uint32 accountid = 1;
inline bool CMsgGCCStrike15_v2_MatchListRequestRecentUserGames::_internal_has_accountid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_MatchListRequestRecentUserGames::has_accountid() const {
  return _internal_has_accountid();
}
inline void CMsgGCCStrike15_v2_MatchListRequestRecentUserGames::clear_accountid() {
  accountid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_MatchListRequestRecentUserGames::_internal_accountid() const {
  return accountid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_MatchListRequestRecentUserGames::accountid() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchListRequestRecentUserGames.accountid)
  return _internal_accountid();
}
inline void CMsgGCCStrike15_v2_MatchListRequestRecentUserGames::_internal_set_accountid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  accountid_ = value;
}
inline void CMsgGCCStrike15_v2_MatchListRequestRecentUserGames::set_accountid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_accountid(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_MatchListRequestRecentUserGames.accountid)
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_MatchListRequestTournamentGames

// optional int32 eventid = 1;
inline bool CMsgGCCStrike15_v2_MatchListRequestTournamentGames::_internal_has_eventid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_MatchListRequestTournamentGames::has_eventid() const {
  return _internal_has_eventid();
}
inline void CMsgGCCStrike15_v2_MatchListRequestTournamentGames::clear_eventid() {
  eventid_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgGCCStrike15_v2_MatchListRequestTournamentGames::_internal_eventid() const {
  return eventid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgGCCStrike15_v2_MatchListRequestTournamentGames::eventid() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchListRequestTournamentGames.eventid)
  return _internal_eventid();
}
inline void CMsgGCCStrike15_v2_MatchListRequestTournamentGames::_internal_set_eventid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  eventid_ = value;
}
inline void CMsgGCCStrike15_v2_MatchListRequestTournamentGames::set_eventid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_eventid(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_MatchListRequestTournamentGames.eventid)
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_MatchListRequestFullGameInfo

// optional uint64 matchid = 1;
inline bool CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::_internal_has_matchid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::has_matchid() const {
  return _internal_has_matchid();
}
inline void CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::clear_matchid() {
  matchid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::_internal_matchid() const {
  return matchid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::matchid() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchListRequestFullGameInfo.matchid)
  return _internal_matchid();
}
inline void CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::_internal_set_matchid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  matchid_ = value;
}
inline void CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::set_matchid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_matchid(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_MatchListRequestFullGameInfo.matchid)
}

// optional uint64 outcomeid = 2;
inline bool CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::_internal_has_outcomeid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::has_outcomeid() const {
  return _internal_has_outcomeid();
}
inline void CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::clear_outcomeid() {
  outcomeid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::_internal_outcomeid() const {
  return outcomeid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::outcomeid() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchListRequestFullGameInfo.outcomeid)
  return _internal_outcomeid();
}
inline void CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::_internal_set_outcomeid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  outcomeid_ = value;
}
inline void CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::set_outcomeid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_outcomeid(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_MatchListRequestFullGameInfo.outcomeid)
}

// optional uint32 token = 3;
inline bool CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::_internal_has_token() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::has_token() const {
  return _internal_has_token();
}
inline void CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::clear_token() {
  token_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::_internal_token() const {
  return token_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::token() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchListRequestFullGameInfo.token)
  return _internal_token();
}
inline void CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::_internal_set_token(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  token_ = value;
}
inline void CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::set_token(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_MatchListRequestFullGameInfo.token)
}

// -------------------------------------------------------------------

// CDataGCCStrike15_v2_MatchInfo

// optional uint64 matchid = 1;
inline bool CDataGCCStrike15_v2_MatchInfo::_internal_has_matchid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CDataGCCStrike15_v2_MatchInfo::has_matchid() const {
  return _internal_has_matchid();
}
inline void CDataGCCStrike15_v2_MatchInfo::clear_matchid() {
  matchid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CDataGCCStrike15_v2_MatchInfo::_internal_matchid() const {
  return matchid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CDataGCCStrike15_v2_MatchInfo::matchid() const {
  // @@protoc_insertion_point(field_get:CDataGCCStrike15_v2_MatchInfo.matchid)
  return _internal_matchid();
}
inline void CDataGCCStrike15_v2_MatchInfo::_internal_set_matchid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  matchid_ = value;
}
inline void CDataGCCStrike15_v2_MatchInfo::set_matchid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_matchid(value);
  // @@protoc_insertion_point(field_set:CDataGCCStrike15_v2_MatchInfo.matchid)
}

// optional uint32 matchtime = 2;
inline bool CDataGCCStrike15_v2_MatchInfo::_internal_has_matchtime() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CDataGCCStrike15_v2_MatchInfo::has_matchtime() const {
  return _internal_has_matchtime();
}
inline void CDataGCCStrike15_v2_MatchInfo::clear_matchtime() {
  matchtime_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDataGCCStrike15_v2_MatchInfo::_internal_matchtime() const {
  return matchtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDataGCCStrike15_v2_MatchInfo::matchtime() const {
  // @@protoc_insertion_point(field_get:CDataGCCStrike15_v2_MatchInfo.matchtime)
  return _internal_matchtime();
}
inline void CDataGCCStrike15_v2_MatchInfo::_internal_set_matchtime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  matchtime_ = value;
}
inline void CDataGCCStrike15_v2_MatchInfo::set_matchtime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_matchtime(value);
  // @@protoc_insertion_point(field_set:CDataGCCStrike15_v2_MatchInfo.matchtime)
}

// optional .WatchableMatchInfo watchablematchinfo = 3;
inline bool CDataGCCStrike15_v2_MatchInfo::_internal_has_watchablematchinfo() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || watchablematchinfo_ != nullptr);
  return value;
}
inline bool CDataGCCStrike15_v2_MatchInfo::has_watchablematchinfo() const {
  return _internal_has_watchablematchinfo();
}
inline void CDataGCCStrike15_v2_MatchInfo::clear_watchablematchinfo() {
  if (watchablematchinfo_ != nullptr) watchablematchinfo_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::WatchableMatchInfo& CDataGCCStrike15_v2_MatchInfo::_internal_watchablematchinfo() const {
  const ::WatchableMatchInfo* p = watchablematchinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::WatchableMatchInfo&>(
      ::_WatchableMatchInfo_default_instance_);
}
inline const ::WatchableMatchInfo& CDataGCCStrike15_v2_MatchInfo::watchablematchinfo() const {
  // @@protoc_insertion_point(field_get:CDataGCCStrike15_v2_MatchInfo.watchablematchinfo)
  return _internal_watchablematchinfo();
}
inline void CDataGCCStrike15_v2_MatchInfo::unsafe_arena_set_allocated_watchablematchinfo(
    ::WatchableMatchInfo* watchablematchinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(watchablematchinfo_);
  }
  watchablematchinfo_ = watchablematchinfo;
  if (watchablematchinfo) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CDataGCCStrike15_v2_MatchInfo.watchablematchinfo)
}
inline ::WatchableMatchInfo* CDataGCCStrike15_v2_MatchInfo::release_watchablematchinfo() {
  _has_bits_[0] &= ~0x00000001u;
  ::WatchableMatchInfo* temp = watchablematchinfo_;
  watchablematchinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::WatchableMatchInfo* CDataGCCStrike15_v2_MatchInfo::unsafe_arena_release_watchablematchinfo() {
  // @@protoc_insertion_point(field_release:CDataGCCStrike15_v2_MatchInfo.watchablematchinfo)
  _has_bits_[0] &= ~0x00000001u;
  ::WatchableMatchInfo* temp = watchablematchinfo_;
  watchablematchinfo_ = nullptr;
  return temp;
}
inline ::WatchableMatchInfo* CDataGCCStrike15_v2_MatchInfo::_internal_mutable_watchablematchinfo() {
  _has_bits_[0] |= 0x00000001u;
  if (watchablematchinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::WatchableMatchInfo>(GetArenaForAllocation());
    watchablematchinfo_ = p;
  }
  return watchablematchinfo_;
}
inline ::WatchableMatchInfo* CDataGCCStrike15_v2_MatchInfo::mutable_watchablematchinfo() {
  ::WatchableMatchInfo* _msg = _internal_mutable_watchablematchinfo();
  // @@protoc_insertion_point(field_mutable:CDataGCCStrike15_v2_MatchInfo.watchablematchinfo)
  return _msg;
}
inline void CDataGCCStrike15_v2_MatchInfo::set_allocated_watchablematchinfo(::WatchableMatchInfo* watchablematchinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete watchablematchinfo_;
  }
  if (watchablematchinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::WatchableMatchInfo>::GetOwningArena(watchablematchinfo);
    if (message_arena != submessage_arena) {
      watchablematchinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, watchablematchinfo, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  watchablematchinfo_ = watchablematchinfo;
  // @@protoc_insertion_point(field_set_allocated:CDataGCCStrike15_v2_MatchInfo.watchablematchinfo)
}

// optional .CMsgGCCStrike15_v2_MatchmakingServerRoundStats roundstats_legacy = 4;
inline bool CDataGCCStrike15_v2_MatchInfo::_internal_has_roundstats_legacy() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || roundstats_legacy_ != nullptr);
  return value;
}
inline bool CDataGCCStrike15_v2_MatchInfo::has_roundstats_legacy() const {
  return _internal_has_roundstats_legacy();
}
inline void CDataGCCStrike15_v2_MatchInfo::clear_roundstats_legacy() {
  if (roundstats_legacy_ != nullptr) roundstats_legacy_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats& CDataGCCStrike15_v2_MatchInfo::_internal_roundstats_legacy() const {
  const ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats* p = roundstats_legacy_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats&>(
      ::_CMsgGCCStrike15_v2_MatchmakingServerRoundStats_default_instance_);
}
inline const ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats& CDataGCCStrike15_v2_MatchInfo::roundstats_legacy() const {
  // @@protoc_insertion_point(field_get:CDataGCCStrike15_v2_MatchInfo.roundstats_legacy)
  return _internal_roundstats_legacy();
}
inline void CDataGCCStrike15_v2_MatchInfo::unsafe_arena_set_allocated_roundstats_legacy(
    ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats* roundstats_legacy) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(roundstats_legacy_);
  }
  roundstats_legacy_ = roundstats_legacy;
  if (roundstats_legacy) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CDataGCCStrike15_v2_MatchInfo.roundstats_legacy)
}
inline ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats* CDataGCCStrike15_v2_MatchInfo::release_roundstats_legacy() {
  _has_bits_[0] &= ~0x00000002u;
  ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats* temp = roundstats_legacy_;
  roundstats_legacy_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats* CDataGCCStrike15_v2_MatchInfo::unsafe_arena_release_roundstats_legacy() {
  // @@protoc_insertion_point(field_release:CDataGCCStrike15_v2_MatchInfo.roundstats_legacy)
  _has_bits_[0] &= ~0x00000002u;
  ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats* temp = roundstats_legacy_;
  roundstats_legacy_ = nullptr;
  return temp;
}
inline ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats* CDataGCCStrike15_v2_MatchInfo::_internal_mutable_roundstats_legacy() {
  _has_bits_[0] |= 0x00000002u;
  if (roundstats_legacy_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgGCCStrike15_v2_MatchmakingServerRoundStats>(GetArenaForAllocation());
    roundstats_legacy_ = p;
  }
  return roundstats_legacy_;
}
inline ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats* CDataGCCStrike15_v2_MatchInfo::mutable_roundstats_legacy() {
  ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats* _msg = _internal_mutable_roundstats_legacy();
  // @@protoc_insertion_point(field_mutable:CDataGCCStrike15_v2_MatchInfo.roundstats_legacy)
  return _msg;
}
inline void CDataGCCStrike15_v2_MatchInfo::set_allocated_roundstats_legacy(::CMsgGCCStrike15_v2_MatchmakingServerRoundStats* roundstats_legacy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete roundstats_legacy_;
  }
  if (roundstats_legacy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgGCCStrike15_v2_MatchmakingServerRoundStats>::GetOwningArena(roundstats_legacy);
    if (message_arena != submessage_arena) {
      roundstats_legacy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, roundstats_legacy, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  roundstats_legacy_ = roundstats_legacy;
  // @@protoc_insertion_point(field_set_allocated:CDataGCCStrike15_v2_MatchInfo.roundstats_legacy)
}

// repeated .CMsgGCCStrike15_v2_MatchmakingServerRoundStats roundstatsall = 5;
inline int CDataGCCStrike15_v2_MatchInfo::_internal_roundstatsall_size() const {
  return roundstatsall_.size();
}
inline int CDataGCCStrike15_v2_MatchInfo::roundstatsall_size() const {
  return _internal_roundstatsall_size();
}
inline void CDataGCCStrike15_v2_MatchInfo::clear_roundstatsall() {
  roundstatsall_.Clear();
}
inline ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats* CDataGCCStrike15_v2_MatchInfo::mutable_roundstatsall(int index) {
  // @@protoc_insertion_point(field_mutable:CDataGCCStrike15_v2_MatchInfo.roundstatsall)
  return roundstatsall_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats >*
CDataGCCStrike15_v2_MatchInfo::mutable_roundstatsall() {
  // @@protoc_insertion_point(field_mutable_list:CDataGCCStrike15_v2_MatchInfo.roundstatsall)
  return &roundstatsall_;
}
inline const ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats& CDataGCCStrike15_v2_MatchInfo::_internal_roundstatsall(int index) const {
  return roundstatsall_.Get(index);
}
inline const ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats& CDataGCCStrike15_v2_MatchInfo::roundstatsall(int index) const {
  // @@protoc_insertion_point(field_get:CDataGCCStrike15_v2_MatchInfo.roundstatsall)
  return _internal_roundstatsall(index);
}
inline ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats* CDataGCCStrike15_v2_MatchInfo::_internal_add_roundstatsall() {
  return roundstatsall_.Add();
}
inline ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats* CDataGCCStrike15_v2_MatchInfo::add_roundstatsall() {
  ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats* _add = _internal_add_roundstatsall();
  // @@protoc_insertion_point(field_add:CDataGCCStrike15_v2_MatchInfo.roundstatsall)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats >&
CDataGCCStrike15_v2_MatchInfo::roundstatsall() const {
  // @@protoc_insertion_point(field_list:CDataGCCStrike15_v2_MatchInfo.roundstatsall)
  return roundstatsall_;
}

// -------------------------------------------------------------------

// CDataGCCStrike15_v2_TournamentGroupTeam

// optional int32 team_id = 1;
inline bool CDataGCCStrike15_v2_TournamentGroupTeam::_internal_has_team_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDataGCCStrike15_v2_TournamentGroupTeam::has_team_id() const {
  return _internal_has_team_id();
}
inline void CDataGCCStrike15_v2_TournamentGroupTeam::clear_team_id() {
  team_id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CDataGCCStrike15_v2_TournamentGroupTeam::_internal_team_id() const {
  return team_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CDataGCCStrike15_v2_TournamentGroupTeam::team_id() const {
  // @@protoc_insertion_point(field_get:CDataGCCStrike15_v2_TournamentGroupTeam.team_id)
  return _internal_team_id();
}
inline void CDataGCCStrike15_v2_TournamentGroupTeam::_internal_set_team_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  team_id_ = value;
}
inline void CDataGCCStrike15_v2_TournamentGroupTeam::set_team_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_team_id(value);
  // @@protoc_insertion_point(field_set:CDataGCCStrike15_v2_TournamentGroupTeam.team_id)
}

// optional int32 score = 2;
inline bool CDataGCCStrike15_v2_TournamentGroupTeam::_internal_has_score() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDataGCCStrike15_v2_TournamentGroupTeam::has_score() const {
  return _internal_has_score();
}
inline void CDataGCCStrike15_v2_TournamentGroupTeam::clear_score() {
  score_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CDataGCCStrike15_v2_TournamentGroupTeam::_internal_score() const {
  return score_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CDataGCCStrike15_v2_TournamentGroupTeam::score() const {
  // @@protoc_insertion_point(field_get:CDataGCCStrike15_v2_TournamentGroupTeam.score)
  return _internal_score();
}
inline void CDataGCCStrike15_v2_TournamentGroupTeam::_internal_set_score(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  score_ = value;
}
inline void CDataGCCStrike15_v2_TournamentGroupTeam::set_score(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:CDataGCCStrike15_v2_TournamentGroupTeam.score)
}

// optional bool correctpick = 3;
inline bool CDataGCCStrike15_v2_TournamentGroupTeam::_internal_has_correctpick() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CDataGCCStrike15_v2_TournamentGroupTeam::has_correctpick() const {
  return _internal_has_correctpick();
}
inline void CDataGCCStrike15_v2_TournamentGroupTeam::clear_correctpick() {
  correctpick_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CDataGCCStrike15_v2_TournamentGroupTeam::_internal_correctpick() const {
  return correctpick_;
}
inline bool CDataGCCStrike15_v2_TournamentGroupTeam::correctpick() const {
  // @@protoc_insertion_point(field_get:CDataGCCStrike15_v2_TournamentGroupTeam.correctpick)
  return _internal_correctpick();
}
inline void CDataGCCStrike15_v2_TournamentGroupTeam::_internal_set_correctpick(bool value) {
  _has_bits_[0] |= 0x00000004u;
  correctpick_ = value;
}
inline void CDataGCCStrike15_v2_TournamentGroupTeam::set_correctpick(bool value) {
  _internal_set_correctpick(value);
  // @@protoc_insertion_point(field_set:CDataGCCStrike15_v2_TournamentGroupTeam.correctpick)
}

// -------------------------------------------------------------------

// CDataGCCStrike15_v2_TournamentGroup_Picks

// repeated int32 pickids = 1;
inline int CDataGCCStrike15_v2_TournamentGroup_Picks::_internal_pickids_size() const {
  return pickids_.size();
}
inline int CDataGCCStrike15_v2_TournamentGroup_Picks::pickids_size() const {
  return _internal_pickids_size();
}
inline void CDataGCCStrike15_v2_TournamentGroup_Picks::clear_pickids() {
  pickids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CDataGCCStrike15_v2_TournamentGroup_Picks::_internal_pickids(int index) const {
  return pickids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CDataGCCStrike15_v2_TournamentGroup_Picks::pickids(int index) const {
  // @@protoc_insertion_point(field_get:CDataGCCStrike15_v2_TournamentGroup.Picks.pickids)
  return _internal_pickids(index);
}
inline void CDataGCCStrike15_v2_TournamentGroup_Picks::set_pickids(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  pickids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CDataGCCStrike15_v2_TournamentGroup.Picks.pickids)
}
inline void CDataGCCStrike15_v2_TournamentGroup_Picks::_internal_add_pickids(::PROTOBUF_NAMESPACE_ID::int32 value) {
  pickids_.Add(value);
}
inline void CDataGCCStrike15_v2_TournamentGroup_Picks::add_pickids(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_pickids(value);
  // @@protoc_insertion_point(field_add:CDataGCCStrike15_v2_TournamentGroup.Picks.pickids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CDataGCCStrike15_v2_TournamentGroup_Picks::_internal_pickids() const {
  return pickids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CDataGCCStrike15_v2_TournamentGroup_Picks::pickids() const {
  // @@protoc_insertion_point(field_list:CDataGCCStrike15_v2_TournamentGroup.Picks.pickids)
  return _internal_pickids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CDataGCCStrike15_v2_TournamentGroup_Picks::_internal_mutable_pickids() {
  return &pickids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CDataGCCStrike15_v2_TournamentGroup_Picks::mutable_pickids() {
  // @@protoc_insertion_point(field_mutable_list:CDataGCCStrike15_v2_TournamentGroup.Picks.pickids)
  return _internal_mutable_pickids();
}

// -------------------------------------------------------------------

// CDataGCCStrike15_v2_TournamentGroup

// optional uint32 groupid = 1;
inline bool CDataGCCStrike15_v2_TournamentGroup::_internal_has_groupid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CDataGCCStrike15_v2_TournamentGroup::has_groupid() const {
  return _internal_has_groupid();
}
inline void CDataGCCStrike15_v2_TournamentGroup::clear_groupid() {
  groupid_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDataGCCStrike15_v2_TournamentGroup::_internal_groupid() const {
  return groupid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDataGCCStrike15_v2_TournamentGroup::groupid() const {
  // @@protoc_insertion_point(field_get:CDataGCCStrike15_v2_TournamentGroup.groupid)
  return _internal_groupid();
}
inline void CDataGCCStrike15_v2_TournamentGroup::_internal_set_groupid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  groupid_ = value;
}
inline void CDataGCCStrike15_v2_TournamentGroup::set_groupid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_groupid(value);
  // @@protoc_insertion_point(field_set:CDataGCCStrike15_v2_TournamentGroup.groupid)
}

// optional string name = 2;
inline bool CDataGCCStrike15_v2_TournamentGroup::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDataGCCStrike15_v2_TournamentGroup::has_name() const {
  return _internal_has_name();
}
inline void CDataGCCStrike15_v2_TournamentGroup::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CDataGCCStrike15_v2_TournamentGroup::name() const {
  // @@protoc_insertion_point(field_get:CDataGCCStrike15_v2_TournamentGroup.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CDataGCCStrike15_v2_TournamentGroup::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CDataGCCStrike15_v2_TournamentGroup.name)
}
inline std::string* CDataGCCStrike15_v2_TournamentGroup::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:CDataGCCStrike15_v2_TournamentGroup.name)
  return _s;
}
inline const std::string& CDataGCCStrike15_v2_TournamentGroup::_internal_name() const {
  return name_.Get();
}
inline void CDataGCCStrike15_v2_TournamentGroup::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CDataGCCStrike15_v2_TournamentGroup::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CDataGCCStrike15_v2_TournamentGroup::release_name() {
  // @@protoc_insertion_point(field_release:CDataGCCStrike15_v2_TournamentGroup.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CDataGCCStrike15_v2_TournamentGroup::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CDataGCCStrike15_v2_TournamentGroup.name)
}

// optional string desc = 3;
inline bool CDataGCCStrike15_v2_TournamentGroup::_internal_has_desc() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDataGCCStrike15_v2_TournamentGroup::has_desc() const {
  return _internal_has_desc();
}
inline void CDataGCCStrike15_v2_TournamentGroup::clear_desc() {
  desc_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CDataGCCStrike15_v2_TournamentGroup::desc() const {
  // @@protoc_insertion_point(field_get:CDataGCCStrike15_v2_TournamentGroup.desc)
  return _internal_desc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CDataGCCStrike15_v2_TournamentGroup::set_desc(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CDataGCCStrike15_v2_TournamentGroup.desc)
}
inline std::string* CDataGCCStrike15_v2_TournamentGroup::mutable_desc() {
  std::string* _s = _internal_mutable_desc();
  // @@protoc_insertion_point(field_mutable:CDataGCCStrike15_v2_TournamentGroup.desc)
  return _s;
}
inline const std::string& CDataGCCStrike15_v2_TournamentGroup::_internal_desc() const {
  return desc_.Get();
}
inline void CDataGCCStrike15_v2_TournamentGroup::_internal_set_desc(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CDataGCCStrike15_v2_TournamentGroup::_internal_mutable_desc() {
  _has_bits_[0] |= 0x00000002u;
  return desc_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CDataGCCStrike15_v2_TournamentGroup::release_desc() {
  // @@protoc_insertion_point(field_release:CDataGCCStrike15_v2_TournamentGroup.desc)
  if (!_internal_has_desc()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return desc_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CDataGCCStrike15_v2_TournamentGroup::set_allocated_desc(std::string* desc) {
  if (desc != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  desc_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), desc,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CDataGCCStrike15_v2_TournamentGroup.desc)
}

// optional uint32 picks__deprecated = 4;
inline bool CDataGCCStrike15_v2_TournamentGroup::_internal_has_picks__deprecated() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CDataGCCStrike15_v2_TournamentGroup::has_picks__deprecated() const {
  return _internal_has_picks__deprecated();
}
inline void CDataGCCStrike15_v2_TournamentGroup::clear_picks__deprecated() {
  picks__deprecated_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDataGCCStrike15_v2_TournamentGroup::_internal_picks__deprecated() const {
  return picks__deprecated_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDataGCCStrike15_v2_TournamentGroup::picks__deprecated() const {
  // @@protoc_insertion_point(field_get:CDataGCCStrike15_v2_TournamentGroup.picks__deprecated)
  return _internal_picks__deprecated();
}
inline void CDataGCCStrike15_v2_TournamentGroup::_internal_set_picks__deprecated(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  picks__deprecated_ = value;
}
inline void CDataGCCStrike15_v2_TournamentGroup::set_picks__deprecated(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_picks__deprecated(value);
  // @@protoc_insertion_point(field_set:CDataGCCStrike15_v2_TournamentGroup.picks__deprecated)
}

// repeated .CDataGCCStrike15_v2_TournamentGroupTeam teams = 5;
inline int CDataGCCStrike15_v2_TournamentGroup::_internal_teams_size() const {
  return teams_.size();
}
inline int CDataGCCStrike15_v2_TournamentGroup::teams_size() const {
  return _internal_teams_size();
}
inline void CDataGCCStrike15_v2_TournamentGroup::clear_teams() {
  teams_.Clear();
}
inline ::CDataGCCStrike15_v2_TournamentGroupTeam* CDataGCCStrike15_v2_TournamentGroup::mutable_teams(int index) {
  // @@protoc_insertion_point(field_mutable:CDataGCCStrike15_v2_TournamentGroup.teams)
  return teams_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDataGCCStrike15_v2_TournamentGroupTeam >*
CDataGCCStrike15_v2_TournamentGroup::mutable_teams() {
  // @@protoc_insertion_point(field_mutable_list:CDataGCCStrike15_v2_TournamentGroup.teams)
  return &teams_;
}
inline const ::CDataGCCStrike15_v2_TournamentGroupTeam& CDataGCCStrike15_v2_TournamentGroup::_internal_teams(int index) const {
  return teams_.Get(index);
}
inline const ::CDataGCCStrike15_v2_TournamentGroupTeam& CDataGCCStrike15_v2_TournamentGroup::teams(int index) const {
  // @@protoc_insertion_point(field_get:CDataGCCStrike15_v2_TournamentGroup.teams)
  return _internal_teams(index);
}
inline ::CDataGCCStrike15_v2_TournamentGroupTeam* CDataGCCStrike15_v2_TournamentGroup::_internal_add_teams() {
  return teams_.Add();
}
inline ::CDataGCCStrike15_v2_TournamentGroupTeam* CDataGCCStrike15_v2_TournamentGroup::add_teams() {
  ::CDataGCCStrike15_v2_TournamentGroupTeam* _add = _internal_add_teams();
  // @@protoc_insertion_point(field_add:CDataGCCStrike15_v2_TournamentGroup.teams)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDataGCCStrike15_v2_TournamentGroupTeam >&
CDataGCCStrike15_v2_TournamentGroup::teams() const {
  // @@protoc_insertion_point(field_list:CDataGCCStrike15_v2_TournamentGroup.teams)
  return teams_;
}

// repeated int32 stage_ids = 6;
inline int CDataGCCStrike15_v2_TournamentGroup::_internal_stage_ids_size() const {
  return stage_ids_.size();
}
inline int CDataGCCStrike15_v2_TournamentGroup::stage_ids_size() const {
  return _internal_stage_ids_size();
}
inline void CDataGCCStrike15_v2_TournamentGroup::clear_stage_ids() {
  stage_ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CDataGCCStrike15_v2_TournamentGroup::_internal_stage_ids(int index) const {
  return stage_ids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CDataGCCStrike15_v2_TournamentGroup::stage_ids(int index) const {
  // @@protoc_insertion_point(field_get:CDataGCCStrike15_v2_TournamentGroup.stage_ids)
  return _internal_stage_ids(index);
}
inline void CDataGCCStrike15_v2_TournamentGroup::set_stage_ids(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  stage_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CDataGCCStrike15_v2_TournamentGroup.stage_ids)
}
inline void CDataGCCStrike15_v2_TournamentGroup::_internal_add_stage_ids(::PROTOBUF_NAMESPACE_ID::int32 value) {
  stage_ids_.Add(value);
}
inline void CDataGCCStrike15_v2_TournamentGroup::add_stage_ids(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_stage_ids(value);
  // @@protoc_insertion_point(field_add:CDataGCCStrike15_v2_TournamentGroup.stage_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CDataGCCStrike15_v2_TournamentGroup::_internal_stage_ids() const {
  return stage_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CDataGCCStrike15_v2_TournamentGroup::stage_ids() const {
  // @@protoc_insertion_point(field_list:CDataGCCStrike15_v2_TournamentGroup.stage_ids)
  return _internal_stage_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CDataGCCStrike15_v2_TournamentGroup::_internal_mutable_stage_ids() {
  return &stage_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CDataGCCStrike15_v2_TournamentGroup::mutable_stage_ids() {
  // @@protoc_insertion_point(field_mutable_list:CDataGCCStrike15_v2_TournamentGroup.stage_ids)
  return _internal_mutable_stage_ids();
}

// optional uint32 picklockuntiltime = 7;
inline bool CDataGCCStrike15_v2_TournamentGroup::_internal_has_picklockuntiltime() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CDataGCCStrike15_v2_TournamentGroup::has_picklockuntiltime() const {
  return _internal_has_picklockuntiltime();
}
inline void CDataGCCStrike15_v2_TournamentGroup::clear_picklockuntiltime() {
  picklockuntiltime_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDataGCCStrike15_v2_TournamentGroup::_internal_picklockuntiltime() const {
  return picklockuntiltime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDataGCCStrike15_v2_TournamentGroup::picklockuntiltime() const {
  // @@protoc_insertion_point(field_get:CDataGCCStrike15_v2_TournamentGroup.picklockuntiltime)
  return _internal_picklockuntiltime();
}
inline void CDataGCCStrike15_v2_TournamentGroup::_internal_set_picklockuntiltime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  picklockuntiltime_ = value;
}
inline void CDataGCCStrike15_v2_TournamentGroup::set_picklockuntiltime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_picklockuntiltime(value);
  // @@protoc_insertion_point(field_set:CDataGCCStrike15_v2_TournamentGroup.picklockuntiltime)
}

// optional uint32 pickableteams = 8;
inline bool CDataGCCStrike15_v2_TournamentGroup::_internal_has_pickableteams() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CDataGCCStrike15_v2_TournamentGroup::has_pickableteams() const {
  return _internal_has_pickableteams();
}
inline void CDataGCCStrike15_v2_TournamentGroup::clear_pickableteams() {
  pickableteams_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDataGCCStrike15_v2_TournamentGroup::_internal_pickableteams() const {
  return pickableteams_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDataGCCStrike15_v2_TournamentGroup::pickableteams() const {
  // @@protoc_insertion_point(field_get:CDataGCCStrike15_v2_TournamentGroup.pickableteams)
  return _internal_pickableteams();
}
inline void CDataGCCStrike15_v2_TournamentGroup::_internal_set_pickableteams(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  pickableteams_ = value;
}
inline void CDataGCCStrike15_v2_TournamentGroup::set_pickableteams(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pickableteams(value);
  // @@protoc_insertion_point(field_set:CDataGCCStrike15_v2_TournamentGroup.pickableteams)
}

// optional uint32 points_per_pick = 9;
inline bool CDataGCCStrike15_v2_TournamentGroup::_internal_has_points_per_pick() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CDataGCCStrike15_v2_TournamentGroup::has_points_per_pick() const {
  return _internal_has_points_per_pick();
}
inline void CDataGCCStrike15_v2_TournamentGroup::clear_points_per_pick() {
  points_per_pick_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDataGCCStrike15_v2_TournamentGroup::_internal_points_per_pick() const {
  return points_per_pick_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDataGCCStrike15_v2_TournamentGroup::points_per_pick() const {
  // @@protoc_insertion_point(field_get:CDataGCCStrike15_v2_TournamentGroup.points_per_pick)
  return _internal_points_per_pick();
}
inline void CDataGCCStrike15_v2_TournamentGroup::_internal_set_points_per_pick(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  points_per_pick_ = value;
}
inline void CDataGCCStrike15_v2_TournamentGroup::set_points_per_pick(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_points_per_pick(value);
  // @@protoc_insertion_point(field_set:CDataGCCStrike15_v2_TournamentGroup.points_per_pick)
}

// repeated .CDataGCCStrike15_v2_TournamentGroup.Picks picks = 10;
inline int CDataGCCStrike15_v2_TournamentGroup::_internal_picks_size() const {
  return picks_.size();
}
inline int CDataGCCStrike15_v2_TournamentGroup::picks_size() const {
  return _internal_picks_size();
}
inline void CDataGCCStrike15_v2_TournamentGroup::clear_picks() {
  picks_.Clear();
}
inline ::CDataGCCStrike15_v2_TournamentGroup_Picks* CDataGCCStrike15_v2_TournamentGroup::mutable_picks(int index) {
  // @@protoc_insertion_point(field_mutable:CDataGCCStrike15_v2_TournamentGroup.picks)
  return picks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDataGCCStrike15_v2_TournamentGroup_Picks >*
CDataGCCStrike15_v2_TournamentGroup::mutable_picks() {
  // @@protoc_insertion_point(field_mutable_list:CDataGCCStrike15_v2_TournamentGroup.picks)
  return &picks_;
}
inline const ::CDataGCCStrike15_v2_TournamentGroup_Picks& CDataGCCStrike15_v2_TournamentGroup::_internal_picks(int index) const {
  return picks_.Get(index);
}
inline const ::CDataGCCStrike15_v2_TournamentGroup_Picks& CDataGCCStrike15_v2_TournamentGroup::picks(int index) const {
  // @@protoc_insertion_point(field_get:CDataGCCStrike15_v2_TournamentGroup.picks)
  return _internal_picks(index);
}
inline ::CDataGCCStrike15_v2_TournamentGroup_Picks* CDataGCCStrike15_v2_TournamentGroup::_internal_add_picks() {
  return picks_.Add();
}
inline ::CDataGCCStrike15_v2_TournamentGroup_Picks* CDataGCCStrike15_v2_TournamentGroup::add_picks() {
  ::CDataGCCStrike15_v2_TournamentGroup_Picks* _add = _internal_add_picks();
  // @@protoc_insertion_point(field_add:CDataGCCStrike15_v2_TournamentGroup.picks)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDataGCCStrike15_v2_TournamentGroup_Picks >&
CDataGCCStrike15_v2_TournamentGroup::picks() const {
  // @@protoc_insertion_point(field_list:CDataGCCStrike15_v2_TournamentGroup.picks)
  return picks_;
}

// -------------------------------------------------------------------

// CDataGCCStrike15_v2_TournamentSection

// optional uint32 sectionid = 1;
inline bool CDataGCCStrike15_v2_TournamentSection::_internal_has_sectionid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CDataGCCStrike15_v2_TournamentSection::has_sectionid() const {
  return _internal_has_sectionid();
}
inline void CDataGCCStrike15_v2_TournamentSection::clear_sectionid() {
  sectionid_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDataGCCStrike15_v2_TournamentSection::_internal_sectionid() const {
  return sectionid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDataGCCStrike15_v2_TournamentSection::sectionid() const {
  // @@protoc_insertion_point(field_get:CDataGCCStrike15_v2_TournamentSection.sectionid)
  return _internal_sectionid();
}
inline void CDataGCCStrike15_v2_TournamentSection::_internal_set_sectionid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  sectionid_ = value;
}
inline void CDataGCCStrike15_v2_TournamentSection::set_sectionid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sectionid(value);
  // @@protoc_insertion_point(field_set:CDataGCCStrike15_v2_TournamentSection.sectionid)
}

// optional string name = 2;
inline bool CDataGCCStrike15_v2_TournamentSection::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDataGCCStrike15_v2_TournamentSection::has_name() const {
  return _internal_has_name();
}
inline void CDataGCCStrike15_v2_TournamentSection::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CDataGCCStrike15_v2_TournamentSection::name() const {
  // @@protoc_insertion_point(field_get:CDataGCCStrike15_v2_TournamentSection.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CDataGCCStrike15_v2_TournamentSection::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CDataGCCStrike15_v2_TournamentSection.name)
}
inline std::string* CDataGCCStrike15_v2_TournamentSection::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:CDataGCCStrike15_v2_TournamentSection.name)
  return _s;
}
inline const std::string& CDataGCCStrike15_v2_TournamentSection::_internal_name() const {
  return name_.Get();
}
inline void CDataGCCStrike15_v2_TournamentSection::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CDataGCCStrike15_v2_TournamentSection::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CDataGCCStrike15_v2_TournamentSection::release_name() {
  // @@protoc_insertion_point(field_release:CDataGCCStrike15_v2_TournamentSection.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CDataGCCStrike15_v2_TournamentSection::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CDataGCCStrike15_v2_TournamentSection.name)
}

// optional string desc = 3;
inline bool CDataGCCStrike15_v2_TournamentSection::_internal_has_desc() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDataGCCStrike15_v2_TournamentSection::has_desc() const {
  return _internal_has_desc();
}
inline void CDataGCCStrike15_v2_TournamentSection::clear_desc() {
  desc_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CDataGCCStrike15_v2_TournamentSection::desc() const {
  // @@protoc_insertion_point(field_get:CDataGCCStrike15_v2_TournamentSection.desc)
  return _internal_desc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CDataGCCStrike15_v2_TournamentSection::set_desc(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CDataGCCStrike15_v2_TournamentSection.desc)
}
inline std::string* CDataGCCStrike15_v2_TournamentSection::mutable_desc() {
  std::string* _s = _internal_mutable_desc();
  // @@protoc_insertion_point(field_mutable:CDataGCCStrike15_v2_TournamentSection.desc)
  return _s;
}
inline const std::string& CDataGCCStrike15_v2_TournamentSection::_internal_desc() const {
  return desc_.Get();
}
inline void CDataGCCStrike15_v2_TournamentSection::_internal_set_desc(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CDataGCCStrike15_v2_TournamentSection::_internal_mutable_desc() {
  _has_bits_[0] |= 0x00000002u;
  return desc_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CDataGCCStrike15_v2_TournamentSection::release_desc() {
  // @@protoc_insertion_point(field_release:CDataGCCStrike15_v2_TournamentSection.desc)
  if (!_internal_has_desc()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return desc_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CDataGCCStrike15_v2_TournamentSection::set_allocated_desc(std::string* desc) {
  if (desc != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  desc_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), desc,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CDataGCCStrike15_v2_TournamentSection.desc)
}

// repeated .CDataGCCStrike15_v2_TournamentGroup groups = 4;
inline int CDataGCCStrike15_v2_TournamentSection::_internal_groups_size() const {
  return groups_.size();
}
inline int CDataGCCStrike15_v2_TournamentSection::groups_size() const {
  return _internal_groups_size();
}
inline void CDataGCCStrike15_v2_TournamentSection::clear_groups() {
  groups_.Clear();
}
inline ::CDataGCCStrike15_v2_TournamentGroup* CDataGCCStrike15_v2_TournamentSection::mutable_groups(int index) {
  // @@protoc_insertion_point(field_mutable:CDataGCCStrike15_v2_TournamentSection.groups)
  return groups_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDataGCCStrike15_v2_TournamentGroup >*
CDataGCCStrike15_v2_TournamentSection::mutable_groups() {
  // @@protoc_insertion_point(field_mutable_list:CDataGCCStrike15_v2_TournamentSection.groups)
  return &groups_;
}
inline const ::CDataGCCStrike15_v2_TournamentGroup& CDataGCCStrike15_v2_TournamentSection::_internal_groups(int index) const {
  return groups_.Get(index);
}
inline const ::CDataGCCStrike15_v2_TournamentGroup& CDataGCCStrike15_v2_TournamentSection::groups(int index) const {
  // @@protoc_insertion_point(field_get:CDataGCCStrike15_v2_TournamentSection.groups)
  return _internal_groups(index);
}
inline ::CDataGCCStrike15_v2_TournamentGroup* CDataGCCStrike15_v2_TournamentSection::_internal_add_groups() {
  return groups_.Add();
}
inline ::CDataGCCStrike15_v2_TournamentGroup* CDataGCCStrike15_v2_TournamentSection::add_groups() {
  ::CDataGCCStrike15_v2_TournamentGroup* _add = _internal_add_groups();
  // @@protoc_insertion_point(field_add:CDataGCCStrike15_v2_TournamentSection.groups)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDataGCCStrike15_v2_TournamentGroup >&
CDataGCCStrike15_v2_TournamentSection::groups() const {
  // @@protoc_insertion_point(field_list:CDataGCCStrike15_v2_TournamentSection.groups)
  return groups_;
}

// -------------------------------------------------------------------

// CDataGCCStrike15_v2_TournamentInfo

// repeated .CDataGCCStrike15_v2_TournamentSection sections = 1;
inline int CDataGCCStrike15_v2_TournamentInfo::_internal_sections_size() const {
  return sections_.size();
}
inline int CDataGCCStrike15_v2_TournamentInfo::sections_size() const {
  return _internal_sections_size();
}
inline void CDataGCCStrike15_v2_TournamentInfo::clear_sections() {
  sections_.Clear();
}
inline ::CDataGCCStrike15_v2_TournamentSection* CDataGCCStrike15_v2_TournamentInfo::mutable_sections(int index) {
  // @@protoc_insertion_point(field_mutable:CDataGCCStrike15_v2_TournamentInfo.sections)
  return sections_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDataGCCStrike15_v2_TournamentSection >*
CDataGCCStrike15_v2_TournamentInfo::mutable_sections() {
  // @@protoc_insertion_point(field_mutable_list:CDataGCCStrike15_v2_TournamentInfo.sections)
  return &sections_;
}
inline const ::CDataGCCStrike15_v2_TournamentSection& CDataGCCStrike15_v2_TournamentInfo::_internal_sections(int index) const {
  return sections_.Get(index);
}
inline const ::CDataGCCStrike15_v2_TournamentSection& CDataGCCStrike15_v2_TournamentInfo::sections(int index) const {
  // @@protoc_insertion_point(field_get:CDataGCCStrike15_v2_TournamentInfo.sections)
  return _internal_sections(index);
}
inline ::CDataGCCStrike15_v2_TournamentSection* CDataGCCStrike15_v2_TournamentInfo::_internal_add_sections() {
  return sections_.Add();
}
inline ::CDataGCCStrike15_v2_TournamentSection* CDataGCCStrike15_v2_TournamentInfo::add_sections() {
  ::CDataGCCStrike15_v2_TournamentSection* _add = _internal_add_sections();
  // @@protoc_insertion_point(field_add:CDataGCCStrike15_v2_TournamentInfo.sections)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDataGCCStrike15_v2_TournamentSection >&
CDataGCCStrike15_v2_TournamentInfo::sections() const {
  // @@protoc_insertion_point(field_list:CDataGCCStrike15_v2_TournamentInfo.sections)
  return sections_;
}

// optional .TournamentEvent tournament_event = 2;
inline bool CDataGCCStrike15_v2_TournamentInfo::_internal_has_tournament_event() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || tournament_event_ != nullptr);
  return value;
}
inline bool CDataGCCStrike15_v2_TournamentInfo::has_tournament_event() const {
  return _internal_has_tournament_event();
}
inline void CDataGCCStrike15_v2_TournamentInfo::clear_tournament_event() {
  if (tournament_event_ != nullptr) tournament_event_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::TournamentEvent& CDataGCCStrike15_v2_TournamentInfo::_internal_tournament_event() const {
  const ::TournamentEvent* p = tournament_event_;
  return p != nullptr ? *p : reinterpret_cast<const ::TournamentEvent&>(
      ::_TournamentEvent_default_instance_);
}
inline const ::TournamentEvent& CDataGCCStrike15_v2_TournamentInfo::tournament_event() const {
  // @@protoc_insertion_point(field_get:CDataGCCStrike15_v2_TournamentInfo.tournament_event)
  return _internal_tournament_event();
}
inline void CDataGCCStrike15_v2_TournamentInfo::unsafe_arena_set_allocated_tournament_event(
    ::TournamentEvent* tournament_event) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tournament_event_);
  }
  tournament_event_ = tournament_event;
  if (tournament_event) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CDataGCCStrike15_v2_TournamentInfo.tournament_event)
}
inline ::TournamentEvent* CDataGCCStrike15_v2_TournamentInfo::release_tournament_event() {
  _has_bits_[0] &= ~0x00000001u;
  ::TournamentEvent* temp = tournament_event_;
  tournament_event_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TournamentEvent* CDataGCCStrike15_v2_TournamentInfo::unsafe_arena_release_tournament_event() {
  // @@protoc_insertion_point(field_release:CDataGCCStrike15_v2_TournamentInfo.tournament_event)
  _has_bits_[0] &= ~0x00000001u;
  ::TournamentEvent* temp = tournament_event_;
  tournament_event_ = nullptr;
  return temp;
}
inline ::TournamentEvent* CDataGCCStrike15_v2_TournamentInfo::_internal_mutable_tournament_event() {
  _has_bits_[0] |= 0x00000001u;
  if (tournament_event_ == nullptr) {
    auto* p = CreateMaybeMessage<::TournamentEvent>(GetArenaForAllocation());
    tournament_event_ = p;
  }
  return tournament_event_;
}
inline ::TournamentEvent* CDataGCCStrike15_v2_TournamentInfo::mutable_tournament_event() {
  ::TournamentEvent* _msg = _internal_mutable_tournament_event();
  // @@protoc_insertion_point(field_mutable:CDataGCCStrike15_v2_TournamentInfo.tournament_event)
  return _msg;
}
inline void CDataGCCStrike15_v2_TournamentInfo::set_allocated_tournament_event(::TournamentEvent* tournament_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete tournament_event_;
  }
  if (tournament_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TournamentEvent>::GetOwningArena(tournament_event);
    if (message_arena != submessage_arena) {
      tournament_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tournament_event, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  tournament_event_ = tournament_event;
  // @@protoc_insertion_point(field_set_allocated:CDataGCCStrike15_v2_TournamentInfo.tournament_event)
}

// repeated .TournamentTeam tournament_teams = 3;
inline int CDataGCCStrike15_v2_TournamentInfo::_internal_tournament_teams_size() const {
  return tournament_teams_.size();
}
inline int CDataGCCStrike15_v2_TournamentInfo::tournament_teams_size() const {
  return _internal_tournament_teams_size();
}
inline void CDataGCCStrike15_v2_TournamentInfo::clear_tournament_teams() {
  tournament_teams_.Clear();
}
inline ::TournamentTeam* CDataGCCStrike15_v2_TournamentInfo::mutable_tournament_teams(int index) {
  // @@protoc_insertion_point(field_mutable:CDataGCCStrike15_v2_TournamentInfo.tournament_teams)
  return tournament_teams_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TournamentTeam >*
CDataGCCStrike15_v2_TournamentInfo::mutable_tournament_teams() {
  // @@protoc_insertion_point(field_mutable_list:CDataGCCStrike15_v2_TournamentInfo.tournament_teams)
  return &tournament_teams_;
}
inline const ::TournamentTeam& CDataGCCStrike15_v2_TournamentInfo::_internal_tournament_teams(int index) const {
  return tournament_teams_.Get(index);
}
inline const ::TournamentTeam& CDataGCCStrike15_v2_TournamentInfo::tournament_teams(int index) const {
  // @@protoc_insertion_point(field_get:CDataGCCStrike15_v2_TournamentInfo.tournament_teams)
  return _internal_tournament_teams(index);
}
inline ::TournamentTeam* CDataGCCStrike15_v2_TournamentInfo::_internal_add_tournament_teams() {
  return tournament_teams_.Add();
}
inline ::TournamentTeam* CDataGCCStrike15_v2_TournamentInfo::add_tournament_teams() {
  ::TournamentTeam* _add = _internal_add_tournament_teams();
  // @@protoc_insertion_point(field_add:CDataGCCStrike15_v2_TournamentInfo.tournament_teams)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TournamentTeam >&
CDataGCCStrike15_v2_TournamentInfo::tournament_teams() const {
  // @@protoc_insertion_point(field_list:CDataGCCStrike15_v2_TournamentInfo.tournament_teams)
  return tournament_teams_;
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_MatchList

// optional uint32 msgrequestid = 1;
inline bool CMsgGCCStrike15_v2_MatchList::_internal_has_msgrequestid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_MatchList::has_msgrequestid() const {
  return _internal_has_msgrequestid();
}
inline void CMsgGCCStrike15_v2_MatchList::clear_msgrequestid() {
  msgrequestid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_MatchList::_internal_msgrequestid() const {
  return msgrequestid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_MatchList::msgrequestid() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchList.msgrequestid)
  return _internal_msgrequestid();
}
inline void CMsgGCCStrike15_v2_MatchList::_internal_set_msgrequestid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  msgrequestid_ = value;
}
inline void CMsgGCCStrike15_v2_MatchList::set_msgrequestid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_msgrequestid(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_MatchList.msgrequestid)
}

// optional uint32 accountid = 2;
inline bool CMsgGCCStrike15_v2_MatchList::_internal_has_accountid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_MatchList::has_accountid() const {
  return _internal_has_accountid();
}
inline void CMsgGCCStrike15_v2_MatchList::clear_accountid() {
  accountid_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_MatchList::_internal_accountid() const {
  return accountid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_MatchList::accountid() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchList.accountid)
  return _internal_accountid();
}
inline void CMsgGCCStrike15_v2_MatchList::_internal_set_accountid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  accountid_ = value;
}
inline void CMsgGCCStrike15_v2_MatchList::set_accountid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_accountid(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_MatchList.accountid)
}

// optional uint32 servertime = 3;
inline bool CMsgGCCStrike15_v2_MatchList::_internal_has_servertime() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_MatchList::has_servertime() const {
  return _internal_has_servertime();
}
inline void CMsgGCCStrike15_v2_MatchList::clear_servertime() {
  servertime_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_MatchList::_internal_servertime() const {
  return servertime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_MatchList::servertime() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchList.servertime)
  return _internal_servertime();
}
inline void CMsgGCCStrike15_v2_MatchList::_internal_set_servertime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  servertime_ = value;
}
inline void CMsgGCCStrike15_v2_MatchList::set_servertime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_servertime(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_MatchList.servertime)
}

// repeated .CDataGCCStrike15_v2_MatchInfo matches = 4;
inline int CMsgGCCStrike15_v2_MatchList::_internal_matches_size() const {
  return matches_.size();
}
inline int CMsgGCCStrike15_v2_MatchList::matches_size() const {
  return _internal_matches_size();
}
inline void CMsgGCCStrike15_v2_MatchList::clear_matches() {
  matches_.Clear();
}
inline ::CDataGCCStrike15_v2_MatchInfo* CMsgGCCStrike15_v2_MatchList::mutable_matches(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgGCCStrike15_v2_MatchList.matches)
  return matches_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDataGCCStrike15_v2_MatchInfo >*
CMsgGCCStrike15_v2_MatchList::mutable_matches() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCCStrike15_v2_MatchList.matches)
  return &matches_;
}
inline const ::CDataGCCStrike15_v2_MatchInfo& CMsgGCCStrike15_v2_MatchList::_internal_matches(int index) const {
  return matches_.Get(index);
}
inline const ::CDataGCCStrike15_v2_MatchInfo& CMsgGCCStrike15_v2_MatchList::matches(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchList.matches)
  return _internal_matches(index);
}
inline ::CDataGCCStrike15_v2_MatchInfo* CMsgGCCStrike15_v2_MatchList::_internal_add_matches() {
  return matches_.Add();
}
inline ::CDataGCCStrike15_v2_MatchInfo* CMsgGCCStrike15_v2_MatchList::add_matches() {
  ::CDataGCCStrike15_v2_MatchInfo* _add = _internal_add_matches();
  // @@protoc_insertion_point(field_add:CMsgGCCStrike15_v2_MatchList.matches)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDataGCCStrike15_v2_MatchInfo >&
CMsgGCCStrike15_v2_MatchList::matches() const {
  // @@protoc_insertion_point(field_list:CMsgGCCStrike15_v2_MatchList.matches)
  return matches_;
}

// repeated .TournamentTeam streams = 5;
inline int CMsgGCCStrike15_v2_MatchList::_internal_streams_size() const {
  return streams_.size();
}
inline int CMsgGCCStrike15_v2_MatchList::streams_size() const {
  return _internal_streams_size();
}
inline void CMsgGCCStrike15_v2_MatchList::clear_streams() {
  streams_.Clear();
}
inline ::TournamentTeam* CMsgGCCStrike15_v2_MatchList::mutable_streams(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgGCCStrike15_v2_MatchList.streams)
  return streams_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TournamentTeam >*
CMsgGCCStrike15_v2_MatchList::mutable_streams() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCCStrike15_v2_MatchList.streams)
  return &streams_;
}
inline const ::TournamentTeam& CMsgGCCStrike15_v2_MatchList::_internal_streams(int index) const {
  return streams_.Get(index);
}
inline const ::TournamentTeam& CMsgGCCStrike15_v2_MatchList::streams(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchList.streams)
  return _internal_streams(index);
}
inline ::TournamentTeam* CMsgGCCStrike15_v2_MatchList::_internal_add_streams() {
  return streams_.Add();
}
inline ::TournamentTeam* CMsgGCCStrike15_v2_MatchList::add_streams() {
  ::TournamentTeam* _add = _internal_add_streams();
  // @@protoc_insertion_point(field_add:CMsgGCCStrike15_v2_MatchList.streams)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TournamentTeam >&
CMsgGCCStrike15_v2_MatchList::streams() const {
  // @@protoc_insertion_point(field_list:CMsgGCCStrike15_v2_MatchList.streams)
  return streams_;
}

// optional .CDataGCCStrike15_v2_TournamentInfo tournamentinfo = 6;
inline bool CMsgGCCStrike15_v2_MatchList::_internal_has_tournamentinfo() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || tournamentinfo_ != nullptr);
  return value;
}
inline bool CMsgGCCStrike15_v2_MatchList::has_tournamentinfo() const {
  return _internal_has_tournamentinfo();
}
inline void CMsgGCCStrike15_v2_MatchList::clear_tournamentinfo() {
  if (tournamentinfo_ != nullptr) tournamentinfo_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CDataGCCStrike15_v2_TournamentInfo& CMsgGCCStrike15_v2_MatchList::_internal_tournamentinfo() const {
  const ::CDataGCCStrike15_v2_TournamentInfo* p = tournamentinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::CDataGCCStrike15_v2_TournamentInfo&>(
      ::_CDataGCCStrike15_v2_TournamentInfo_default_instance_);
}
inline const ::CDataGCCStrike15_v2_TournamentInfo& CMsgGCCStrike15_v2_MatchList::tournamentinfo() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_MatchList.tournamentinfo)
  return _internal_tournamentinfo();
}
inline void CMsgGCCStrike15_v2_MatchList::unsafe_arena_set_allocated_tournamentinfo(
    ::CDataGCCStrike15_v2_TournamentInfo* tournamentinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tournamentinfo_);
  }
  tournamentinfo_ = tournamentinfo;
  if (tournamentinfo) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgGCCStrike15_v2_MatchList.tournamentinfo)
}
inline ::CDataGCCStrike15_v2_TournamentInfo* CMsgGCCStrike15_v2_MatchList::release_tournamentinfo() {
  _has_bits_[0] &= ~0x00000001u;
  ::CDataGCCStrike15_v2_TournamentInfo* temp = tournamentinfo_;
  tournamentinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CDataGCCStrike15_v2_TournamentInfo* CMsgGCCStrike15_v2_MatchList::unsafe_arena_release_tournamentinfo() {
  // @@protoc_insertion_point(field_release:CMsgGCCStrike15_v2_MatchList.tournamentinfo)
  _has_bits_[0] &= ~0x00000001u;
  ::CDataGCCStrike15_v2_TournamentInfo* temp = tournamentinfo_;
  tournamentinfo_ = nullptr;
  return temp;
}
inline ::CDataGCCStrike15_v2_TournamentInfo* CMsgGCCStrike15_v2_MatchList::_internal_mutable_tournamentinfo() {
  _has_bits_[0] |= 0x00000001u;
  if (tournamentinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::CDataGCCStrike15_v2_TournamentInfo>(GetArenaForAllocation());
    tournamentinfo_ = p;
  }
  return tournamentinfo_;
}
inline ::CDataGCCStrike15_v2_TournamentInfo* CMsgGCCStrike15_v2_MatchList::mutable_tournamentinfo() {
  ::CDataGCCStrike15_v2_TournamentInfo* _msg = _internal_mutable_tournamentinfo();
  // @@protoc_insertion_point(field_mutable:CMsgGCCStrike15_v2_MatchList.tournamentinfo)
  return _msg;
}
inline void CMsgGCCStrike15_v2_MatchList::set_allocated_tournamentinfo(::CDataGCCStrike15_v2_TournamentInfo* tournamentinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete tournamentinfo_;
  }
  if (tournamentinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CDataGCCStrike15_v2_TournamentInfo>::GetOwningArena(tournamentinfo);
    if (message_arena != submessage_arena) {
      tournamentinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tournamentinfo, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  tournamentinfo_ = tournamentinfo;
  // @@protoc_insertion_point(field_set_allocated:CMsgGCCStrike15_v2_MatchList.tournamentinfo)
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick

// optional int32 sectionid = 1;
inline bool CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::_internal_has_sectionid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::has_sectionid() const {
  return _internal_has_sectionid();
}
inline void CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::clear_sectionid() {
  sectionid_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::_internal_sectionid() const {
  return sectionid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::sectionid() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_Predictions.GroupMatchTeamPick.sectionid)
  return _internal_sectionid();
}
inline void CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::_internal_set_sectionid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  sectionid_ = value;
}
inline void CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::set_sectionid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sectionid(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_Predictions.GroupMatchTeamPick.sectionid)
}

// optional int32 groupid = 2;
inline bool CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::_internal_has_groupid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::has_groupid() const {
  return _internal_has_groupid();
}
inline void CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::clear_groupid() {
  groupid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::_internal_groupid() const {
  return groupid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::groupid() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_Predictions.GroupMatchTeamPick.groupid)
  return _internal_groupid();
}
inline void CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::_internal_set_groupid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  groupid_ = value;
}
inline void CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::set_groupid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_groupid(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_Predictions.GroupMatchTeamPick.groupid)
}

// optional int32 index = 3;
inline bool CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::_internal_has_index() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::has_index() const {
  return _internal_has_index();
}
inline void CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::clear_index() {
  index_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::index() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_Predictions.GroupMatchTeamPick.index)
  return _internal_index();
}
inline void CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::_internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  index_ = value;
}
inline void CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_Predictions.GroupMatchTeamPick.index)
}

// optional int32 teamid = 4;
inline bool CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::_internal_has_teamid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::has_teamid() const {
  return _internal_has_teamid();
}
inline void CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::clear_teamid() {
  teamid_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::_internal_teamid() const {
  return teamid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::teamid() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_Predictions.GroupMatchTeamPick.teamid)
  return _internal_teamid();
}
inline void CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::_internal_set_teamid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  teamid_ = value;
}
inline void CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::set_teamid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_teamid(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_Predictions.GroupMatchTeamPick.teamid)
}

// optional uint64 itemid = 5;
inline bool CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::_internal_has_itemid() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::has_itemid() const {
  return _internal_has_itemid();
}
inline void CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::clear_itemid() {
  itemid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::_internal_itemid() const {
  return itemid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::itemid() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_Predictions.GroupMatchTeamPick.itemid)
  return _internal_itemid();
}
inline void CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::_internal_set_itemid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  itemid_ = value;
}
inline void CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::set_itemid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_itemid(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_Predictions.GroupMatchTeamPick.itemid)
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_Predictions

// optional uint32 event_id = 1;
inline bool CMsgGCCStrike15_v2_Predictions::_internal_has_event_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_Predictions::has_event_id() const {
  return _internal_has_event_id();
}
inline void CMsgGCCStrike15_v2_Predictions::clear_event_id() {
  event_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_Predictions::_internal_event_id() const {
  return event_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_Predictions::event_id() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_Predictions.event_id)
  return _internal_event_id();
}
inline void CMsgGCCStrike15_v2_Predictions::_internal_set_event_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  event_id_ = value;
}
inline void CMsgGCCStrike15_v2_Predictions::set_event_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_event_id(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_Predictions.event_id)
}

// repeated .CMsgGCCStrike15_v2_Predictions.GroupMatchTeamPick group_match_team_picks = 2;
inline int CMsgGCCStrike15_v2_Predictions::_internal_group_match_team_picks_size() const {
  return group_match_team_picks_.size();
}
inline int CMsgGCCStrike15_v2_Predictions::group_match_team_picks_size() const {
  return _internal_group_match_team_picks_size();
}
inline void CMsgGCCStrike15_v2_Predictions::clear_group_match_team_picks() {
  group_match_team_picks_.Clear();
}
inline ::CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick* CMsgGCCStrike15_v2_Predictions::mutable_group_match_team_picks(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgGCCStrike15_v2_Predictions.group_match_team_picks)
  return group_match_team_picks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick >*
CMsgGCCStrike15_v2_Predictions::mutable_group_match_team_picks() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCCStrike15_v2_Predictions.group_match_team_picks)
  return &group_match_team_picks_;
}
inline const ::CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick& CMsgGCCStrike15_v2_Predictions::_internal_group_match_team_picks(int index) const {
  return group_match_team_picks_.Get(index);
}
inline const ::CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick& CMsgGCCStrike15_v2_Predictions::group_match_team_picks(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_Predictions.group_match_team_picks)
  return _internal_group_match_team_picks(index);
}
inline ::CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick* CMsgGCCStrike15_v2_Predictions::_internal_add_group_match_team_picks() {
  return group_match_team_picks_.Add();
}
inline ::CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick* CMsgGCCStrike15_v2_Predictions::add_group_match_team_picks() {
  ::CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick* _add = _internal_add_group_match_team_picks();
  // @@protoc_insertion_point(field_add:CMsgGCCStrike15_v2_Predictions.group_match_team_picks)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick >&
CMsgGCCStrike15_v2_Predictions::group_match_team_picks() const {
  // @@protoc_insertion_point(field_list:CMsgGCCStrike15_v2_Predictions.group_match_team_picks)
  return group_match_team_picks_;
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_Fantasy_FantasySlot

// optional int32 type = 1;
inline bool CMsgGCCStrike15_v2_Fantasy_FantasySlot::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_Fantasy_FantasySlot::has_type() const {
  return _internal_has_type();
}
inline void CMsgGCCStrike15_v2_Fantasy_FantasySlot::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgGCCStrike15_v2_Fantasy_FantasySlot::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgGCCStrike15_v2_Fantasy_FantasySlot::type() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_Fantasy.FantasySlot.type)
  return _internal_type();
}
inline void CMsgGCCStrike15_v2_Fantasy_FantasySlot::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  type_ = value;
}
inline void CMsgGCCStrike15_v2_Fantasy_FantasySlot::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_Fantasy.FantasySlot.type)
}

// optional int32 pick = 2;
inline bool CMsgGCCStrike15_v2_Fantasy_FantasySlot::_internal_has_pick() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_Fantasy_FantasySlot::has_pick() const {
  return _internal_has_pick();
}
inline void CMsgGCCStrike15_v2_Fantasy_FantasySlot::clear_pick() {
  pick_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgGCCStrike15_v2_Fantasy_FantasySlot::_internal_pick() const {
  return pick_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgGCCStrike15_v2_Fantasy_FantasySlot::pick() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_Fantasy.FantasySlot.pick)
  return _internal_pick();
}
inline void CMsgGCCStrike15_v2_Fantasy_FantasySlot::_internal_set_pick(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  pick_ = value;
}
inline void CMsgGCCStrike15_v2_Fantasy_FantasySlot::set_pick(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pick(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_Fantasy.FantasySlot.pick)
}

// optional uint64 itemid = 3;
inline bool CMsgGCCStrike15_v2_Fantasy_FantasySlot::_internal_has_itemid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_Fantasy_FantasySlot::has_itemid() const {
  return _internal_has_itemid();
}
inline void CMsgGCCStrike15_v2_Fantasy_FantasySlot::clear_itemid() {
  itemid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCCStrike15_v2_Fantasy_FantasySlot::_internal_itemid() const {
  return itemid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCCStrike15_v2_Fantasy_FantasySlot::itemid() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_Fantasy.FantasySlot.itemid)
  return _internal_itemid();
}
inline void CMsgGCCStrike15_v2_Fantasy_FantasySlot::_internal_set_itemid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  itemid_ = value;
}
inline void CMsgGCCStrike15_v2_Fantasy_FantasySlot::set_itemid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_itemid(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_Fantasy.FantasySlot.itemid)
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_Fantasy_FantasyTeam

// optional int32 sectionid = 1;
inline bool CMsgGCCStrike15_v2_Fantasy_FantasyTeam::_internal_has_sectionid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_Fantasy_FantasyTeam::has_sectionid() const {
  return _internal_has_sectionid();
}
inline void CMsgGCCStrike15_v2_Fantasy_FantasyTeam::clear_sectionid() {
  sectionid_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgGCCStrike15_v2_Fantasy_FantasyTeam::_internal_sectionid() const {
  return sectionid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgGCCStrike15_v2_Fantasy_FantasyTeam::sectionid() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_Fantasy.FantasyTeam.sectionid)
  return _internal_sectionid();
}
inline void CMsgGCCStrike15_v2_Fantasy_FantasyTeam::_internal_set_sectionid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  sectionid_ = value;
}
inline void CMsgGCCStrike15_v2_Fantasy_FantasyTeam::set_sectionid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sectionid(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_Fantasy.FantasyTeam.sectionid)
}

// repeated .CMsgGCCStrike15_v2_Fantasy.FantasySlot slots = 2;
inline int CMsgGCCStrike15_v2_Fantasy_FantasyTeam::_internal_slots_size() const {
  return slots_.size();
}
inline int CMsgGCCStrike15_v2_Fantasy_FantasyTeam::slots_size() const {
  return _internal_slots_size();
}
inline void CMsgGCCStrike15_v2_Fantasy_FantasyTeam::clear_slots() {
  slots_.Clear();
}
inline ::CMsgGCCStrike15_v2_Fantasy_FantasySlot* CMsgGCCStrike15_v2_Fantasy_FantasyTeam::mutable_slots(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgGCCStrike15_v2_Fantasy.FantasyTeam.slots)
  return slots_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCCStrike15_v2_Fantasy_FantasySlot >*
CMsgGCCStrike15_v2_Fantasy_FantasyTeam::mutable_slots() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCCStrike15_v2_Fantasy.FantasyTeam.slots)
  return &slots_;
}
inline const ::CMsgGCCStrike15_v2_Fantasy_FantasySlot& CMsgGCCStrike15_v2_Fantasy_FantasyTeam::_internal_slots(int index) const {
  return slots_.Get(index);
}
inline const ::CMsgGCCStrike15_v2_Fantasy_FantasySlot& CMsgGCCStrike15_v2_Fantasy_FantasyTeam::slots(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_Fantasy.FantasyTeam.slots)
  return _internal_slots(index);
}
inline ::CMsgGCCStrike15_v2_Fantasy_FantasySlot* CMsgGCCStrike15_v2_Fantasy_FantasyTeam::_internal_add_slots() {
  return slots_.Add();
}
inline ::CMsgGCCStrike15_v2_Fantasy_FantasySlot* CMsgGCCStrike15_v2_Fantasy_FantasyTeam::add_slots() {
  ::CMsgGCCStrike15_v2_Fantasy_FantasySlot* _add = _internal_add_slots();
  // @@protoc_insertion_point(field_add:CMsgGCCStrike15_v2_Fantasy.FantasyTeam.slots)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCCStrike15_v2_Fantasy_FantasySlot >&
CMsgGCCStrike15_v2_Fantasy_FantasyTeam::slots() const {
  // @@protoc_insertion_point(field_list:CMsgGCCStrike15_v2_Fantasy.FantasyTeam.slots)
  return slots_;
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_Fantasy

// optional uint32 event_id = 1;
inline bool CMsgGCCStrike15_v2_Fantasy::_internal_has_event_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_Fantasy::has_event_id() const {
  return _internal_has_event_id();
}
inline void CMsgGCCStrike15_v2_Fantasy::clear_event_id() {
  event_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_Fantasy::_internal_event_id() const {
  return event_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_Fantasy::event_id() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_Fantasy.event_id)
  return _internal_event_id();
}
inline void CMsgGCCStrike15_v2_Fantasy::_internal_set_event_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  event_id_ = value;
}
inline void CMsgGCCStrike15_v2_Fantasy::set_event_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_event_id(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_Fantasy.event_id)
}

// repeated .CMsgGCCStrike15_v2_Fantasy.FantasyTeam teams = 2;
inline int CMsgGCCStrike15_v2_Fantasy::_internal_teams_size() const {
  return teams_.size();
}
inline int CMsgGCCStrike15_v2_Fantasy::teams_size() const {
  return _internal_teams_size();
}
inline void CMsgGCCStrike15_v2_Fantasy::clear_teams() {
  teams_.Clear();
}
inline ::CMsgGCCStrike15_v2_Fantasy_FantasyTeam* CMsgGCCStrike15_v2_Fantasy::mutable_teams(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgGCCStrike15_v2_Fantasy.teams)
  return teams_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCCStrike15_v2_Fantasy_FantasyTeam >*
CMsgGCCStrike15_v2_Fantasy::mutable_teams() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCCStrike15_v2_Fantasy.teams)
  return &teams_;
}
inline const ::CMsgGCCStrike15_v2_Fantasy_FantasyTeam& CMsgGCCStrike15_v2_Fantasy::_internal_teams(int index) const {
  return teams_.Get(index);
}
inline const ::CMsgGCCStrike15_v2_Fantasy_FantasyTeam& CMsgGCCStrike15_v2_Fantasy::teams(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_Fantasy.teams)
  return _internal_teams(index);
}
inline ::CMsgGCCStrike15_v2_Fantasy_FantasyTeam* CMsgGCCStrike15_v2_Fantasy::_internal_add_teams() {
  return teams_.Add();
}
inline ::CMsgGCCStrike15_v2_Fantasy_FantasyTeam* CMsgGCCStrike15_v2_Fantasy::add_teams() {
  ::CMsgGCCStrike15_v2_Fantasy_FantasyTeam* _add = _internal_add_teams();
  // @@protoc_insertion_point(field_add:CMsgGCCStrike15_v2_Fantasy.teams)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCCStrike15_v2_Fantasy_FantasyTeam >&
CMsgGCCStrike15_v2_Fantasy::teams() const {
  // @@protoc_insertion_point(field_list:CMsgGCCStrike15_v2_Fantasy.teams)
  return teams_;
}

// -------------------------------------------------------------------

// CAttribute_String

// optional string value = 1;
inline bool CAttribute_String::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CAttribute_String::has_value() const {
  return _internal_has_value();
}
inline void CAttribute_String::clear_value() {
  value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CAttribute_String::value() const {
  // @@protoc_insertion_point(field_get:CAttribute_String.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CAttribute_String::set_value(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CAttribute_String.value)
}
inline std::string* CAttribute_String::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:CAttribute_String.value)
  return _s;
}
inline const std::string& CAttribute_String::_internal_value() const {
  return value_.Get();
}
inline void CAttribute_String::_internal_set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CAttribute_String::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000001u;
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CAttribute_String::release_value() {
  // @@protoc_insertion_point(field_release:CAttribute_String.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CAttribute_String::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CAttribute_String.value)
}

// -------------------------------------------------------------------

// CMsgGCToGCReloadVersions

// -------------------------------------------------------------------

// CMsgCStrike15Welcome

// optional uint32 store_item_hash = 5;
inline bool CMsgCStrike15Welcome::_internal_has_store_item_hash() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgCStrike15Welcome::has_store_item_hash() const {
  return _internal_has_store_item_hash();
}
inline void CMsgCStrike15Welcome::clear_store_item_hash() {
  store_item_hash_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgCStrike15Welcome::_internal_store_item_hash() const {
  return store_item_hash_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgCStrike15Welcome::store_item_hash() const {
  // @@protoc_insertion_point(field_get:CMsgCStrike15Welcome.store_item_hash)
  return _internal_store_item_hash();
}
inline void CMsgCStrike15Welcome::_internal_set_store_item_hash(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  store_item_hash_ = value;
}
inline void CMsgCStrike15Welcome::set_store_item_hash(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_store_item_hash(value);
  // @@protoc_insertion_point(field_set:CMsgCStrike15Welcome.store_item_hash)
}

// optional uint32 timeplayedconsecutively = 6;
inline bool CMsgCStrike15Welcome::_internal_has_timeplayedconsecutively() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgCStrike15Welcome::has_timeplayedconsecutively() const {
  return _internal_has_timeplayedconsecutively();
}
inline void CMsgCStrike15Welcome::clear_timeplayedconsecutively() {
  timeplayedconsecutively_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgCStrike15Welcome::_internal_timeplayedconsecutively() const {
  return timeplayedconsecutively_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgCStrike15Welcome::timeplayedconsecutively() const {
  // @@protoc_insertion_point(field_get:CMsgCStrike15Welcome.timeplayedconsecutively)
  return _internal_timeplayedconsecutively();
}
inline void CMsgCStrike15Welcome::_internal_set_timeplayedconsecutively(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  timeplayedconsecutively_ = value;
}
inline void CMsgCStrike15Welcome::set_timeplayedconsecutively(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_timeplayedconsecutively(value);
  // @@protoc_insertion_point(field_set:CMsgCStrike15Welcome.timeplayedconsecutively)
}

// optional uint32 time_first_played = 10;
inline bool CMsgCStrike15Welcome::_internal_has_time_first_played() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgCStrike15Welcome::has_time_first_played() const {
  return _internal_has_time_first_played();
}
inline void CMsgCStrike15Welcome::clear_time_first_played() {
  time_first_played_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgCStrike15Welcome::_internal_time_first_played() const {
  return time_first_played_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgCStrike15Welcome::time_first_played() const {
  // @@protoc_insertion_point(field_get:CMsgCStrike15Welcome.time_first_played)
  return _internal_time_first_played();
}
inline void CMsgCStrike15Welcome::_internal_set_time_first_played(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  time_first_played_ = value;
}
inline void CMsgCStrike15Welcome::set_time_first_played(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_time_first_played(value);
  // @@protoc_insertion_point(field_set:CMsgCStrike15Welcome.time_first_played)
}

// optional uint32 last_time_played = 12;
inline bool CMsgCStrike15Welcome::_internal_has_last_time_played() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgCStrike15Welcome::has_last_time_played() const {
  return _internal_has_last_time_played();
}
inline void CMsgCStrike15Welcome::clear_last_time_played() {
  last_time_played_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgCStrike15Welcome::_internal_last_time_played() const {
  return last_time_played_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgCStrike15Welcome::last_time_played() const {
  // @@protoc_insertion_point(field_get:CMsgCStrike15Welcome.last_time_played)
  return _internal_last_time_played();
}
inline void CMsgCStrike15Welcome::_internal_set_last_time_played(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  last_time_played_ = value;
}
inline void CMsgCStrike15Welcome::set_last_time_played(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_last_time_played(value);
  // @@protoc_insertion_point(field_set:CMsgCStrike15Welcome.last_time_played)
}

// optional uint32 last_ip_address = 13;
inline bool CMsgCStrike15Welcome::_internal_has_last_ip_address() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgCStrike15Welcome::has_last_ip_address() const {
  return _internal_has_last_ip_address();
}
inline void CMsgCStrike15Welcome::clear_last_ip_address() {
  last_ip_address_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgCStrike15Welcome::_internal_last_ip_address() const {
  return last_ip_address_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgCStrike15Welcome::last_ip_address() const {
  // @@protoc_insertion_point(field_get:CMsgCStrike15Welcome.last_ip_address)
  return _internal_last_ip_address();
}
inline void CMsgCStrike15Welcome::_internal_set_last_ip_address(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  last_ip_address_ = value;
}
inline void CMsgCStrike15Welcome::set_last_ip_address(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_last_ip_address(value);
  // @@protoc_insertion_point(field_set:CMsgCStrike15Welcome.last_ip_address)
}

// optional uint64 gscookieid = 18;
inline bool CMsgCStrike15Welcome::_internal_has_gscookieid() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgCStrike15Welcome::has_gscookieid() const {
  return _internal_has_gscookieid();
}
inline void CMsgCStrike15Welcome::clear_gscookieid() {
  gscookieid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgCStrike15Welcome::_internal_gscookieid() const {
  return gscookieid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgCStrike15Welcome::gscookieid() const {
  // @@protoc_insertion_point(field_get:CMsgCStrike15Welcome.gscookieid)
  return _internal_gscookieid();
}
inline void CMsgCStrike15Welcome::_internal_set_gscookieid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  gscookieid_ = value;
}
inline void CMsgCStrike15Welcome::set_gscookieid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_gscookieid(value);
  // @@protoc_insertion_point(field_set:CMsgCStrike15Welcome.gscookieid)
}

// optional uint64 uniqueid = 19;
inline bool CMsgCStrike15Welcome::_internal_has_uniqueid() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgCStrike15Welcome::has_uniqueid() const {
  return _internal_has_uniqueid();
}
inline void CMsgCStrike15Welcome::clear_uniqueid() {
  uniqueid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgCStrike15Welcome::_internal_uniqueid() const {
  return uniqueid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgCStrike15Welcome::uniqueid() const {
  // @@protoc_insertion_point(field_get:CMsgCStrike15Welcome.uniqueid)
  return _internal_uniqueid();
}
inline void CMsgCStrike15Welcome::_internal_set_uniqueid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  uniqueid_ = value;
}
inline void CMsgCStrike15Welcome::set_uniqueid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_uniqueid(value);
  // @@protoc_insertion_point(field_set:CMsgCStrike15Welcome.uniqueid)
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_ClientVarValueNotificationInfo

// optional string value_name = 1;
inline bool CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::_internal_has_value_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::has_value_name() const {
  return _internal_has_value_name();
}
inline void CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::clear_value_name() {
  value_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::value_name() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_ClientVarValueNotificationInfo.value_name)
  return _internal_value_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::set_value_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 value_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_ClientVarValueNotificationInfo.value_name)
}
inline std::string* CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::mutable_value_name() {
  std::string* _s = _internal_mutable_value_name();
  // @@protoc_insertion_point(field_mutable:CMsgGCCStrike15_v2_ClientVarValueNotificationInfo.value_name)
  return _s;
}
inline const std::string& CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::_internal_value_name() const {
  return value_name_.Get();
}
inline void CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::_internal_set_value_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  value_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::_internal_mutable_value_name() {
  _has_bits_[0] |= 0x00000001u;
  return value_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::release_value_name() {
  // @@protoc_insertion_point(field_release:CMsgGCCStrike15_v2_ClientVarValueNotificationInfo.value_name)
  if (!_internal_has_value_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return value_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::set_allocated_value_name(std::string* value_name) {
  if (value_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  value_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CMsgGCCStrike15_v2_ClientVarValueNotificationInfo.value_name)
}

// optional int32 value_int = 2;
inline bool CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::_internal_has_value_int() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::has_value_int() const {
  return _internal_has_value_int();
}
inline void CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::clear_value_int() {
  value_int_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::_internal_value_int() const {
  return value_int_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::value_int() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_ClientVarValueNotificationInfo.value_int)
  return _internal_value_int();
}
inline void CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::_internal_set_value_int(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  value_int_ = value;
}
inline void CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::set_value_int(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_value_int(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_ClientVarValueNotificationInfo.value_int)
}

// optional uint32 server_addr = 3;
inline bool CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::_internal_has_server_addr() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::has_server_addr() const {
  return _internal_has_server_addr();
}
inline void CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::clear_server_addr() {
  server_addr_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::_internal_server_addr() const {
  return server_addr_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::server_addr() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_ClientVarValueNotificationInfo.server_addr)
  return _internal_server_addr();
}
inline void CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::_internal_set_server_addr(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  server_addr_ = value;
}
inline void CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::set_server_addr(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_server_addr(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_ClientVarValueNotificationInfo.server_addr)
}

// optional uint32 server_port = 4;
inline bool CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::_internal_has_server_port() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::has_server_port() const {
  return _internal_has_server_port();
}
inline void CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::clear_server_port() {
  server_port_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::_internal_server_port() const {
  return server_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::server_port() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_ClientVarValueNotificationInfo.server_port)
  return _internal_server_port();
}
inline void CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::_internal_set_server_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  server_port_ = value;
}
inline void CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::set_server_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_server_port(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_ClientVarValueNotificationInfo.server_port)
}

// repeated string choked_blocks = 5;
inline int CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::_internal_choked_blocks_size() const {
  return choked_blocks_.size();
}
inline int CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::choked_blocks_size() const {
  return _internal_choked_blocks_size();
}
inline void CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::clear_choked_blocks() {
  choked_blocks_.Clear();
}
inline std::string* CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::add_choked_blocks() {
  std::string* _s = _internal_add_choked_blocks();
  // @@protoc_insertion_point(field_add_mutable:CMsgGCCStrike15_v2_ClientVarValueNotificationInfo.choked_blocks)
  return _s;
}
inline const std::string& CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::_internal_choked_blocks(int index) const {
  return choked_blocks_.Get(index);
}
inline const std::string& CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::choked_blocks(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_ClientVarValueNotificationInfo.choked_blocks)
  return _internal_choked_blocks(index);
}
inline std::string* CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::mutable_choked_blocks(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgGCCStrike15_v2_ClientVarValueNotificationInfo.choked_blocks)
  return choked_blocks_.Mutable(index);
}
inline void CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::set_choked_blocks(int index, const std::string& value) {
  choked_blocks_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_ClientVarValueNotificationInfo.choked_blocks)
}
inline void CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::set_choked_blocks(int index, std::string&& value) {
  choked_blocks_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_ClientVarValueNotificationInfo.choked_blocks)
}
inline void CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::set_choked_blocks(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  choked_blocks_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgGCCStrike15_v2_ClientVarValueNotificationInfo.choked_blocks)
}
inline void CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::set_choked_blocks(int index, const char* value, size_t size) {
  choked_blocks_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgGCCStrike15_v2_ClientVarValueNotificationInfo.choked_blocks)
}
inline std::string* CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::_internal_add_choked_blocks() {
  return choked_blocks_.Add();
}
inline void CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::add_choked_blocks(const std::string& value) {
  choked_blocks_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CMsgGCCStrike15_v2_ClientVarValueNotificationInfo.choked_blocks)
}
inline void CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::add_choked_blocks(std::string&& value) {
  choked_blocks_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CMsgGCCStrike15_v2_ClientVarValueNotificationInfo.choked_blocks)
}
inline void CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::add_choked_blocks(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  choked_blocks_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CMsgGCCStrike15_v2_ClientVarValueNotificationInfo.choked_blocks)
}
inline void CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::add_choked_blocks(const char* value, size_t size) {
  choked_blocks_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CMsgGCCStrike15_v2_ClientVarValueNotificationInfo.choked_blocks)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::choked_blocks() const {
  // @@protoc_insertion_point(field_list:CMsgGCCStrike15_v2_ClientVarValueNotificationInfo.choked_blocks)
  return choked_blocks_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::mutable_choked_blocks() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCCStrike15_v2_ClientVarValueNotificationInfo.choked_blocks)
  return &choked_blocks_;
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_ServerVarValueNotificationInfo

// optional uint32 accountid = 1;
inline bool CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::_internal_has_accountid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::has_accountid() const {
  return _internal_has_accountid();
}
inline void CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::clear_accountid() {
  accountid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::_internal_accountid() const {
  return accountid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::accountid() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_ServerVarValueNotificationInfo.accountid)
  return _internal_accountid();
}
inline void CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::_internal_set_accountid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  accountid_ = value;
}
inline void CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::set_accountid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_accountid(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_ServerVarValueNotificationInfo.accountid)
}

// repeated uint32 viewangles = 2;
inline int CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::_internal_viewangles_size() const {
  return viewangles_.size();
}
inline int CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::viewangles_size() const {
  return _internal_viewangles_size();
}
inline void CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::clear_viewangles() {
  viewangles_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::_internal_viewangles(int index) const {
  return viewangles_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::viewangles(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_ServerVarValueNotificationInfo.viewangles)
  return _internal_viewangles(index);
}
inline void CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::set_viewangles(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  viewangles_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_ServerVarValueNotificationInfo.viewangles)
}
inline void CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::_internal_add_viewangles(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  viewangles_.Add(value);
}
inline void CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::add_viewangles(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_viewangles(value);
  // @@protoc_insertion_point(field_add:CMsgGCCStrike15_v2_ServerVarValueNotificationInfo.viewangles)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::_internal_viewangles() const {
  return viewangles_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::viewangles() const {
  // @@protoc_insertion_point(field_list:CMsgGCCStrike15_v2_ServerVarValueNotificationInfo.viewangles)
  return _internal_viewangles();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::_internal_mutable_viewangles() {
  return &viewangles_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::mutable_viewangles() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCCStrike15_v2_ServerVarValueNotificationInfo.viewangles)
  return _internal_mutable_viewangles();
}

// optional uint32 type = 3;
inline bool CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::has_type() const {
  return _internal_has_type();
}
inline void CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::clear_type() {
  type_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::type() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_ServerVarValueNotificationInfo.type)
  return _internal_type();
}
inline void CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  type_ = value;
}
inline void CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_ServerVarValueNotificationInfo.type)
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_GiftsLeaderboardRequest

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry

// optional uint32 accountid = 1;
inline bool CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::_internal_has_accountid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::has_accountid() const {
  return _internal_has_accountid();
}
inline void CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::clear_accountid() {
  accountid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::_internal_accountid() const {
  return accountid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::accountid() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_GiftsLeaderboardResponse.GiftLeaderboardEntry.accountid)
  return _internal_accountid();
}
inline void CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::_internal_set_accountid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  accountid_ = value;
}
inline void CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::set_accountid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_accountid(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_GiftsLeaderboardResponse.GiftLeaderboardEntry.accountid)
}

// optional uint32 gifts = 2;
inline bool CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::_internal_has_gifts() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::has_gifts() const {
  return _internal_has_gifts();
}
inline void CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::clear_gifts() {
  gifts_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::_internal_gifts() const {
  return gifts_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::gifts() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_GiftsLeaderboardResponse.GiftLeaderboardEntry.gifts)
  return _internal_gifts();
}
inline void CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::_internal_set_gifts(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  gifts_ = value;
}
inline void CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::set_gifts(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_gifts(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_GiftsLeaderboardResponse.GiftLeaderboardEntry.gifts)
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_GiftsLeaderboardResponse

// optional uint32 servertime = 1;
inline bool CMsgGCCStrike15_v2_GiftsLeaderboardResponse::_internal_has_servertime() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_GiftsLeaderboardResponse::has_servertime() const {
  return _internal_has_servertime();
}
inline void CMsgGCCStrike15_v2_GiftsLeaderboardResponse::clear_servertime() {
  servertime_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_GiftsLeaderboardResponse::_internal_servertime() const {
  return servertime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_GiftsLeaderboardResponse::servertime() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_GiftsLeaderboardResponse.servertime)
  return _internal_servertime();
}
inline void CMsgGCCStrike15_v2_GiftsLeaderboardResponse::_internal_set_servertime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  servertime_ = value;
}
inline void CMsgGCCStrike15_v2_GiftsLeaderboardResponse::set_servertime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_servertime(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_GiftsLeaderboardResponse.servertime)
}

// optional uint32 time_period_seconds = 2;
inline bool CMsgGCCStrike15_v2_GiftsLeaderboardResponse::_internal_has_time_period_seconds() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_GiftsLeaderboardResponse::has_time_period_seconds() const {
  return _internal_has_time_period_seconds();
}
inline void CMsgGCCStrike15_v2_GiftsLeaderboardResponse::clear_time_period_seconds() {
  time_period_seconds_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_GiftsLeaderboardResponse::_internal_time_period_seconds() const {
  return time_period_seconds_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_GiftsLeaderboardResponse::time_period_seconds() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_GiftsLeaderboardResponse.time_period_seconds)
  return _internal_time_period_seconds();
}
inline void CMsgGCCStrike15_v2_GiftsLeaderboardResponse::_internal_set_time_period_seconds(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  time_period_seconds_ = value;
}
inline void CMsgGCCStrike15_v2_GiftsLeaderboardResponse::set_time_period_seconds(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_time_period_seconds(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_GiftsLeaderboardResponse.time_period_seconds)
}

// optional uint32 total_gifts_given = 3;
inline bool CMsgGCCStrike15_v2_GiftsLeaderboardResponse::_internal_has_total_gifts_given() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_GiftsLeaderboardResponse::has_total_gifts_given() const {
  return _internal_has_total_gifts_given();
}
inline void CMsgGCCStrike15_v2_GiftsLeaderboardResponse::clear_total_gifts_given() {
  total_gifts_given_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_GiftsLeaderboardResponse::_internal_total_gifts_given() const {
  return total_gifts_given_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_GiftsLeaderboardResponse::total_gifts_given() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_GiftsLeaderboardResponse.total_gifts_given)
  return _internal_total_gifts_given();
}
inline void CMsgGCCStrike15_v2_GiftsLeaderboardResponse::_internal_set_total_gifts_given(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  total_gifts_given_ = value;
}
inline void CMsgGCCStrike15_v2_GiftsLeaderboardResponse::set_total_gifts_given(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_total_gifts_given(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_GiftsLeaderboardResponse.total_gifts_given)
}

// optional uint32 total_givers = 4;
inline bool CMsgGCCStrike15_v2_GiftsLeaderboardResponse::_internal_has_total_givers() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_GiftsLeaderboardResponse::has_total_givers() const {
  return _internal_has_total_givers();
}
inline void CMsgGCCStrike15_v2_GiftsLeaderboardResponse::clear_total_givers() {
  total_givers_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_GiftsLeaderboardResponse::_internal_total_givers() const {
  return total_givers_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_GiftsLeaderboardResponse::total_givers() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_GiftsLeaderboardResponse.total_givers)
  return _internal_total_givers();
}
inline void CMsgGCCStrike15_v2_GiftsLeaderboardResponse::_internal_set_total_givers(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  total_givers_ = value;
}
inline void CMsgGCCStrike15_v2_GiftsLeaderboardResponse::set_total_givers(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_total_givers(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_GiftsLeaderboardResponse.total_givers)
}

// repeated .CMsgGCCStrike15_v2_GiftsLeaderboardResponse.GiftLeaderboardEntry entries = 5;
inline int CMsgGCCStrike15_v2_GiftsLeaderboardResponse::_internal_entries_size() const {
  return entries_.size();
}
inline int CMsgGCCStrike15_v2_GiftsLeaderboardResponse::entries_size() const {
  return _internal_entries_size();
}
inline void CMsgGCCStrike15_v2_GiftsLeaderboardResponse::clear_entries() {
  entries_.Clear();
}
inline ::CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry* CMsgGCCStrike15_v2_GiftsLeaderboardResponse::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgGCCStrike15_v2_GiftsLeaderboardResponse.entries)
  return entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry >*
CMsgGCCStrike15_v2_GiftsLeaderboardResponse::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCCStrike15_v2_GiftsLeaderboardResponse.entries)
  return &entries_;
}
inline const ::CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry& CMsgGCCStrike15_v2_GiftsLeaderboardResponse::_internal_entries(int index) const {
  return entries_.Get(index);
}
inline const ::CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry& CMsgGCCStrike15_v2_GiftsLeaderboardResponse::entries(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_GiftsLeaderboardResponse.entries)
  return _internal_entries(index);
}
inline ::CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry* CMsgGCCStrike15_v2_GiftsLeaderboardResponse::_internal_add_entries() {
  return entries_.Add();
}
inline ::CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry* CMsgGCCStrike15_v2_GiftsLeaderboardResponse::add_entries() {
  ::CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry* _add = _internal_add_entries();
  // @@protoc_insertion_point(field_add:CMsgGCCStrike15_v2_GiftsLeaderboardResponse.entries)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry >&
CMsgGCCStrike15_v2_GiftsLeaderboardResponse::entries() const {
  // @@protoc_insertion_point(field_list:CMsgGCCStrike15_v2_GiftsLeaderboardResponse.entries)
  return entries_;
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_ClientSubmitSurveyVote

// optional uint32 survey_id = 1;
inline bool CMsgGCCStrike15_v2_ClientSubmitSurveyVote::_internal_has_survey_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_ClientSubmitSurveyVote::has_survey_id() const {
  return _internal_has_survey_id();
}
inline void CMsgGCCStrike15_v2_ClientSubmitSurveyVote::clear_survey_id() {
  survey_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_ClientSubmitSurveyVote::_internal_survey_id() const {
  return survey_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_ClientSubmitSurveyVote::survey_id() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_ClientSubmitSurveyVote.survey_id)
  return _internal_survey_id();
}
inline void CMsgGCCStrike15_v2_ClientSubmitSurveyVote::_internal_set_survey_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  survey_id_ = value;
}
inline void CMsgGCCStrike15_v2_ClientSubmitSurveyVote::set_survey_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_survey_id(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_ClientSubmitSurveyVote.survey_id)
}

// optional uint32 vote = 2;
inline bool CMsgGCCStrike15_v2_ClientSubmitSurveyVote::_internal_has_vote() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_ClientSubmitSurveyVote::has_vote() const {
  return _internal_has_vote();
}
inline void CMsgGCCStrike15_v2_ClientSubmitSurveyVote::clear_vote() {
  vote_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_ClientSubmitSurveyVote::_internal_vote() const {
  return vote_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_ClientSubmitSurveyVote::vote() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_ClientSubmitSurveyVote.vote)
  return _internal_vote();
}
inline void CMsgGCCStrike15_v2_ClientSubmitSurveyVote::_internal_set_vote(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  vote_ = value;
}
inline void CMsgGCCStrike15_v2_ClientSubmitSurveyVote::set_vote(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_vote(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_ClientSubmitSurveyVote.vote)
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_Server2GCClientValidate

// optional uint32 accountid = 1;
inline bool CMsgGCCStrike15_v2_Server2GCClientValidate::_internal_has_accountid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_Server2GCClientValidate::has_accountid() const {
  return _internal_has_accountid();
}
inline void CMsgGCCStrike15_v2_Server2GCClientValidate::clear_accountid() {
  accountid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_Server2GCClientValidate::_internal_accountid() const {
  return accountid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_Server2GCClientValidate::accountid() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_Server2GCClientValidate.accountid)
  return _internal_accountid();
}
inline void CMsgGCCStrike15_v2_Server2GCClientValidate::_internal_set_accountid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  accountid_ = value;
}
inline void CMsgGCCStrike15_v2_Server2GCClientValidate::set_accountid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_accountid(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_Server2GCClientValidate.accountid)
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure

// optional uint32 accountid = 1;
inline bool CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::_internal_has_accountid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::has_accountid() const {
  return _internal_has_accountid();
}
inline void CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::clear_accountid() {
  accountid_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::_internal_accountid() const {
  return accountid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::accountid() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure.accountid)
  return _internal_accountid();
}
inline void CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::_internal_set_accountid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  accountid_ = value;
}
inline void CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::set_accountid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_accountid(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure.accountid)
}

// optional string path = 2;
inline bool CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::_internal_has_path() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::has_path() const {
  return _internal_has_path();
}
inline void CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::clear_path() {
  path_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::path() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure.path)
  return _internal_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::set_path(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure.path)
}
inline std::string* CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure.path)
  return _s;
}
inline const std::string& CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::_internal_path() const {
  return path_.Get();
}
inline void CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::_internal_set_path(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::_internal_mutable_path() {
  _has_bits_[0] |= 0x00000001u;
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::release_path() {
  // @@protoc_insertion_point(field_release:CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure.path)
  if (!_internal_has_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return path_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure.path)
}

// optional string file = 3;
inline bool CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::_internal_has_file() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::has_file() const {
  return _internal_has_file();
}
inline void CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::clear_file() {
  file_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::file() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure.file)
  return _internal_file();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::set_file(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure.file)
}
inline std::string* CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::mutable_file() {
  std::string* _s = _internal_mutable_file();
  // @@protoc_insertion_point(field_mutable:CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure.file)
  return _s;
}
inline const std::string& CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::_internal_file() const {
  return file_.Get();
}
inline void CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::_internal_set_file(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::_internal_mutable_file() {
  _has_bits_[0] |= 0x00000002u;
  return file_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::release_file() {
  // @@protoc_insertion_point(field_release:CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure.file)
  if (!_internal_has_file()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return file_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::set_allocated_file(std::string* file) {
  if (file != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  file_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure.file)
}

// optional uint32 crc = 4;
inline bool CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::_internal_has_crc() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::has_crc() const {
  return _internal_has_crc();
}
inline void CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::clear_crc() {
  crc_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::_internal_crc() const {
  return crc_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::crc() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure.crc)
  return _internal_crc();
}
inline void CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::_internal_set_crc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  crc_ = value;
}
inline void CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::set_crc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_crc(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure.crc)
}

// optional int32 hash = 5;
inline bool CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::_internal_has_hash() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::has_hash() const {
  return _internal_has_hash();
}
inline void CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::clear_hash() {
  hash_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::_internal_hash() const {
  return hash_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::hash() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure.hash)
  return _internal_hash();
}
inline void CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::_internal_set_hash(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  hash_ = value;
}
inline void CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::set_hash(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_hash(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure.hash)
}

// optional int32 len = 6;
inline bool CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::_internal_has_len() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::has_len() const {
  return _internal_has_len();
}
inline void CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::clear_len() {
  len_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::_internal_len() const {
  return len_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::len() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure.len)
  return _internal_len();
}
inline void CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::_internal_set_len(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  len_ = value;
}
inline void CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::set_len(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_len(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure.len)
}

// optional int32 pack_number = 7;
inline bool CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::_internal_has_pack_number() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::has_pack_number() const {
  return _internal_has_pack_number();
}
inline void CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::clear_pack_number() {
  pack_number_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::_internal_pack_number() const {
  return pack_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::pack_number() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure.pack_number)
  return _internal_pack_number();
}
inline void CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::_internal_set_pack_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  pack_number_ = value;
}
inline void CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::set_pack_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pack_number(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure.pack_number)
}

// optional int32 pack_file_id = 8;
inline bool CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::_internal_has_pack_file_id() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::has_pack_file_id() const {
  return _internal_has_pack_file_id();
}
inline void CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::clear_pack_file_id() {
  pack_file_id_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::_internal_pack_file_id() const {
  return pack_file_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::pack_file_id() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure.pack_file_id)
  return _internal_pack_file_id();
}
inline void CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::_internal_set_pack_file_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  pack_file_id_ = value;
}
inline void CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure::set_pack_file_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pack_file_id(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure.pack_file_id)
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_GC2ClientTournamentInfo

// optional uint32 eventid = 1;
inline bool CMsgGCCStrike15_v2_GC2ClientTournamentInfo::_internal_has_eventid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_GC2ClientTournamentInfo::has_eventid() const {
  return _internal_has_eventid();
}
inline void CMsgGCCStrike15_v2_GC2ClientTournamentInfo::clear_eventid() {
  eventid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_GC2ClientTournamentInfo::_internal_eventid() const {
  return eventid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_GC2ClientTournamentInfo::eventid() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_GC2ClientTournamentInfo.eventid)
  return _internal_eventid();
}
inline void CMsgGCCStrike15_v2_GC2ClientTournamentInfo::_internal_set_eventid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  eventid_ = value;
}
inline void CMsgGCCStrike15_v2_GC2ClientTournamentInfo::set_eventid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_eventid(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_GC2ClientTournamentInfo.eventid)
}

// optional uint32 stageid = 2;
inline bool CMsgGCCStrike15_v2_GC2ClientTournamentInfo::_internal_has_stageid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_GC2ClientTournamentInfo::has_stageid() const {
  return _internal_has_stageid();
}
inline void CMsgGCCStrike15_v2_GC2ClientTournamentInfo::clear_stageid() {
  stageid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_GC2ClientTournamentInfo::_internal_stageid() const {
  return stageid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_GC2ClientTournamentInfo::stageid() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_GC2ClientTournamentInfo.stageid)
  return _internal_stageid();
}
inline void CMsgGCCStrike15_v2_GC2ClientTournamentInfo::_internal_set_stageid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  stageid_ = value;
}
inline void CMsgGCCStrike15_v2_GC2ClientTournamentInfo::set_stageid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_stageid(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_GC2ClientTournamentInfo.stageid)
}

// optional uint32 game_type = 3;
inline bool CMsgGCCStrike15_v2_GC2ClientTournamentInfo::_internal_has_game_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_GC2ClientTournamentInfo::has_game_type() const {
  return _internal_has_game_type();
}
inline void CMsgGCCStrike15_v2_GC2ClientTournamentInfo::clear_game_type() {
  game_type_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_GC2ClientTournamentInfo::_internal_game_type() const {
  return game_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_GC2ClientTournamentInfo::game_type() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_GC2ClientTournamentInfo.game_type)
  return _internal_game_type();
}
inline void CMsgGCCStrike15_v2_GC2ClientTournamentInfo::_internal_set_game_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  game_type_ = value;
}
inline void CMsgGCCStrike15_v2_GC2ClientTournamentInfo::set_game_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_game_type(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_GC2ClientTournamentInfo.game_type)
}

// repeated uint32 teamids = 4;
inline int CMsgGCCStrike15_v2_GC2ClientTournamentInfo::_internal_teamids_size() const {
  return teamids_.size();
}
inline int CMsgGCCStrike15_v2_GC2ClientTournamentInfo::teamids_size() const {
  return _internal_teamids_size();
}
inline void CMsgGCCStrike15_v2_GC2ClientTournamentInfo::clear_teamids() {
  teamids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_GC2ClientTournamentInfo::_internal_teamids(int index) const {
  return teamids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_GC2ClientTournamentInfo::teamids(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_GC2ClientTournamentInfo.teamids)
  return _internal_teamids(index);
}
inline void CMsgGCCStrike15_v2_GC2ClientTournamentInfo::set_teamids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  teamids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_GC2ClientTournamentInfo.teamids)
}
inline void CMsgGCCStrike15_v2_GC2ClientTournamentInfo::_internal_add_teamids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  teamids_.Add(value);
}
inline void CMsgGCCStrike15_v2_GC2ClientTournamentInfo::add_teamids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_teamids(value);
  // @@protoc_insertion_point(field_add:CMsgGCCStrike15_v2_GC2ClientTournamentInfo.teamids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CMsgGCCStrike15_v2_GC2ClientTournamentInfo::_internal_teamids() const {
  return teamids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CMsgGCCStrike15_v2_GC2ClientTournamentInfo::teamids() const {
  // @@protoc_insertion_point(field_list:CMsgGCCStrike15_v2_GC2ClientTournamentInfo.teamids)
  return _internal_teamids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CMsgGCCStrike15_v2_GC2ClientTournamentInfo::_internal_mutable_teamids() {
  return &teamids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CMsgGCCStrike15_v2_GC2ClientTournamentInfo::mutable_teamids() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCCStrike15_v2_GC2ClientTournamentInfo.teamids)
  return _internal_mutable_teamids();
}

// -------------------------------------------------------------------

// CSOEconCoupon

// optional uint32 entryid = 1 [(.key_field) = true];
inline bool CSOEconCoupon::_internal_has_entryid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSOEconCoupon::has_entryid() const {
  return _internal_has_entryid();
}
inline void CSOEconCoupon::clear_entryid() {
  entryid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOEconCoupon::_internal_entryid() const {
  return entryid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOEconCoupon::entryid() const {
  // @@protoc_insertion_point(field_get:CSOEconCoupon.entryid)
  return _internal_entryid();
}
inline void CSOEconCoupon::_internal_set_entryid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  entryid_ = value;
}
inline void CSOEconCoupon::set_entryid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_entryid(value);
  // @@protoc_insertion_point(field_set:CSOEconCoupon.entryid)
}

// optional uint32 defidx = 2;
inline bool CSOEconCoupon::_internal_has_defidx() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSOEconCoupon::has_defidx() const {
  return _internal_has_defidx();
}
inline void CSOEconCoupon::clear_defidx() {
  defidx_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOEconCoupon::_internal_defidx() const {
  return defidx_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOEconCoupon::defidx() const {
  // @@protoc_insertion_point(field_get:CSOEconCoupon.defidx)
  return _internal_defidx();
}
inline void CSOEconCoupon::_internal_set_defidx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  defidx_ = value;
}
inline void CSOEconCoupon::set_defidx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_defidx(value);
  // @@protoc_insertion_point(field_set:CSOEconCoupon.defidx)
}

// optional fixed32 expiration_date = 3;
inline bool CSOEconCoupon::_internal_has_expiration_date() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CSOEconCoupon::has_expiration_date() const {
  return _internal_has_expiration_date();
}
inline void CSOEconCoupon::clear_expiration_date() {
  expiration_date_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOEconCoupon::_internal_expiration_date() const {
  return expiration_date_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOEconCoupon::expiration_date() const {
  // @@protoc_insertion_point(field_get:CSOEconCoupon.expiration_date)
  return _internal_expiration_date();
}
inline void CSOEconCoupon::_internal_set_expiration_date(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  expiration_date_ = value;
}
inline void CSOEconCoupon::set_expiration_date(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_expiration_date(value);
  // @@protoc_insertion_point(field_set:CSOEconCoupon.expiration_date)
}

// -------------------------------------------------------------------

// CSOQuestProgress

// optional uint32 questid = 1 [(.key_field) = true];
inline bool CSOQuestProgress::_internal_has_questid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSOQuestProgress::has_questid() const {
  return _internal_has_questid();
}
inline void CSOQuestProgress::clear_questid() {
  questid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOQuestProgress::_internal_questid() const {
  return questid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOQuestProgress::questid() const {
  // @@protoc_insertion_point(field_get:CSOQuestProgress.questid)
  return _internal_questid();
}
inline void CSOQuestProgress::_internal_set_questid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  questid_ = value;
}
inline void CSOQuestProgress::set_questid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_questid(value);
  // @@protoc_insertion_point(field_set:CSOQuestProgress.questid)
}

// optional uint32 points_remaining = 2;
inline bool CSOQuestProgress::_internal_has_points_remaining() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSOQuestProgress::has_points_remaining() const {
  return _internal_has_points_remaining();
}
inline void CSOQuestProgress::clear_points_remaining() {
  points_remaining_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOQuestProgress::_internal_points_remaining() const {
  return points_remaining_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOQuestProgress::points_remaining() const {
  // @@protoc_insertion_point(field_get:CSOQuestProgress.points_remaining)
  return _internal_points_remaining();
}
inline void CSOQuestProgress::_internal_set_points_remaining(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  points_remaining_ = value;
}
inline void CSOQuestProgress::set_points_remaining(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_points_remaining(value);
  // @@protoc_insertion_point(field_set:CSOQuestProgress.points_remaining)
}

// optional uint32 bonus_points = 3;
inline bool CSOQuestProgress::_internal_has_bonus_points() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CSOQuestProgress::has_bonus_points() const {
  return _internal_has_bonus_points();
}
inline void CSOQuestProgress::clear_bonus_points() {
  bonus_points_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOQuestProgress::_internal_bonus_points() const {
  return bonus_points_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSOQuestProgress::bonus_points() const {
  // @@protoc_insertion_point(field_get:CSOQuestProgress.bonus_points)
  return _internal_bonus_points();
}
inline void CSOQuestProgress::_internal_set_bonus_points(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  bonus_points_ = value;
}
inline void CSOQuestProgress::set_bonus_points(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_bonus_points(value);
  // @@protoc_insertion_point(field_set:CSOQuestProgress.bonus_points)
}

// -------------------------------------------------------------------

// CSOPersonaDataPublic

// optional int32 player_level = 1;
inline bool CSOPersonaDataPublic::_internal_has_player_level() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSOPersonaDataPublic::has_player_level() const {
  return _internal_has_player_level();
}
inline void CSOPersonaDataPublic::clear_player_level() {
  player_level_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSOPersonaDataPublic::_internal_player_level() const {
  return player_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSOPersonaDataPublic::player_level() const {
  // @@protoc_insertion_point(field_get:CSOPersonaDataPublic.player_level)
  return _internal_player_level();
}
inline void CSOPersonaDataPublic::_internal_set_player_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  player_level_ = value;
}
inline void CSOPersonaDataPublic::set_player_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_player_level(value);
  // @@protoc_insertion_point(field_set:CSOPersonaDataPublic.player_level)
}

// optional .PlayerCommendationInfo commendation = 2;
inline bool CSOPersonaDataPublic::_internal_has_commendation() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || commendation_ != nullptr);
  return value;
}
inline bool CSOPersonaDataPublic::has_commendation() const {
  return _internal_has_commendation();
}
inline void CSOPersonaDataPublic::clear_commendation() {
  if (commendation_ != nullptr) commendation_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::PlayerCommendationInfo& CSOPersonaDataPublic::_internal_commendation() const {
  const ::PlayerCommendationInfo* p = commendation_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlayerCommendationInfo&>(
      ::_PlayerCommendationInfo_default_instance_);
}
inline const ::PlayerCommendationInfo& CSOPersonaDataPublic::commendation() const {
  // @@protoc_insertion_point(field_get:CSOPersonaDataPublic.commendation)
  return _internal_commendation();
}
inline void CSOPersonaDataPublic::unsafe_arena_set_allocated_commendation(
    ::PlayerCommendationInfo* commendation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(commendation_);
  }
  commendation_ = commendation;
  if (commendation) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CSOPersonaDataPublic.commendation)
}
inline ::PlayerCommendationInfo* CSOPersonaDataPublic::release_commendation() {
  _has_bits_[0] &= ~0x00000001u;
  ::PlayerCommendationInfo* temp = commendation_;
  commendation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PlayerCommendationInfo* CSOPersonaDataPublic::unsafe_arena_release_commendation() {
  // @@protoc_insertion_point(field_release:CSOPersonaDataPublic.commendation)
  _has_bits_[0] &= ~0x00000001u;
  ::PlayerCommendationInfo* temp = commendation_;
  commendation_ = nullptr;
  return temp;
}
inline ::PlayerCommendationInfo* CSOPersonaDataPublic::_internal_mutable_commendation() {
  _has_bits_[0] |= 0x00000001u;
  if (commendation_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlayerCommendationInfo>(GetArenaForAllocation());
    commendation_ = p;
  }
  return commendation_;
}
inline ::PlayerCommendationInfo* CSOPersonaDataPublic::mutable_commendation() {
  ::PlayerCommendationInfo* _msg = _internal_mutable_commendation();
  // @@protoc_insertion_point(field_mutable:CSOPersonaDataPublic.commendation)
  return _msg;
}
inline void CSOPersonaDataPublic::set_allocated_commendation(::PlayerCommendationInfo* commendation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete commendation_;
  }
  if (commendation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::PlayerCommendationInfo>::GetOwningArena(commendation);
    if (message_arena != submessage_arena) {
      commendation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, commendation, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  commendation_ = commendation;
  // @@protoc_insertion_point(field_set_allocated:CSOPersonaDataPublic.commendation)
}

// optional bool elevated_state = 3;
inline bool CSOPersonaDataPublic::_internal_has_elevated_state() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CSOPersonaDataPublic::has_elevated_state() const {
  return _internal_has_elevated_state();
}
inline void CSOPersonaDataPublic::clear_elevated_state() {
  elevated_state_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CSOPersonaDataPublic::_internal_elevated_state() const {
  return elevated_state_;
}
inline bool CSOPersonaDataPublic::elevated_state() const {
  // @@protoc_insertion_point(field_get:CSOPersonaDataPublic.elevated_state)
  return _internal_elevated_state();
}
inline void CSOPersonaDataPublic::_internal_set_elevated_state(bool value) {
  _has_bits_[0] |= 0x00000004u;
  elevated_state_ = value;
}
inline void CSOPersonaDataPublic::set_elevated_state(bool value) {
  _internal_set_elevated_state(value);
  // @@protoc_insertion_point(field_set:CSOPersonaDataPublic.elevated_state)
}

// -------------------------------------------------------------------

// CMsgGC_GlobalGame_Subscribe

// optional uint64 ticket = 1;
inline bool CMsgGC_GlobalGame_Subscribe::_internal_has_ticket() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGC_GlobalGame_Subscribe::has_ticket() const {
  return _internal_has_ticket();
}
inline void CMsgGC_GlobalGame_Subscribe::clear_ticket() {
  ticket_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGC_GlobalGame_Subscribe::_internal_ticket() const {
  return ticket_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGC_GlobalGame_Subscribe::ticket() const {
  // @@protoc_insertion_point(field_get:CMsgGC_GlobalGame_Subscribe.ticket)
  return _internal_ticket();
}
inline void CMsgGC_GlobalGame_Subscribe::_internal_set_ticket(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  ticket_ = value;
}
inline void CMsgGC_GlobalGame_Subscribe::set_ticket(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_ticket(value);
  // @@protoc_insertion_point(field_set:CMsgGC_GlobalGame_Subscribe.ticket)
}

// -------------------------------------------------------------------

// CMsgGC_GlobalGame_Unsubscribe

// optional int32 timeleft = 1;
inline bool CMsgGC_GlobalGame_Unsubscribe::_internal_has_timeleft() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGC_GlobalGame_Unsubscribe::has_timeleft() const {
  return _internal_has_timeleft();
}
inline void CMsgGC_GlobalGame_Unsubscribe::clear_timeleft() {
  timeleft_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgGC_GlobalGame_Unsubscribe::_internal_timeleft() const {
  return timeleft_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgGC_GlobalGame_Unsubscribe::timeleft() const {
  // @@protoc_insertion_point(field_get:CMsgGC_GlobalGame_Unsubscribe.timeleft)
  return _internal_timeleft();
}
inline void CMsgGC_GlobalGame_Unsubscribe::_internal_set_timeleft(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  timeleft_ = value;
}
inline void CMsgGC_GlobalGame_Unsubscribe::set_timeleft(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_timeleft(value);
  // @@protoc_insertion_point(field_set:CMsgGC_GlobalGame_Unsubscribe.timeleft)
}

// -------------------------------------------------------------------

// CMsgGC_GlobalGame_Play

// optional uint64 ticket = 1;
inline bool CMsgGC_GlobalGame_Play::_internal_has_ticket() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGC_GlobalGame_Play::has_ticket() const {
  return _internal_has_ticket();
}
inline void CMsgGC_GlobalGame_Play::clear_ticket() {
  ticket_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGC_GlobalGame_Play::_internal_ticket() const {
  return ticket_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGC_GlobalGame_Play::ticket() const {
  // @@protoc_insertion_point(field_get:CMsgGC_GlobalGame_Play.ticket)
  return _internal_ticket();
}
inline void CMsgGC_GlobalGame_Play::_internal_set_ticket(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  ticket_ = value;
}
inline void CMsgGC_GlobalGame_Play::set_ticket(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_ticket(value);
  // @@protoc_insertion_point(field_set:CMsgGC_GlobalGame_Play.ticket)
}

// optional uint32 gametimems = 2;
inline bool CMsgGC_GlobalGame_Play::_internal_has_gametimems() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGC_GlobalGame_Play::has_gametimems() const {
  return _internal_has_gametimems();
}
inline void CMsgGC_GlobalGame_Play::clear_gametimems() {
  gametimems_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGC_GlobalGame_Play::_internal_gametimems() const {
  return gametimems_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGC_GlobalGame_Play::gametimems() const {
  // @@protoc_insertion_point(field_get:CMsgGC_GlobalGame_Play.gametimems)
  return _internal_gametimems();
}
inline void CMsgGC_GlobalGame_Play::_internal_set_gametimems(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  gametimems_ = value;
}
inline void CMsgGC_GlobalGame_Play::set_gametimems(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_gametimems(value);
  // @@protoc_insertion_point(field_set:CMsgGC_GlobalGame_Play.gametimems)
}

// optional uint32 msperpoint = 3;
inline bool CMsgGC_GlobalGame_Play::_internal_has_msperpoint() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgGC_GlobalGame_Play::has_msperpoint() const {
  return _internal_has_msperpoint();
}
inline void CMsgGC_GlobalGame_Play::clear_msperpoint() {
  msperpoint_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGC_GlobalGame_Play::_internal_msperpoint() const {
  return msperpoint_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGC_GlobalGame_Play::msperpoint() const {
  // @@protoc_insertion_point(field_get:CMsgGC_GlobalGame_Play.msperpoint)
  return _internal_msperpoint();
}
inline void CMsgGC_GlobalGame_Play::_internal_set_msperpoint(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  msperpoint_ = value;
}
inline void CMsgGC_GlobalGame_Play::set_msperpoint(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_msperpoint(value);
  // @@protoc_insertion_point(field_set:CMsgGC_GlobalGame_Play.msperpoint)
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_AcknowledgePenalty

// optional int32 acknowledged = 1;
inline bool CMsgGCCStrike15_v2_AcknowledgePenalty::_internal_has_acknowledged() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_AcknowledgePenalty::has_acknowledged() const {
  return _internal_has_acknowledged();
}
inline void CMsgGCCStrike15_v2_AcknowledgePenalty::clear_acknowledged() {
  acknowledged_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgGCCStrike15_v2_AcknowledgePenalty::_internal_acknowledged() const {
  return acknowledged_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgGCCStrike15_v2_AcknowledgePenalty::acknowledged() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_AcknowledgePenalty.acknowledged)
  return _internal_acknowledged();
}
inline void CMsgGCCStrike15_v2_AcknowledgePenalty::_internal_set_acknowledged(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  acknowledged_ = value;
}
inline void CMsgGCCStrike15_v2_AcknowledgePenalty::set_acknowledged(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_acknowledged(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_AcknowledgePenalty.acknowledged)
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_Client2GCStreamUnlock

// optional uint64 ticket = 1;
inline bool CMsgGCCStrike15_v2_Client2GCStreamUnlock::_internal_has_ticket() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_Client2GCStreamUnlock::has_ticket() const {
  return _internal_has_ticket();
}
inline void CMsgGCCStrike15_v2_Client2GCStreamUnlock::clear_ticket() {
  ticket_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCCStrike15_v2_Client2GCStreamUnlock::_internal_ticket() const {
  return ticket_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCCStrike15_v2_Client2GCStreamUnlock::ticket() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_Client2GCStreamUnlock.ticket)
  return _internal_ticket();
}
inline void CMsgGCCStrike15_v2_Client2GCStreamUnlock::_internal_set_ticket(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  ticket_ = value;
}
inline void CMsgGCCStrike15_v2_Client2GCStreamUnlock::set_ticket(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_ticket(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_Client2GCStreamUnlock.ticket)
}

// optional int32 os = 2;
inline bool CMsgGCCStrike15_v2_Client2GCStreamUnlock::_internal_has_os() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_Client2GCStreamUnlock::has_os() const {
  return _internal_has_os();
}
inline void CMsgGCCStrike15_v2_Client2GCStreamUnlock::clear_os() {
  os_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgGCCStrike15_v2_Client2GCStreamUnlock::_internal_os() const {
  return os_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgGCCStrike15_v2_Client2GCStreamUnlock::os() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_Client2GCStreamUnlock.os)
  return _internal_os();
}
inline void CMsgGCCStrike15_v2_Client2GCStreamUnlock::_internal_set_os(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  os_ = value;
}
inline void CMsgGCCStrike15_v2_Client2GCStreamUnlock::set_os(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_os(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_Client2GCStreamUnlock.os)
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_ClientToGCRequestElevate

// optional uint32 stage = 1;
inline bool CMsgGCCStrike15_v2_ClientToGCRequestElevate::_internal_has_stage() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_ClientToGCRequestElevate::has_stage() const {
  return _internal_has_stage();
}
inline void CMsgGCCStrike15_v2_ClientToGCRequestElevate::clear_stage() {
  stage_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_ClientToGCRequestElevate::_internal_stage() const {
  return stage_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_ClientToGCRequestElevate::stage() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_ClientToGCRequestElevate.stage)
  return _internal_stage();
}
inline void CMsgGCCStrike15_v2_ClientToGCRequestElevate::_internal_set_stage(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  stage_ = value;
}
inline void CMsgGCCStrike15_v2_ClientToGCRequestElevate::set_stage(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_stage(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_ClientToGCRequestElevate.stage)
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_ClientToGCChat

// optional uint64 match_id = 1;
inline bool CMsgGCCStrike15_v2_ClientToGCChat::_internal_has_match_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_ClientToGCChat::has_match_id() const {
  return _internal_has_match_id();
}
inline void CMsgGCCStrike15_v2_ClientToGCChat::clear_match_id() {
  match_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCCStrike15_v2_ClientToGCChat::_internal_match_id() const {
  return match_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCCStrike15_v2_ClientToGCChat::match_id() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_ClientToGCChat.match_id)
  return _internal_match_id();
}
inline void CMsgGCCStrike15_v2_ClientToGCChat::_internal_set_match_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  match_id_ = value;
}
inline void CMsgGCCStrike15_v2_ClientToGCChat::set_match_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_match_id(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_ClientToGCChat.match_id)
}

// optional string text = 2;
inline bool CMsgGCCStrike15_v2_ClientToGCChat::_internal_has_text() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_ClientToGCChat::has_text() const {
  return _internal_has_text();
}
inline void CMsgGCCStrike15_v2_ClientToGCChat::clear_text() {
  text_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgGCCStrike15_v2_ClientToGCChat::text() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_ClientToGCChat.text)
  return _internal_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgGCCStrike15_v2_ClientToGCChat::set_text(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_ClientToGCChat.text)
}
inline std::string* CMsgGCCStrike15_v2_ClientToGCChat::mutable_text() {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:CMsgGCCStrike15_v2_ClientToGCChat.text)
  return _s;
}
inline const std::string& CMsgGCCStrike15_v2_ClientToGCChat::_internal_text() const {
  return text_.Get();
}
inline void CMsgGCCStrike15_v2_ClientToGCChat::_internal_set_text(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgGCCStrike15_v2_ClientToGCChat::_internal_mutable_text() {
  _has_bits_[0] |= 0x00000001u;
  return text_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgGCCStrike15_v2_ClientToGCChat::release_text() {
  // @@protoc_insertion_point(field_release:CMsgGCCStrike15_v2_ClientToGCChat.text)
  if (!_internal_has_text()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return text_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CMsgGCCStrike15_v2_ClientToGCChat::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CMsgGCCStrike15_v2_ClientToGCChat.text)
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_GCToClientChat

// optional uint32 account_id = 1;
inline bool CMsgGCCStrike15_v2_GCToClientChat::_internal_has_account_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_GCToClientChat::has_account_id() const {
  return _internal_has_account_id();
}
inline void CMsgGCCStrike15_v2_GCToClientChat::clear_account_id() {
  account_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_GCToClientChat::_internal_account_id() const {
  return account_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_GCToClientChat::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_GCToClientChat.account_id)
  return _internal_account_id();
}
inline void CMsgGCCStrike15_v2_GCToClientChat::_internal_set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  account_id_ = value;
}
inline void CMsgGCCStrike15_v2_GCToClientChat::set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_GCToClientChat.account_id)
}

// optional string text = 2;
inline bool CMsgGCCStrike15_v2_GCToClientChat::_internal_has_text() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_GCToClientChat::has_text() const {
  return _internal_has_text();
}
inline void CMsgGCCStrike15_v2_GCToClientChat::clear_text() {
  text_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgGCCStrike15_v2_GCToClientChat::text() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_GCToClientChat.text)
  return _internal_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgGCCStrike15_v2_GCToClientChat::set_text(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_GCToClientChat.text)
}
inline std::string* CMsgGCCStrike15_v2_GCToClientChat::mutable_text() {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:CMsgGCCStrike15_v2_GCToClientChat.text)
  return _s;
}
inline const std::string& CMsgGCCStrike15_v2_GCToClientChat::_internal_text() const {
  return text_.Get();
}
inline void CMsgGCCStrike15_v2_GCToClientChat::_internal_set_text(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgGCCStrike15_v2_GCToClientChat::_internal_mutable_text() {
  _has_bits_[0] |= 0x00000001u;
  return text_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgGCCStrike15_v2_GCToClientChat::release_text() {
  // @@protoc_insertion_point(field_release:CMsgGCCStrike15_v2_GCToClientChat.text)
  if (!_internal_has_text()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return text_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CMsgGCCStrike15_v2_GCToClientChat::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CMsgGCCStrike15_v2_GCToClientChat.text)
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_ClientAuthKeyCode

// optional uint32 eventid = 1;
inline bool CMsgGCCStrike15_v2_ClientAuthKeyCode::_internal_has_eventid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_ClientAuthKeyCode::has_eventid() const {
  return _internal_has_eventid();
}
inline void CMsgGCCStrike15_v2_ClientAuthKeyCode::clear_eventid() {
  eventid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_ClientAuthKeyCode::_internal_eventid() const {
  return eventid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_ClientAuthKeyCode::eventid() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_ClientAuthKeyCode.eventid)
  return _internal_eventid();
}
inline void CMsgGCCStrike15_v2_ClientAuthKeyCode::_internal_set_eventid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  eventid_ = value;
}
inline void CMsgGCCStrike15_v2_ClientAuthKeyCode::set_eventid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_eventid(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_ClientAuthKeyCode.eventid)
}

// optional string code = 2;
inline bool CMsgGCCStrike15_v2_ClientAuthKeyCode::_internal_has_code() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_ClientAuthKeyCode::has_code() const {
  return _internal_has_code();
}
inline void CMsgGCCStrike15_v2_ClientAuthKeyCode::clear_code() {
  code_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgGCCStrike15_v2_ClientAuthKeyCode::code() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_ClientAuthKeyCode.code)
  return _internal_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgGCCStrike15_v2_ClientAuthKeyCode::set_code(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_ClientAuthKeyCode.code)
}
inline std::string* CMsgGCCStrike15_v2_ClientAuthKeyCode::mutable_code() {
  std::string* _s = _internal_mutable_code();
  // @@protoc_insertion_point(field_mutable:CMsgGCCStrike15_v2_ClientAuthKeyCode.code)
  return _s;
}
inline const std::string& CMsgGCCStrike15_v2_ClientAuthKeyCode::_internal_code() const {
  return code_.Get();
}
inline void CMsgGCCStrike15_v2_ClientAuthKeyCode::_internal_set_code(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgGCCStrike15_v2_ClientAuthKeyCode::_internal_mutable_code() {
  _has_bits_[0] |= 0x00000001u;
  return code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgGCCStrike15_v2_ClientAuthKeyCode::release_code() {
  // @@protoc_insertion_point(field_release:CMsgGCCStrike15_v2_ClientAuthKeyCode.code)
  if (!_internal_has_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return code_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CMsgGCCStrike15_v2_ClientAuthKeyCode::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), code,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CMsgGCCStrike15_v2_ClientAuthKeyCode.code)
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_GotvSyncPacket

// optional .CEngineGotvSyncPacket data = 1;
inline bool CMsgGCCStrike15_GotvSyncPacket::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || data_ != nullptr);
  return value;
}
inline bool CMsgGCCStrike15_GotvSyncPacket::has_data() const {
  return _internal_has_data();
}
inline const ::CEngineGotvSyncPacket& CMsgGCCStrike15_GotvSyncPacket::_internal_data() const {
  const ::CEngineGotvSyncPacket* p = data_;
  return p != nullptr ? *p : reinterpret_cast<const ::CEngineGotvSyncPacket&>(
      ::_CEngineGotvSyncPacket_default_instance_);
}
inline const ::CEngineGotvSyncPacket& CMsgGCCStrike15_GotvSyncPacket::data() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_GotvSyncPacket.data)
  return _internal_data();
}
inline void CMsgGCCStrike15_GotvSyncPacket::unsafe_arena_set_allocated_data(
    ::CEngineGotvSyncPacket* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgGCCStrike15_GotvSyncPacket.data)
}
inline ::CEngineGotvSyncPacket* CMsgGCCStrike15_GotvSyncPacket::release_data() {
  _has_bits_[0] &= ~0x00000001u;
  ::CEngineGotvSyncPacket* temp = data_;
  data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CEngineGotvSyncPacket* CMsgGCCStrike15_GotvSyncPacket::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:CMsgGCCStrike15_GotvSyncPacket.data)
  _has_bits_[0] &= ~0x00000001u;
  ::CEngineGotvSyncPacket* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::CEngineGotvSyncPacket* CMsgGCCStrike15_GotvSyncPacket::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000001u;
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::CEngineGotvSyncPacket>(GetArenaForAllocation());
    data_ = p;
  }
  return data_;
}
inline ::CEngineGotvSyncPacket* CMsgGCCStrike15_GotvSyncPacket::mutable_data() {
  ::CEngineGotvSyncPacket* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:CMsgGCCStrike15_GotvSyncPacket.data)
  return _msg;
}
inline void CMsgGCCStrike15_GotvSyncPacket::set_allocated_data(::CEngineGotvSyncPacket* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data));
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:CMsgGCCStrike15_GotvSyncPacket.data)
}

// -------------------------------------------------------------------

// PlayerDecalDigitalSignature

// optional bytes signature = 1;
inline bool PlayerDecalDigitalSignature::_internal_has_signature() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PlayerDecalDigitalSignature::has_signature() const {
  return _internal_has_signature();
}
inline void PlayerDecalDigitalSignature::clear_signature() {
  signature_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PlayerDecalDigitalSignature::signature() const {
  // @@protoc_insertion_point(field_get:PlayerDecalDigitalSignature.signature)
  return _internal_signature();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PlayerDecalDigitalSignature::set_signature(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 signature_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PlayerDecalDigitalSignature.signature)
}
inline std::string* PlayerDecalDigitalSignature::mutable_signature() {
  std::string* _s = _internal_mutable_signature();
  // @@protoc_insertion_point(field_mutable:PlayerDecalDigitalSignature.signature)
  return _s;
}
inline const std::string& PlayerDecalDigitalSignature::_internal_signature() const {
  return signature_.Get();
}
inline void PlayerDecalDigitalSignature::_internal_set_signature(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PlayerDecalDigitalSignature::_internal_mutable_signature() {
  _has_bits_[0] |= 0x00000001u;
  return signature_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PlayerDecalDigitalSignature::release_signature() {
  // @@protoc_insertion_point(field_release:PlayerDecalDigitalSignature.signature)
  if (!_internal_has_signature()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return signature_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PlayerDecalDigitalSignature::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  signature_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signature,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:PlayerDecalDigitalSignature.signature)
}

// optional uint32 accountid = 2;
inline bool PlayerDecalDigitalSignature::_internal_has_accountid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PlayerDecalDigitalSignature::has_accountid() const {
  return _internal_has_accountid();
}
inline void PlayerDecalDigitalSignature::clear_accountid() {
  accountid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PlayerDecalDigitalSignature::_internal_accountid() const {
  return accountid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PlayerDecalDigitalSignature::accountid() const {
  // @@protoc_insertion_point(field_get:PlayerDecalDigitalSignature.accountid)
  return _internal_accountid();
}
inline void PlayerDecalDigitalSignature::_internal_set_accountid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  accountid_ = value;
}
inline void PlayerDecalDigitalSignature::set_accountid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_accountid(value);
  // @@protoc_insertion_point(field_set:PlayerDecalDigitalSignature.accountid)
}

// optional uint32 rtime = 3;
inline bool PlayerDecalDigitalSignature::_internal_has_rtime() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PlayerDecalDigitalSignature::has_rtime() const {
  return _internal_has_rtime();
}
inline void PlayerDecalDigitalSignature::clear_rtime() {
  rtime_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PlayerDecalDigitalSignature::_internal_rtime() const {
  return rtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PlayerDecalDigitalSignature::rtime() const {
  // @@protoc_insertion_point(field_get:PlayerDecalDigitalSignature.rtime)
  return _internal_rtime();
}
inline void PlayerDecalDigitalSignature::_internal_set_rtime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  rtime_ = value;
}
inline void PlayerDecalDigitalSignature::set_rtime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rtime(value);
  // @@protoc_insertion_point(field_set:PlayerDecalDigitalSignature.rtime)
}

// repeated float endpos = 4;
inline int PlayerDecalDigitalSignature::_internal_endpos_size() const {
  return endpos_.size();
}
inline int PlayerDecalDigitalSignature::endpos_size() const {
  return _internal_endpos_size();
}
inline void PlayerDecalDigitalSignature::clear_endpos() {
  endpos_.Clear();
}
inline float PlayerDecalDigitalSignature::_internal_endpos(int index) const {
  return endpos_.Get(index);
}
inline float PlayerDecalDigitalSignature::endpos(int index) const {
  // @@protoc_insertion_point(field_get:PlayerDecalDigitalSignature.endpos)
  return _internal_endpos(index);
}
inline void PlayerDecalDigitalSignature::set_endpos(int index, float value) {
  endpos_.Set(index, value);
  // @@protoc_insertion_point(field_set:PlayerDecalDigitalSignature.endpos)
}
inline void PlayerDecalDigitalSignature::_internal_add_endpos(float value) {
  endpos_.Add(value);
}
inline void PlayerDecalDigitalSignature::add_endpos(float value) {
  _internal_add_endpos(value);
  // @@protoc_insertion_point(field_add:PlayerDecalDigitalSignature.endpos)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
PlayerDecalDigitalSignature::_internal_endpos() const {
  return endpos_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
PlayerDecalDigitalSignature::endpos() const {
  // @@protoc_insertion_point(field_list:PlayerDecalDigitalSignature.endpos)
  return _internal_endpos();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
PlayerDecalDigitalSignature::_internal_mutable_endpos() {
  return &endpos_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
PlayerDecalDigitalSignature::mutable_endpos() {
  // @@protoc_insertion_point(field_mutable_list:PlayerDecalDigitalSignature.endpos)
  return _internal_mutable_endpos();
}

// repeated float startpos = 5;
inline int PlayerDecalDigitalSignature::_internal_startpos_size() const {
  return startpos_.size();
}
inline int PlayerDecalDigitalSignature::startpos_size() const {
  return _internal_startpos_size();
}
inline void PlayerDecalDigitalSignature::clear_startpos() {
  startpos_.Clear();
}
inline float PlayerDecalDigitalSignature::_internal_startpos(int index) const {
  return startpos_.Get(index);
}
inline float PlayerDecalDigitalSignature::startpos(int index) const {
  // @@protoc_insertion_point(field_get:PlayerDecalDigitalSignature.startpos)
  return _internal_startpos(index);
}
inline void PlayerDecalDigitalSignature::set_startpos(int index, float value) {
  startpos_.Set(index, value);
  // @@protoc_insertion_point(field_set:PlayerDecalDigitalSignature.startpos)
}
inline void PlayerDecalDigitalSignature::_internal_add_startpos(float value) {
  startpos_.Add(value);
}
inline void PlayerDecalDigitalSignature::add_startpos(float value) {
  _internal_add_startpos(value);
  // @@protoc_insertion_point(field_add:PlayerDecalDigitalSignature.startpos)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
PlayerDecalDigitalSignature::_internal_startpos() const {
  return startpos_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
PlayerDecalDigitalSignature::startpos() const {
  // @@protoc_insertion_point(field_list:PlayerDecalDigitalSignature.startpos)
  return _internal_startpos();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
PlayerDecalDigitalSignature::_internal_mutable_startpos() {
  return &startpos_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
PlayerDecalDigitalSignature::mutable_startpos() {
  // @@protoc_insertion_point(field_mutable_list:PlayerDecalDigitalSignature.startpos)
  return _internal_mutable_startpos();
}

// repeated float right = 6;
inline int PlayerDecalDigitalSignature::_internal_right_size() const {
  return right_.size();
}
inline int PlayerDecalDigitalSignature::right_size() const {
  return _internal_right_size();
}
inline void PlayerDecalDigitalSignature::clear_right() {
  right_.Clear();
}
inline float PlayerDecalDigitalSignature::_internal_right(int index) const {
  return right_.Get(index);
}
inline float PlayerDecalDigitalSignature::right(int index) const {
  // @@protoc_insertion_point(field_get:PlayerDecalDigitalSignature.right)
  return _internal_right(index);
}
inline void PlayerDecalDigitalSignature::set_right(int index, float value) {
  right_.Set(index, value);
  // @@protoc_insertion_point(field_set:PlayerDecalDigitalSignature.right)
}
inline void PlayerDecalDigitalSignature::_internal_add_right(float value) {
  right_.Add(value);
}
inline void PlayerDecalDigitalSignature::add_right(float value) {
  _internal_add_right(value);
  // @@protoc_insertion_point(field_add:PlayerDecalDigitalSignature.right)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
PlayerDecalDigitalSignature::_internal_right() const {
  return right_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
PlayerDecalDigitalSignature::right() const {
  // @@protoc_insertion_point(field_list:PlayerDecalDigitalSignature.right)
  return _internal_right();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
PlayerDecalDigitalSignature::_internal_mutable_right() {
  return &right_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
PlayerDecalDigitalSignature::mutable_right() {
  // @@protoc_insertion_point(field_mutable_list:PlayerDecalDigitalSignature.right)
  return _internal_mutable_right();
}

// optional uint32 tx_defidx = 7;
inline bool PlayerDecalDigitalSignature::_internal_has_tx_defidx() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PlayerDecalDigitalSignature::has_tx_defidx() const {
  return _internal_has_tx_defidx();
}
inline void PlayerDecalDigitalSignature::clear_tx_defidx() {
  tx_defidx_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PlayerDecalDigitalSignature::_internal_tx_defidx() const {
  return tx_defidx_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PlayerDecalDigitalSignature::tx_defidx() const {
  // @@protoc_insertion_point(field_get:PlayerDecalDigitalSignature.tx_defidx)
  return _internal_tx_defidx();
}
inline void PlayerDecalDigitalSignature::_internal_set_tx_defidx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  tx_defidx_ = value;
}
inline void PlayerDecalDigitalSignature::set_tx_defidx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tx_defidx(value);
  // @@protoc_insertion_point(field_set:PlayerDecalDigitalSignature.tx_defidx)
}

// optional int32 entindex = 8;
inline bool PlayerDecalDigitalSignature::_internal_has_entindex() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PlayerDecalDigitalSignature::has_entindex() const {
  return _internal_has_entindex();
}
inline void PlayerDecalDigitalSignature::clear_entindex() {
  entindex_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerDecalDigitalSignature::_internal_entindex() const {
  return entindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerDecalDigitalSignature::entindex() const {
  // @@protoc_insertion_point(field_get:PlayerDecalDigitalSignature.entindex)
  return _internal_entindex();
}
inline void PlayerDecalDigitalSignature::_internal_set_entindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  entindex_ = value;
}
inline void PlayerDecalDigitalSignature::set_entindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_entindex(value);
  // @@protoc_insertion_point(field_set:PlayerDecalDigitalSignature.entindex)
}

// optional uint32 hitbox = 9;
inline bool PlayerDecalDigitalSignature::_internal_has_hitbox() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool PlayerDecalDigitalSignature::has_hitbox() const {
  return _internal_has_hitbox();
}
inline void PlayerDecalDigitalSignature::clear_hitbox() {
  hitbox_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PlayerDecalDigitalSignature::_internal_hitbox() const {
  return hitbox_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PlayerDecalDigitalSignature::hitbox() const {
  // @@protoc_insertion_point(field_get:PlayerDecalDigitalSignature.hitbox)
  return _internal_hitbox();
}
inline void PlayerDecalDigitalSignature::_internal_set_hitbox(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  hitbox_ = value;
}
inline void PlayerDecalDigitalSignature::set_hitbox(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_hitbox(value);
  // @@protoc_insertion_point(field_set:PlayerDecalDigitalSignature.hitbox)
}

// optional float creationtime = 10;
inline bool PlayerDecalDigitalSignature::_internal_has_creationtime() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool PlayerDecalDigitalSignature::has_creationtime() const {
  return _internal_has_creationtime();
}
inline void PlayerDecalDigitalSignature::clear_creationtime() {
  creationtime_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float PlayerDecalDigitalSignature::_internal_creationtime() const {
  return creationtime_;
}
inline float PlayerDecalDigitalSignature::creationtime() const {
  // @@protoc_insertion_point(field_get:PlayerDecalDigitalSignature.creationtime)
  return _internal_creationtime();
}
inline void PlayerDecalDigitalSignature::_internal_set_creationtime(float value) {
  _has_bits_[0] |= 0x00000040u;
  creationtime_ = value;
}
inline void PlayerDecalDigitalSignature::set_creationtime(float value) {
  _internal_set_creationtime(value);
  // @@protoc_insertion_point(field_set:PlayerDecalDigitalSignature.creationtime)
}

// optional uint32 equipslot = 11;
inline bool PlayerDecalDigitalSignature::_internal_has_equipslot() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool PlayerDecalDigitalSignature::has_equipslot() const {
  return _internal_has_equipslot();
}
inline void PlayerDecalDigitalSignature::clear_equipslot() {
  equipslot_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PlayerDecalDigitalSignature::_internal_equipslot() const {
  return equipslot_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PlayerDecalDigitalSignature::equipslot() const {
  // @@protoc_insertion_point(field_get:PlayerDecalDigitalSignature.equipslot)
  return _internal_equipslot();
}
inline void PlayerDecalDigitalSignature::_internal_set_equipslot(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  equipslot_ = value;
}
inline void PlayerDecalDigitalSignature::set_equipslot(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_equipslot(value);
  // @@protoc_insertion_point(field_set:PlayerDecalDigitalSignature.equipslot)
}

// optional uint32 trace_id = 12;
inline bool PlayerDecalDigitalSignature::_internal_has_trace_id() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool PlayerDecalDigitalSignature::has_trace_id() const {
  return _internal_has_trace_id();
}
inline void PlayerDecalDigitalSignature::clear_trace_id() {
  trace_id_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PlayerDecalDigitalSignature::_internal_trace_id() const {
  return trace_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PlayerDecalDigitalSignature::trace_id() const {
  // @@protoc_insertion_point(field_get:PlayerDecalDigitalSignature.trace_id)
  return _internal_trace_id();
}
inline void PlayerDecalDigitalSignature::_internal_set_trace_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  trace_id_ = value;
}
inline void PlayerDecalDigitalSignature::set_trace_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_trace_id(value);
  // @@protoc_insertion_point(field_set:PlayerDecalDigitalSignature.trace_id)
}

// repeated float normal = 13;
inline int PlayerDecalDigitalSignature::_internal_normal_size() const {
  return normal_.size();
}
inline int PlayerDecalDigitalSignature::normal_size() const {
  return _internal_normal_size();
}
inline void PlayerDecalDigitalSignature::clear_normal() {
  normal_.Clear();
}
inline float PlayerDecalDigitalSignature::_internal_normal(int index) const {
  return normal_.Get(index);
}
inline float PlayerDecalDigitalSignature::normal(int index) const {
  // @@protoc_insertion_point(field_get:PlayerDecalDigitalSignature.normal)
  return _internal_normal(index);
}
inline void PlayerDecalDigitalSignature::set_normal(int index, float value) {
  normal_.Set(index, value);
  // @@protoc_insertion_point(field_set:PlayerDecalDigitalSignature.normal)
}
inline void PlayerDecalDigitalSignature::_internal_add_normal(float value) {
  normal_.Add(value);
}
inline void PlayerDecalDigitalSignature::add_normal(float value) {
  _internal_add_normal(value);
  // @@protoc_insertion_point(field_add:PlayerDecalDigitalSignature.normal)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
PlayerDecalDigitalSignature::_internal_normal() const {
  return normal_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
PlayerDecalDigitalSignature::normal() const {
  // @@protoc_insertion_point(field_list:PlayerDecalDigitalSignature.normal)
  return _internal_normal();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
PlayerDecalDigitalSignature::_internal_mutable_normal() {
  return &normal_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
PlayerDecalDigitalSignature::mutable_normal() {
  // @@protoc_insertion_point(field_mutable_list:PlayerDecalDigitalSignature.normal)
  return _internal_mutable_normal();
}

// optional uint32 tint_id = 14;
inline bool PlayerDecalDigitalSignature::_internal_has_tint_id() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool PlayerDecalDigitalSignature::has_tint_id() const {
  return _internal_has_tint_id();
}
inline void PlayerDecalDigitalSignature::clear_tint_id() {
  tint_id_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PlayerDecalDigitalSignature::_internal_tint_id() const {
  return tint_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PlayerDecalDigitalSignature::tint_id() const {
  // @@protoc_insertion_point(field_get:PlayerDecalDigitalSignature.tint_id)
  return _internal_tint_id();
}
inline void PlayerDecalDigitalSignature::_internal_set_tint_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  tint_id_ = value;
}
inline void PlayerDecalDigitalSignature::set_tint_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tint_id(value);
  // @@protoc_insertion_point(field_set:PlayerDecalDigitalSignature.tint_id)
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_ClientPlayerDecalSign

// optional .PlayerDecalDigitalSignature data = 1;
inline bool CMsgGCCStrike15_v2_ClientPlayerDecalSign::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || data_ != nullptr);
  return value;
}
inline bool CMsgGCCStrike15_v2_ClientPlayerDecalSign::has_data() const {
  return _internal_has_data();
}
inline void CMsgGCCStrike15_v2_ClientPlayerDecalSign::clear_data() {
  if (data_ != nullptr) data_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::PlayerDecalDigitalSignature& CMsgGCCStrike15_v2_ClientPlayerDecalSign::_internal_data() const {
  const ::PlayerDecalDigitalSignature* p = data_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlayerDecalDigitalSignature&>(
      ::_PlayerDecalDigitalSignature_default_instance_);
}
inline const ::PlayerDecalDigitalSignature& CMsgGCCStrike15_v2_ClientPlayerDecalSign::data() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_ClientPlayerDecalSign.data)
  return _internal_data();
}
inline void CMsgGCCStrike15_v2_ClientPlayerDecalSign::unsafe_arena_set_allocated_data(
    ::PlayerDecalDigitalSignature* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgGCCStrike15_v2_ClientPlayerDecalSign.data)
}
inline ::PlayerDecalDigitalSignature* CMsgGCCStrike15_v2_ClientPlayerDecalSign::release_data() {
  _has_bits_[0] &= ~0x00000001u;
  ::PlayerDecalDigitalSignature* temp = data_;
  data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PlayerDecalDigitalSignature* CMsgGCCStrike15_v2_ClientPlayerDecalSign::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:CMsgGCCStrike15_v2_ClientPlayerDecalSign.data)
  _has_bits_[0] &= ~0x00000001u;
  ::PlayerDecalDigitalSignature* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::PlayerDecalDigitalSignature* CMsgGCCStrike15_v2_ClientPlayerDecalSign::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000001u;
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlayerDecalDigitalSignature>(GetArenaForAllocation());
    data_ = p;
  }
  return data_;
}
inline ::PlayerDecalDigitalSignature* CMsgGCCStrike15_v2_ClientPlayerDecalSign::mutable_data() {
  ::PlayerDecalDigitalSignature* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:CMsgGCCStrike15_v2_ClientPlayerDecalSign.data)
  return _msg;
}
inline void CMsgGCCStrike15_v2_ClientPlayerDecalSign::set_allocated_data(::PlayerDecalDigitalSignature* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::PlayerDecalDigitalSignature>::GetOwningArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:CMsgGCCStrike15_v2_ClientPlayerDecalSign.data)
}

// optional uint64 itemid = 2;
inline bool CMsgGCCStrike15_v2_ClientPlayerDecalSign::_internal_has_itemid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_ClientPlayerDecalSign::has_itemid() const {
  return _internal_has_itemid();
}
inline void CMsgGCCStrike15_v2_ClientPlayerDecalSign::clear_itemid() {
  itemid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCCStrike15_v2_ClientPlayerDecalSign::_internal_itemid() const {
  return itemid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCCStrike15_v2_ClientPlayerDecalSign::itemid() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_ClientPlayerDecalSign.itemid)
  return _internal_itemid();
}
inline void CMsgGCCStrike15_v2_ClientPlayerDecalSign::_internal_set_itemid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  itemid_ = value;
}
inline void CMsgGCCStrike15_v2_ClientPlayerDecalSign::set_itemid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_itemid(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_ClientPlayerDecalSign.itemid)
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_ClientLogonFatalError

// optional uint32 errorcode = 1;
inline bool CMsgGCCStrike15_v2_ClientLogonFatalError::_internal_has_errorcode() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_ClientLogonFatalError::has_errorcode() const {
  return _internal_has_errorcode();
}
inline void CMsgGCCStrike15_v2_ClientLogonFatalError::clear_errorcode() {
  errorcode_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_ClientLogonFatalError::_internal_errorcode() const {
  return errorcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_ClientLogonFatalError::errorcode() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_ClientLogonFatalError.errorcode)
  return _internal_errorcode();
}
inline void CMsgGCCStrike15_v2_ClientLogonFatalError::_internal_set_errorcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  errorcode_ = value;
}
inline void CMsgGCCStrike15_v2_ClientLogonFatalError::set_errorcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_errorcode(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_ClientLogonFatalError.errorcode)
}

// optional string message = 2;
inline bool CMsgGCCStrike15_v2_ClientLogonFatalError::_internal_has_message() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_ClientLogonFatalError::has_message() const {
  return _internal_has_message();
}
inline void CMsgGCCStrike15_v2_ClientLogonFatalError::clear_message() {
  message_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgGCCStrike15_v2_ClientLogonFatalError::message() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_ClientLogonFatalError.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgGCCStrike15_v2_ClientLogonFatalError::set_message(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_ClientLogonFatalError.message)
}
inline std::string* CMsgGCCStrike15_v2_ClientLogonFatalError::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:CMsgGCCStrike15_v2_ClientLogonFatalError.message)
  return _s;
}
inline const std::string& CMsgGCCStrike15_v2_ClientLogonFatalError::_internal_message() const {
  return message_.Get();
}
inline void CMsgGCCStrike15_v2_ClientLogonFatalError::_internal_set_message(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsgGCCStrike15_v2_ClientLogonFatalError::_internal_mutable_message() {
  _has_bits_[0] |= 0x00000001u;
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsgGCCStrike15_v2_ClientLogonFatalError::release_message() {
  // @@protoc_insertion_point(field_release:CMsgGCCStrike15_v2_ClientLogonFatalError.message)
  if (!_internal_has_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return message_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CMsgGCCStrike15_v2_ClientLogonFatalError::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CMsgGCCStrike15_v2_ClientLogonFatalError.message)
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_ClientPollState

// optional uint32 pollid = 1;
inline bool CMsgGCCStrike15_v2_ClientPollState::_internal_has_pollid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_ClientPollState::has_pollid() const {
  return _internal_has_pollid();
}
inline void CMsgGCCStrike15_v2_ClientPollState::clear_pollid() {
  pollid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_ClientPollState::_internal_pollid() const {
  return pollid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_ClientPollState::pollid() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_ClientPollState.pollid)
  return _internal_pollid();
}
inline void CMsgGCCStrike15_v2_ClientPollState::_internal_set_pollid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  pollid_ = value;
}
inline void CMsgGCCStrike15_v2_ClientPollState::set_pollid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pollid(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_ClientPollState.pollid)
}

// repeated string names = 2;
inline int CMsgGCCStrike15_v2_ClientPollState::_internal_names_size() const {
  return names_.size();
}
inline int CMsgGCCStrike15_v2_ClientPollState::names_size() const {
  return _internal_names_size();
}
inline void CMsgGCCStrike15_v2_ClientPollState::clear_names() {
  names_.Clear();
}
inline std::string* CMsgGCCStrike15_v2_ClientPollState::add_names() {
  std::string* _s = _internal_add_names();
  // @@protoc_insertion_point(field_add_mutable:CMsgGCCStrike15_v2_ClientPollState.names)
  return _s;
}
inline const std::string& CMsgGCCStrike15_v2_ClientPollState::_internal_names(int index) const {
  return names_.Get(index);
}
inline const std::string& CMsgGCCStrike15_v2_ClientPollState::names(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_ClientPollState.names)
  return _internal_names(index);
}
inline std::string* CMsgGCCStrike15_v2_ClientPollState::mutable_names(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgGCCStrike15_v2_ClientPollState.names)
  return names_.Mutable(index);
}
inline void CMsgGCCStrike15_v2_ClientPollState::set_names(int index, const std::string& value) {
  names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_ClientPollState.names)
}
inline void CMsgGCCStrike15_v2_ClientPollState::set_names(int index, std::string&& value) {
  names_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_ClientPollState.names)
}
inline void CMsgGCCStrike15_v2_ClientPollState::set_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgGCCStrike15_v2_ClientPollState.names)
}
inline void CMsgGCCStrike15_v2_ClientPollState::set_names(int index, const char* value, size_t size) {
  names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgGCCStrike15_v2_ClientPollState.names)
}
inline std::string* CMsgGCCStrike15_v2_ClientPollState::_internal_add_names() {
  return names_.Add();
}
inline void CMsgGCCStrike15_v2_ClientPollState::add_names(const std::string& value) {
  names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CMsgGCCStrike15_v2_ClientPollState.names)
}
inline void CMsgGCCStrike15_v2_ClientPollState::add_names(std::string&& value) {
  names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CMsgGCCStrike15_v2_ClientPollState.names)
}
inline void CMsgGCCStrike15_v2_ClientPollState::add_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CMsgGCCStrike15_v2_ClientPollState.names)
}
inline void CMsgGCCStrike15_v2_ClientPollState::add_names(const char* value, size_t size) {
  names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CMsgGCCStrike15_v2_ClientPollState.names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CMsgGCCStrike15_v2_ClientPollState::names() const {
  // @@protoc_insertion_point(field_list:CMsgGCCStrike15_v2_ClientPollState.names)
  return names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CMsgGCCStrike15_v2_ClientPollState::mutable_names() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCCStrike15_v2_ClientPollState.names)
  return &names_;
}

// repeated int32 values = 3;
inline int CMsgGCCStrike15_v2_ClientPollState::_internal_values_size() const {
  return values_.size();
}
inline int CMsgGCCStrike15_v2_ClientPollState::values_size() const {
  return _internal_values_size();
}
inline void CMsgGCCStrike15_v2_ClientPollState::clear_values() {
  values_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgGCCStrike15_v2_ClientPollState::_internal_values(int index) const {
  return values_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgGCCStrike15_v2_ClientPollState::values(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_ClientPollState.values)
  return _internal_values(index);
}
inline void CMsgGCCStrike15_v2_ClientPollState::set_values(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_ClientPollState.values)
}
inline void CMsgGCCStrike15_v2_ClientPollState::_internal_add_values(::PROTOBUF_NAMESPACE_ID::int32 value) {
  values_.Add(value);
}
inline void CMsgGCCStrike15_v2_ClientPollState::add_values(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_values(value);
  // @@protoc_insertion_point(field_add:CMsgGCCStrike15_v2_ClientPollState.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CMsgGCCStrike15_v2_ClientPollState::_internal_values() const {
  return values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CMsgGCCStrike15_v2_ClientPollState::values() const {
  // @@protoc_insertion_point(field_list:CMsgGCCStrike15_v2_ClientPollState.values)
  return _internal_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CMsgGCCStrike15_v2_ClientPollState::_internal_mutable_values() {
  return &values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CMsgGCCStrike15_v2_ClientPollState::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCCStrike15_v2_ClientPollState.values)
  return _internal_mutable_values();
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_Party_Register

// optional uint32 id = 1;
inline bool CMsgGCCStrike15_v2_Party_Register::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_Party_Register::has_id() const {
  return _internal_has_id();
}
inline void CMsgGCCStrike15_v2_Party_Register::clear_id() {
  id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_Party_Register::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_Party_Register::id() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_Party_Register.id)
  return _internal_id();
}
inline void CMsgGCCStrike15_v2_Party_Register::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
}
inline void CMsgGCCStrike15_v2_Party_Register::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_Party_Register.id)
}

// optional uint32 ver = 2;
inline bool CMsgGCCStrike15_v2_Party_Register::_internal_has_ver() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_Party_Register::has_ver() const {
  return _internal_has_ver();
}
inline void CMsgGCCStrike15_v2_Party_Register::clear_ver() {
  ver_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_Party_Register::_internal_ver() const {
  return ver_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_Party_Register::ver() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_Party_Register.ver)
  return _internal_ver();
}
inline void CMsgGCCStrike15_v2_Party_Register::_internal_set_ver(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  ver_ = value;
}
inline void CMsgGCCStrike15_v2_Party_Register::set_ver(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ver(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_Party_Register.ver)
}

// optional uint32 apr = 3;
inline bool CMsgGCCStrike15_v2_Party_Register::_internal_has_apr() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_Party_Register::has_apr() const {
  return _internal_has_apr();
}
inline void CMsgGCCStrike15_v2_Party_Register::clear_apr() {
  apr_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_Party_Register::_internal_apr() const {
  return apr_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_Party_Register::apr() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_Party_Register.apr)
  return _internal_apr();
}
inline void CMsgGCCStrike15_v2_Party_Register::_internal_set_apr(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  apr_ = value;
}
inline void CMsgGCCStrike15_v2_Party_Register::set_apr(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_apr(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_Party_Register.apr)
}

// optional uint32 ark = 4;
inline bool CMsgGCCStrike15_v2_Party_Register::_internal_has_ark() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_Party_Register::has_ark() const {
  return _internal_has_ark();
}
inline void CMsgGCCStrike15_v2_Party_Register::clear_ark() {
  ark_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_Party_Register::_internal_ark() const {
  return ark_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_Party_Register::ark() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_Party_Register.ark)
  return _internal_ark();
}
inline void CMsgGCCStrike15_v2_Party_Register::_internal_set_ark(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  ark_ = value;
}
inline void CMsgGCCStrike15_v2_Party_Register::set_ark(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ark(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_Party_Register.ark)
}

// optional uint32 nby = 5;
inline bool CMsgGCCStrike15_v2_Party_Register::_internal_has_nby() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_Party_Register::has_nby() const {
  return _internal_has_nby();
}
inline void CMsgGCCStrike15_v2_Party_Register::clear_nby() {
  nby_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_Party_Register::_internal_nby() const {
  return nby_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_Party_Register::nby() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_Party_Register.nby)
  return _internal_nby();
}
inline void CMsgGCCStrike15_v2_Party_Register::_internal_set_nby(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  nby_ = value;
}
inline void CMsgGCCStrike15_v2_Party_Register::set_nby(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_nby(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_Party_Register.nby)
}

// optional uint32 grp = 6;
inline bool CMsgGCCStrike15_v2_Party_Register::_internal_has_grp() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_Party_Register::has_grp() const {
  return _internal_has_grp();
}
inline void CMsgGCCStrike15_v2_Party_Register::clear_grp() {
  grp_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_Party_Register::_internal_grp() const {
  return grp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_Party_Register::grp() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_Party_Register.grp)
  return _internal_grp();
}
inline void CMsgGCCStrike15_v2_Party_Register::_internal_set_grp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  grp_ = value;
}
inline void CMsgGCCStrike15_v2_Party_Register::set_grp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_grp(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_Party_Register.grp)
}

// optional uint32 slots = 7;
inline bool CMsgGCCStrike15_v2_Party_Register::_internal_has_slots() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_Party_Register::has_slots() const {
  return _internal_has_slots();
}
inline void CMsgGCCStrike15_v2_Party_Register::clear_slots() {
  slots_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_Party_Register::_internal_slots() const {
  return slots_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_Party_Register::slots() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_Party_Register.slots)
  return _internal_slots();
}
inline void CMsgGCCStrike15_v2_Party_Register::_internal_set_slots(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  slots_ = value;
}
inline void CMsgGCCStrike15_v2_Party_Register::set_slots(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_slots(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_Party_Register.slots)
}

// optional uint32 launcher = 8;
inline bool CMsgGCCStrike15_v2_Party_Register::_internal_has_launcher() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_Party_Register::has_launcher() const {
  return _internal_has_launcher();
}
inline void CMsgGCCStrike15_v2_Party_Register::clear_launcher() {
  launcher_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_Party_Register::_internal_launcher() const {
  return launcher_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_Party_Register::launcher() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_Party_Register.launcher)
  return _internal_launcher();
}
inline void CMsgGCCStrike15_v2_Party_Register::_internal_set_launcher(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  launcher_ = value;
}
inline void CMsgGCCStrike15_v2_Party_Register::set_launcher(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_launcher(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_Party_Register.launcher)
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_Party_Search

// optional uint32 ver = 1;
inline bool CMsgGCCStrike15_v2_Party_Search::_internal_has_ver() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_Party_Search::has_ver() const {
  return _internal_has_ver();
}
inline void CMsgGCCStrike15_v2_Party_Search::clear_ver() {
  ver_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_Party_Search::_internal_ver() const {
  return ver_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_Party_Search::ver() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_Party_Search.ver)
  return _internal_ver();
}
inline void CMsgGCCStrike15_v2_Party_Search::_internal_set_ver(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  ver_ = value;
}
inline void CMsgGCCStrike15_v2_Party_Search::set_ver(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ver(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_Party_Search.ver)
}

// optional uint32 apr = 2;
inline bool CMsgGCCStrike15_v2_Party_Search::_internal_has_apr() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_Party_Search::has_apr() const {
  return _internal_has_apr();
}
inline void CMsgGCCStrike15_v2_Party_Search::clear_apr() {
  apr_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_Party_Search::_internal_apr() const {
  return apr_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_Party_Search::apr() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_Party_Search.apr)
  return _internal_apr();
}
inline void CMsgGCCStrike15_v2_Party_Search::_internal_set_apr(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  apr_ = value;
}
inline void CMsgGCCStrike15_v2_Party_Search::set_apr(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_apr(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_Party_Search.apr)
}

// optional uint32 ark = 3;
inline bool CMsgGCCStrike15_v2_Party_Search::_internal_has_ark() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_Party_Search::has_ark() const {
  return _internal_has_ark();
}
inline void CMsgGCCStrike15_v2_Party_Search::clear_ark() {
  ark_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_Party_Search::_internal_ark() const {
  return ark_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_Party_Search::ark() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_Party_Search.ark)
  return _internal_ark();
}
inline void CMsgGCCStrike15_v2_Party_Search::_internal_set_ark(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  ark_ = value;
}
inline void CMsgGCCStrike15_v2_Party_Search::set_ark(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ark(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_Party_Search.ark)
}

// repeated uint32 grps = 4;
inline int CMsgGCCStrike15_v2_Party_Search::_internal_grps_size() const {
  return grps_.size();
}
inline int CMsgGCCStrike15_v2_Party_Search::grps_size() const {
  return _internal_grps_size();
}
inline void CMsgGCCStrike15_v2_Party_Search::clear_grps() {
  grps_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_Party_Search::_internal_grps(int index) const {
  return grps_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_Party_Search::grps(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_Party_Search.grps)
  return _internal_grps(index);
}
inline void CMsgGCCStrike15_v2_Party_Search::set_grps(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  grps_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_Party_Search.grps)
}
inline void CMsgGCCStrike15_v2_Party_Search::_internal_add_grps(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  grps_.Add(value);
}
inline void CMsgGCCStrike15_v2_Party_Search::add_grps(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_grps(value);
  // @@protoc_insertion_point(field_add:CMsgGCCStrike15_v2_Party_Search.grps)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CMsgGCCStrike15_v2_Party_Search::_internal_grps() const {
  return grps_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CMsgGCCStrike15_v2_Party_Search::grps() const {
  // @@protoc_insertion_point(field_list:CMsgGCCStrike15_v2_Party_Search.grps)
  return _internal_grps();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CMsgGCCStrike15_v2_Party_Search::_internal_mutable_grps() {
  return &grps_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CMsgGCCStrike15_v2_Party_Search::mutable_grps() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCCStrike15_v2_Party_Search.grps)
  return _internal_mutable_grps();
}

// optional uint32 launcher = 5;
inline bool CMsgGCCStrike15_v2_Party_Search::_internal_has_launcher() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_Party_Search::has_launcher() const {
  return _internal_has_launcher();
}
inline void CMsgGCCStrike15_v2_Party_Search::clear_launcher() {
  launcher_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_Party_Search::_internal_launcher() const {
  return launcher_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_Party_Search::launcher() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_Party_Search.launcher)
  return _internal_launcher();
}
inline void CMsgGCCStrike15_v2_Party_Search::_internal_set_launcher(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  launcher_ = value;
}
inline void CMsgGCCStrike15_v2_Party_Search::set_launcher(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_launcher(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_Party_Search.launcher)
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_Party_SearchResults_Entry

// optional uint32 id = 1;
inline bool CMsgGCCStrike15_v2_Party_SearchResults_Entry::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_Party_SearchResults_Entry::has_id() const {
  return _internal_has_id();
}
inline void CMsgGCCStrike15_v2_Party_SearchResults_Entry::clear_id() {
  id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_Party_SearchResults_Entry::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_Party_SearchResults_Entry::id() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_Party_SearchResults.Entry.id)
  return _internal_id();
}
inline void CMsgGCCStrike15_v2_Party_SearchResults_Entry::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
}
inline void CMsgGCCStrike15_v2_Party_SearchResults_Entry::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_Party_SearchResults.Entry.id)
}

// optional uint32 grp = 2;
inline bool CMsgGCCStrike15_v2_Party_SearchResults_Entry::_internal_has_grp() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_Party_SearchResults_Entry::has_grp() const {
  return _internal_has_grp();
}
inline void CMsgGCCStrike15_v2_Party_SearchResults_Entry::clear_grp() {
  grp_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_Party_SearchResults_Entry::_internal_grp() const {
  return grp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_Party_SearchResults_Entry::grp() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_Party_SearchResults.Entry.grp)
  return _internal_grp();
}
inline void CMsgGCCStrike15_v2_Party_SearchResults_Entry::_internal_set_grp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  grp_ = value;
}
inline void CMsgGCCStrike15_v2_Party_SearchResults_Entry::set_grp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_grp(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_Party_SearchResults.Entry.grp)
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_Party_SearchResults

// repeated .CMsgGCCStrike15_v2_Party_SearchResults.Entry entries = 1;
inline int CMsgGCCStrike15_v2_Party_SearchResults::_internal_entries_size() const {
  return entries_.size();
}
inline int CMsgGCCStrike15_v2_Party_SearchResults::entries_size() const {
  return _internal_entries_size();
}
inline void CMsgGCCStrike15_v2_Party_SearchResults::clear_entries() {
  entries_.Clear();
}
inline ::CMsgGCCStrike15_v2_Party_SearchResults_Entry* CMsgGCCStrike15_v2_Party_SearchResults::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgGCCStrike15_v2_Party_SearchResults.entries)
  return entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCCStrike15_v2_Party_SearchResults_Entry >*
CMsgGCCStrike15_v2_Party_SearchResults::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCCStrike15_v2_Party_SearchResults.entries)
  return &entries_;
}
inline const ::CMsgGCCStrike15_v2_Party_SearchResults_Entry& CMsgGCCStrike15_v2_Party_SearchResults::_internal_entries(int index) const {
  return entries_.Get(index);
}
inline const ::CMsgGCCStrike15_v2_Party_SearchResults_Entry& CMsgGCCStrike15_v2_Party_SearchResults::entries(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_Party_SearchResults.entries)
  return _internal_entries(index);
}
inline ::CMsgGCCStrike15_v2_Party_SearchResults_Entry* CMsgGCCStrike15_v2_Party_SearchResults::_internal_add_entries() {
  return entries_.Add();
}
inline ::CMsgGCCStrike15_v2_Party_SearchResults_Entry* CMsgGCCStrike15_v2_Party_SearchResults::add_entries() {
  ::CMsgGCCStrike15_v2_Party_SearchResults_Entry* _add = _internal_add_entries();
  // @@protoc_insertion_point(field_add:CMsgGCCStrike15_v2_Party_SearchResults.entries)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCCStrike15_v2_Party_SearchResults_Entry >&
CMsgGCCStrike15_v2_Party_SearchResults::entries() const {
  // @@protoc_insertion_point(field_list:CMsgGCCStrike15_v2_Party_SearchResults.entries)
  return entries_;
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_Party_Invite

// optional uint32 accountid = 1;
inline bool CMsgGCCStrike15_v2_Party_Invite::_internal_has_accountid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_Party_Invite::has_accountid() const {
  return _internal_has_accountid();
}
inline void CMsgGCCStrike15_v2_Party_Invite::clear_accountid() {
  accountid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_Party_Invite::_internal_accountid() const {
  return accountid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_Party_Invite::accountid() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_Party_Invite.accountid)
  return _internal_accountid();
}
inline void CMsgGCCStrike15_v2_Party_Invite::_internal_set_accountid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  accountid_ = value;
}
inline void CMsgGCCStrike15_v2_Party_Invite::set_accountid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_accountid(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_Party_Invite.accountid)
}

// optional uint32 lobbyid = 2;
inline bool CMsgGCCStrike15_v2_Party_Invite::_internal_has_lobbyid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_Party_Invite::has_lobbyid() const {
  return _internal_has_lobbyid();
}
inline void CMsgGCCStrike15_v2_Party_Invite::clear_lobbyid() {
  lobbyid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_Party_Invite::_internal_lobbyid() const {
  return lobbyid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_Party_Invite::lobbyid() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_Party_Invite.lobbyid)
  return _internal_lobbyid();
}
inline void CMsgGCCStrike15_v2_Party_Invite::_internal_set_lobbyid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  lobbyid_ = value;
}
inline void CMsgGCCStrike15_v2_Party_Invite::set_lobbyid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_lobbyid(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_Party_Invite.lobbyid)
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_Account_RequestCoPlays_Player

// optional uint32 accountid = 1;
inline bool CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::_internal_has_accountid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::has_accountid() const {
  return _internal_has_accountid();
}
inline void CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::clear_accountid() {
  accountid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::_internal_accountid() const {
  return accountid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::accountid() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_Account_RequestCoPlays.Player.accountid)
  return _internal_accountid();
}
inline void CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::_internal_set_accountid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  accountid_ = value;
}
inline void CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::set_accountid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_accountid(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_Account_RequestCoPlays.Player.accountid)
}

// optional uint32 rtcoplay = 2;
inline bool CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::_internal_has_rtcoplay() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::has_rtcoplay() const {
  return _internal_has_rtcoplay();
}
inline void CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::clear_rtcoplay() {
  rtcoplay_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::_internal_rtcoplay() const {
  return rtcoplay_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::rtcoplay() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_Account_RequestCoPlays.Player.rtcoplay)
  return _internal_rtcoplay();
}
inline void CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::_internal_set_rtcoplay(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  rtcoplay_ = value;
}
inline void CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::set_rtcoplay(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rtcoplay(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_Account_RequestCoPlays.Player.rtcoplay)
}

// optional bool online = 3;
inline bool CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::_internal_has_online() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::has_online() const {
  return _internal_has_online();
}
inline void CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::clear_online() {
  online_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::_internal_online() const {
  return online_;
}
inline bool CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::online() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_Account_RequestCoPlays.Player.online)
  return _internal_online();
}
inline void CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::_internal_set_online(bool value) {
  _has_bits_[0] |= 0x00000004u;
  online_ = value;
}
inline void CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::set_online(bool value) {
  _internal_set_online(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_Account_RequestCoPlays.Player.online)
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_Account_RequestCoPlays

// repeated .CMsgGCCStrike15_v2_Account_RequestCoPlays.Player players = 1;
inline int CMsgGCCStrike15_v2_Account_RequestCoPlays::_internal_players_size() const {
  return players_.size();
}
inline int CMsgGCCStrike15_v2_Account_RequestCoPlays::players_size() const {
  return _internal_players_size();
}
inline void CMsgGCCStrike15_v2_Account_RequestCoPlays::clear_players() {
  players_.Clear();
}
inline ::CMsgGCCStrike15_v2_Account_RequestCoPlays_Player* CMsgGCCStrike15_v2_Account_RequestCoPlays::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgGCCStrike15_v2_Account_RequestCoPlays.players)
  return players_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCCStrike15_v2_Account_RequestCoPlays_Player >*
CMsgGCCStrike15_v2_Account_RequestCoPlays::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCCStrike15_v2_Account_RequestCoPlays.players)
  return &players_;
}
inline const ::CMsgGCCStrike15_v2_Account_RequestCoPlays_Player& CMsgGCCStrike15_v2_Account_RequestCoPlays::_internal_players(int index) const {
  return players_.Get(index);
}
inline const ::CMsgGCCStrike15_v2_Account_RequestCoPlays_Player& CMsgGCCStrike15_v2_Account_RequestCoPlays::players(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_Account_RequestCoPlays.players)
  return _internal_players(index);
}
inline ::CMsgGCCStrike15_v2_Account_RequestCoPlays_Player* CMsgGCCStrike15_v2_Account_RequestCoPlays::_internal_add_players() {
  return players_.Add();
}
inline ::CMsgGCCStrike15_v2_Account_RequestCoPlays_Player* CMsgGCCStrike15_v2_Account_RequestCoPlays::add_players() {
  ::CMsgGCCStrike15_v2_Account_RequestCoPlays_Player* _add = _internal_add_players();
  // @@protoc_insertion_point(field_add:CMsgGCCStrike15_v2_Account_RequestCoPlays.players)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCCStrike15_v2_Account_RequestCoPlays_Player >&
CMsgGCCStrike15_v2_Account_RequestCoPlays::players() const {
  // @@protoc_insertion_point(field_list:CMsgGCCStrike15_v2_Account_RequestCoPlays.players)
  return players_;
}

// optional uint32 servertime = 2;
inline bool CMsgGCCStrike15_v2_Account_RequestCoPlays::_internal_has_servertime() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_Account_RequestCoPlays::has_servertime() const {
  return _internal_has_servertime();
}
inline void CMsgGCCStrike15_v2_Account_RequestCoPlays::clear_servertime() {
  servertime_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_Account_RequestCoPlays::_internal_servertime() const {
  return servertime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_Account_RequestCoPlays::servertime() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_Account_RequestCoPlays.servertime)
  return _internal_servertime();
}
inline void CMsgGCCStrike15_v2_Account_RequestCoPlays::_internal_set_servertime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  servertime_ = value;
}
inline void CMsgGCCStrike15_v2_Account_RequestCoPlays::set_servertime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_servertime(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_Account_RequestCoPlays.servertime)
}

// -------------------------------------------------------------------

// CMsgGCCStrike15_v2_ClientToGCRequestTicket

// optional fixed64 authorized_steam_id = 1;
inline bool CMsgGCCStrike15_v2_ClientToGCRequestTicket::_internal_has_authorized_steam_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_ClientToGCRequestTicket::has_authorized_steam_id() const {
  return _internal_has_authorized_steam_id();
}
inline void CMsgGCCStrike15_v2_ClientToGCRequestTicket::clear_authorized_steam_id() {
  authorized_steam_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCCStrike15_v2_ClientToGCRequestTicket::_internal_authorized_steam_id() const {
  return authorized_steam_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCCStrike15_v2_ClientToGCRequestTicket::authorized_steam_id() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_ClientToGCRequestTicket.authorized_steam_id)
  return _internal_authorized_steam_id();
}
inline void CMsgGCCStrike15_v2_ClientToGCRequestTicket::_internal_set_authorized_steam_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  authorized_steam_id_ = value;
}
inline void CMsgGCCStrike15_v2_ClientToGCRequestTicket::set_authorized_steam_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_authorized_steam_id(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_ClientToGCRequestTicket.authorized_steam_id)
}

// optional fixed32 authorized_public_ip = 2;
inline bool CMsgGCCStrike15_v2_ClientToGCRequestTicket::_internal_has_authorized_public_ip() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_ClientToGCRequestTicket::has_authorized_public_ip() const {
  return _internal_has_authorized_public_ip();
}
inline void CMsgGCCStrike15_v2_ClientToGCRequestTicket::clear_authorized_public_ip() {
  authorized_public_ip_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_ClientToGCRequestTicket::_internal_authorized_public_ip() const {
  return authorized_public_ip_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCCStrike15_v2_ClientToGCRequestTicket::authorized_public_ip() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_ClientToGCRequestTicket.authorized_public_ip)
  return _internal_authorized_public_ip();
}
inline void CMsgGCCStrike15_v2_ClientToGCRequestTicket::_internal_set_authorized_public_ip(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  authorized_public_ip_ = value;
}
inline void CMsgGCCStrike15_v2_ClientToGCRequestTicket::set_authorized_public_ip(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_authorized_public_ip(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_ClientToGCRequestTicket.authorized_public_ip)
}

// optional fixed64 gameserver_steam_id = 3;
inline bool CMsgGCCStrike15_v2_ClientToGCRequestTicket::_internal_has_gameserver_steam_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_ClientToGCRequestTicket::has_gameserver_steam_id() const {
  return _internal_has_gameserver_steam_id();
}
inline void CMsgGCCStrike15_v2_ClientToGCRequestTicket::clear_gameserver_steam_id() {
  gameserver_steam_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCCStrike15_v2_ClientToGCRequestTicket::_internal_gameserver_steam_id() const {
  return gameserver_steam_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCCStrike15_v2_ClientToGCRequestTicket::gameserver_steam_id() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_ClientToGCRequestTicket.gameserver_steam_id)
  return _internal_gameserver_steam_id();
}
inline void CMsgGCCStrike15_v2_ClientToGCRequestTicket::_internal_set_gameserver_steam_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  gameserver_steam_id_ = value;
}
inline void CMsgGCCStrike15_v2_ClientToGCRequestTicket::set_gameserver_steam_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_gameserver_steam_id(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_ClientToGCRequestTicket.gameserver_steam_id)
}

// optional fixed64 gameserver_net_id = 4;
inline bool CMsgGCCStrike15_v2_ClientToGCRequestTicket::_internal_has_gameserver_net_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgGCCStrike15_v2_ClientToGCRequestTicket::has_gameserver_net_id() const {
  return _internal_has_gameserver_net_id();
}
inline void CMsgGCCStrike15_v2_ClientToGCRequestTicket::clear_gameserver_net_id() {
  gameserver_net_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCCStrike15_v2_ClientToGCRequestTicket::_internal_gameserver_net_id() const {
  return gameserver_net_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCCStrike15_v2_ClientToGCRequestTicket::gameserver_net_id() const {
  // @@protoc_insertion_point(field_get:CMsgGCCStrike15_v2_ClientToGCRequestTicket.gameserver_net_id)
  return _internal_gameserver_net_id();
}
inline void CMsgGCCStrike15_v2_ClientToGCRequestTicket::_internal_set_gameserver_net_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  gameserver_net_id_ = value;
}
inline void CMsgGCCStrike15_v2_ClientToGCRequestTicket::set_gameserver_net_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_gameserver_net_id(value);
  // @@protoc_insertion_point(field_set:CMsgGCCStrike15_v2_ClientToGCRequestTicket.gameserver_net_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ECsgoGCMsg> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ECsgoGCMsg>() {
  return ::ECsgoGCMsg_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_cstrike15_5fgcmessages_2eproto
