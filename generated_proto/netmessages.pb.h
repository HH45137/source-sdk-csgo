// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: netmessages.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_netmessages_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_netmessages_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/descriptor.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_netmessages_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_netmessages_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[61]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_netmessages_2eproto;
class CCLCMsg_BaselineAck;
struct CCLCMsg_BaselineAckDefaultTypeInternal;
extern CCLCMsg_BaselineAckDefaultTypeInternal _CCLCMsg_BaselineAck_default_instance_;
class CCLCMsg_ClientInfo;
struct CCLCMsg_ClientInfoDefaultTypeInternal;
extern CCLCMsg_ClientInfoDefaultTypeInternal _CCLCMsg_ClientInfo_default_instance_;
class CCLCMsg_CmdKeyValues;
struct CCLCMsg_CmdKeyValuesDefaultTypeInternal;
extern CCLCMsg_CmdKeyValuesDefaultTypeInternal _CCLCMsg_CmdKeyValues_default_instance_;
class CCLCMsg_FileCRCCheck;
struct CCLCMsg_FileCRCCheckDefaultTypeInternal;
extern CCLCMsg_FileCRCCheckDefaultTypeInternal _CCLCMsg_FileCRCCheck_default_instance_;
class CCLCMsg_HltvReplay;
struct CCLCMsg_HltvReplayDefaultTypeInternal;
extern CCLCMsg_HltvReplayDefaultTypeInternal _CCLCMsg_HltvReplay_default_instance_;
class CCLCMsg_ListenEvents;
struct CCLCMsg_ListenEventsDefaultTypeInternal;
extern CCLCMsg_ListenEventsDefaultTypeInternal _CCLCMsg_ListenEvents_default_instance_;
class CCLCMsg_LoadingProgress;
struct CCLCMsg_LoadingProgressDefaultTypeInternal;
extern CCLCMsg_LoadingProgressDefaultTypeInternal _CCLCMsg_LoadingProgress_default_instance_;
class CCLCMsg_Move;
struct CCLCMsg_MoveDefaultTypeInternal;
extern CCLCMsg_MoveDefaultTypeInternal _CCLCMsg_Move_default_instance_;
class CCLCMsg_RespondCvarValue;
struct CCLCMsg_RespondCvarValueDefaultTypeInternal;
extern CCLCMsg_RespondCvarValueDefaultTypeInternal _CCLCMsg_RespondCvarValue_default_instance_;
class CCLCMsg_SplitPlayerConnect;
struct CCLCMsg_SplitPlayerConnectDefaultTypeInternal;
extern CCLCMsg_SplitPlayerConnectDefaultTypeInternal _CCLCMsg_SplitPlayerConnect_default_instance_;
class CCLCMsg_VoiceData;
struct CCLCMsg_VoiceDataDefaultTypeInternal;
extern CCLCMsg_VoiceDataDefaultTypeInternal _CCLCMsg_VoiceData_default_instance_;
class CMsgQAngle;
struct CMsgQAngleDefaultTypeInternal;
extern CMsgQAngleDefaultTypeInternal _CMsgQAngle_default_instance_;
class CMsgRGBA;
struct CMsgRGBADefaultTypeInternal;
extern CMsgRGBADefaultTypeInternal _CMsgRGBA_default_instance_;
class CMsgVector;
struct CMsgVectorDefaultTypeInternal;
extern CMsgVectorDefaultTypeInternal _CMsgVector_default_instance_;
class CMsgVector2D;
struct CMsgVector2DDefaultTypeInternal;
extern CMsgVector2DDefaultTypeInternal _CMsgVector2D_default_instance_;
class CMsg_CVars;
struct CMsg_CVarsDefaultTypeInternal;
extern CMsg_CVarsDefaultTypeInternal _CMsg_CVars_default_instance_;
class CMsg_CVars_CVar;
struct CMsg_CVars_CVarDefaultTypeInternal;
extern CMsg_CVars_CVarDefaultTypeInternal _CMsg_CVars_CVar_default_instance_;
class CNETMsg_Disconnect;
struct CNETMsg_DisconnectDefaultTypeInternal;
extern CNETMsg_DisconnectDefaultTypeInternal _CNETMsg_Disconnect_default_instance_;
class CNETMsg_File;
struct CNETMsg_FileDefaultTypeInternal;
extern CNETMsg_FileDefaultTypeInternal _CNETMsg_File_default_instance_;
class CNETMsg_NOP;
struct CNETMsg_NOPDefaultTypeInternal;
extern CNETMsg_NOPDefaultTypeInternal _CNETMsg_NOP_default_instance_;
class CNETMsg_PlayerAvatarData;
struct CNETMsg_PlayerAvatarDataDefaultTypeInternal;
extern CNETMsg_PlayerAvatarDataDefaultTypeInternal _CNETMsg_PlayerAvatarData_default_instance_;
class CNETMsg_SetConVar;
struct CNETMsg_SetConVarDefaultTypeInternal;
extern CNETMsg_SetConVarDefaultTypeInternal _CNETMsg_SetConVar_default_instance_;
class CNETMsg_SignonState;
struct CNETMsg_SignonStateDefaultTypeInternal;
extern CNETMsg_SignonStateDefaultTypeInternal _CNETMsg_SignonState_default_instance_;
class CNETMsg_SplitScreenUser;
struct CNETMsg_SplitScreenUserDefaultTypeInternal;
extern CNETMsg_SplitScreenUserDefaultTypeInternal _CNETMsg_SplitScreenUser_default_instance_;
class CNETMsg_StringCmd;
struct CNETMsg_StringCmdDefaultTypeInternal;
extern CNETMsg_StringCmdDefaultTypeInternal _CNETMsg_StringCmd_default_instance_;
class CNETMsg_Tick;
struct CNETMsg_TickDefaultTypeInternal;
extern CNETMsg_TickDefaultTypeInternal _CNETMsg_Tick_default_instance_;
class CSVCMsg_BSPDecal;
struct CSVCMsg_BSPDecalDefaultTypeInternal;
extern CSVCMsg_BSPDecalDefaultTypeInternal _CSVCMsg_BSPDecal_default_instance_;
class CSVCMsg_Broadcast_Command;
struct CSVCMsg_Broadcast_CommandDefaultTypeInternal;
extern CSVCMsg_Broadcast_CommandDefaultTypeInternal _CSVCMsg_Broadcast_Command_default_instance_;
class CSVCMsg_ClassInfo;
struct CSVCMsg_ClassInfoDefaultTypeInternal;
extern CSVCMsg_ClassInfoDefaultTypeInternal _CSVCMsg_ClassInfo_default_instance_;
class CSVCMsg_ClassInfo_class_t;
struct CSVCMsg_ClassInfo_class_tDefaultTypeInternal;
extern CSVCMsg_ClassInfo_class_tDefaultTypeInternal _CSVCMsg_ClassInfo_class_t_default_instance_;
class CSVCMsg_CmdKeyValues;
struct CSVCMsg_CmdKeyValuesDefaultTypeInternal;
extern CSVCMsg_CmdKeyValuesDefaultTypeInternal _CSVCMsg_CmdKeyValues_default_instance_;
class CSVCMsg_CreateStringTable;
struct CSVCMsg_CreateStringTableDefaultTypeInternal;
extern CSVCMsg_CreateStringTableDefaultTypeInternal _CSVCMsg_CreateStringTable_default_instance_;
class CSVCMsg_CrosshairAngle;
struct CSVCMsg_CrosshairAngleDefaultTypeInternal;
extern CSVCMsg_CrosshairAngleDefaultTypeInternal _CSVCMsg_CrosshairAngle_default_instance_;
class CSVCMsg_EncryptedData;
struct CSVCMsg_EncryptedDataDefaultTypeInternal;
extern CSVCMsg_EncryptedDataDefaultTypeInternal _CSVCMsg_EncryptedData_default_instance_;
class CSVCMsg_EntityMsg;
struct CSVCMsg_EntityMsgDefaultTypeInternal;
extern CSVCMsg_EntityMsgDefaultTypeInternal _CSVCMsg_EntityMsg_default_instance_;
class CSVCMsg_FixAngle;
struct CSVCMsg_FixAngleDefaultTypeInternal;
extern CSVCMsg_FixAngleDefaultTypeInternal _CSVCMsg_FixAngle_default_instance_;
class CSVCMsg_GameEvent;
struct CSVCMsg_GameEventDefaultTypeInternal;
extern CSVCMsg_GameEventDefaultTypeInternal _CSVCMsg_GameEvent_default_instance_;
class CSVCMsg_GameEventList;
struct CSVCMsg_GameEventListDefaultTypeInternal;
extern CSVCMsg_GameEventListDefaultTypeInternal _CSVCMsg_GameEventList_default_instance_;
class CSVCMsg_GameEventList_descriptor_t;
struct CSVCMsg_GameEventList_descriptor_tDefaultTypeInternal;
extern CSVCMsg_GameEventList_descriptor_tDefaultTypeInternal _CSVCMsg_GameEventList_descriptor_t_default_instance_;
class CSVCMsg_GameEventList_key_t;
struct CSVCMsg_GameEventList_key_tDefaultTypeInternal;
extern CSVCMsg_GameEventList_key_tDefaultTypeInternal _CSVCMsg_GameEventList_key_t_default_instance_;
class CSVCMsg_GameEvent_key_t;
struct CSVCMsg_GameEvent_key_tDefaultTypeInternal;
extern CSVCMsg_GameEvent_key_tDefaultTypeInternal _CSVCMsg_GameEvent_key_t_default_instance_;
class CSVCMsg_GetCvarValue;
struct CSVCMsg_GetCvarValueDefaultTypeInternal;
extern CSVCMsg_GetCvarValueDefaultTypeInternal _CSVCMsg_GetCvarValue_default_instance_;
class CSVCMsg_HltvReplay;
struct CSVCMsg_HltvReplayDefaultTypeInternal;
extern CSVCMsg_HltvReplayDefaultTypeInternal _CSVCMsg_HltvReplay_default_instance_;
class CSVCMsg_Menu;
struct CSVCMsg_MenuDefaultTypeInternal;
extern CSVCMsg_MenuDefaultTypeInternal _CSVCMsg_Menu_default_instance_;
class CSVCMsg_PacketEntities;
struct CSVCMsg_PacketEntitiesDefaultTypeInternal;
extern CSVCMsg_PacketEntitiesDefaultTypeInternal _CSVCMsg_PacketEntities_default_instance_;
class CSVCMsg_PaintmapData;
struct CSVCMsg_PaintmapDataDefaultTypeInternal;
extern CSVCMsg_PaintmapDataDefaultTypeInternal _CSVCMsg_PaintmapData_default_instance_;
class CSVCMsg_Prefetch;
struct CSVCMsg_PrefetchDefaultTypeInternal;
extern CSVCMsg_PrefetchDefaultTypeInternal _CSVCMsg_Prefetch_default_instance_;
class CSVCMsg_Print;
struct CSVCMsg_PrintDefaultTypeInternal;
extern CSVCMsg_PrintDefaultTypeInternal _CSVCMsg_Print_default_instance_;
class CSVCMsg_SendTable;
struct CSVCMsg_SendTableDefaultTypeInternal;
extern CSVCMsg_SendTableDefaultTypeInternal _CSVCMsg_SendTable_default_instance_;
class CSVCMsg_SendTable_sendprop_t;
struct CSVCMsg_SendTable_sendprop_tDefaultTypeInternal;
extern CSVCMsg_SendTable_sendprop_tDefaultTypeInternal _CSVCMsg_SendTable_sendprop_t_default_instance_;
class CSVCMsg_ServerInfo;
struct CSVCMsg_ServerInfoDefaultTypeInternal;
extern CSVCMsg_ServerInfoDefaultTypeInternal _CSVCMsg_ServerInfo_default_instance_;
class CSVCMsg_SetPause;
struct CSVCMsg_SetPauseDefaultTypeInternal;
extern CSVCMsg_SetPauseDefaultTypeInternal _CSVCMsg_SetPause_default_instance_;
class CSVCMsg_SetView;
struct CSVCMsg_SetViewDefaultTypeInternal;
extern CSVCMsg_SetViewDefaultTypeInternal _CSVCMsg_SetView_default_instance_;
class CSVCMsg_Sounds;
struct CSVCMsg_SoundsDefaultTypeInternal;
extern CSVCMsg_SoundsDefaultTypeInternal _CSVCMsg_Sounds_default_instance_;
class CSVCMsg_Sounds_sounddata_t;
struct CSVCMsg_Sounds_sounddata_tDefaultTypeInternal;
extern CSVCMsg_Sounds_sounddata_tDefaultTypeInternal _CSVCMsg_Sounds_sounddata_t_default_instance_;
class CSVCMsg_SplitScreen;
struct CSVCMsg_SplitScreenDefaultTypeInternal;
extern CSVCMsg_SplitScreenDefaultTypeInternal _CSVCMsg_SplitScreen_default_instance_;
class CSVCMsg_TempEntities;
struct CSVCMsg_TempEntitiesDefaultTypeInternal;
extern CSVCMsg_TempEntitiesDefaultTypeInternal _CSVCMsg_TempEntities_default_instance_;
class CSVCMsg_UpdateStringTable;
struct CSVCMsg_UpdateStringTableDefaultTypeInternal;
extern CSVCMsg_UpdateStringTableDefaultTypeInternal _CSVCMsg_UpdateStringTable_default_instance_;
class CSVCMsg_UserMessage;
struct CSVCMsg_UserMessageDefaultTypeInternal;
extern CSVCMsg_UserMessageDefaultTypeInternal _CSVCMsg_UserMessage_default_instance_;
class CSVCMsg_VoiceData;
struct CSVCMsg_VoiceDataDefaultTypeInternal;
extern CSVCMsg_VoiceDataDefaultTypeInternal _CSVCMsg_VoiceData_default_instance_;
class CSVCMsg_VoiceInit;
struct CSVCMsg_VoiceInitDefaultTypeInternal;
extern CSVCMsg_VoiceInitDefaultTypeInternal _CSVCMsg_VoiceInit_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CCLCMsg_BaselineAck* Arena::CreateMaybeMessage<::CCLCMsg_BaselineAck>(Arena*);
template<> ::CCLCMsg_ClientInfo* Arena::CreateMaybeMessage<::CCLCMsg_ClientInfo>(Arena*);
template<> ::CCLCMsg_CmdKeyValues* Arena::CreateMaybeMessage<::CCLCMsg_CmdKeyValues>(Arena*);
template<> ::CCLCMsg_FileCRCCheck* Arena::CreateMaybeMessage<::CCLCMsg_FileCRCCheck>(Arena*);
template<> ::CCLCMsg_HltvReplay* Arena::CreateMaybeMessage<::CCLCMsg_HltvReplay>(Arena*);
template<> ::CCLCMsg_ListenEvents* Arena::CreateMaybeMessage<::CCLCMsg_ListenEvents>(Arena*);
template<> ::CCLCMsg_LoadingProgress* Arena::CreateMaybeMessage<::CCLCMsg_LoadingProgress>(Arena*);
template<> ::CCLCMsg_Move* Arena::CreateMaybeMessage<::CCLCMsg_Move>(Arena*);
template<> ::CCLCMsg_RespondCvarValue* Arena::CreateMaybeMessage<::CCLCMsg_RespondCvarValue>(Arena*);
template<> ::CCLCMsg_SplitPlayerConnect* Arena::CreateMaybeMessage<::CCLCMsg_SplitPlayerConnect>(Arena*);
template<> ::CCLCMsg_VoiceData* Arena::CreateMaybeMessage<::CCLCMsg_VoiceData>(Arena*);
template<> ::CMsgQAngle* Arena::CreateMaybeMessage<::CMsgQAngle>(Arena*);
template<> ::CMsgRGBA* Arena::CreateMaybeMessage<::CMsgRGBA>(Arena*);
template<> ::CMsgVector* Arena::CreateMaybeMessage<::CMsgVector>(Arena*);
template<> ::CMsgVector2D* Arena::CreateMaybeMessage<::CMsgVector2D>(Arena*);
template<> ::CMsg_CVars* Arena::CreateMaybeMessage<::CMsg_CVars>(Arena*);
template<> ::CMsg_CVars_CVar* Arena::CreateMaybeMessage<::CMsg_CVars_CVar>(Arena*);
template<> ::CNETMsg_Disconnect* Arena::CreateMaybeMessage<::CNETMsg_Disconnect>(Arena*);
template<> ::CNETMsg_File* Arena::CreateMaybeMessage<::CNETMsg_File>(Arena*);
template<> ::CNETMsg_NOP* Arena::CreateMaybeMessage<::CNETMsg_NOP>(Arena*);
template<> ::CNETMsg_PlayerAvatarData* Arena::CreateMaybeMessage<::CNETMsg_PlayerAvatarData>(Arena*);
template<> ::CNETMsg_SetConVar* Arena::CreateMaybeMessage<::CNETMsg_SetConVar>(Arena*);
template<> ::CNETMsg_SignonState* Arena::CreateMaybeMessage<::CNETMsg_SignonState>(Arena*);
template<> ::CNETMsg_SplitScreenUser* Arena::CreateMaybeMessage<::CNETMsg_SplitScreenUser>(Arena*);
template<> ::CNETMsg_StringCmd* Arena::CreateMaybeMessage<::CNETMsg_StringCmd>(Arena*);
template<> ::CNETMsg_Tick* Arena::CreateMaybeMessage<::CNETMsg_Tick>(Arena*);
template<> ::CSVCMsg_BSPDecal* Arena::CreateMaybeMessage<::CSVCMsg_BSPDecal>(Arena*);
template<> ::CSVCMsg_Broadcast_Command* Arena::CreateMaybeMessage<::CSVCMsg_Broadcast_Command>(Arena*);
template<> ::CSVCMsg_ClassInfo* Arena::CreateMaybeMessage<::CSVCMsg_ClassInfo>(Arena*);
template<> ::CSVCMsg_ClassInfo_class_t* Arena::CreateMaybeMessage<::CSVCMsg_ClassInfo_class_t>(Arena*);
template<> ::CSVCMsg_CmdKeyValues* Arena::CreateMaybeMessage<::CSVCMsg_CmdKeyValues>(Arena*);
template<> ::CSVCMsg_CreateStringTable* Arena::CreateMaybeMessage<::CSVCMsg_CreateStringTable>(Arena*);
template<> ::CSVCMsg_CrosshairAngle* Arena::CreateMaybeMessage<::CSVCMsg_CrosshairAngle>(Arena*);
template<> ::CSVCMsg_EncryptedData* Arena::CreateMaybeMessage<::CSVCMsg_EncryptedData>(Arena*);
template<> ::CSVCMsg_EntityMsg* Arena::CreateMaybeMessage<::CSVCMsg_EntityMsg>(Arena*);
template<> ::CSVCMsg_FixAngle* Arena::CreateMaybeMessage<::CSVCMsg_FixAngle>(Arena*);
template<> ::CSVCMsg_GameEvent* Arena::CreateMaybeMessage<::CSVCMsg_GameEvent>(Arena*);
template<> ::CSVCMsg_GameEventList* Arena::CreateMaybeMessage<::CSVCMsg_GameEventList>(Arena*);
template<> ::CSVCMsg_GameEventList_descriptor_t* Arena::CreateMaybeMessage<::CSVCMsg_GameEventList_descriptor_t>(Arena*);
template<> ::CSVCMsg_GameEventList_key_t* Arena::CreateMaybeMessage<::CSVCMsg_GameEventList_key_t>(Arena*);
template<> ::CSVCMsg_GameEvent_key_t* Arena::CreateMaybeMessage<::CSVCMsg_GameEvent_key_t>(Arena*);
template<> ::CSVCMsg_GetCvarValue* Arena::CreateMaybeMessage<::CSVCMsg_GetCvarValue>(Arena*);
template<> ::CSVCMsg_HltvReplay* Arena::CreateMaybeMessage<::CSVCMsg_HltvReplay>(Arena*);
template<> ::CSVCMsg_Menu* Arena::CreateMaybeMessage<::CSVCMsg_Menu>(Arena*);
template<> ::CSVCMsg_PacketEntities* Arena::CreateMaybeMessage<::CSVCMsg_PacketEntities>(Arena*);
template<> ::CSVCMsg_PaintmapData* Arena::CreateMaybeMessage<::CSVCMsg_PaintmapData>(Arena*);
template<> ::CSVCMsg_Prefetch* Arena::CreateMaybeMessage<::CSVCMsg_Prefetch>(Arena*);
template<> ::CSVCMsg_Print* Arena::CreateMaybeMessage<::CSVCMsg_Print>(Arena*);
template<> ::CSVCMsg_SendTable* Arena::CreateMaybeMessage<::CSVCMsg_SendTable>(Arena*);
template<> ::CSVCMsg_SendTable_sendprop_t* Arena::CreateMaybeMessage<::CSVCMsg_SendTable_sendprop_t>(Arena*);
template<> ::CSVCMsg_ServerInfo* Arena::CreateMaybeMessage<::CSVCMsg_ServerInfo>(Arena*);
template<> ::CSVCMsg_SetPause* Arena::CreateMaybeMessage<::CSVCMsg_SetPause>(Arena*);
template<> ::CSVCMsg_SetView* Arena::CreateMaybeMessage<::CSVCMsg_SetView>(Arena*);
template<> ::CSVCMsg_Sounds* Arena::CreateMaybeMessage<::CSVCMsg_Sounds>(Arena*);
template<> ::CSVCMsg_Sounds_sounddata_t* Arena::CreateMaybeMessage<::CSVCMsg_Sounds_sounddata_t>(Arena*);
template<> ::CSVCMsg_SplitScreen* Arena::CreateMaybeMessage<::CSVCMsg_SplitScreen>(Arena*);
template<> ::CSVCMsg_TempEntities* Arena::CreateMaybeMessage<::CSVCMsg_TempEntities>(Arena*);
template<> ::CSVCMsg_UpdateStringTable* Arena::CreateMaybeMessage<::CSVCMsg_UpdateStringTable>(Arena*);
template<> ::CSVCMsg_UserMessage* Arena::CreateMaybeMessage<::CSVCMsg_UserMessage>(Arena*);
template<> ::CSVCMsg_VoiceData* Arena::CreateMaybeMessage<::CSVCMsg_VoiceData>(Arena*);
template<> ::CSVCMsg_VoiceInit* Arena::CreateMaybeMessage<::CSVCMsg_VoiceInit>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum NET_Messages : int {
  net_NOP = 0,
  net_Disconnect = 1,
  net_File = 2,
  net_SplitScreenUser = 3,
  net_Tick = 4,
  net_StringCmd = 5,
  net_SetConVar = 6,
  net_SignonState = 7,
  net_PlayerAvatarData = 100
};
bool NET_Messages_IsValid(int value);
constexpr NET_Messages NET_Messages_MIN = net_NOP;
constexpr NET_Messages NET_Messages_MAX = net_PlayerAvatarData;
constexpr int NET_Messages_ARRAYSIZE = NET_Messages_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NET_Messages_descriptor();
template<typename T>
inline const std::string& NET_Messages_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NET_Messages>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NET_Messages_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NET_Messages_descriptor(), enum_t_value);
}
inline bool NET_Messages_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, NET_Messages* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NET_Messages>(
    NET_Messages_descriptor(), name, value);
}
enum CLC_Messages : int {
  clc_ClientInfo = 8,
  clc_Move = 9,
  clc_VoiceData = 10,
  clc_BaselineAck = 11,
  clc_ListenEvents = 12,
  clc_RespondCvarValue = 13,
  clc_FileCRCCheck = 14,
  clc_LoadingProgress = 15,
  clc_SplitPlayerConnect = 16,
  clc_ClientMessage = 17,
  clc_CmdKeyValues = 18,
  clc_HltvReplay = 20
};
bool CLC_Messages_IsValid(int value);
constexpr CLC_Messages CLC_Messages_MIN = clc_ClientInfo;
constexpr CLC_Messages CLC_Messages_MAX = clc_HltvReplay;
constexpr int CLC_Messages_ARRAYSIZE = CLC_Messages_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CLC_Messages_descriptor();
template<typename T>
inline const std::string& CLC_Messages_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CLC_Messages>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CLC_Messages_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CLC_Messages_descriptor(), enum_t_value);
}
inline bool CLC_Messages_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CLC_Messages* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CLC_Messages>(
    CLC_Messages_descriptor(), name, value);
}
enum VoiceDataFormat_t : int {
  VOICEDATA_FORMAT_STEAM = 0,
  VOICEDATA_FORMAT_ENGINE = 1
};
bool VoiceDataFormat_t_IsValid(int value);
constexpr VoiceDataFormat_t VoiceDataFormat_t_MIN = VOICEDATA_FORMAT_STEAM;
constexpr VoiceDataFormat_t VoiceDataFormat_t_MAX = VOICEDATA_FORMAT_ENGINE;
constexpr int VoiceDataFormat_t_ARRAYSIZE = VoiceDataFormat_t_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VoiceDataFormat_t_descriptor();
template<typename T>
inline const std::string& VoiceDataFormat_t_Name(T enum_t_value) {
  static_assert(::std::is_same<T, VoiceDataFormat_t>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function VoiceDataFormat_t_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    VoiceDataFormat_t_descriptor(), enum_t_value);
}
inline bool VoiceDataFormat_t_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, VoiceDataFormat_t* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<VoiceDataFormat_t>(
    VoiceDataFormat_t_descriptor(), name, value);
}
enum ESplitScreenMessageType : int {
  MSG_SPLITSCREEN_ADDUSER = 0,
  MSG_SPLITSCREEN_REMOVEUSER = 1,
  MSG_SPLITSCREEN_TYPE_BITS = 1
};
bool ESplitScreenMessageType_IsValid(int value);
constexpr ESplitScreenMessageType ESplitScreenMessageType_MIN = MSG_SPLITSCREEN_ADDUSER;
constexpr ESplitScreenMessageType ESplitScreenMessageType_MAX = MSG_SPLITSCREEN_REMOVEUSER;
constexpr int ESplitScreenMessageType_ARRAYSIZE = ESplitScreenMessageType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESplitScreenMessageType_descriptor();
template<typename T>
inline const std::string& ESplitScreenMessageType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ESplitScreenMessageType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ESplitScreenMessageType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ESplitScreenMessageType_descriptor(), enum_t_value);
}
inline bool ESplitScreenMessageType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ESplitScreenMessageType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ESplitScreenMessageType>(
    ESplitScreenMessageType_descriptor(), name, value);
}
enum SVC_Messages : int {
  svc_ServerInfo = 8,
  svc_SendTable = 9,
  svc_ClassInfo = 10,
  svc_SetPause = 11,
  svc_CreateStringTable = 12,
  svc_UpdateStringTable = 13,
  svc_VoiceInit = 14,
  svc_VoiceData = 15,
  svc_Print = 16,
  svc_Sounds = 17,
  svc_SetView = 18,
  svc_FixAngle = 19,
  svc_CrosshairAngle = 20,
  svc_BSPDecal = 21,
  svc_SplitScreen = 22,
  svc_UserMessage = 23,
  svc_EntityMessage = 24,
  svc_GameEvent = 25,
  svc_PacketEntities = 26,
  svc_TempEntities = 27,
  svc_Prefetch = 28,
  svc_Menu = 29,
  svc_GameEventList = 30,
  svc_GetCvarValue = 31,
  svc_PaintmapData = 33,
  svc_CmdKeyValues = 34,
  svc_EncryptedData = 35,
  svc_HltvReplay = 36,
  svc_Broadcast_Command = 38
};
bool SVC_Messages_IsValid(int value);
constexpr SVC_Messages SVC_Messages_MIN = svc_ServerInfo;
constexpr SVC_Messages SVC_Messages_MAX = svc_Broadcast_Command;
constexpr int SVC_Messages_ARRAYSIZE = SVC_Messages_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SVC_Messages_descriptor();
template<typename T>
inline const std::string& SVC_Messages_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SVC_Messages>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SVC_Messages_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SVC_Messages_descriptor(), enum_t_value);
}
inline bool SVC_Messages_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SVC_Messages* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SVC_Messages>(
    SVC_Messages_descriptor(), name, value);
}
enum ReplayEventType_t : int {
  REPLAY_EVENT_CANCEL = 0,
  REPLAY_EVENT_DEATH = 1,
  REPLAY_EVENT_GENERIC = 2,
  REPLAY_EVENT_STUCK_NEED_FULL_UPDATE = 3
};
bool ReplayEventType_t_IsValid(int value);
constexpr ReplayEventType_t ReplayEventType_t_MIN = REPLAY_EVENT_CANCEL;
constexpr ReplayEventType_t ReplayEventType_t_MAX = REPLAY_EVENT_STUCK_NEED_FULL_UPDATE;
constexpr int ReplayEventType_t_ARRAYSIZE = ReplayEventType_t_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReplayEventType_t_descriptor();
template<typename T>
inline const std::string& ReplayEventType_t_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ReplayEventType_t>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ReplayEventType_t_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ReplayEventType_t_descriptor(), enum_t_value);
}
inline bool ReplayEventType_t_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ReplayEventType_t* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ReplayEventType_t>(
    ReplayEventType_t_descriptor(), name, value);
}
// ===================================================================

class CMsgVector final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgVector) */ {
 public:
  inline CMsgVector() : CMsgVector(nullptr) {}
  ~CMsgVector() override;
  explicit constexpr CMsgVector(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgVector(const CMsgVector& from);
  CMsgVector(CMsgVector&& from) noexcept
    : CMsgVector() {
    *this = ::std::move(from);
  }

  inline CMsgVector& operator=(const CMsgVector& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgVector& operator=(CMsgVector&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgVector& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgVector* internal_default_instance() {
    return reinterpret_cast<const CMsgVector*>(
               &_CMsgVector_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CMsgVector& a, CMsgVector& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgVector* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgVector* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgVector* New() const final {
    return new CMsgVector();
  }

  CMsgVector* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgVector>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgVector& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgVector& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgVector* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgVector";
  }
  protected:
  explicit CMsgVector(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // optional float x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // optional float y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // optional float z = 3;
  bool has_z() const;
  private:
  bool _internal_has_z() const;
  public:
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgVector)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float x_;
  float y_;
  float z_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgVector2D final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgVector2D) */ {
 public:
  inline CMsgVector2D() : CMsgVector2D(nullptr) {}
  ~CMsgVector2D() override;
  explicit constexpr CMsgVector2D(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgVector2D(const CMsgVector2D& from);
  CMsgVector2D(CMsgVector2D&& from) noexcept
    : CMsgVector2D() {
    *this = ::std::move(from);
  }

  inline CMsgVector2D& operator=(const CMsgVector2D& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgVector2D& operator=(CMsgVector2D&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgVector2D& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgVector2D* internal_default_instance() {
    return reinterpret_cast<const CMsgVector2D*>(
               &_CMsgVector2D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CMsgVector2D& a, CMsgVector2D& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgVector2D* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgVector2D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgVector2D* New() const final {
    return new CMsgVector2D();
  }

  CMsgVector2D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgVector2D>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgVector2D& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgVector2D& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgVector2D* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgVector2D";
  }
  protected:
  explicit CMsgVector2D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // optional float x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // optional float y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgVector2D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float x_;
  float y_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgQAngle final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgQAngle) */ {
 public:
  inline CMsgQAngle() : CMsgQAngle(nullptr) {}
  ~CMsgQAngle() override;
  explicit constexpr CMsgQAngle(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgQAngle(const CMsgQAngle& from);
  CMsgQAngle(CMsgQAngle&& from) noexcept
    : CMsgQAngle() {
    *this = ::std::move(from);
  }

  inline CMsgQAngle& operator=(const CMsgQAngle& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgQAngle& operator=(CMsgQAngle&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgQAngle& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgQAngle* internal_default_instance() {
    return reinterpret_cast<const CMsgQAngle*>(
               &_CMsgQAngle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CMsgQAngle& a, CMsgQAngle& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgQAngle* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgQAngle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgQAngle* New() const final {
    return new CMsgQAngle();
  }

  CMsgQAngle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgQAngle>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgQAngle& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgQAngle& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgQAngle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgQAngle";
  }
  protected:
  explicit CMsgQAngle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // optional float x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // optional float y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // optional float z = 3;
  bool has_z() const;
  private:
  bool _internal_has_z() const;
  public:
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgQAngle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float x_;
  float y_;
  float z_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgRGBA final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgRGBA) */ {
 public:
  inline CMsgRGBA() : CMsgRGBA(nullptr) {}
  ~CMsgRGBA() override;
  explicit constexpr CMsgRGBA(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgRGBA(const CMsgRGBA& from);
  CMsgRGBA(CMsgRGBA&& from) noexcept
    : CMsgRGBA() {
    *this = ::std::move(from);
  }

  inline CMsgRGBA& operator=(const CMsgRGBA& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgRGBA& operator=(CMsgRGBA&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgRGBA& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgRGBA* internal_default_instance() {
    return reinterpret_cast<const CMsgRGBA*>(
               &_CMsgRGBA_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CMsgRGBA& a, CMsgRGBA& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgRGBA* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgRGBA* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgRGBA* New() const final {
    return new CMsgRGBA();
  }

  CMsgRGBA* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgRGBA>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgRGBA& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsgRGBA& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgRGBA* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgRGBA";
  }
  protected:
  explicit CMsgRGBA(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRFieldNumber = 1,
    kGFieldNumber = 2,
    kBFieldNumber = 3,
    kAFieldNumber = 4,
  };
  // optional int32 r = 1;
  bool has_r() const;
  private:
  bool _internal_has_r() const;
  public:
  void clear_r();
  ::PROTOBUF_NAMESPACE_ID::int32 r() const;
  void set_r(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_r() const;
  void _internal_set_r(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 g = 2;
  bool has_g() const;
  private:
  bool _internal_has_g() const;
  public:
  void clear_g();
  ::PROTOBUF_NAMESPACE_ID::int32 g() const;
  void set_g(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_g() const;
  void _internal_set_g(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 b = 3;
  bool has_b() const;
  private:
  bool _internal_has_b() const;
  public:
  void clear_b();
  ::PROTOBUF_NAMESPACE_ID::int32 b() const;
  void set_b(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_b() const;
  void _internal_set_b(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 a = 4;
  bool has_a() const;
  private:
  bool _internal_has_a() const;
  public:
  void clear_a();
  ::PROTOBUF_NAMESPACE_ID::int32 a() const;
  void set_a(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_a() const;
  void _internal_set_a(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgRGBA)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 r_;
  ::PROTOBUF_NAMESPACE_ID::int32 g_;
  ::PROTOBUF_NAMESPACE_ID::int32 b_;
  ::PROTOBUF_NAMESPACE_ID::int32 a_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CNETMsg_Tick final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CNETMsg_Tick) */ {
 public:
  inline CNETMsg_Tick() : CNETMsg_Tick(nullptr) {}
  ~CNETMsg_Tick() override;
  explicit constexpr CNETMsg_Tick(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CNETMsg_Tick(const CNETMsg_Tick& from);
  CNETMsg_Tick(CNETMsg_Tick&& from) noexcept
    : CNETMsg_Tick() {
    *this = ::std::move(from);
  }

  inline CNETMsg_Tick& operator=(const CNETMsg_Tick& from) {
    CopyFrom(from);
    return *this;
  }
  inline CNETMsg_Tick& operator=(CNETMsg_Tick&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CNETMsg_Tick& default_instance() {
    return *internal_default_instance();
  }
  static inline const CNETMsg_Tick* internal_default_instance() {
    return reinterpret_cast<const CNETMsg_Tick*>(
               &_CNETMsg_Tick_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CNETMsg_Tick& a, CNETMsg_Tick& b) {
    a.Swap(&b);
  }
  inline void Swap(CNETMsg_Tick* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CNETMsg_Tick* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CNETMsg_Tick* New() const final {
    return new CNETMsg_Tick();
  }

  CNETMsg_Tick* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CNETMsg_Tick>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CNETMsg_Tick& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CNETMsg_Tick& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CNETMsg_Tick* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CNETMsg_Tick";
  }
  protected:
  explicit CNETMsg_Tick(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTickFieldNumber = 1,
    kHostComputationtimeFieldNumber = 4,
    kHostComputationtimeStdDeviationFieldNumber = 5,
    kHostFramestarttimeStdDeviationFieldNumber = 6,
    kHltvReplayFlagsFieldNumber = 7,
  };
  // optional uint32 tick = 1;
  bool has_tick() const;
  private:
  bool _internal_has_tick() const;
  public:
  void clear_tick();
  ::PROTOBUF_NAMESPACE_ID::uint32 tick() const;
  void set_tick(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tick() const;
  void _internal_set_tick(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 host_computationtime = 4;
  bool has_host_computationtime() const;
  private:
  bool _internal_has_host_computationtime() const;
  public:
  void clear_host_computationtime();
  ::PROTOBUF_NAMESPACE_ID::uint32 host_computationtime() const;
  void set_host_computationtime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_host_computationtime() const;
  void _internal_set_host_computationtime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 host_computationtime_std_deviation = 5;
  bool has_host_computationtime_std_deviation() const;
  private:
  bool _internal_has_host_computationtime_std_deviation() const;
  public:
  void clear_host_computationtime_std_deviation();
  ::PROTOBUF_NAMESPACE_ID::uint32 host_computationtime_std_deviation() const;
  void set_host_computationtime_std_deviation(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_host_computationtime_std_deviation() const;
  void _internal_set_host_computationtime_std_deviation(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 host_framestarttime_std_deviation = 6;
  bool has_host_framestarttime_std_deviation() const;
  private:
  bool _internal_has_host_framestarttime_std_deviation() const;
  public:
  void clear_host_framestarttime_std_deviation();
  ::PROTOBUF_NAMESPACE_ID::uint32 host_framestarttime_std_deviation() const;
  void set_host_framestarttime_std_deviation(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_host_framestarttime_std_deviation() const;
  void _internal_set_host_framestarttime_std_deviation(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 hltv_replay_flags = 7;
  bool has_hltv_replay_flags() const;
  private:
  bool _internal_has_hltv_replay_flags() const;
  public:
  void clear_hltv_replay_flags();
  ::PROTOBUF_NAMESPACE_ID::uint32 hltv_replay_flags() const;
  void set_hltv_replay_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_hltv_replay_flags() const;
  void _internal_set_hltv_replay_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CNETMsg_Tick)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tick_;
  ::PROTOBUF_NAMESPACE_ID::uint32 host_computationtime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 host_computationtime_std_deviation_;
  ::PROTOBUF_NAMESPACE_ID::uint32 host_framestarttime_std_deviation_;
  ::PROTOBUF_NAMESPACE_ID::uint32 hltv_replay_flags_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CNETMsg_StringCmd final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CNETMsg_StringCmd) */ {
 public:
  inline CNETMsg_StringCmd() : CNETMsg_StringCmd(nullptr) {}
  ~CNETMsg_StringCmd() override;
  explicit constexpr CNETMsg_StringCmd(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CNETMsg_StringCmd(const CNETMsg_StringCmd& from);
  CNETMsg_StringCmd(CNETMsg_StringCmd&& from) noexcept
    : CNETMsg_StringCmd() {
    *this = ::std::move(from);
  }

  inline CNETMsg_StringCmd& operator=(const CNETMsg_StringCmd& from) {
    CopyFrom(from);
    return *this;
  }
  inline CNETMsg_StringCmd& operator=(CNETMsg_StringCmd&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CNETMsg_StringCmd& default_instance() {
    return *internal_default_instance();
  }
  static inline const CNETMsg_StringCmd* internal_default_instance() {
    return reinterpret_cast<const CNETMsg_StringCmd*>(
               &_CNETMsg_StringCmd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CNETMsg_StringCmd& a, CNETMsg_StringCmd& b) {
    a.Swap(&b);
  }
  inline void Swap(CNETMsg_StringCmd* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CNETMsg_StringCmd* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CNETMsg_StringCmd* New() const final {
    return new CNETMsg_StringCmd();
  }

  CNETMsg_StringCmd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CNETMsg_StringCmd>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CNETMsg_StringCmd& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CNETMsg_StringCmd& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CNETMsg_StringCmd* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CNETMsg_StringCmd";
  }
  protected:
  explicit CNETMsg_StringCmd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
  };
  // optional string command = 1;
  bool has_command() const;
  private:
  bool _internal_has_command() const;
  public:
  void clear_command();
  const std::string& command() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_command(ArgT0&& arg0, ArgT... args);
  std::string* mutable_command();
  PROTOBUF_MUST_USE_RESULT std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // @@protoc_insertion_point(class_scope:CNETMsg_StringCmd)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CNETMsg_SignonState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CNETMsg_SignonState) */ {
 public:
  inline CNETMsg_SignonState() : CNETMsg_SignonState(nullptr) {}
  ~CNETMsg_SignonState() override;
  explicit constexpr CNETMsg_SignonState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CNETMsg_SignonState(const CNETMsg_SignonState& from);
  CNETMsg_SignonState(CNETMsg_SignonState&& from) noexcept
    : CNETMsg_SignonState() {
    *this = ::std::move(from);
  }

  inline CNETMsg_SignonState& operator=(const CNETMsg_SignonState& from) {
    CopyFrom(from);
    return *this;
  }
  inline CNETMsg_SignonState& operator=(CNETMsg_SignonState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CNETMsg_SignonState& default_instance() {
    return *internal_default_instance();
  }
  static inline const CNETMsg_SignonState* internal_default_instance() {
    return reinterpret_cast<const CNETMsg_SignonState*>(
               &_CNETMsg_SignonState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CNETMsg_SignonState& a, CNETMsg_SignonState& b) {
    a.Swap(&b);
  }
  inline void Swap(CNETMsg_SignonState* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CNETMsg_SignonState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CNETMsg_SignonState* New() const final {
    return new CNETMsg_SignonState();
  }

  CNETMsg_SignonState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CNETMsg_SignonState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CNETMsg_SignonState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CNETMsg_SignonState& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CNETMsg_SignonState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CNETMsg_SignonState";
  }
  protected:
  explicit CNETMsg_SignonState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayersNetworkidsFieldNumber = 4,
    kMapNameFieldNumber = 5,
    kSignonStateFieldNumber = 1,
    kSpawnCountFieldNumber = 2,
    kNumServerPlayersFieldNumber = 3,
  };
  // repeated string players_networkids = 4;
  int players_networkids_size() const;
  private:
  int _internal_players_networkids_size() const;
  public:
  void clear_players_networkids();
  const std::string& players_networkids(int index) const;
  std::string* mutable_players_networkids(int index);
  void set_players_networkids(int index, const std::string& value);
  void set_players_networkids(int index, std::string&& value);
  void set_players_networkids(int index, const char* value);
  void set_players_networkids(int index, const char* value, size_t size);
  std::string* add_players_networkids();
  void add_players_networkids(const std::string& value);
  void add_players_networkids(std::string&& value);
  void add_players_networkids(const char* value);
  void add_players_networkids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& players_networkids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_players_networkids();
  private:
  const std::string& _internal_players_networkids(int index) const;
  std::string* _internal_add_players_networkids();
  public:

  // optional string map_name = 5;
  bool has_map_name() const;
  private:
  bool _internal_has_map_name() const;
  public:
  void clear_map_name();
  const std::string& map_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_map_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_map_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_map_name();
  void set_allocated_map_name(std::string* map_name);
  private:
  const std::string& _internal_map_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_map_name(const std::string& value);
  std::string* _internal_mutable_map_name();
  public:

  // optional uint32 signon_state = 1;
  bool has_signon_state() const;
  private:
  bool _internal_has_signon_state() const;
  public:
  void clear_signon_state();
  ::PROTOBUF_NAMESPACE_ID::uint32 signon_state() const;
  void set_signon_state(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_signon_state() const;
  void _internal_set_signon_state(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 spawn_count = 2;
  bool has_spawn_count() const;
  private:
  bool _internal_has_spawn_count() const;
  public:
  void clear_spawn_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 spawn_count() const;
  void set_spawn_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_spawn_count() const;
  void _internal_set_spawn_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 num_server_players = 3;
  bool has_num_server_players() const;
  private:
  bool _internal_has_num_server_players() const;
  public:
  void clear_num_server_players();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_server_players() const;
  void set_num_server_players(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_server_players() const;
  void _internal_set_num_server_players(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CNETMsg_SignonState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> players_networkids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr map_name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 signon_state_;
  ::PROTOBUF_NAMESPACE_ID::uint32 spawn_count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_server_players_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsg_CVars_CVar final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsg_CVars.CVar) */ {
 public:
  inline CMsg_CVars_CVar() : CMsg_CVars_CVar(nullptr) {}
  ~CMsg_CVars_CVar() override;
  explicit constexpr CMsg_CVars_CVar(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsg_CVars_CVar(const CMsg_CVars_CVar& from);
  CMsg_CVars_CVar(CMsg_CVars_CVar&& from) noexcept
    : CMsg_CVars_CVar() {
    *this = ::std::move(from);
  }

  inline CMsg_CVars_CVar& operator=(const CMsg_CVars_CVar& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsg_CVars_CVar& operator=(CMsg_CVars_CVar&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsg_CVars_CVar& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsg_CVars_CVar* internal_default_instance() {
    return reinterpret_cast<const CMsg_CVars_CVar*>(
               &_CMsg_CVars_CVar_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CMsg_CVars_CVar& a, CMsg_CVars_CVar& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsg_CVars_CVar* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsg_CVars_CVar* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsg_CVars_CVar* New() const final {
    return new CMsg_CVars_CVar();
  }

  CMsg_CVars_CVar* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsg_CVars_CVar>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsg_CVars_CVar& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsg_CVars_CVar& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsg_CVars_CVar* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsg_CVars.CVar";
  }
  protected:
  explicit CMsg_CVars_CVar(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kValueFieldNumber = 2,
    kDictionaryNameFieldNumber = 3,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_MUST_USE_RESULT std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // optional uint32 dictionary_name = 3;
  bool has_dictionary_name() const;
  private:
  bool _internal_has_dictionary_name() const;
  public:
  void clear_dictionary_name();
  ::PROTOBUF_NAMESPACE_ID::uint32 dictionary_name() const;
  void set_dictionary_name(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_dictionary_name() const;
  void _internal_set_dictionary_name(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsg_CVars.CVar)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::uint32 dictionary_name_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsg_CVars final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsg_CVars) */ {
 public:
  inline CMsg_CVars() : CMsg_CVars(nullptr) {}
  ~CMsg_CVars() override;
  explicit constexpr CMsg_CVars(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsg_CVars(const CMsg_CVars& from);
  CMsg_CVars(CMsg_CVars&& from) noexcept
    : CMsg_CVars() {
    *this = ::std::move(from);
  }

  inline CMsg_CVars& operator=(const CMsg_CVars& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsg_CVars& operator=(CMsg_CVars&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsg_CVars& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsg_CVars* internal_default_instance() {
    return reinterpret_cast<const CMsg_CVars*>(
               &_CMsg_CVars_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CMsg_CVars& a, CMsg_CVars& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsg_CVars* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsg_CVars* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsg_CVars* New() const final {
    return new CMsg_CVars();
  }

  CMsg_CVars* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsg_CVars>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsg_CVars& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMsg_CVars& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsg_CVars* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsg_CVars";
  }
  protected:
  explicit CMsg_CVars(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsg_CVars_CVar CVar;

  // accessors -------------------------------------------------------

  enum : int {
    kCvarsFieldNumber = 1,
  };
  // repeated .CMsg_CVars.CVar cvars = 1;
  int cvars_size() const;
  private:
  int _internal_cvars_size() const;
  public:
  void clear_cvars();
  ::CMsg_CVars_CVar* mutable_cvars(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsg_CVars_CVar >*
      mutable_cvars();
  private:
  const ::CMsg_CVars_CVar& _internal_cvars(int index) const;
  ::CMsg_CVars_CVar* _internal_add_cvars();
  public:
  const ::CMsg_CVars_CVar& cvars(int index) const;
  ::CMsg_CVars_CVar* add_cvars();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsg_CVars_CVar >&
      cvars() const;

  // @@protoc_insertion_point(class_scope:CMsg_CVars)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsg_CVars_CVar > cvars_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CNETMsg_SetConVar final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CNETMsg_SetConVar) */ {
 public:
  inline CNETMsg_SetConVar() : CNETMsg_SetConVar(nullptr) {}
  ~CNETMsg_SetConVar() override;
  explicit constexpr CNETMsg_SetConVar(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CNETMsg_SetConVar(const CNETMsg_SetConVar& from);
  CNETMsg_SetConVar(CNETMsg_SetConVar&& from) noexcept
    : CNETMsg_SetConVar() {
    *this = ::std::move(from);
  }

  inline CNETMsg_SetConVar& operator=(const CNETMsg_SetConVar& from) {
    CopyFrom(from);
    return *this;
  }
  inline CNETMsg_SetConVar& operator=(CNETMsg_SetConVar&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CNETMsg_SetConVar& default_instance() {
    return *internal_default_instance();
  }
  static inline const CNETMsg_SetConVar* internal_default_instance() {
    return reinterpret_cast<const CNETMsg_SetConVar*>(
               &_CNETMsg_SetConVar_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CNETMsg_SetConVar& a, CNETMsg_SetConVar& b) {
    a.Swap(&b);
  }
  inline void Swap(CNETMsg_SetConVar* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CNETMsg_SetConVar* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CNETMsg_SetConVar* New() const final {
    return new CNETMsg_SetConVar();
  }

  CNETMsg_SetConVar* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CNETMsg_SetConVar>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CNETMsg_SetConVar& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CNETMsg_SetConVar& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CNETMsg_SetConVar* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CNETMsg_SetConVar";
  }
  protected:
  explicit CNETMsg_SetConVar(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConvarsFieldNumber = 1,
  };
  // optional .CMsg_CVars convars = 1;
  bool has_convars() const;
  private:
  bool _internal_has_convars() const;
  public:
  void clear_convars();
  const ::CMsg_CVars& convars() const;
  PROTOBUF_MUST_USE_RESULT ::CMsg_CVars* release_convars();
  ::CMsg_CVars* mutable_convars();
  void set_allocated_convars(::CMsg_CVars* convars);
  private:
  const ::CMsg_CVars& _internal_convars() const;
  ::CMsg_CVars* _internal_mutable_convars();
  public:
  void unsafe_arena_set_allocated_convars(
      ::CMsg_CVars* convars);
  ::CMsg_CVars* unsafe_arena_release_convars();

  // @@protoc_insertion_point(class_scope:CNETMsg_SetConVar)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CMsg_CVars* convars_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CNETMsg_NOP final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CNETMsg_NOP) */ {
 public:
  inline CNETMsg_NOP() : CNETMsg_NOP(nullptr) {}
  explicit constexpr CNETMsg_NOP(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CNETMsg_NOP(const CNETMsg_NOP& from);
  CNETMsg_NOP(CNETMsg_NOP&& from) noexcept
    : CNETMsg_NOP() {
    *this = ::std::move(from);
  }

  inline CNETMsg_NOP& operator=(const CNETMsg_NOP& from) {
    CopyFrom(from);
    return *this;
  }
  inline CNETMsg_NOP& operator=(CNETMsg_NOP&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CNETMsg_NOP& default_instance() {
    return *internal_default_instance();
  }
  static inline const CNETMsg_NOP* internal_default_instance() {
    return reinterpret_cast<const CNETMsg_NOP*>(
               &_CNETMsg_NOP_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CNETMsg_NOP& a, CNETMsg_NOP& b) {
    a.Swap(&b);
  }
  inline void Swap(CNETMsg_NOP* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CNETMsg_NOP* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CNETMsg_NOP* New() const final {
    return new CNETMsg_NOP();
  }

  CNETMsg_NOP* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CNETMsg_NOP>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CNETMsg_NOP& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CNETMsg_NOP& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CNETMsg_NOP";
  }
  protected:
  explicit CNETMsg_NOP(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CNETMsg_NOP)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CNETMsg_Disconnect final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CNETMsg_Disconnect) */ {
 public:
  inline CNETMsg_Disconnect() : CNETMsg_Disconnect(nullptr) {}
  ~CNETMsg_Disconnect() override;
  explicit constexpr CNETMsg_Disconnect(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CNETMsg_Disconnect(const CNETMsg_Disconnect& from);
  CNETMsg_Disconnect(CNETMsg_Disconnect&& from) noexcept
    : CNETMsg_Disconnect() {
    *this = ::std::move(from);
  }

  inline CNETMsg_Disconnect& operator=(const CNETMsg_Disconnect& from) {
    CopyFrom(from);
    return *this;
  }
  inline CNETMsg_Disconnect& operator=(CNETMsg_Disconnect&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CNETMsg_Disconnect& default_instance() {
    return *internal_default_instance();
  }
  static inline const CNETMsg_Disconnect* internal_default_instance() {
    return reinterpret_cast<const CNETMsg_Disconnect*>(
               &_CNETMsg_Disconnect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CNETMsg_Disconnect& a, CNETMsg_Disconnect& b) {
    a.Swap(&b);
  }
  inline void Swap(CNETMsg_Disconnect* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CNETMsg_Disconnect* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CNETMsg_Disconnect* New() const final {
    return new CNETMsg_Disconnect();
  }

  CNETMsg_Disconnect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CNETMsg_Disconnect>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CNETMsg_Disconnect& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CNETMsg_Disconnect& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CNETMsg_Disconnect* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CNETMsg_Disconnect";
  }
  protected:
  explicit CNETMsg_Disconnect(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 1,
  };
  // optional string text = 1;
  bool has_text() const;
  private:
  bool _internal_has_text() const;
  public:
  void clear_text();
  const std::string& text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_text();
  PROTOBUF_MUST_USE_RESULT std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // @@protoc_insertion_point(class_scope:CNETMsg_Disconnect)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CNETMsg_File final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CNETMsg_File) */ {
 public:
  inline CNETMsg_File() : CNETMsg_File(nullptr) {}
  ~CNETMsg_File() override;
  explicit constexpr CNETMsg_File(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CNETMsg_File(const CNETMsg_File& from);
  CNETMsg_File(CNETMsg_File&& from) noexcept
    : CNETMsg_File() {
    *this = ::std::move(from);
  }

  inline CNETMsg_File& operator=(const CNETMsg_File& from) {
    CopyFrom(from);
    return *this;
  }
  inline CNETMsg_File& operator=(CNETMsg_File&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CNETMsg_File& default_instance() {
    return *internal_default_instance();
  }
  static inline const CNETMsg_File* internal_default_instance() {
    return reinterpret_cast<const CNETMsg_File*>(
               &_CNETMsg_File_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CNETMsg_File& a, CNETMsg_File& b) {
    a.Swap(&b);
  }
  inline void Swap(CNETMsg_File* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CNETMsg_File* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CNETMsg_File* New() const final {
    return new CNETMsg_File();
  }

  CNETMsg_File* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CNETMsg_File>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CNETMsg_File& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CNETMsg_File& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CNETMsg_File* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CNETMsg_File";
  }
  protected:
  explicit CNETMsg_File(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileNameFieldNumber = 2,
    kTransferIdFieldNumber = 1,
    kIsReplayDemoFileFieldNumber = 3,
    kDenyFieldNumber = 4,
  };
  // optional string file_name = 2;
  bool has_file_name() const;
  private:
  bool _internal_has_file_name() const;
  public:
  void clear_file_name();
  const std::string& file_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_file_name();
  void set_allocated_file_name(std::string* file_name);
  private:
  const std::string& _internal_file_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_name(const std::string& value);
  std::string* _internal_mutable_file_name();
  public:

  // optional int32 transfer_id = 1;
  bool has_transfer_id() const;
  private:
  bool _internal_has_transfer_id() const;
  public:
  void clear_transfer_id();
  ::PROTOBUF_NAMESPACE_ID::int32 transfer_id() const;
  void set_transfer_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_transfer_id() const;
  void _internal_set_transfer_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool is_replay_demo_file = 3;
  bool has_is_replay_demo_file() const;
  private:
  bool _internal_has_is_replay_demo_file() const;
  public:
  void clear_is_replay_demo_file();
  bool is_replay_demo_file() const;
  void set_is_replay_demo_file(bool value);
  private:
  bool _internal_is_replay_demo_file() const;
  void _internal_set_is_replay_demo_file(bool value);
  public:

  // optional bool deny = 4;
  bool has_deny() const;
  private:
  bool _internal_has_deny() const;
  public:
  void clear_deny();
  bool deny() const;
  void set_deny(bool value);
  private:
  bool _internal_deny() const;
  void _internal_set_deny(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CNETMsg_File)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 transfer_id_;
  bool is_replay_demo_file_;
  bool deny_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CNETMsg_SplitScreenUser final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CNETMsg_SplitScreenUser) */ {
 public:
  inline CNETMsg_SplitScreenUser() : CNETMsg_SplitScreenUser(nullptr) {}
  ~CNETMsg_SplitScreenUser() override;
  explicit constexpr CNETMsg_SplitScreenUser(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CNETMsg_SplitScreenUser(const CNETMsg_SplitScreenUser& from);
  CNETMsg_SplitScreenUser(CNETMsg_SplitScreenUser&& from) noexcept
    : CNETMsg_SplitScreenUser() {
    *this = ::std::move(from);
  }

  inline CNETMsg_SplitScreenUser& operator=(const CNETMsg_SplitScreenUser& from) {
    CopyFrom(from);
    return *this;
  }
  inline CNETMsg_SplitScreenUser& operator=(CNETMsg_SplitScreenUser&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CNETMsg_SplitScreenUser& default_instance() {
    return *internal_default_instance();
  }
  static inline const CNETMsg_SplitScreenUser* internal_default_instance() {
    return reinterpret_cast<const CNETMsg_SplitScreenUser*>(
               &_CNETMsg_SplitScreenUser_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(CNETMsg_SplitScreenUser& a, CNETMsg_SplitScreenUser& b) {
    a.Swap(&b);
  }
  inline void Swap(CNETMsg_SplitScreenUser* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CNETMsg_SplitScreenUser* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CNETMsg_SplitScreenUser* New() const final {
    return new CNETMsg_SplitScreenUser();
  }

  CNETMsg_SplitScreenUser* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CNETMsg_SplitScreenUser>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CNETMsg_SplitScreenUser& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CNETMsg_SplitScreenUser& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CNETMsg_SplitScreenUser* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CNETMsg_SplitScreenUser";
  }
  protected:
  explicit CNETMsg_SplitScreenUser(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSlotFieldNumber = 1,
  };
  // optional int32 slot = 1;
  bool has_slot() const;
  private:
  bool _internal_has_slot() const;
  public:
  void clear_slot();
  ::PROTOBUF_NAMESPACE_ID::int32 slot() const;
  void set_slot(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_slot() const;
  void _internal_set_slot(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CNETMsg_SplitScreenUser)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 slot_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CNETMsg_PlayerAvatarData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CNETMsg_PlayerAvatarData) */ {
 public:
  inline CNETMsg_PlayerAvatarData() : CNETMsg_PlayerAvatarData(nullptr) {}
  ~CNETMsg_PlayerAvatarData() override;
  explicit constexpr CNETMsg_PlayerAvatarData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CNETMsg_PlayerAvatarData(const CNETMsg_PlayerAvatarData& from);
  CNETMsg_PlayerAvatarData(CNETMsg_PlayerAvatarData&& from) noexcept
    : CNETMsg_PlayerAvatarData() {
    *this = ::std::move(from);
  }

  inline CNETMsg_PlayerAvatarData& operator=(const CNETMsg_PlayerAvatarData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CNETMsg_PlayerAvatarData& operator=(CNETMsg_PlayerAvatarData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CNETMsg_PlayerAvatarData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CNETMsg_PlayerAvatarData* internal_default_instance() {
    return reinterpret_cast<const CNETMsg_PlayerAvatarData*>(
               &_CNETMsg_PlayerAvatarData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(CNETMsg_PlayerAvatarData& a, CNETMsg_PlayerAvatarData& b) {
    a.Swap(&b);
  }
  inline void Swap(CNETMsg_PlayerAvatarData* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CNETMsg_PlayerAvatarData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CNETMsg_PlayerAvatarData* New() const final {
    return new CNETMsg_PlayerAvatarData();
  }

  CNETMsg_PlayerAvatarData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CNETMsg_PlayerAvatarData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CNETMsg_PlayerAvatarData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CNETMsg_PlayerAvatarData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CNETMsg_PlayerAvatarData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CNETMsg_PlayerAvatarData";
  }
  protected:
  explicit CNETMsg_PlayerAvatarData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRgbFieldNumber = 2,
    kAccountidFieldNumber = 1,
  };
  // optional bytes rgb = 2;
  bool has_rgb() const;
  private:
  bool _internal_has_rgb() const;
  public:
  void clear_rgb();
  const std::string& rgb() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_rgb(ArgT0&& arg0, ArgT... args);
  std::string* mutable_rgb();
  PROTOBUF_MUST_USE_RESULT std::string* release_rgb();
  void set_allocated_rgb(std::string* rgb);
  private:
  const std::string& _internal_rgb() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rgb(const std::string& value);
  std::string* _internal_mutable_rgb();
  public:

  // optional uint32 accountid = 1;
  bool has_accountid() const;
  private:
  bool _internal_has_accountid() const;
  public:
  void clear_accountid();
  ::PROTOBUF_NAMESPACE_ID::uint32 accountid() const;
  void set_accountid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_accountid() const;
  void _internal_set_accountid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CNETMsg_PlayerAvatarData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rgb_;
  ::PROTOBUF_NAMESPACE_ID::uint32 accountid_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CCLCMsg_ClientInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCLCMsg_ClientInfo) */ {
 public:
  inline CCLCMsg_ClientInfo() : CCLCMsg_ClientInfo(nullptr) {}
  ~CCLCMsg_ClientInfo() override;
  explicit constexpr CCLCMsg_ClientInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCLCMsg_ClientInfo(const CCLCMsg_ClientInfo& from);
  CCLCMsg_ClientInfo(CCLCMsg_ClientInfo&& from) noexcept
    : CCLCMsg_ClientInfo() {
    *this = ::std::move(from);
  }

  inline CCLCMsg_ClientInfo& operator=(const CCLCMsg_ClientInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCLCMsg_ClientInfo& operator=(CCLCMsg_ClientInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCLCMsg_ClientInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCLCMsg_ClientInfo* internal_default_instance() {
    return reinterpret_cast<const CCLCMsg_ClientInfo*>(
               &_CCLCMsg_ClientInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(CCLCMsg_ClientInfo& a, CCLCMsg_ClientInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CCLCMsg_ClientInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCLCMsg_ClientInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CCLCMsg_ClientInfo* New() const final {
    return new CCLCMsg_ClientInfo();
  }

  CCLCMsg_ClientInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CCLCMsg_ClientInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CCLCMsg_ClientInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CCLCMsg_ClientInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCLCMsg_ClientInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCLCMsg_ClientInfo";
  }
  protected:
  explicit CCLCMsg_ClientInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCustomFilesFieldNumber = 7,
    kFriendsNameFieldNumber = 6,
    kSendTableCrcFieldNumber = 1,
    kServerCountFieldNumber = 2,
    kIsHltvFieldNumber = 3,
    kIsReplayFieldNumber = 4,
    kFriendsIdFieldNumber = 5,
  };
  // repeated fixed32 custom_files = 7;
  int custom_files_size() const;
  private:
  int _internal_custom_files_size() const;
  public:
  void clear_custom_files();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_custom_files(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_custom_files() const;
  void _internal_add_custom_files(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_custom_files();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 custom_files(int index) const;
  void set_custom_files(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_custom_files(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      custom_files() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_custom_files();

  // optional string friends_name = 6;
  bool has_friends_name() const;
  private:
  bool _internal_has_friends_name() const;
  public:
  void clear_friends_name();
  const std::string& friends_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_friends_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_friends_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_friends_name();
  void set_allocated_friends_name(std::string* friends_name);
  private:
  const std::string& _internal_friends_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_friends_name(const std::string& value);
  std::string* _internal_mutable_friends_name();
  public:

  // optional fixed32 send_table_crc = 1;
  bool has_send_table_crc() const;
  private:
  bool _internal_has_send_table_crc() const;
  public:
  void clear_send_table_crc();
  ::PROTOBUF_NAMESPACE_ID::uint32 send_table_crc() const;
  void set_send_table_crc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_send_table_crc() const;
  void _internal_set_send_table_crc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 server_count = 2;
  bool has_server_count() const;
  private:
  bool _internal_has_server_count() const;
  public:
  void clear_server_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 server_count() const;
  void set_server_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_server_count() const;
  void _internal_set_server_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool is_hltv = 3;
  bool has_is_hltv() const;
  private:
  bool _internal_has_is_hltv() const;
  public:
  void clear_is_hltv();
  bool is_hltv() const;
  void set_is_hltv(bool value);
  private:
  bool _internal_is_hltv() const;
  void _internal_set_is_hltv(bool value);
  public:

  // optional bool is_replay = 4;
  bool has_is_replay() const;
  private:
  bool _internal_has_is_replay() const;
  public:
  void clear_is_replay();
  bool is_replay() const;
  void set_is_replay(bool value);
  private:
  bool _internal_is_replay() const;
  void _internal_set_is_replay(bool value);
  public:

  // optional uint32 friends_id = 5;
  bool has_friends_id() const;
  private:
  bool _internal_has_friends_id() const;
  public:
  void clear_friends_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 friends_id() const;
  void set_friends_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_friends_id() const;
  void _internal_set_friends_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CCLCMsg_ClientInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > custom_files_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr friends_name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 send_table_crc_;
  ::PROTOBUF_NAMESPACE_ID::uint32 server_count_;
  bool is_hltv_;
  bool is_replay_;
  ::PROTOBUF_NAMESPACE_ID::uint32 friends_id_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CCLCMsg_Move final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCLCMsg_Move) */ {
 public:
  inline CCLCMsg_Move() : CCLCMsg_Move(nullptr) {}
  ~CCLCMsg_Move() override;
  explicit constexpr CCLCMsg_Move(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCLCMsg_Move(const CCLCMsg_Move& from);
  CCLCMsg_Move(CCLCMsg_Move&& from) noexcept
    : CCLCMsg_Move() {
    *this = ::std::move(from);
  }

  inline CCLCMsg_Move& operator=(const CCLCMsg_Move& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCLCMsg_Move& operator=(CCLCMsg_Move&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCLCMsg_Move& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCLCMsg_Move* internal_default_instance() {
    return reinterpret_cast<const CCLCMsg_Move*>(
               &_CCLCMsg_Move_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(CCLCMsg_Move& a, CCLCMsg_Move& b) {
    a.Swap(&b);
  }
  inline void Swap(CCLCMsg_Move* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCLCMsg_Move* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CCLCMsg_Move* New() const final {
    return new CCLCMsg_Move();
  }

  CCLCMsg_Move* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CCLCMsg_Move>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CCLCMsg_Move& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CCLCMsg_Move& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCLCMsg_Move* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCLCMsg_Move";
  }
  protected:
  explicit CCLCMsg_Move(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 3,
    kNumBackupCommandsFieldNumber = 1,
    kNumNewCommandsFieldNumber = 2,
  };
  // optional bytes data = 3;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_MUST_USE_RESULT std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // optional uint32 num_backup_commands = 1;
  bool has_num_backup_commands() const;
  private:
  bool _internal_has_num_backup_commands() const;
  public:
  void clear_num_backup_commands();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_backup_commands() const;
  void set_num_backup_commands(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_backup_commands() const;
  void _internal_set_num_backup_commands(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 num_new_commands = 2;
  bool has_num_new_commands() const;
  private:
  bool _internal_has_num_new_commands() const;
  public:
  void clear_num_new_commands();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_new_commands() const;
  void set_num_new_commands(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_new_commands() const;
  void _internal_set_num_new_commands(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CCLCMsg_Move)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_backup_commands_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_new_commands_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CCLCMsg_VoiceData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCLCMsg_VoiceData) */ {
 public:
  inline CCLCMsg_VoiceData() : CCLCMsg_VoiceData(nullptr) {}
  ~CCLCMsg_VoiceData() override;
  explicit constexpr CCLCMsg_VoiceData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCLCMsg_VoiceData(const CCLCMsg_VoiceData& from);
  CCLCMsg_VoiceData(CCLCMsg_VoiceData&& from) noexcept
    : CCLCMsg_VoiceData() {
    *this = ::std::move(from);
  }

  inline CCLCMsg_VoiceData& operator=(const CCLCMsg_VoiceData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCLCMsg_VoiceData& operator=(CCLCMsg_VoiceData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCLCMsg_VoiceData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCLCMsg_VoiceData* internal_default_instance() {
    return reinterpret_cast<const CCLCMsg_VoiceData*>(
               &_CCLCMsg_VoiceData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(CCLCMsg_VoiceData& a, CCLCMsg_VoiceData& b) {
    a.Swap(&b);
  }
  inline void Swap(CCLCMsg_VoiceData* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCLCMsg_VoiceData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CCLCMsg_VoiceData* New() const final {
    return new CCLCMsg_VoiceData();
  }

  CCLCMsg_VoiceData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CCLCMsg_VoiceData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CCLCMsg_VoiceData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CCLCMsg_VoiceData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCLCMsg_VoiceData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCLCMsg_VoiceData";
  }
  protected:
  explicit CCLCMsg_VoiceData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
    kXuidFieldNumber = 2,
    kSequenceBytesFieldNumber = 4,
    kSectionNumberFieldNumber = 5,
    kUncompressedSampleOffsetFieldNumber = 6,
    kFormatFieldNumber = 3,
  };
  // optional bytes data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_MUST_USE_RESULT std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // optional fixed64 xuid = 2;
  bool has_xuid() const;
  private:
  bool _internal_has_xuid() const;
  public:
  void clear_xuid();
  ::PROTOBUF_NAMESPACE_ID::uint64 xuid() const;
  void set_xuid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_xuid() const;
  void _internal_set_xuid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional int32 sequence_bytes = 4;
  bool has_sequence_bytes() const;
  private:
  bool _internal_has_sequence_bytes() const;
  public:
  void clear_sequence_bytes();
  ::PROTOBUF_NAMESPACE_ID::int32 sequence_bytes() const;
  void set_sequence_bytes(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sequence_bytes() const;
  void _internal_set_sequence_bytes(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint32 section_number = 5;
  bool has_section_number() const;
  private:
  bool _internal_has_section_number() const;
  public:
  void clear_section_number();
  ::PROTOBUF_NAMESPACE_ID::uint32 section_number() const;
  void set_section_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_section_number() const;
  void _internal_set_section_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 uncompressed_sample_offset = 6;
  bool has_uncompressed_sample_offset() const;
  private:
  bool _internal_has_uncompressed_sample_offset() const;
  public:
  void clear_uncompressed_sample_offset();
  ::PROTOBUF_NAMESPACE_ID::uint32 uncompressed_sample_offset() const;
  void set_uncompressed_sample_offset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uncompressed_sample_offset() const;
  void _internal_set_uncompressed_sample_offset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .VoiceDataFormat_t format = 3 [default = VOICEDATA_FORMAT_ENGINE];
  bool has_format() const;
  private:
  bool _internal_has_format() const;
  public:
  void clear_format();
  ::VoiceDataFormat_t format() const;
  void set_format(::VoiceDataFormat_t value);
  private:
  ::VoiceDataFormat_t _internal_format() const;
  void _internal_set_format(::VoiceDataFormat_t value);
  public:

  // @@protoc_insertion_point(class_scope:CCLCMsg_VoiceData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::uint64 xuid_;
  ::PROTOBUF_NAMESPACE_ID::int32 sequence_bytes_;
  ::PROTOBUF_NAMESPACE_ID::uint32 section_number_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uncompressed_sample_offset_;
  int format_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CCLCMsg_BaselineAck final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCLCMsg_BaselineAck) */ {
 public:
  inline CCLCMsg_BaselineAck() : CCLCMsg_BaselineAck(nullptr) {}
  ~CCLCMsg_BaselineAck() override;
  explicit constexpr CCLCMsg_BaselineAck(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCLCMsg_BaselineAck(const CCLCMsg_BaselineAck& from);
  CCLCMsg_BaselineAck(CCLCMsg_BaselineAck&& from) noexcept
    : CCLCMsg_BaselineAck() {
    *this = ::std::move(from);
  }

  inline CCLCMsg_BaselineAck& operator=(const CCLCMsg_BaselineAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCLCMsg_BaselineAck& operator=(CCLCMsg_BaselineAck&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCLCMsg_BaselineAck& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCLCMsg_BaselineAck* internal_default_instance() {
    return reinterpret_cast<const CCLCMsg_BaselineAck*>(
               &_CCLCMsg_BaselineAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(CCLCMsg_BaselineAck& a, CCLCMsg_BaselineAck& b) {
    a.Swap(&b);
  }
  inline void Swap(CCLCMsg_BaselineAck* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCLCMsg_BaselineAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CCLCMsg_BaselineAck* New() const final {
    return new CCLCMsg_BaselineAck();
  }

  CCLCMsg_BaselineAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CCLCMsg_BaselineAck>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CCLCMsg_BaselineAck& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CCLCMsg_BaselineAck& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCLCMsg_BaselineAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCLCMsg_BaselineAck";
  }
  protected:
  explicit CCLCMsg_BaselineAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaselineTickFieldNumber = 1,
    kBaselineNrFieldNumber = 2,
  };
  // optional int32 baseline_tick = 1;
  bool has_baseline_tick() const;
  private:
  bool _internal_has_baseline_tick() const;
  public:
  void clear_baseline_tick();
  ::PROTOBUF_NAMESPACE_ID::int32 baseline_tick() const;
  void set_baseline_tick(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_baseline_tick() const;
  void _internal_set_baseline_tick(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 baseline_nr = 2;
  bool has_baseline_nr() const;
  private:
  bool _internal_has_baseline_nr() const;
  public:
  void clear_baseline_nr();
  ::PROTOBUF_NAMESPACE_ID::int32 baseline_nr() const;
  void set_baseline_nr(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_baseline_nr() const;
  void _internal_set_baseline_nr(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CCLCMsg_BaselineAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 baseline_tick_;
  ::PROTOBUF_NAMESPACE_ID::int32 baseline_nr_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CCLCMsg_ListenEvents final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCLCMsg_ListenEvents) */ {
 public:
  inline CCLCMsg_ListenEvents() : CCLCMsg_ListenEvents(nullptr) {}
  ~CCLCMsg_ListenEvents() override;
  explicit constexpr CCLCMsg_ListenEvents(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCLCMsg_ListenEvents(const CCLCMsg_ListenEvents& from);
  CCLCMsg_ListenEvents(CCLCMsg_ListenEvents&& from) noexcept
    : CCLCMsg_ListenEvents() {
    *this = ::std::move(from);
  }

  inline CCLCMsg_ListenEvents& operator=(const CCLCMsg_ListenEvents& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCLCMsg_ListenEvents& operator=(CCLCMsg_ListenEvents&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCLCMsg_ListenEvents& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCLCMsg_ListenEvents* internal_default_instance() {
    return reinterpret_cast<const CCLCMsg_ListenEvents*>(
               &_CCLCMsg_ListenEvents_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(CCLCMsg_ListenEvents& a, CCLCMsg_ListenEvents& b) {
    a.Swap(&b);
  }
  inline void Swap(CCLCMsg_ListenEvents* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCLCMsg_ListenEvents* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CCLCMsg_ListenEvents* New() const final {
    return new CCLCMsg_ListenEvents();
  }

  CCLCMsg_ListenEvents* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CCLCMsg_ListenEvents>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CCLCMsg_ListenEvents& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CCLCMsg_ListenEvents& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCLCMsg_ListenEvents* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCLCMsg_ListenEvents";
  }
  protected:
  explicit CCLCMsg_ListenEvents(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventMaskFieldNumber = 1,
  };
  // repeated fixed32 event_mask = 1;
  int event_mask_size() const;
  private:
  int _internal_event_mask_size() const;
  public:
  void clear_event_mask();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_event_mask(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_event_mask() const;
  void _internal_add_event_mask(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_event_mask();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 event_mask(int index) const;
  void set_event_mask(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_event_mask(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      event_mask() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_event_mask();

  // @@protoc_insertion_point(class_scope:CCLCMsg_ListenEvents)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > event_mask_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CCLCMsg_RespondCvarValue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCLCMsg_RespondCvarValue) */ {
 public:
  inline CCLCMsg_RespondCvarValue() : CCLCMsg_RespondCvarValue(nullptr) {}
  ~CCLCMsg_RespondCvarValue() override;
  explicit constexpr CCLCMsg_RespondCvarValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCLCMsg_RespondCvarValue(const CCLCMsg_RespondCvarValue& from);
  CCLCMsg_RespondCvarValue(CCLCMsg_RespondCvarValue&& from) noexcept
    : CCLCMsg_RespondCvarValue() {
    *this = ::std::move(from);
  }

  inline CCLCMsg_RespondCvarValue& operator=(const CCLCMsg_RespondCvarValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCLCMsg_RespondCvarValue& operator=(CCLCMsg_RespondCvarValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCLCMsg_RespondCvarValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCLCMsg_RespondCvarValue* internal_default_instance() {
    return reinterpret_cast<const CCLCMsg_RespondCvarValue*>(
               &_CCLCMsg_RespondCvarValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(CCLCMsg_RespondCvarValue& a, CCLCMsg_RespondCvarValue& b) {
    a.Swap(&b);
  }
  inline void Swap(CCLCMsg_RespondCvarValue* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCLCMsg_RespondCvarValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CCLCMsg_RespondCvarValue* New() const final {
    return new CCLCMsg_RespondCvarValue();
  }

  CCLCMsg_RespondCvarValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CCLCMsg_RespondCvarValue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CCLCMsg_RespondCvarValue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CCLCMsg_RespondCvarValue& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCLCMsg_RespondCvarValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCLCMsg_RespondCvarValue";
  }
  protected:
  explicit CCLCMsg_RespondCvarValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 3,
    kValueFieldNumber = 4,
    kCookieFieldNumber = 1,
    kStatusCodeFieldNumber = 2,
  };
  // optional string name = 3;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string value = 4;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_MUST_USE_RESULT std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // optional int32 cookie = 1;
  bool has_cookie() const;
  private:
  bool _internal_has_cookie() const;
  public:
  void clear_cookie();
  ::PROTOBUF_NAMESPACE_ID::int32 cookie() const;
  void set_cookie(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cookie() const;
  void _internal_set_cookie(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 status_code = 2;
  bool has_status_code() const;
  private:
  bool _internal_has_status_code() const;
  public:
  void clear_status_code();
  ::PROTOBUF_NAMESPACE_ID::int32 status_code() const;
  void set_status_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status_code() const;
  void _internal_set_status_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CCLCMsg_RespondCvarValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::int32 cookie_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_code_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CCLCMsg_FileCRCCheck final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCLCMsg_FileCRCCheck) */ {
 public:
  inline CCLCMsg_FileCRCCheck() : CCLCMsg_FileCRCCheck(nullptr) {}
  ~CCLCMsg_FileCRCCheck() override;
  explicit constexpr CCLCMsg_FileCRCCheck(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCLCMsg_FileCRCCheck(const CCLCMsg_FileCRCCheck& from);
  CCLCMsg_FileCRCCheck(CCLCMsg_FileCRCCheck&& from) noexcept
    : CCLCMsg_FileCRCCheck() {
    *this = ::std::move(from);
  }

  inline CCLCMsg_FileCRCCheck& operator=(const CCLCMsg_FileCRCCheck& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCLCMsg_FileCRCCheck& operator=(CCLCMsg_FileCRCCheck&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCLCMsg_FileCRCCheck& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCLCMsg_FileCRCCheck* internal_default_instance() {
    return reinterpret_cast<const CCLCMsg_FileCRCCheck*>(
               &_CCLCMsg_FileCRCCheck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(CCLCMsg_FileCRCCheck& a, CCLCMsg_FileCRCCheck& b) {
    a.Swap(&b);
  }
  inline void Swap(CCLCMsg_FileCRCCheck* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCLCMsg_FileCRCCheck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CCLCMsg_FileCRCCheck* New() const final {
    return new CCLCMsg_FileCRCCheck();
  }

  CCLCMsg_FileCRCCheck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CCLCMsg_FileCRCCheck>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CCLCMsg_FileCRCCheck& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CCLCMsg_FileCRCCheck& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCLCMsg_FileCRCCheck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCLCMsg_FileCRCCheck";
  }
  protected:
  explicit CCLCMsg_FileCRCCheck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 2,
    kFilenameFieldNumber = 4,
    kMd5FieldNumber = 6,
    kCodePathFieldNumber = 1,
    kCodeFilenameFieldNumber = 3,
    kFileFractionFieldNumber = 5,
    kCrcFieldNumber = 7,
    kFileHashTypeFieldNumber = 8,
    kFileLenFieldNumber = 9,
    kPackFileIdFieldNumber = 10,
    kPackFileNumberFieldNumber = 11,
  };
  // optional string path = 2;
  bool has_path() const;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const std::string& path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_path();
  PROTOBUF_MUST_USE_RESULT std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // optional string filename = 4;
  bool has_filename() const;
  private:
  bool _internal_has_filename() const;
  public:
  void clear_filename();
  const std::string& filename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_filename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_filename();
  PROTOBUF_MUST_USE_RESULT std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // optional bytes md5 = 6;
  bool has_md5() const;
  private:
  bool _internal_has_md5() const;
  public:
  void clear_md5();
  const std::string& md5() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_md5(ArgT0&& arg0, ArgT... args);
  std::string* mutable_md5();
  PROTOBUF_MUST_USE_RESULT std::string* release_md5();
  void set_allocated_md5(std::string* md5);
  private:
  const std::string& _internal_md5() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_md5(const std::string& value);
  std::string* _internal_mutable_md5();
  public:

  // optional int32 code_path = 1;
  bool has_code_path() const;
  private:
  bool _internal_has_code_path() const;
  public:
  void clear_code_path();
  ::PROTOBUF_NAMESPACE_ID::int32 code_path() const;
  void set_code_path(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code_path() const;
  void _internal_set_code_path(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 code_filename = 3;
  bool has_code_filename() const;
  private:
  bool _internal_has_code_filename() const;
  public:
  void clear_code_filename();
  ::PROTOBUF_NAMESPACE_ID::int32 code_filename() const;
  void set_code_filename(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code_filename() const;
  void _internal_set_code_filename(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 file_fraction = 5;
  bool has_file_fraction() const;
  private:
  bool _internal_has_file_fraction() const;
  public:
  void clear_file_fraction();
  ::PROTOBUF_NAMESPACE_ID::int32 file_fraction() const;
  void set_file_fraction(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_file_fraction() const;
  void _internal_set_file_fraction(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint32 crc = 7;
  bool has_crc() const;
  private:
  bool _internal_has_crc() const;
  public:
  void clear_crc();
  ::PROTOBUF_NAMESPACE_ID::uint32 crc() const;
  void set_crc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_crc() const;
  void _internal_set_crc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int32 file_hash_type = 8;
  bool has_file_hash_type() const;
  private:
  bool _internal_has_file_hash_type() const;
  public:
  void clear_file_hash_type();
  ::PROTOBUF_NAMESPACE_ID::int32 file_hash_type() const;
  void set_file_hash_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_file_hash_type() const;
  void _internal_set_file_hash_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 file_len = 9;
  bool has_file_len() const;
  private:
  bool _internal_has_file_len() const;
  public:
  void clear_file_len();
  ::PROTOBUF_NAMESPACE_ID::int32 file_len() const;
  void set_file_len(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_file_len() const;
  void _internal_set_file_len(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 pack_file_id = 10;
  bool has_pack_file_id() const;
  private:
  bool _internal_has_pack_file_id() const;
  public:
  void clear_pack_file_id();
  ::PROTOBUF_NAMESPACE_ID::int32 pack_file_id() const;
  void set_pack_file_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pack_file_id() const;
  void _internal_set_pack_file_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 pack_file_number = 11;
  bool has_pack_file_number() const;
  private:
  bool _internal_has_pack_file_number() const;
  public:
  void clear_pack_file_number();
  ::PROTOBUF_NAMESPACE_ID::int32 pack_file_number() const;
  void set_pack_file_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pack_file_number() const;
  void _internal_set_pack_file_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CCLCMsg_FileCRCCheck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr md5_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_path_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_filename_;
  ::PROTOBUF_NAMESPACE_ID::int32 file_fraction_;
  ::PROTOBUF_NAMESPACE_ID::uint32 crc_;
  ::PROTOBUF_NAMESPACE_ID::int32 file_hash_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 file_len_;
  ::PROTOBUF_NAMESPACE_ID::int32 pack_file_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 pack_file_number_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CCLCMsg_LoadingProgress final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCLCMsg_LoadingProgress) */ {
 public:
  inline CCLCMsg_LoadingProgress() : CCLCMsg_LoadingProgress(nullptr) {}
  ~CCLCMsg_LoadingProgress() override;
  explicit constexpr CCLCMsg_LoadingProgress(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCLCMsg_LoadingProgress(const CCLCMsg_LoadingProgress& from);
  CCLCMsg_LoadingProgress(CCLCMsg_LoadingProgress&& from) noexcept
    : CCLCMsg_LoadingProgress() {
    *this = ::std::move(from);
  }

  inline CCLCMsg_LoadingProgress& operator=(const CCLCMsg_LoadingProgress& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCLCMsg_LoadingProgress& operator=(CCLCMsg_LoadingProgress&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCLCMsg_LoadingProgress& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCLCMsg_LoadingProgress* internal_default_instance() {
    return reinterpret_cast<const CCLCMsg_LoadingProgress*>(
               &_CCLCMsg_LoadingProgress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(CCLCMsg_LoadingProgress& a, CCLCMsg_LoadingProgress& b) {
    a.Swap(&b);
  }
  inline void Swap(CCLCMsg_LoadingProgress* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCLCMsg_LoadingProgress* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CCLCMsg_LoadingProgress* New() const final {
    return new CCLCMsg_LoadingProgress();
  }

  CCLCMsg_LoadingProgress* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CCLCMsg_LoadingProgress>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CCLCMsg_LoadingProgress& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CCLCMsg_LoadingProgress& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCLCMsg_LoadingProgress* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCLCMsg_LoadingProgress";
  }
  protected:
  explicit CCLCMsg_LoadingProgress(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProgressFieldNumber = 1,
  };
  // optional int32 progress = 1;
  bool has_progress() const;
  private:
  bool _internal_has_progress() const;
  public:
  void clear_progress();
  ::PROTOBUF_NAMESPACE_ID::int32 progress() const;
  void set_progress(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_progress() const;
  void _internal_set_progress(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CCLCMsg_LoadingProgress)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 progress_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CCLCMsg_SplitPlayerConnect final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCLCMsg_SplitPlayerConnect) */ {
 public:
  inline CCLCMsg_SplitPlayerConnect() : CCLCMsg_SplitPlayerConnect(nullptr) {}
  ~CCLCMsg_SplitPlayerConnect() override;
  explicit constexpr CCLCMsg_SplitPlayerConnect(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCLCMsg_SplitPlayerConnect(const CCLCMsg_SplitPlayerConnect& from);
  CCLCMsg_SplitPlayerConnect(CCLCMsg_SplitPlayerConnect&& from) noexcept
    : CCLCMsg_SplitPlayerConnect() {
    *this = ::std::move(from);
  }

  inline CCLCMsg_SplitPlayerConnect& operator=(const CCLCMsg_SplitPlayerConnect& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCLCMsg_SplitPlayerConnect& operator=(CCLCMsg_SplitPlayerConnect&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCLCMsg_SplitPlayerConnect& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCLCMsg_SplitPlayerConnect* internal_default_instance() {
    return reinterpret_cast<const CCLCMsg_SplitPlayerConnect*>(
               &_CCLCMsg_SplitPlayerConnect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(CCLCMsg_SplitPlayerConnect& a, CCLCMsg_SplitPlayerConnect& b) {
    a.Swap(&b);
  }
  inline void Swap(CCLCMsg_SplitPlayerConnect* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCLCMsg_SplitPlayerConnect* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CCLCMsg_SplitPlayerConnect* New() const final {
    return new CCLCMsg_SplitPlayerConnect();
  }

  CCLCMsg_SplitPlayerConnect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CCLCMsg_SplitPlayerConnect>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CCLCMsg_SplitPlayerConnect& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CCLCMsg_SplitPlayerConnect& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCLCMsg_SplitPlayerConnect* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCLCMsg_SplitPlayerConnect";
  }
  protected:
  explicit CCLCMsg_SplitPlayerConnect(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConvarsFieldNumber = 1,
  };
  // optional .CMsg_CVars convars = 1;
  bool has_convars() const;
  private:
  bool _internal_has_convars() const;
  public:
  void clear_convars();
  const ::CMsg_CVars& convars() const;
  PROTOBUF_MUST_USE_RESULT ::CMsg_CVars* release_convars();
  ::CMsg_CVars* mutable_convars();
  void set_allocated_convars(::CMsg_CVars* convars);
  private:
  const ::CMsg_CVars& _internal_convars() const;
  ::CMsg_CVars* _internal_mutable_convars();
  public:
  void unsafe_arena_set_allocated_convars(
      ::CMsg_CVars* convars);
  ::CMsg_CVars* unsafe_arena_release_convars();

  // @@protoc_insertion_point(class_scope:CCLCMsg_SplitPlayerConnect)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CMsg_CVars* convars_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CCLCMsg_CmdKeyValues final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCLCMsg_CmdKeyValues) */ {
 public:
  inline CCLCMsg_CmdKeyValues() : CCLCMsg_CmdKeyValues(nullptr) {}
  ~CCLCMsg_CmdKeyValues() override;
  explicit constexpr CCLCMsg_CmdKeyValues(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCLCMsg_CmdKeyValues(const CCLCMsg_CmdKeyValues& from);
  CCLCMsg_CmdKeyValues(CCLCMsg_CmdKeyValues&& from) noexcept
    : CCLCMsg_CmdKeyValues() {
    *this = ::std::move(from);
  }

  inline CCLCMsg_CmdKeyValues& operator=(const CCLCMsg_CmdKeyValues& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCLCMsg_CmdKeyValues& operator=(CCLCMsg_CmdKeyValues&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCLCMsg_CmdKeyValues& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCLCMsg_CmdKeyValues* internal_default_instance() {
    return reinterpret_cast<const CCLCMsg_CmdKeyValues*>(
               &_CCLCMsg_CmdKeyValues_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(CCLCMsg_CmdKeyValues& a, CCLCMsg_CmdKeyValues& b) {
    a.Swap(&b);
  }
  inline void Swap(CCLCMsg_CmdKeyValues* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCLCMsg_CmdKeyValues* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CCLCMsg_CmdKeyValues* New() const final {
    return new CCLCMsg_CmdKeyValues();
  }

  CCLCMsg_CmdKeyValues* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CCLCMsg_CmdKeyValues>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CCLCMsg_CmdKeyValues& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CCLCMsg_CmdKeyValues& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCLCMsg_CmdKeyValues* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCLCMsg_CmdKeyValues";
  }
  protected:
  explicit CCLCMsg_CmdKeyValues(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyvaluesFieldNumber = 1,
  };
  // optional bytes keyvalues = 1;
  bool has_keyvalues() const;
  private:
  bool _internal_has_keyvalues() const;
  public:
  void clear_keyvalues();
  const std::string& keyvalues() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_keyvalues(ArgT0&& arg0, ArgT... args);
  std::string* mutable_keyvalues();
  PROTOBUF_MUST_USE_RESULT std::string* release_keyvalues();
  void set_allocated_keyvalues(std::string* keyvalues);
  private:
  const std::string& _internal_keyvalues() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_keyvalues(const std::string& value);
  std::string* _internal_mutable_keyvalues();
  public:

  // @@protoc_insertion_point(class_scope:CCLCMsg_CmdKeyValues)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr keyvalues_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CSVCMsg_ServerInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSVCMsg_ServerInfo) */ {
 public:
  inline CSVCMsg_ServerInfo() : CSVCMsg_ServerInfo(nullptr) {}
  ~CSVCMsg_ServerInfo() override;
  explicit constexpr CSVCMsg_ServerInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSVCMsg_ServerInfo(const CSVCMsg_ServerInfo& from);
  CSVCMsg_ServerInfo(CSVCMsg_ServerInfo&& from) noexcept
    : CSVCMsg_ServerInfo() {
    *this = ::std::move(from);
  }

  inline CSVCMsg_ServerInfo& operator=(const CSVCMsg_ServerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSVCMsg_ServerInfo& operator=(CSVCMsg_ServerInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSVCMsg_ServerInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSVCMsg_ServerInfo* internal_default_instance() {
    return reinterpret_cast<const CSVCMsg_ServerInfo*>(
               &_CSVCMsg_ServerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(CSVCMsg_ServerInfo& a, CSVCMsg_ServerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CSVCMsg_ServerInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSVCMsg_ServerInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSVCMsg_ServerInfo* New() const final {
    return new CSVCMsg_ServerInfo();
  }

  CSVCMsg_ServerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSVCMsg_ServerInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSVCMsg_ServerInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CSVCMsg_ServerInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSVCMsg_ServerInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSVCMsg_ServerInfo";
  }
  protected:
  explicit CSVCMsg_ServerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameDirFieldNumber = 15,
    kMapNameFieldNumber = 16,
    kMapGroupNameFieldNumber = 17,
    kSkyNameFieldNumber = 18,
    kHostNameFieldNumber = 19,
    kProtocolFieldNumber = 1,
    kServerCountFieldNumber = 2,
    kIsDedicatedFieldNumber = 3,
    kIsOfficialValveServerFieldNumber = 4,
    kIsHltvFieldNumber = 5,
    kIsReplayFieldNumber = 6,
    kCOsFieldNumber = 7,
    kMapCrcFieldNumber = 8,
    kClientCrcFieldNumber = 9,
    kStringTableCrcFieldNumber = 10,
    kMaxClientsFieldNumber = 11,
    kMaxClassesFieldNumber = 12,
    kPlayerSlotFieldNumber = 13,
    kTickIntervalFieldNumber = 14,
    kPublicIpFieldNumber = 20,
    kUgcMapIdFieldNumber = 22,
    kIsRedirectingToProxyRelayFieldNumber = 21,
  };
  // optional string game_dir = 15;
  bool has_game_dir() const;
  private:
  bool _internal_has_game_dir() const;
  public:
  void clear_game_dir();
  const std::string& game_dir() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_game_dir(ArgT0&& arg0, ArgT... args);
  std::string* mutable_game_dir();
  PROTOBUF_MUST_USE_RESULT std::string* release_game_dir();
  void set_allocated_game_dir(std::string* game_dir);
  private:
  const std::string& _internal_game_dir() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_game_dir(const std::string& value);
  std::string* _internal_mutable_game_dir();
  public:

  // optional string map_name = 16;
  bool has_map_name() const;
  private:
  bool _internal_has_map_name() const;
  public:
  void clear_map_name();
  const std::string& map_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_map_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_map_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_map_name();
  void set_allocated_map_name(std::string* map_name);
  private:
  const std::string& _internal_map_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_map_name(const std::string& value);
  std::string* _internal_mutable_map_name();
  public:

  // optional string map_group_name = 17;
  bool has_map_group_name() const;
  private:
  bool _internal_has_map_group_name() const;
  public:
  void clear_map_group_name();
  const std::string& map_group_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_map_group_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_map_group_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_map_group_name();
  void set_allocated_map_group_name(std::string* map_group_name);
  private:
  const std::string& _internal_map_group_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_map_group_name(const std::string& value);
  std::string* _internal_mutable_map_group_name();
  public:

  // optional string sky_name = 18;
  bool has_sky_name() const;
  private:
  bool _internal_has_sky_name() const;
  public:
  void clear_sky_name();
  const std::string& sky_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sky_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sky_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_sky_name();
  void set_allocated_sky_name(std::string* sky_name);
  private:
  const std::string& _internal_sky_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sky_name(const std::string& value);
  std::string* _internal_mutable_sky_name();
  public:

  // optional string host_name = 19;
  bool has_host_name() const;
  private:
  bool _internal_has_host_name() const;
  public:
  void clear_host_name();
  const std::string& host_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_host_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_host_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_host_name();
  void set_allocated_host_name(std::string* host_name);
  private:
  const std::string& _internal_host_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_host_name(const std::string& value);
  std::string* _internal_mutable_host_name();
  public:

  // optional int32 protocol = 1;
  bool has_protocol() const;
  private:
  bool _internal_has_protocol() const;
  public:
  void clear_protocol();
  ::PROTOBUF_NAMESPACE_ID::int32 protocol() const;
  void set_protocol(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_protocol() const;
  void _internal_set_protocol(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 server_count = 2;
  bool has_server_count() const;
  private:
  bool _internal_has_server_count() const;
  public:
  void clear_server_count();
  ::PROTOBUF_NAMESPACE_ID::int32 server_count() const;
  void set_server_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_server_count() const;
  void _internal_set_server_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool is_dedicated = 3;
  bool has_is_dedicated() const;
  private:
  bool _internal_has_is_dedicated() const;
  public:
  void clear_is_dedicated();
  bool is_dedicated() const;
  void set_is_dedicated(bool value);
  private:
  bool _internal_is_dedicated() const;
  void _internal_set_is_dedicated(bool value);
  public:

  // optional bool is_official_valve_server = 4;
  bool has_is_official_valve_server() const;
  private:
  bool _internal_has_is_official_valve_server() const;
  public:
  void clear_is_official_valve_server();
  bool is_official_valve_server() const;
  void set_is_official_valve_server(bool value);
  private:
  bool _internal_is_official_valve_server() const;
  void _internal_set_is_official_valve_server(bool value);
  public:

  // optional bool is_hltv = 5;
  bool has_is_hltv() const;
  private:
  bool _internal_has_is_hltv() const;
  public:
  void clear_is_hltv();
  bool is_hltv() const;
  void set_is_hltv(bool value);
  private:
  bool _internal_is_hltv() const;
  void _internal_set_is_hltv(bool value);
  public:

  // optional bool is_replay = 6;
  bool has_is_replay() const;
  private:
  bool _internal_has_is_replay() const;
  public:
  void clear_is_replay();
  bool is_replay() const;
  void set_is_replay(bool value);
  private:
  bool _internal_is_replay() const;
  void _internal_set_is_replay(bool value);
  public:

  // optional int32 c_os = 7;
  bool has_c_os() const;
  private:
  bool _internal_has_c_os() const;
  public:
  void clear_c_os();
  ::PROTOBUF_NAMESPACE_ID::int32 c_os() const;
  void set_c_os(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_c_os() const;
  void _internal_set_c_os(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional fixed32 map_crc = 8;
  bool has_map_crc() const;
  private:
  bool _internal_has_map_crc() const;
  public:
  void clear_map_crc();
  ::PROTOBUF_NAMESPACE_ID::uint32 map_crc() const;
  void set_map_crc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_map_crc() const;
  void _internal_set_map_crc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional fixed32 client_crc = 9;
  bool has_client_crc() const;
  private:
  bool _internal_has_client_crc() const;
  public:
  void clear_client_crc();
  ::PROTOBUF_NAMESPACE_ID::uint32 client_crc() const;
  void set_client_crc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_client_crc() const;
  void _internal_set_client_crc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional fixed32 string_table_crc = 10;
  bool has_string_table_crc() const;
  private:
  bool _internal_has_string_table_crc() const;
  public:
  void clear_string_table_crc();
  ::PROTOBUF_NAMESPACE_ID::uint32 string_table_crc() const;
  void set_string_table_crc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_string_table_crc() const;
  void _internal_set_string_table_crc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int32 max_clients = 11;
  bool has_max_clients() const;
  private:
  bool _internal_has_max_clients() const;
  public:
  void clear_max_clients();
  ::PROTOBUF_NAMESPACE_ID::int32 max_clients() const;
  void set_max_clients(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_clients() const;
  void _internal_set_max_clients(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 max_classes = 12;
  bool has_max_classes() const;
  private:
  bool _internal_has_max_classes() const;
  public:
  void clear_max_classes();
  ::PROTOBUF_NAMESPACE_ID::int32 max_classes() const;
  void set_max_classes(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_classes() const;
  void _internal_set_max_classes(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 player_slot = 13;
  bool has_player_slot() const;
  private:
  bool _internal_has_player_slot() const;
  public:
  void clear_player_slot();
  ::PROTOBUF_NAMESPACE_ID::int32 player_slot() const;
  void set_player_slot(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_player_slot() const;
  void _internal_set_player_slot(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float tick_interval = 14;
  bool has_tick_interval() const;
  private:
  bool _internal_has_tick_interval() const;
  public:
  void clear_tick_interval();
  float tick_interval() const;
  void set_tick_interval(float value);
  private:
  float _internal_tick_interval() const;
  void _internal_set_tick_interval(float value);
  public:

  // optional uint32 public_ip = 20;
  bool has_public_ip() const;
  private:
  bool _internal_has_public_ip() const;
  public:
  void clear_public_ip();
  ::PROTOBUF_NAMESPACE_ID::uint32 public_ip() const;
  void set_public_ip(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_public_ip() const;
  void _internal_set_public_ip(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint64 ugc_map_id = 22;
  bool has_ugc_map_id() const;
  private:
  bool _internal_has_ugc_map_id() const;
  public:
  void clear_ugc_map_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 ugc_map_id() const;
  void set_ugc_map_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_ugc_map_id() const;
  void _internal_set_ugc_map_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional bool is_redirecting_to_proxy_relay = 21;
  bool has_is_redirecting_to_proxy_relay() const;
  private:
  bool _internal_has_is_redirecting_to_proxy_relay() const;
  public:
  void clear_is_redirecting_to_proxy_relay();
  bool is_redirecting_to_proxy_relay() const;
  void set_is_redirecting_to_proxy_relay(bool value);
  private:
  bool _internal_is_redirecting_to_proxy_relay() const;
  void _internal_set_is_redirecting_to_proxy_relay(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CSVCMsg_ServerInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr game_dir_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr map_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr map_group_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sky_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr host_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 protocol_;
  ::PROTOBUF_NAMESPACE_ID::int32 server_count_;
  bool is_dedicated_;
  bool is_official_valve_server_;
  bool is_hltv_;
  bool is_replay_;
  ::PROTOBUF_NAMESPACE_ID::int32 c_os_;
  ::PROTOBUF_NAMESPACE_ID::uint32 map_crc_;
  ::PROTOBUF_NAMESPACE_ID::uint32 client_crc_;
  ::PROTOBUF_NAMESPACE_ID::uint32 string_table_crc_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_clients_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_classes_;
  ::PROTOBUF_NAMESPACE_ID::int32 player_slot_;
  float tick_interval_;
  ::PROTOBUF_NAMESPACE_ID::uint32 public_ip_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ugc_map_id_;
  bool is_redirecting_to_proxy_relay_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CSVCMsg_ClassInfo_class_t final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSVCMsg_ClassInfo.class_t) */ {
 public:
  inline CSVCMsg_ClassInfo_class_t() : CSVCMsg_ClassInfo_class_t(nullptr) {}
  ~CSVCMsg_ClassInfo_class_t() override;
  explicit constexpr CSVCMsg_ClassInfo_class_t(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSVCMsg_ClassInfo_class_t(const CSVCMsg_ClassInfo_class_t& from);
  CSVCMsg_ClassInfo_class_t(CSVCMsg_ClassInfo_class_t&& from) noexcept
    : CSVCMsg_ClassInfo_class_t() {
    *this = ::std::move(from);
  }

  inline CSVCMsg_ClassInfo_class_t& operator=(const CSVCMsg_ClassInfo_class_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSVCMsg_ClassInfo_class_t& operator=(CSVCMsg_ClassInfo_class_t&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSVCMsg_ClassInfo_class_t& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSVCMsg_ClassInfo_class_t* internal_default_instance() {
    return reinterpret_cast<const CSVCMsg_ClassInfo_class_t*>(
               &_CSVCMsg_ClassInfo_class_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(CSVCMsg_ClassInfo_class_t& a, CSVCMsg_ClassInfo_class_t& b) {
    a.Swap(&b);
  }
  inline void Swap(CSVCMsg_ClassInfo_class_t* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSVCMsg_ClassInfo_class_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSVCMsg_ClassInfo_class_t* New() const final {
    return new CSVCMsg_ClassInfo_class_t();
  }

  CSVCMsg_ClassInfo_class_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSVCMsg_ClassInfo_class_t>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSVCMsg_ClassInfo_class_t& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CSVCMsg_ClassInfo_class_t& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSVCMsg_ClassInfo_class_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSVCMsg_ClassInfo.class_t";
  }
  protected:
  explicit CSVCMsg_ClassInfo_class_t(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataTableNameFieldNumber = 2,
    kClassNameFieldNumber = 3,
    kClassIdFieldNumber = 1,
  };
  // optional string data_table_name = 2;
  bool has_data_table_name() const;
  private:
  bool _internal_has_data_table_name() const;
  public:
  void clear_data_table_name();
  const std::string& data_table_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data_table_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data_table_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_data_table_name();
  void set_allocated_data_table_name(std::string* data_table_name);
  private:
  const std::string& _internal_data_table_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data_table_name(const std::string& value);
  std::string* _internal_mutable_data_table_name();
  public:

  // optional string class_name = 3;
  bool has_class_name() const;
  private:
  bool _internal_has_class_name() const;
  public:
  void clear_class_name();
  const std::string& class_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_class_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_class_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_class_name();
  void set_allocated_class_name(std::string* class_name);
  private:
  const std::string& _internal_class_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_class_name(const std::string& value);
  std::string* _internal_mutable_class_name();
  public:

  // optional int32 class_id = 1;
  bool has_class_id() const;
  private:
  bool _internal_has_class_id() const;
  public:
  void clear_class_id();
  ::PROTOBUF_NAMESPACE_ID::int32 class_id() const;
  void set_class_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_class_id() const;
  void _internal_set_class_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CSVCMsg_ClassInfo.class_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_table_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr class_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 class_id_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CSVCMsg_ClassInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSVCMsg_ClassInfo) */ {
 public:
  inline CSVCMsg_ClassInfo() : CSVCMsg_ClassInfo(nullptr) {}
  ~CSVCMsg_ClassInfo() override;
  explicit constexpr CSVCMsg_ClassInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSVCMsg_ClassInfo(const CSVCMsg_ClassInfo& from);
  CSVCMsg_ClassInfo(CSVCMsg_ClassInfo&& from) noexcept
    : CSVCMsg_ClassInfo() {
    *this = ::std::move(from);
  }

  inline CSVCMsg_ClassInfo& operator=(const CSVCMsg_ClassInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSVCMsg_ClassInfo& operator=(CSVCMsg_ClassInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSVCMsg_ClassInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSVCMsg_ClassInfo* internal_default_instance() {
    return reinterpret_cast<const CSVCMsg_ClassInfo*>(
               &_CSVCMsg_ClassInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(CSVCMsg_ClassInfo& a, CSVCMsg_ClassInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CSVCMsg_ClassInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSVCMsg_ClassInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSVCMsg_ClassInfo* New() const final {
    return new CSVCMsg_ClassInfo();
  }

  CSVCMsg_ClassInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSVCMsg_ClassInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSVCMsg_ClassInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CSVCMsg_ClassInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSVCMsg_ClassInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSVCMsg_ClassInfo";
  }
  protected:
  explicit CSVCMsg_ClassInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CSVCMsg_ClassInfo_class_t class_t;

  // accessors -------------------------------------------------------

  enum : int {
    kClassesFieldNumber = 2,
    kCreateOnClientFieldNumber = 1,
  };
  // repeated .CSVCMsg_ClassInfo.class_t classes = 2;
  int classes_size() const;
  private:
  int _internal_classes_size() const;
  public:
  void clear_classes();
  ::CSVCMsg_ClassInfo_class_t* mutable_classes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSVCMsg_ClassInfo_class_t >*
      mutable_classes();
  private:
  const ::CSVCMsg_ClassInfo_class_t& _internal_classes(int index) const;
  ::CSVCMsg_ClassInfo_class_t* _internal_add_classes();
  public:
  const ::CSVCMsg_ClassInfo_class_t& classes(int index) const;
  ::CSVCMsg_ClassInfo_class_t* add_classes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSVCMsg_ClassInfo_class_t >&
      classes() const;

  // optional bool create_on_client = 1;
  bool has_create_on_client() const;
  private:
  bool _internal_has_create_on_client() const;
  public:
  void clear_create_on_client();
  bool create_on_client() const;
  void set_create_on_client(bool value);
  private:
  bool _internal_create_on_client() const;
  void _internal_set_create_on_client(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CSVCMsg_ClassInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSVCMsg_ClassInfo_class_t > classes_;
  bool create_on_client_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CSVCMsg_SendTable_sendprop_t final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSVCMsg_SendTable.sendprop_t) */ {
 public:
  inline CSVCMsg_SendTable_sendprop_t() : CSVCMsg_SendTable_sendprop_t(nullptr) {}
  ~CSVCMsg_SendTable_sendprop_t() override;
  explicit constexpr CSVCMsg_SendTable_sendprop_t(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSVCMsg_SendTable_sendprop_t(const CSVCMsg_SendTable_sendprop_t& from);
  CSVCMsg_SendTable_sendprop_t(CSVCMsg_SendTable_sendprop_t&& from) noexcept
    : CSVCMsg_SendTable_sendprop_t() {
    *this = ::std::move(from);
  }

  inline CSVCMsg_SendTable_sendprop_t& operator=(const CSVCMsg_SendTable_sendprop_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSVCMsg_SendTable_sendprop_t& operator=(CSVCMsg_SendTable_sendprop_t&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSVCMsg_SendTable_sendprop_t& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSVCMsg_SendTable_sendprop_t* internal_default_instance() {
    return reinterpret_cast<const CSVCMsg_SendTable_sendprop_t*>(
               &_CSVCMsg_SendTable_sendprop_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(CSVCMsg_SendTable_sendprop_t& a, CSVCMsg_SendTable_sendprop_t& b) {
    a.Swap(&b);
  }
  inline void Swap(CSVCMsg_SendTable_sendprop_t* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSVCMsg_SendTable_sendprop_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSVCMsg_SendTable_sendprop_t* New() const final {
    return new CSVCMsg_SendTable_sendprop_t();
  }

  CSVCMsg_SendTable_sendprop_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSVCMsg_SendTable_sendprop_t>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSVCMsg_SendTable_sendprop_t& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CSVCMsg_SendTable_sendprop_t& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSVCMsg_SendTable_sendprop_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSVCMsg_SendTable.sendprop_t";
  }
  protected:
  explicit CSVCMsg_SendTable_sendprop_t(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVarNameFieldNumber = 2,
    kDtNameFieldNumber = 5,
    kTypeFieldNumber = 1,
    kFlagsFieldNumber = 3,
    kPriorityFieldNumber = 4,
    kNumElementsFieldNumber = 6,
    kLowValueFieldNumber = 7,
    kHighValueFieldNumber = 8,
    kNumBitsFieldNumber = 9,
  };
  // optional string var_name = 2;
  bool has_var_name() const;
  private:
  bool _internal_has_var_name() const;
  public:
  void clear_var_name();
  const std::string& var_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_var_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_var_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_var_name();
  void set_allocated_var_name(std::string* var_name);
  private:
  const std::string& _internal_var_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_var_name(const std::string& value);
  std::string* _internal_mutable_var_name();
  public:

  // optional string dt_name = 5;
  bool has_dt_name() const;
  private:
  bool _internal_has_dt_name() const;
  public:
  void clear_dt_name();
  const std::string& dt_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dt_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dt_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_dt_name();
  void set_allocated_dt_name(std::string* dt_name);
  private:
  const std::string& _internal_dt_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dt_name(const std::string& value);
  std::string* _internal_mutable_dt_name();
  public:

  // optional int32 type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 flags = 3;
  bool has_flags() const;
  private:
  bool _internal_has_flags() const;
  public:
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::int32 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_flags() const;
  void _internal_set_flags(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 priority = 4;
  bool has_priority() const;
  private:
  bool _internal_has_priority() const;
  public:
  void clear_priority();
  ::PROTOBUF_NAMESPACE_ID::int32 priority() const;
  void set_priority(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_priority() const;
  void _internal_set_priority(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 num_elements = 6;
  bool has_num_elements() const;
  private:
  bool _internal_has_num_elements() const;
  public:
  void clear_num_elements();
  ::PROTOBUF_NAMESPACE_ID::int32 num_elements() const;
  void set_num_elements(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num_elements() const;
  void _internal_set_num_elements(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float low_value = 7;
  bool has_low_value() const;
  private:
  bool _internal_has_low_value() const;
  public:
  void clear_low_value();
  float low_value() const;
  void set_low_value(float value);
  private:
  float _internal_low_value() const;
  void _internal_set_low_value(float value);
  public:

  // optional float high_value = 8;
  bool has_high_value() const;
  private:
  bool _internal_has_high_value() const;
  public:
  void clear_high_value();
  float high_value() const;
  void set_high_value(float value);
  private:
  float _internal_high_value() const;
  void _internal_set_high_value(float value);
  public:

  // optional int32 num_bits = 9;
  bool has_num_bits() const;
  private:
  bool _internal_has_num_bits() const;
  public:
  void clear_num_bits();
  ::PROTOBUF_NAMESPACE_ID::int32 num_bits() const;
  void set_num_bits(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num_bits() const;
  void _internal_set_num_bits(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CSVCMsg_SendTable.sendprop_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr var_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dt_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::int32 flags_;
  ::PROTOBUF_NAMESPACE_ID::int32 priority_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_elements_;
  float low_value_;
  float high_value_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_bits_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CSVCMsg_SendTable final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSVCMsg_SendTable) */ {
 public:
  inline CSVCMsg_SendTable() : CSVCMsg_SendTable(nullptr) {}
  ~CSVCMsg_SendTable() override;
  explicit constexpr CSVCMsg_SendTable(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSVCMsg_SendTable(const CSVCMsg_SendTable& from);
  CSVCMsg_SendTable(CSVCMsg_SendTable&& from) noexcept
    : CSVCMsg_SendTable() {
    *this = ::std::move(from);
  }

  inline CSVCMsg_SendTable& operator=(const CSVCMsg_SendTable& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSVCMsg_SendTable& operator=(CSVCMsg_SendTable&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSVCMsg_SendTable& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSVCMsg_SendTable* internal_default_instance() {
    return reinterpret_cast<const CSVCMsg_SendTable*>(
               &_CSVCMsg_SendTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(CSVCMsg_SendTable& a, CSVCMsg_SendTable& b) {
    a.Swap(&b);
  }
  inline void Swap(CSVCMsg_SendTable* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSVCMsg_SendTable* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSVCMsg_SendTable* New() const final {
    return new CSVCMsg_SendTable();
  }

  CSVCMsg_SendTable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSVCMsg_SendTable>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSVCMsg_SendTable& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CSVCMsg_SendTable& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSVCMsg_SendTable* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSVCMsg_SendTable";
  }
  protected:
  explicit CSVCMsg_SendTable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CSVCMsg_SendTable_sendprop_t sendprop_t;

  // accessors -------------------------------------------------------

  enum : int {
    kPropsFieldNumber = 4,
    kNetTableNameFieldNumber = 2,
    kIsEndFieldNumber = 1,
    kNeedsDecoderFieldNumber = 3,
  };
  // repeated .CSVCMsg_SendTable.sendprop_t props = 4;
  int props_size() const;
  private:
  int _internal_props_size() const;
  public:
  void clear_props();
  ::CSVCMsg_SendTable_sendprop_t* mutable_props(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSVCMsg_SendTable_sendprop_t >*
      mutable_props();
  private:
  const ::CSVCMsg_SendTable_sendprop_t& _internal_props(int index) const;
  ::CSVCMsg_SendTable_sendprop_t* _internal_add_props();
  public:
  const ::CSVCMsg_SendTable_sendprop_t& props(int index) const;
  ::CSVCMsg_SendTable_sendprop_t* add_props();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSVCMsg_SendTable_sendprop_t >&
      props() const;

  // optional string net_table_name = 2;
  bool has_net_table_name() const;
  private:
  bool _internal_has_net_table_name() const;
  public:
  void clear_net_table_name();
  const std::string& net_table_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_net_table_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_net_table_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_net_table_name();
  void set_allocated_net_table_name(std::string* net_table_name);
  private:
  const std::string& _internal_net_table_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_net_table_name(const std::string& value);
  std::string* _internal_mutable_net_table_name();
  public:

  // optional bool is_end = 1;
  bool has_is_end() const;
  private:
  bool _internal_has_is_end() const;
  public:
  void clear_is_end();
  bool is_end() const;
  void set_is_end(bool value);
  private:
  bool _internal_is_end() const;
  void _internal_set_is_end(bool value);
  public:

  // optional bool needs_decoder = 3;
  bool has_needs_decoder() const;
  private:
  bool _internal_has_needs_decoder() const;
  public:
  void clear_needs_decoder();
  bool needs_decoder() const;
  void set_needs_decoder(bool value);
  private:
  bool _internal_needs_decoder() const;
  void _internal_set_needs_decoder(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CSVCMsg_SendTable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSVCMsg_SendTable_sendprop_t > props_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr net_table_name_;
  bool is_end_;
  bool needs_decoder_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CSVCMsg_Print final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSVCMsg_Print) */ {
 public:
  inline CSVCMsg_Print() : CSVCMsg_Print(nullptr) {}
  ~CSVCMsg_Print() override;
  explicit constexpr CSVCMsg_Print(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSVCMsg_Print(const CSVCMsg_Print& from);
  CSVCMsg_Print(CSVCMsg_Print&& from) noexcept
    : CSVCMsg_Print() {
    *this = ::std::move(from);
  }

  inline CSVCMsg_Print& operator=(const CSVCMsg_Print& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSVCMsg_Print& operator=(CSVCMsg_Print&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSVCMsg_Print& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSVCMsg_Print* internal_default_instance() {
    return reinterpret_cast<const CSVCMsg_Print*>(
               &_CSVCMsg_Print_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(CSVCMsg_Print& a, CSVCMsg_Print& b) {
    a.Swap(&b);
  }
  inline void Swap(CSVCMsg_Print* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSVCMsg_Print* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSVCMsg_Print* New() const final {
    return new CSVCMsg_Print();
  }

  CSVCMsg_Print* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSVCMsg_Print>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSVCMsg_Print& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CSVCMsg_Print& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSVCMsg_Print* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSVCMsg_Print";
  }
  protected:
  explicit CSVCMsg_Print(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 1,
  };
  // optional string text = 1;
  bool has_text() const;
  private:
  bool _internal_has_text() const;
  public:
  void clear_text();
  const std::string& text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_text();
  PROTOBUF_MUST_USE_RESULT std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // @@protoc_insertion_point(class_scope:CSVCMsg_Print)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CSVCMsg_SetPause final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSVCMsg_SetPause) */ {
 public:
  inline CSVCMsg_SetPause() : CSVCMsg_SetPause(nullptr) {}
  ~CSVCMsg_SetPause() override;
  explicit constexpr CSVCMsg_SetPause(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSVCMsg_SetPause(const CSVCMsg_SetPause& from);
  CSVCMsg_SetPause(CSVCMsg_SetPause&& from) noexcept
    : CSVCMsg_SetPause() {
    *this = ::std::move(from);
  }

  inline CSVCMsg_SetPause& operator=(const CSVCMsg_SetPause& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSVCMsg_SetPause& operator=(CSVCMsg_SetPause&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSVCMsg_SetPause& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSVCMsg_SetPause* internal_default_instance() {
    return reinterpret_cast<const CSVCMsg_SetPause*>(
               &_CSVCMsg_SetPause_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(CSVCMsg_SetPause& a, CSVCMsg_SetPause& b) {
    a.Swap(&b);
  }
  inline void Swap(CSVCMsg_SetPause* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSVCMsg_SetPause* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSVCMsg_SetPause* New() const final {
    return new CSVCMsg_SetPause();
  }

  CSVCMsg_SetPause* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSVCMsg_SetPause>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSVCMsg_SetPause& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CSVCMsg_SetPause& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSVCMsg_SetPause* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSVCMsg_SetPause";
  }
  protected:
  explicit CSVCMsg_SetPause(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPausedFieldNumber = 1,
  };
  // optional bool paused = 1;
  bool has_paused() const;
  private:
  bool _internal_has_paused() const;
  public:
  void clear_paused();
  bool paused() const;
  void set_paused(bool value);
  private:
  bool _internal_paused() const;
  void _internal_set_paused(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CSVCMsg_SetPause)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool paused_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CSVCMsg_SetView final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSVCMsg_SetView) */ {
 public:
  inline CSVCMsg_SetView() : CSVCMsg_SetView(nullptr) {}
  ~CSVCMsg_SetView() override;
  explicit constexpr CSVCMsg_SetView(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSVCMsg_SetView(const CSVCMsg_SetView& from);
  CSVCMsg_SetView(CSVCMsg_SetView&& from) noexcept
    : CSVCMsg_SetView() {
    *this = ::std::move(from);
  }

  inline CSVCMsg_SetView& operator=(const CSVCMsg_SetView& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSVCMsg_SetView& operator=(CSVCMsg_SetView&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSVCMsg_SetView& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSVCMsg_SetView* internal_default_instance() {
    return reinterpret_cast<const CSVCMsg_SetView*>(
               &_CSVCMsg_SetView_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(CSVCMsg_SetView& a, CSVCMsg_SetView& b) {
    a.Swap(&b);
  }
  inline void Swap(CSVCMsg_SetView* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSVCMsg_SetView* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSVCMsg_SetView* New() const final {
    return new CSVCMsg_SetView();
  }

  CSVCMsg_SetView* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSVCMsg_SetView>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSVCMsg_SetView& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CSVCMsg_SetView& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSVCMsg_SetView* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSVCMsg_SetView";
  }
  protected:
  explicit CSVCMsg_SetView(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntityIndexFieldNumber = 1,
  };
  // optional int32 entity_index = 1;
  bool has_entity_index() const;
  private:
  bool _internal_has_entity_index() const;
  public:
  void clear_entity_index();
  ::PROTOBUF_NAMESPACE_ID::int32 entity_index() const;
  void set_entity_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_entity_index() const;
  void _internal_set_entity_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CSVCMsg_SetView)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 entity_index_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CSVCMsg_CreateStringTable final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSVCMsg_CreateStringTable) */ {
 public:
  inline CSVCMsg_CreateStringTable() : CSVCMsg_CreateStringTable(nullptr) {}
  ~CSVCMsg_CreateStringTable() override;
  explicit constexpr CSVCMsg_CreateStringTable(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSVCMsg_CreateStringTable(const CSVCMsg_CreateStringTable& from);
  CSVCMsg_CreateStringTable(CSVCMsg_CreateStringTable&& from) noexcept
    : CSVCMsg_CreateStringTable() {
    *this = ::std::move(from);
  }

  inline CSVCMsg_CreateStringTable& operator=(const CSVCMsg_CreateStringTable& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSVCMsg_CreateStringTable& operator=(CSVCMsg_CreateStringTable&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSVCMsg_CreateStringTable& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSVCMsg_CreateStringTable* internal_default_instance() {
    return reinterpret_cast<const CSVCMsg_CreateStringTable*>(
               &_CSVCMsg_CreateStringTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(CSVCMsg_CreateStringTable& a, CSVCMsg_CreateStringTable& b) {
    a.Swap(&b);
  }
  inline void Swap(CSVCMsg_CreateStringTable* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSVCMsg_CreateStringTable* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSVCMsg_CreateStringTable* New() const final {
    return new CSVCMsg_CreateStringTable();
  }

  CSVCMsg_CreateStringTable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSVCMsg_CreateStringTable>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSVCMsg_CreateStringTable& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CSVCMsg_CreateStringTable& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSVCMsg_CreateStringTable* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSVCMsg_CreateStringTable";
  }
  protected:
  explicit CSVCMsg_CreateStringTable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kStringDataFieldNumber = 8,
    kMaxEntriesFieldNumber = 2,
    kNumEntriesFieldNumber = 3,
    kUserDataFixedSizeFieldNumber = 4,
    kUserDataSizeFieldNumber = 5,
    kUserDataSizeBitsFieldNumber = 6,
    kFlagsFieldNumber = 7,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional bytes string_data = 8;
  bool has_string_data() const;
  private:
  bool _internal_has_string_data() const;
  public:
  void clear_string_data();
  const std::string& string_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_string_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_string_data();
  PROTOBUF_MUST_USE_RESULT std::string* release_string_data();
  void set_allocated_string_data(std::string* string_data);
  private:
  const std::string& _internal_string_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_string_data(const std::string& value);
  std::string* _internal_mutable_string_data();
  public:

  // optional int32 max_entries = 2;
  bool has_max_entries() const;
  private:
  bool _internal_has_max_entries() const;
  public:
  void clear_max_entries();
  ::PROTOBUF_NAMESPACE_ID::int32 max_entries() const;
  void set_max_entries(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_entries() const;
  void _internal_set_max_entries(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 num_entries = 3;
  bool has_num_entries() const;
  private:
  bool _internal_has_num_entries() const;
  public:
  void clear_num_entries();
  ::PROTOBUF_NAMESPACE_ID::int32 num_entries() const;
  void set_num_entries(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num_entries() const;
  void _internal_set_num_entries(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool user_data_fixed_size = 4;
  bool has_user_data_fixed_size() const;
  private:
  bool _internal_has_user_data_fixed_size() const;
  public:
  void clear_user_data_fixed_size();
  bool user_data_fixed_size() const;
  void set_user_data_fixed_size(bool value);
  private:
  bool _internal_user_data_fixed_size() const;
  void _internal_set_user_data_fixed_size(bool value);
  public:

  // optional int32 user_data_size = 5;
  bool has_user_data_size() const;
  private:
  bool _internal_has_user_data_size() const;
  public:
  void clear_user_data_size();
  ::PROTOBUF_NAMESPACE_ID::int32 user_data_size() const;
  void set_user_data_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_user_data_size() const;
  void _internal_set_user_data_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 user_data_size_bits = 6;
  bool has_user_data_size_bits() const;
  private:
  bool _internal_has_user_data_size_bits() const;
  public:
  void clear_user_data_size_bits();
  ::PROTOBUF_NAMESPACE_ID::int32 user_data_size_bits() const;
  void set_user_data_size_bits(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_user_data_size_bits() const;
  void _internal_set_user_data_size_bits(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 flags = 7;
  bool has_flags() const;
  private:
  bool _internal_has_flags() const;
  public:
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::int32 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_flags() const;
  void _internal_set_flags(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CSVCMsg_CreateStringTable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_data_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_entries_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_entries_;
  bool user_data_fixed_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 user_data_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 user_data_size_bits_;
  ::PROTOBUF_NAMESPACE_ID::int32 flags_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CSVCMsg_UpdateStringTable final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSVCMsg_UpdateStringTable) */ {
 public:
  inline CSVCMsg_UpdateStringTable() : CSVCMsg_UpdateStringTable(nullptr) {}
  ~CSVCMsg_UpdateStringTable() override;
  explicit constexpr CSVCMsg_UpdateStringTable(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSVCMsg_UpdateStringTable(const CSVCMsg_UpdateStringTable& from);
  CSVCMsg_UpdateStringTable(CSVCMsg_UpdateStringTable&& from) noexcept
    : CSVCMsg_UpdateStringTable() {
    *this = ::std::move(from);
  }

  inline CSVCMsg_UpdateStringTable& operator=(const CSVCMsg_UpdateStringTable& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSVCMsg_UpdateStringTable& operator=(CSVCMsg_UpdateStringTable&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSVCMsg_UpdateStringTable& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSVCMsg_UpdateStringTable* internal_default_instance() {
    return reinterpret_cast<const CSVCMsg_UpdateStringTable*>(
               &_CSVCMsg_UpdateStringTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(CSVCMsg_UpdateStringTable& a, CSVCMsg_UpdateStringTable& b) {
    a.Swap(&b);
  }
  inline void Swap(CSVCMsg_UpdateStringTable* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSVCMsg_UpdateStringTable* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSVCMsg_UpdateStringTable* New() const final {
    return new CSVCMsg_UpdateStringTable();
  }

  CSVCMsg_UpdateStringTable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSVCMsg_UpdateStringTable>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSVCMsg_UpdateStringTable& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CSVCMsg_UpdateStringTable& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSVCMsg_UpdateStringTable* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSVCMsg_UpdateStringTable";
  }
  protected:
  explicit CSVCMsg_UpdateStringTable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStringDataFieldNumber = 3,
    kTableIdFieldNumber = 1,
    kNumChangedEntriesFieldNumber = 2,
  };
  // optional bytes string_data = 3;
  bool has_string_data() const;
  private:
  bool _internal_has_string_data() const;
  public:
  void clear_string_data();
  const std::string& string_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_string_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_string_data();
  PROTOBUF_MUST_USE_RESULT std::string* release_string_data();
  void set_allocated_string_data(std::string* string_data);
  private:
  const std::string& _internal_string_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_string_data(const std::string& value);
  std::string* _internal_mutable_string_data();
  public:

  // optional int32 table_id = 1;
  bool has_table_id() const;
  private:
  bool _internal_has_table_id() const;
  public:
  void clear_table_id();
  ::PROTOBUF_NAMESPACE_ID::int32 table_id() const;
  void set_table_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_table_id() const;
  void _internal_set_table_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 num_changed_entries = 2;
  bool has_num_changed_entries() const;
  private:
  bool _internal_has_num_changed_entries() const;
  public:
  void clear_num_changed_entries();
  ::PROTOBUF_NAMESPACE_ID::int32 num_changed_entries() const;
  void set_num_changed_entries(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num_changed_entries() const;
  void _internal_set_num_changed_entries(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CSVCMsg_UpdateStringTable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_data_;
  ::PROTOBUF_NAMESPACE_ID::int32 table_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_changed_entries_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CSVCMsg_VoiceInit final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSVCMsg_VoiceInit) */ {
 public:
  inline CSVCMsg_VoiceInit() : CSVCMsg_VoiceInit(nullptr) {}
  ~CSVCMsg_VoiceInit() override;
  explicit constexpr CSVCMsg_VoiceInit(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSVCMsg_VoiceInit(const CSVCMsg_VoiceInit& from);
  CSVCMsg_VoiceInit(CSVCMsg_VoiceInit&& from) noexcept
    : CSVCMsg_VoiceInit() {
    *this = ::std::move(from);
  }

  inline CSVCMsg_VoiceInit& operator=(const CSVCMsg_VoiceInit& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSVCMsg_VoiceInit& operator=(CSVCMsg_VoiceInit&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSVCMsg_VoiceInit& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSVCMsg_VoiceInit* internal_default_instance() {
    return reinterpret_cast<const CSVCMsg_VoiceInit*>(
               &_CSVCMsg_VoiceInit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(CSVCMsg_VoiceInit& a, CSVCMsg_VoiceInit& b) {
    a.Swap(&b);
  }
  inline void Swap(CSVCMsg_VoiceInit* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSVCMsg_VoiceInit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSVCMsg_VoiceInit* New() const final {
    return new CSVCMsg_VoiceInit();
  }

  CSVCMsg_VoiceInit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSVCMsg_VoiceInit>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSVCMsg_VoiceInit& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CSVCMsg_VoiceInit& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSVCMsg_VoiceInit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSVCMsg_VoiceInit";
  }
  protected:
  explicit CSVCMsg_VoiceInit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodecFieldNumber = 2,
    kQualityFieldNumber = 1,
    kVersionFieldNumber = 3,
  };
  // optional string codec = 2;
  bool has_codec() const;
  private:
  bool _internal_has_codec() const;
  public:
  void clear_codec();
  const std::string& codec() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_codec(ArgT0&& arg0, ArgT... args);
  std::string* mutable_codec();
  PROTOBUF_MUST_USE_RESULT std::string* release_codec();
  void set_allocated_codec(std::string* codec);
  private:
  const std::string& _internal_codec() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_codec(const std::string& value);
  std::string* _internal_mutable_codec();
  public:

  // optional int32 quality = 1;
  bool has_quality() const;
  private:
  bool _internal_has_quality() const;
  public:
  void clear_quality();
  ::PROTOBUF_NAMESPACE_ID::int32 quality() const;
  void set_quality(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_quality() const;
  void _internal_set_quality(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 version = 3 [default = 0];
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::int32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CSVCMsg_VoiceInit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr codec_;
  ::PROTOBUF_NAMESPACE_ID::int32 quality_;
  ::PROTOBUF_NAMESPACE_ID::int32 version_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CSVCMsg_VoiceData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSVCMsg_VoiceData) */ {
 public:
  inline CSVCMsg_VoiceData() : CSVCMsg_VoiceData(nullptr) {}
  ~CSVCMsg_VoiceData() override;
  explicit constexpr CSVCMsg_VoiceData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSVCMsg_VoiceData(const CSVCMsg_VoiceData& from);
  CSVCMsg_VoiceData(CSVCMsg_VoiceData&& from) noexcept
    : CSVCMsg_VoiceData() {
    *this = ::std::move(from);
  }

  inline CSVCMsg_VoiceData& operator=(const CSVCMsg_VoiceData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSVCMsg_VoiceData& operator=(CSVCMsg_VoiceData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSVCMsg_VoiceData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSVCMsg_VoiceData* internal_default_instance() {
    return reinterpret_cast<const CSVCMsg_VoiceData*>(
               &_CSVCMsg_VoiceData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(CSVCMsg_VoiceData& a, CSVCMsg_VoiceData& b) {
    a.Swap(&b);
  }
  inline void Swap(CSVCMsg_VoiceData* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSVCMsg_VoiceData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSVCMsg_VoiceData* New() const final {
    return new CSVCMsg_VoiceData();
  }

  CSVCMsg_VoiceData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSVCMsg_VoiceData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSVCMsg_VoiceData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CSVCMsg_VoiceData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSVCMsg_VoiceData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSVCMsg_VoiceData";
  }
  protected:
  explicit CSVCMsg_VoiceData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVoiceDataFieldNumber = 5,
    kClientFieldNumber = 1,
    kAudibleMaskFieldNumber = 4,
    kXuidFieldNumber = 3,
    kProximityFieldNumber = 2,
    kCasterFieldNumber = 6,
    kSequenceBytesFieldNumber = 8,
    kSectionNumberFieldNumber = 9,
    kUncompressedSampleOffsetFieldNumber = 10,
    kFormatFieldNumber = 7,
  };
  // optional bytes voice_data = 5;
  bool has_voice_data() const;
  private:
  bool _internal_has_voice_data() const;
  public:
  void clear_voice_data();
  const std::string& voice_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_voice_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_voice_data();
  PROTOBUF_MUST_USE_RESULT std::string* release_voice_data();
  void set_allocated_voice_data(std::string* voice_data);
  private:
  const std::string& _internal_voice_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_voice_data(const std::string& value);
  std::string* _internal_mutable_voice_data();
  public:

  // optional int32 client = 1;
  bool has_client() const;
  private:
  bool _internal_has_client() const;
  public:
  void clear_client();
  ::PROTOBUF_NAMESPACE_ID::int32 client() const;
  void set_client(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_client() const;
  void _internal_set_client(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 audible_mask = 4;
  bool has_audible_mask() const;
  private:
  bool _internal_has_audible_mask() const;
  public:
  void clear_audible_mask();
  ::PROTOBUF_NAMESPACE_ID::int32 audible_mask() const;
  void set_audible_mask(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_audible_mask() const;
  void _internal_set_audible_mask(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional fixed64 xuid = 3;
  bool has_xuid() const;
  private:
  bool _internal_has_xuid() const;
  public:
  void clear_xuid();
  ::PROTOBUF_NAMESPACE_ID::uint64 xuid() const;
  void set_xuid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_xuid() const;
  void _internal_set_xuid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional bool proximity = 2;
  bool has_proximity() const;
  private:
  bool _internal_has_proximity() const;
  public:
  void clear_proximity();
  bool proximity() const;
  void set_proximity(bool value);
  private:
  bool _internal_proximity() const;
  void _internal_set_proximity(bool value);
  public:

  // optional bool caster = 6;
  bool has_caster() const;
  private:
  bool _internal_has_caster() const;
  public:
  void clear_caster();
  bool caster() const;
  void set_caster(bool value);
  private:
  bool _internal_caster() const;
  void _internal_set_caster(bool value);
  public:

  // optional int32 sequence_bytes = 8;
  bool has_sequence_bytes() const;
  private:
  bool _internal_has_sequence_bytes() const;
  public:
  void clear_sequence_bytes();
  ::PROTOBUF_NAMESPACE_ID::int32 sequence_bytes() const;
  void set_sequence_bytes(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sequence_bytes() const;
  void _internal_set_sequence_bytes(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint32 section_number = 9;
  bool has_section_number() const;
  private:
  bool _internal_has_section_number() const;
  public:
  void clear_section_number();
  ::PROTOBUF_NAMESPACE_ID::uint32 section_number() const;
  void set_section_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_section_number() const;
  void _internal_set_section_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 uncompressed_sample_offset = 10;
  bool has_uncompressed_sample_offset() const;
  private:
  bool _internal_has_uncompressed_sample_offset() const;
  public:
  void clear_uncompressed_sample_offset();
  ::PROTOBUF_NAMESPACE_ID::uint32 uncompressed_sample_offset() const;
  void set_uncompressed_sample_offset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uncompressed_sample_offset() const;
  void _internal_set_uncompressed_sample_offset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .VoiceDataFormat_t format = 7 [default = VOICEDATA_FORMAT_ENGINE];
  bool has_format() const;
  private:
  bool _internal_has_format() const;
  public:
  void clear_format();
  ::VoiceDataFormat_t format() const;
  void set_format(::VoiceDataFormat_t value);
  private:
  ::VoiceDataFormat_t _internal_format() const;
  void _internal_set_format(::VoiceDataFormat_t value);
  public:

  // @@protoc_insertion_point(class_scope:CSVCMsg_VoiceData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr voice_data_;
  ::PROTOBUF_NAMESPACE_ID::int32 client_;
  ::PROTOBUF_NAMESPACE_ID::int32 audible_mask_;
  ::PROTOBUF_NAMESPACE_ID::uint64 xuid_;
  bool proximity_;
  bool caster_;
  ::PROTOBUF_NAMESPACE_ID::int32 sequence_bytes_;
  ::PROTOBUF_NAMESPACE_ID::uint32 section_number_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uncompressed_sample_offset_;
  int format_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CSVCMsg_FixAngle final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSVCMsg_FixAngle) */ {
 public:
  inline CSVCMsg_FixAngle() : CSVCMsg_FixAngle(nullptr) {}
  ~CSVCMsg_FixAngle() override;
  explicit constexpr CSVCMsg_FixAngle(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSVCMsg_FixAngle(const CSVCMsg_FixAngle& from);
  CSVCMsg_FixAngle(CSVCMsg_FixAngle&& from) noexcept
    : CSVCMsg_FixAngle() {
    *this = ::std::move(from);
  }

  inline CSVCMsg_FixAngle& operator=(const CSVCMsg_FixAngle& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSVCMsg_FixAngle& operator=(CSVCMsg_FixAngle&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSVCMsg_FixAngle& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSVCMsg_FixAngle* internal_default_instance() {
    return reinterpret_cast<const CSVCMsg_FixAngle*>(
               &_CSVCMsg_FixAngle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(CSVCMsg_FixAngle& a, CSVCMsg_FixAngle& b) {
    a.Swap(&b);
  }
  inline void Swap(CSVCMsg_FixAngle* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSVCMsg_FixAngle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSVCMsg_FixAngle* New() const final {
    return new CSVCMsg_FixAngle();
  }

  CSVCMsg_FixAngle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSVCMsg_FixAngle>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSVCMsg_FixAngle& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CSVCMsg_FixAngle& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSVCMsg_FixAngle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSVCMsg_FixAngle";
  }
  protected:
  explicit CSVCMsg_FixAngle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAngleFieldNumber = 2,
    kRelativeFieldNumber = 1,
  };
  // optional .CMsgQAngle angle = 2;
  bool has_angle() const;
  private:
  bool _internal_has_angle() const;
  public:
  void clear_angle();
  const ::CMsgQAngle& angle() const;
  PROTOBUF_MUST_USE_RESULT ::CMsgQAngle* release_angle();
  ::CMsgQAngle* mutable_angle();
  void set_allocated_angle(::CMsgQAngle* angle);
  private:
  const ::CMsgQAngle& _internal_angle() const;
  ::CMsgQAngle* _internal_mutable_angle();
  public:
  void unsafe_arena_set_allocated_angle(
      ::CMsgQAngle* angle);
  ::CMsgQAngle* unsafe_arena_release_angle();

  // optional bool relative = 1;
  bool has_relative() const;
  private:
  bool _internal_has_relative() const;
  public:
  void clear_relative();
  bool relative() const;
  void set_relative(bool value);
  private:
  bool _internal_relative() const;
  void _internal_set_relative(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CSVCMsg_FixAngle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CMsgQAngle* angle_;
  bool relative_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CSVCMsg_CrosshairAngle final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSVCMsg_CrosshairAngle) */ {
 public:
  inline CSVCMsg_CrosshairAngle() : CSVCMsg_CrosshairAngle(nullptr) {}
  ~CSVCMsg_CrosshairAngle() override;
  explicit constexpr CSVCMsg_CrosshairAngle(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSVCMsg_CrosshairAngle(const CSVCMsg_CrosshairAngle& from);
  CSVCMsg_CrosshairAngle(CSVCMsg_CrosshairAngle&& from) noexcept
    : CSVCMsg_CrosshairAngle() {
    *this = ::std::move(from);
  }

  inline CSVCMsg_CrosshairAngle& operator=(const CSVCMsg_CrosshairAngle& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSVCMsg_CrosshairAngle& operator=(CSVCMsg_CrosshairAngle&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSVCMsg_CrosshairAngle& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSVCMsg_CrosshairAngle* internal_default_instance() {
    return reinterpret_cast<const CSVCMsg_CrosshairAngle*>(
               &_CSVCMsg_CrosshairAngle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(CSVCMsg_CrosshairAngle& a, CSVCMsg_CrosshairAngle& b) {
    a.Swap(&b);
  }
  inline void Swap(CSVCMsg_CrosshairAngle* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSVCMsg_CrosshairAngle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSVCMsg_CrosshairAngle* New() const final {
    return new CSVCMsg_CrosshairAngle();
  }

  CSVCMsg_CrosshairAngle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSVCMsg_CrosshairAngle>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSVCMsg_CrosshairAngle& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CSVCMsg_CrosshairAngle& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSVCMsg_CrosshairAngle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSVCMsg_CrosshairAngle";
  }
  protected:
  explicit CSVCMsg_CrosshairAngle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAngleFieldNumber = 1,
  };
  // optional .CMsgQAngle angle = 1;
  bool has_angle() const;
  private:
  bool _internal_has_angle() const;
  public:
  void clear_angle();
  const ::CMsgQAngle& angle() const;
  PROTOBUF_MUST_USE_RESULT ::CMsgQAngle* release_angle();
  ::CMsgQAngle* mutable_angle();
  void set_allocated_angle(::CMsgQAngle* angle);
  private:
  const ::CMsgQAngle& _internal_angle() const;
  ::CMsgQAngle* _internal_mutable_angle();
  public:
  void unsafe_arena_set_allocated_angle(
      ::CMsgQAngle* angle);
  ::CMsgQAngle* unsafe_arena_release_angle();

  // @@protoc_insertion_point(class_scope:CSVCMsg_CrosshairAngle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CMsgQAngle* angle_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CSVCMsg_Prefetch final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSVCMsg_Prefetch) */ {
 public:
  inline CSVCMsg_Prefetch() : CSVCMsg_Prefetch(nullptr) {}
  ~CSVCMsg_Prefetch() override;
  explicit constexpr CSVCMsg_Prefetch(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSVCMsg_Prefetch(const CSVCMsg_Prefetch& from);
  CSVCMsg_Prefetch(CSVCMsg_Prefetch&& from) noexcept
    : CSVCMsg_Prefetch() {
    *this = ::std::move(from);
  }

  inline CSVCMsg_Prefetch& operator=(const CSVCMsg_Prefetch& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSVCMsg_Prefetch& operator=(CSVCMsg_Prefetch&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSVCMsg_Prefetch& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSVCMsg_Prefetch* internal_default_instance() {
    return reinterpret_cast<const CSVCMsg_Prefetch*>(
               &_CSVCMsg_Prefetch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(CSVCMsg_Prefetch& a, CSVCMsg_Prefetch& b) {
    a.Swap(&b);
  }
  inline void Swap(CSVCMsg_Prefetch* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSVCMsg_Prefetch* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSVCMsg_Prefetch* New() const final {
    return new CSVCMsg_Prefetch();
  }

  CSVCMsg_Prefetch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSVCMsg_Prefetch>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSVCMsg_Prefetch& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CSVCMsg_Prefetch& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSVCMsg_Prefetch* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSVCMsg_Prefetch";
  }
  protected:
  explicit CSVCMsg_Prefetch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSoundIndexFieldNumber = 1,
  };
  // optional int32 sound_index = 1;
  bool has_sound_index() const;
  private:
  bool _internal_has_sound_index() const;
  public:
  void clear_sound_index();
  ::PROTOBUF_NAMESPACE_ID::int32 sound_index() const;
  void set_sound_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sound_index() const;
  void _internal_set_sound_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CSVCMsg_Prefetch)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 sound_index_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CSVCMsg_BSPDecal final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSVCMsg_BSPDecal) */ {
 public:
  inline CSVCMsg_BSPDecal() : CSVCMsg_BSPDecal(nullptr) {}
  ~CSVCMsg_BSPDecal() override;
  explicit constexpr CSVCMsg_BSPDecal(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSVCMsg_BSPDecal(const CSVCMsg_BSPDecal& from);
  CSVCMsg_BSPDecal(CSVCMsg_BSPDecal&& from) noexcept
    : CSVCMsg_BSPDecal() {
    *this = ::std::move(from);
  }

  inline CSVCMsg_BSPDecal& operator=(const CSVCMsg_BSPDecal& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSVCMsg_BSPDecal& operator=(CSVCMsg_BSPDecal&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSVCMsg_BSPDecal& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSVCMsg_BSPDecal* internal_default_instance() {
    return reinterpret_cast<const CSVCMsg_BSPDecal*>(
               &_CSVCMsg_BSPDecal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(CSVCMsg_BSPDecal& a, CSVCMsg_BSPDecal& b) {
    a.Swap(&b);
  }
  inline void Swap(CSVCMsg_BSPDecal* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSVCMsg_BSPDecal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSVCMsg_BSPDecal* New() const final {
    return new CSVCMsg_BSPDecal();
  }

  CSVCMsg_BSPDecal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSVCMsg_BSPDecal>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSVCMsg_BSPDecal& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CSVCMsg_BSPDecal& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSVCMsg_BSPDecal* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSVCMsg_BSPDecal";
  }
  protected:
  explicit CSVCMsg_BSPDecal(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosFieldNumber = 1,
    kDecalTextureIndexFieldNumber = 2,
    kEntityIndexFieldNumber = 3,
    kModelIndexFieldNumber = 4,
    kLowPriorityFieldNumber = 5,
  };
  // optional .CMsgVector pos = 1;
  bool has_pos() const;
  private:
  bool _internal_has_pos() const;
  public:
  void clear_pos();
  const ::CMsgVector& pos() const;
  PROTOBUF_MUST_USE_RESULT ::CMsgVector* release_pos();
  ::CMsgVector* mutable_pos();
  void set_allocated_pos(::CMsgVector* pos);
  private:
  const ::CMsgVector& _internal_pos() const;
  ::CMsgVector* _internal_mutable_pos();
  public:
  void unsafe_arena_set_allocated_pos(
      ::CMsgVector* pos);
  ::CMsgVector* unsafe_arena_release_pos();

  // optional int32 decal_texture_index = 2;
  bool has_decal_texture_index() const;
  private:
  bool _internal_has_decal_texture_index() const;
  public:
  void clear_decal_texture_index();
  ::PROTOBUF_NAMESPACE_ID::int32 decal_texture_index() const;
  void set_decal_texture_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_decal_texture_index() const;
  void _internal_set_decal_texture_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 entity_index = 3;
  bool has_entity_index() const;
  private:
  bool _internal_has_entity_index() const;
  public:
  void clear_entity_index();
  ::PROTOBUF_NAMESPACE_ID::int32 entity_index() const;
  void set_entity_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_entity_index() const;
  void _internal_set_entity_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 model_index = 4;
  bool has_model_index() const;
  private:
  bool _internal_has_model_index() const;
  public:
  void clear_model_index();
  ::PROTOBUF_NAMESPACE_ID::int32 model_index() const;
  void set_model_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_model_index() const;
  void _internal_set_model_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool low_priority = 5;
  bool has_low_priority() const;
  private:
  bool _internal_has_low_priority() const;
  public:
  void clear_low_priority();
  bool low_priority() const;
  void set_low_priority(bool value);
  private:
  bool _internal_low_priority() const;
  void _internal_set_low_priority(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CSVCMsg_BSPDecal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CMsgVector* pos_;
  ::PROTOBUF_NAMESPACE_ID::int32 decal_texture_index_;
  ::PROTOBUF_NAMESPACE_ID::int32 entity_index_;
  ::PROTOBUF_NAMESPACE_ID::int32 model_index_;
  bool low_priority_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CSVCMsg_SplitScreen final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSVCMsg_SplitScreen) */ {
 public:
  inline CSVCMsg_SplitScreen() : CSVCMsg_SplitScreen(nullptr) {}
  ~CSVCMsg_SplitScreen() override;
  explicit constexpr CSVCMsg_SplitScreen(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSVCMsg_SplitScreen(const CSVCMsg_SplitScreen& from);
  CSVCMsg_SplitScreen(CSVCMsg_SplitScreen&& from) noexcept
    : CSVCMsg_SplitScreen() {
    *this = ::std::move(from);
  }

  inline CSVCMsg_SplitScreen& operator=(const CSVCMsg_SplitScreen& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSVCMsg_SplitScreen& operator=(CSVCMsg_SplitScreen&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSVCMsg_SplitScreen& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSVCMsg_SplitScreen* internal_default_instance() {
    return reinterpret_cast<const CSVCMsg_SplitScreen*>(
               &_CSVCMsg_SplitScreen_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(CSVCMsg_SplitScreen& a, CSVCMsg_SplitScreen& b) {
    a.Swap(&b);
  }
  inline void Swap(CSVCMsg_SplitScreen* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSVCMsg_SplitScreen* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSVCMsg_SplitScreen* New() const final {
    return new CSVCMsg_SplitScreen();
  }

  CSVCMsg_SplitScreen* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSVCMsg_SplitScreen>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSVCMsg_SplitScreen& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CSVCMsg_SplitScreen& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSVCMsg_SplitScreen* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSVCMsg_SplitScreen";
  }
  protected:
  explicit CSVCMsg_SplitScreen(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kSlotFieldNumber = 2,
    kPlayerIndexFieldNumber = 3,
  };
  // optional .ESplitScreenMessageType type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::ESplitScreenMessageType type() const;
  void set_type(::ESplitScreenMessageType value);
  private:
  ::ESplitScreenMessageType _internal_type() const;
  void _internal_set_type(::ESplitScreenMessageType value);
  public:

  // optional int32 slot = 2;
  bool has_slot() const;
  private:
  bool _internal_has_slot() const;
  public:
  void clear_slot();
  ::PROTOBUF_NAMESPACE_ID::int32 slot() const;
  void set_slot(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_slot() const;
  void _internal_set_slot(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 player_index = 3;
  bool has_player_index() const;
  private:
  bool _internal_has_player_index() const;
  public:
  void clear_player_index();
  ::PROTOBUF_NAMESPACE_ID::int32 player_index() const;
  void set_player_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_player_index() const;
  void _internal_set_player_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CSVCMsg_SplitScreen)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::int32 slot_;
  ::PROTOBUF_NAMESPACE_ID::int32 player_index_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CSVCMsg_GetCvarValue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSVCMsg_GetCvarValue) */ {
 public:
  inline CSVCMsg_GetCvarValue() : CSVCMsg_GetCvarValue(nullptr) {}
  ~CSVCMsg_GetCvarValue() override;
  explicit constexpr CSVCMsg_GetCvarValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSVCMsg_GetCvarValue(const CSVCMsg_GetCvarValue& from);
  CSVCMsg_GetCvarValue(CSVCMsg_GetCvarValue&& from) noexcept
    : CSVCMsg_GetCvarValue() {
    *this = ::std::move(from);
  }

  inline CSVCMsg_GetCvarValue& operator=(const CSVCMsg_GetCvarValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSVCMsg_GetCvarValue& operator=(CSVCMsg_GetCvarValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSVCMsg_GetCvarValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSVCMsg_GetCvarValue* internal_default_instance() {
    return reinterpret_cast<const CSVCMsg_GetCvarValue*>(
               &_CSVCMsg_GetCvarValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(CSVCMsg_GetCvarValue& a, CSVCMsg_GetCvarValue& b) {
    a.Swap(&b);
  }
  inline void Swap(CSVCMsg_GetCvarValue* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSVCMsg_GetCvarValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSVCMsg_GetCvarValue* New() const final {
    return new CSVCMsg_GetCvarValue();
  }

  CSVCMsg_GetCvarValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSVCMsg_GetCvarValue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSVCMsg_GetCvarValue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CSVCMsg_GetCvarValue& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSVCMsg_GetCvarValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSVCMsg_GetCvarValue";
  }
  protected:
  explicit CSVCMsg_GetCvarValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCvarNameFieldNumber = 2,
    kCookieFieldNumber = 1,
  };
  // optional string cvar_name = 2;
  bool has_cvar_name() const;
  private:
  bool _internal_has_cvar_name() const;
  public:
  void clear_cvar_name();
  const std::string& cvar_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cvar_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cvar_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_cvar_name();
  void set_allocated_cvar_name(std::string* cvar_name);
  private:
  const std::string& _internal_cvar_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cvar_name(const std::string& value);
  std::string* _internal_mutable_cvar_name();
  public:

  // optional int32 cookie = 1;
  bool has_cookie() const;
  private:
  bool _internal_has_cookie() const;
  public:
  void clear_cookie();
  ::PROTOBUF_NAMESPACE_ID::int32 cookie() const;
  void set_cookie(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cookie() const;
  void _internal_set_cookie(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CSVCMsg_GetCvarValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cvar_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 cookie_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CSVCMsg_Menu final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSVCMsg_Menu) */ {
 public:
  inline CSVCMsg_Menu() : CSVCMsg_Menu(nullptr) {}
  ~CSVCMsg_Menu() override;
  explicit constexpr CSVCMsg_Menu(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSVCMsg_Menu(const CSVCMsg_Menu& from);
  CSVCMsg_Menu(CSVCMsg_Menu&& from) noexcept
    : CSVCMsg_Menu() {
    *this = ::std::move(from);
  }

  inline CSVCMsg_Menu& operator=(const CSVCMsg_Menu& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSVCMsg_Menu& operator=(CSVCMsg_Menu&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSVCMsg_Menu& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSVCMsg_Menu* internal_default_instance() {
    return reinterpret_cast<const CSVCMsg_Menu*>(
               &_CSVCMsg_Menu_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(CSVCMsg_Menu& a, CSVCMsg_Menu& b) {
    a.Swap(&b);
  }
  inline void Swap(CSVCMsg_Menu* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSVCMsg_Menu* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSVCMsg_Menu* New() const final {
    return new CSVCMsg_Menu();
  }

  CSVCMsg_Menu* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSVCMsg_Menu>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSVCMsg_Menu& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CSVCMsg_Menu& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSVCMsg_Menu* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSVCMsg_Menu";
  }
  protected:
  explicit CSVCMsg_Menu(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMenuKeyValuesFieldNumber = 2,
    kDialogTypeFieldNumber = 1,
  };
  // optional bytes menu_key_values = 2;
  bool has_menu_key_values() const;
  private:
  bool _internal_has_menu_key_values() const;
  public:
  void clear_menu_key_values();
  const std::string& menu_key_values() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_menu_key_values(ArgT0&& arg0, ArgT... args);
  std::string* mutable_menu_key_values();
  PROTOBUF_MUST_USE_RESULT std::string* release_menu_key_values();
  void set_allocated_menu_key_values(std::string* menu_key_values);
  private:
  const std::string& _internal_menu_key_values() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_menu_key_values(const std::string& value);
  std::string* _internal_mutable_menu_key_values();
  public:

  // optional int32 dialog_type = 1;
  bool has_dialog_type() const;
  private:
  bool _internal_has_dialog_type() const;
  public:
  void clear_dialog_type();
  ::PROTOBUF_NAMESPACE_ID::int32 dialog_type() const;
  void set_dialog_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dialog_type() const;
  void _internal_set_dialog_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CSVCMsg_Menu)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr menu_key_values_;
  ::PROTOBUF_NAMESPACE_ID::int32 dialog_type_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CSVCMsg_UserMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSVCMsg_UserMessage) */ {
 public:
  inline CSVCMsg_UserMessage() : CSVCMsg_UserMessage(nullptr) {}
  ~CSVCMsg_UserMessage() override;
  explicit constexpr CSVCMsg_UserMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSVCMsg_UserMessage(const CSVCMsg_UserMessage& from);
  CSVCMsg_UserMessage(CSVCMsg_UserMessage&& from) noexcept
    : CSVCMsg_UserMessage() {
    *this = ::std::move(from);
  }

  inline CSVCMsg_UserMessage& operator=(const CSVCMsg_UserMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSVCMsg_UserMessage& operator=(CSVCMsg_UserMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSVCMsg_UserMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSVCMsg_UserMessage* internal_default_instance() {
    return reinterpret_cast<const CSVCMsg_UserMessage*>(
               &_CSVCMsg_UserMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(CSVCMsg_UserMessage& a, CSVCMsg_UserMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(CSVCMsg_UserMessage* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSVCMsg_UserMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSVCMsg_UserMessage* New() const final {
    return new CSVCMsg_UserMessage();
  }

  CSVCMsg_UserMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSVCMsg_UserMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSVCMsg_UserMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CSVCMsg_UserMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSVCMsg_UserMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSVCMsg_UserMessage";
  }
  protected:
  explicit CSVCMsg_UserMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgDataFieldNumber = 2,
    kMsgTypeFieldNumber = 1,
    kPassthroughFieldNumber = 3,
  };
  // optional bytes msg_data = 2;
  bool has_msg_data() const;
  private:
  bool _internal_has_msg_data() const;
  public:
  void clear_msg_data();
  const std::string& msg_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg_data();
  PROTOBUF_MUST_USE_RESULT std::string* release_msg_data();
  void set_allocated_msg_data(std::string* msg_data);
  private:
  const std::string& _internal_msg_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg_data(const std::string& value);
  std::string* _internal_mutable_msg_data();
  public:

  // optional int32 msg_type = 1;
  bool has_msg_type() const;
  private:
  bool _internal_has_msg_type() const;
  public:
  void clear_msg_type();
  ::PROTOBUF_NAMESPACE_ID::int32 msg_type() const;
  void set_msg_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_msg_type() const;
  void _internal_set_msg_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 passthrough = 3;
  bool has_passthrough() const;
  private:
  bool _internal_has_passthrough() const;
  public:
  void clear_passthrough();
  ::PROTOBUF_NAMESPACE_ID::int32 passthrough() const;
  void set_passthrough(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_passthrough() const;
  void _internal_set_passthrough(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CSVCMsg_UserMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_data_;
  ::PROTOBUF_NAMESPACE_ID::int32 msg_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 passthrough_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CSVCMsg_PaintmapData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSVCMsg_PaintmapData) */ {
 public:
  inline CSVCMsg_PaintmapData() : CSVCMsg_PaintmapData(nullptr) {}
  ~CSVCMsg_PaintmapData() override;
  explicit constexpr CSVCMsg_PaintmapData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSVCMsg_PaintmapData(const CSVCMsg_PaintmapData& from);
  CSVCMsg_PaintmapData(CSVCMsg_PaintmapData&& from) noexcept
    : CSVCMsg_PaintmapData() {
    *this = ::std::move(from);
  }

  inline CSVCMsg_PaintmapData& operator=(const CSVCMsg_PaintmapData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSVCMsg_PaintmapData& operator=(CSVCMsg_PaintmapData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSVCMsg_PaintmapData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSVCMsg_PaintmapData* internal_default_instance() {
    return reinterpret_cast<const CSVCMsg_PaintmapData*>(
               &_CSVCMsg_PaintmapData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(CSVCMsg_PaintmapData& a, CSVCMsg_PaintmapData& b) {
    a.Swap(&b);
  }
  inline void Swap(CSVCMsg_PaintmapData* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSVCMsg_PaintmapData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSVCMsg_PaintmapData* New() const final {
    return new CSVCMsg_PaintmapData();
  }

  CSVCMsg_PaintmapData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSVCMsg_PaintmapData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSVCMsg_PaintmapData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CSVCMsg_PaintmapData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSVCMsg_PaintmapData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSVCMsg_PaintmapData";
  }
  protected:
  explicit CSVCMsg_PaintmapData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPaintmapFieldNumber = 1,
  };
  // optional bytes paintmap = 1;
  bool has_paintmap() const;
  private:
  bool _internal_has_paintmap() const;
  public:
  void clear_paintmap();
  const std::string& paintmap() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_paintmap(ArgT0&& arg0, ArgT... args);
  std::string* mutable_paintmap();
  PROTOBUF_MUST_USE_RESULT std::string* release_paintmap();
  void set_allocated_paintmap(std::string* paintmap);
  private:
  const std::string& _internal_paintmap() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_paintmap(const std::string& value);
  std::string* _internal_mutable_paintmap();
  public:

  // @@protoc_insertion_point(class_scope:CSVCMsg_PaintmapData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr paintmap_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CSVCMsg_GameEvent_key_t final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSVCMsg_GameEvent.key_t) */ {
 public:
  inline CSVCMsg_GameEvent_key_t() : CSVCMsg_GameEvent_key_t(nullptr) {}
  ~CSVCMsg_GameEvent_key_t() override;
  explicit constexpr CSVCMsg_GameEvent_key_t(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSVCMsg_GameEvent_key_t(const CSVCMsg_GameEvent_key_t& from);
  CSVCMsg_GameEvent_key_t(CSVCMsg_GameEvent_key_t&& from) noexcept
    : CSVCMsg_GameEvent_key_t() {
    *this = ::std::move(from);
  }

  inline CSVCMsg_GameEvent_key_t& operator=(const CSVCMsg_GameEvent_key_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSVCMsg_GameEvent_key_t& operator=(CSVCMsg_GameEvent_key_t&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSVCMsg_GameEvent_key_t& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSVCMsg_GameEvent_key_t* internal_default_instance() {
    return reinterpret_cast<const CSVCMsg_GameEvent_key_t*>(
               &_CSVCMsg_GameEvent_key_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(CSVCMsg_GameEvent_key_t& a, CSVCMsg_GameEvent_key_t& b) {
    a.Swap(&b);
  }
  inline void Swap(CSVCMsg_GameEvent_key_t* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSVCMsg_GameEvent_key_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSVCMsg_GameEvent_key_t* New() const final {
    return new CSVCMsg_GameEvent_key_t();
  }

  CSVCMsg_GameEvent_key_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSVCMsg_GameEvent_key_t>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSVCMsg_GameEvent_key_t& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CSVCMsg_GameEvent_key_t& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSVCMsg_GameEvent_key_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSVCMsg_GameEvent.key_t";
  }
  protected:
  explicit CSVCMsg_GameEvent_key_t(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValStringFieldNumber = 2,
    kValWstringFieldNumber = 9,
    kTypeFieldNumber = 1,
    kValFloatFieldNumber = 3,
    kValLongFieldNumber = 4,
    kValShortFieldNumber = 5,
    kValByteFieldNumber = 6,
    kValBoolFieldNumber = 7,
    kValUint64FieldNumber = 8,
  };
  // optional string val_string = 2;
  bool has_val_string() const;
  private:
  bool _internal_has_val_string() const;
  public:
  void clear_val_string();
  const std::string& val_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_val_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_val_string();
  PROTOBUF_MUST_USE_RESULT std::string* release_val_string();
  void set_allocated_val_string(std::string* val_string);
  private:
  const std::string& _internal_val_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_val_string(const std::string& value);
  std::string* _internal_mutable_val_string();
  public:

  // optional bytes val_wstring = 9;
  bool has_val_wstring() const;
  private:
  bool _internal_has_val_wstring() const;
  public:
  void clear_val_wstring();
  const std::string& val_wstring() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_val_wstring(ArgT0&& arg0, ArgT... args);
  std::string* mutable_val_wstring();
  PROTOBUF_MUST_USE_RESULT std::string* release_val_wstring();
  void set_allocated_val_wstring(std::string* val_wstring);
  private:
  const std::string& _internal_val_wstring() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_val_wstring(const std::string& value);
  std::string* _internal_mutable_val_wstring();
  public:

  // optional int32 type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float val_float = 3;
  bool has_val_float() const;
  private:
  bool _internal_has_val_float() const;
  public:
  void clear_val_float();
  float val_float() const;
  void set_val_float(float value);
  private:
  float _internal_val_float() const;
  void _internal_set_val_float(float value);
  public:

  // optional int32 val_long = 4;
  bool has_val_long() const;
  private:
  bool _internal_has_val_long() const;
  public:
  void clear_val_long();
  ::PROTOBUF_NAMESPACE_ID::int32 val_long() const;
  void set_val_long(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_val_long() const;
  void _internal_set_val_long(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 val_short = 5;
  bool has_val_short() const;
  private:
  bool _internal_has_val_short() const;
  public:
  void clear_val_short();
  ::PROTOBUF_NAMESPACE_ID::int32 val_short() const;
  void set_val_short(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_val_short() const;
  void _internal_set_val_short(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 val_byte = 6;
  bool has_val_byte() const;
  private:
  bool _internal_has_val_byte() const;
  public:
  void clear_val_byte();
  ::PROTOBUF_NAMESPACE_ID::int32 val_byte() const;
  void set_val_byte(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_val_byte() const;
  void _internal_set_val_byte(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool val_bool = 7;
  bool has_val_bool() const;
  private:
  bool _internal_has_val_bool() const;
  public:
  void clear_val_bool();
  bool val_bool() const;
  void set_val_bool(bool value);
  private:
  bool _internal_val_bool() const;
  void _internal_set_val_bool(bool value);
  public:

  // optional uint64 val_uint64 = 8;
  bool has_val_uint64() const;
  private:
  bool _internal_has_val_uint64() const;
  public:
  void clear_val_uint64();
  ::PROTOBUF_NAMESPACE_ID::uint64 val_uint64() const;
  void set_val_uint64(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_val_uint64() const;
  void _internal_set_val_uint64(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CSVCMsg_GameEvent.key_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr val_string_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr val_wstring_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  float val_float_;
  ::PROTOBUF_NAMESPACE_ID::int32 val_long_;
  ::PROTOBUF_NAMESPACE_ID::int32 val_short_;
  ::PROTOBUF_NAMESPACE_ID::int32 val_byte_;
  bool val_bool_;
  ::PROTOBUF_NAMESPACE_ID::uint64 val_uint64_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CSVCMsg_GameEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSVCMsg_GameEvent) */ {
 public:
  inline CSVCMsg_GameEvent() : CSVCMsg_GameEvent(nullptr) {}
  ~CSVCMsg_GameEvent() override;
  explicit constexpr CSVCMsg_GameEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSVCMsg_GameEvent(const CSVCMsg_GameEvent& from);
  CSVCMsg_GameEvent(CSVCMsg_GameEvent&& from) noexcept
    : CSVCMsg_GameEvent() {
    *this = ::std::move(from);
  }

  inline CSVCMsg_GameEvent& operator=(const CSVCMsg_GameEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSVCMsg_GameEvent& operator=(CSVCMsg_GameEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSVCMsg_GameEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSVCMsg_GameEvent* internal_default_instance() {
    return reinterpret_cast<const CSVCMsg_GameEvent*>(
               &_CSVCMsg_GameEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(CSVCMsg_GameEvent& a, CSVCMsg_GameEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(CSVCMsg_GameEvent* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSVCMsg_GameEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSVCMsg_GameEvent* New() const final {
    return new CSVCMsg_GameEvent();
  }

  CSVCMsg_GameEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSVCMsg_GameEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSVCMsg_GameEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CSVCMsg_GameEvent& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSVCMsg_GameEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSVCMsg_GameEvent";
  }
  protected:
  explicit CSVCMsg_GameEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CSVCMsg_GameEvent_key_t key_t;

  // accessors -------------------------------------------------------

  enum : int {
    kKeysFieldNumber = 3,
    kEventNameFieldNumber = 1,
    kEventidFieldNumber = 2,
    kPassthroughFieldNumber = 4,
  };
  // repeated .CSVCMsg_GameEvent.key_t keys = 3;
  int keys_size() const;
  private:
  int _internal_keys_size() const;
  public:
  void clear_keys();
  ::CSVCMsg_GameEvent_key_t* mutable_keys(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSVCMsg_GameEvent_key_t >*
      mutable_keys();
  private:
  const ::CSVCMsg_GameEvent_key_t& _internal_keys(int index) const;
  ::CSVCMsg_GameEvent_key_t* _internal_add_keys();
  public:
  const ::CSVCMsg_GameEvent_key_t& keys(int index) const;
  ::CSVCMsg_GameEvent_key_t* add_keys();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSVCMsg_GameEvent_key_t >&
      keys() const;

  // optional string event_name = 1;
  bool has_event_name() const;
  private:
  bool _internal_has_event_name() const;
  public:
  void clear_event_name();
  const std::string& event_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_event_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_event_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_event_name();
  void set_allocated_event_name(std::string* event_name);
  private:
  const std::string& _internal_event_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_event_name(const std::string& value);
  std::string* _internal_mutable_event_name();
  public:

  // optional int32 eventid = 2;
  bool has_eventid() const;
  private:
  bool _internal_has_eventid() const;
  public:
  void clear_eventid();
  ::PROTOBUF_NAMESPACE_ID::int32 eventid() const;
  void set_eventid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_eventid() const;
  void _internal_set_eventid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 passthrough = 4;
  bool has_passthrough() const;
  private:
  bool _internal_has_passthrough() const;
  public:
  void clear_passthrough();
  ::PROTOBUF_NAMESPACE_ID::int32 passthrough() const;
  void set_passthrough(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_passthrough() const;
  void _internal_set_passthrough(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CSVCMsg_GameEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSVCMsg_GameEvent_key_t > keys_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr event_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 eventid_;
  ::PROTOBUF_NAMESPACE_ID::int32 passthrough_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CSVCMsg_GameEventList_key_t final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSVCMsg_GameEventList.key_t) */ {
 public:
  inline CSVCMsg_GameEventList_key_t() : CSVCMsg_GameEventList_key_t(nullptr) {}
  ~CSVCMsg_GameEventList_key_t() override;
  explicit constexpr CSVCMsg_GameEventList_key_t(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSVCMsg_GameEventList_key_t(const CSVCMsg_GameEventList_key_t& from);
  CSVCMsg_GameEventList_key_t(CSVCMsg_GameEventList_key_t&& from) noexcept
    : CSVCMsg_GameEventList_key_t() {
    *this = ::std::move(from);
  }

  inline CSVCMsg_GameEventList_key_t& operator=(const CSVCMsg_GameEventList_key_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSVCMsg_GameEventList_key_t& operator=(CSVCMsg_GameEventList_key_t&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSVCMsg_GameEventList_key_t& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSVCMsg_GameEventList_key_t* internal_default_instance() {
    return reinterpret_cast<const CSVCMsg_GameEventList_key_t*>(
               &_CSVCMsg_GameEventList_key_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(CSVCMsg_GameEventList_key_t& a, CSVCMsg_GameEventList_key_t& b) {
    a.Swap(&b);
  }
  inline void Swap(CSVCMsg_GameEventList_key_t* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSVCMsg_GameEventList_key_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSVCMsg_GameEventList_key_t* New() const final {
    return new CSVCMsg_GameEventList_key_t();
  }

  CSVCMsg_GameEventList_key_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSVCMsg_GameEventList_key_t>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSVCMsg_GameEventList_key_t& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CSVCMsg_GameEventList_key_t& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSVCMsg_GameEventList_key_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSVCMsg_GameEventList.key_t";
  }
  protected:
  explicit CSVCMsg_GameEventList_key_t(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional int32 type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CSVCMsg_GameEventList.key_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CSVCMsg_GameEventList_descriptor_t final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSVCMsg_GameEventList.descriptor_t) */ {
 public:
  inline CSVCMsg_GameEventList_descriptor_t() : CSVCMsg_GameEventList_descriptor_t(nullptr) {}
  ~CSVCMsg_GameEventList_descriptor_t() override;
  explicit constexpr CSVCMsg_GameEventList_descriptor_t(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSVCMsg_GameEventList_descriptor_t(const CSVCMsg_GameEventList_descriptor_t& from);
  CSVCMsg_GameEventList_descriptor_t(CSVCMsg_GameEventList_descriptor_t&& from) noexcept
    : CSVCMsg_GameEventList_descriptor_t() {
    *this = ::std::move(from);
  }

  inline CSVCMsg_GameEventList_descriptor_t& operator=(const CSVCMsg_GameEventList_descriptor_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSVCMsg_GameEventList_descriptor_t& operator=(CSVCMsg_GameEventList_descriptor_t&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSVCMsg_GameEventList_descriptor_t& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSVCMsg_GameEventList_descriptor_t* internal_default_instance() {
    return reinterpret_cast<const CSVCMsg_GameEventList_descriptor_t*>(
               &_CSVCMsg_GameEventList_descriptor_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(CSVCMsg_GameEventList_descriptor_t& a, CSVCMsg_GameEventList_descriptor_t& b) {
    a.Swap(&b);
  }
  inline void Swap(CSVCMsg_GameEventList_descriptor_t* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSVCMsg_GameEventList_descriptor_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSVCMsg_GameEventList_descriptor_t* New() const final {
    return new CSVCMsg_GameEventList_descriptor_t();
  }

  CSVCMsg_GameEventList_descriptor_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSVCMsg_GameEventList_descriptor_t>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSVCMsg_GameEventList_descriptor_t& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CSVCMsg_GameEventList_descriptor_t& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSVCMsg_GameEventList_descriptor_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSVCMsg_GameEventList.descriptor_t";
  }
  protected:
  explicit CSVCMsg_GameEventList_descriptor_t(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeysFieldNumber = 3,
    kNameFieldNumber = 2,
    kEventidFieldNumber = 1,
  };
  // repeated .CSVCMsg_GameEventList.key_t keys = 3;
  int keys_size() const;
  private:
  int _internal_keys_size() const;
  public:
  void clear_keys();
  ::CSVCMsg_GameEventList_key_t* mutable_keys(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSVCMsg_GameEventList_key_t >*
      mutable_keys();
  private:
  const ::CSVCMsg_GameEventList_key_t& _internal_keys(int index) const;
  ::CSVCMsg_GameEventList_key_t* _internal_add_keys();
  public:
  const ::CSVCMsg_GameEventList_key_t& keys(int index) const;
  ::CSVCMsg_GameEventList_key_t* add_keys();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSVCMsg_GameEventList_key_t >&
      keys() const;

  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional int32 eventid = 1;
  bool has_eventid() const;
  private:
  bool _internal_has_eventid() const;
  public:
  void clear_eventid();
  ::PROTOBUF_NAMESPACE_ID::int32 eventid() const;
  void set_eventid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_eventid() const;
  void _internal_set_eventid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CSVCMsg_GameEventList.descriptor_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSVCMsg_GameEventList_key_t > keys_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 eventid_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CSVCMsg_GameEventList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSVCMsg_GameEventList) */ {
 public:
  inline CSVCMsg_GameEventList() : CSVCMsg_GameEventList(nullptr) {}
  ~CSVCMsg_GameEventList() override;
  explicit constexpr CSVCMsg_GameEventList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSVCMsg_GameEventList(const CSVCMsg_GameEventList& from);
  CSVCMsg_GameEventList(CSVCMsg_GameEventList&& from) noexcept
    : CSVCMsg_GameEventList() {
    *this = ::std::move(from);
  }

  inline CSVCMsg_GameEventList& operator=(const CSVCMsg_GameEventList& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSVCMsg_GameEventList& operator=(CSVCMsg_GameEventList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSVCMsg_GameEventList& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSVCMsg_GameEventList* internal_default_instance() {
    return reinterpret_cast<const CSVCMsg_GameEventList*>(
               &_CSVCMsg_GameEventList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(CSVCMsg_GameEventList& a, CSVCMsg_GameEventList& b) {
    a.Swap(&b);
  }
  inline void Swap(CSVCMsg_GameEventList* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSVCMsg_GameEventList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSVCMsg_GameEventList* New() const final {
    return new CSVCMsg_GameEventList();
  }

  CSVCMsg_GameEventList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSVCMsg_GameEventList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSVCMsg_GameEventList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CSVCMsg_GameEventList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSVCMsg_GameEventList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSVCMsg_GameEventList";
  }
  protected:
  explicit CSVCMsg_GameEventList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CSVCMsg_GameEventList_key_t key_t;
  typedef CSVCMsg_GameEventList_descriptor_t descriptor_t;

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptorsFieldNumber = 1,
  };
  // repeated .CSVCMsg_GameEventList.descriptor_t descriptors = 1;
  int descriptors_size() const;
  private:
  int _internal_descriptors_size() const;
  public:
  void clear_descriptors();
  ::CSVCMsg_GameEventList_descriptor_t* mutable_descriptors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSVCMsg_GameEventList_descriptor_t >*
      mutable_descriptors();
  private:
  const ::CSVCMsg_GameEventList_descriptor_t& _internal_descriptors(int index) const;
  ::CSVCMsg_GameEventList_descriptor_t* _internal_add_descriptors();
  public:
  const ::CSVCMsg_GameEventList_descriptor_t& descriptors(int index) const;
  ::CSVCMsg_GameEventList_descriptor_t* add_descriptors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSVCMsg_GameEventList_descriptor_t >&
      descriptors() const;

  // @@protoc_insertion_point(class_scope:CSVCMsg_GameEventList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSVCMsg_GameEventList_descriptor_t > descriptors_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CSVCMsg_TempEntities final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSVCMsg_TempEntities) */ {
 public:
  inline CSVCMsg_TempEntities() : CSVCMsg_TempEntities(nullptr) {}
  ~CSVCMsg_TempEntities() override;
  explicit constexpr CSVCMsg_TempEntities(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSVCMsg_TempEntities(const CSVCMsg_TempEntities& from);
  CSVCMsg_TempEntities(CSVCMsg_TempEntities&& from) noexcept
    : CSVCMsg_TempEntities() {
    *this = ::std::move(from);
  }

  inline CSVCMsg_TempEntities& operator=(const CSVCMsg_TempEntities& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSVCMsg_TempEntities& operator=(CSVCMsg_TempEntities&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSVCMsg_TempEntities& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSVCMsg_TempEntities* internal_default_instance() {
    return reinterpret_cast<const CSVCMsg_TempEntities*>(
               &_CSVCMsg_TempEntities_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(CSVCMsg_TempEntities& a, CSVCMsg_TempEntities& b) {
    a.Swap(&b);
  }
  inline void Swap(CSVCMsg_TempEntities* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSVCMsg_TempEntities* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSVCMsg_TempEntities* New() const final {
    return new CSVCMsg_TempEntities();
  }

  CSVCMsg_TempEntities* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSVCMsg_TempEntities>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSVCMsg_TempEntities& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CSVCMsg_TempEntities& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSVCMsg_TempEntities* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSVCMsg_TempEntities";
  }
  protected:
  explicit CSVCMsg_TempEntities(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntityDataFieldNumber = 3,
    kReliableFieldNumber = 1,
    kNumEntriesFieldNumber = 2,
  };
  // optional bytes entity_data = 3;
  bool has_entity_data() const;
  private:
  bool _internal_has_entity_data() const;
  public:
  void clear_entity_data();
  const std::string& entity_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_entity_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_entity_data();
  PROTOBUF_MUST_USE_RESULT std::string* release_entity_data();
  void set_allocated_entity_data(std::string* entity_data);
  private:
  const std::string& _internal_entity_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_entity_data(const std::string& value);
  std::string* _internal_mutable_entity_data();
  public:

  // optional bool reliable = 1;
  bool has_reliable() const;
  private:
  bool _internal_has_reliable() const;
  public:
  void clear_reliable();
  bool reliable() const;
  void set_reliable(bool value);
  private:
  bool _internal_reliable() const;
  void _internal_set_reliable(bool value);
  public:

  // optional int32 num_entries = 2;
  bool has_num_entries() const;
  private:
  bool _internal_has_num_entries() const;
  public:
  void clear_num_entries();
  ::PROTOBUF_NAMESPACE_ID::int32 num_entries() const;
  void set_num_entries(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num_entries() const;
  void _internal_set_num_entries(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CSVCMsg_TempEntities)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr entity_data_;
  bool reliable_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_entries_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CSVCMsg_PacketEntities final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSVCMsg_PacketEntities) */ {
 public:
  inline CSVCMsg_PacketEntities() : CSVCMsg_PacketEntities(nullptr) {}
  ~CSVCMsg_PacketEntities() override;
  explicit constexpr CSVCMsg_PacketEntities(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSVCMsg_PacketEntities(const CSVCMsg_PacketEntities& from);
  CSVCMsg_PacketEntities(CSVCMsg_PacketEntities&& from) noexcept
    : CSVCMsg_PacketEntities() {
    *this = ::std::move(from);
  }

  inline CSVCMsg_PacketEntities& operator=(const CSVCMsg_PacketEntities& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSVCMsg_PacketEntities& operator=(CSVCMsg_PacketEntities&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSVCMsg_PacketEntities& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSVCMsg_PacketEntities* internal_default_instance() {
    return reinterpret_cast<const CSVCMsg_PacketEntities*>(
               &_CSVCMsg_PacketEntities_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(CSVCMsg_PacketEntities& a, CSVCMsg_PacketEntities& b) {
    a.Swap(&b);
  }
  inline void Swap(CSVCMsg_PacketEntities* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSVCMsg_PacketEntities* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSVCMsg_PacketEntities* New() const final {
    return new CSVCMsg_PacketEntities();
  }

  CSVCMsg_PacketEntities* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSVCMsg_PacketEntities>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSVCMsg_PacketEntities& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CSVCMsg_PacketEntities& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSVCMsg_PacketEntities* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSVCMsg_PacketEntities";
  }
  protected:
  explicit CSVCMsg_PacketEntities(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntityDataFieldNumber = 7,
    kMaxEntriesFieldNumber = 1,
    kUpdatedEntriesFieldNumber = 2,
    kIsDeltaFieldNumber = 3,
    kUpdateBaselineFieldNumber = 4,
    kBaselineFieldNumber = 5,
    kDeltaFromFieldNumber = 6,
  };
  // optional bytes entity_data = 7;
  bool has_entity_data() const;
  private:
  bool _internal_has_entity_data() const;
  public:
  void clear_entity_data();
  const std::string& entity_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_entity_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_entity_data();
  PROTOBUF_MUST_USE_RESULT std::string* release_entity_data();
  void set_allocated_entity_data(std::string* entity_data);
  private:
  const std::string& _internal_entity_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_entity_data(const std::string& value);
  std::string* _internal_mutable_entity_data();
  public:

  // optional int32 max_entries = 1;
  bool has_max_entries() const;
  private:
  bool _internal_has_max_entries() const;
  public:
  void clear_max_entries();
  ::PROTOBUF_NAMESPACE_ID::int32 max_entries() const;
  void set_max_entries(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_entries() const;
  void _internal_set_max_entries(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 updated_entries = 2;
  bool has_updated_entries() const;
  private:
  bool _internal_has_updated_entries() const;
  public:
  void clear_updated_entries();
  ::PROTOBUF_NAMESPACE_ID::int32 updated_entries() const;
  void set_updated_entries(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_updated_entries() const;
  void _internal_set_updated_entries(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool is_delta = 3;
  bool has_is_delta() const;
  private:
  bool _internal_has_is_delta() const;
  public:
  void clear_is_delta();
  bool is_delta() const;
  void set_is_delta(bool value);
  private:
  bool _internal_is_delta() const;
  void _internal_set_is_delta(bool value);
  public:

  // optional bool update_baseline = 4;
  bool has_update_baseline() const;
  private:
  bool _internal_has_update_baseline() const;
  public:
  void clear_update_baseline();
  bool update_baseline() const;
  void set_update_baseline(bool value);
  private:
  bool _internal_update_baseline() const;
  void _internal_set_update_baseline(bool value);
  public:

  // optional int32 baseline = 5;
  bool has_baseline() const;
  private:
  bool _internal_has_baseline() const;
  public:
  void clear_baseline();
  ::PROTOBUF_NAMESPACE_ID::int32 baseline() const;
  void set_baseline(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_baseline() const;
  void _internal_set_baseline(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 delta_from = 6;
  bool has_delta_from() const;
  private:
  bool _internal_has_delta_from() const;
  public:
  void clear_delta_from();
  ::PROTOBUF_NAMESPACE_ID::int32 delta_from() const;
  void set_delta_from(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_delta_from() const;
  void _internal_set_delta_from(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CSVCMsg_PacketEntities)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr entity_data_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_entries_;
  ::PROTOBUF_NAMESPACE_ID::int32 updated_entries_;
  bool is_delta_;
  bool update_baseline_;
  ::PROTOBUF_NAMESPACE_ID::int32 baseline_;
  ::PROTOBUF_NAMESPACE_ID::int32 delta_from_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CSVCMsg_Sounds_sounddata_t final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSVCMsg_Sounds.sounddata_t) */ {
 public:
  inline CSVCMsg_Sounds_sounddata_t() : CSVCMsg_Sounds_sounddata_t(nullptr) {}
  ~CSVCMsg_Sounds_sounddata_t() override;
  explicit constexpr CSVCMsg_Sounds_sounddata_t(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSVCMsg_Sounds_sounddata_t(const CSVCMsg_Sounds_sounddata_t& from);
  CSVCMsg_Sounds_sounddata_t(CSVCMsg_Sounds_sounddata_t&& from) noexcept
    : CSVCMsg_Sounds_sounddata_t() {
    *this = ::std::move(from);
  }

  inline CSVCMsg_Sounds_sounddata_t& operator=(const CSVCMsg_Sounds_sounddata_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSVCMsg_Sounds_sounddata_t& operator=(CSVCMsg_Sounds_sounddata_t&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSVCMsg_Sounds_sounddata_t& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSVCMsg_Sounds_sounddata_t* internal_default_instance() {
    return reinterpret_cast<const CSVCMsg_Sounds_sounddata_t*>(
               &_CSVCMsg_Sounds_sounddata_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(CSVCMsg_Sounds_sounddata_t& a, CSVCMsg_Sounds_sounddata_t& b) {
    a.Swap(&b);
  }
  inline void Swap(CSVCMsg_Sounds_sounddata_t* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSVCMsg_Sounds_sounddata_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSVCMsg_Sounds_sounddata_t* New() const final {
    return new CSVCMsg_Sounds_sounddata_t();
  }

  CSVCMsg_Sounds_sounddata_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSVCMsg_Sounds_sounddata_t>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSVCMsg_Sounds_sounddata_t& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CSVCMsg_Sounds_sounddata_t& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSVCMsg_Sounds_sounddata_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSVCMsg_Sounds.sounddata_t";
  }
  protected:
  explicit CSVCMsg_Sounds_sounddata_t(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOriginXFieldNumber = 1,
    kOriginYFieldNumber = 2,
    kOriginZFieldNumber = 3,
    kVolumeFieldNumber = 4,
    kDelayValueFieldNumber = 5,
    kSequenceNumberFieldNumber = 6,
    kEntityIndexFieldNumber = 7,
    kChannelFieldNumber = 8,
    kPitchFieldNumber = 9,
    kFlagsFieldNumber = 10,
    kSoundNumFieldNumber = 11,
    kSoundNumHandleFieldNumber = 12,
    kSpeakerEntityFieldNumber = 13,
    kRandomSeedFieldNumber = 14,
    kSoundLevelFieldNumber = 15,
    kIsSentenceFieldNumber = 16,
    kIsAmbientFieldNumber = 17,
  };
  // optional sint32 origin_x = 1;
  bool has_origin_x() const;
  private:
  bool _internal_has_origin_x() const;
  public:
  void clear_origin_x();
  ::PROTOBUF_NAMESPACE_ID::int32 origin_x() const;
  void set_origin_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_origin_x() const;
  void _internal_set_origin_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional sint32 origin_y = 2;
  bool has_origin_y() const;
  private:
  bool _internal_has_origin_y() const;
  public:
  void clear_origin_y();
  ::PROTOBUF_NAMESPACE_ID::int32 origin_y() const;
  void set_origin_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_origin_y() const;
  void _internal_set_origin_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional sint32 origin_z = 3;
  bool has_origin_z() const;
  private:
  bool _internal_has_origin_z() const;
  public:
  void clear_origin_z();
  ::PROTOBUF_NAMESPACE_ID::int32 origin_z() const;
  void set_origin_z(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_origin_z() const;
  void _internal_set_origin_z(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint32 volume = 4;
  bool has_volume() const;
  private:
  bool _internal_has_volume() const;
  public:
  void clear_volume();
  ::PROTOBUF_NAMESPACE_ID::uint32 volume() const;
  void set_volume(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_volume() const;
  void _internal_set_volume(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float delay_value = 5;
  bool has_delay_value() const;
  private:
  bool _internal_has_delay_value() const;
  public:
  void clear_delay_value();
  float delay_value() const;
  void set_delay_value(float value);
  private:
  float _internal_delay_value() const;
  void _internal_set_delay_value(float value);
  public:

  // optional int32 sequence_number = 6;
  bool has_sequence_number() const;
  private:
  bool _internal_has_sequence_number() const;
  public:
  void clear_sequence_number();
  ::PROTOBUF_NAMESPACE_ID::int32 sequence_number() const;
  void set_sequence_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sequence_number() const;
  void _internal_set_sequence_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 entity_index = 7;
  bool has_entity_index() const;
  private:
  bool _internal_has_entity_index() const;
  public:
  void clear_entity_index();
  ::PROTOBUF_NAMESPACE_ID::int32 entity_index() const;
  void set_entity_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_entity_index() const;
  void _internal_set_entity_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 channel = 8;
  bool has_channel() const;
  private:
  bool _internal_has_channel() const;
  public:
  void clear_channel();
  ::PROTOBUF_NAMESPACE_ID::int32 channel() const;
  void set_channel(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_channel() const;
  void _internal_set_channel(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 pitch = 9;
  bool has_pitch() const;
  private:
  bool _internal_has_pitch() const;
  public:
  void clear_pitch();
  ::PROTOBUF_NAMESPACE_ID::int32 pitch() const;
  void set_pitch(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pitch() const;
  void _internal_set_pitch(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 flags = 10;
  bool has_flags() const;
  private:
  bool _internal_has_flags() const;
  public:
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::int32 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_flags() const;
  void _internal_set_flags(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint32 sound_num = 11;
  bool has_sound_num() const;
  private:
  bool _internal_has_sound_num() const;
  public:
  void clear_sound_num();
  ::PROTOBUF_NAMESPACE_ID::uint32 sound_num() const;
  void set_sound_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sound_num() const;
  void _internal_set_sound_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional fixed32 sound_num_handle = 12;
  bool has_sound_num_handle() const;
  private:
  bool _internal_has_sound_num_handle() const;
  public:
  void clear_sound_num_handle();
  ::PROTOBUF_NAMESPACE_ID::uint32 sound_num_handle() const;
  void set_sound_num_handle(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sound_num_handle() const;
  void _internal_set_sound_num_handle(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int32 speaker_entity = 13;
  bool has_speaker_entity() const;
  private:
  bool _internal_has_speaker_entity() const;
  public:
  void clear_speaker_entity();
  ::PROTOBUF_NAMESPACE_ID::int32 speaker_entity() const;
  void set_speaker_entity(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_speaker_entity() const;
  void _internal_set_speaker_entity(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 random_seed = 14;
  bool has_random_seed() const;
  private:
  bool _internal_has_random_seed() const;
  public:
  void clear_random_seed();
  ::PROTOBUF_NAMESPACE_ID::int32 random_seed() const;
  void set_random_seed(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_random_seed() const;
  void _internal_set_random_seed(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 sound_level = 15;
  bool has_sound_level() const;
  private:
  bool _internal_has_sound_level() const;
  public:
  void clear_sound_level();
  ::PROTOBUF_NAMESPACE_ID::int32 sound_level() const;
  void set_sound_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sound_level() const;
  void _internal_set_sound_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool is_sentence = 16;
  bool has_is_sentence() const;
  private:
  bool _internal_has_is_sentence() const;
  public:
  void clear_is_sentence();
  bool is_sentence() const;
  void set_is_sentence(bool value);
  private:
  bool _internal_is_sentence() const;
  void _internal_set_is_sentence(bool value);
  public:

  // optional bool is_ambient = 17;
  bool has_is_ambient() const;
  private:
  bool _internal_has_is_ambient() const;
  public:
  void clear_is_ambient();
  bool is_ambient() const;
  void set_is_ambient(bool value);
  private:
  bool _internal_is_ambient() const;
  void _internal_set_is_ambient(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CSVCMsg_Sounds.sounddata_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 origin_x_;
  ::PROTOBUF_NAMESPACE_ID::int32 origin_y_;
  ::PROTOBUF_NAMESPACE_ID::int32 origin_z_;
  ::PROTOBUF_NAMESPACE_ID::uint32 volume_;
  float delay_value_;
  ::PROTOBUF_NAMESPACE_ID::int32 sequence_number_;
  ::PROTOBUF_NAMESPACE_ID::int32 entity_index_;
  ::PROTOBUF_NAMESPACE_ID::int32 channel_;
  ::PROTOBUF_NAMESPACE_ID::int32 pitch_;
  ::PROTOBUF_NAMESPACE_ID::int32 flags_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sound_num_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sound_num_handle_;
  ::PROTOBUF_NAMESPACE_ID::int32 speaker_entity_;
  ::PROTOBUF_NAMESPACE_ID::int32 random_seed_;
  ::PROTOBUF_NAMESPACE_ID::int32 sound_level_;
  bool is_sentence_;
  bool is_ambient_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CSVCMsg_Sounds final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSVCMsg_Sounds) */ {
 public:
  inline CSVCMsg_Sounds() : CSVCMsg_Sounds(nullptr) {}
  ~CSVCMsg_Sounds() override;
  explicit constexpr CSVCMsg_Sounds(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSVCMsg_Sounds(const CSVCMsg_Sounds& from);
  CSVCMsg_Sounds(CSVCMsg_Sounds&& from) noexcept
    : CSVCMsg_Sounds() {
    *this = ::std::move(from);
  }

  inline CSVCMsg_Sounds& operator=(const CSVCMsg_Sounds& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSVCMsg_Sounds& operator=(CSVCMsg_Sounds&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSVCMsg_Sounds& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSVCMsg_Sounds* internal_default_instance() {
    return reinterpret_cast<const CSVCMsg_Sounds*>(
               &_CSVCMsg_Sounds_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(CSVCMsg_Sounds& a, CSVCMsg_Sounds& b) {
    a.Swap(&b);
  }
  inline void Swap(CSVCMsg_Sounds* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSVCMsg_Sounds* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSVCMsg_Sounds* New() const final {
    return new CSVCMsg_Sounds();
  }

  CSVCMsg_Sounds* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSVCMsg_Sounds>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSVCMsg_Sounds& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CSVCMsg_Sounds& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSVCMsg_Sounds* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSVCMsg_Sounds";
  }
  protected:
  explicit CSVCMsg_Sounds(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CSVCMsg_Sounds_sounddata_t sounddata_t;

  // accessors -------------------------------------------------------

  enum : int {
    kSoundsFieldNumber = 2,
    kReliableSoundFieldNumber = 1,
  };
  // repeated .CSVCMsg_Sounds.sounddata_t sounds = 2;
  int sounds_size() const;
  private:
  int _internal_sounds_size() const;
  public:
  void clear_sounds();
  ::CSVCMsg_Sounds_sounddata_t* mutable_sounds(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSVCMsg_Sounds_sounddata_t >*
      mutable_sounds();
  private:
  const ::CSVCMsg_Sounds_sounddata_t& _internal_sounds(int index) const;
  ::CSVCMsg_Sounds_sounddata_t* _internal_add_sounds();
  public:
  const ::CSVCMsg_Sounds_sounddata_t& sounds(int index) const;
  ::CSVCMsg_Sounds_sounddata_t* add_sounds();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSVCMsg_Sounds_sounddata_t >&
      sounds() const;

  // optional bool reliable_sound = 1;
  bool has_reliable_sound() const;
  private:
  bool _internal_has_reliable_sound() const;
  public:
  void clear_reliable_sound();
  bool reliable_sound() const;
  void set_reliable_sound(bool value);
  private:
  bool _internal_reliable_sound() const;
  void _internal_set_reliable_sound(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CSVCMsg_Sounds)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSVCMsg_Sounds_sounddata_t > sounds_;
  bool reliable_sound_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CSVCMsg_EntityMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSVCMsg_EntityMsg) */ {
 public:
  inline CSVCMsg_EntityMsg() : CSVCMsg_EntityMsg(nullptr) {}
  ~CSVCMsg_EntityMsg() override;
  explicit constexpr CSVCMsg_EntityMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSVCMsg_EntityMsg(const CSVCMsg_EntityMsg& from);
  CSVCMsg_EntityMsg(CSVCMsg_EntityMsg&& from) noexcept
    : CSVCMsg_EntityMsg() {
    *this = ::std::move(from);
  }

  inline CSVCMsg_EntityMsg& operator=(const CSVCMsg_EntityMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSVCMsg_EntityMsg& operator=(CSVCMsg_EntityMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSVCMsg_EntityMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSVCMsg_EntityMsg* internal_default_instance() {
    return reinterpret_cast<const CSVCMsg_EntityMsg*>(
               &_CSVCMsg_EntityMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(CSVCMsg_EntityMsg& a, CSVCMsg_EntityMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(CSVCMsg_EntityMsg* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSVCMsg_EntityMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSVCMsg_EntityMsg* New() const final {
    return new CSVCMsg_EntityMsg();
  }

  CSVCMsg_EntityMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSVCMsg_EntityMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSVCMsg_EntityMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CSVCMsg_EntityMsg& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSVCMsg_EntityMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSVCMsg_EntityMsg";
  }
  protected:
  explicit CSVCMsg_EntityMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntDataFieldNumber = 3,
    kEntIndexFieldNumber = 1,
    kClassIdFieldNumber = 2,
  };
  // optional bytes ent_data = 3;
  bool has_ent_data() const;
  private:
  bool _internal_has_ent_data() const;
  public:
  void clear_ent_data();
  const std::string& ent_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ent_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ent_data();
  PROTOBUF_MUST_USE_RESULT std::string* release_ent_data();
  void set_allocated_ent_data(std::string* ent_data);
  private:
  const std::string& _internal_ent_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ent_data(const std::string& value);
  std::string* _internal_mutable_ent_data();
  public:

  // optional int32 ent_index = 1;
  bool has_ent_index() const;
  private:
  bool _internal_has_ent_index() const;
  public:
  void clear_ent_index();
  ::PROTOBUF_NAMESPACE_ID::int32 ent_index() const;
  void set_ent_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ent_index() const;
  void _internal_set_ent_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 class_id = 2;
  bool has_class_id() const;
  private:
  bool _internal_has_class_id() const;
  public:
  void clear_class_id();
  ::PROTOBUF_NAMESPACE_ID::int32 class_id() const;
  void set_class_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_class_id() const;
  void _internal_set_class_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CSVCMsg_EntityMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ent_data_;
  ::PROTOBUF_NAMESPACE_ID::int32 ent_index_;
  ::PROTOBUF_NAMESPACE_ID::int32 class_id_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CSVCMsg_CmdKeyValues final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSVCMsg_CmdKeyValues) */ {
 public:
  inline CSVCMsg_CmdKeyValues() : CSVCMsg_CmdKeyValues(nullptr) {}
  ~CSVCMsg_CmdKeyValues() override;
  explicit constexpr CSVCMsg_CmdKeyValues(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSVCMsg_CmdKeyValues(const CSVCMsg_CmdKeyValues& from);
  CSVCMsg_CmdKeyValues(CSVCMsg_CmdKeyValues&& from) noexcept
    : CSVCMsg_CmdKeyValues() {
    *this = ::std::move(from);
  }

  inline CSVCMsg_CmdKeyValues& operator=(const CSVCMsg_CmdKeyValues& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSVCMsg_CmdKeyValues& operator=(CSVCMsg_CmdKeyValues&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSVCMsg_CmdKeyValues& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSVCMsg_CmdKeyValues* internal_default_instance() {
    return reinterpret_cast<const CSVCMsg_CmdKeyValues*>(
               &_CSVCMsg_CmdKeyValues_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(CSVCMsg_CmdKeyValues& a, CSVCMsg_CmdKeyValues& b) {
    a.Swap(&b);
  }
  inline void Swap(CSVCMsg_CmdKeyValues* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSVCMsg_CmdKeyValues* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSVCMsg_CmdKeyValues* New() const final {
    return new CSVCMsg_CmdKeyValues();
  }

  CSVCMsg_CmdKeyValues* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSVCMsg_CmdKeyValues>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSVCMsg_CmdKeyValues& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CSVCMsg_CmdKeyValues& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSVCMsg_CmdKeyValues* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSVCMsg_CmdKeyValues";
  }
  protected:
  explicit CSVCMsg_CmdKeyValues(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyvaluesFieldNumber = 1,
  };
  // optional bytes keyvalues = 1;
  bool has_keyvalues() const;
  private:
  bool _internal_has_keyvalues() const;
  public:
  void clear_keyvalues();
  const std::string& keyvalues() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_keyvalues(ArgT0&& arg0, ArgT... args);
  std::string* mutable_keyvalues();
  PROTOBUF_MUST_USE_RESULT std::string* release_keyvalues();
  void set_allocated_keyvalues(std::string* keyvalues);
  private:
  const std::string& _internal_keyvalues() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_keyvalues(const std::string& value);
  std::string* _internal_mutable_keyvalues();
  public:

  // @@protoc_insertion_point(class_scope:CSVCMsg_CmdKeyValues)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr keyvalues_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CSVCMsg_EncryptedData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSVCMsg_EncryptedData) */ {
 public:
  inline CSVCMsg_EncryptedData() : CSVCMsg_EncryptedData(nullptr) {}
  ~CSVCMsg_EncryptedData() override;
  explicit constexpr CSVCMsg_EncryptedData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSVCMsg_EncryptedData(const CSVCMsg_EncryptedData& from);
  CSVCMsg_EncryptedData(CSVCMsg_EncryptedData&& from) noexcept
    : CSVCMsg_EncryptedData() {
    *this = ::std::move(from);
  }

  inline CSVCMsg_EncryptedData& operator=(const CSVCMsg_EncryptedData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSVCMsg_EncryptedData& operator=(CSVCMsg_EncryptedData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSVCMsg_EncryptedData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSVCMsg_EncryptedData* internal_default_instance() {
    return reinterpret_cast<const CSVCMsg_EncryptedData*>(
               &_CSVCMsg_EncryptedData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(CSVCMsg_EncryptedData& a, CSVCMsg_EncryptedData& b) {
    a.Swap(&b);
  }
  inline void Swap(CSVCMsg_EncryptedData* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSVCMsg_EncryptedData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSVCMsg_EncryptedData* New() const final {
    return new CSVCMsg_EncryptedData();
  }

  CSVCMsg_EncryptedData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSVCMsg_EncryptedData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSVCMsg_EncryptedData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CSVCMsg_EncryptedData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSVCMsg_EncryptedData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSVCMsg_EncryptedData";
  }
  protected:
  explicit CSVCMsg_EncryptedData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEncryptedFieldNumber = 1,
    kKeyTypeFieldNumber = 2,
  };
  // optional bytes encrypted = 1;
  bool has_encrypted() const;
  private:
  bool _internal_has_encrypted() const;
  public:
  void clear_encrypted();
  const std::string& encrypted() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_encrypted(ArgT0&& arg0, ArgT... args);
  std::string* mutable_encrypted();
  PROTOBUF_MUST_USE_RESULT std::string* release_encrypted();
  void set_allocated_encrypted(std::string* encrypted);
  private:
  const std::string& _internal_encrypted() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_encrypted(const std::string& value);
  std::string* _internal_mutable_encrypted();
  public:

  // optional int32 key_type = 2;
  bool has_key_type() const;
  private:
  bool _internal_has_key_type() const;
  public:
  void clear_key_type();
  ::PROTOBUF_NAMESPACE_ID::int32 key_type() const;
  void set_key_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_key_type() const;
  void _internal_set_key_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CSVCMsg_EncryptedData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encrypted_;
  ::PROTOBUF_NAMESPACE_ID::int32 key_type_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CSVCMsg_HltvReplay final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSVCMsg_HltvReplay) */ {
 public:
  inline CSVCMsg_HltvReplay() : CSVCMsg_HltvReplay(nullptr) {}
  ~CSVCMsg_HltvReplay() override;
  explicit constexpr CSVCMsg_HltvReplay(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSVCMsg_HltvReplay(const CSVCMsg_HltvReplay& from);
  CSVCMsg_HltvReplay(CSVCMsg_HltvReplay&& from) noexcept
    : CSVCMsg_HltvReplay() {
    *this = ::std::move(from);
  }

  inline CSVCMsg_HltvReplay& operator=(const CSVCMsg_HltvReplay& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSVCMsg_HltvReplay& operator=(CSVCMsg_HltvReplay&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSVCMsg_HltvReplay& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSVCMsg_HltvReplay* internal_default_instance() {
    return reinterpret_cast<const CSVCMsg_HltvReplay*>(
               &_CSVCMsg_HltvReplay_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(CSVCMsg_HltvReplay& a, CSVCMsg_HltvReplay& b) {
    a.Swap(&b);
  }
  inline void Swap(CSVCMsg_HltvReplay* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSVCMsg_HltvReplay* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSVCMsg_HltvReplay* New() const final {
    return new CSVCMsg_HltvReplay();
  }

  CSVCMsg_HltvReplay* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSVCMsg_HltvReplay>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSVCMsg_HltvReplay& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CSVCMsg_HltvReplay& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSVCMsg_HltvReplay* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSVCMsg_HltvReplay";
  }
  protected:
  explicit CSVCMsg_HltvReplay(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDelayFieldNumber = 1,
    kPrimaryTargetFieldNumber = 2,
    kReplayStopAtFieldNumber = 3,
    kReplayStartAtFieldNumber = 4,
    kReplaySlowdownBeginFieldNumber = 5,
    kReplaySlowdownEndFieldNumber = 6,
    kReplaySlowdownRateFieldNumber = 7,
  };
  // optional int32 delay = 1;
  bool has_delay() const;
  private:
  bool _internal_has_delay() const;
  public:
  void clear_delay();
  ::PROTOBUF_NAMESPACE_ID::int32 delay() const;
  void set_delay(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_delay() const;
  void _internal_set_delay(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 primary_target = 2;
  bool has_primary_target() const;
  private:
  bool _internal_has_primary_target() const;
  public:
  void clear_primary_target();
  ::PROTOBUF_NAMESPACE_ID::int32 primary_target() const;
  void set_primary_target(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_primary_target() const;
  void _internal_set_primary_target(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 replay_stop_at = 3;
  bool has_replay_stop_at() const;
  private:
  bool _internal_has_replay_stop_at() const;
  public:
  void clear_replay_stop_at();
  ::PROTOBUF_NAMESPACE_ID::int32 replay_stop_at() const;
  void set_replay_stop_at(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_replay_stop_at() const;
  void _internal_set_replay_stop_at(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 replay_start_at = 4;
  bool has_replay_start_at() const;
  private:
  bool _internal_has_replay_start_at() const;
  public:
  void clear_replay_start_at();
  ::PROTOBUF_NAMESPACE_ID::int32 replay_start_at() const;
  void set_replay_start_at(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_replay_start_at() const;
  void _internal_set_replay_start_at(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 replay_slowdown_begin = 5;
  bool has_replay_slowdown_begin() const;
  private:
  bool _internal_has_replay_slowdown_begin() const;
  public:
  void clear_replay_slowdown_begin();
  ::PROTOBUF_NAMESPACE_ID::int32 replay_slowdown_begin() const;
  void set_replay_slowdown_begin(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_replay_slowdown_begin() const;
  void _internal_set_replay_slowdown_begin(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 replay_slowdown_end = 6;
  bool has_replay_slowdown_end() const;
  private:
  bool _internal_has_replay_slowdown_end() const;
  public:
  void clear_replay_slowdown_end();
  ::PROTOBUF_NAMESPACE_ID::int32 replay_slowdown_end() const;
  void set_replay_slowdown_end(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_replay_slowdown_end() const;
  void _internal_set_replay_slowdown_end(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float replay_slowdown_rate = 7;
  bool has_replay_slowdown_rate() const;
  private:
  bool _internal_has_replay_slowdown_rate() const;
  public:
  void clear_replay_slowdown_rate();
  float replay_slowdown_rate() const;
  void set_replay_slowdown_rate(float value);
  private:
  float _internal_replay_slowdown_rate() const;
  void _internal_set_replay_slowdown_rate(float value);
  public:

  // @@protoc_insertion_point(class_scope:CSVCMsg_HltvReplay)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 delay_;
  ::PROTOBUF_NAMESPACE_ID::int32 primary_target_;
  ::PROTOBUF_NAMESPACE_ID::int32 replay_stop_at_;
  ::PROTOBUF_NAMESPACE_ID::int32 replay_start_at_;
  ::PROTOBUF_NAMESPACE_ID::int32 replay_slowdown_begin_;
  ::PROTOBUF_NAMESPACE_ID::int32 replay_slowdown_end_;
  float replay_slowdown_rate_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CCLCMsg_HltvReplay final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCLCMsg_HltvReplay) */ {
 public:
  inline CCLCMsg_HltvReplay() : CCLCMsg_HltvReplay(nullptr) {}
  ~CCLCMsg_HltvReplay() override;
  explicit constexpr CCLCMsg_HltvReplay(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCLCMsg_HltvReplay(const CCLCMsg_HltvReplay& from);
  CCLCMsg_HltvReplay(CCLCMsg_HltvReplay&& from) noexcept
    : CCLCMsg_HltvReplay() {
    *this = ::std::move(from);
  }

  inline CCLCMsg_HltvReplay& operator=(const CCLCMsg_HltvReplay& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCLCMsg_HltvReplay& operator=(CCLCMsg_HltvReplay&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCLCMsg_HltvReplay& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCLCMsg_HltvReplay* internal_default_instance() {
    return reinterpret_cast<const CCLCMsg_HltvReplay*>(
               &_CCLCMsg_HltvReplay_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(CCLCMsg_HltvReplay& a, CCLCMsg_HltvReplay& b) {
    a.Swap(&b);
  }
  inline void Swap(CCLCMsg_HltvReplay* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCLCMsg_HltvReplay* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CCLCMsg_HltvReplay* New() const final {
    return new CCLCMsg_HltvReplay();
  }

  CCLCMsg_HltvReplay* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CCLCMsg_HltvReplay>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CCLCMsg_HltvReplay& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CCLCMsg_HltvReplay& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCLCMsg_HltvReplay* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCLCMsg_HltvReplay";
  }
  protected:
  explicit CCLCMsg_HltvReplay(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestFieldNumber = 1,
    kSlowdownLengthFieldNumber = 2,
    kSlowdownRateFieldNumber = 3,
    kPrimaryTargetEntIndexFieldNumber = 4,
    kEventTimeFieldNumber = 5,
  };
  // optional int32 request = 1;
  bool has_request() const;
  private:
  bool _internal_has_request() const;
  public:
  void clear_request();
  ::PROTOBUF_NAMESPACE_ID::int32 request() const;
  void set_request(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_request() const;
  void _internal_set_request(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float slowdown_length = 2;
  bool has_slowdown_length() const;
  private:
  bool _internal_has_slowdown_length() const;
  public:
  void clear_slowdown_length();
  float slowdown_length() const;
  void set_slowdown_length(float value);
  private:
  float _internal_slowdown_length() const;
  void _internal_set_slowdown_length(float value);
  public:

  // optional float slowdown_rate = 3;
  bool has_slowdown_rate() const;
  private:
  bool _internal_has_slowdown_rate() const;
  public:
  void clear_slowdown_rate();
  float slowdown_rate() const;
  void set_slowdown_rate(float value);
  private:
  float _internal_slowdown_rate() const;
  void _internal_set_slowdown_rate(float value);
  public:

  // optional int32 primary_target_ent_index = 4;
  bool has_primary_target_ent_index() const;
  private:
  bool _internal_has_primary_target_ent_index() const;
  public:
  void clear_primary_target_ent_index();
  ::PROTOBUF_NAMESPACE_ID::int32 primary_target_ent_index() const;
  void set_primary_target_ent_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_primary_target_ent_index() const;
  void _internal_set_primary_target_ent_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float event_time = 5;
  bool has_event_time() const;
  private:
  bool _internal_has_event_time() const;
  public:
  void clear_event_time();
  float event_time() const;
  void set_event_time(float value);
  private:
  float _internal_event_time() const;
  void _internal_set_event_time(float value);
  public:

  // @@protoc_insertion_point(class_scope:CCLCMsg_HltvReplay)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 request_;
  float slowdown_length_;
  float slowdown_rate_;
  ::PROTOBUF_NAMESPACE_ID::int32 primary_target_ent_index_;
  float event_time_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CSVCMsg_Broadcast_Command final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSVCMsg_Broadcast_Command) */ {
 public:
  inline CSVCMsg_Broadcast_Command() : CSVCMsg_Broadcast_Command(nullptr) {}
  ~CSVCMsg_Broadcast_Command() override;
  explicit constexpr CSVCMsg_Broadcast_Command(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSVCMsg_Broadcast_Command(const CSVCMsg_Broadcast_Command& from);
  CSVCMsg_Broadcast_Command(CSVCMsg_Broadcast_Command&& from) noexcept
    : CSVCMsg_Broadcast_Command() {
    *this = ::std::move(from);
  }

  inline CSVCMsg_Broadcast_Command& operator=(const CSVCMsg_Broadcast_Command& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSVCMsg_Broadcast_Command& operator=(CSVCMsg_Broadcast_Command&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSVCMsg_Broadcast_Command& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSVCMsg_Broadcast_Command* internal_default_instance() {
    return reinterpret_cast<const CSVCMsg_Broadcast_Command*>(
               &_CSVCMsg_Broadcast_Command_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(CSVCMsg_Broadcast_Command& a, CSVCMsg_Broadcast_Command& b) {
    a.Swap(&b);
  }
  inline void Swap(CSVCMsg_Broadcast_Command* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSVCMsg_Broadcast_Command* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSVCMsg_Broadcast_Command* New() const final {
    return new CSVCMsg_Broadcast_Command();
  }

  CSVCMsg_Broadcast_Command* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSVCMsg_Broadcast_Command>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSVCMsg_Broadcast_Command& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CSVCMsg_Broadcast_Command& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSVCMsg_Broadcast_Command* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSVCMsg_Broadcast_Command";
  }
  protected:
  explicit CSVCMsg_Broadcast_Command(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCmdFieldNumber = 1,
  };
  // optional string cmd = 1;
  bool has_cmd() const;
  private:
  bool _internal_has_cmd() const;
  public:
  void clear_cmd();
  const std::string& cmd() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cmd(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cmd();
  PROTOBUF_MUST_USE_RESULT std::string* release_cmd();
  void set_allocated_cmd(std::string* cmd);
  private:
  const std::string& _internal_cmd() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cmd(const std::string& value);
  std::string* _internal_mutable_cmd();
  public:

  // @@protoc_insertion_point(class_scope:CSVCMsg_Broadcast_Command)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cmd_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CMsgVector

// optional float x = 1;
inline bool CMsgVector::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgVector::has_x() const {
  return _internal_has_x();
}
inline void CMsgVector::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float CMsgVector::_internal_x() const {
  return x_;
}
inline float CMsgVector::x() const {
  // @@protoc_insertion_point(field_get:CMsgVector.x)
  return _internal_x();
}
inline void CMsgVector::_internal_set_x(float value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
}
inline void CMsgVector::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:CMsgVector.x)
}

// optional float y = 2;
inline bool CMsgVector::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgVector::has_y() const {
  return _internal_has_y();
}
inline void CMsgVector::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float CMsgVector::_internal_y() const {
  return y_;
}
inline float CMsgVector::y() const {
  // @@protoc_insertion_point(field_get:CMsgVector.y)
  return _internal_y();
}
inline void CMsgVector::_internal_set_y(float value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
}
inline void CMsgVector::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:CMsgVector.y)
}

// optional float z = 3;
inline bool CMsgVector::_internal_has_z() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgVector::has_z() const {
  return _internal_has_z();
}
inline void CMsgVector::clear_z() {
  z_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float CMsgVector::_internal_z() const {
  return z_;
}
inline float CMsgVector::z() const {
  // @@protoc_insertion_point(field_get:CMsgVector.z)
  return _internal_z();
}
inline void CMsgVector::_internal_set_z(float value) {
  _has_bits_[0] |= 0x00000004u;
  z_ = value;
}
inline void CMsgVector::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:CMsgVector.z)
}

// -------------------------------------------------------------------

// CMsgVector2D

// optional float x = 1;
inline bool CMsgVector2D::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgVector2D::has_x() const {
  return _internal_has_x();
}
inline void CMsgVector2D::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float CMsgVector2D::_internal_x() const {
  return x_;
}
inline float CMsgVector2D::x() const {
  // @@protoc_insertion_point(field_get:CMsgVector2D.x)
  return _internal_x();
}
inline void CMsgVector2D::_internal_set_x(float value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
}
inline void CMsgVector2D::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:CMsgVector2D.x)
}

// optional float y = 2;
inline bool CMsgVector2D::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgVector2D::has_y() const {
  return _internal_has_y();
}
inline void CMsgVector2D::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float CMsgVector2D::_internal_y() const {
  return y_;
}
inline float CMsgVector2D::y() const {
  // @@protoc_insertion_point(field_get:CMsgVector2D.y)
  return _internal_y();
}
inline void CMsgVector2D::_internal_set_y(float value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
}
inline void CMsgVector2D::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:CMsgVector2D.y)
}

// -------------------------------------------------------------------

// CMsgQAngle

// optional float x = 1;
inline bool CMsgQAngle::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgQAngle::has_x() const {
  return _internal_has_x();
}
inline void CMsgQAngle::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float CMsgQAngle::_internal_x() const {
  return x_;
}
inline float CMsgQAngle::x() const {
  // @@protoc_insertion_point(field_get:CMsgQAngle.x)
  return _internal_x();
}
inline void CMsgQAngle::_internal_set_x(float value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
}
inline void CMsgQAngle::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:CMsgQAngle.x)
}

// optional float y = 2;
inline bool CMsgQAngle::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgQAngle::has_y() const {
  return _internal_has_y();
}
inline void CMsgQAngle::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float CMsgQAngle::_internal_y() const {
  return y_;
}
inline float CMsgQAngle::y() const {
  // @@protoc_insertion_point(field_get:CMsgQAngle.y)
  return _internal_y();
}
inline void CMsgQAngle::_internal_set_y(float value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
}
inline void CMsgQAngle::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:CMsgQAngle.y)
}

// optional float z = 3;
inline bool CMsgQAngle::_internal_has_z() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgQAngle::has_z() const {
  return _internal_has_z();
}
inline void CMsgQAngle::clear_z() {
  z_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float CMsgQAngle::_internal_z() const {
  return z_;
}
inline float CMsgQAngle::z() const {
  // @@protoc_insertion_point(field_get:CMsgQAngle.z)
  return _internal_z();
}
inline void CMsgQAngle::_internal_set_z(float value) {
  _has_bits_[0] |= 0x00000004u;
  z_ = value;
}
inline void CMsgQAngle::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:CMsgQAngle.z)
}

// -------------------------------------------------------------------

// CMsgRGBA

// optional int32 r = 1;
inline bool CMsgRGBA::_internal_has_r() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgRGBA::has_r() const {
  return _internal_has_r();
}
inline void CMsgRGBA::clear_r() {
  r_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgRGBA::_internal_r() const {
  return r_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgRGBA::r() const {
  // @@protoc_insertion_point(field_get:CMsgRGBA.r)
  return _internal_r();
}
inline void CMsgRGBA::_internal_set_r(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  r_ = value;
}
inline void CMsgRGBA::set_r(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_r(value);
  // @@protoc_insertion_point(field_set:CMsgRGBA.r)
}

// optional int32 g = 2;
inline bool CMsgRGBA::_internal_has_g() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgRGBA::has_g() const {
  return _internal_has_g();
}
inline void CMsgRGBA::clear_g() {
  g_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgRGBA::_internal_g() const {
  return g_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgRGBA::g() const {
  // @@protoc_insertion_point(field_get:CMsgRGBA.g)
  return _internal_g();
}
inline void CMsgRGBA::_internal_set_g(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  g_ = value;
}
inline void CMsgRGBA::set_g(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_g(value);
  // @@protoc_insertion_point(field_set:CMsgRGBA.g)
}

// optional int32 b = 3;
inline bool CMsgRGBA::_internal_has_b() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgRGBA::has_b() const {
  return _internal_has_b();
}
inline void CMsgRGBA::clear_b() {
  b_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgRGBA::_internal_b() const {
  return b_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgRGBA::b() const {
  // @@protoc_insertion_point(field_get:CMsgRGBA.b)
  return _internal_b();
}
inline void CMsgRGBA::_internal_set_b(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  b_ = value;
}
inline void CMsgRGBA::set_b(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_b(value);
  // @@protoc_insertion_point(field_set:CMsgRGBA.b)
}

// optional int32 a = 4;
inline bool CMsgRGBA::_internal_has_a() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgRGBA::has_a() const {
  return _internal_has_a();
}
inline void CMsgRGBA::clear_a() {
  a_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgRGBA::_internal_a() const {
  return a_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgRGBA::a() const {
  // @@protoc_insertion_point(field_get:CMsgRGBA.a)
  return _internal_a();
}
inline void CMsgRGBA::_internal_set_a(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  a_ = value;
}
inline void CMsgRGBA::set_a(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_a(value);
  // @@protoc_insertion_point(field_set:CMsgRGBA.a)
}

// -------------------------------------------------------------------

// CNETMsg_Tick

// optional uint32 tick = 1;
inline bool CNETMsg_Tick::_internal_has_tick() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CNETMsg_Tick::has_tick() const {
  return _internal_has_tick();
}
inline void CNETMsg_Tick::clear_tick() {
  tick_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CNETMsg_Tick::_internal_tick() const {
  return tick_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CNETMsg_Tick::tick() const {
  // @@protoc_insertion_point(field_get:CNETMsg_Tick.tick)
  return _internal_tick();
}
inline void CNETMsg_Tick::_internal_set_tick(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  tick_ = value;
}
inline void CNETMsg_Tick::set_tick(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tick(value);
  // @@protoc_insertion_point(field_set:CNETMsg_Tick.tick)
}

// optional uint32 host_computationtime = 4;
inline bool CNETMsg_Tick::_internal_has_host_computationtime() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CNETMsg_Tick::has_host_computationtime() const {
  return _internal_has_host_computationtime();
}
inline void CNETMsg_Tick::clear_host_computationtime() {
  host_computationtime_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CNETMsg_Tick::_internal_host_computationtime() const {
  return host_computationtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CNETMsg_Tick::host_computationtime() const {
  // @@protoc_insertion_point(field_get:CNETMsg_Tick.host_computationtime)
  return _internal_host_computationtime();
}
inline void CNETMsg_Tick::_internal_set_host_computationtime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  host_computationtime_ = value;
}
inline void CNETMsg_Tick::set_host_computationtime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_host_computationtime(value);
  // @@protoc_insertion_point(field_set:CNETMsg_Tick.host_computationtime)
}

// optional uint32 host_computationtime_std_deviation = 5;
inline bool CNETMsg_Tick::_internal_has_host_computationtime_std_deviation() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CNETMsg_Tick::has_host_computationtime_std_deviation() const {
  return _internal_has_host_computationtime_std_deviation();
}
inline void CNETMsg_Tick::clear_host_computationtime_std_deviation() {
  host_computationtime_std_deviation_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CNETMsg_Tick::_internal_host_computationtime_std_deviation() const {
  return host_computationtime_std_deviation_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CNETMsg_Tick::host_computationtime_std_deviation() const {
  // @@protoc_insertion_point(field_get:CNETMsg_Tick.host_computationtime_std_deviation)
  return _internal_host_computationtime_std_deviation();
}
inline void CNETMsg_Tick::_internal_set_host_computationtime_std_deviation(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  host_computationtime_std_deviation_ = value;
}
inline void CNETMsg_Tick::set_host_computationtime_std_deviation(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_host_computationtime_std_deviation(value);
  // @@protoc_insertion_point(field_set:CNETMsg_Tick.host_computationtime_std_deviation)
}

// optional uint32 host_framestarttime_std_deviation = 6;
inline bool CNETMsg_Tick::_internal_has_host_framestarttime_std_deviation() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CNETMsg_Tick::has_host_framestarttime_std_deviation() const {
  return _internal_has_host_framestarttime_std_deviation();
}
inline void CNETMsg_Tick::clear_host_framestarttime_std_deviation() {
  host_framestarttime_std_deviation_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CNETMsg_Tick::_internal_host_framestarttime_std_deviation() const {
  return host_framestarttime_std_deviation_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CNETMsg_Tick::host_framestarttime_std_deviation() const {
  // @@protoc_insertion_point(field_get:CNETMsg_Tick.host_framestarttime_std_deviation)
  return _internal_host_framestarttime_std_deviation();
}
inline void CNETMsg_Tick::_internal_set_host_framestarttime_std_deviation(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  host_framestarttime_std_deviation_ = value;
}
inline void CNETMsg_Tick::set_host_framestarttime_std_deviation(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_host_framestarttime_std_deviation(value);
  // @@protoc_insertion_point(field_set:CNETMsg_Tick.host_framestarttime_std_deviation)
}

// optional uint32 hltv_replay_flags = 7;
inline bool CNETMsg_Tick::_internal_has_hltv_replay_flags() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CNETMsg_Tick::has_hltv_replay_flags() const {
  return _internal_has_hltv_replay_flags();
}
inline void CNETMsg_Tick::clear_hltv_replay_flags() {
  hltv_replay_flags_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CNETMsg_Tick::_internal_hltv_replay_flags() const {
  return hltv_replay_flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CNETMsg_Tick::hltv_replay_flags() const {
  // @@protoc_insertion_point(field_get:CNETMsg_Tick.hltv_replay_flags)
  return _internal_hltv_replay_flags();
}
inline void CNETMsg_Tick::_internal_set_hltv_replay_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  hltv_replay_flags_ = value;
}
inline void CNETMsg_Tick::set_hltv_replay_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_hltv_replay_flags(value);
  // @@protoc_insertion_point(field_set:CNETMsg_Tick.hltv_replay_flags)
}

// -------------------------------------------------------------------

// CNETMsg_StringCmd

// optional string command = 1;
inline bool CNETMsg_StringCmd::_internal_has_command() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CNETMsg_StringCmd::has_command() const {
  return _internal_has_command();
}
inline void CNETMsg_StringCmd::clear_command() {
  command_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CNETMsg_StringCmd::command() const {
  // @@protoc_insertion_point(field_get:CNETMsg_StringCmd.command)
  return _internal_command();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CNETMsg_StringCmd::set_command(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CNETMsg_StringCmd.command)
}
inline std::string* CNETMsg_StringCmd::mutable_command() {
  std::string* _s = _internal_mutable_command();
  // @@protoc_insertion_point(field_mutable:CNETMsg_StringCmd.command)
  return _s;
}
inline const std::string& CNETMsg_StringCmd::_internal_command() const {
  return command_.Get();
}
inline void CNETMsg_StringCmd::_internal_set_command(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CNETMsg_StringCmd::_internal_mutable_command() {
  _has_bits_[0] |= 0x00000001u;
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CNETMsg_StringCmd::release_command() {
  // @@protoc_insertion_point(field_release:CNETMsg_StringCmd.command)
  if (!_internal_has_command()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return command_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CNETMsg_StringCmd::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CNETMsg_StringCmd.command)
}

// -------------------------------------------------------------------

// CNETMsg_SignonState

// optional uint32 signon_state = 1;
inline bool CNETMsg_SignonState::_internal_has_signon_state() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CNETMsg_SignonState::has_signon_state() const {
  return _internal_has_signon_state();
}
inline void CNETMsg_SignonState::clear_signon_state() {
  signon_state_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CNETMsg_SignonState::_internal_signon_state() const {
  return signon_state_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CNETMsg_SignonState::signon_state() const {
  // @@protoc_insertion_point(field_get:CNETMsg_SignonState.signon_state)
  return _internal_signon_state();
}
inline void CNETMsg_SignonState::_internal_set_signon_state(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  signon_state_ = value;
}
inline void CNETMsg_SignonState::set_signon_state(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_signon_state(value);
  // @@protoc_insertion_point(field_set:CNETMsg_SignonState.signon_state)
}

// optional uint32 spawn_count = 2;
inline bool CNETMsg_SignonState::_internal_has_spawn_count() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CNETMsg_SignonState::has_spawn_count() const {
  return _internal_has_spawn_count();
}
inline void CNETMsg_SignonState::clear_spawn_count() {
  spawn_count_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CNETMsg_SignonState::_internal_spawn_count() const {
  return spawn_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CNETMsg_SignonState::spawn_count() const {
  // @@protoc_insertion_point(field_get:CNETMsg_SignonState.spawn_count)
  return _internal_spawn_count();
}
inline void CNETMsg_SignonState::_internal_set_spawn_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  spawn_count_ = value;
}
inline void CNETMsg_SignonState::set_spawn_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_spawn_count(value);
  // @@protoc_insertion_point(field_set:CNETMsg_SignonState.spawn_count)
}

// optional uint32 num_server_players = 3;
inline bool CNETMsg_SignonState::_internal_has_num_server_players() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CNETMsg_SignonState::has_num_server_players() const {
  return _internal_has_num_server_players();
}
inline void CNETMsg_SignonState::clear_num_server_players() {
  num_server_players_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CNETMsg_SignonState::_internal_num_server_players() const {
  return num_server_players_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CNETMsg_SignonState::num_server_players() const {
  // @@protoc_insertion_point(field_get:CNETMsg_SignonState.num_server_players)
  return _internal_num_server_players();
}
inline void CNETMsg_SignonState::_internal_set_num_server_players(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  num_server_players_ = value;
}
inline void CNETMsg_SignonState::set_num_server_players(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_server_players(value);
  // @@protoc_insertion_point(field_set:CNETMsg_SignonState.num_server_players)
}

// repeated string players_networkids = 4;
inline int CNETMsg_SignonState::_internal_players_networkids_size() const {
  return players_networkids_.size();
}
inline int CNETMsg_SignonState::players_networkids_size() const {
  return _internal_players_networkids_size();
}
inline void CNETMsg_SignonState::clear_players_networkids() {
  players_networkids_.Clear();
}
inline std::string* CNETMsg_SignonState::add_players_networkids() {
  std::string* _s = _internal_add_players_networkids();
  // @@protoc_insertion_point(field_add_mutable:CNETMsg_SignonState.players_networkids)
  return _s;
}
inline const std::string& CNETMsg_SignonState::_internal_players_networkids(int index) const {
  return players_networkids_.Get(index);
}
inline const std::string& CNETMsg_SignonState::players_networkids(int index) const {
  // @@protoc_insertion_point(field_get:CNETMsg_SignonState.players_networkids)
  return _internal_players_networkids(index);
}
inline std::string* CNETMsg_SignonState::mutable_players_networkids(int index) {
  // @@protoc_insertion_point(field_mutable:CNETMsg_SignonState.players_networkids)
  return players_networkids_.Mutable(index);
}
inline void CNETMsg_SignonState::set_players_networkids(int index, const std::string& value) {
  players_networkids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:CNETMsg_SignonState.players_networkids)
}
inline void CNETMsg_SignonState::set_players_networkids(int index, std::string&& value) {
  players_networkids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:CNETMsg_SignonState.players_networkids)
}
inline void CNETMsg_SignonState::set_players_networkids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  players_networkids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CNETMsg_SignonState.players_networkids)
}
inline void CNETMsg_SignonState::set_players_networkids(int index, const char* value, size_t size) {
  players_networkids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CNETMsg_SignonState.players_networkids)
}
inline std::string* CNETMsg_SignonState::_internal_add_players_networkids() {
  return players_networkids_.Add();
}
inline void CNETMsg_SignonState::add_players_networkids(const std::string& value) {
  players_networkids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CNETMsg_SignonState.players_networkids)
}
inline void CNETMsg_SignonState::add_players_networkids(std::string&& value) {
  players_networkids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CNETMsg_SignonState.players_networkids)
}
inline void CNETMsg_SignonState::add_players_networkids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  players_networkids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CNETMsg_SignonState.players_networkids)
}
inline void CNETMsg_SignonState::add_players_networkids(const char* value, size_t size) {
  players_networkids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CNETMsg_SignonState.players_networkids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CNETMsg_SignonState::players_networkids() const {
  // @@protoc_insertion_point(field_list:CNETMsg_SignonState.players_networkids)
  return players_networkids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CNETMsg_SignonState::mutable_players_networkids() {
  // @@protoc_insertion_point(field_mutable_list:CNETMsg_SignonState.players_networkids)
  return &players_networkids_;
}

// optional string map_name = 5;
inline bool CNETMsg_SignonState::_internal_has_map_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CNETMsg_SignonState::has_map_name() const {
  return _internal_has_map_name();
}
inline void CNETMsg_SignonState::clear_map_name() {
  map_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CNETMsg_SignonState::map_name() const {
  // @@protoc_insertion_point(field_get:CNETMsg_SignonState.map_name)
  return _internal_map_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CNETMsg_SignonState::set_map_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 map_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CNETMsg_SignonState.map_name)
}
inline std::string* CNETMsg_SignonState::mutable_map_name() {
  std::string* _s = _internal_mutable_map_name();
  // @@protoc_insertion_point(field_mutable:CNETMsg_SignonState.map_name)
  return _s;
}
inline const std::string& CNETMsg_SignonState::_internal_map_name() const {
  return map_name_.Get();
}
inline void CNETMsg_SignonState::_internal_set_map_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  map_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CNETMsg_SignonState::_internal_mutable_map_name() {
  _has_bits_[0] |= 0x00000001u;
  return map_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CNETMsg_SignonState::release_map_name() {
  // @@protoc_insertion_point(field_release:CNETMsg_SignonState.map_name)
  if (!_internal_has_map_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return map_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CNETMsg_SignonState::set_allocated_map_name(std::string* map_name) {
  if (map_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  map_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), map_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CNETMsg_SignonState.map_name)
}

// -------------------------------------------------------------------

// CMsg_CVars_CVar

// optional string name = 1;
inline bool CMsg_CVars_CVar::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsg_CVars_CVar::has_name() const {
  return _internal_has_name();
}
inline void CMsg_CVars_CVar::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsg_CVars_CVar::name() const {
  // @@protoc_insertion_point(field_get:CMsg_CVars.CVar.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsg_CVars_CVar::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsg_CVars.CVar.name)
}
inline std::string* CMsg_CVars_CVar::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:CMsg_CVars.CVar.name)
  return _s;
}
inline const std::string& CMsg_CVars_CVar::_internal_name() const {
  return name_.Get();
}
inline void CMsg_CVars_CVar::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsg_CVars_CVar::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsg_CVars_CVar::release_name() {
  // @@protoc_insertion_point(field_release:CMsg_CVars.CVar.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CMsg_CVars_CVar::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CMsg_CVars.CVar.name)
}

// optional string value = 2;
inline bool CMsg_CVars_CVar::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsg_CVars_CVar::has_value() const {
  return _internal_has_value();
}
inline void CMsg_CVars_CVar::clear_value() {
  value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsg_CVars_CVar::value() const {
  // @@protoc_insertion_point(field_get:CMsg_CVars.CVar.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsg_CVars_CVar::set_value(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsg_CVars.CVar.value)
}
inline std::string* CMsg_CVars_CVar::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:CMsg_CVars.CVar.value)
  return _s;
}
inline const std::string& CMsg_CVars_CVar::_internal_value() const {
  return value_.Get();
}
inline void CMsg_CVars_CVar::_internal_set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CMsg_CVars_CVar::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000002u;
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CMsg_CVars_CVar::release_value() {
  // @@protoc_insertion_point(field_release:CMsg_CVars.CVar.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CMsg_CVars_CVar::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CMsg_CVars.CVar.value)
}

// optional uint32 dictionary_name = 3;
inline bool CMsg_CVars_CVar::_internal_has_dictionary_name() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsg_CVars_CVar::has_dictionary_name() const {
  return _internal_has_dictionary_name();
}
inline void CMsg_CVars_CVar::clear_dictionary_name() {
  dictionary_name_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsg_CVars_CVar::_internal_dictionary_name() const {
  return dictionary_name_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsg_CVars_CVar::dictionary_name() const {
  // @@protoc_insertion_point(field_get:CMsg_CVars.CVar.dictionary_name)
  return _internal_dictionary_name();
}
inline void CMsg_CVars_CVar::_internal_set_dictionary_name(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  dictionary_name_ = value;
}
inline void CMsg_CVars_CVar::set_dictionary_name(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_dictionary_name(value);
  // @@protoc_insertion_point(field_set:CMsg_CVars.CVar.dictionary_name)
}

// -------------------------------------------------------------------

// CMsg_CVars

// repeated .CMsg_CVars.CVar cvars = 1;
inline int CMsg_CVars::_internal_cvars_size() const {
  return cvars_.size();
}
inline int CMsg_CVars::cvars_size() const {
  return _internal_cvars_size();
}
inline void CMsg_CVars::clear_cvars() {
  cvars_.Clear();
}
inline ::CMsg_CVars_CVar* CMsg_CVars::mutable_cvars(int index) {
  // @@protoc_insertion_point(field_mutable:CMsg_CVars.cvars)
  return cvars_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsg_CVars_CVar >*
CMsg_CVars::mutable_cvars() {
  // @@protoc_insertion_point(field_mutable_list:CMsg_CVars.cvars)
  return &cvars_;
}
inline const ::CMsg_CVars_CVar& CMsg_CVars::_internal_cvars(int index) const {
  return cvars_.Get(index);
}
inline const ::CMsg_CVars_CVar& CMsg_CVars::cvars(int index) const {
  // @@protoc_insertion_point(field_get:CMsg_CVars.cvars)
  return _internal_cvars(index);
}
inline ::CMsg_CVars_CVar* CMsg_CVars::_internal_add_cvars() {
  return cvars_.Add();
}
inline ::CMsg_CVars_CVar* CMsg_CVars::add_cvars() {
  ::CMsg_CVars_CVar* _add = _internal_add_cvars();
  // @@protoc_insertion_point(field_add:CMsg_CVars.cvars)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsg_CVars_CVar >&
CMsg_CVars::cvars() const {
  // @@protoc_insertion_point(field_list:CMsg_CVars.cvars)
  return cvars_;
}

// -------------------------------------------------------------------

// CNETMsg_SetConVar

// optional .CMsg_CVars convars = 1;
inline bool CNETMsg_SetConVar::_internal_has_convars() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || convars_ != nullptr);
  return value;
}
inline bool CNETMsg_SetConVar::has_convars() const {
  return _internal_has_convars();
}
inline void CNETMsg_SetConVar::clear_convars() {
  if (convars_ != nullptr) convars_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsg_CVars& CNETMsg_SetConVar::_internal_convars() const {
  const ::CMsg_CVars* p = convars_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsg_CVars&>(
      ::_CMsg_CVars_default_instance_);
}
inline const ::CMsg_CVars& CNETMsg_SetConVar::convars() const {
  // @@protoc_insertion_point(field_get:CNETMsg_SetConVar.convars)
  return _internal_convars();
}
inline void CNETMsg_SetConVar::unsafe_arena_set_allocated_convars(
    ::CMsg_CVars* convars) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(convars_);
  }
  convars_ = convars;
  if (convars) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CNETMsg_SetConVar.convars)
}
inline ::CMsg_CVars* CNETMsg_SetConVar::release_convars() {
  _has_bits_[0] &= ~0x00000001u;
  ::CMsg_CVars* temp = convars_;
  convars_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsg_CVars* CNETMsg_SetConVar::unsafe_arena_release_convars() {
  // @@protoc_insertion_point(field_release:CNETMsg_SetConVar.convars)
  _has_bits_[0] &= ~0x00000001u;
  ::CMsg_CVars* temp = convars_;
  convars_ = nullptr;
  return temp;
}
inline ::CMsg_CVars* CNETMsg_SetConVar::_internal_mutable_convars() {
  _has_bits_[0] |= 0x00000001u;
  if (convars_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsg_CVars>(GetArenaForAllocation());
    convars_ = p;
  }
  return convars_;
}
inline ::CMsg_CVars* CNETMsg_SetConVar::mutable_convars() {
  ::CMsg_CVars* _msg = _internal_mutable_convars();
  // @@protoc_insertion_point(field_mutable:CNETMsg_SetConVar.convars)
  return _msg;
}
inline void CNETMsg_SetConVar::set_allocated_convars(::CMsg_CVars* convars) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete convars_;
  }
  if (convars) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsg_CVars>::GetOwningArena(convars);
    if (message_arena != submessage_arena) {
      convars = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, convars, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  convars_ = convars;
  // @@protoc_insertion_point(field_set_allocated:CNETMsg_SetConVar.convars)
}

// -------------------------------------------------------------------

// CNETMsg_NOP

// -------------------------------------------------------------------

// CNETMsg_Disconnect

// optional string text = 1;
inline bool CNETMsg_Disconnect::_internal_has_text() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CNETMsg_Disconnect::has_text() const {
  return _internal_has_text();
}
inline void CNETMsg_Disconnect::clear_text() {
  text_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CNETMsg_Disconnect::text() const {
  // @@protoc_insertion_point(field_get:CNETMsg_Disconnect.text)
  return _internal_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CNETMsg_Disconnect::set_text(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CNETMsg_Disconnect.text)
}
inline std::string* CNETMsg_Disconnect::mutable_text() {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:CNETMsg_Disconnect.text)
  return _s;
}
inline const std::string& CNETMsg_Disconnect::_internal_text() const {
  return text_.Get();
}
inline void CNETMsg_Disconnect::_internal_set_text(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CNETMsg_Disconnect::_internal_mutable_text() {
  _has_bits_[0] |= 0x00000001u;
  return text_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CNETMsg_Disconnect::release_text() {
  // @@protoc_insertion_point(field_release:CNETMsg_Disconnect.text)
  if (!_internal_has_text()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return text_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CNETMsg_Disconnect::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CNETMsg_Disconnect.text)
}

// -------------------------------------------------------------------

// CNETMsg_File

// optional int32 transfer_id = 1;
inline bool CNETMsg_File::_internal_has_transfer_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CNETMsg_File::has_transfer_id() const {
  return _internal_has_transfer_id();
}
inline void CNETMsg_File::clear_transfer_id() {
  transfer_id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CNETMsg_File::_internal_transfer_id() const {
  return transfer_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CNETMsg_File::transfer_id() const {
  // @@protoc_insertion_point(field_get:CNETMsg_File.transfer_id)
  return _internal_transfer_id();
}
inline void CNETMsg_File::_internal_set_transfer_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  transfer_id_ = value;
}
inline void CNETMsg_File::set_transfer_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_transfer_id(value);
  // @@protoc_insertion_point(field_set:CNETMsg_File.transfer_id)
}

// optional string file_name = 2;
inline bool CNETMsg_File::_internal_has_file_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CNETMsg_File::has_file_name() const {
  return _internal_has_file_name();
}
inline void CNETMsg_File::clear_file_name() {
  file_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CNETMsg_File::file_name() const {
  // @@protoc_insertion_point(field_get:CNETMsg_File.file_name)
  return _internal_file_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CNETMsg_File::set_file_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CNETMsg_File.file_name)
}
inline std::string* CNETMsg_File::mutable_file_name() {
  std::string* _s = _internal_mutable_file_name();
  // @@protoc_insertion_point(field_mutable:CNETMsg_File.file_name)
  return _s;
}
inline const std::string& CNETMsg_File::_internal_file_name() const {
  return file_name_.Get();
}
inline void CNETMsg_File::_internal_set_file_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CNETMsg_File::_internal_mutable_file_name() {
  _has_bits_[0] |= 0x00000001u;
  return file_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CNETMsg_File::release_file_name() {
  // @@protoc_insertion_point(field_release:CNETMsg_File.file_name)
  if (!_internal_has_file_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return file_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CNETMsg_File::set_allocated_file_name(std::string* file_name) {
  if (file_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  file_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CNETMsg_File.file_name)
}

// optional bool is_replay_demo_file = 3;
inline bool CNETMsg_File::_internal_has_is_replay_demo_file() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CNETMsg_File::has_is_replay_demo_file() const {
  return _internal_has_is_replay_demo_file();
}
inline void CNETMsg_File::clear_is_replay_demo_file() {
  is_replay_demo_file_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CNETMsg_File::_internal_is_replay_demo_file() const {
  return is_replay_demo_file_;
}
inline bool CNETMsg_File::is_replay_demo_file() const {
  // @@protoc_insertion_point(field_get:CNETMsg_File.is_replay_demo_file)
  return _internal_is_replay_demo_file();
}
inline void CNETMsg_File::_internal_set_is_replay_demo_file(bool value) {
  _has_bits_[0] |= 0x00000004u;
  is_replay_demo_file_ = value;
}
inline void CNETMsg_File::set_is_replay_demo_file(bool value) {
  _internal_set_is_replay_demo_file(value);
  // @@protoc_insertion_point(field_set:CNETMsg_File.is_replay_demo_file)
}

// optional bool deny = 4;
inline bool CNETMsg_File::_internal_has_deny() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CNETMsg_File::has_deny() const {
  return _internal_has_deny();
}
inline void CNETMsg_File::clear_deny() {
  deny_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CNETMsg_File::_internal_deny() const {
  return deny_;
}
inline bool CNETMsg_File::deny() const {
  // @@protoc_insertion_point(field_get:CNETMsg_File.deny)
  return _internal_deny();
}
inline void CNETMsg_File::_internal_set_deny(bool value) {
  _has_bits_[0] |= 0x00000008u;
  deny_ = value;
}
inline void CNETMsg_File::set_deny(bool value) {
  _internal_set_deny(value);
  // @@protoc_insertion_point(field_set:CNETMsg_File.deny)
}

// -------------------------------------------------------------------

// CNETMsg_SplitScreenUser

// optional int32 slot = 1;
inline bool CNETMsg_SplitScreenUser::_internal_has_slot() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CNETMsg_SplitScreenUser::has_slot() const {
  return _internal_has_slot();
}
inline void CNETMsg_SplitScreenUser::clear_slot() {
  slot_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CNETMsg_SplitScreenUser::_internal_slot() const {
  return slot_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CNETMsg_SplitScreenUser::slot() const {
  // @@protoc_insertion_point(field_get:CNETMsg_SplitScreenUser.slot)
  return _internal_slot();
}
inline void CNETMsg_SplitScreenUser::_internal_set_slot(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  slot_ = value;
}
inline void CNETMsg_SplitScreenUser::set_slot(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_slot(value);
  // @@protoc_insertion_point(field_set:CNETMsg_SplitScreenUser.slot)
}

// -------------------------------------------------------------------

// CNETMsg_PlayerAvatarData

// optional uint32 accountid = 1;
inline bool CNETMsg_PlayerAvatarData::_internal_has_accountid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CNETMsg_PlayerAvatarData::has_accountid() const {
  return _internal_has_accountid();
}
inline void CNETMsg_PlayerAvatarData::clear_accountid() {
  accountid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CNETMsg_PlayerAvatarData::_internal_accountid() const {
  return accountid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CNETMsg_PlayerAvatarData::accountid() const {
  // @@protoc_insertion_point(field_get:CNETMsg_PlayerAvatarData.accountid)
  return _internal_accountid();
}
inline void CNETMsg_PlayerAvatarData::_internal_set_accountid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  accountid_ = value;
}
inline void CNETMsg_PlayerAvatarData::set_accountid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_accountid(value);
  // @@protoc_insertion_point(field_set:CNETMsg_PlayerAvatarData.accountid)
}

// optional bytes rgb = 2;
inline bool CNETMsg_PlayerAvatarData::_internal_has_rgb() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CNETMsg_PlayerAvatarData::has_rgb() const {
  return _internal_has_rgb();
}
inline void CNETMsg_PlayerAvatarData::clear_rgb() {
  rgb_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CNETMsg_PlayerAvatarData::rgb() const {
  // @@protoc_insertion_point(field_get:CNETMsg_PlayerAvatarData.rgb)
  return _internal_rgb();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CNETMsg_PlayerAvatarData::set_rgb(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 rgb_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CNETMsg_PlayerAvatarData.rgb)
}
inline std::string* CNETMsg_PlayerAvatarData::mutable_rgb() {
  std::string* _s = _internal_mutable_rgb();
  // @@protoc_insertion_point(field_mutable:CNETMsg_PlayerAvatarData.rgb)
  return _s;
}
inline const std::string& CNETMsg_PlayerAvatarData::_internal_rgb() const {
  return rgb_.Get();
}
inline void CNETMsg_PlayerAvatarData::_internal_set_rgb(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  rgb_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CNETMsg_PlayerAvatarData::_internal_mutable_rgb() {
  _has_bits_[0] |= 0x00000001u;
  return rgb_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CNETMsg_PlayerAvatarData::release_rgb() {
  // @@protoc_insertion_point(field_release:CNETMsg_PlayerAvatarData.rgb)
  if (!_internal_has_rgb()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return rgb_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CNETMsg_PlayerAvatarData::set_allocated_rgb(std::string* rgb) {
  if (rgb != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  rgb_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rgb,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CNETMsg_PlayerAvatarData.rgb)
}

// -------------------------------------------------------------------

// CCLCMsg_ClientInfo

// optional fixed32 send_table_crc = 1;
inline bool CCLCMsg_ClientInfo::_internal_has_send_table_crc() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CCLCMsg_ClientInfo::has_send_table_crc() const {
  return _internal_has_send_table_crc();
}
inline void CCLCMsg_ClientInfo::clear_send_table_crc() {
  send_table_crc_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CCLCMsg_ClientInfo::_internal_send_table_crc() const {
  return send_table_crc_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CCLCMsg_ClientInfo::send_table_crc() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_ClientInfo.send_table_crc)
  return _internal_send_table_crc();
}
inline void CCLCMsg_ClientInfo::_internal_set_send_table_crc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  send_table_crc_ = value;
}
inline void CCLCMsg_ClientInfo::set_send_table_crc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_send_table_crc(value);
  // @@protoc_insertion_point(field_set:CCLCMsg_ClientInfo.send_table_crc)
}

// optional uint32 server_count = 2;
inline bool CCLCMsg_ClientInfo::_internal_has_server_count() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CCLCMsg_ClientInfo::has_server_count() const {
  return _internal_has_server_count();
}
inline void CCLCMsg_ClientInfo::clear_server_count() {
  server_count_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CCLCMsg_ClientInfo::_internal_server_count() const {
  return server_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CCLCMsg_ClientInfo::server_count() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_ClientInfo.server_count)
  return _internal_server_count();
}
inline void CCLCMsg_ClientInfo::_internal_set_server_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  server_count_ = value;
}
inline void CCLCMsg_ClientInfo::set_server_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_server_count(value);
  // @@protoc_insertion_point(field_set:CCLCMsg_ClientInfo.server_count)
}

// optional bool is_hltv = 3;
inline bool CCLCMsg_ClientInfo::_internal_has_is_hltv() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CCLCMsg_ClientInfo::has_is_hltv() const {
  return _internal_has_is_hltv();
}
inline void CCLCMsg_ClientInfo::clear_is_hltv() {
  is_hltv_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CCLCMsg_ClientInfo::_internal_is_hltv() const {
  return is_hltv_;
}
inline bool CCLCMsg_ClientInfo::is_hltv() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_ClientInfo.is_hltv)
  return _internal_is_hltv();
}
inline void CCLCMsg_ClientInfo::_internal_set_is_hltv(bool value) {
  _has_bits_[0] |= 0x00000008u;
  is_hltv_ = value;
}
inline void CCLCMsg_ClientInfo::set_is_hltv(bool value) {
  _internal_set_is_hltv(value);
  // @@protoc_insertion_point(field_set:CCLCMsg_ClientInfo.is_hltv)
}

// optional bool is_replay = 4;
inline bool CCLCMsg_ClientInfo::_internal_has_is_replay() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CCLCMsg_ClientInfo::has_is_replay() const {
  return _internal_has_is_replay();
}
inline void CCLCMsg_ClientInfo::clear_is_replay() {
  is_replay_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CCLCMsg_ClientInfo::_internal_is_replay() const {
  return is_replay_;
}
inline bool CCLCMsg_ClientInfo::is_replay() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_ClientInfo.is_replay)
  return _internal_is_replay();
}
inline void CCLCMsg_ClientInfo::_internal_set_is_replay(bool value) {
  _has_bits_[0] |= 0x00000010u;
  is_replay_ = value;
}
inline void CCLCMsg_ClientInfo::set_is_replay(bool value) {
  _internal_set_is_replay(value);
  // @@protoc_insertion_point(field_set:CCLCMsg_ClientInfo.is_replay)
}

// optional uint32 friends_id = 5;
inline bool CCLCMsg_ClientInfo::_internal_has_friends_id() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CCLCMsg_ClientInfo::has_friends_id() const {
  return _internal_has_friends_id();
}
inline void CCLCMsg_ClientInfo::clear_friends_id() {
  friends_id_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CCLCMsg_ClientInfo::_internal_friends_id() const {
  return friends_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CCLCMsg_ClientInfo::friends_id() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_ClientInfo.friends_id)
  return _internal_friends_id();
}
inline void CCLCMsg_ClientInfo::_internal_set_friends_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  friends_id_ = value;
}
inline void CCLCMsg_ClientInfo::set_friends_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_friends_id(value);
  // @@protoc_insertion_point(field_set:CCLCMsg_ClientInfo.friends_id)
}

// optional string friends_name = 6;
inline bool CCLCMsg_ClientInfo::_internal_has_friends_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCLCMsg_ClientInfo::has_friends_name() const {
  return _internal_has_friends_name();
}
inline void CCLCMsg_ClientInfo::clear_friends_name() {
  friends_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CCLCMsg_ClientInfo::friends_name() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_ClientInfo.friends_name)
  return _internal_friends_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CCLCMsg_ClientInfo::set_friends_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 friends_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CCLCMsg_ClientInfo.friends_name)
}
inline std::string* CCLCMsg_ClientInfo::mutable_friends_name() {
  std::string* _s = _internal_mutable_friends_name();
  // @@protoc_insertion_point(field_mutable:CCLCMsg_ClientInfo.friends_name)
  return _s;
}
inline const std::string& CCLCMsg_ClientInfo::_internal_friends_name() const {
  return friends_name_.Get();
}
inline void CCLCMsg_ClientInfo::_internal_set_friends_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  friends_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CCLCMsg_ClientInfo::_internal_mutable_friends_name() {
  _has_bits_[0] |= 0x00000001u;
  return friends_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CCLCMsg_ClientInfo::release_friends_name() {
  // @@protoc_insertion_point(field_release:CCLCMsg_ClientInfo.friends_name)
  if (!_internal_has_friends_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return friends_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CCLCMsg_ClientInfo::set_allocated_friends_name(std::string* friends_name) {
  if (friends_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  friends_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), friends_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CCLCMsg_ClientInfo.friends_name)
}

// repeated fixed32 custom_files = 7;
inline int CCLCMsg_ClientInfo::_internal_custom_files_size() const {
  return custom_files_.size();
}
inline int CCLCMsg_ClientInfo::custom_files_size() const {
  return _internal_custom_files_size();
}
inline void CCLCMsg_ClientInfo::clear_custom_files() {
  custom_files_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CCLCMsg_ClientInfo::_internal_custom_files(int index) const {
  return custom_files_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CCLCMsg_ClientInfo::custom_files(int index) const {
  // @@protoc_insertion_point(field_get:CCLCMsg_ClientInfo.custom_files)
  return _internal_custom_files(index);
}
inline void CCLCMsg_ClientInfo::set_custom_files(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  custom_files_.Set(index, value);
  // @@protoc_insertion_point(field_set:CCLCMsg_ClientInfo.custom_files)
}
inline void CCLCMsg_ClientInfo::_internal_add_custom_files(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  custom_files_.Add(value);
}
inline void CCLCMsg_ClientInfo::add_custom_files(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_custom_files(value);
  // @@protoc_insertion_point(field_add:CCLCMsg_ClientInfo.custom_files)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CCLCMsg_ClientInfo::_internal_custom_files() const {
  return custom_files_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CCLCMsg_ClientInfo::custom_files() const {
  // @@protoc_insertion_point(field_list:CCLCMsg_ClientInfo.custom_files)
  return _internal_custom_files();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CCLCMsg_ClientInfo::_internal_mutable_custom_files() {
  return &custom_files_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CCLCMsg_ClientInfo::mutable_custom_files() {
  // @@protoc_insertion_point(field_mutable_list:CCLCMsg_ClientInfo.custom_files)
  return _internal_mutable_custom_files();
}

// -------------------------------------------------------------------

// CCLCMsg_Move

// optional uint32 num_backup_commands = 1;
inline bool CCLCMsg_Move::_internal_has_num_backup_commands() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CCLCMsg_Move::has_num_backup_commands() const {
  return _internal_has_num_backup_commands();
}
inline void CCLCMsg_Move::clear_num_backup_commands() {
  num_backup_commands_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CCLCMsg_Move::_internal_num_backup_commands() const {
  return num_backup_commands_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CCLCMsg_Move::num_backup_commands() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_Move.num_backup_commands)
  return _internal_num_backup_commands();
}
inline void CCLCMsg_Move::_internal_set_num_backup_commands(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  num_backup_commands_ = value;
}
inline void CCLCMsg_Move::set_num_backup_commands(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_backup_commands(value);
  // @@protoc_insertion_point(field_set:CCLCMsg_Move.num_backup_commands)
}

// optional uint32 num_new_commands = 2;
inline bool CCLCMsg_Move::_internal_has_num_new_commands() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CCLCMsg_Move::has_num_new_commands() const {
  return _internal_has_num_new_commands();
}
inline void CCLCMsg_Move::clear_num_new_commands() {
  num_new_commands_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CCLCMsg_Move::_internal_num_new_commands() const {
  return num_new_commands_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CCLCMsg_Move::num_new_commands() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_Move.num_new_commands)
  return _internal_num_new_commands();
}
inline void CCLCMsg_Move::_internal_set_num_new_commands(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  num_new_commands_ = value;
}
inline void CCLCMsg_Move::set_num_new_commands(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_new_commands(value);
  // @@protoc_insertion_point(field_set:CCLCMsg_Move.num_new_commands)
}

// optional bytes data = 3;
inline bool CCLCMsg_Move::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCLCMsg_Move::has_data() const {
  return _internal_has_data();
}
inline void CCLCMsg_Move::clear_data() {
  data_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CCLCMsg_Move::data() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_Move.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CCLCMsg_Move::set_data(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CCLCMsg_Move.data)
}
inline std::string* CCLCMsg_Move::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:CCLCMsg_Move.data)
  return _s;
}
inline const std::string& CCLCMsg_Move::_internal_data() const {
  return data_.Get();
}
inline void CCLCMsg_Move::_internal_set_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CCLCMsg_Move::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000001u;
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CCLCMsg_Move::release_data() {
  // @@protoc_insertion_point(field_release:CCLCMsg_Move.data)
  if (!_internal_has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CCLCMsg_Move::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CCLCMsg_Move.data)
}

// -------------------------------------------------------------------

// CCLCMsg_VoiceData

// optional bytes data = 1;
inline bool CCLCMsg_VoiceData::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCLCMsg_VoiceData::has_data() const {
  return _internal_has_data();
}
inline void CCLCMsg_VoiceData::clear_data() {
  data_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CCLCMsg_VoiceData::data() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_VoiceData.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CCLCMsg_VoiceData::set_data(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CCLCMsg_VoiceData.data)
}
inline std::string* CCLCMsg_VoiceData::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:CCLCMsg_VoiceData.data)
  return _s;
}
inline const std::string& CCLCMsg_VoiceData::_internal_data() const {
  return data_.Get();
}
inline void CCLCMsg_VoiceData::_internal_set_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CCLCMsg_VoiceData::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000001u;
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CCLCMsg_VoiceData::release_data() {
  // @@protoc_insertion_point(field_release:CCLCMsg_VoiceData.data)
  if (!_internal_has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CCLCMsg_VoiceData::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CCLCMsg_VoiceData.data)
}

// optional fixed64 xuid = 2;
inline bool CCLCMsg_VoiceData::_internal_has_xuid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CCLCMsg_VoiceData::has_xuid() const {
  return _internal_has_xuid();
}
inline void CCLCMsg_VoiceData::clear_xuid() {
  xuid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CCLCMsg_VoiceData::_internal_xuid() const {
  return xuid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CCLCMsg_VoiceData::xuid() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_VoiceData.xuid)
  return _internal_xuid();
}
inline void CCLCMsg_VoiceData::_internal_set_xuid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  xuid_ = value;
}
inline void CCLCMsg_VoiceData::set_xuid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_xuid(value);
  // @@protoc_insertion_point(field_set:CCLCMsg_VoiceData.xuid)
}

// optional .VoiceDataFormat_t format = 3 [default = VOICEDATA_FORMAT_ENGINE];
inline bool CCLCMsg_VoiceData::_internal_has_format() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CCLCMsg_VoiceData::has_format() const {
  return _internal_has_format();
}
inline void CCLCMsg_VoiceData::clear_format() {
  format_ = 1;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::VoiceDataFormat_t CCLCMsg_VoiceData::_internal_format() const {
  return static_cast< ::VoiceDataFormat_t >(format_);
}
inline ::VoiceDataFormat_t CCLCMsg_VoiceData::format() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_VoiceData.format)
  return _internal_format();
}
inline void CCLCMsg_VoiceData::_internal_set_format(::VoiceDataFormat_t value) {
  assert(::VoiceDataFormat_t_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  format_ = value;
}
inline void CCLCMsg_VoiceData::set_format(::VoiceDataFormat_t value) {
  _internal_set_format(value);
  // @@protoc_insertion_point(field_set:CCLCMsg_VoiceData.format)
}

// optional int32 sequence_bytes = 4;
inline bool CCLCMsg_VoiceData::_internal_has_sequence_bytes() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CCLCMsg_VoiceData::has_sequence_bytes() const {
  return _internal_has_sequence_bytes();
}
inline void CCLCMsg_VoiceData::clear_sequence_bytes() {
  sequence_bytes_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CCLCMsg_VoiceData::_internal_sequence_bytes() const {
  return sequence_bytes_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CCLCMsg_VoiceData::sequence_bytes() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_VoiceData.sequence_bytes)
  return _internal_sequence_bytes();
}
inline void CCLCMsg_VoiceData::_internal_set_sequence_bytes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  sequence_bytes_ = value;
}
inline void CCLCMsg_VoiceData::set_sequence_bytes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sequence_bytes(value);
  // @@protoc_insertion_point(field_set:CCLCMsg_VoiceData.sequence_bytes)
}

// optional uint32 section_number = 5;
inline bool CCLCMsg_VoiceData::_internal_has_section_number() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CCLCMsg_VoiceData::has_section_number() const {
  return _internal_has_section_number();
}
inline void CCLCMsg_VoiceData::clear_section_number() {
  section_number_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CCLCMsg_VoiceData::_internal_section_number() const {
  return section_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CCLCMsg_VoiceData::section_number() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_VoiceData.section_number)
  return _internal_section_number();
}
inline void CCLCMsg_VoiceData::_internal_set_section_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  section_number_ = value;
}
inline void CCLCMsg_VoiceData::set_section_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_section_number(value);
  // @@protoc_insertion_point(field_set:CCLCMsg_VoiceData.section_number)
}

// optional uint32 uncompressed_sample_offset = 6;
inline bool CCLCMsg_VoiceData::_internal_has_uncompressed_sample_offset() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CCLCMsg_VoiceData::has_uncompressed_sample_offset() const {
  return _internal_has_uncompressed_sample_offset();
}
inline void CCLCMsg_VoiceData::clear_uncompressed_sample_offset() {
  uncompressed_sample_offset_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CCLCMsg_VoiceData::_internal_uncompressed_sample_offset() const {
  return uncompressed_sample_offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CCLCMsg_VoiceData::uncompressed_sample_offset() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_VoiceData.uncompressed_sample_offset)
  return _internal_uncompressed_sample_offset();
}
inline void CCLCMsg_VoiceData::_internal_set_uncompressed_sample_offset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  uncompressed_sample_offset_ = value;
}
inline void CCLCMsg_VoiceData::set_uncompressed_sample_offset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uncompressed_sample_offset(value);
  // @@protoc_insertion_point(field_set:CCLCMsg_VoiceData.uncompressed_sample_offset)
}

// -------------------------------------------------------------------

// CCLCMsg_BaselineAck

// optional int32 baseline_tick = 1;
inline bool CCLCMsg_BaselineAck::_internal_has_baseline_tick() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCLCMsg_BaselineAck::has_baseline_tick() const {
  return _internal_has_baseline_tick();
}
inline void CCLCMsg_BaselineAck::clear_baseline_tick() {
  baseline_tick_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CCLCMsg_BaselineAck::_internal_baseline_tick() const {
  return baseline_tick_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CCLCMsg_BaselineAck::baseline_tick() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_BaselineAck.baseline_tick)
  return _internal_baseline_tick();
}
inline void CCLCMsg_BaselineAck::_internal_set_baseline_tick(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  baseline_tick_ = value;
}
inline void CCLCMsg_BaselineAck::set_baseline_tick(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_baseline_tick(value);
  // @@protoc_insertion_point(field_set:CCLCMsg_BaselineAck.baseline_tick)
}

// optional int32 baseline_nr = 2;
inline bool CCLCMsg_BaselineAck::_internal_has_baseline_nr() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CCLCMsg_BaselineAck::has_baseline_nr() const {
  return _internal_has_baseline_nr();
}
inline void CCLCMsg_BaselineAck::clear_baseline_nr() {
  baseline_nr_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CCLCMsg_BaselineAck::_internal_baseline_nr() const {
  return baseline_nr_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CCLCMsg_BaselineAck::baseline_nr() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_BaselineAck.baseline_nr)
  return _internal_baseline_nr();
}
inline void CCLCMsg_BaselineAck::_internal_set_baseline_nr(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  baseline_nr_ = value;
}
inline void CCLCMsg_BaselineAck::set_baseline_nr(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_baseline_nr(value);
  // @@protoc_insertion_point(field_set:CCLCMsg_BaselineAck.baseline_nr)
}

// -------------------------------------------------------------------

// CCLCMsg_ListenEvents

// repeated fixed32 event_mask = 1;
inline int CCLCMsg_ListenEvents::_internal_event_mask_size() const {
  return event_mask_.size();
}
inline int CCLCMsg_ListenEvents::event_mask_size() const {
  return _internal_event_mask_size();
}
inline void CCLCMsg_ListenEvents::clear_event_mask() {
  event_mask_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CCLCMsg_ListenEvents::_internal_event_mask(int index) const {
  return event_mask_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CCLCMsg_ListenEvents::event_mask(int index) const {
  // @@protoc_insertion_point(field_get:CCLCMsg_ListenEvents.event_mask)
  return _internal_event_mask(index);
}
inline void CCLCMsg_ListenEvents::set_event_mask(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  event_mask_.Set(index, value);
  // @@protoc_insertion_point(field_set:CCLCMsg_ListenEvents.event_mask)
}
inline void CCLCMsg_ListenEvents::_internal_add_event_mask(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  event_mask_.Add(value);
}
inline void CCLCMsg_ListenEvents::add_event_mask(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_event_mask(value);
  // @@protoc_insertion_point(field_add:CCLCMsg_ListenEvents.event_mask)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CCLCMsg_ListenEvents::_internal_event_mask() const {
  return event_mask_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CCLCMsg_ListenEvents::event_mask() const {
  // @@protoc_insertion_point(field_list:CCLCMsg_ListenEvents.event_mask)
  return _internal_event_mask();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CCLCMsg_ListenEvents::_internal_mutable_event_mask() {
  return &event_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CCLCMsg_ListenEvents::mutable_event_mask() {
  // @@protoc_insertion_point(field_mutable_list:CCLCMsg_ListenEvents.event_mask)
  return _internal_mutable_event_mask();
}

// -------------------------------------------------------------------

// CCLCMsg_RespondCvarValue

// optional int32 cookie = 1;
inline bool CCLCMsg_RespondCvarValue::_internal_has_cookie() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CCLCMsg_RespondCvarValue::has_cookie() const {
  return _internal_has_cookie();
}
inline void CCLCMsg_RespondCvarValue::clear_cookie() {
  cookie_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CCLCMsg_RespondCvarValue::_internal_cookie() const {
  return cookie_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CCLCMsg_RespondCvarValue::cookie() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_RespondCvarValue.cookie)
  return _internal_cookie();
}
inline void CCLCMsg_RespondCvarValue::_internal_set_cookie(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  cookie_ = value;
}
inline void CCLCMsg_RespondCvarValue::set_cookie(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cookie(value);
  // @@protoc_insertion_point(field_set:CCLCMsg_RespondCvarValue.cookie)
}

// optional int32 status_code = 2;
inline bool CCLCMsg_RespondCvarValue::_internal_has_status_code() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CCLCMsg_RespondCvarValue::has_status_code() const {
  return _internal_has_status_code();
}
inline void CCLCMsg_RespondCvarValue::clear_status_code() {
  status_code_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CCLCMsg_RespondCvarValue::_internal_status_code() const {
  return status_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CCLCMsg_RespondCvarValue::status_code() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_RespondCvarValue.status_code)
  return _internal_status_code();
}
inline void CCLCMsg_RespondCvarValue::_internal_set_status_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  status_code_ = value;
}
inline void CCLCMsg_RespondCvarValue::set_status_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status_code(value);
  // @@protoc_insertion_point(field_set:CCLCMsg_RespondCvarValue.status_code)
}

// optional string name = 3;
inline bool CCLCMsg_RespondCvarValue::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCLCMsg_RespondCvarValue::has_name() const {
  return _internal_has_name();
}
inline void CCLCMsg_RespondCvarValue::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CCLCMsg_RespondCvarValue::name() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_RespondCvarValue.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CCLCMsg_RespondCvarValue::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CCLCMsg_RespondCvarValue.name)
}
inline std::string* CCLCMsg_RespondCvarValue::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:CCLCMsg_RespondCvarValue.name)
  return _s;
}
inline const std::string& CCLCMsg_RespondCvarValue::_internal_name() const {
  return name_.Get();
}
inline void CCLCMsg_RespondCvarValue::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CCLCMsg_RespondCvarValue::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CCLCMsg_RespondCvarValue::release_name() {
  // @@protoc_insertion_point(field_release:CCLCMsg_RespondCvarValue.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CCLCMsg_RespondCvarValue::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CCLCMsg_RespondCvarValue.name)
}

// optional string value = 4;
inline bool CCLCMsg_RespondCvarValue::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CCLCMsg_RespondCvarValue::has_value() const {
  return _internal_has_value();
}
inline void CCLCMsg_RespondCvarValue::clear_value() {
  value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CCLCMsg_RespondCvarValue::value() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_RespondCvarValue.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CCLCMsg_RespondCvarValue::set_value(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CCLCMsg_RespondCvarValue.value)
}
inline std::string* CCLCMsg_RespondCvarValue::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:CCLCMsg_RespondCvarValue.value)
  return _s;
}
inline const std::string& CCLCMsg_RespondCvarValue::_internal_value() const {
  return value_.Get();
}
inline void CCLCMsg_RespondCvarValue::_internal_set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CCLCMsg_RespondCvarValue::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000002u;
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CCLCMsg_RespondCvarValue::release_value() {
  // @@protoc_insertion_point(field_release:CCLCMsg_RespondCvarValue.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CCLCMsg_RespondCvarValue::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CCLCMsg_RespondCvarValue.value)
}

// -------------------------------------------------------------------

// CCLCMsg_FileCRCCheck

// optional int32 code_path = 1;
inline bool CCLCMsg_FileCRCCheck::_internal_has_code_path() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CCLCMsg_FileCRCCheck::has_code_path() const {
  return _internal_has_code_path();
}
inline void CCLCMsg_FileCRCCheck::clear_code_path() {
  code_path_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CCLCMsg_FileCRCCheck::_internal_code_path() const {
  return code_path_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CCLCMsg_FileCRCCheck::code_path() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_FileCRCCheck.code_path)
  return _internal_code_path();
}
inline void CCLCMsg_FileCRCCheck::_internal_set_code_path(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  code_path_ = value;
}
inline void CCLCMsg_FileCRCCheck::set_code_path(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code_path(value);
  // @@protoc_insertion_point(field_set:CCLCMsg_FileCRCCheck.code_path)
}

// optional string path = 2;
inline bool CCLCMsg_FileCRCCheck::_internal_has_path() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCLCMsg_FileCRCCheck::has_path() const {
  return _internal_has_path();
}
inline void CCLCMsg_FileCRCCheck::clear_path() {
  path_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CCLCMsg_FileCRCCheck::path() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_FileCRCCheck.path)
  return _internal_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CCLCMsg_FileCRCCheck::set_path(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CCLCMsg_FileCRCCheck.path)
}
inline std::string* CCLCMsg_FileCRCCheck::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:CCLCMsg_FileCRCCheck.path)
  return _s;
}
inline const std::string& CCLCMsg_FileCRCCheck::_internal_path() const {
  return path_.Get();
}
inline void CCLCMsg_FileCRCCheck::_internal_set_path(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CCLCMsg_FileCRCCheck::_internal_mutable_path() {
  _has_bits_[0] |= 0x00000001u;
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CCLCMsg_FileCRCCheck::release_path() {
  // @@protoc_insertion_point(field_release:CCLCMsg_FileCRCCheck.path)
  if (!_internal_has_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return path_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CCLCMsg_FileCRCCheck::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CCLCMsg_FileCRCCheck.path)
}

// optional int32 code_filename = 3;
inline bool CCLCMsg_FileCRCCheck::_internal_has_code_filename() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CCLCMsg_FileCRCCheck::has_code_filename() const {
  return _internal_has_code_filename();
}
inline void CCLCMsg_FileCRCCheck::clear_code_filename() {
  code_filename_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CCLCMsg_FileCRCCheck::_internal_code_filename() const {
  return code_filename_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CCLCMsg_FileCRCCheck::code_filename() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_FileCRCCheck.code_filename)
  return _internal_code_filename();
}
inline void CCLCMsg_FileCRCCheck::_internal_set_code_filename(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  code_filename_ = value;
}
inline void CCLCMsg_FileCRCCheck::set_code_filename(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code_filename(value);
  // @@protoc_insertion_point(field_set:CCLCMsg_FileCRCCheck.code_filename)
}

// optional string filename = 4;
inline bool CCLCMsg_FileCRCCheck::_internal_has_filename() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CCLCMsg_FileCRCCheck::has_filename() const {
  return _internal_has_filename();
}
inline void CCLCMsg_FileCRCCheck::clear_filename() {
  filename_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CCLCMsg_FileCRCCheck::filename() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_FileCRCCheck.filename)
  return _internal_filename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CCLCMsg_FileCRCCheck::set_filename(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CCLCMsg_FileCRCCheck.filename)
}
inline std::string* CCLCMsg_FileCRCCheck::mutable_filename() {
  std::string* _s = _internal_mutable_filename();
  // @@protoc_insertion_point(field_mutable:CCLCMsg_FileCRCCheck.filename)
  return _s;
}
inline const std::string& CCLCMsg_FileCRCCheck::_internal_filename() const {
  return filename_.Get();
}
inline void CCLCMsg_FileCRCCheck::_internal_set_filename(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CCLCMsg_FileCRCCheck::_internal_mutable_filename() {
  _has_bits_[0] |= 0x00000002u;
  return filename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CCLCMsg_FileCRCCheck::release_filename() {
  // @@protoc_insertion_point(field_release:CCLCMsg_FileCRCCheck.filename)
  if (!_internal_has_filename()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return filename_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CCLCMsg_FileCRCCheck::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  filename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filename,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CCLCMsg_FileCRCCheck.filename)
}

// optional int32 file_fraction = 5;
inline bool CCLCMsg_FileCRCCheck::_internal_has_file_fraction() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CCLCMsg_FileCRCCheck::has_file_fraction() const {
  return _internal_has_file_fraction();
}
inline void CCLCMsg_FileCRCCheck::clear_file_fraction() {
  file_fraction_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CCLCMsg_FileCRCCheck::_internal_file_fraction() const {
  return file_fraction_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CCLCMsg_FileCRCCheck::file_fraction() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_FileCRCCheck.file_fraction)
  return _internal_file_fraction();
}
inline void CCLCMsg_FileCRCCheck::_internal_set_file_fraction(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  file_fraction_ = value;
}
inline void CCLCMsg_FileCRCCheck::set_file_fraction(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_file_fraction(value);
  // @@protoc_insertion_point(field_set:CCLCMsg_FileCRCCheck.file_fraction)
}

// optional bytes md5 = 6;
inline bool CCLCMsg_FileCRCCheck::_internal_has_md5() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CCLCMsg_FileCRCCheck::has_md5() const {
  return _internal_has_md5();
}
inline void CCLCMsg_FileCRCCheck::clear_md5() {
  md5_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CCLCMsg_FileCRCCheck::md5() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_FileCRCCheck.md5)
  return _internal_md5();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CCLCMsg_FileCRCCheck::set_md5(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 md5_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CCLCMsg_FileCRCCheck.md5)
}
inline std::string* CCLCMsg_FileCRCCheck::mutable_md5() {
  std::string* _s = _internal_mutable_md5();
  // @@protoc_insertion_point(field_mutable:CCLCMsg_FileCRCCheck.md5)
  return _s;
}
inline const std::string& CCLCMsg_FileCRCCheck::_internal_md5() const {
  return md5_.Get();
}
inline void CCLCMsg_FileCRCCheck::_internal_set_md5(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  md5_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CCLCMsg_FileCRCCheck::_internal_mutable_md5() {
  _has_bits_[0] |= 0x00000004u;
  return md5_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CCLCMsg_FileCRCCheck::release_md5() {
  // @@protoc_insertion_point(field_release:CCLCMsg_FileCRCCheck.md5)
  if (!_internal_has_md5()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return md5_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CCLCMsg_FileCRCCheck::set_allocated_md5(std::string* md5) {
  if (md5 != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  md5_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), md5,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CCLCMsg_FileCRCCheck.md5)
}

// optional uint32 crc = 7;
inline bool CCLCMsg_FileCRCCheck::_internal_has_crc() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CCLCMsg_FileCRCCheck::has_crc() const {
  return _internal_has_crc();
}
inline void CCLCMsg_FileCRCCheck::clear_crc() {
  crc_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CCLCMsg_FileCRCCheck::_internal_crc() const {
  return crc_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CCLCMsg_FileCRCCheck::crc() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_FileCRCCheck.crc)
  return _internal_crc();
}
inline void CCLCMsg_FileCRCCheck::_internal_set_crc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  crc_ = value;
}
inline void CCLCMsg_FileCRCCheck::set_crc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_crc(value);
  // @@protoc_insertion_point(field_set:CCLCMsg_FileCRCCheck.crc)
}

// optional int32 file_hash_type = 8;
inline bool CCLCMsg_FileCRCCheck::_internal_has_file_hash_type() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CCLCMsg_FileCRCCheck::has_file_hash_type() const {
  return _internal_has_file_hash_type();
}
inline void CCLCMsg_FileCRCCheck::clear_file_hash_type() {
  file_hash_type_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CCLCMsg_FileCRCCheck::_internal_file_hash_type() const {
  return file_hash_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CCLCMsg_FileCRCCheck::file_hash_type() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_FileCRCCheck.file_hash_type)
  return _internal_file_hash_type();
}
inline void CCLCMsg_FileCRCCheck::_internal_set_file_hash_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  file_hash_type_ = value;
}
inline void CCLCMsg_FileCRCCheck::set_file_hash_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_file_hash_type(value);
  // @@protoc_insertion_point(field_set:CCLCMsg_FileCRCCheck.file_hash_type)
}

// optional int32 file_len = 9;
inline bool CCLCMsg_FileCRCCheck::_internal_has_file_len() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CCLCMsg_FileCRCCheck::has_file_len() const {
  return _internal_has_file_len();
}
inline void CCLCMsg_FileCRCCheck::clear_file_len() {
  file_len_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CCLCMsg_FileCRCCheck::_internal_file_len() const {
  return file_len_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CCLCMsg_FileCRCCheck::file_len() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_FileCRCCheck.file_len)
  return _internal_file_len();
}
inline void CCLCMsg_FileCRCCheck::_internal_set_file_len(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  file_len_ = value;
}
inline void CCLCMsg_FileCRCCheck::set_file_len(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_file_len(value);
  // @@protoc_insertion_point(field_set:CCLCMsg_FileCRCCheck.file_len)
}

// optional int32 pack_file_id = 10;
inline bool CCLCMsg_FileCRCCheck::_internal_has_pack_file_id() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CCLCMsg_FileCRCCheck::has_pack_file_id() const {
  return _internal_has_pack_file_id();
}
inline void CCLCMsg_FileCRCCheck::clear_pack_file_id() {
  pack_file_id_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CCLCMsg_FileCRCCheck::_internal_pack_file_id() const {
  return pack_file_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CCLCMsg_FileCRCCheck::pack_file_id() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_FileCRCCheck.pack_file_id)
  return _internal_pack_file_id();
}
inline void CCLCMsg_FileCRCCheck::_internal_set_pack_file_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  pack_file_id_ = value;
}
inline void CCLCMsg_FileCRCCheck::set_pack_file_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pack_file_id(value);
  // @@protoc_insertion_point(field_set:CCLCMsg_FileCRCCheck.pack_file_id)
}

// optional int32 pack_file_number = 11;
inline bool CCLCMsg_FileCRCCheck::_internal_has_pack_file_number() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CCLCMsg_FileCRCCheck::has_pack_file_number() const {
  return _internal_has_pack_file_number();
}
inline void CCLCMsg_FileCRCCheck::clear_pack_file_number() {
  pack_file_number_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CCLCMsg_FileCRCCheck::_internal_pack_file_number() const {
  return pack_file_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CCLCMsg_FileCRCCheck::pack_file_number() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_FileCRCCheck.pack_file_number)
  return _internal_pack_file_number();
}
inline void CCLCMsg_FileCRCCheck::_internal_set_pack_file_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000400u;
  pack_file_number_ = value;
}
inline void CCLCMsg_FileCRCCheck::set_pack_file_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pack_file_number(value);
  // @@protoc_insertion_point(field_set:CCLCMsg_FileCRCCheck.pack_file_number)
}

// -------------------------------------------------------------------

// CCLCMsg_LoadingProgress

// optional int32 progress = 1;
inline bool CCLCMsg_LoadingProgress::_internal_has_progress() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCLCMsg_LoadingProgress::has_progress() const {
  return _internal_has_progress();
}
inline void CCLCMsg_LoadingProgress::clear_progress() {
  progress_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CCLCMsg_LoadingProgress::_internal_progress() const {
  return progress_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CCLCMsg_LoadingProgress::progress() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_LoadingProgress.progress)
  return _internal_progress();
}
inline void CCLCMsg_LoadingProgress::_internal_set_progress(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  progress_ = value;
}
inline void CCLCMsg_LoadingProgress::set_progress(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_progress(value);
  // @@protoc_insertion_point(field_set:CCLCMsg_LoadingProgress.progress)
}

// -------------------------------------------------------------------

// CCLCMsg_SplitPlayerConnect

// optional .CMsg_CVars convars = 1;
inline bool CCLCMsg_SplitPlayerConnect::_internal_has_convars() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || convars_ != nullptr);
  return value;
}
inline bool CCLCMsg_SplitPlayerConnect::has_convars() const {
  return _internal_has_convars();
}
inline void CCLCMsg_SplitPlayerConnect::clear_convars() {
  if (convars_ != nullptr) convars_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsg_CVars& CCLCMsg_SplitPlayerConnect::_internal_convars() const {
  const ::CMsg_CVars* p = convars_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsg_CVars&>(
      ::_CMsg_CVars_default_instance_);
}
inline const ::CMsg_CVars& CCLCMsg_SplitPlayerConnect::convars() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_SplitPlayerConnect.convars)
  return _internal_convars();
}
inline void CCLCMsg_SplitPlayerConnect::unsafe_arena_set_allocated_convars(
    ::CMsg_CVars* convars) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(convars_);
  }
  convars_ = convars;
  if (convars) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CCLCMsg_SplitPlayerConnect.convars)
}
inline ::CMsg_CVars* CCLCMsg_SplitPlayerConnect::release_convars() {
  _has_bits_[0] &= ~0x00000001u;
  ::CMsg_CVars* temp = convars_;
  convars_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsg_CVars* CCLCMsg_SplitPlayerConnect::unsafe_arena_release_convars() {
  // @@protoc_insertion_point(field_release:CCLCMsg_SplitPlayerConnect.convars)
  _has_bits_[0] &= ~0x00000001u;
  ::CMsg_CVars* temp = convars_;
  convars_ = nullptr;
  return temp;
}
inline ::CMsg_CVars* CCLCMsg_SplitPlayerConnect::_internal_mutable_convars() {
  _has_bits_[0] |= 0x00000001u;
  if (convars_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsg_CVars>(GetArenaForAllocation());
    convars_ = p;
  }
  return convars_;
}
inline ::CMsg_CVars* CCLCMsg_SplitPlayerConnect::mutable_convars() {
  ::CMsg_CVars* _msg = _internal_mutable_convars();
  // @@protoc_insertion_point(field_mutable:CCLCMsg_SplitPlayerConnect.convars)
  return _msg;
}
inline void CCLCMsg_SplitPlayerConnect::set_allocated_convars(::CMsg_CVars* convars) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete convars_;
  }
  if (convars) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsg_CVars>::GetOwningArena(convars);
    if (message_arena != submessage_arena) {
      convars = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, convars, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  convars_ = convars;
  // @@protoc_insertion_point(field_set_allocated:CCLCMsg_SplitPlayerConnect.convars)
}

// -------------------------------------------------------------------

// CCLCMsg_CmdKeyValues

// optional bytes keyvalues = 1;
inline bool CCLCMsg_CmdKeyValues::_internal_has_keyvalues() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCLCMsg_CmdKeyValues::has_keyvalues() const {
  return _internal_has_keyvalues();
}
inline void CCLCMsg_CmdKeyValues::clear_keyvalues() {
  keyvalues_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CCLCMsg_CmdKeyValues::keyvalues() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_CmdKeyValues.keyvalues)
  return _internal_keyvalues();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CCLCMsg_CmdKeyValues::set_keyvalues(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 keyvalues_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CCLCMsg_CmdKeyValues.keyvalues)
}
inline std::string* CCLCMsg_CmdKeyValues::mutable_keyvalues() {
  std::string* _s = _internal_mutable_keyvalues();
  // @@protoc_insertion_point(field_mutable:CCLCMsg_CmdKeyValues.keyvalues)
  return _s;
}
inline const std::string& CCLCMsg_CmdKeyValues::_internal_keyvalues() const {
  return keyvalues_.Get();
}
inline void CCLCMsg_CmdKeyValues::_internal_set_keyvalues(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  keyvalues_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CCLCMsg_CmdKeyValues::_internal_mutable_keyvalues() {
  _has_bits_[0] |= 0x00000001u;
  return keyvalues_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CCLCMsg_CmdKeyValues::release_keyvalues() {
  // @@protoc_insertion_point(field_release:CCLCMsg_CmdKeyValues.keyvalues)
  if (!_internal_has_keyvalues()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return keyvalues_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CCLCMsg_CmdKeyValues::set_allocated_keyvalues(std::string* keyvalues) {
  if (keyvalues != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  keyvalues_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), keyvalues,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CCLCMsg_CmdKeyValues.keyvalues)
}

// -------------------------------------------------------------------

// CSVCMsg_ServerInfo

// optional int32 protocol = 1;
inline bool CSVCMsg_ServerInfo::_internal_has_protocol() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CSVCMsg_ServerInfo::has_protocol() const {
  return _internal_has_protocol();
}
inline void CSVCMsg_ServerInfo::clear_protocol() {
  protocol_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_ServerInfo::_internal_protocol() const {
  return protocol_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_ServerInfo::protocol() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_ServerInfo.protocol)
  return _internal_protocol();
}
inline void CSVCMsg_ServerInfo::_internal_set_protocol(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  protocol_ = value;
}
inline void CSVCMsg_ServerInfo::set_protocol(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_protocol(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_ServerInfo.protocol)
}

// optional int32 server_count = 2;
inline bool CSVCMsg_ServerInfo::_internal_has_server_count() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CSVCMsg_ServerInfo::has_server_count() const {
  return _internal_has_server_count();
}
inline void CSVCMsg_ServerInfo::clear_server_count() {
  server_count_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_ServerInfo::_internal_server_count() const {
  return server_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_ServerInfo::server_count() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_ServerInfo.server_count)
  return _internal_server_count();
}
inline void CSVCMsg_ServerInfo::_internal_set_server_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  server_count_ = value;
}
inline void CSVCMsg_ServerInfo::set_server_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_server_count(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_ServerInfo.server_count)
}

// optional bool is_dedicated = 3;
inline bool CSVCMsg_ServerInfo::_internal_has_is_dedicated() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CSVCMsg_ServerInfo::has_is_dedicated() const {
  return _internal_has_is_dedicated();
}
inline void CSVCMsg_ServerInfo::clear_is_dedicated() {
  is_dedicated_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool CSVCMsg_ServerInfo::_internal_is_dedicated() const {
  return is_dedicated_;
}
inline bool CSVCMsg_ServerInfo::is_dedicated() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_ServerInfo.is_dedicated)
  return _internal_is_dedicated();
}
inline void CSVCMsg_ServerInfo::_internal_set_is_dedicated(bool value) {
  _has_bits_[0] |= 0x00000080u;
  is_dedicated_ = value;
}
inline void CSVCMsg_ServerInfo::set_is_dedicated(bool value) {
  _internal_set_is_dedicated(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_ServerInfo.is_dedicated)
}

// optional bool is_official_valve_server = 4;
inline bool CSVCMsg_ServerInfo::_internal_has_is_official_valve_server() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CSVCMsg_ServerInfo::has_is_official_valve_server() const {
  return _internal_has_is_official_valve_server();
}
inline void CSVCMsg_ServerInfo::clear_is_official_valve_server() {
  is_official_valve_server_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool CSVCMsg_ServerInfo::_internal_is_official_valve_server() const {
  return is_official_valve_server_;
}
inline bool CSVCMsg_ServerInfo::is_official_valve_server() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_ServerInfo.is_official_valve_server)
  return _internal_is_official_valve_server();
}
inline void CSVCMsg_ServerInfo::_internal_set_is_official_valve_server(bool value) {
  _has_bits_[0] |= 0x00000100u;
  is_official_valve_server_ = value;
}
inline void CSVCMsg_ServerInfo::set_is_official_valve_server(bool value) {
  _internal_set_is_official_valve_server(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_ServerInfo.is_official_valve_server)
}

// optional bool is_hltv = 5;
inline bool CSVCMsg_ServerInfo::_internal_has_is_hltv() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CSVCMsg_ServerInfo::has_is_hltv() const {
  return _internal_has_is_hltv();
}
inline void CSVCMsg_ServerInfo::clear_is_hltv() {
  is_hltv_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool CSVCMsg_ServerInfo::_internal_is_hltv() const {
  return is_hltv_;
}
inline bool CSVCMsg_ServerInfo::is_hltv() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_ServerInfo.is_hltv)
  return _internal_is_hltv();
}
inline void CSVCMsg_ServerInfo::_internal_set_is_hltv(bool value) {
  _has_bits_[0] |= 0x00000200u;
  is_hltv_ = value;
}
inline void CSVCMsg_ServerInfo::set_is_hltv(bool value) {
  _internal_set_is_hltv(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_ServerInfo.is_hltv)
}

// optional bool is_replay = 6;
inline bool CSVCMsg_ServerInfo::_internal_has_is_replay() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CSVCMsg_ServerInfo::has_is_replay() const {
  return _internal_has_is_replay();
}
inline void CSVCMsg_ServerInfo::clear_is_replay() {
  is_replay_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool CSVCMsg_ServerInfo::_internal_is_replay() const {
  return is_replay_;
}
inline bool CSVCMsg_ServerInfo::is_replay() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_ServerInfo.is_replay)
  return _internal_is_replay();
}
inline void CSVCMsg_ServerInfo::_internal_set_is_replay(bool value) {
  _has_bits_[0] |= 0x00000400u;
  is_replay_ = value;
}
inline void CSVCMsg_ServerInfo::set_is_replay(bool value) {
  _internal_set_is_replay(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_ServerInfo.is_replay)
}

// optional bool is_redirecting_to_proxy_relay = 21;
inline bool CSVCMsg_ServerInfo::_internal_has_is_redirecting_to_proxy_relay() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool CSVCMsg_ServerInfo::has_is_redirecting_to_proxy_relay() const {
  return _internal_has_is_redirecting_to_proxy_relay();
}
inline void CSVCMsg_ServerInfo::clear_is_redirecting_to_proxy_relay() {
  is_redirecting_to_proxy_relay_ = false;
  _has_bits_[0] &= ~0x00200000u;
}
inline bool CSVCMsg_ServerInfo::_internal_is_redirecting_to_proxy_relay() const {
  return is_redirecting_to_proxy_relay_;
}
inline bool CSVCMsg_ServerInfo::is_redirecting_to_proxy_relay() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_ServerInfo.is_redirecting_to_proxy_relay)
  return _internal_is_redirecting_to_proxy_relay();
}
inline void CSVCMsg_ServerInfo::_internal_set_is_redirecting_to_proxy_relay(bool value) {
  _has_bits_[0] |= 0x00200000u;
  is_redirecting_to_proxy_relay_ = value;
}
inline void CSVCMsg_ServerInfo::set_is_redirecting_to_proxy_relay(bool value) {
  _internal_set_is_redirecting_to_proxy_relay(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_ServerInfo.is_redirecting_to_proxy_relay)
}

// optional int32 c_os = 7;
inline bool CSVCMsg_ServerInfo::_internal_has_c_os() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CSVCMsg_ServerInfo::has_c_os() const {
  return _internal_has_c_os();
}
inline void CSVCMsg_ServerInfo::clear_c_os() {
  c_os_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_ServerInfo::_internal_c_os() const {
  return c_os_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_ServerInfo::c_os() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_ServerInfo.c_os)
  return _internal_c_os();
}
inline void CSVCMsg_ServerInfo::_internal_set_c_os(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000800u;
  c_os_ = value;
}
inline void CSVCMsg_ServerInfo::set_c_os(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_c_os(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_ServerInfo.c_os)
}

// optional fixed32 map_crc = 8;
inline bool CSVCMsg_ServerInfo::_internal_has_map_crc() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CSVCMsg_ServerInfo::has_map_crc() const {
  return _internal_has_map_crc();
}
inline void CSVCMsg_ServerInfo::clear_map_crc() {
  map_crc_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSVCMsg_ServerInfo::_internal_map_crc() const {
  return map_crc_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSVCMsg_ServerInfo::map_crc() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_ServerInfo.map_crc)
  return _internal_map_crc();
}
inline void CSVCMsg_ServerInfo::_internal_set_map_crc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00001000u;
  map_crc_ = value;
}
inline void CSVCMsg_ServerInfo::set_map_crc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_map_crc(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_ServerInfo.map_crc)
}

// optional fixed32 client_crc = 9;
inline bool CSVCMsg_ServerInfo::_internal_has_client_crc() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CSVCMsg_ServerInfo::has_client_crc() const {
  return _internal_has_client_crc();
}
inline void CSVCMsg_ServerInfo::clear_client_crc() {
  client_crc_ = 0u;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSVCMsg_ServerInfo::_internal_client_crc() const {
  return client_crc_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSVCMsg_ServerInfo::client_crc() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_ServerInfo.client_crc)
  return _internal_client_crc();
}
inline void CSVCMsg_ServerInfo::_internal_set_client_crc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00002000u;
  client_crc_ = value;
}
inline void CSVCMsg_ServerInfo::set_client_crc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_client_crc(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_ServerInfo.client_crc)
}

// optional fixed32 string_table_crc = 10;
inline bool CSVCMsg_ServerInfo::_internal_has_string_table_crc() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CSVCMsg_ServerInfo::has_string_table_crc() const {
  return _internal_has_string_table_crc();
}
inline void CSVCMsg_ServerInfo::clear_string_table_crc() {
  string_table_crc_ = 0u;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSVCMsg_ServerInfo::_internal_string_table_crc() const {
  return string_table_crc_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSVCMsg_ServerInfo::string_table_crc() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_ServerInfo.string_table_crc)
  return _internal_string_table_crc();
}
inline void CSVCMsg_ServerInfo::_internal_set_string_table_crc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00004000u;
  string_table_crc_ = value;
}
inline void CSVCMsg_ServerInfo::set_string_table_crc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_string_table_crc(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_ServerInfo.string_table_crc)
}

// optional int32 max_clients = 11;
inline bool CSVCMsg_ServerInfo::_internal_has_max_clients() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool CSVCMsg_ServerInfo::has_max_clients() const {
  return _internal_has_max_clients();
}
inline void CSVCMsg_ServerInfo::clear_max_clients() {
  max_clients_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_ServerInfo::_internal_max_clients() const {
  return max_clients_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_ServerInfo::max_clients() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_ServerInfo.max_clients)
  return _internal_max_clients();
}
inline void CSVCMsg_ServerInfo::_internal_set_max_clients(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00008000u;
  max_clients_ = value;
}
inline void CSVCMsg_ServerInfo::set_max_clients(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_clients(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_ServerInfo.max_clients)
}

// optional int32 max_classes = 12;
inline bool CSVCMsg_ServerInfo::_internal_has_max_classes() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool CSVCMsg_ServerInfo::has_max_classes() const {
  return _internal_has_max_classes();
}
inline void CSVCMsg_ServerInfo::clear_max_classes() {
  max_classes_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_ServerInfo::_internal_max_classes() const {
  return max_classes_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_ServerInfo::max_classes() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_ServerInfo.max_classes)
  return _internal_max_classes();
}
inline void CSVCMsg_ServerInfo::_internal_set_max_classes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00010000u;
  max_classes_ = value;
}
inline void CSVCMsg_ServerInfo::set_max_classes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_classes(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_ServerInfo.max_classes)
}

// optional int32 player_slot = 13;
inline bool CSVCMsg_ServerInfo::_internal_has_player_slot() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool CSVCMsg_ServerInfo::has_player_slot() const {
  return _internal_has_player_slot();
}
inline void CSVCMsg_ServerInfo::clear_player_slot() {
  player_slot_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_ServerInfo::_internal_player_slot() const {
  return player_slot_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_ServerInfo::player_slot() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_ServerInfo.player_slot)
  return _internal_player_slot();
}
inline void CSVCMsg_ServerInfo::_internal_set_player_slot(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00020000u;
  player_slot_ = value;
}
inline void CSVCMsg_ServerInfo::set_player_slot(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_player_slot(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_ServerInfo.player_slot)
}

// optional float tick_interval = 14;
inline bool CSVCMsg_ServerInfo::_internal_has_tick_interval() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool CSVCMsg_ServerInfo::has_tick_interval() const {
  return _internal_has_tick_interval();
}
inline void CSVCMsg_ServerInfo::clear_tick_interval() {
  tick_interval_ = 0;
  _has_bits_[0] &= ~0x00040000u;
}
inline float CSVCMsg_ServerInfo::_internal_tick_interval() const {
  return tick_interval_;
}
inline float CSVCMsg_ServerInfo::tick_interval() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_ServerInfo.tick_interval)
  return _internal_tick_interval();
}
inline void CSVCMsg_ServerInfo::_internal_set_tick_interval(float value) {
  _has_bits_[0] |= 0x00040000u;
  tick_interval_ = value;
}
inline void CSVCMsg_ServerInfo::set_tick_interval(float value) {
  _internal_set_tick_interval(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_ServerInfo.tick_interval)
}

// optional string game_dir = 15;
inline bool CSVCMsg_ServerInfo::_internal_has_game_dir() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSVCMsg_ServerInfo::has_game_dir() const {
  return _internal_has_game_dir();
}
inline void CSVCMsg_ServerInfo::clear_game_dir() {
  game_dir_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CSVCMsg_ServerInfo::game_dir() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_ServerInfo.game_dir)
  return _internal_game_dir();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSVCMsg_ServerInfo::set_game_dir(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 game_dir_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CSVCMsg_ServerInfo.game_dir)
}
inline std::string* CSVCMsg_ServerInfo::mutable_game_dir() {
  std::string* _s = _internal_mutable_game_dir();
  // @@protoc_insertion_point(field_mutable:CSVCMsg_ServerInfo.game_dir)
  return _s;
}
inline const std::string& CSVCMsg_ServerInfo::_internal_game_dir() const {
  return game_dir_.Get();
}
inline void CSVCMsg_ServerInfo::_internal_set_game_dir(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  game_dir_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CSVCMsg_ServerInfo::_internal_mutable_game_dir() {
  _has_bits_[0] |= 0x00000001u;
  return game_dir_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CSVCMsg_ServerInfo::release_game_dir() {
  // @@protoc_insertion_point(field_release:CSVCMsg_ServerInfo.game_dir)
  if (!_internal_has_game_dir()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return game_dir_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CSVCMsg_ServerInfo::set_allocated_game_dir(std::string* game_dir) {
  if (game_dir != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  game_dir_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), game_dir,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CSVCMsg_ServerInfo.game_dir)
}

// optional string map_name = 16;
inline bool CSVCMsg_ServerInfo::_internal_has_map_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSVCMsg_ServerInfo::has_map_name() const {
  return _internal_has_map_name();
}
inline void CSVCMsg_ServerInfo::clear_map_name() {
  map_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CSVCMsg_ServerInfo::map_name() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_ServerInfo.map_name)
  return _internal_map_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSVCMsg_ServerInfo::set_map_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 map_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CSVCMsg_ServerInfo.map_name)
}
inline std::string* CSVCMsg_ServerInfo::mutable_map_name() {
  std::string* _s = _internal_mutable_map_name();
  // @@protoc_insertion_point(field_mutable:CSVCMsg_ServerInfo.map_name)
  return _s;
}
inline const std::string& CSVCMsg_ServerInfo::_internal_map_name() const {
  return map_name_.Get();
}
inline void CSVCMsg_ServerInfo::_internal_set_map_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  map_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CSVCMsg_ServerInfo::_internal_mutable_map_name() {
  _has_bits_[0] |= 0x00000002u;
  return map_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CSVCMsg_ServerInfo::release_map_name() {
  // @@protoc_insertion_point(field_release:CSVCMsg_ServerInfo.map_name)
  if (!_internal_has_map_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return map_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CSVCMsg_ServerInfo::set_allocated_map_name(std::string* map_name) {
  if (map_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  map_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), map_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CSVCMsg_ServerInfo.map_name)
}

// optional string map_group_name = 17;
inline bool CSVCMsg_ServerInfo::_internal_has_map_group_name() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CSVCMsg_ServerInfo::has_map_group_name() const {
  return _internal_has_map_group_name();
}
inline void CSVCMsg_ServerInfo::clear_map_group_name() {
  map_group_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CSVCMsg_ServerInfo::map_group_name() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_ServerInfo.map_group_name)
  return _internal_map_group_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSVCMsg_ServerInfo::set_map_group_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 map_group_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CSVCMsg_ServerInfo.map_group_name)
}
inline std::string* CSVCMsg_ServerInfo::mutable_map_group_name() {
  std::string* _s = _internal_mutable_map_group_name();
  // @@protoc_insertion_point(field_mutable:CSVCMsg_ServerInfo.map_group_name)
  return _s;
}
inline const std::string& CSVCMsg_ServerInfo::_internal_map_group_name() const {
  return map_group_name_.Get();
}
inline void CSVCMsg_ServerInfo::_internal_set_map_group_name(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  map_group_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CSVCMsg_ServerInfo::_internal_mutable_map_group_name() {
  _has_bits_[0] |= 0x00000004u;
  return map_group_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CSVCMsg_ServerInfo::release_map_group_name() {
  // @@protoc_insertion_point(field_release:CSVCMsg_ServerInfo.map_group_name)
  if (!_internal_has_map_group_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return map_group_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CSVCMsg_ServerInfo::set_allocated_map_group_name(std::string* map_group_name) {
  if (map_group_name != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  map_group_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), map_group_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CSVCMsg_ServerInfo.map_group_name)
}

// optional string sky_name = 18;
inline bool CSVCMsg_ServerInfo::_internal_has_sky_name() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CSVCMsg_ServerInfo::has_sky_name() const {
  return _internal_has_sky_name();
}
inline void CSVCMsg_ServerInfo::clear_sky_name() {
  sky_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& CSVCMsg_ServerInfo::sky_name() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_ServerInfo.sky_name)
  return _internal_sky_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSVCMsg_ServerInfo::set_sky_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 sky_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CSVCMsg_ServerInfo.sky_name)
}
inline std::string* CSVCMsg_ServerInfo::mutable_sky_name() {
  std::string* _s = _internal_mutable_sky_name();
  // @@protoc_insertion_point(field_mutable:CSVCMsg_ServerInfo.sky_name)
  return _s;
}
inline const std::string& CSVCMsg_ServerInfo::_internal_sky_name() const {
  return sky_name_.Get();
}
inline void CSVCMsg_ServerInfo::_internal_set_sky_name(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  sky_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CSVCMsg_ServerInfo::_internal_mutable_sky_name() {
  _has_bits_[0] |= 0x00000008u;
  return sky_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CSVCMsg_ServerInfo::release_sky_name() {
  // @@protoc_insertion_point(field_release:CSVCMsg_ServerInfo.sky_name)
  if (!_internal_has_sky_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return sky_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CSVCMsg_ServerInfo::set_allocated_sky_name(std::string* sky_name) {
  if (sky_name != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  sky_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sky_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CSVCMsg_ServerInfo.sky_name)
}

// optional string host_name = 19;
inline bool CSVCMsg_ServerInfo::_internal_has_host_name() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CSVCMsg_ServerInfo::has_host_name() const {
  return _internal_has_host_name();
}
inline void CSVCMsg_ServerInfo::clear_host_name() {
  host_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& CSVCMsg_ServerInfo::host_name() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_ServerInfo.host_name)
  return _internal_host_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSVCMsg_ServerInfo::set_host_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000010u;
 host_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CSVCMsg_ServerInfo.host_name)
}
inline std::string* CSVCMsg_ServerInfo::mutable_host_name() {
  std::string* _s = _internal_mutable_host_name();
  // @@protoc_insertion_point(field_mutable:CSVCMsg_ServerInfo.host_name)
  return _s;
}
inline const std::string& CSVCMsg_ServerInfo::_internal_host_name() const {
  return host_name_.Get();
}
inline void CSVCMsg_ServerInfo::_internal_set_host_name(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  host_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CSVCMsg_ServerInfo::_internal_mutable_host_name() {
  _has_bits_[0] |= 0x00000010u;
  return host_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CSVCMsg_ServerInfo::release_host_name() {
  // @@protoc_insertion_point(field_release:CSVCMsg_ServerInfo.host_name)
  if (!_internal_has_host_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return host_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CSVCMsg_ServerInfo::set_allocated_host_name(std::string* host_name) {
  if (host_name != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  host_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), host_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CSVCMsg_ServerInfo.host_name)
}

// optional uint32 public_ip = 20;
inline bool CSVCMsg_ServerInfo::_internal_has_public_ip() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool CSVCMsg_ServerInfo::has_public_ip() const {
  return _internal_has_public_ip();
}
inline void CSVCMsg_ServerInfo::clear_public_ip() {
  public_ip_ = 0u;
  _has_bits_[0] &= ~0x00080000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSVCMsg_ServerInfo::_internal_public_ip() const {
  return public_ip_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSVCMsg_ServerInfo::public_ip() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_ServerInfo.public_ip)
  return _internal_public_ip();
}
inline void CSVCMsg_ServerInfo::_internal_set_public_ip(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00080000u;
  public_ip_ = value;
}
inline void CSVCMsg_ServerInfo::set_public_ip(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_public_ip(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_ServerInfo.public_ip)
}

// optional uint64 ugc_map_id = 22;
inline bool CSVCMsg_ServerInfo::_internal_has_ugc_map_id() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool CSVCMsg_ServerInfo::has_ugc_map_id() const {
  return _internal_has_ugc_map_id();
}
inline void CSVCMsg_ServerInfo::clear_ugc_map_id() {
  ugc_map_id_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00100000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CSVCMsg_ServerInfo::_internal_ugc_map_id() const {
  return ugc_map_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CSVCMsg_ServerInfo::ugc_map_id() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_ServerInfo.ugc_map_id)
  return _internal_ugc_map_id();
}
inline void CSVCMsg_ServerInfo::_internal_set_ugc_map_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00100000u;
  ugc_map_id_ = value;
}
inline void CSVCMsg_ServerInfo::set_ugc_map_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_ugc_map_id(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_ServerInfo.ugc_map_id)
}

// -------------------------------------------------------------------

// CSVCMsg_ClassInfo_class_t

// optional int32 class_id = 1;
inline bool CSVCMsg_ClassInfo_class_t::_internal_has_class_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CSVCMsg_ClassInfo_class_t::has_class_id() const {
  return _internal_has_class_id();
}
inline void CSVCMsg_ClassInfo_class_t::clear_class_id() {
  class_id_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_ClassInfo_class_t::_internal_class_id() const {
  return class_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_ClassInfo_class_t::class_id() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_ClassInfo.class_t.class_id)
  return _internal_class_id();
}
inline void CSVCMsg_ClassInfo_class_t::_internal_set_class_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  class_id_ = value;
}
inline void CSVCMsg_ClassInfo_class_t::set_class_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_class_id(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_ClassInfo.class_t.class_id)
}

// optional string data_table_name = 2;
inline bool CSVCMsg_ClassInfo_class_t::_internal_has_data_table_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSVCMsg_ClassInfo_class_t::has_data_table_name() const {
  return _internal_has_data_table_name();
}
inline void CSVCMsg_ClassInfo_class_t::clear_data_table_name() {
  data_table_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CSVCMsg_ClassInfo_class_t::data_table_name() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_ClassInfo.class_t.data_table_name)
  return _internal_data_table_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSVCMsg_ClassInfo_class_t::set_data_table_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 data_table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CSVCMsg_ClassInfo.class_t.data_table_name)
}
inline std::string* CSVCMsg_ClassInfo_class_t::mutable_data_table_name() {
  std::string* _s = _internal_mutable_data_table_name();
  // @@protoc_insertion_point(field_mutable:CSVCMsg_ClassInfo.class_t.data_table_name)
  return _s;
}
inline const std::string& CSVCMsg_ClassInfo_class_t::_internal_data_table_name() const {
  return data_table_name_.Get();
}
inline void CSVCMsg_ClassInfo_class_t::_internal_set_data_table_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  data_table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CSVCMsg_ClassInfo_class_t::_internal_mutable_data_table_name() {
  _has_bits_[0] |= 0x00000001u;
  return data_table_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CSVCMsg_ClassInfo_class_t::release_data_table_name() {
  // @@protoc_insertion_point(field_release:CSVCMsg_ClassInfo.class_t.data_table_name)
  if (!_internal_has_data_table_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return data_table_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CSVCMsg_ClassInfo_class_t::set_allocated_data_table_name(std::string* data_table_name) {
  if (data_table_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_table_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data_table_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CSVCMsg_ClassInfo.class_t.data_table_name)
}

// optional string class_name = 3;
inline bool CSVCMsg_ClassInfo_class_t::_internal_has_class_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSVCMsg_ClassInfo_class_t::has_class_name() const {
  return _internal_has_class_name();
}
inline void CSVCMsg_ClassInfo_class_t::clear_class_name() {
  class_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CSVCMsg_ClassInfo_class_t::class_name() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_ClassInfo.class_t.class_name)
  return _internal_class_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSVCMsg_ClassInfo_class_t::set_class_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 class_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CSVCMsg_ClassInfo.class_t.class_name)
}
inline std::string* CSVCMsg_ClassInfo_class_t::mutable_class_name() {
  std::string* _s = _internal_mutable_class_name();
  // @@protoc_insertion_point(field_mutable:CSVCMsg_ClassInfo.class_t.class_name)
  return _s;
}
inline const std::string& CSVCMsg_ClassInfo_class_t::_internal_class_name() const {
  return class_name_.Get();
}
inline void CSVCMsg_ClassInfo_class_t::_internal_set_class_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  class_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CSVCMsg_ClassInfo_class_t::_internal_mutable_class_name() {
  _has_bits_[0] |= 0x00000002u;
  return class_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CSVCMsg_ClassInfo_class_t::release_class_name() {
  // @@protoc_insertion_point(field_release:CSVCMsg_ClassInfo.class_t.class_name)
  if (!_internal_has_class_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return class_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CSVCMsg_ClassInfo_class_t::set_allocated_class_name(std::string* class_name) {
  if (class_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  class_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), class_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CSVCMsg_ClassInfo.class_t.class_name)
}

// -------------------------------------------------------------------

// CSVCMsg_ClassInfo

// optional bool create_on_client = 1;
inline bool CSVCMsg_ClassInfo::_internal_has_create_on_client() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSVCMsg_ClassInfo::has_create_on_client() const {
  return _internal_has_create_on_client();
}
inline void CSVCMsg_ClassInfo::clear_create_on_client() {
  create_on_client_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool CSVCMsg_ClassInfo::_internal_create_on_client() const {
  return create_on_client_;
}
inline bool CSVCMsg_ClassInfo::create_on_client() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_ClassInfo.create_on_client)
  return _internal_create_on_client();
}
inline void CSVCMsg_ClassInfo::_internal_set_create_on_client(bool value) {
  _has_bits_[0] |= 0x00000001u;
  create_on_client_ = value;
}
inline void CSVCMsg_ClassInfo::set_create_on_client(bool value) {
  _internal_set_create_on_client(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_ClassInfo.create_on_client)
}

// repeated .CSVCMsg_ClassInfo.class_t classes = 2;
inline int CSVCMsg_ClassInfo::_internal_classes_size() const {
  return classes_.size();
}
inline int CSVCMsg_ClassInfo::classes_size() const {
  return _internal_classes_size();
}
inline void CSVCMsg_ClassInfo::clear_classes() {
  classes_.Clear();
}
inline ::CSVCMsg_ClassInfo_class_t* CSVCMsg_ClassInfo::mutable_classes(int index) {
  // @@protoc_insertion_point(field_mutable:CSVCMsg_ClassInfo.classes)
  return classes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSVCMsg_ClassInfo_class_t >*
CSVCMsg_ClassInfo::mutable_classes() {
  // @@protoc_insertion_point(field_mutable_list:CSVCMsg_ClassInfo.classes)
  return &classes_;
}
inline const ::CSVCMsg_ClassInfo_class_t& CSVCMsg_ClassInfo::_internal_classes(int index) const {
  return classes_.Get(index);
}
inline const ::CSVCMsg_ClassInfo_class_t& CSVCMsg_ClassInfo::classes(int index) const {
  // @@protoc_insertion_point(field_get:CSVCMsg_ClassInfo.classes)
  return _internal_classes(index);
}
inline ::CSVCMsg_ClassInfo_class_t* CSVCMsg_ClassInfo::_internal_add_classes() {
  return classes_.Add();
}
inline ::CSVCMsg_ClassInfo_class_t* CSVCMsg_ClassInfo::add_classes() {
  ::CSVCMsg_ClassInfo_class_t* _add = _internal_add_classes();
  // @@protoc_insertion_point(field_add:CSVCMsg_ClassInfo.classes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSVCMsg_ClassInfo_class_t >&
CSVCMsg_ClassInfo::classes() const {
  // @@protoc_insertion_point(field_list:CSVCMsg_ClassInfo.classes)
  return classes_;
}

// -------------------------------------------------------------------

// CSVCMsg_SendTable_sendprop_t

// optional int32 type = 1;
inline bool CSVCMsg_SendTable_sendprop_t::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CSVCMsg_SendTable_sendprop_t::has_type() const {
  return _internal_has_type();
}
inline void CSVCMsg_SendTable_sendprop_t::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_SendTable_sendprop_t::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_SendTable_sendprop_t::type() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_SendTable.sendprop_t.type)
  return _internal_type();
}
inline void CSVCMsg_SendTable_sendprop_t::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  type_ = value;
}
inline void CSVCMsg_SendTable_sendprop_t::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_SendTable.sendprop_t.type)
}

// optional string var_name = 2;
inline bool CSVCMsg_SendTable_sendprop_t::_internal_has_var_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSVCMsg_SendTable_sendprop_t::has_var_name() const {
  return _internal_has_var_name();
}
inline void CSVCMsg_SendTable_sendprop_t::clear_var_name() {
  var_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CSVCMsg_SendTable_sendprop_t::var_name() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_SendTable.sendprop_t.var_name)
  return _internal_var_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSVCMsg_SendTable_sendprop_t::set_var_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 var_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CSVCMsg_SendTable.sendprop_t.var_name)
}
inline std::string* CSVCMsg_SendTable_sendprop_t::mutable_var_name() {
  std::string* _s = _internal_mutable_var_name();
  // @@protoc_insertion_point(field_mutable:CSVCMsg_SendTable.sendprop_t.var_name)
  return _s;
}
inline const std::string& CSVCMsg_SendTable_sendprop_t::_internal_var_name() const {
  return var_name_.Get();
}
inline void CSVCMsg_SendTable_sendprop_t::_internal_set_var_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  var_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CSVCMsg_SendTable_sendprop_t::_internal_mutable_var_name() {
  _has_bits_[0] |= 0x00000001u;
  return var_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CSVCMsg_SendTable_sendprop_t::release_var_name() {
  // @@protoc_insertion_point(field_release:CSVCMsg_SendTable.sendprop_t.var_name)
  if (!_internal_has_var_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return var_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CSVCMsg_SendTable_sendprop_t::set_allocated_var_name(std::string* var_name) {
  if (var_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  var_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), var_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CSVCMsg_SendTable.sendprop_t.var_name)
}

// optional int32 flags = 3;
inline bool CSVCMsg_SendTable_sendprop_t::_internal_has_flags() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CSVCMsg_SendTable_sendprop_t::has_flags() const {
  return _internal_has_flags();
}
inline void CSVCMsg_SendTable_sendprop_t::clear_flags() {
  flags_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_SendTable_sendprop_t::_internal_flags() const {
  return flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_SendTable_sendprop_t::flags() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_SendTable.sendprop_t.flags)
  return _internal_flags();
}
inline void CSVCMsg_SendTable_sendprop_t::_internal_set_flags(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  flags_ = value;
}
inline void CSVCMsg_SendTable_sendprop_t::set_flags(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_SendTable.sendprop_t.flags)
}

// optional int32 priority = 4;
inline bool CSVCMsg_SendTable_sendprop_t::_internal_has_priority() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CSVCMsg_SendTable_sendprop_t::has_priority() const {
  return _internal_has_priority();
}
inline void CSVCMsg_SendTable_sendprop_t::clear_priority() {
  priority_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_SendTable_sendprop_t::_internal_priority() const {
  return priority_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_SendTable_sendprop_t::priority() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_SendTable.sendprop_t.priority)
  return _internal_priority();
}
inline void CSVCMsg_SendTable_sendprop_t::_internal_set_priority(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  priority_ = value;
}
inline void CSVCMsg_SendTable_sendprop_t::set_priority(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_priority(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_SendTable.sendprop_t.priority)
}

// optional string dt_name = 5;
inline bool CSVCMsg_SendTable_sendprop_t::_internal_has_dt_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSVCMsg_SendTable_sendprop_t::has_dt_name() const {
  return _internal_has_dt_name();
}
inline void CSVCMsg_SendTable_sendprop_t::clear_dt_name() {
  dt_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CSVCMsg_SendTable_sendprop_t::dt_name() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_SendTable.sendprop_t.dt_name)
  return _internal_dt_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSVCMsg_SendTable_sendprop_t::set_dt_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 dt_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CSVCMsg_SendTable.sendprop_t.dt_name)
}
inline std::string* CSVCMsg_SendTable_sendprop_t::mutable_dt_name() {
  std::string* _s = _internal_mutable_dt_name();
  // @@protoc_insertion_point(field_mutable:CSVCMsg_SendTable.sendprop_t.dt_name)
  return _s;
}
inline const std::string& CSVCMsg_SendTable_sendprop_t::_internal_dt_name() const {
  return dt_name_.Get();
}
inline void CSVCMsg_SendTable_sendprop_t::_internal_set_dt_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  dt_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CSVCMsg_SendTable_sendprop_t::_internal_mutable_dt_name() {
  _has_bits_[0] |= 0x00000002u;
  return dt_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CSVCMsg_SendTable_sendprop_t::release_dt_name() {
  // @@protoc_insertion_point(field_release:CSVCMsg_SendTable.sendprop_t.dt_name)
  if (!_internal_has_dt_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return dt_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CSVCMsg_SendTable_sendprop_t::set_allocated_dt_name(std::string* dt_name) {
  if (dt_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  dt_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dt_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CSVCMsg_SendTable.sendprop_t.dt_name)
}

// optional int32 num_elements = 6;
inline bool CSVCMsg_SendTable_sendprop_t::_internal_has_num_elements() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CSVCMsg_SendTable_sendprop_t::has_num_elements() const {
  return _internal_has_num_elements();
}
inline void CSVCMsg_SendTable_sendprop_t::clear_num_elements() {
  num_elements_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_SendTable_sendprop_t::_internal_num_elements() const {
  return num_elements_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_SendTable_sendprop_t::num_elements() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_SendTable.sendprop_t.num_elements)
  return _internal_num_elements();
}
inline void CSVCMsg_SendTable_sendprop_t::_internal_set_num_elements(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  num_elements_ = value;
}
inline void CSVCMsg_SendTable_sendprop_t::set_num_elements(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num_elements(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_SendTable.sendprop_t.num_elements)
}

// optional float low_value = 7;
inline bool CSVCMsg_SendTable_sendprop_t::_internal_has_low_value() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CSVCMsg_SendTable_sendprop_t::has_low_value() const {
  return _internal_has_low_value();
}
inline void CSVCMsg_SendTable_sendprop_t::clear_low_value() {
  low_value_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float CSVCMsg_SendTable_sendprop_t::_internal_low_value() const {
  return low_value_;
}
inline float CSVCMsg_SendTable_sendprop_t::low_value() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_SendTable.sendprop_t.low_value)
  return _internal_low_value();
}
inline void CSVCMsg_SendTable_sendprop_t::_internal_set_low_value(float value) {
  _has_bits_[0] |= 0x00000040u;
  low_value_ = value;
}
inline void CSVCMsg_SendTable_sendprop_t::set_low_value(float value) {
  _internal_set_low_value(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_SendTable.sendprop_t.low_value)
}

// optional float high_value = 8;
inline bool CSVCMsg_SendTable_sendprop_t::_internal_has_high_value() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CSVCMsg_SendTable_sendprop_t::has_high_value() const {
  return _internal_has_high_value();
}
inline void CSVCMsg_SendTable_sendprop_t::clear_high_value() {
  high_value_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline float CSVCMsg_SendTable_sendprop_t::_internal_high_value() const {
  return high_value_;
}
inline float CSVCMsg_SendTable_sendprop_t::high_value() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_SendTable.sendprop_t.high_value)
  return _internal_high_value();
}
inline void CSVCMsg_SendTable_sendprop_t::_internal_set_high_value(float value) {
  _has_bits_[0] |= 0x00000080u;
  high_value_ = value;
}
inline void CSVCMsg_SendTable_sendprop_t::set_high_value(float value) {
  _internal_set_high_value(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_SendTable.sendprop_t.high_value)
}

// optional int32 num_bits = 9;
inline bool CSVCMsg_SendTable_sendprop_t::_internal_has_num_bits() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CSVCMsg_SendTable_sendprop_t::has_num_bits() const {
  return _internal_has_num_bits();
}
inline void CSVCMsg_SendTable_sendprop_t::clear_num_bits() {
  num_bits_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_SendTable_sendprop_t::_internal_num_bits() const {
  return num_bits_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_SendTable_sendprop_t::num_bits() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_SendTable.sendprop_t.num_bits)
  return _internal_num_bits();
}
inline void CSVCMsg_SendTable_sendprop_t::_internal_set_num_bits(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  num_bits_ = value;
}
inline void CSVCMsg_SendTable_sendprop_t::set_num_bits(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num_bits(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_SendTable.sendprop_t.num_bits)
}

// -------------------------------------------------------------------

// CSVCMsg_SendTable

// optional bool is_end = 1;
inline bool CSVCMsg_SendTable::_internal_has_is_end() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSVCMsg_SendTable::has_is_end() const {
  return _internal_has_is_end();
}
inline void CSVCMsg_SendTable::clear_is_end() {
  is_end_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CSVCMsg_SendTable::_internal_is_end() const {
  return is_end_;
}
inline bool CSVCMsg_SendTable::is_end() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_SendTable.is_end)
  return _internal_is_end();
}
inline void CSVCMsg_SendTable::_internal_set_is_end(bool value) {
  _has_bits_[0] |= 0x00000002u;
  is_end_ = value;
}
inline void CSVCMsg_SendTable::set_is_end(bool value) {
  _internal_set_is_end(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_SendTable.is_end)
}

// optional string net_table_name = 2;
inline bool CSVCMsg_SendTable::_internal_has_net_table_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSVCMsg_SendTable::has_net_table_name() const {
  return _internal_has_net_table_name();
}
inline void CSVCMsg_SendTable::clear_net_table_name() {
  net_table_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CSVCMsg_SendTable::net_table_name() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_SendTable.net_table_name)
  return _internal_net_table_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSVCMsg_SendTable::set_net_table_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 net_table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CSVCMsg_SendTable.net_table_name)
}
inline std::string* CSVCMsg_SendTable::mutable_net_table_name() {
  std::string* _s = _internal_mutable_net_table_name();
  // @@protoc_insertion_point(field_mutable:CSVCMsg_SendTable.net_table_name)
  return _s;
}
inline const std::string& CSVCMsg_SendTable::_internal_net_table_name() const {
  return net_table_name_.Get();
}
inline void CSVCMsg_SendTable::_internal_set_net_table_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  net_table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CSVCMsg_SendTable::_internal_mutable_net_table_name() {
  _has_bits_[0] |= 0x00000001u;
  return net_table_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CSVCMsg_SendTable::release_net_table_name() {
  // @@protoc_insertion_point(field_release:CSVCMsg_SendTable.net_table_name)
  if (!_internal_has_net_table_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return net_table_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CSVCMsg_SendTable::set_allocated_net_table_name(std::string* net_table_name) {
  if (net_table_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  net_table_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), net_table_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CSVCMsg_SendTable.net_table_name)
}

// optional bool needs_decoder = 3;
inline bool CSVCMsg_SendTable::_internal_has_needs_decoder() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CSVCMsg_SendTable::has_needs_decoder() const {
  return _internal_has_needs_decoder();
}
inline void CSVCMsg_SendTable::clear_needs_decoder() {
  needs_decoder_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CSVCMsg_SendTable::_internal_needs_decoder() const {
  return needs_decoder_;
}
inline bool CSVCMsg_SendTable::needs_decoder() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_SendTable.needs_decoder)
  return _internal_needs_decoder();
}
inline void CSVCMsg_SendTable::_internal_set_needs_decoder(bool value) {
  _has_bits_[0] |= 0x00000004u;
  needs_decoder_ = value;
}
inline void CSVCMsg_SendTable::set_needs_decoder(bool value) {
  _internal_set_needs_decoder(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_SendTable.needs_decoder)
}

// repeated .CSVCMsg_SendTable.sendprop_t props = 4;
inline int CSVCMsg_SendTable::_internal_props_size() const {
  return props_.size();
}
inline int CSVCMsg_SendTable::props_size() const {
  return _internal_props_size();
}
inline void CSVCMsg_SendTable::clear_props() {
  props_.Clear();
}
inline ::CSVCMsg_SendTable_sendprop_t* CSVCMsg_SendTable::mutable_props(int index) {
  // @@protoc_insertion_point(field_mutable:CSVCMsg_SendTable.props)
  return props_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSVCMsg_SendTable_sendprop_t >*
CSVCMsg_SendTable::mutable_props() {
  // @@protoc_insertion_point(field_mutable_list:CSVCMsg_SendTable.props)
  return &props_;
}
inline const ::CSVCMsg_SendTable_sendprop_t& CSVCMsg_SendTable::_internal_props(int index) const {
  return props_.Get(index);
}
inline const ::CSVCMsg_SendTable_sendprop_t& CSVCMsg_SendTable::props(int index) const {
  // @@protoc_insertion_point(field_get:CSVCMsg_SendTable.props)
  return _internal_props(index);
}
inline ::CSVCMsg_SendTable_sendprop_t* CSVCMsg_SendTable::_internal_add_props() {
  return props_.Add();
}
inline ::CSVCMsg_SendTable_sendprop_t* CSVCMsg_SendTable::add_props() {
  ::CSVCMsg_SendTable_sendprop_t* _add = _internal_add_props();
  // @@protoc_insertion_point(field_add:CSVCMsg_SendTable.props)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSVCMsg_SendTable_sendprop_t >&
CSVCMsg_SendTable::props() const {
  // @@protoc_insertion_point(field_list:CSVCMsg_SendTable.props)
  return props_;
}

// -------------------------------------------------------------------

// CSVCMsg_Print

// optional string text = 1;
inline bool CSVCMsg_Print::_internal_has_text() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSVCMsg_Print::has_text() const {
  return _internal_has_text();
}
inline void CSVCMsg_Print::clear_text() {
  text_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CSVCMsg_Print::text() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_Print.text)
  return _internal_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSVCMsg_Print::set_text(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CSVCMsg_Print.text)
}
inline std::string* CSVCMsg_Print::mutable_text() {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:CSVCMsg_Print.text)
  return _s;
}
inline const std::string& CSVCMsg_Print::_internal_text() const {
  return text_.Get();
}
inline void CSVCMsg_Print::_internal_set_text(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CSVCMsg_Print::_internal_mutable_text() {
  _has_bits_[0] |= 0x00000001u;
  return text_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CSVCMsg_Print::release_text() {
  // @@protoc_insertion_point(field_release:CSVCMsg_Print.text)
  if (!_internal_has_text()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return text_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CSVCMsg_Print::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CSVCMsg_Print.text)
}

// -------------------------------------------------------------------

// CSVCMsg_SetPause

// optional bool paused = 1;
inline bool CSVCMsg_SetPause::_internal_has_paused() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSVCMsg_SetPause::has_paused() const {
  return _internal_has_paused();
}
inline void CSVCMsg_SetPause::clear_paused() {
  paused_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool CSVCMsg_SetPause::_internal_paused() const {
  return paused_;
}
inline bool CSVCMsg_SetPause::paused() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_SetPause.paused)
  return _internal_paused();
}
inline void CSVCMsg_SetPause::_internal_set_paused(bool value) {
  _has_bits_[0] |= 0x00000001u;
  paused_ = value;
}
inline void CSVCMsg_SetPause::set_paused(bool value) {
  _internal_set_paused(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_SetPause.paused)
}

// -------------------------------------------------------------------

// CSVCMsg_SetView

// optional int32 entity_index = 1;
inline bool CSVCMsg_SetView::_internal_has_entity_index() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSVCMsg_SetView::has_entity_index() const {
  return _internal_has_entity_index();
}
inline void CSVCMsg_SetView::clear_entity_index() {
  entity_index_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_SetView::_internal_entity_index() const {
  return entity_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_SetView::entity_index() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_SetView.entity_index)
  return _internal_entity_index();
}
inline void CSVCMsg_SetView::_internal_set_entity_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  entity_index_ = value;
}
inline void CSVCMsg_SetView::set_entity_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_entity_index(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_SetView.entity_index)
}

// -------------------------------------------------------------------

// CSVCMsg_CreateStringTable

// optional string name = 1;
inline bool CSVCMsg_CreateStringTable::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSVCMsg_CreateStringTable::has_name() const {
  return _internal_has_name();
}
inline void CSVCMsg_CreateStringTable::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CSVCMsg_CreateStringTable::name() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_CreateStringTable.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSVCMsg_CreateStringTable::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CSVCMsg_CreateStringTable.name)
}
inline std::string* CSVCMsg_CreateStringTable::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:CSVCMsg_CreateStringTable.name)
  return _s;
}
inline const std::string& CSVCMsg_CreateStringTable::_internal_name() const {
  return name_.Get();
}
inline void CSVCMsg_CreateStringTable::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CSVCMsg_CreateStringTable::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CSVCMsg_CreateStringTable::release_name() {
  // @@protoc_insertion_point(field_release:CSVCMsg_CreateStringTable.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CSVCMsg_CreateStringTable::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CSVCMsg_CreateStringTable.name)
}

// optional int32 max_entries = 2;
inline bool CSVCMsg_CreateStringTable::_internal_has_max_entries() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CSVCMsg_CreateStringTable::has_max_entries() const {
  return _internal_has_max_entries();
}
inline void CSVCMsg_CreateStringTable::clear_max_entries() {
  max_entries_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_CreateStringTable::_internal_max_entries() const {
  return max_entries_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_CreateStringTable::max_entries() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_CreateStringTable.max_entries)
  return _internal_max_entries();
}
inline void CSVCMsg_CreateStringTable::_internal_set_max_entries(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  max_entries_ = value;
}
inline void CSVCMsg_CreateStringTable::set_max_entries(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_entries(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_CreateStringTable.max_entries)
}

// optional int32 num_entries = 3;
inline bool CSVCMsg_CreateStringTable::_internal_has_num_entries() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CSVCMsg_CreateStringTable::has_num_entries() const {
  return _internal_has_num_entries();
}
inline void CSVCMsg_CreateStringTable::clear_num_entries() {
  num_entries_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_CreateStringTable::_internal_num_entries() const {
  return num_entries_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_CreateStringTable::num_entries() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_CreateStringTable.num_entries)
  return _internal_num_entries();
}
inline void CSVCMsg_CreateStringTable::_internal_set_num_entries(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  num_entries_ = value;
}
inline void CSVCMsg_CreateStringTable::set_num_entries(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num_entries(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_CreateStringTable.num_entries)
}

// optional bool user_data_fixed_size = 4;
inline bool CSVCMsg_CreateStringTable::_internal_has_user_data_fixed_size() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CSVCMsg_CreateStringTable::has_user_data_fixed_size() const {
  return _internal_has_user_data_fixed_size();
}
inline void CSVCMsg_CreateStringTable::clear_user_data_fixed_size() {
  user_data_fixed_size_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CSVCMsg_CreateStringTable::_internal_user_data_fixed_size() const {
  return user_data_fixed_size_;
}
inline bool CSVCMsg_CreateStringTable::user_data_fixed_size() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_CreateStringTable.user_data_fixed_size)
  return _internal_user_data_fixed_size();
}
inline void CSVCMsg_CreateStringTable::_internal_set_user_data_fixed_size(bool value) {
  _has_bits_[0] |= 0x00000010u;
  user_data_fixed_size_ = value;
}
inline void CSVCMsg_CreateStringTable::set_user_data_fixed_size(bool value) {
  _internal_set_user_data_fixed_size(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_CreateStringTable.user_data_fixed_size)
}

// optional int32 user_data_size = 5;
inline bool CSVCMsg_CreateStringTable::_internal_has_user_data_size() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CSVCMsg_CreateStringTable::has_user_data_size() const {
  return _internal_has_user_data_size();
}
inline void CSVCMsg_CreateStringTable::clear_user_data_size() {
  user_data_size_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_CreateStringTable::_internal_user_data_size() const {
  return user_data_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_CreateStringTable::user_data_size() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_CreateStringTable.user_data_size)
  return _internal_user_data_size();
}
inline void CSVCMsg_CreateStringTable::_internal_set_user_data_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  user_data_size_ = value;
}
inline void CSVCMsg_CreateStringTable::set_user_data_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_user_data_size(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_CreateStringTable.user_data_size)
}

// optional int32 user_data_size_bits = 6;
inline bool CSVCMsg_CreateStringTable::_internal_has_user_data_size_bits() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CSVCMsg_CreateStringTable::has_user_data_size_bits() const {
  return _internal_has_user_data_size_bits();
}
inline void CSVCMsg_CreateStringTable::clear_user_data_size_bits() {
  user_data_size_bits_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_CreateStringTable::_internal_user_data_size_bits() const {
  return user_data_size_bits_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_CreateStringTable::user_data_size_bits() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_CreateStringTable.user_data_size_bits)
  return _internal_user_data_size_bits();
}
inline void CSVCMsg_CreateStringTable::_internal_set_user_data_size_bits(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  user_data_size_bits_ = value;
}
inline void CSVCMsg_CreateStringTable::set_user_data_size_bits(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_user_data_size_bits(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_CreateStringTable.user_data_size_bits)
}

// optional int32 flags = 7;
inline bool CSVCMsg_CreateStringTable::_internal_has_flags() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CSVCMsg_CreateStringTable::has_flags() const {
  return _internal_has_flags();
}
inline void CSVCMsg_CreateStringTable::clear_flags() {
  flags_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_CreateStringTable::_internal_flags() const {
  return flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_CreateStringTable::flags() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_CreateStringTable.flags)
  return _internal_flags();
}
inline void CSVCMsg_CreateStringTable::_internal_set_flags(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  flags_ = value;
}
inline void CSVCMsg_CreateStringTable::set_flags(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_CreateStringTable.flags)
}

// optional bytes string_data = 8;
inline bool CSVCMsg_CreateStringTable::_internal_has_string_data() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSVCMsg_CreateStringTable::has_string_data() const {
  return _internal_has_string_data();
}
inline void CSVCMsg_CreateStringTable::clear_string_data() {
  string_data_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CSVCMsg_CreateStringTable::string_data() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_CreateStringTable.string_data)
  return _internal_string_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSVCMsg_CreateStringTable::set_string_data(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 string_data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CSVCMsg_CreateStringTable.string_data)
}
inline std::string* CSVCMsg_CreateStringTable::mutable_string_data() {
  std::string* _s = _internal_mutable_string_data();
  // @@protoc_insertion_point(field_mutable:CSVCMsg_CreateStringTable.string_data)
  return _s;
}
inline const std::string& CSVCMsg_CreateStringTable::_internal_string_data() const {
  return string_data_.Get();
}
inline void CSVCMsg_CreateStringTable::_internal_set_string_data(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  string_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CSVCMsg_CreateStringTable::_internal_mutable_string_data() {
  _has_bits_[0] |= 0x00000002u;
  return string_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CSVCMsg_CreateStringTable::release_string_data() {
  // @@protoc_insertion_point(field_release:CSVCMsg_CreateStringTable.string_data)
  if (!_internal_has_string_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return string_data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CSVCMsg_CreateStringTable::set_allocated_string_data(std::string* string_data) {
  if (string_data != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  string_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), string_data,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CSVCMsg_CreateStringTable.string_data)
}

// -------------------------------------------------------------------

// CSVCMsg_UpdateStringTable

// optional int32 table_id = 1;
inline bool CSVCMsg_UpdateStringTable::_internal_has_table_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSVCMsg_UpdateStringTable::has_table_id() const {
  return _internal_has_table_id();
}
inline void CSVCMsg_UpdateStringTable::clear_table_id() {
  table_id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_UpdateStringTable::_internal_table_id() const {
  return table_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_UpdateStringTable::table_id() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_UpdateStringTable.table_id)
  return _internal_table_id();
}
inline void CSVCMsg_UpdateStringTable::_internal_set_table_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  table_id_ = value;
}
inline void CSVCMsg_UpdateStringTable::set_table_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_table_id(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_UpdateStringTable.table_id)
}

// optional int32 num_changed_entries = 2;
inline bool CSVCMsg_UpdateStringTable::_internal_has_num_changed_entries() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CSVCMsg_UpdateStringTable::has_num_changed_entries() const {
  return _internal_has_num_changed_entries();
}
inline void CSVCMsg_UpdateStringTable::clear_num_changed_entries() {
  num_changed_entries_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_UpdateStringTable::_internal_num_changed_entries() const {
  return num_changed_entries_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_UpdateStringTable::num_changed_entries() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_UpdateStringTable.num_changed_entries)
  return _internal_num_changed_entries();
}
inline void CSVCMsg_UpdateStringTable::_internal_set_num_changed_entries(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  num_changed_entries_ = value;
}
inline void CSVCMsg_UpdateStringTable::set_num_changed_entries(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num_changed_entries(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_UpdateStringTable.num_changed_entries)
}

// optional bytes string_data = 3;
inline bool CSVCMsg_UpdateStringTable::_internal_has_string_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSVCMsg_UpdateStringTable::has_string_data() const {
  return _internal_has_string_data();
}
inline void CSVCMsg_UpdateStringTable::clear_string_data() {
  string_data_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CSVCMsg_UpdateStringTable::string_data() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_UpdateStringTable.string_data)
  return _internal_string_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSVCMsg_UpdateStringTable::set_string_data(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 string_data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CSVCMsg_UpdateStringTable.string_data)
}
inline std::string* CSVCMsg_UpdateStringTable::mutable_string_data() {
  std::string* _s = _internal_mutable_string_data();
  // @@protoc_insertion_point(field_mutable:CSVCMsg_UpdateStringTable.string_data)
  return _s;
}
inline const std::string& CSVCMsg_UpdateStringTable::_internal_string_data() const {
  return string_data_.Get();
}
inline void CSVCMsg_UpdateStringTable::_internal_set_string_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  string_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CSVCMsg_UpdateStringTable::_internal_mutable_string_data() {
  _has_bits_[0] |= 0x00000001u;
  return string_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CSVCMsg_UpdateStringTable::release_string_data() {
  // @@protoc_insertion_point(field_release:CSVCMsg_UpdateStringTable.string_data)
  if (!_internal_has_string_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return string_data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CSVCMsg_UpdateStringTable::set_allocated_string_data(std::string* string_data) {
  if (string_data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  string_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), string_data,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CSVCMsg_UpdateStringTable.string_data)
}

// -------------------------------------------------------------------

// CSVCMsg_VoiceInit

// optional int32 quality = 1;
inline bool CSVCMsg_VoiceInit::_internal_has_quality() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSVCMsg_VoiceInit::has_quality() const {
  return _internal_has_quality();
}
inline void CSVCMsg_VoiceInit::clear_quality() {
  quality_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_VoiceInit::_internal_quality() const {
  return quality_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_VoiceInit::quality() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_VoiceInit.quality)
  return _internal_quality();
}
inline void CSVCMsg_VoiceInit::_internal_set_quality(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  quality_ = value;
}
inline void CSVCMsg_VoiceInit::set_quality(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_quality(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_VoiceInit.quality)
}

// optional string codec = 2;
inline bool CSVCMsg_VoiceInit::_internal_has_codec() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSVCMsg_VoiceInit::has_codec() const {
  return _internal_has_codec();
}
inline void CSVCMsg_VoiceInit::clear_codec() {
  codec_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CSVCMsg_VoiceInit::codec() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_VoiceInit.codec)
  return _internal_codec();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSVCMsg_VoiceInit::set_codec(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 codec_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CSVCMsg_VoiceInit.codec)
}
inline std::string* CSVCMsg_VoiceInit::mutable_codec() {
  std::string* _s = _internal_mutable_codec();
  // @@protoc_insertion_point(field_mutable:CSVCMsg_VoiceInit.codec)
  return _s;
}
inline const std::string& CSVCMsg_VoiceInit::_internal_codec() const {
  return codec_.Get();
}
inline void CSVCMsg_VoiceInit::_internal_set_codec(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  codec_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CSVCMsg_VoiceInit::_internal_mutable_codec() {
  _has_bits_[0] |= 0x00000001u;
  return codec_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CSVCMsg_VoiceInit::release_codec() {
  // @@protoc_insertion_point(field_release:CSVCMsg_VoiceInit.codec)
  if (!_internal_has_codec()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return codec_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CSVCMsg_VoiceInit::set_allocated_codec(std::string* codec) {
  if (codec != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  codec_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), codec,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CSVCMsg_VoiceInit.codec)
}

// optional int32 version = 3 [default = 0];
inline bool CSVCMsg_VoiceInit::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CSVCMsg_VoiceInit::has_version() const {
  return _internal_has_version();
}
inline void CSVCMsg_VoiceInit::clear_version() {
  version_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_VoiceInit::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_VoiceInit::version() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_VoiceInit.version)
  return _internal_version();
}
inline void CSVCMsg_VoiceInit::_internal_set_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  version_ = value;
}
inline void CSVCMsg_VoiceInit::set_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_VoiceInit.version)
}

// -------------------------------------------------------------------

// CSVCMsg_VoiceData

// optional int32 client = 1;
inline bool CSVCMsg_VoiceData::_internal_has_client() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSVCMsg_VoiceData::has_client() const {
  return _internal_has_client();
}
inline void CSVCMsg_VoiceData::clear_client() {
  client_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_VoiceData::_internal_client() const {
  return client_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_VoiceData::client() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_VoiceData.client)
  return _internal_client();
}
inline void CSVCMsg_VoiceData::_internal_set_client(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  client_ = value;
}
inline void CSVCMsg_VoiceData::set_client(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_client(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_VoiceData.client)
}

// optional bool proximity = 2;
inline bool CSVCMsg_VoiceData::_internal_has_proximity() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CSVCMsg_VoiceData::has_proximity() const {
  return _internal_has_proximity();
}
inline void CSVCMsg_VoiceData::clear_proximity() {
  proximity_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CSVCMsg_VoiceData::_internal_proximity() const {
  return proximity_;
}
inline bool CSVCMsg_VoiceData::proximity() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_VoiceData.proximity)
  return _internal_proximity();
}
inline void CSVCMsg_VoiceData::_internal_set_proximity(bool value) {
  _has_bits_[0] |= 0x00000010u;
  proximity_ = value;
}
inline void CSVCMsg_VoiceData::set_proximity(bool value) {
  _internal_set_proximity(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_VoiceData.proximity)
}

// optional fixed64 xuid = 3;
inline bool CSVCMsg_VoiceData::_internal_has_xuid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CSVCMsg_VoiceData::has_xuid() const {
  return _internal_has_xuid();
}
inline void CSVCMsg_VoiceData::clear_xuid() {
  xuid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CSVCMsg_VoiceData::_internal_xuid() const {
  return xuid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CSVCMsg_VoiceData::xuid() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_VoiceData.xuid)
  return _internal_xuid();
}
inline void CSVCMsg_VoiceData::_internal_set_xuid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  xuid_ = value;
}
inline void CSVCMsg_VoiceData::set_xuid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_xuid(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_VoiceData.xuid)
}

// optional int32 audible_mask = 4;
inline bool CSVCMsg_VoiceData::_internal_has_audible_mask() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CSVCMsg_VoiceData::has_audible_mask() const {
  return _internal_has_audible_mask();
}
inline void CSVCMsg_VoiceData::clear_audible_mask() {
  audible_mask_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_VoiceData::_internal_audible_mask() const {
  return audible_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_VoiceData::audible_mask() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_VoiceData.audible_mask)
  return _internal_audible_mask();
}
inline void CSVCMsg_VoiceData::_internal_set_audible_mask(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  audible_mask_ = value;
}
inline void CSVCMsg_VoiceData::set_audible_mask(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_audible_mask(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_VoiceData.audible_mask)
}

// optional bytes voice_data = 5;
inline bool CSVCMsg_VoiceData::_internal_has_voice_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSVCMsg_VoiceData::has_voice_data() const {
  return _internal_has_voice_data();
}
inline void CSVCMsg_VoiceData::clear_voice_data() {
  voice_data_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CSVCMsg_VoiceData::voice_data() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_VoiceData.voice_data)
  return _internal_voice_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSVCMsg_VoiceData::set_voice_data(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 voice_data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CSVCMsg_VoiceData.voice_data)
}
inline std::string* CSVCMsg_VoiceData::mutable_voice_data() {
  std::string* _s = _internal_mutable_voice_data();
  // @@protoc_insertion_point(field_mutable:CSVCMsg_VoiceData.voice_data)
  return _s;
}
inline const std::string& CSVCMsg_VoiceData::_internal_voice_data() const {
  return voice_data_.Get();
}
inline void CSVCMsg_VoiceData::_internal_set_voice_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  voice_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CSVCMsg_VoiceData::_internal_mutable_voice_data() {
  _has_bits_[0] |= 0x00000001u;
  return voice_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CSVCMsg_VoiceData::release_voice_data() {
  // @@protoc_insertion_point(field_release:CSVCMsg_VoiceData.voice_data)
  if (!_internal_has_voice_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return voice_data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CSVCMsg_VoiceData::set_allocated_voice_data(std::string* voice_data) {
  if (voice_data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  voice_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), voice_data,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CSVCMsg_VoiceData.voice_data)
}

// optional bool caster = 6;
inline bool CSVCMsg_VoiceData::_internal_has_caster() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CSVCMsg_VoiceData::has_caster() const {
  return _internal_has_caster();
}
inline void CSVCMsg_VoiceData::clear_caster() {
  caster_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool CSVCMsg_VoiceData::_internal_caster() const {
  return caster_;
}
inline bool CSVCMsg_VoiceData::caster() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_VoiceData.caster)
  return _internal_caster();
}
inline void CSVCMsg_VoiceData::_internal_set_caster(bool value) {
  _has_bits_[0] |= 0x00000020u;
  caster_ = value;
}
inline void CSVCMsg_VoiceData::set_caster(bool value) {
  _internal_set_caster(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_VoiceData.caster)
}

// optional .VoiceDataFormat_t format = 7 [default = VOICEDATA_FORMAT_ENGINE];
inline bool CSVCMsg_VoiceData::_internal_has_format() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CSVCMsg_VoiceData::has_format() const {
  return _internal_has_format();
}
inline void CSVCMsg_VoiceData::clear_format() {
  format_ = 1;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::VoiceDataFormat_t CSVCMsg_VoiceData::_internal_format() const {
  return static_cast< ::VoiceDataFormat_t >(format_);
}
inline ::VoiceDataFormat_t CSVCMsg_VoiceData::format() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_VoiceData.format)
  return _internal_format();
}
inline void CSVCMsg_VoiceData::_internal_set_format(::VoiceDataFormat_t value) {
  assert(::VoiceDataFormat_t_IsValid(value));
  _has_bits_[0] |= 0x00000200u;
  format_ = value;
}
inline void CSVCMsg_VoiceData::set_format(::VoiceDataFormat_t value) {
  _internal_set_format(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_VoiceData.format)
}

// optional int32 sequence_bytes = 8;
inline bool CSVCMsg_VoiceData::_internal_has_sequence_bytes() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CSVCMsg_VoiceData::has_sequence_bytes() const {
  return _internal_has_sequence_bytes();
}
inline void CSVCMsg_VoiceData::clear_sequence_bytes() {
  sequence_bytes_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_VoiceData::_internal_sequence_bytes() const {
  return sequence_bytes_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_VoiceData::sequence_bytes() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_VoiceData.sequence_bytes)
  return _internal_sequence_bytes();
}
inline void CSVCMsg_VoiceData::_internal_set_sequence_bytes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  sequence_bytes_ = value;
}
inline void CSVCMsg_VoiceData::set_sequence_bytes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sequence_bytes(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_VoiceData.sequence_bytes)
}

// optional uint32 section_number = 9;
inline bool CSVCMsg_VoiceData::_internal_has_section_number() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CSVCMsg_VoiceData::has_section_number() const {
  return _internal_has_section_number();
}
inline void CSVCMsg_VoiceData::clear_section_number() {
  section_number_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSVCMsg_VoiceData::_internal_section_number() const {
  return section_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSVCMsg_VoiceData::section_number() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_VoiceData.section_number)
  return _internal_section_number();
}
inline void CSVCMsg_VoiceData::_internal_set_section_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  section_number_ = value;
}
inline void CSVCMsg_VoiceData::set_section_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_section_number(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_VoiceData.section_number)
}

// optional uint32 uncompressed_sample_offset = 10;
inline bool CSVCMsg_VoiceData::_internal_has_uncompressed_sample_offset() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CSVCMsg_VoiceData::has_uncompressed_sample_offset() const {
  return _internal_has_uncompressed_sample_offset();
}
inline void CSVCMsg_VoiceData::clear_uncompressed_sample_offset() {
  uncompressed_sample_offset_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSVCMsg_VoiceData::_internal_uncompressed_sample_offset() const {
  return uncompressed_sample_offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSVCMsg_VoiceData::uncompressed_sample_offset() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_VoiceData.uncompressed_sample_offset)
  return _internal_uncompressed_sample_offset();
}
inline void CSVCMsg_VoiceData::_internal_set_uncompressed_sample_offset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  uncompressed_sample_offset_ = value;
}
inline void CSVCMsg_VoiceData::set_uncompressed_sample_offset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uncompressed_sample_offset(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_VoiceData.uncompressed_sample_offset)
}

// -------------------------------------------------------------------

// CSVCMsg_FixAngle

// optional bool relative = 1;
inline bool CSVCMsg_FixAngle::_internal_has_relative() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSVCMsg_FixAngle::has_relative() const {
  return _internal_has_relative();
}
inline void CSVCMsg_FixAngle::clear_relative() {
  relative_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CSVCMsg_FixAngle::_internal_relative() const {
  return relative_;
}
inline bool CSVCMsg_FixAngle::relative() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_FixAngle.relative)
  return _internal_relative();
}
inline void CSVCMsg_FixAngle::_internal_set_relative(bool value) {
  _has_bits_[0] |= 0x00000002u;
  relative_ = value;
}
inline void CSVCMsg_FixAngle::set_relative(bool value) {
  _internal_set_relative(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_FixAngle.relative)
}

// optional .CMsgQAngle angle = 2;
inline bool CSVCMsg_FixAngle::_internal_has_angle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || angle_ != nullptr);
  return value;
}
inline bool CSVCMsg_FixAngle::has_angle() const {
  return _internal_has_angle();
}
inline void CSVCMsg_FixAngle::clear_angle() {
  if (angle_ != nullptr) angle_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgQAngle& CSVCMsg_FixAngle::_internal_angle() const {
  const ::CMsgQAngle* p = angle_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgQAngle&>(
      ::_CMsgQAngle_default_instance_);
}
inline const ::CMsgQAngle& CSVCMsg_FixAngle::angle() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_FixAngle.angle)
  return _internal_angle();
}
inline void CSVCMsg_FixAngle::unsafe_arena_set_allocated_angle(
    ::CMsgQAngle* angle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(angle_);
  }
  angle_ = angle;
  if (angle) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CSVCMsg_FixAngle.angle)
}
inline ::CMsgQAngle* CSVCMsg_FixAngle::release_angle() {
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgQAngle* temp = angle_;
  angle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgQAngle* CSVCMsg_FixAngle::unsafe_arena_release_angle() {
  // @@protoc_insertion_point(field_release:CSVCMsg_FixAngle.angle)
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgQAngle* temp = angle_;
  angle_ = nullptr;
  return temp;
}
inline ::CMsgQAngle* CSVCMsg_FixAngle::_internal_mutable_angle() {
  _has_bits_[0] |= 0x00000001u;
  if (angle_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgQAngle>(GetArenaForAllocation());
    angle_ = p;
  }
  return angle_;
}
inline ::CMsgQAngle* CSVCMsg_FixAngle::mutable_angle() {
  ::CMsgQAngle* _msg = _internal_mutable_angle();
  // @@protoc_insertion_point(field_mutable:CSVCMsg_FixAngle.angle)
  return _msg;
}
inline void CSVCMsg_FixAngle::set_allocated_angle(::CMsgQAngle* angle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete angle_;
  }
  if (angle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgQAngle>::GetOwningArena(angle);
    if (message_arena != submessage_arena) {
      angle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, angle, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  angle_ = angle;
  // @@protoc_insertion_point(field_set_allocated:CSVCMsg_FixAngle.angle)
}

// -------------------------------------------------------------------

// CSVCMsg_CrosshairAngle

// optional .CMsgQAngle angle = 1;
inline bool CSVCMsg_CrosshairAngle::_internal_has_angle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || angle_ != nullptr);
  return value;
}
inline bool CSVCMsg_CrosshairAngle::has_angle() const {
  return _internal_has_angle();
}
inline void CSVCMsg_CrosshairAngle::clear_angle() {
  if (angle_ != nullptr) angle_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgQAngle& CSVCMsg_CrosshairAngle::_internal_angle() const {
  const ::CMsgQAngle* p = angle_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgQAngle&>(
      ::_CMsgQAngle_default_instance_);
}
inline const ::CMsgQAngle& CSVCMsg_CrosshairAngle::angle() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_CrosshairAngle.angle)
  return _internal_angle();
}
inline void CSVCMsg_CrosshairAngle::unsafe_arena_set_allocated_angle(
    ::CMsgQAngle* angle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(angle_);
  }
  angle_ = angle;
  if (angle) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CSVCMsg_CrosshairAngle.angle)
}
inline ::CMsgQAngle* CSVCMsg_CrosshairAngle::release_angle() {
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgQAngle* temp = angle_;
  angle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgQAngle* CSVCMsg_CrosshairAngle::unsafe_arena_release_angle() {
  // @@protoc_insertion_point(field_release:CSVCMsg_CrosshairAngle.angle)
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgQAngle* temp = angle_;
  angle_ = nullptr;
  return temp;
}
inline ::CMsgQAngle* CSVCMsg_CrosshairAngle::_internal_mutable_angle() {
  _has_bits_[0] |= 0x00000001u;
  if (angle_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgQAngle>(GetArenaForAllocation());
    angle_ = p;
  }
  return angle_;
}
inline ::CMsgQAngle* CSVCMsg_CrosshairAngle::mutable_angle() {
  ::CMsgQAngle* _msg = _internal_mutable_angle();
  // @@protoc_insertion_point(field_mutable:CSVCMsg_CrosshairAngle.angle)
  return _msg;
}
inline void CSVCMsg_CrosshairAngle::set_allocated_angle(::CMsgQAngle* angle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete angle_;
  }
  if (angle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgQAngle>::GetOwningArena(angle);
    if (message_arena != submessage_arena) {
      angle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, angle, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  angle_ = angle;
  // @@protoc_insertion_point(field_set_allocated:CSVCMsg_CrosshairAngle.angle)
}

// -------------------------------------------------------------------

// CSVCMsg_Prefetch

// optional int32 sound_index = 1;
inline bool CSVCMsg_Prefetch::_internal_has_sound_index() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSVCMsg_Prefetch::has_sound_index() const {
  return _internal_has_sound_index();
}
inline void CSVCMsg_Prefetch::clear_sound_index() {
  sound_index_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_Prefetch::_internal_sound_index() const {
  return sound_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_Prefetch::sound_index() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_Prefetch.sound_index)
  return _internal_sound_index();
}
inline void CSVCMsg_Prefetch::_internal_set_sound_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  sound_index_ = value;
}
inline void CSVCMsg_Prefetch::set_sound_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sound_index(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_Prefetch.sound_index)
}

// -------------------------------------------------------------------

// CSVCMsg_BSPDecal

// optional .CMsgVector pos = 1;
inline bool CSVCMsg_BSPDecal::_internal_has_pos() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || pos_ != nullptr);
  return value;
}
inline bool CSVCMsg_BSPDecal::has_pos() const {
  return _internal_has_pos();
}
inline void CSVCMsg_BSPDecal::clear_pos() {
  if (pos_ != nullptr) pos_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgVector& CSVCMsg_BSPDecal::_internal_pos() const {
  const ::CMsgVector* p = pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgVector&>(
      ::_CMsgVector_default_instance_);
}
inline const ::CMsgVector& CSVCMsg_BSPDecal::pos() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_BSPDecal.pos)
  return _internal_pos();
}
inline void CSVCMsg_BSPDecal::unsafe_arena_set_allocated_pos(
    ::CMsgVector* pos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pos_);
  }
  pos_ = pos;
  if (pos) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CSVCMsg_BSPDecal.pos)
}
inline ::CMsgVector* CSVCMsg_BSPDecal::release_pos() {
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgVector* temp = pos_;
  pos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgVector* CSVCMsg_BSPDecal::unsafe_arena_release_pos() {
  // @@protoc_insertion_point(field_release:CSVCMsg_BSPDecal.pos)
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgVector* temp = pos_;
  pos_ = nullptr;
  return temp;
}
inline ::CMsgVector* CSVCMsg_BSPDecal::_internal_mutable_pos() {
  _has_bits_[0] |= 0x00000001u;
  if (pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgVector>(GetArenaForAllocation());
    pos_ = p;
  }
  return pos_;
}
inline ::CMsgVector* CSVCMsg_BSPDecal::mutable_pos() {
  ::CMsgVector* _msg = _internal_mutable_pos();
  // @@protoc_insertion_point(field_mutable:CSVCMsg_BSPDecal.pos)
  return _msg;
}
inline void CSVCMsg_BSPDecal::set_allocated_pos(::CMsgVector* pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete pos_;
  }
  if (pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CMsgVector>::GetOwningArena(pos);
    if (message_arena != submessage_arena) {
      pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:CSVCMsg_BSPDecal.pos)
}

// optional int32 decal_texture_index = 2;
inline bool CSVCMsg_BSPDecal::_internal_has_decal_texture_index() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSVCMsg_BSPDecal::has_decal_texture_index() const {
  return _internal_has_decal_texture_index();
}
inline void CSVCMsg_BSPDecal::clear_decal_texture_index() {
  decal_texture_index_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_BSPDecal::_internal_decal_texture_index() const {
  return decal_texture_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_BSPDecal::decal_texture_index() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_BSPDecal.decal_texture_index)
  return _internal_decal_texture_index();
}
inline void CSVCMsg_BSPDecal::_internal_set_decal_texture_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  decal_texture_index_ = value;
}
inline void CSVCMsg_BSPDecal::set_decal_texture_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_decal_texture_index(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_BSPDecal.decal_texture_index)
}

// optional int32 entity_index = 3;
inline bool CSVCMsg_BSPDecal::_internal_has_entity_index() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CSVCMsg_BSPDecal::has_entity_index() const {
  return _internal_has_entity_index();
}
inline void CSVCMsg_BSPDecal::clear_entity_index() {
  entity_index_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_BSPDecal::_internal_entity_index() const {
  return entity_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_BSPDecal::entity_index() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_BSPDecal.entity_index)
  return _internal_entity_index();
}
inline void CSVCMsg_BSPDecal::_internal_set_entity_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  entity_index_ = value;
}
inline void CSVCMsg_BSPDecal::set_entity_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_entity_index(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_BSPDecal.entity_index)
}

// optional int32 model_index = 4;
inline bool CSVCMsg_BSPDecal::_internal_has_model_index() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CSVCMsg_BSPDecal::has_model_index() const {
  return _internal_has_model_index();
}
inline void CSVCMsg_BSPDecal::clear_model_index() {
  model_index_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_BSPDecal::_internal_model_index() const {
  return model_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_BSPDecal::model_index() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_BSPDecal.model_index)
  return _internal_model_index();
}
inline void CSVCMsg_BSPDecal::_internal_set_model_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  model_index_ = value;
}
inline void CSVCMsg_BSPDecal::set_model_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_model_index(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_BSPDecal.model_index)
}

// optional bool low_priority = 5;
inline bool CSVCMsg_BSPDecal::_internal_has_low_priority() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CSVCMsg_BSPDecal::has_low_priority() const {
  return _internal_has_low_priority();
}
inline void CSVCMsg_BSPDecal::clear_low_priority() {
  low_priority_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CSVCMsg_BSPDecal::_internal_low_priority() const {
  return low_priority_;
}
inline bool CSVCMsg_BSPDecal::low_priority() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_BSPDecal.low_priority)
  return _internal_low_priority();
}
inline void CSVCMsg_BSPDecal::_internal_set_low_priority(bool value) {
  _has_bits_[0] |= 0x00000010u;
  low_priority_ = value;
}
inline void CSVCMsg_BSPDecal::set_low_priority(bool value) {
  _internal_set_low_priority(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_BSPDecal.low_priority)
}

// -------------------------------------------------------------------

// CSVCMsg_SplitScreen

// optional .ESplitScreenMessageType type = 1;
inline bool CSVCMsg_SplitScreen::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSVCMsg_SplitScreen::has_type() const {
  return _internal_has_type();
}
inline void CSVCMsg_SplitScreen::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::ESplitScreenMessageType CSVCMsg_SplitScreen::_internal_type() const {
  return static_cast< ::ESplitScreenMessageType >(type_);
}
inline ::ESplitScreenMessageType CSVCMsg_SplitScreen::type() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_SplitScreen.type)
  return _internal_type();
}
inline void CSVCMsg_SplitScreen::_internal_set_type(::ESplitScreenMessageType value) {
  assert(::ESplitScreenMessageType_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  type_ = value;
}
inline void CSVCMsg_SplitScreen::set_type(::ESplitScreenMessageType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_SplitScreen.type)
}

// optional int32 slot = 2;
inline bool CSVCMsg_SplitScreen::_internal_has_slot() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSVCMsg_SplitScreen::has_slot() const {
  return _internal_has_slot();
}
inline void CSVCMsg_SplitScreen::clear_slot() {
  slot_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_SplitScreen::_internal_slot() const {
  return slot_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_SplitScreen::slot() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_SplitScreen.slot)
  return _internal_slot();
}
inline void CSVCMsg_SplitScreen::_internal_set_slot(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  slot_ = value;
}
inline void CSVCMsg_SplitScreen::set_slot(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_slot(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_SplitScreen.slot)
}

// optional int32 player_index = 3;
inline bool CSVCMsg_SplitScreen::_internal_has_player_index() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CSVCMsg_SplitScreen::has_player_index() const {
  return _internal_has_player_index();
}
inline void CSVCMsg_SplitScreen::clear_player_index() {
  player_index_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_SplitScreen::_internal_player_index() const {
  return player_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_SplitScreen::player_index() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_SplitScreen.player_index)
  return _internal_player_index();
}
inline void CSVCMsg_SplitScreen::_internal_set_player_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  player_index_ = value;
}
inline void CSVCMsg_SplitScreen::set_player_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_player_index(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_SplitScreen.player_index)
}

// -------------------------------------------------------------------

// CSVCMsg_GetCvarValue

// optional int32 cookie = 1;
inline bool CSVCMsg_GetCvarValue::_internal_has_cookie() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSVCMsg_GetCvarValue::has_cookie() const {
  return _internal_has_cookie();
}
inline void CSVCMsg_GetCvarValue::clear_cookie() {
  cookie_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_GetCvarValue::_internal_cookie() const {
  return cookie_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_GetCvarValue::cookie() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_GetCvarValue.cookie)
  return _internal_cookie();
}
inline void CSVCMsg_GetCvarValue::_internal_set_cookie(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  cookie_ = value;
}
inline void CSVCMsg_GetCvarValue::set_cookie(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cookie(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_GetCvarValue.cookie)
}

// optional string cvar_name = 2;
inline bool CSVCMsg_GetCvarValue::_internal_has_cvar_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSVCMsg_GetCvarValue::has_cvar_name() const {
  return _internal_has_cvar_name();
}
inline void CSVCMsg_GetCvarValue::clear_cvar_name() {
  cvar_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CSVCMsg_GetCvarValue::cvar_name() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_GetCvarValue.cvar_name)
  return _internal_cvar_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSVCMsg_GetCvarValue::set_cvar_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 cvar_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CSVCMsg_GetCvarValue.cvar_name)
}
inline std::string* CSVCMsg_GetCvarValue::mutable_cvar_name() {
  std::string* _s = _internal_mutable_cvar_name();
  // @@protoc_insertion_point(field_mutable:CSVCMsg_GetCvarValue.cvar_name)
  return _s;
}
inline const std::string& CSVCMsg_GetCvarValue::_internal_cvar_name() const {
  return cvar_name_.Get();
}
inline void CSVCMsg_GetCvarValue::_internal_set_cvar_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  cvar_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CSVCMsg_GetCvarValue::_internal_mutable_cvar_name() {
  _has_bits_[0] |= 0x00000001u;
  return cvar_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CSVCMsg_GetCvarValue::release_cvar_name() {
  // @@protoc_insertion_point(field_release:CSVCMsg_GetCvarValue.cvar_name)
  if (!_internal_has_cvar_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return cvar_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CSVCMsg_GetCvarValue::set_allocated_cvar_name(std::string* cvar_name) {
  if (cvar_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  cvar_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cvar_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CSVCMsg_GetCvarValue.cvar_name)
}

// -------------------------------------------------------------------

// CSVCMsg_Menu

// optional int32 dialog_type = 1;
inline bool CSVCMsg_Menu::_internal_has_dialog_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSVCMsg_Menu::has_dialog_type() const {
  return _internal_has_dialog_type();
}
inline void CSVCMsg_Menu::clear_dialog_type() {
  dialog_type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_Menu::_internal_dialog_type() const {
  return dialog_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_Menu::dialog_type() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_Menu.dialog_type)
  return _internal_dialog_type();
}
inline void CSVCMsg_Menu::_internal_set_dialog_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  dialog_type_ = value;
}
inline void CSVCMsg_Menu::set_dialog_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dialog_type(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_Menu.dialog_type)
}

// optional bytes menu_key_values = 2;
inline bool CSVCMsg_Menu::_internal_has_menu_key_values() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSVCMsg_Menu::has_menu_key_values() const {
  return _internal_has_menu_key_values();
}
inline void CSVCMsg_Menu::clear_menu_key_values() {
  menu_key_values_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CSVCMsg_Menu::menu_key_values() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_Menu.menu_key_values)
  return _internal_menu_key_values();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSVCMsg_Menu::set_menu_key_values(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 menu_key_values_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CSVCMsg_Menu.menu_key_values)
}
inline std::string* CSVCMsg_Menu::mutable_menu_key_values() {
  std::string* _s = _internal_mutable_menu_key_values();
  // @@protoc_insertion_point(field_mutable:CSVCMsg_Menu.menu_key_values)
  return _s;
}
inline const std::string& CSVCMsg_Menu::_internal_menu_key_values() const {
  return menu_key_values_.Get();
}
inline void CSVCMsg_Menu::_internal_set_menu_key_values(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  menu_key_values_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CSVCMsg_Menu::_internal_mutable_menu_key_values() {
  _has_bits_[0] |= 0x00000001u;
  return menu_key_values_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CSVCMsg_Menu::release_menu_key_values() {
  // @@protoc_insertion_point(field_release:CSVCMsg_Menu.menu_key_values)
  if (!_internal_has_menu_key_values()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return menu_key_values_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CSVCMsg_Menu::set_allocated_menu_key_values(std::string* menu_key_values) {
  if (menu_key_values != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  menu_key_values_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), menu_key_values,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CSVCMsg_Menu.menu_key_values)
}

// -------------------------------------------------------------------

// CSVCMsg_UserMessage

// optional int32 msg_type = 1;
inline bool CSVCMsg_UserMessage::_internal_has_msg_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSVCMsg_UserMessage::has_msg_type() const {
  return _internal_has_msg_type();
}
inline void CSVCMsg_UserMessage::clear_msg_type() {
  msg_type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_UserMessage::_internal_msg_type() const {
  return msg_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_UserMessage::msg_type() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_UserMessage.msg_type)
  return _internal_msg_type();
}
inline void CSVCMsg_UserMessage::_internal_set_msg_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  msg_type_ = value;
}
inline void CSVCMsg_UserMessage::set_msg_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_msg_type(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_UserMessage.msg_type)
}

// optional bytes msg_data = 2;
inline bool CSVCMsg_UserMessage::_internal_has_msg_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSVCMsg_UserMessage::has_msg_data() const {
  return _internal_has_msg_data();
}
inline void CSVCMsg_UserMessage::clear_msg_data() {
  msg_data_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CSVCMsg_UserMessage::msg_data() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_UserMessage.msg_data)
  return _internal_msg_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSVCMsg_UserMessage::set_msg_data(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 msg_data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CSVCMsg_UserMessage.msg_data)
}
inline std::string* CSVCMsg_UserMessage::mutable_msg_data() {
  std::string* _s = _internal_mutable_msg_data();
  // @@protoc_insertion_point(field_mutable:CSVCMsg_UserMessage.msg_data)
  return _s;
}
inline const std::string& CSVCMsg_UserMessage::_internal_msg_data() const {
  return msg_data_.Get();
}
inline void CSVCMsg_UserMessage::_internal_set_msg_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  msg_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CSVCMsg_UserMessage::_internal_mutable_msg_data() {
  _has_bits_[0] |= 0x00000001u;
  return msg_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CSVCMsg_UserMessage::release_msg_data() {
  // @@protoc_insertion_point(field_release:CSVCMsg_UserMessage.msg_data)
  if (!_internal_has_msg_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return msg_data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CSVCMsg_UserMessage::set_allocated_msg_data(std::string* msg_data) {
  if (msg_data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  msg_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg_data,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CSVCMsg_UserMessage.msg_data)
}

// optional int32 passthrough = 3;
inline bool CSVCMsg_UserMessage::_internal_has_passthrough() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CSVCMsg_UserMessage::has_passthrough() const {
  return _internal_has_passthrough();
}
inline void CSVCMsg_UserMessage::clear_passthrough() {
  passthrough_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_UserMessage::_internal_passthrough() const {
  return passthrough_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_UserMessage::passthrough() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_UserMessage.passthrough)
  return _internal_passthrough();
}
inline void CSVCMsg_UserMessage::_internal_set_passthrough(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  passthrough_ = value;
}
inline void CSVCMsg_UserMessage::set_passthrough(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_passthrough(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_UserMessage.passthrough)
}

// -------------------------------------------------------------------

// CSVCMsg_PaintmapData

// optional bytes paintmap = 1;
inline bool CSVCMsg_PaintmapData::_internal_has_paintmap() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSVCMsg_PaintmapData::has_paintmap() const {
  return _internal_has_paintmap();
}
inline void CSVCMsg_PaintmapData::clear_paintmap() {
  paintmap_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CSVCMsg_PaintmapData::paintmap() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_PaintmapData.paintmap)
  return _internal_paintmap();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSVCMsg_PaintmapData::set_paintmap(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 paintmap_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CSVCMsg_PaintmapData.paintmap)
}
inline std::string* CSVCMsg_PaintmapData::mutable_paintmap() {
  std::string* _s = _internal_mutable_paintmap();
  // @@protoc_insertion_point(field_mutable:CSVCMsg_PaintmapData.paintmap)
  return _s;
}
inline const std::string& CSVCMsg_PaintmapData::_internal_paintmap() const {
  return paintmap_.Get();
}
inline void CSVCMsg_PaintmapData::_internal_set_paintmap(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  paintmap_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CSVCMsg_PaintmapData::_internal_mutable_paintmap() {
  _has_bits_[0] |= 0x00000001u;
  return paintmap_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CSVCMsg_PaintmapData::release_paintmap() {
  // @@protoc_insertion_point(field_release:CSVCMsg_PaintmapData.paintmap)
  if (!_internal_has_paintmap()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return paintmap_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CSVCMsg_PaintmapData::set_allocated_paintmap(std::string* paintmap) {
  if (paintmap != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  paintmap_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), paintmap,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CSVCMsg_PaintmapData.paintmap)
}

// -------------------------------------------------------------------

// CSVCMsg_GameEvent_key_t

// optional int32 type = 1;
inline bool CSVCMsg_GameEvent_key_t::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CSVCMsg_GameEvent_key_t::has_type() const {
  return _internal_has_type();
}
inline void CSVCMsg_GameEvent_key_t::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_GameEvent_key_t::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_GameEvent_key_t::type() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_GameEvent.key_t.type)
  return _internal_type();
}
inline void CSVCMsg_GameEvent_key_t::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  type_ = value;
}
inline void CSVCMsg_GameEvent_key_t::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_GameEvent.key_t.type)
}

// optional string val_string = 2;
inline bool CSVCMsg_GameEvent_key_t::_internal_has_val_string() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSVCMsg_GameEvent_key_t::has_val_string() const {
  return _internal_has_val_string();
}
inline void CSVCMsg_GameEvent_key_t::clear_val_string() {
  val_string_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CSVCMsg_GameEvent_key_t::val_string() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_GameEvent.key_t.val_string)
  return _internal_val_string();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSVCMsg_GameEvent_key_t::set_val_string(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 val_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CSVCMsg_GameEvent.key_t.val_string)
}
inline std::string* CSVCMsg_GameEvent_key_t::mutable_val_string() {
  std::string* _s = _internal_mutable_val_string();
  // @@protoc_insertion_point(field_mutable:CSVCMsg_GameEvent.key_t.val_string)
  return _s;
}
inline const std::string& CSVCMsg_GameEvent_key_t::_internal_val_string() const {
  return val_string_.Get();
}
inline void CSVCMsg_GameEvent_key_t::_internal_set_val_string(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  val_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CSVCMsg_GameEvent_key_t::_internal_mutable_val_string() {
  _has_bits_[0] |= 0x00000001u;
  return val_string_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CSVCMsg_GameEvent_key_t::release_val_string() {
  // @@protoc_insertion_point(field_release:CSVCMsg_GameEvent.key_t.val_string)
  if (!_internal_has_val_string()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return val_string_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CSVCMsg_GameEvent_key_t::set_allocated_val_string(std::string* val_string) {
  if (val_string != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  val_string_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), val_string,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CSVCMsg_GameEvent.key_t.val_string)
}

// optional float val_float = 3;
inline bool CSVCMsg_GameEvent_key_t::_internal_has_val_float() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CSVCMsg_GameEvent_key_t::has_val_float() const {
  return _internal_has_val_float();
}
inline void CSVCMsg_GameEvent_key_t::clear_val_float() {
  val_float_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float CSVCMsg_GameEvent_key_t::_internal_val_float() const {
  return val_float_;
}
inline float CSVCMsg_GameEvent_key_t::val_float() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_GameEvent.key_t.val_float)
  return _internal_val_float();
}
inline void CSVCMsg_GameEvent_key_t::_internal_set_val_float(float value) {
  _has_bits_[0] |= 0x00000008u;
  val_float_ = value;
}
inline void CSVCMsg_GameEvent_key_t::set_val_float(float value) {
  _internal_set_val_float(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_GameEvent.key_t.val_float)
}

// optional int32 val_long = 4;
inline bool CSVCMsg_GameEvent_key_t::_internal_has_val_long() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CSVCMsg_GameEvent_key_t::has_val_long() const {
  return _internal_has_val_long();
}
inline void CSVCMsg_GameEvent_key_t::clear_val_long() {
  val_long_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_GameEvent_key_t::_internal_val_long() const {
  return val_long_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_GameEvent_key_t::val_long() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_GameEvent.key_t.val_long)
  return _internal_val_long();
}
inline void CSVCMsg_GameEvent_key_t::_internal_set_val_long(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  val_long_ = value;
}
inline void CSVCMsg_GameEvent_key_t::set_val_long(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_val_long(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_GameEvent.key_t.val_long)
}

// optional int32 val_short = 5;
inline bool CSVCMsg_GameEvent_key_t::_internal_has_val_short() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CSVCMsg_GameEvent_key_t::has_val_short() const {
  return _internal_has_val_short();
}
inline void CSVCMsg_GameEvent_key_t::clear_val_short() {
  val_short_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_GameEvent_key_t::_internal_val_short() const {
  return val_short_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_GameEvent_key_t::val_short() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_GameEvent.key_t.val_short)
  return _internal_val_short();
}
inline void CSVCMsg_GameEvent_key_t::_internal_set_val_short(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  val_short_ = value;
}
inline void CSVCMsg_GameEvent_key_t::set_val_short(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_val_short(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_GameEvent.key_t.val_short)
}

// optional int32 val_byte = 6;
inline bool CSVCMsg_GameEvent_key_t::_internal_has_val_byte() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CSVCMsg_GameEvent_key_t::has_val_byte() const {
  return _internal_has_val_byte();
}
inline void CSVCMsg_GameEvent_key_t::clear_val_byte() {
  val_byte_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_GameEvent_key_t::_internal_val_byte() const {
  return val_byte_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_GameEvent_key_t::val_byte() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_GameEvent.key_t.val_byte)
  return _internal_val_byte();
}
inline void CSVCMsg_GameEvent_key_t::_internal_set_val_byte(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  val_byte_ = value;
}
inline void CSVCMsg_GameEvent_key_t::set_val_byte(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_val_byte(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_GameEvent.key_t.val_byte)
}

// optional bool val_bool = 7;
inline bool CSVCMsg_GameEvent_key_t::_internal_has_val_bool() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CSVCMsg_GameEvent_key_t::has_val_bool() const {
  return _internal_has_val_bool();
}
inline void CSVCMsg_GameEvent_key_t::clear_val_bool() {
  val_bool_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool CSVCMsg_GameEvent_key_t::_internal_val_bool() const {
  return val_bool_;
}
inline bool CSVCMsg_GameEvent_key_t::val_bool() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_GameEvent.key_t.val_bool)
  return _internal_val_bool();
}
inline void CSVCMsg_GameEvent_key_t::_internal_set_val_bool(bool value) {
  _has_bits_[0] |= 0x00000080u;
  val_bool_ = value;
}
inline void CSVCMsg_GameEvent_key_t::set_val_bool(bool value) {
  _internal_set_val_bool(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_GameEvent.key_t.val_bool)
}

// optional uint64 val_uint64 = 8;
inline bool CSVCMsg_GameEvent_key_t::_internal_has_val_uint64() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CSVCMsg_GameEvent_key_t::has_val_uint64() const {
  return _internal_has_val_uint64();
}
inline void CSVCMsg_GameEvent_key_t::clear_val_uint64() {
  val_uint64_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CSVCMsg_GameEvent_key_t::_internal_val_uint64() const {
  return val_uint64_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CSVCMsg_GameEvent_key_t::val_uint64() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_GameEvent.key_t.val_uint64)
  return _internal_val_uint64();
}
inline void CSVCMsg_GameEvent_key_t::_internal_set_val_uint64(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000100u;
  val_uint64_ = value;
}
inline void CSVCMsg_GameEvent_key_t::set_val_uint64(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_val_uint64(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_GameEvent.key_t.val_uint64)
}

// optional bytes val_wstring = 9;
inline bool CSVCMsg_GameEvent_key_t::_internal_has_val_wstring() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSVCMsg_GameEvent_key_t::has_val_wstring() const {
  return _internal_has_val_wstring();
}
inline void CSVCMsg_GameEvent_key_t::clear_val_wstring() {
  val_wstring_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CSVCMsg_GameEvent_key_t::val_wstring() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_GameEvent.key_t.val_wstring)
  return _internal_val_wstring();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSVCMsg_GameEvent_key_t::set_val_wstring(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 val_wstring_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CSVCMsg_GameEvent.key_t.val_wstring)
}
inline std::string* CSVCMsg_GameEvent_key_t::mutable_val_wstring() {
  std::string* _s = _internal_mutable_val_wstring();
  // @@protoc_insertion_point(field_mutable:CSVCMsg_GameEvent.key_t.val_wstring)
  return _s;
}
inline const std::string& CSVCMsg_GameEvent_key_t::_internal_val_wstring() const {
  return val_wstring_.Get();
}
inline void CSVCMsg_GameEvent_key_t::_internal_set_val_wstring(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  val_wstring_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CSVCMsg_GameEvent_key_t::_internal_mutable_val_wstring() {
  _has_bits_[0] |= 0x00000002u;
  return val_wstring_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CSVCMsg_GameEvent_key_t::release_val_wstring() {
  // @@protoc_insertion_point(field_release:CSVCMsg_GameEvent.key_t.val_wstring)
  if (!_internal_has_val_wstring()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return val_wstring_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CSVCMsg_GameEvent_key_t::set_allocated_val_wstring(std::string* val_wstring) {
  if (val_wstring != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  val_wstring_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), val_wstring,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CSVCMsg_GameEvent.key_t.val_wstring)
}

// -------------------------------------------------------------------

// CSVCMsg_GameEvent

// optional string event_name = 1;
inline bool CSVCMsg_GameEvent::_internal_has_event_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSVCMsg_GameEvent::has_event_name() const {
  return _internal_has_event_name();
}
inline void CSVCMsg_GameEvent::clear_event_name() {
  event_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CSVCMsg_GameEvent::event_name() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_GameEvent.event_name)
  return _internal_event_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSVCMsg_GameEvent::set_event_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 event_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CSVCMsg_GameEvent.event_name)
}
inline std::string* CSVCMsg_GameEvent::mutable_event_name() {
  std::string* _s = _internal_mutable_event_name();
  // @@protoc_insertion_point(field_mutable:CSVCMsg_GameEvent.event_name)
  return _s;
}
inline const std::string& CSVCMsg_GameEvent::_internal_event_name() const {
  return event_name_.Get();
}
inline void CSVCMsg_GameEvent::_internal_set_event_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  event_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CSVCMsg_GameEvent::_internal_mutable_event_name() {
  _has_bits_[0] |= 0x00000001u;
  return event_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CSVCMsg_GameEvent::release_event_name() {
  // @@protoc_insertion_point(field_release:CSVCMsg_GameEvent.event_name)
  if (!_internal_has_event_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return event_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CSVCMsg_GameEvent::set_allocated_event_name(std::string* event_name) {
  if (event_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  event_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), event_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CSVCMsg_GameEvent.event_name)
}

// optional int32 eventid = 2;
inline bool CSVCMsg_GameEvent::_internal_has_eventid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSVCMsg_GameEvent::has_eventid() const {
  return _internal_has_eventid();
}
inline void CSVCMsg_GameEvent::clear_eventid() {
  eventid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_GameEvent::_internal_eventid() const {
  return eventid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_GameEvent::eventid() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_GameEvent.eventid)
  return _internal_eventid();
}
inline void CSVCMsg_GameEvent::_internal_set_eventid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  eventid_ = value;
}
inline void CSVCMsg_GameEvent::set_eventid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_eventid(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_GameEvent.eventid)
}

// repeated .CSVCMsg_GameEvent.key_t keys = 3;
inline int CSVCMsg_GameEvent::_internal_keys_size() const {
  return keys_.size();
}
inline int CSVCMsg_GameEvent::keys_size() const {
  return _internal_keys_size();
}
inline void CSVCMsg_GameEvent::clear_keys() {
  keys_.Clear();
}
inline ::CSVCMsg_GameEvent_key_t* CSVCMsg_GameEvent::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:CSVCMsg_GameEvent.keys)
  return keys_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSVCMsg_GameEvent_key_t >*
CSVCMsg_GameEvent::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:CSVCMsg_GameEvent.keys)
  return &keys_;
}
inline const ::CSVCMsg_GameEvent_key_t& CSVCMsg_GameEvent::_internal_keys(int index) const {
  return keys_.Get(index);
}
inline const ::CSVCMsg_GameEvent_key_t& CSVCMsg_GameEvent::keys(int index) const {
  // @@protoc_insertion_point(field_get:CSVCMsg_GameEvent.keys)
  return _internal_keys(index);
}
inline ::CSVCMsg_GameEvent_key_t* CSVCMsg_GameEvent::_internal_add_keys() {
  return keys_.Add();
}
inline ::CSVCMsg_GameEvent_key_t* CSVCMsg_GameEvent::add_keys() {
  ::CSVCMsg_GameEvent_key_t* _add = _internal_add_keys();
  // @@protoc_insertion_point(field_add:CSVCMsg_GameEvent.keys)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSVCMsg_GameEvent_key_t >&
CSVCMsg_GameEvent::keys() const {
  // @@protoc_insertion_point(field_list:CSVCMsg_GameEvent.keys)
  return keys_;
}

// optional int32 passthrough = 4;
inline bool CSVCMsg_GameEvent::_internal_has_passthrough() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CSVCMsg_GameEvent::has_passthrough() const {
  return _internal_has_passthrough();
}
inline void CSVCMsg_GameEvent::clear_passthrough() {
  passthrough_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_GameEvent::_internal_passthrough() const {
  return passthrough_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_GameEvent::passthrough() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_GameEvent.passthrough)
  return _internal_passthrough();
}
inline void CSVCMsg_GameEvent::_internal_set_passthrough(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  passthrough_ = value;
}
inline void CSVCMsg_GameEvent::set_passthrough(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_passthrough(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_GameEvent.passthrough)
}

// -------------------------------------------------------------------

// CSVCMsg_GameEventList_key_t

// optional int32 type = 1;
inline bool CSVCMsg_GameEventList_key_t::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSVCMsg_GameEventList_key_t::has_type() const {
  return _internal_has_type();
}
inline void CSVCMsg_GameEventList_key_t::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_GameEventList_key_t::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_GameEventList_key_t::type() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_GameEventList.key_t.type)
  return _internal_type();
}
inline void CSVCMsg_GameEventList_key_t::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  type_ = value;
}
inline void CSVCMsg_GameEventList_key_t::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_GameEventList.key_t.type)
}

// optional string name = 2;
inline bool CSVCMsg_GameEventList_key_t::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSVCMsg_GameEventList_key_t::has_name() const {
  return _internal_has_name();
}
inline void CSVCMsg_GameEventList_key_t::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CSVCMsg_GameEventList_key_t::name() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_GameEventList.key_t.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSVCMsg_GameEventList_key_t::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CSVCMsg_GameEventList.key_t.name)
}
inline std::string* CSVCMsg_GameEventList_key_t::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:CSVCMsg_GameEventList.key_t.name)
  return _s;
}
inline const std::string& CSVCMsg_GameEventList_key_t::_internal_name() const {
  return name_.Get();
}
inline void CSVCMsg_GameEventList_key_t::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CSVCMsg_GameEventList_key_t::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CSVCMsg_GameEventList_key_t::release_name() {
  // @@protoc_insertion_point(field_release:CSVCMsg_GameEventList.key_t.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CSVCMsg_GameEventList_key_t::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CSVCMsg_GameEventList.key_t.name)
}

// -------------------------------------------------------------------

// CSVCMsg_GameEventList_descriptor_t

// optional int32 eventid = 1;
inline bool CSVCMsg_GameEventList_descriptor_t::_internal_has_eventid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSVCMsg_GameEventList_descriptor_t::has_eventid() const {
  return _internal_has_eventid();
}
inline void CSVCMsg_GameEventList_descriptor_t::clear_eventid() {
  eventid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_GameEventList_descriptor_t::_internal_eventid() const {
  return eventid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_GameEventList_descriptor_t::eventid() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_GameEventList.descriptor_t.eventid)
  return _internal_eventid();
}
inline void CSVCMsg_GameEventList_descriptor_t::_internal_set_eventid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  eventid_ = value;
}
inline void CSVCMsg_GameEventList_descriptor_t::set_eventid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_eventid(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_GameEventList.descriptor_t.eventid)
}

// optional string name = 2;
inline bool CSVCMsg_GameEventList_descriptor_t::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSVCMsg_GameEventList_descriptor_t::has_name() const {
  return _internal_has_name();
}
inline void CSVCMsg_GameEventList_descriptor_t::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CSVCMsg_GameEventList_descriptor_t::name() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_GameEventList.descriptor_t.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSVCMsg_GameEventList_descriptor_t::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CSVCMsg_GameEventList.descriptor_t.name)
}
inline std::string* CSVCMsg_GameEventList_descriptor_t::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:CSVCMsg_GameEventList.descriptor_t.name)
  return _s;
}
inline const std::string& CSVCMsg_GameEventList_descriptor_t::_internal_name() const {
  return name_.Get();
}
inline void CSVCMsg_GameEventList_descriptor_t::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CSVCMsg_GameEventList_descriptor_t::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CSVCMsg_GameEventList_descriptor_t::release_name() {
  // @@protoc_insertion_point(field_release:CSVCMsg_GameEventList.descriptor_t.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CSVCMsg_GameEventList_descriptor_t::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CSVCMsg_GameEventList.descriptor_t.name)
}

// repeated .CSVCMsg_GameEventList.key_t keys = 3;
inline int CSVCMsg_GameEventList_descriptor_t::_internal_keys_size() const {
  return keys_.size();
}
inline int CSVCMsg_GameEventList_descriptor_t::keys_size() const {
  return _internal_keys_size();
}
inline void CSVCMsg_GameEventList_descriptor_t::clear_keys() {
  keys_.Clear();
}
inline ::CSVCMsg_GameEventList_key_t* CSVCMsg_GameEventList_descriptor_t::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:CSVCMsg_GameEventList.descriptor_t.keys)
  return keys_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSVCMsg_GameEventList_key_t >*
CSVCMsg_GameEventList_descriptor_t::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:CSVCMsg_GameEventList.descriptor_t.keys)
  return &keys_;
}
inline const ::CSVCMsg_GameEventList_key_t& CSVCMsg_GameEventList_descriptor_t::_internal_keys(int index) const {
  return keys_.Get(index);
}
inline const ::CSVCMsg_GameEventList_key_t& CSVCMsg_GameEventList_descriptor_t::keys(int index) const {
  // @@protoc_insertion_point(field_get:CSVCMsg_GameEventList.descriptor_t.keys)
  return _internal_keys(index);
}
inline ::CSVCMsg_GameEventList_key_t* CSVCMsg_GameEventList_descriptor_t::_internal_add_keys() {
  return keys_.Add();
}
inline ::CSVCMsg_GameEventList_key_t* CSVCMsg_GameEventList_descriptor_t::add_keys() {
  ::CSVCMsg_GameEventList_key_t* _add = _internal_add_keys();
  // @@protoc_insertion_point(field_add:CSVCMsg_GameEventList.descriptor_t.keys)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSVCMsg_GameEventList_key_t >&
CSVCMsg_GameEventList_descriptor_t::keys() const {
  // @@protoc_insertion_point(field_list:CSVCMsg_GameEventList.descriptor_t.keys)
  return keys_;
}

// -------------------------------------------------------------------

// CSVCMsg_GameEventList

// repeated .CSVCMsg_GameEventList.descriptor_t descriptors = 1;
inline int CSVCMsg_GameEventList::_internal_descriptors_size() const {
  return descriptors_.size();
}
inline int CSVCMsg_GameEventList::descriptors_size() const {
  return _internal_descriptors_size();
}
inline void CSVCMsg_GameEventList::clear_descriptors() {
  descriptors_.Clear();
}
inline ::CSVCMsg_GameEventList_descriptor_t* CSVCMsg_GameEventList::mutable_descriptors(int index) {
  // @@protoc_insertion_point(field_mutable:CSVCMsg_GameEventList.descriptors)
  return descriptors_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSVCMsg_GameEventList_descriptor_t >*
CSVCMsg_GameEventList::mutable_descriptors() {
  // @@protoc_insertion_point(field_mutable_list:CSVCMsg_GameEventList.descriptors)
  return &descriptors_;
}
inline const ::CSVCMsg_GameEventList_descriptor_t& CSVCMsg_GameEventList::_internal_descriptors(int index) const {
  return descriptors_.Get(index);
}
inline const ::CSVCMsg_GameEventList_descriptor_t& CSVCMsg_GameEventList::descriptors(int index) const {
  // @@protoc_insertion_point(field_get:CSVCMsg_GameEventList.descriptors)
  return _internal_descriptors(index);
}
inline ::CSVCMsg_GameEventList_descriptor_t* CSVCMsg_GameEventList::_internal_add_descriptors() {
  return descriptors_.Add();
}
inline ::CSVCMsg_GameEventList_descriptor_t* CSVCMsg_GameEventList::add_descriptors() {
  ::CSVCMsg_GameEventList_descriptor_t* _add = _internal_add_descriptors();
  // @@protoc_insertion_point(field_add:CSVCMsg_GameEventList.descriptors)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSVCMsg_GameEventList_descriptor_t >&
CSVCMsg_GameEventList::descriptors() const {
  // @@protoc_insertion_point(field_list:CSVCMsg_GameEventList.descriptors)
  return descriptors_;
}

// -------------------------------------------------------------------

// CSVCMsg_TempEntities

// optional bool reliable = 1;
inline bool CSVCMsg_TempEntities::_internal_has_reliable() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSVCMsg_TempEntities::has_reliable() const {
  return _internal_has_reliable();
}
inline void CSVCMsg_TempEntities::clear_reliable() {
  reliable_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CSVCMsg_TempEntities::_internal_reliable() const {
  return reliable_;
}
inline bool CSVCMsg_TempEntities::reliable() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_TempEntities.reliable)
  return _internal_reliable();
}
inline void CSVCMsg_TempEntities::_internal_set_reliable(bool value) {
  _has_bits_[0] |= 0x00000002u;
  reliable_ = value;
}
inline void CSVCMsg_TempEntities::set_reliable(bool value) {
  _internal_set_reliable(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_TempEntities.reliable)
}

// optional int32 num_entries = 2;
inline bool CSVCMsg_TempEntities::_internal_has_num_entries() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CSVCMsg_TempEntities::has_num_entries() const {
  return _internal_has_num_entries();
}
inline void CSVCMsg_TempEntities::clear_num_entries() {
  num_entries_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_TempEntities::_internal_num_entries() const {
  return num_entries_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_TempEntities::num_entries() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_TempEntities.num_entries)
  return _internal_num_entries();
}
inline void CSVCMsg_TempEntities::_internal_set_num_entries(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  num_entries_ = value;
}
inline void CSVCMsg_TempEntities::set_num_entries(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num_entries(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_TempEntities.num_entries)
}

// optional bytes entity_data = 3;
inline bool CSVCMsg_TempEntities::_internal_has_entity_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSVCMsg_TempEntities::has_entity_data() const {
  return _internal_has_entity_data();
}
inline void CSVCMsg_TempEntities::clear_entity_data() {
  entity_data_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CSVCMsg_TempEntities::entity_data() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_TempEntities.entity_data)
  return _internal_entity_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSVCMsg_TempEntities::set_entity_data(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 entity_data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CSVCMsg_TempEntities.entity_data)
}
inline std::string* CSVCMsg_TempEntities::mutable_entity_data() {
  std::string* _s = _internal_mutable_entity_data();
  // @@protoc_insertion_point(field_mutable:CSVCMsg_TempEntities.entity_data)
  return _s;
}
inline const std::string& CSVCMsg_TempEntities::_internal_entity_data() const {
  return entity_data_.Get();
}
inline void CSVCMsg_TempEntities::_internal_set_entity_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  entity_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CSVCMsg_TempEntities::_internal_mutable_entity_data() {
  _has_bits_[0] |= 0x00000001u;
  return entity_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CSVCMsg_TempEntities::release_entity_data() {
  // @@protoc_insertion_point(field_release:CSVCMsg_TempEntities.entity_data)
  if (!_internal_has_entity_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return entity_data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CSVCMsg_TempEntities::set_allocated_entity_data(std::string* entity_data) {
  if (entity_data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  entity_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), entity_data,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CSVCMsg_TempEntities.entity_data)
}

// -------------------------------------------------------------------

// CSVCMsg_PacketEntities

// optional int32 max_entries = 1;
inline bool CSVCMsg_PacketEntities::_internal_has_max_entries() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSVCMsg_PacketEntities::has_max_entries() const {
  return _internal_has_max_entries();
}
inline void CSVCMsg_PacketEntities::clear_max_entries() {
  max_entries_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_PacketEntities::_internal_max_entries() const {
  return max_entries_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_PacketEntities::max_entries() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_PacketEntities.max_entries)
  return _internal_max_entries();
}
inline void CSVCMsg_PacketEntities::_internal_set_max_entries(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  max_entries_ = value;
}
inline void CSVCMsg_PacketEntities::set_max_entries(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_entries(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_PacketEntities.max_entries)
}

// optional int32 updated_entries = 2;
inline bool CSVCMsg_PacketEntities::_internal_has_updated_entries() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CSVCMsg_PacketEntities::has_updated_entries() const {
  return _internal_has_updated_entries();
}
inline void CSVCMsg_PacketEntities::clear_updated_entries() {
  updated_entries_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_PacketEntities::_internal_updated_entries() const {
  return updated_entries_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_PacketEntities::updated_entries() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_PacketEntities.updated_entries)
  return _internal_updated_entries();
}
inline void CSVCMsg_PacketEntities::_internal_set_updated_entries(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  updated_entries_ = value;
}
inline void CSVCMsg_PacketEntities::set_updated_entries(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_updated_entries(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_PacketEntities.updated_entries)
}

// optional bool is_delta = 3;
inline bool CSVCMsg_PacketEntities::_internal_has_is_delta() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CSVCMsg_PacketEntities::has_is_delta() const {
  return _internal_has_is_delta();
}
inline void CSVCMsg_PacketEntities::clear_is_delta() {
  is_delta_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CSVCMsg_PacketEntities::_internal_is_delta() const {
  return is_delta_;
}
inline bool CSVCMsg_PacketEntities::is_delta() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_PacketEntities.is_delta)
  return _internal_is_delta();
}
inline void CSVCMsg_PacketEntities::_internal_set_is_delta(bool value) {
  _has_bits_[0] |= 0x00000008u;
  is_delta_ = value;
}
inline void CSVCMsg_PacketEntities::set_is_delta(bool value) {
  _internal_set_is_delta(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_PacketEntities.is_delta)
}

// optional bool update_baseline = 4;
inline bool CSVCMsg_PacketEntities::_internal_has_update_baseline() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CSVCMsg_PacketEntities::has_update_baseline() const {
  return _internal_has_update_baseline();
}
inline void CSVCMsg_PacketEntities::clear_update_baseline() {
  update_baseline_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CSVCMsg_PacketEntities::_internal_update_baseline() const {
  return update_baseline_;
}
inline bool CSVCMsg_PacketEntities::update_baseline() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_PacketEntities.update_baseline)
  return _internal_update_baseline();
}
inline void CSVCMsg_PacketEntities::_internal_set_update_baseline(bool value) {
  _has_bits_[0] |= 0x00000010u;
  update_baseline_ = value;
}
inline void CSVCMsg_PacketEntities::set_update_baseline(bool value) {
  _internal_set_update_baseline(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_PacketEntities.update_baseline)
}

// optional int32 baseline = 5;
inline bool CSVCMsg_PacketEntities::_internal_has_baseline() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CSVCMsg_PacketEntities::has_baseline() const {
  return _internal_has_baseline();
}
inline void CSVCMsg_PacketEntities::clear_baseline() {
  baseline_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_PacketEntities::_internal_baseline() const {
  return baseline_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_PacketEntities::baseline() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_PacketEntities.baseline)
  return _internal_baseline();
}
inline void CSVCMsg_PacketEntities::_internal_set_baseline(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  baseline_ = value;
}
inline void CSVCMsg_PacketEntities::set_baseline(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_baseline(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_PacketEntities.baseline)
}

// optional int32 delta_from = 6;
inline bool CSVCMsg_PacketEntities::_internal_has_delta_from() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CSVCMsg_PacketEntities::has_delta_from() const {
  return _internal_has_delta_from();
}
inline void CSVCMsg_PacketEntities::clear_delta_from() {
  delta_from_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_PacketEntities::_internal_delta_from() const {
  return delta_from_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_PacketEntities::delta_from() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_PacketEntities.delta_from)
  return _internal_delta_from();
}
inline void CSVCMsg_PacketEntities::_internal_set_delta_from(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  delta_from_ = value;
}
inline void CSVCMsg_PacketEntities::set_delta_from(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_delta_from(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_PacketEntities.delta_from)
}

// optional bytes entity_data = 7;
inline bool CSVCMsg_PacketEntities::_internal_has_entity_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSVCMsg_PacketEntities::has_entity_data() const {
  return _internal_has_entity_data();
}
inline void CSVCMsg_PacketEntities::clear_entity_data() {
  entity_data_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CSVCMsg_PacketEntities::entity_data() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_PacketEntities.entity_data)
  return _internal_entity_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSVCMsg_PacketEntities::set_entity_data(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 entity_data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CSVCMsg_PacketEntities.entity_data)
}
inline std::string* CSVCMsg_PacketEntities::mutable_entity_data() {
  std::string* _s = _internal_mutable_entity_data();
  // @@protoc_insertion_point(field_mutable:CSVCMsg_PacketEntities.entity_data)
  return _s;
}
inline const std::string& CSVCMsg_PacketEntities::_internal_entity_data() const {
  return entity_data_.Get();
}
inline void CSVCMsg_PacketEntities::_internal_set_entity_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  entity_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CSVCMsg_PacketEntities::_internal_mutable_entity_data() {
  _has_bits_[0] |= 0x00000001u;
  return entity_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CSVCMsg_PacketEntities::release_entity_data() {
  // @@protoc_insertion_point(field_release:CSVCMsg_PacketEntities.entity_data)
  if (!_internal_has_entity_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return entity_data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CSVCMsg_PacketEntities::set_allocated_entity_data(std::string* entity_data) {
  if (entity_data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  entity_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), entity_data,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CSVCMsg_PacketEntities.entity_data)
}

// -------------------------------------------------------------------

// CSVCMsg_Sounds_sounddata_t

// optional sint32 origin_x = 1;
inline bool CSVCMsg_Sounds_sounddata_t::_internal_has_origin_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSVCMsg_Sounds_sounddata_t::has_origin_x() const {
  return _internal_has_origin_x();
}
inline void CSVCMsg_Sounds_sounddata_t::clear_origin_x() {
  origin_x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_Sounds_sounddata_t::_internal_origin_x() const {
  return origin_x_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_Sounds_sounddata_t::origin_x() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_Sounds.sounddata_t.origin_x)
  return _internal_origin_x();
}
inline void CSVCMsg_Sounds_sounddata_t::_internal_set_origin_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  origin_x_ = value;
}
inline void CSVCMsg_Sounds_sounddata_t::set_origin_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_origin_x(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_Sounds.sounddata_t.origin_x)
}

// optional sint32 origin_y = 2;
inline bool CSVCMsg_Sounds_sounddata_t::_internal_has_origin_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSVCMsg_Sounds_sounddata_t::has_origin_y() const {
  return _internal_has_origin_y();
}
inline void CSVCMsg_Sounds_sounddata_t::clear_origin_y() {
  origin_y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_Sounds_sounddata_t::_internal_origin_y() const {
  return origin_y_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_Sounds_sounddata_t::origin_y() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_Sounds.sounddata_t.origin_y)
  return _internal_origin_y();
}
inline void CSVCMsg_Sounds_sounddata_t::_internal_set_origin_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  origin_y_ = value;
}
inline void CSVCMsg_Sounds_sounddata_t::set_origin_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_origin_y(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_Sounds.sounddata_t.origin_y)
}

// optional sint32 origin_z = 3;
inline bool CSVCMsg_Sounds_sounddata_t::_internal_has_origin_z() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CSVCMsg_Sounds_sounddata_t::has_origin_z() const {
  return _internal_has_origin_z();
}
inline void CSVCMsg_Sounds_sounddata_t::clear_origin_z() {
  origin_z_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_Sounds_sounddata_t::_internal_origin_z() const {
  return origin_z_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_Sounds_sounddata_t::origin_z() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_Sounds.sounddata_t.origin_z)
  return _internal_origin_z();
}
inline void CSVCMsg_Sounds_sounddata_t::_internal_set_origin_z(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  origin_z_ = value;
}
inline void CSVCMsg_Sounds_sounddata_t::set_origin_z(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_origin_z(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_Sounds.sounddata_t.origin_z)
}

// optional uint32 volume = 4;
inline bool CSVCMsg_Sounds_sounddata_t::_internal_has_volume() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CSVCMsg_Sounds_sounddata_t::has_volume() const {
  return _internal_has_volume();
}
inline void CSVCMsg_Sounds_sounddata_t::clear_volume() {
  volume_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSVCMsg_Sounds_sounddata_t::_internal_volume() const {
  return volume_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSVCMsg_Sounds_sounddata_t::volume() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_Sounds.sounddata_t.volume)
  return _internal_volume();
}
inline void CSVCMsg_Sounds_sounddata_t::_internal_set_volume(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  volume_ = value;
}
inline void CSVCMsg_Sounds_sounddata_t::set_volume(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_volume(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_Sounds.sounddata_t.volume)
}

// optional float delay_value = 5;
inline bool CSVCMsg_Sounds_sounddata_t::_internal_has_delay_value() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CSVCMsg_Sounds_sounddata_t::has_delay_value() const {
  return _internal_has_delay_value();
}
inline void CSVCMsg_Sounds_sounddata_t::clear_delay_value() {
  delay_value_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float CSVCMsg_Sounds_sounddata_t::_internal_delay_value() const {
  return delay_value_;
}
inline float CSVCMsg_Sounds_sounddata_t::delay_value() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_Sounds.sounddata_t.delay_value)
  return _internal_delay_value();
}
inline void CSVCMsg_Sounds_sounddata_t::_internal_set_delay_value(float value) {
  _has_bits_[0] |= 0x00000010u;
  delay_value_ = value;
}
inline void CSVCMsg_Sounds_sounddata_t::set_delay_value(float value) {
  _internal_set_delay_value(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_Sounds.sounddata_t.delay_value)
}

// optional int32 sequence_number = 6;
inline bool CSVCMsg_Sounds_sounddata_t::_internal_has_sequence_number() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CSVCMsg_Sounds_sounddata_t::has_sequence_number() const {
  return _internal_has_sequence_number();
}
inline void CSVCMsg_Sounds_sounddata_t::clear_sequence_number() {
  sequence_number_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_Sounds_sounddata_t::_internal_sequence_number() const {
  return sequence_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_Sounds_sounddata_t::sequence_number() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_Sounds.sounddata_t.sequence_number)
  return _internal_sequence_number();
}
inline void CSVCMsg_Sounds_sounddata_t::_internal_set_sequence_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  sequence_number_ = value;
}
inline void CSVCMsg_Sounds_sounddata_t::set_sequence_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sequence_number(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_Sounds.sounddata_t.sequence_number)
}

// optional int32 entity_index = 7;
inline bool CSVCMsg_Sounds_sounddata_t::_internal_has_entity_index() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CSVCMsg_Sounds_sounddata_t::has_entity_index() const {
  return _internal_has_entity_index();
}
inline void CSVCMsg_Sounds_sounddata_t::clear_entity_index() {
  entity_index_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_Sounds_sounddata_t::_internal_entity_index() const {
  return entity_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_Sounds_sounddata_t::entity_index() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_Sounds.sounddata_t.entity_index)
  return _internal_entity_index();
}
inline void CSVCMsg_Sounds_sounddata_t::_internal_set_entity_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  entity_index_ = value;
}
inline void CSVCMsg_Sounds_sounddata_t::set_entity_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_entity_index(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_Sounds.sounddata_t.entity_index)
}

// optional int32 channel = 8;
inline bool CSVCMsg_Sounds_sounddata_t::_internal_has_channel() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CSVCMsg_Sounds_sounddata_t::has_channel() const {
  return _internal_has_channel();
}
inline void CSVCMsg_Sounds_sounddata_t::clear_channel() {
  channel_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_Sounds_sounddata_t::_internal_channel() const {
  return channel_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_Sounds_sounddata_t::channel() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_Sounds.sounddata_t.channel)
  return _internal_channel();
}
inline void CSVCMsg_Sounds_sounddata_t::_internal_set_channel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  channel_ = value;
}
inline void CSVCMsg_Sounds_sounddata_t::set_channel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_channel(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_Sounds.sounddata_t.channel)
}

// optional int32 pitch = 9;
inline bool CSVCMsg_Sounds_sounddata_t::_internal_has_pitch() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CSVCMsg_Sounds_sounddata_t::has_pitch() const {
  return _internal_has_pitch();
}
inline void CSVCMsg_Sounds_sounddata_t::clear_pitch() {
  pitch_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_Sounds_sounddata_t::_internal_pitch() const {
  return pitch_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_Sounds_sounddata_t::pitch() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_Sounds.sounddata_t.pitch)
  return _internal_pitch();
}
inline void CSVCMsg_Sounds_sounddata_t::_internal_set_pitch(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  pitch_ = value;
}
inline void CSVCMsg_Sounds_sounddata_t::set_pitch(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pitch(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_Sounds.sounddata_t.pitch)
}

// optional int32 flags = 10;
inline bool CSVCMsg_Sounds_sounddata_t::_internal_has_flags() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CSVCMsg_Sounds_sounddata_t::has_flags() const {
  return _internal_has_flags();
}
inline void CSVCMsg_Sounds_sounddata_t::clear_flags() {
  flags_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_Sounds_sounddata_t::_internal_flags() const {
  return flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_Sounds_sounddata_t::flags() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_Sounds.sounddata_t.flags)
  return _internal_flags();
}
inline void CSVCMsg_Sounds_sounddata_t::_internal_set_flags(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  flags_ = value;
}
inline void CSVCMsg_Sounds_sounddata_t::set_flags(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_Sounds.sounddata_t.flags)
}

// optional uint32 sound_num = 11;
inline bool CSVCMsg_Sounds_sounddata_t::_internal_has_sound_num() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CSVCMsg_Sounds_sounddata_t::has_sound_num() const {
  return _internal_has_sound_num();
}
inline void CSVCMsg_Sounds_sounddata_t::clear_sound_num() {
  sound_num_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSVCMsg_Sounds_sounddata_t::_internal_sound_num() const {
  return sound_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSVCMsg_Sounds_sounddata_t::sound_num() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_Sounds.sounddata_t.sound_num)
  return _internal_sound_num();
}
inline void CSVCMsg_Sounds_sounddata_t::_internal_set_sound_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  sound_num_ = value;
}
inline void CSVCMsg_Sounds_sounddata_t::set_sound_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sound_num(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_Sounds.sounddata_t.sound_num)
}

// optional fixed32 sound_num_handle = 12;
inline bool CSVCMsg_Sounds_sounddata_t::_internal_has_sound_num_handle() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CSVCMsg_Sounds_sounddata_t::has_sound_num_handle() const {
  return _internal_has_sound_num_handle();
}
inline void CSVCMsg_Sounds_sounddata_t::clear_sound_num_handle() {
  sound_num_handle_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSVCMsg_Sounds_sounddata_t::_internal_sound_num_handle() const {
  return sound_num_handle_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSVCMsg_Sounds_sounddata_t::sound_num_handle() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_Sounds.sounddata_t.sound_num_handle)
  return _internal_sound_num_handle();
}
inline void CSVCMsg_Sounds_sounddata_t::_internal_set_sound_num_handle(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  sound_num_handle_ = value;
}
inline void CSVCMsg_Sounds_sounddata_t::set_sound_num_handle(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sound_num_handle(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_Sounds.sounddata_t.sound_num_handle)
}

// optional int32 speaker_entity = 13;
inline bool CSVCMsg_Sounds_sounddata_t::_internal_has_speaker_entity() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CSVCMsg_Sounds_sounddata_t::has_speaker_entity() const {
  return _internal_has_speaker_entity();
}
inline void CSVCMsg_Sounds_sounddata_t::clear_speaker_entity() {
  speaker_entity_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_Sounds_sounddata_t::_internal_speaker_entity() const {
  return speaker_entity_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_Sounds_sounddata_t::speaker_entity() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_Sounds.sounddata_t.speaker_entity)
  return _internal_speaker_entity();
}
inline void CSVCMsg_Sounds_sounddata_t::_internal_set_speaker_entity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00001000u;
  speaker_entity_ = value;
}
inline void CSVCMsg_Sounds_sounddata_t::set_speaker_entity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_speaker_entity(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_Sounds.sounddata_t.speaker_entity)
}

// optional int32 random_seed = 14;
inline bool CSVCMsg_Sounds_sounddata_t::_internal_has_random_seed() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CSVCMsg_Sounds_sounddata_t::has_random_seed() const {
  return _internal_has_random_seed();
}
inline void CSVCMsg_Sounds_sounddata_t::clear_random_seed() {
  random_seed_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_Sounds_sounddata_t::_internal_random_seed() const {
  return random_seed_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_Sounds_sounddata_t::random_seed() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_Sounds.sounddata_t.random_seed)
  return _internal_random_seed();
}
inline void CSVCMsg_Sounds_sounddata_t::_internal_set_random_seed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00002000u;
  random_seed_ = value;
}
inline void CSVCMsg_Sounds_sounddata_t::set_random_seed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_random_seed(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_Sounds.sounddata_t.random_seed)
}

// optional int32 sound_level = 15;
inline bool CSVCMsg_Sounds_sounddata_t::_internal_has_sound_level() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CSVCMsg_Sounds_sounddata_t::has_sound_level() const {
  return _internal_has_sound_level();
}
inline void CSVCMsg_Sounds_sounddata_t::clear_sound_level() {
  sound_level_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_Sounds_sounddata_t::_internal_sound_level() const {
  return sound_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_Sounds_sounddata_t::sound_level() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_Sounds.sounddata_t.sound_level)
  return _internal_sound_level();
}
inline void CSVCMsg_Sounds_sounddata_t::_internal_set_sound_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00004000u;
  sound_level_ = value;
}
inline void CSVCMsg_Sounds_sounddata_t::set_sound_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sound_level(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_Sounds.sounddata_t.sound_level)
}

// optional bool is_sentence = 16;
inline bool CSVCMsg_Sounds_sounddata_t::_internal_has_is_sentence() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool CSVCMsg_Sounds_sounddata_t::has_is_sentence() const {
  return _internal_has_is_sentence();
}
inline void CSVCMsg_Sounds_sounddata_t::clear_is_sentence() {
  is_sentence_ = false;
  _has_bits_[0] &= ~0x00008000u;
}
inline bool CSVCMsg_Sounds_sounddata_t::_internal_is_sentence() const {
  return is_sentence_;
}
inline bool CSVCMsg_Sounds_sounddata_t::is_sentence() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_Sounds.sounddata_t.is_sentence)
  return _internal_is_sentence();
}
inline void CSVCMsg_Sounds_sounddata_t::_internal_set_is_sentence(bool value) {
  _has_bits_[0] |= 0x00008000u;
  is_sentence_ = value;
}
inline void CSVCMsg_Sounds_sounddata_t::set_is_sentence(bool value) {
  _internal_set_is_sentence(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_Sounds.sounddata_t.is_sentence)
}

// optional bool is_ambient = 17;
inline bool CSVCMsg_Sounds_sounddata_t::_internal_has_is_ambient() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool CSVCMsg_Sounds_sounddata_t::has_is_ambient() const {
  return _internal_has_is_ambient();
}
inline void CSVCMsg_Sounds_sounddata_t::clear_is_ambient() {
  is_ambient_ = false;
  _has_bits_[0] &= ~0x00010000u;
}
inline bool CSVCMsg_Sounds_sounddata_t::_internal_is_ambient() const {
  return is_ambient_;
}
inline bool CSVCMsg_Sounds_sounddata_t::is_ambient() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_Sounds.sounddata_t.is_ambient)
  return _internal_is_ambient();
}
inline void CSVCMsg_Sounds_sounddata_t::_internal_set_is_ambient(bool value) {
  _has_bits_[0] |= 0x00010000u;
  is_ambient_ = value;
}
inline void CSVCMsg_Sounds_sounddata_t::set_is_ambient(bool value) {
  _internal_set_is_ambient(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_Sounds.sounddata_t.is_ambient)
}

// -------------------------------------------------------------------

// CSVCMsg_Sounds

// optional bool reliable_sound = 1;
inline bool CSVCMsg_Sounds::_internal_has_reliable_sound() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSVCMsg_Sounds::has_reliable_sound() const {
  return _internal_has_reliable_sound();
}
inline void CSVCMsg_Sounds::clear_reliable_sound() {
  reliable_sound_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool CSVCMsg_Sounds::_internal_reliable_sound() const {
  return reliable_sound_;
}
inline bool CSVCMsg_Sounds::reliable_sound() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_Sounds.reliable_sound)
  return _internal_reliable_sound();
}
inline void CSVCMsg_Sounds::_internal_set_reliable_sound(bool value) {
  _has_bits_[0] |= 0x00000001u;
  reliable_sound_ = value;
}
inline void CSVCMsg_Sounds::set_reliable_sound(bool value) {
  _internal_set_reliable_sound(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_Sounds.reliable_sound)
}

// repeated .CSVCMsg_Sounds.sounddata_t sounds = 2;
inline int CSVCMsg_Sounds::_internal_sounds_size() const {
  return sounds_.size();
}
inline int CSVCMsg_Sounds::sounds_size() const {
  return _internal_sounds_size();
}
inline void CSVCMsg_Sounds::clear_sounds() {
  sounds_.Clear();
}
inline ::CSVCMsg_Sounds_sounddata_t* CSVCMsg_Sounds::mutable_sounds(int index) {
  // @@protoc_insertion_point(field_mutable:CSVCMsg_Sounds.sounds)
  return sounds_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSVCMsg_Sounds_sounddata_t >*
CSVCMsg_Sounds::mutable_sounds() {
  // @@protoc_insertion_point(field_mutable_list:CSVCMsg_Sounds.sounds)
  return &sounds_;
}
inline const ::CSVCMsg_Sounds_sounddata_t& CSVCMsg_Sounds::_internal_sounds(int index) const {
  return sounds_.Get(index);
}
inline const ::CSVCMsg_Sounds_sounddata_t& CSVCMsg_Sounds::sounds(int index) const {
  // @@protoc_insertion_point(field_get:CSVCMsg_Sounds.sounds)
  return _internal_sounds(index);
}
inline ::CSVCMsg_Sounds_sounddata_t* CSVCMsg_Sounds::_internal_add_sounds() {
  return sounds_.Add();
}
inline ::CSVCMsg_Sounds_sounddata_t* CSVCMsg_Sounds::add_sounds() {
  ::CSVCMsg_Sounds_sounddata_t* _add = _internal_add_sounds();
  // @@protoc_insertion_point(field_add:CSVCMsg_Sounds.sounds)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSVCMsg_Sounds_sounddata_t >&
CSVCMsg_Sounds::sounds() const {
  // @@protoc_insertion_point(field_list:CSVCMsg_Sounds.sounds)
  return sounds_;
}

// -------------------------------------------------------------------

// CSVCMsg_EntityMsg

// optional int32 ent_index = 1;
inline bool CSVCMsg_EntityMsg::_internal_has_ent_index() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSVCMsg_EntityMsg::has_ent_index() const {
  return _internal_has_ent_index();
}
inline void CSVCMsg_EntityMsg::clear_ent_index() {
  ent_index_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_EntityMsg::_internal_ent_index() const {
  return ent_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_EntityMsg::ent_index() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_EntityMsg.ent_index)
  return _internal_ent_index();
}
inline void CSVCMsg_EntityMsg::_internal_set_ent_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  ent_index_ = value;
}
inline void CSVCMsg_EntityMsg::set_ent_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ent_index(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_EntityMsg.ent_index)
}

// optional int32 class_id = 2;
inline bool CSVCMsg_EntityMsg::_internal_has_class_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CSVCMsg_EntityMsg::has_class_id() const {
  return _internal_has_class_id();
}
inline void CSVCMsg_EntityMsg::clear_class_id() {
  class_id_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_EntityMsg::_internal_class_id() const {
  return class_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_EntityMsg::class_id() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_EntityMsg.class_id)
  return _internal_class_id();
}
inline void CSVCMsg_EntityMsg::_internal_set_class_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  class_id_ = value;
}
inline void CSVCMsg_EntityMsg::set_class_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_class_id(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_EntityMsg.class_id)
}

// optional bytes ent_data = 3;
inline bool CSVCMsg_EntityMsg::_internal_has_ent_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSVCMsg_EntityMsg::has_ent_data() const {
  return _internal_has_ent_data();
}
inline void CSVCMsg_EntityMsg::clear_ent_data() {
  ent_data_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CSVCMsg_EntityMsg::ent_data() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_EntityMsg.ent_data)
  return _internal_ent_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSVCMsg_EntityMsg::set_ent_data(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 ent_data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CSVCMsg_EntityMsg.ent_data)
}
inline std::string* CSVCMsg_EntityMsg::mutable_ent_data() {
  std::string* _s = _internal_mutable_ent_data();
  // @@protoc_insertion_point(field_mutable:CSVCMsg_EntityMsg.ent_data)
  return _s;
}
inline const std::string& CSVCMsg_EntityMsg::_internal_ent_data() const {
  return ent_data_.Get();
}
inline void CSVCMsg_EntityMsg::_internal_set_ent_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  ent_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CSVCMsg_EntityMsg::_internal_mutable_ent_data() {
  _has_bits_[0] |= 0x00000001u;
  return ent_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CSVCMsg_EntityMsg::release_ent_data() {
  // @@protoc_insertion_point(field_release:CSVCMsg_EntityMsg.ent_data)
  if (!_internal_has_ent_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return ent_data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CSVCMsg_EntityMsg::set_allocated_ent_data(std::string* ent_data) {
  if (ent_data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ent_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ent_data,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CSVCMsg_EntityMsg.ent_data)
}

// -------------------------------------------------------------------

// CSVCMsg_CmdKeyValues

// optional bytes keyvalues = 1;
inline bool CSVCMsg_CmdKeyValues::_internal_has_keyvalues() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSVCMsg_CmdKeyValues::has_keyvalues() const {
  return _internal_has_keyvalues();
}
inline void CSVCMsg_CmdKeyValues::clear_keyvalues() {
  keyvalues_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CSVCMsg_CmdKeyValues::keyvalues() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_CmdKeyValues.keyvalues)
  return _internal_keyvalues();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSVCMsg_CmdKeyValues::set_keyvalues(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 keyvalues_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CSVCMsg_CmdKeyValues.keyvalues)
}
inline std::string* CSVCMsg_CmdKeyValues::mutable_keyvalues() {
  std::string* _s = _internal_mutable_keyvalues();
  // @@protoc_insertion_point(field_mutable:CSVCMsg_CmdKeyValues.keyvalues)
  return _s;
}
inline const std::string& CSVCMsg_CmdKeyValues::_internal_keyvalues() const {
  return keyvalues_.Get();
}
inline void CSVCMsg_CmdKeyValues::_internal_set_keyvalues(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  keyvalues_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CSVCMsg_CmdKeyValues::_internal_mutable_keyvalues() {
  _has_bits_[0] |= 0x00000001u;
  return keyvalues_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CSVCMsg_CmdKeyValues::release_keyvalues() {
  // @@protoc_insertion_point(field_release:CSVCMsg_CmdKeyValues.keyvalues)
  if (!_internal_has_keyvalues()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return keyvalues_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CSVCMsg_CmdKeyValues::set_allocated_keyvalues(std::string* keyvalues) {
  if (keyvalues != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  keyvalues_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), keyvalues,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CSVCMsg_CmdKeyValues.keyvalues)
}

// -------------------------------------------------------------------

// CSVCMsg_EncryptedData

// optional bytes encrypted = 1;
inline bool CSVCMsg_EncryptedData::_internal_has_encrypted() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSVCMsg_EncryptedData::has_encrypted() const {
  return _internal_has_encrypted();
}
inline void CSVCMsg_EncryptedData::clear_encrypted() {
  encrypted_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CSVCMsg_EncryptedData::encrypted() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_EncryptedData.encrypted)
  return _internal_encrypted();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSVCMsg_EncryptedData::set_encrypted(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 encrypted_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CSVCMsg_EncryptedData.encrypted)
}
inline std::string* CSVCMsg_EncryptedData::mutable_encrypted() {
  std::string* _s = _internal_mutable_encrypted();
  // @@protoc_insertion_point(field_mutable:CSVCMsg_EncryptedData.encrypted)
  return _s;
}
inline const std::string& CSVCMsg_EncryptedData::_internal_encrypted() const {
  return encrypted_.Get();
}
inline void CSVCMsg_EncryptedData::_internal_set_encrypted(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  encrypted_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CSVCMsg_EncryptedData::_internal_mutable_encrypted() {
  _has_bits_[0] |= 0x00000001u;
  return encrypted_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CSVCMsg_EncryptedData::release_encrypted() {
  // @@protoc_insertion_point(field_release:CSVCMsg_EncryptedData.encrypted)
  if (!_internal_has_encrypted()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return encrypted_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CSVCMsg_EncryptedData::set_allocated_encrypted(std::string* encrypted) {
  if (encrypted != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  encrypted_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), encrypted,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CSVCMsg_EncryptedData.encrypted)
}

// optional int32 key_type = 2;
inline bool CSVCMsg_EncryptedData::_internal_has_key_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSVCMsg_EncryptedData::has_key_type() const {
  return _internal_has_key_type();
}
inline void CSVCMsg_EncryptedData::clear_key_type() {
  key_type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_EncryptedData::_internal_key_type() const {
  return key_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_EncryptedData::key_type() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_EncryptedData.key_type)
  return _internal_key_type();
}
inline void CSVCMsg_EncryptedData::_internal_set_key_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  key_type_ = value;
}
inline void CSVCMsg_EncryptedData::set_key_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_key_type(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_EncryptedData.key_type)
}

// -------------------------------------------------------------------

// CSVCMsg_HltvReplay

// optional int32 delay = 1;
inline bool CSVCMsg_HltvReplay::_internal_has_delay() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSVCMsg_HltvReplay::has_delay() const {
  return _internal_has_delay();
}
inline void CSVCMsg_HltvReplay::clear_delay() {
  delay_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_HltvReplay::_internal_delay() const {
  return delay_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_HltvReplay::delay() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_HltvReplay.delay)
  return _internal_delay();
}
inline void CSVCMsg_HltvReplay::_internal_set_delay(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  delay_ = value;
}
inline void CSVCMsg_HltvReplay::set_delay(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_delay(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_HltvReplay.delay)
}

// optional int32 primary_target = 2;
inline bool CSVCMsg_HltvReplay::_internal_has_primary_target() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSVCMsg_HltvReplay::has_primary_target() const {
  return _internal_has_primary_target();
}
inline void CSVCMsg_HltvReplay::clear_primary_target() {
  primary_target_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_HltvReplay::_internal_primary_target() const {
  return primary_target_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_HltvReplay::primary_target() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_HltvReplay.primary_target)
  return _internal_primary_target();
}
inline void CSVCMsg_HltvReplay::_internal_set_primary_target(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  primary_target_ = value;
}
inline void CSVCMsg_HltvReplay::set_primary_target(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_primary_target(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_HltvReplay.primary_target)
}

// optional int32 replay_stop_at = 3;
inline bool CSVCMsg_HltvReplay::_internal_has_replay_stop_at() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CSVCMsg_HltvReplay::has_replay_stop_at() const {
  return _internal_has_replay_stop_at();
}
inline void CSVCMsg_HltvReplay::clear_replay_stop_at() {
  replay_stop_at_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_HltvReplay::_internal_replay_stop_at() const {
  return replay_stop_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_HltvReplay::replay_stop_at() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_HltvReplay.replay_stop_at)
  return _internal_replay_stop_at();
}
inline void CSVCMsg_HltvReplay::_internal_set_replay_stop_at(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  replay_stop_at_ = value;
}
inline void CSVCMsg_HltvReplay::set_replay_stop_at(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_replay_stop_at(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_HltvReplay.replay_stop_at)
}

// optional int32 replay_start_at = 4;
inline bool CSVCMsg_HltvReplay::_internal_has_replay_start_at() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CSVCMsg_HltvReplay::has_replay_start_at() const {
  return _internal_has_replay_start_at();
}
inline void CSVCMsg_HltvReplay::clear_replay_start_at() {
  replay_start_at_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_HltvReplay::_internal_replay_start_at() const {
  return replay_start_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_HltvReplay::replay_start_at() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_HltvReplay.replay_start_at)
  return _internal_replay_start_at();
}
inline void CSVCMsg_HltvReplay::_internal_set_replay_start_at(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  replay_start_at_ = value;
}
inline void CSVCMsg_HltvReplay::set_replay_start_at(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_replay_start_at(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_HltvReplay.replay_start_at)
}

// optional int32 replay_slowdown_begin = 5;
inline bool CSVCMsg_HltvReplay::_internal_has_replay_slowdown_begin() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CSVCMsg_HltvReplay::has_replay_slowdown_begin() const {
  return _internal_has_replay_slowdown_begin();
}
inline void CSVCMsg_HltvReplay::clear_replay_slowdown_begin() {
  replay_slowdown_begin_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_HltvReplay::_internal_replay_slowdown_begin() const {
  return replay_slowdown_begin_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_HltvReplay::replay_slowdown_begin() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_HltvReplay.replay_slowdown_begin)
  return _internal_replay_slowdown_begin();
}
inline void CSVCMsg_HltvReplay::_internal_set_replay_slowdown_begin(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  replay_slowdown_begin_ = value;
}
inline void CSVCMsg_HltvReplay::set_replay_slowdown_begin(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_replay_slowdown_begin(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_HltvReplay.replay_slowdown_begin)
}

// optional int32 replay_slowdown_end = 6;
inline bool CSVCMsg_HltvReplay::_internal_has_replay_slowdown_end() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CSVCMsg_HltvReplay::has_replay_slowdown_end() const {
  return _internal_has_replay_slowdown_end();
}
inline void CSVCMsg_HltvReplay::clear_replay_slowdown_end() {
  replay_slowdown_end_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_HltvReplay::_internal_replay_slowdown_end() const {
  return replay_slowdown_end_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_HltvReplay::replay_slowdown_end() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_HltvReplay.replay_slowdown_end)
  return _internal_replay_slowdown_end();
}
inline void CSVCMsg_HltvReplay::_internal_set_replay_slowdown_end(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  replay_slowdown_end_ = value;
}
inline void CSVCMsg_HltvReplay::set_replay_slowdown_end(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_replay_slowdown_end(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_HltvReplay.replay_slowdown_end)
}

// optional float replay_slowdown_rate = 7;
inline bool CSVCMsg_HltvReplay::_internal_has_replay_slowdown_rate() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CSVCMsg_HltvReplay::has_replay_slowdown_rate() const {
  return _internal_has_replay_slowdown_rate();
}
inline void CSVCMsg_HltvReplay::clear_replay_slowdown_rate() {
  replay_slowdown_rate_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float CSVCMsg_HltvReplay::_internal_replay_slowdown_rate() const {
  return replay_slowdown_rate_;
}
inline float CSVCMsg_HltvReplay::replay_slowdown_rate() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_HltvReplay.replay_slowdown_rate)
  return _internal_replay_slowdown_rate();
}
inline void CSVCMsg_HltvReplay::_internal_set_replay_slowdown_rate(float value) {
  _has_bits_[0] |= 0x00000040u;
  replay_slowdown_rate_ = value;
}
inline void CSVCMsg_HltvReplay::set_replay_slowdown_rate(float value) {
  _internal_set_replay_slowdown_rate(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_HltvReplay.replay_slowdown_rate)
}

// -------------------------------------------------------------------

// CCLCMsg_HltvReplay

// optional int32 request = 1;
inline bool CCLCMsg_HltvReplay::_internal_has_request() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCLCMsg_HltvReplay::has_request() const {
  return _internal_has_request();
}
inline void CCLCMsg_HltvReplay::clear_request() {
  request_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CCLCMsg_HltvReplay::_internal_request() const {
  return request_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CCLCMsg_HltvReplay::request() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_HltvReplay.request)
  return _internal_request();
}
inline void CCLCMsg_HltvReplay::_internal_set_request(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  request_ = value;
}
inline void CCLCMsg_HltvReplay::set_request(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_request(value);
  // @@protoc_insertion_point(field_set:CCLCMsg_HltvReplay.request)
}

// optional float slowdown_length = 2;
inline bool CCLCMsg_HltvReplay::_internal_has_slowdown_length() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CCLCMsg_HltvReplay::has_slowdown_length() const {
  return _internal_has_slowdown_length();
}
inline void CCLCMsg_HltvReplay::clear_slowdown_length() {
  slowdown_length_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float CCLCMsg_HltvReplay::_internal_slowdown_length() const {
  return slowdown_length_;
}
inline float CCLCMsg_HltvReplay::slowdown_length() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_HltvReplay.slowdown_length)
  return _internal_slowdown_length();
}
inline void CCLCMsg_HltvReplay::_internal_set_slowdown_length(float value) {
  _has_bits_[0] |= 0x00000002u;
  slowdown_length_ = value;
}
inline void CCLCMsg_HltvReplay::set_slowdown_length(float value) {
  _internal_set_slowdown_length(value);
  // @@protoc_insertion_point(field_set:CCLCMsg_HltvReplay.slowdown_length)
}

// optional float slowdown_rate = 3;
inline bool CCLCMsg_HltvReplay::_internal_has_slowdown_rate() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CCLCMsg_HltvReplay::has_slowdown_rate() const {
  return _internal_has_slowdown_rate();
}
inline void CCLCMsg_HltvReplay::clear_slowdown_rate() {
  slowdown_rate_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float CCLCMsg_HltvReplay::_internal_slowdown_rate() const {
  return slowdown_rate_;
}
inline float CCLCMsg_HltvReplay::slowdown_rate() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_HltvReplay.slowdown_rate)
  return _internal_slowdown_rate();
}
inline void CCLCMsg_HltvReplay::_internal_set_slowdown_rate(float value) {
  _has_bits_[0] |= 0x00000004u;
  slowdown_rate_ = value;
}
inline void CCLCMsg_HltvReplay::set_slowdown_rate(float value) {
  _internal_set_slowdown_rate(value);
  // @@protoc_insertion_point(field_set:CCLCMsg_HltvReplay.slowdown_rate)
}

// optional int32 primary_target_ent_index = 4;
inline bool CCLCMsg_HltvReplay::_internal_has_primary_target_ent_index() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CCLCMsg_HltvReplay::has_primary_target_ent_index() const {
  return _internal_has_primary_target_ent_index();
}
inline void CCLCMsg_HltvReplay::clear_primary_target_ent_index() {
  primary_target_ent_index_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CCLCMsg_HltvReplay::_internal_primary_target_ent_index() const {
  return primary_target_ent_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CCLCMsg_HltvReplay::primary_target_ent_index() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_HltvReplay.primary_target_ent_index)
  return _internal_primary_target_ent_index();
}
inline void CCLCMsg_HltvReplay::_internal_set_primary_target_ent_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  primary_target_ent_index_ = value;
}
inline void CCLCMsg_HltvReplay::set_primary_target_ent_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_primary_target_ent_index(value);
  // @@protoc_insertion_point(field_set:CCLCMsg_HltvReplay.primary_target_ent_index)
}

// optional float event_time = 5;
inline bool CCLCMsg_HltvReplay::_internal_has_event_time() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CCLCMsg_HltvReplay::has_event_time() const {
  return _internal_has_event_time();
}
inline void CCLCMsg_HltvReplay::clear_event_time() {
  event_time_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float CCLCMsg_HltvReplay::_internal_event_time() const {
  return event_time_;
}
inline float CCLCMsg_HltvReplay::event_time() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_HltvReplay.event_time)
  return _internal_event_time();
}
inline void CCLCMsg_HltvReplay::_internal_set_event_time(float value) {
  _has_bits_[0] |= 0x00000010u;
  event_time_ = value;
}
inline void CCLCMsg_HltvReplay::set_event_time(float value) {
  _internal_set_event_time(value);
  // @@protoc_insertion_point(field_set:CCLCMsg_HltvReplay.event_time)
}

// -------------------------------------------------------------------

// CSVCMsg_Broadcast_Command

// optional string cmd = 1;
inline bool CSVCMsg_Broadcast_Command::_internal_has_cmd() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSVCMsg_Broadcast_Command::has_cmd() const {
  return _internal_has_cmd();
}
inline void CSVCMsg_Broadcast_Command::clear_cmd() {
  cmd_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CSVCMsg_Broadcast_Command::cmd() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_Broadcast_Command.cmd)
  return _internal_cmd();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSVCMsg_Broadcast_Command::set_cmd(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 cmd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CSVCMsg_Broadcast_Command.cmd)
}
inline std::string* CSVCMsg_Broadcast_Command::mutable_cmd() {
  std::string* _s = _internal_mutable_cmd();
  // @@protoc_insertion_point(field_mutable:CSVCMsg_Broadcast_Command.cmd)
  return _s;
}
inline const std::string& CSVCMsg_Broadcast_Command::_internal_cmd() const {
  return cmd_.Get();
}
inline void CSVCMsg_Broadcast_Command::_internal_set_cmd(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  cmd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CSVCMsg_Broadcast_Command::_internal_mutable_cmd() {
  _has_bits_[0] |= 0x00000001u;
  return cmd_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CSVCMsg_Broadcast_Command::release_cmd() {
  // @@protoc_insertion_point(field_release:CSVCMsg_Broadcast_Command.cmd)
  if (!_internal_has_cmd()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return cmd_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CSVCMsg_Broadcast_Command::set_allocated_cmd(std::string* cmd) {
  if (cmd != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  cmd_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cmd,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CSVCMsg_Broadcast_Command.cmd)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::NET_Messages> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NET_Messages>() {
  return ::NET_Messages_descriptor();
}
template <> struct is_proto_enum< ::CLC_Messages> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CLC_Messages>() {
  return ::CLC_Messages_descriptor();
}
template <> struct is_proto_enum< ::VoiceDataFormat_t> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::VoiceDataFormat_t>() {
  return ::VoiceDataFormat_t_descriptor();
}
template <> struct is_proto_enum< ::ESplitScreenMessageType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ESplitScreenMessageType>() {
  return ::ESplitScreenMessageType_descriptor();
}
template <> struct is_proto_enum< ::SVC_Messages> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SVC_Messages>() {
  return ::SVC_Messages_descriptor();
}
template <> struct is_proto_enum< ::ReplayEventType_t> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ReplayEventType_t>() {
  return ::ReplayEventType_t_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_netmessages_2eproto
