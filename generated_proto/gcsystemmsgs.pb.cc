// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gcsystemmsgs.proto

#include "gcsystemmsgs.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CMsgGCHVacVerificationChange::CMsgGCHVacVerificationChange(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steamid_(uint64_t{0u})
  , appid_(0u)
  , is_verified_(false){}
struct CMsgGCHVacVerificationChangeDefaultTypeInternal {
  constexpr CMsgGCHVacVerificationChangeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCHVacVerificationChangeDefaultTypeInternal() {}
  union {
    CMsgGCHVacVerificationChange _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCHVacVerificationChangeDefaultTypeInternal _CMsgGCHVacVerificationChange_default_instance_;
constexpr CMsgGCHAccountPhoneNumberChange::CMsgGCHAccountPhoneNumberChange(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steamid_(uint64_t{0u})
  , phone_id_(uint64_t{0u})
  , appid_(0u)
  , is_verified_(false)
  , is_identifying_(false){}
struct CMsgGCHAccountPhoneNumberChangeDefaultTypeInternal {
  constexpr CMsgGCHAccountPhoneNumberChangeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCHAccountPhoneNumberChangeDefaultTypeInternal() {}
  union {
    CMsgGCHAccountPhoneNumberChange _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCHAccountPhoneNumberChangeDefaultTypeInternal _CMsgGCHAccountPhoneNumberChange_default_instance_;
constexpr CMsgGCHInviteUserToLobby::CMsgGCHInviteUserToLobby(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steamid_(uint64_t{0u})
  , steamid_invited_(uint64_t{0u})
  , steamid_lobby_(uint64_t{0u})
  , appid_(0u){}
struct CMsgGCHInviteUserToLobbyDefaultTypeInternal {
  constexpr CMsgGCHInviteUserToLobbyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCHInviteUserToLobbyDefaultTypeInternal() {}
  union {
    CMsgGCHInviteUserToLobby _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCHInviteUserToLobbyDefaultTypeInternal _CMsgGCHInviteUserToLobby_default_instance_;
constexpr CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(uint64_t{0u})
  , attribute_(0u){}
struct CQuest_PublisherAddCommunityItemsToPlayer_Request_AttributeDefaultTypeInternal {
  constexpr CQuest_PublisherAddCommunityItemsToPlayer_Request_AttributeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CQuest_PublisherAddCommunityItemsToPlayer_Request_AttributeDefaultTypeInternal() {}
  union {
    CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CQuest_PublisherAddCommunityItemsToPlayer_Request_AttributeDefaultTypeInternal _CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute_default_instance_;
constexpr CQuest_PublisherAddCommunityItemsToPlayer_Request::CQuest_PublisherAddCommunityItemsToPlayer_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : attributes_()
  , prefix_item_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , note_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , steamid_(uint64_t{0u})
  , appid_(0u)
  , match_item_type_(0u)
  , match_item_class_(0u){}
struct CQuest_PublisherAddCommunityItemsToPlayer_RequestDefaultTypeInternal {
  constexpr CQuest_PublisherAddCommunityItemsToPlayer_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CQuest_PublisherAddCommunityItemsToPlayer_RequestDefaultTypeInternal() {}
  union {
    CQuest_PublisherAddCommunityItemsToPlayer_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CQuest_PublisherAddCommunityItemsToPlayer_RequestDefaultTypeInternal _CQuest_PublisherAddCommunityItemsToPlayer_Request_default_instance_;
constexpr CQuest_PublisherAddCommunityItemsToPlayer_Response::CQuest_PublisherAddCommunityItemsToPlayer_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : items_matched_(0u)
  , items_granted_(0u){}
struct CQuest_PublisherAddCommunityItemsToPlayer_ResponseDefaultTypeInternal {
  constexpr CQuest_PublisherAddCommunityItemsToPlayer_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CQuest_PublisherAddCommunityItemsToPlayer_ResponseDefaultTypeInternal() {}
  union {
    CQuest_PublisherAddCommunityItemsToPlayer_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CQuest_PublisherAddCommunityItemsToPlayer_ResponseDefaultTypeInternal _CQuest_PublisherAddCommunityItemsToPlayer_Response_default_instance_;
constexpr CCommunity_GamePersonalDataCategoryInfo::CCommunity_GamePersonalDataCategoryInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , localization_token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , template_file_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CCommunity_GamePersonalDataCategoryInfoDefaultTypeInternal {
  constexpr CCommunity_GamePersonalDataCategoryInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCommunity_GamePersonalDataCategoryInfoDefaultTypeInternal() {}
  union {
    CCommunity_GamePersonalDataCategoryInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCommunity_GamePersonalDataCategoryInfoDefaultTypeInternal _CCommunity_GamePersonalDataCategoryInfo_default_instance_;
constexpr CCommunity_GetGamePersonalDataCategories_Request::CCommunity_GetGamePersonalDataCategories_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : appid_(0u){}
struct CCommunity_GetGamePersonalDataCategories_RequestDefaultTypeInternal {
  constexpr CCommunity_GetGamePersonalDataCategories_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCommunity_GetGamePersonalDataCategories_RequestDefaultTypeInternal() {}
  union {
    CCommunity_GetGamePersonalDataCategories_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCommunity_GetGamePersonalDataCategories_RequestDefaultTypeInternal _CCommunity_GetGamePersonalDataCategories_Request_default_instance_;
constexpr CCommunity_GetGamePersonalDataCategories_Response::CCommunity_GetGamePersonalDataCategories_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : categories_()
  , app_assets_basename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CCommunity_GetGamePersonalDataCategories_ResponseDefaultTypeInternal {
  constexpr CCommunity_GetGamePersonalDataCategories_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCommunity_GetGamePersonalDataCategories_ResponseDefaultTypeInternal() {}
  union {
    CCommunity_GetGamePersonalDataCategories_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCommunity_GetGamePersonalDataCategories_ResponseDefaultTypeInternal _CCommunity_GetGamePersonalDataCategories_Response_default_instance_;
constexpr CCommunity_GetGamePersonalDataEntries_Request::CCommunity_GetGamePersonalDataEntries_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , continue_token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , steamid_(uint64_t{0u})
  , appid_(0u){}
struct CCommunity_GetGamePersonalDataEntries_RequestDefaultTypeInternal {
  constexpr CCommunity_GetGamePersonalDataEntries_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCommunity_GetGamePersonalDataEntries_RequestDefaultTypeInternal() {}
  union {
    CCommunity_GetGamePersonalDataEntries_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCommunity_GetGamePersonalDataEntries_RequestDefaultTypeInternal _CCommunity_GetGamePersonalDataEntries_Request_default_instance_;
constexpr CCommunity_GetGamePersonalDataEntries_Response::CCommunity_GetGamePersonalDataEntries_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : entries_()
  , continue_token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , gceresult_(0u){}
struct CCommunity_GetGamePersonalDataEntries_ResponseDefaultTypeInternal {
  constexpr CCommunity_GetGamePersonalDataEntries_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCommunity_GetGamePersonalDataEntries_ResponseDefaultTypeInternal() {}
  union {
    CCommunity_GetGamePersonalDataEntries_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCommunity_GetGamePersonalDataEntries_ResponseDefaultTypeInternal _CCommunity_GetGamePersonalDataEntries_Response_default_instance_;
constexpr CCommunity_TerminateGamePersonalDataEntries_Request::CCommunity_TerminateGamePersonalDataEntries_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steamid_(uint64_t{0u})
  , appid_(0u){}
struct CCommunity_TerminateGamePersonalDataEntries_RequestDefaultTypeInternal {
  constexpr CCommunity_TerminateGamePersonalDataEntries_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCommunity_TerminateGamePersonalDataEntries_RequestDefaultTypeInternal() {}
  union {
    CCommunity_TerminateGamePersonalDataEntries_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCommunity_TerminateGamePersonalDataEntries_RequestDefaultTypeInternal _CCommunity_TerminateGamePersonalDataEntries_Request_default_instance_;
constexpr CCommunity_TerminateGamePersonalDataEntries_Response::CCommunity_TerminateGamePersonalDataEntries_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : gceresult_(0u){}
struct CCommunity_TerminateGamePersonalDataEntries_ResponseDefaultTypeInternal {
  constexpr CCommunity_TerminateGamePersonalDataEntries_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCommunity_TerminateGamePersonalDataEntries_ResponseDefaultTypeInternal() {}
  union {
    CCommunity_TerminateGamePersonalDataEntries_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCommunity_TerminateGamePersonalDataEntries_ResponseDefaultTypeInternal _CCommunity_TerminateGamePersonalDataEntries_Response_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_gcsystemmsgs_2eproto[13];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_gcsystemmsgs_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_gcsystemmsgs_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_gcsystemmsgs_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CMsgGCHVacVerificationChange, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCHVacVerificationChange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCHVacVerificationChange, steamid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCHVacVerificationChange, appid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCHVacVerificationChange, is_verified_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgGCHAccountPhoneNumberChange, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCHAccountPhoneNumberChange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCHAccountPhoneNumberChange, steamid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCHAccountPhoneNumberChange, appid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCHAccountPhoneNumberChange, phone_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCHAccountPhoneNumberChange, is_verified_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCHAccountPhoneNumberChange, is_identifying_),
  0,
  2,
  1,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgGCHInviteUserToLobby, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCHInviteUserToLobby, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCHInviteUserToLobby, steamid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCHInviteUserToLobby, appid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCHInviteUserToLobby, steamid_invited_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCHInviteUserToLobby, steamid_lobby_),
  0,
  3,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute, attribute_),
  PROTOBUF_FIELD_OFFSET(::CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute, value_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CQuest_PublisherAddCommunityItemsToPlayer_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CQuest_PublisherAddCommunityItemsToPlayer_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CQuest_PublisherAddCommunityItemsToPlayer_Request, steamid_),
  PROTOBUF_FIELD_OFFSET(::CQuest_PublisherAddCommunityItemsToPlayer_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::CQuest_PublisherAddCommunityItemsToPlayer_Request, match_item_type_),
  PROTOBUF_FIELD_OFFSET(::CQuest_PublisherAddCommunityItemsToPlayer_Request, match_item_class_),
  PROTOBUF_FIELD_OFFSET(::CQuest_PublisherAddCommunityItemsToPlayer_Request, prefix_item_name_),
  PROTOBUF_FIELD_OFFSET(::CQuest_PublisherAddCommunityItemsToPlayer_Request, attributes_),
  PROTOBUF_FIELD_OFFSET(::CQuest_PublisherAddCommunityItemsToPlayer_Request, note_),
  2,
  3,
  4,
  5,
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::CQuest_PublisherAddCommunityItemsToPlayer_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CQuest_PublisherAddCommunityItemsToPlayer_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CQuest_PublisherAddCommunityItemsToPlayer_Response, items_matched_),
  PROTOBUF_FIELD_OFFSET(::CQuest_PublisherAddCommunityItemsToPlayer_Response, items_granted_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CCommunity_GamePersonalDataCategoryInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GamePersonalDataCategoryInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCommunity_GamePersonalDataCategoryInfo, type_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GamePersonalDataCategoryInfo, localization_token_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GamePersonalDataCategoryInfo, template_file_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetGamePersonalDataCategories_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetGamePersonalDataCategories_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetGamePersonalDataCategories_Request, appid_),
  0,
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetGamePersonalDataCategories_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetGamePersonalDataCategories_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetGamePersonalDataCategories_Response, categories_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetGamePersonalDataCategories_Response, app_assets_basename_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetGamePersonalDataEntries_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetGamePersonalDataEntries_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetGamePersonalDataEntries_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetGamePersonalDataEntries_Request, steamid_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetGamePersonalDataEntries_Request, type_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetGamePersonalDataEntries_Request, continue_token_),
  3,
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetGamePersonalDataEntries_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetGamePersonalDataEntries_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetGamePersonalDataEntries_Response, gceresult_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetGamePersonalDataEntries_Response, entries_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetGamePersonalDataEntries_Response, continue_token_),
  1,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::CCommunity_TerminateGamePersonalDataEntries_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_TerminateGamePersonalDataEntries_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCommunity_TerminateGamePersonalDataEntries_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_TerminateGamePersonalDataEntries_Request, steamid_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CCommunity_TerminateGamePersonalDataEntries_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_TerminateGamePersonalDataEntries_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCommunity_TerminateGamePersonalDataEntries_Response, gceresult_),
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, -1, sizeof(::CMsgGCHVacVerificationChange)},
  { 12, 23, -1, sizeof(::CMsgGCHAccountPhoneNumberChange)},
  { 28, 38, -1, sizeof(::CMsgGCHInviteUserToLobby)},
  { 42, 50, -1, sizeof(::CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute)},
  { 52, 65, -1, sizeof(::CQuest_PublisherAddCommunityItemsToPlayer_Request)},
  { 72, 80, -1, sizeof(::CQuest_PublisherAddCommunityItemsToPlayer_Response)},
  { 82, 91, -1, sizeof(::CCommunity_GamePersonalDataCategoryInfo)},
  { 94, 101, -1, sizeof(::CCommunity_GetGamePersonalDataCategories_Request)},
  { 102, 110, -1, sizeof(::CCommunity_GetGamePersonalDataCategories_Response)},
  { 112, 122, -1, sizeof(::CCommunity_GetGamePersonalDataEntries_Request)},
  { 126, 135, -1, sizeof(::CCommunity_GetGamePersonalDataEntries_Response)},
  { 138, 146, -1, sizeof(::CCommunity_TerminateGamePersonalDataEntries_Request)},
  { 148, 155, -1, sizeof(::CCommunity_TerminateGamePersonalDataEntries_Response)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCHVacVerificationChange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCHAccountPhoneNumberChange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCHInviteUserToLobby_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CQuest_PublisherAddCommunityItemsToPlayer_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CQuest_PublisherAddCommunityItemsToPlayer_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCommunity_GamePersonalDataCategoryInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCommunity_GetGamePersonalDataCategories_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCommunity_GetGamePersonalDataCategories_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCommunity_GetGamePersonalDataEntries_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCommunity_GetGamePersonalDataEntries_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCommunity_TerminateGamePersonalDataEntries_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCommunity_TerminateGamePersonalDataEntries_Response_default_instance_),
};

const char descriptor_table_protodef_gcsystemmsgs_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022gcsystemmsgs.proto\"S\n\034CMsgGCHVacVerifi"
  "cationChange\022\017\n\007steamid\030\001 \001(\006\022\r\n\005appid\030\002"
  " \001(\r\022\023\n\013is_verified\030\003 \001(\010\"\200\001\n\037CMsgGCHAcc"
  "ountPhoneNumberChange\022\017\n\007steamid\030\001 \001(\006\022\r"
  "\n\005appid\030\002 \001(\r\022\020\n\010phone_id\030\003 \001(\004\022\023\n\013is_ve"
  "rified\030\004 \001(\010\022\026\n\016is_identifying\030\005 \001(\010\"j\n\030"
  "CMsgGCHInviteUserToLobby\022\017\n\007steamid\030\001 \001("
  "\006\022\r\n\005appid\030\002 \001(\r\022\027\n\017steamid_invited\030\003 \001("
  "\006\022\025\n\rsteamid_lobby\030\004 \001(\006\"\257\002\n1CQuest_Publ"
  "isherAddCommunityItemsToPlayer_Request\022\017"
  "\n\007steamid\030\001 \001(\004\022\r\n\005appid\030\002 \001(\r\022\027\n\017match_"
  "item_type\030\003 \001(\r\022\030\n\020match_item_class\030\004 \001("
  "\r\022\030\n\020prefix_item_name\030\005 \001(\t\022P\n\nattribute"
  "s\030\006 \003(\0132<.CQuest_PublisherAddCommunityIt"
  "emsToPlayer_Request.Attribute\022\014\n\004note\030\007 "
  "\001(\t\032-\n\tAttribute\022\021\n\tattribute\030\001 \001(\r\022\r\n\005v"
  "alue\030\002 \001(\004\"b\n2CQuest_PublisherAddCommuni"
  "tyItemsToPlayer_Response\022\025\n\ritems_matche"
  "d\030\001 \001(\r\022\025\n\ritems_granted\030\002 \001(\r\"j\n\'CCommu"
  "nity_GamePersonalDataCategoryInfo\022\014\n\004typ"
  "e\030\001 \001(\t\022\032\n\022localization_token\030\002 \001(\t\022\025\n\rt"
  "emplate_file\030\003 \001(\t\"A\n0CCommunity_GetGame"
  "PersonalDataCategories_Request\022\r\n\005appid\030"
  "\001 \001(\r\"\216\001\n1CCommunity_GetGamePersonalData"
  "Categories_Response\022<\n\ncategories\030\001 \003(\0132"
  "(.CCommunity_GamePersonalDataCategoryInf"
  "o\022\033\n\023app_assets_basename\030\002 \001(\t\"u\n-CCommu"
  "nity_GetGamePersonalDataEntries_Request\022"
  "\r\n\005appid\030\001 \001(\r\022\017\n\007steamid\030\002 \001(\004\022\014\n\004type\030"
  "\003 \001(\t\022\026\n\016continue_token\030\004 \001(\t\"l\n.CCommun"
  "ity_GetGamePersonalDataEntries_Response\022"
  "\021\n\tgceresult\030\001 \001(\r\022\017\n\007entries\030\002 \003(\t\022\026\n\016c"
  "ontinue_token\030\003 \001(\t\"U\n3CCommunity_Termin"
  "ateGamePersonalDataEntries_Request\022\r\n\005ap"
  "pid\030\001 \001(\r\022\017\n\007steamid\030\002 \001(\004\"I\n4CCommunity"
  "_TerminateGamePersonalDataEntries_Respon"
  "se\022\021\n\tgceresult\030\001 \001(\r*\306\027\n\014EGCSystemMsg\022\023"
  "\n\017k_EGCMsgInvalid\020\000\022\021\n\rk_EGCMsgMulti\020\001\022\030"
  "\n\024k_EGCMsgGenericReply\020\n\022\026\n\022k_EGCMsgSyst"
  "emBase\0202\022\036\n\032k_EGCMsgAchievementAwarded\0203"
  "\022\026\n\022k_EGCMsgConCommand\0204\022\030\n\024k_EGCMsgStar"
  "tPlaying\0205\022\027\n\023k_EGCMsgStopPlaying\0206\022\033\n\027k"
  "_EGCMsgStartGameserver\0207\022\032\n\026k_EGCMsgStop"
  "Gameserver\0208\022\025\n\021k_EGCMsgWGRequest\0209\022\026\n\022k"
  "_EGCMsgWGResponse\020:\022\"\n\036k_EGCMsgGetUserGa"
  "meStatsSchema\020;\022*\n&k_EGCMsgGetUserGameSt"
  "atsSchemaResponse\020<\022\"\n\036k_EGCMsgGetUserSt"
  "atsDEPRECATED\020=\022 \n\034k_EGCMsgGetUserStatsR"
  "esponse\020>\022\032\n\026k_EGCMsgAppInfoUpdated\020\?\022\033\n"
  "\027k_EGCMsgValidateSession\020@\022#\n\037k_EGCMsgVa"
  "lidateSessionResponse\020A\022\"\n\036k_EGCMsgLooku"
  "pAccountFromInput\020B\022\033\n\027k_EGCMsgSendHTTPR"
  "equest\020C\022#\n\037k_EGCMsgSendHTTPRequestRespo"
  "nse\020D\022\030\n\024k_EGCMsgPreTestSetup\020E\022\037\n\033k_EGC"
  "MsgRecordSupportAction\020F\022(\n$k_EGCMsgGetA"
  "ccountDetails_DEPRECATED\020G\022\"\n\036k_EGCMsgRe"
  "ceiveInterAppMessage\020I\022\030\n\024k_EGCMsgFindAc"
  "counts\020J\022\025\n\021k_EGCMsgPostAlert\020K\022\027\n\023k_EGC"
  "MsgGetLicenses\020L\022\030\n\024k_EGCMsgGetUserStats"
  "\020M\022\027\n\023k_EGCMsgGetCommands\020N\022\037\n\033k_EGCMsgG"
  "etCommandsResponse\020O\022\032\n\026k_EGCMsgAddFreeL"
  "icense\020P\022\"\n\036k_EGCMsgAddFreeLicenseRespon"
  "se\020Q\022\031\n\025k_EGCMsgGetIPLocation\020R\022!\n\035k_EGC"
  "MsgGetIPLocationResponse\020S\022\035\n\031k_EGCMsgSy"
  "stemStatsSchema\020T\022\032\n\026k_EGCMsgGetSystemSt"
  "ats\020U\022\"\n\036k_EGCMsgGetSystemStatsResponse\020"
  "V\022\025\n\021k_EGCMsgSendEmail\020W\022\035\n\031k_EGCMsgSend"
  "EmailResponse\020X\022\034\n\030k_EGCMsgGetEmailTempl"
  "ate\020Y\022$\n k_EGCMsgGetEmailTemplateRespons"
  "e\020Z\022\032\n\026k_EGCMsgGrantGuestPass\020[\022\"\n\036k_EGC"
  "MsgGrantGuestPassResponse\020\\\022\035\n\031k_EGCMsgG"
  "etAccountDetails\020]\022%\n!k_EGCMsgGetAccount"
  "DetailsResponse\020^\022\033\n\027k_EGCMsgGetPersonaN"
  "ames\020_\022#\n\037k_EGCMsgGetPersonaNamesRespons"
  "e\020`\022\030\n\024k_EGCMsgMultiplexMsg\020a\022 \n\034k_EGCMs"
  "gMultiplexMsgResponse\020b\022$\n k_EGCMsgWebAP"
  "IRegisterInterfaces\020e\022\034\n\030k_EGCMsgWebAPIJ"
  "obRequest\020f\022(\n$k_EGCMsgWebAPIJobRequestH"
  "ttpResponse\020h\022+\n\'k_EGCMsgWebAPIJobReques"
  "tForwardResponse\020i\022\031\n\024k_EGCMsgMemCachedG"
  "et\020\310\001\022!\n\034k_EGCMsgMemCachedGetResponse\020\311\001"
  "\022\031\n\024k_EGCMsgMemCachedSet\020\312\001\022\034\n\027k_EGCMsgM"
  "emCachedDelete\020\313\001\022\033\n\026k_EGCMsgMemCachedSt"
  "ats\020\314\001\022#\n\036k_EGCMsgMemCachedStatsResponse"
  "\020\315\001\022\037\n\032k_EGCMsgMasterSetDirectory\020\334\001\022\'\n\""
  "k_EGCMsgMasterSetDirectoryResponse\020\335\001\022#\n"
  "\036k_EGCMsgMasterSetWebAPIRouting\020\336\001\022+\n&k_"
  "EGCMsgMasterSetWebAPIRoutingResponse\020\337\001\022"
  "&\n!k_EGCMsgMasterSetClientMsgRouting\020\340\001\022"
  ".\n)k_EGCMsgMasterSetClientMsgRoutingResp"
  "onse\020\341\001\022\027\n\022k_EGCMsgSetOptions\020\342\001\022\037\n\032k_EG"
  "CMsgSetOptionsResponse\020\343\001\022\030\n\023k_EGCMsgSys"
  "temBase2\020\364\003\022#\n\036k_EGCMsgGetPurchaseTrustS"
  "tatus\020\365\003\022+\n&k_EGCMsgGetPurchaseTrustStat"
  "usResponse\020\366\003\022\032\n\025k_EGCMsgUpdateSession\020\367"
  "\003\022%\n k_EGCMsgGCAccountVacStatusChange\020\370\003"
  "\022\034\n\027k_EGCMsgCheckFriendship\020\371\003\022$\n\037k_EGCM"
  "sgCheckFriendshipResponse\020\372\003\022\"\n\035k_EGCMsg"
  "GetPartnerAccountLink\020\373\003\022*\n%k_EGCMsgGetP"
  "artnerAccountLinkResponse\020\374\003\022\037\n\032k_EGCMsg"
  "DPPartnerMicroTxns\020\200\004\022\'\n\"k_EGCMsgDPPartn"
  "erMicroTxnsResponse\020\201\004\022\"\n\035k_EGCMsgVacVer"
  "ificationChange\020\206\004\022%\n k_EGCMsgAccountPho"
  "neNumberChange\020\207\004\022\036\n\031k_EGCMsgInviteUserT"
  "oLobby\020\213\004\0221\n,k_EGCMsgGetGamePersonalData"
  "CategoriesRequest\020\214\004\0222\n-k_EGCMsgGetGameP"
  "ersonalDataCategoriesResponse\020\215\004\022.\n)k_EG"
  "CMsgGetGamePersonalDataEntriesRequest\020\216\004"
  "\022/\n*k_EGCMsgGetGamePersonalDataEntriesRe"
  "sponse\020\217\004\0224\n/k_EGCMsgTerminateGamePerson"
  "alDataEntriesRequest\020\220\004\0225\n0k_EGCMsgTermi"
  "nateGamePersonalDataEntriesResponse\020\221\004*\357"
  "\001\n\006ESOMsg\022\023\n\017k_ESOMsg_Create\020\025\022\023\n\017k_ESOM"
  "sg_Update\020\026\022\024\n\020k_ESOMsg_Destroy\020\027\022\034\n\030k_E"
  "SOMsg_CacheSubscribed\020\030\022\036\n\032k_ESOMsg_Cach"
  "eUnsubscribed\020\031\022\033\n\027k_ESOMsg_UpdateMultip"
  "le\020\032\022#\n\037k_ESOMsg_CacheSubscriptionCheck\020"
  "\033\022%\n!k_ESOMsg_CacheSubscriptionRefresh\020\034"
  "*\331\002\n\020EGCBaseClientMsg\022\032\n\025k_EMsgGCClientW"
  "elcome\020\244\037\022\032\n\025k_EMsgGCServerWelcome\020\245\037\022\030\n"
  "\023k_EMsgGCClientHello\020\246\037\022\030\n\023k_EMsgGCServe"
  "rHello\020\247\037\022#\n\036k_EMsgGCClientConnectionSta"
  "tus\020\251\037\022#\n\036k_EMsgGCServerConnectionStatus"
  "\020\252\037\022\037\n\032k_EMsgGCClientHelloPartner\020\253\037\022\032\n\025"
  "k_EMsgGCClientHelloPW\020\254\037\022\032\n\025k_EMsgGCClie"
  "ntHelloR2\020\255\037\022\032\n\025k_EMsgGCClientHelloR3\020\256\037"
  "\022\032\n\025k_EMsgGCClientHelloR4\020\257\037*\211\002\n\nEGCToGC"
  "Msg\022\032\n\025k_EGCToGCMsgMasterAck\020\226\001\022\"\n\035k_EGC"
  "ToGCMsgMasterAckResponse\020\227\001\022\027\n\022k_EGCToGC"
  "MsgRouted\020\230\001\022\034\n\027k_EGCToGCMsgRoutedReply\020"
  "\231\001\022\032\n\025k_EMsgUpdateSessionIP\020\232\001\022\033\n\026k_EMsg"
  "RequestSessionIP\020\233\001\022#\n\036k_EMsgRequestSess"
  "ionIPResponse\020\234\001\022&\n!k_EGCToGCMsgMasterSt"
  "artupComplete\020\235\001*\260\003\n\023ECommunityItemClass"
  "\022!\n\035k_ECommunityItemClass_Invalid\020\000\022\037\n\033k"
  "_ECommunityItemClass_Badge\020\001\022\"\n\036k_ECommu"
  "nityItemClass_GameCard\020\002\022+\n\'k_ECommunity"
  "ItemClass_ProfileBackground\020\003\022\"\n\036k_EComm"
  "unityItemClass_Emoticon\020\004\022%\n!k_ECommunit"
  "yItemClass_BoosterPack\020\005\022$\n k_ECommunity"
  "ItemClass_Consumable\020\006\022!\n\035k_ECommunityIt"
  "emClass_GameGoo\020\007\022)\n%k_ECommunityItemCla"
  "ss_ProfileModifier\020\010\022\037\n\033k_ECommunityItem"
  "Class_Scene\020\t\022$\n k_ECommunityItemClass_S"
  "alienItem\020\n*\326\003\n\027ECommunityItemAttribute\022"
  "%\n!k_ECommunityItemAttribute_Invalid\020\000\022("
  "\n$k_ECommunityItemAttribute_CardBorder\020\001"
  "\022#\n\037k_ECommunityItemAttribute_Level\020\002\022)\n"
  "%k_ECommunityItemAttribute_IssueNumber\020\003"
  "\022*\n&k_ECommunityItemAttribute_TradableTi"
  "me\020\004\022,\n(k_ECommunityItemAttribute_StoreP"
  "ackageID\020\005\0220\n,k_ECommunityItemAttribute_"
  "CommunityItemAppID\020\006\022/\n+k_ECommunityItem"
  "Attribute_CommunityItemType\020\007\0223\n/k_EComm"
  "unityItemAttribute_ProfileModiferEnabled"
  "\020\010\022(\n$k_ECommunityItemAttribute_ExpiryTi"
  "me\020\tB\005H\001\200\001\000"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_gcsystemmsgs_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gcsystemmsgs_2eproto = {
  false, false, 6251, descriptor_table_protodef_gcsystemmsgs_2eproto, "gcsystemmsgs.proto", 
  &descriptor_table_gcsystemmsgs_2eproto_once, nullptr, 0, 13,
  schemas, file_default_instances, TableStruct_gcsystemmsgs_2eproto::offsets,
  file_level_metadata_gcsystemmsgs_2eproto, file_level_enum_descriptors_gcsystemmsgs_2eproto, file_level_service_descriptors_gcsystemmsgs_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_gcsystemmsgs_2eproto_getter() {
  return &descriptor_table_gcsystemmsgs_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_gcsystemmsgs_2eproto(&descriptor_table_gcsystemmsgs_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EGCSystemMsg_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gcsystemmsgs_2eproto);
  return file_level_enum_descriptors_gcsystemmsgs_2eproto[0];
}
bool EGCSystemMsg_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 10:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 101:
    case 102:
    case 104:
    case 105:
    case 200:
    case 201:
    case 202:
    case 203:
    case 204:
    case 205:
    case 220:
    case 221:
    case 222:
    case 223:
    case 224:
    case 225:
    case 226:
    case 227:
    case 500:
    case 501:
    case 502:
    case 503:
    case 504:
    case 505:
    case 506:
    case 507:
    case 508:
    case 512:
    case 513:
    case 518:
    case 519:
    case 523:
    case 524:
    case 525:
    case 526:
    case 527:
    case 528:
    case 529:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESOMsg_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gcsystemmsgs_2eproto);
  return file_level_enum_descriptors_gcsystemmsgs_2eproto[1];
}
bool ESOMsg_IsValid(int value) {
  switch (value) {
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EGCBaseClientMsg_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gcsystemmsgs_2eproto);
  return file_level_enum_descriptors_gcsystemmsgs_2eproto[2];
}
bool EGCBaseClientMsg_IsValid(int value) {
  switch (value) {
    case 4004:
    case 4005:
    case 4006:
    case 4007:
    case 4009:
    case 4010:
    case 4011:
    case 4012:
    case 4013:
    case 4014:
    case 4015:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EGCToGCMsg_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gcsystemmsgs_2eproto);
  return file_level_enum_descriptors_gcsystemmsgs_2eproto[3];
}
bool EGCToGCMsg_IsValid(int value) {
  switch (value) {
    case 150:
    case 151:
    case 152:
    case 153:
    case 154:
    case 155:
    case 156:
    case 157:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ECommunityItemClass_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gcsystemmsgs_2eproto);
  return file_level_enum_descriptors_gcsystemmsgs_2eproto[4];
}
bool ECommunityItemClass_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ECommunityItemAttribute_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gcsystemmsgs_2eproto);
  return file_level_enum_descriptors_gcsystemmsgs_2eproto[5];
}
bool ECommunityItemAttribute_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CMsgGCHVacVerificationChange::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCHVacVerificationChange>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_verified(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgGCHVacVerificationChange::CMsgGCHVacVerificationChange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgGCHVacVerificationChange)
}
CMsgGCHVacVerificationChange::CMsgGCHVacVerificationChange(const CMsgGCHVacVerificationChange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_verified_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(is_verified_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCHVacVerificationChange)
}

void CMsgGCHVacVerificationChange::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steamid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_verified_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(is_verified_));
}

CMsgGCHVacVerificationChange::~CMsgGCHVacVerificationChange() {
  // @@protoc_insertion_point(destructor:CMsgGCHVacVerificationChange)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgGCHVacVerificationChange::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCHVacVerificationChange::ArenaDtor(void* object) {
  CMsgGCHVacVerificationChange* _this = reinterpret_cast< CMsgGCHVacVerificationChange* >(object);
  (void)_this;
}
void CMsgGCHVacVerificationChange::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCHVacVerificationChange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCHVacVerificationChange::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCHVacVerificationChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_verified_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(is_verified_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCHVacVerificationChange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 appid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_verified = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_is_verified(&has_bits);
          is_verified_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCHVacVerificationChange::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCHVacVerificationChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // optional uint32 appid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_appid(), target);
  }

  // optional bool is_verified = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_verified(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCHVacVerificationChange)
  return target;
}

size_t CMsgGCHVacVerificationChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCHVacVerificationChange)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint32 appid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

    // optional bool is_verified = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCHVacVerificationChange::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgGCHVacVerificationChange::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCHVacVerificationChange::GetClassData() const { return &_class_data_; }

void CMsgGCHVacVerificationChange::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgGCHVacVerificationChange *>(to)->MergeFrom(
      static_cast<const CMsgGCHVacVerificationChange &>(from));
}


void CMsgGCHVacVerificationChange::MergeFrom(const CMsgGCHVacVerificationChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCHVacVerificationChange)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_verified_ = from.is_verified_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCHVacVerificationChange::CopyFrom(const CMsgGCHVacVerificationChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCHVacVerificationChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCHVacVerificationChange::IsInitialized() const {
  return true;
}

void CMsgGCHVacVerificationChange::InternalSwap(CMsgGCHVacVerificationChange* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCHVacVerificationChange, is_verified_)
      + sizeof(CMsgGCHVacVerificationChange::is_verified_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCHVacVerificationChange, steamid_)>(
          reinterpret_cast<char*>(&steamid_),
          reinterpret_cast<char*>(&other->steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCHVacVerificationChange::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gcsystemmsgs_2eproto_getter, &descriptor_table_gcsystemmsgs_2eproto_once,
      file_level_metadata_gcsystemmsgs_2eproto[0]);
}

// ===================================================================

class CMsgGCHAccountPhoneNumberChange::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCHAccountPhoneNumberChange>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_phone_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_verified(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_is_identifying(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgGCHAccountPhoneNumberChange::CMsgGCHAccountPhoneNumberChange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgGCHAccountPhoneNumberChange)
}
CMsgGCHAccountPhoneNumberChange::CMsgGCHAccountPhoneNumberChange(const CMsgGCHAccountPhoneNumberChange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_identifying_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(is_identifying_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCHAccountPhoneNumberChange)
}

void CMsgGCHAccountPhoneNumberChange::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steamid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_identifying_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(is_identifying_));
}

CMsgGCHAccountPhoneNumberChange::~CMsgGCHAccountPhoneNumberChange() {
  // @@protoc_insertion_point(destructor:CMsgGCHAccountPhoneNumberChange)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgGCHAccountPhoneNumberChange::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCHAccountPhoneNumberChange::ArenaDtor(void* object) {
  CMsgGCHAccountPhoneNumberChange* _this = reinterpret_cast< CMsgGCHAccountPhoneNumberChange* >(object);
  (void)_this;
}
void CMsgGCHAccountPhoneNumberChange::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCHAccountPhoneNumberChange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCHAccountPhoneNumberChange::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCHAccountPhoneNumberChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_identifying_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(is_identifying_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCHAccountPhoneNumberChange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 appid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 phone_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_phone_id(&has_bits);
          phone_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_verified = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_is_verified(&has_bits);
          is_verified_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_identifying = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_is_identifying(&has_bits);
          is_identifying_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCHAccountPhoneNumberChange::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCHAccountPhoneNumberChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // optional uint32 appid = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_appid(), target);
  }

  // optional uint64 phone_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_phone_id(), target);
  }

  // optional bool is_verified = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_is_verified(), target);
  }

  // optional bool is_identifying = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_is_identifying(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCHAccountPhoneNumberChange)
  return target;
}

size_t CMsgGCHAccountPhoneNumberChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCHAccountPhoneNumberChange)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint64 phone_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_phone_id());
    }

    // optional uint32 appid = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

    // optional bool is_verified = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool is_identifying = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCHAccountPhoneNumberChange::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgGCHAccountPhoneNumberChange::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCHAccountPhoneNumberChange::GetClassData() const { return &_class_data_; }

void CMsgGCHAccountPhoneNumberChange::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgGCHAccountPhoneNumberChange *>(to)->MergeFrom(
      static_cast<const CMsgGCHAccountPhoneNumberChange &>(from));
}


void CMsgGCHAccountPhoneNumberChange::MergeFrom(const CMsgGCHAccountPhoneNumberChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCHAccountPhoneNumberChange)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      phone_id_ = from.phone_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_verified_ = from.is_verified_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_identifying_ = from.is_identifying_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCHAccountPhoneNumberChange::CopyFrom(const CMsgGCHAccountPhoneNumberChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCHAccountPhoneNumberChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCHAccountPhoneNumberChange::IsInitialized() const {
  return true;
}

void CMsgGCHAccountPhoneNumberChange::InternalSwap(CMsgGCHAccountPhoneNumberChange* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCHAccountPhoneNumberChange, is_identifying_)
      + sizeof(CMsgGCHAccountPhoneNumberChange::is_identifying_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCHAccountPhoneNumberChange, steamid_)>(
          reinterpret_cast<char*>(&steamid_),
          reinterpret_cast<char*>(&other->steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCHAccountPhoneNumberChange::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gcsystemmsgs_2eproto_getter, &descriptor_table_gcsystemmsgs_2eproto_once,
      file_level_metadata_gcsystemmsgs_2eproto[1]);
}

// ===================================================================

class CMsgGCHInviteUserToLobby::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCHInviteUserToLobby>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_steamid_invited(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_steamid_lobby(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgGCHInviteUserToLobby::CMsgGCHInviteUserToLobby(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgGCHInviteUserToLobby)
}
CMsgGCHInviteUserToLobby::CMsgGCHInviteUserToLobby(const CMsgGCHInviteUserToLobby& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(appid_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCHInviteUserToLobby)
}

void CMsgGCHInviteUserToLobby::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steamid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(appid_));
}

CMsgGCHInviteUserToLobby::~CMsgGCHInviteUserToLobby() {
  // @@protoc_insertion_point(destructor:CMsgGCHInviteUserToLobby)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgGCHInviteUserToLobby::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCHInviteUserToLobby::ArenaDtor(void* object) {
  CMsgGCHInviteUserToLobby* _this = reinterpret_cast< CMsgGCHInviteUserToLobby* >(object);
  (void)_this;
}
void CMsgGCHInviteUserToLobby::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCHInviteUserToLobby::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCHInviteUserToLobby::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCHInviteUserToLobby)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&appid_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(appid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCHInviteUserToLobby::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 appid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 steamid_invited = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_steamid_invited(&has_bits);
          steamid_invited_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 steamid_lobby = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_steamid_lobby(&has_bits);
          steamid_lobby_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCHInviteUserToLobby::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCHInviteUserToLobby)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // optional uint32 appid = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_appid(), target);
  }

  // optional fixed64 steamid_invited = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_steamid_invited(), target);
  }

  // optional fixed64 steamid_lobby = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(4, this->_internal_steamid_lobby(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCHInviteUserToLobby)
  return target;
}

size_t CMsgGCHInviteUserToLobby::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCHInviteUserToLobby)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional fixed64 steamid_invited = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional fixed64 steamid_lobby = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional uint32 appid = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCHInviteUserToLobby::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgGCHInviteUserToLobby::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCHInviteUserToLobby::GetClassData() const { return &_class_data_; }

void CMsgGCHInviteUserToLobby::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgGCHInviteUserToLobby *>(to)->MergeFrom(
      static_cast<const CMsgGCHInviteUserToLobby &>(from));
}


void CMsgGCHInviteUserToLobby::MergeFrom(const CMsgGCHInviteUserToLobby& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCHInviteUserToLobby)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_invited_ = from.steamid_invited_;
    }
    if (cached_has_bits & 0x00000004u) {
      steamid_lobby_ = from.steamid_lobby_;
    }
    if (cached_has_bits & 0x00000008u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCHInviteUserToLobby::CopyFrom(const CMsgGCHInviteUserToLobby& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCHInviteUserToLobby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCHInviteUserToLobby::IsInitialized() const {
  return true;
}

void CMsgGCHInviteUserToLobby::InternalSwap(CMsgGCHInviteUserToLobby* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCHInviteUserToLobby, appid_)
      + sizeof(CMsgGCHInviteUserToLobby::appid_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCHInviteUserToLobby, steamid_)>(
          reinterpret_cast<char*>(&steamid_),
          reinterpret_cast<char*>(&other->steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCHInviteUserToLobby::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gcsystemmsgs_2eproto_getter, &descriptor_table_gcsystemmsgs_2eproto_once,
      file_level_metadata_gcsystemmsgs_2eproto[2]);
}

// ===================================================================

class CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::_Internal {
 public:
  using HasBits = decltype(std::declval<CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute>()._has_bits_);
  static void set_has_attribute(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CQuest_PublisherAddCommunityItemsToPlayer_Request.Attribute)
}
CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute(const CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&value_, &from.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&attribute_) -
    reinterpret_cast<char*>(&value_)) + sizeof(attribute_));
  // @@protoc_insertion_point(copy_constructor:CQuest_PublisherAddCommunityItemsToPlayer_Request.Attribute)
}

void CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&value_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&attribute_) -
    reinterpret_cast<char*>(&value_)) + sizeof(attribute_));
}

CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::~CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute() {
  // @@protoc_insertion_point(destructor:CQuest_PublisherAddCommunityItemsToPlayer_Request.Attribute)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::ArenaDtor(void* object) {
  CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute* _this = reinterpret_cast< CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute* >(object);
  (void)_this;
}
void CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::Clear() {
// @@protoc_insertion_point(message_clear_start:CQuest_PublisherAddCommunityItemsToPlayer_Request.Attribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&attribute_) -
        reinterpret_cast<char*>(&value_)) + sizeof(attribute_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 attribute = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_attribute(&has_bits);
          attribute_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CQuest_PublisherAddCommunityItemsToPlayer_Request.Attribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 attribute = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_attribute(), target);
  }

  // optional uint64 value = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CQuest_PublisherAddCommunityItemsToPlayer_Request.Attribute)
  return target;
}

size_t CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CQuest_PublisherAddCommunityItemsToPlayer_Request.Attribute)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 value = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_value());
    }

    // optional uint32 attribute = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_attribute());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::GetClassData() const { return &_class_data_; }

void CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute *>(to)->MergeFrom(
      static_cast<const CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute &>(from));
}


void CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::MergeFrom(const CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CQuest_PublisherAddCommunityItemsToPlayer_Request.Attribute)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      value_ = from.value_;
    }
    if (cached_has_bits & 0x00000002u) {
      attribute_ = from.attribute_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::CopyFrom(const CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CQuest_PublisherAddCommunityItemsToPlayer_Request.Attribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::IsInitialized() const {
  return true;
}

void CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::InternalSwap(CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute, attribute_)
      + sizeof(CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::attribute_)
      - PROTOBUF_FIELD_OFFSET(CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute, value_)>(
          reinterpret_cast<char*>(&value_),
          reinterpret_cast<char*>(&other->value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gcsystemmsgs_2eproto_getter, &descriptor_table_gcsystemmsgs_2eproto_once,
      file_level_metadata_gcsystemmsgs_2eproto[3]);
}

// ===================================================================

class CQuest_PublisherAddCommunityItemsToPlayer_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CQuest_PublisherAddCommunityItemsToPlayer_Request>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_match_item_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_match_item_class(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_prefix_item_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_note(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CQuest_PublisherAddCommunityItemsToPlayer_Request::CQuest_PublisherAddCommunityItemsToPlayer_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  attributes_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CQuest_PublisherAddCommunityItemsToPlayer_Request)
}
CQuest_PublisherAddCommunityItemsToPlayer_Request::CQuest_PublisherAddCommunityItemsToPlayer_Request(const CQuest_PublisherAddCommunityItemsToPlayer_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      attributes_(from.attributes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  prefix_item_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_prefix_item_name()) {
    prefix_item_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_prefix_item_name(), 
      GetArenaForAllocation());
  }
  note_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_note()) {
    note_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_note(), 
      GetArenaForAllocation());
  }
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&match_item_class_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(match_item_class_));
  // @@protoc_insertion_point(copy_constructor:CQuest_PublisherAddCommunityItemsToPlayer_Request)
}

void CQuest_PublisherAddCommunityItemsToPlayer_Request::SharedCtor() {
prefix_item_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
note_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steamid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&match_item_class_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(match_item_class_));
}

CQuest_PublisherAddCommunityItemsToPlayer_Request::~CQuest_PublisherAddCommunityItemsToPlayer_Request() {
  // @@protoc_insertion_point(destructor:CQuest_PublisherAddCommunityItemsToPlayer_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CQuest_PublisherAddCommunityItemsToPlayer_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  prefix_item_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  note_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CQuest_PublisherAddCommunityItemsToPlayer_Request::ArenaDtor(void* object) {
  CQuest_PublisherAddCommunityItemsToPlayer_Request* _this = reinterpret_cast< CQuest_PublisherAddCommunityItemsToPlayer_Request* >(object);
  (void)_this;
}
void CQuest_PublisherAddCommunityItemsToPlayer_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CQuest_PublisherAddCommunityItemsToPlayer_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CQuest_PublisherAddCommunityItemsToPlayer_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CQuest_PublisherAddCommunityItemsToPlayer_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attributes_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      prefix_item_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      note_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&match_item_class_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(match_item_class_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CQuest_PublisherAddCommunityItemsToPlayer_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 appid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 match_item_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_match_item_type(&has_bits);
          match_item_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 match_item_class = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_match_item_class(&has_bits);
          match_item_class_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string prefix_item_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_prefix_item_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CQuest_PublisherAddCommunityItemsToPlayer_Request.prefix_item_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CQuest_PublisherAddCommunityItemsToPlayer_Request.Attribute attributes = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attributes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string note = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_note();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CQuest_PublisherAddCommunityItemsToPlayer_Request.note");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CQuest_PublisherAddCommunityItemsToPlayer_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CQuest_PublisherAddCommunityItemsToPlayer_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 steamid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_steamid(), target);
  }

  // optional uint32 appid = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_appid(), target);
  }

  // optional uint32 match_item_type = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_match_item_type(), target);
  }

  // optional uint32 match_item_class = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_match_item_class(), target);
  }

  // optional string prefix_item_name = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_prefix_item_name().data(), static_cast<int>(this->_internal_prefix_item_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CQuest_PublisherAddCommunityItemsToPlayer_Request.prefix_item_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_prefix_item_name(), target);
  }

  // repeated .CQuest_PublisherAddCommunityItemsToPlayer_Request.Attribute attributes = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attributes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_attributes(i), target, stream);
  }

  // optional string note = 7;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_note().data(), static_cast<int>(this->_internal_note().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CQuest_PublisherAddCommunityItemsToPlayer_Request.note");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_note(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CQuest_PublisherAddCommunityItemsToPlayer_Request)
  return target;
}

size_t CQuest_PublisherAddCommunityItemsToPlayer_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CQuest_PublisherAddCommunityItemsToPlayer_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CQuest_PublisherAddCommunityItemsToPlayer_Request.Attribute attributes = 6;
  total_size += 1UL * this->_internal_attributes_size();
  for (const auto& msg : this->attributes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string prefix_item_name = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_prefix_item_name());
    }

    // optional string note = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_note());
    }

    // optional uint64 steamid = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_steamid());
    }

    // optional uint32 appid = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

    // optional uint32 match_item_type = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_match_item_type());
    }

    // optional uint32 match_item_class = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_match_item_class());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CQuest_PublisherAddCommunityItemsToPlayer_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CQuest_PublisherAddCommunityItemsToPlayer_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CQuest_PublisherAddCommunityItemsToPlayer_Request::GetClassData() const { return &_class_data_; }

void CQuest_PublisherAddCommunityItemsToPlayer_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CQuest_PublisherAddCommunityItemsToPlayer_Request *>(to)->MergeFrom(
      static_cast<const CQuest_PublisherAddCommunityItemsToPlayer_Request &>(from));
}


void CQuest_PublisherAddCommunityItemsToPlayer_Request::MergeFrom(const CQuest_PublisherAddCommunityItemsToPlayer_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CQuest_PublisherAddCommunityItemsToPlayer_Request)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attributes_.MergeFrom(from.attributes_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_prefix_item_name(from._internal_prefix_item_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_note(from._internal_note());
    }
    if (cached_has_bits & 0x00000004u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000008u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000010u) {
      match_item_type_ = from.match_item_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      match_item_class_ = from.match_item_class_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CQuest_PublisherAddCommunityItemsToPlayer_Request::CopyFrom(const CQuest_PublisherAddCommunityItemsToPlayer_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CQuest_PublisherAddCommunityItemsToPlayer_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CQuest_PublisherAddCommunityItemsToPlayer_Request::IsInitialized() const {
  return true;
}

void CQuest_PublisherAddCommunityItemsToPlayer_Request::InternalSwap(CQuest_PublisherAddCommunityItemsToPlayer_Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  attributes_.InternalSwap(&other->attributes_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &prefix_item_name_, lhs_arena,
      &other->prefix_item_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &note_, lhs_arena,
      &other->note_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CQuest_PublisherAddCommunityItemsToPlayer_Request, match_item_class_)
      + sizeof(CQuest_PublisherAddCommunityItemsToPlayer_Request::match_item_class_)
      - PROTOBUF_FIELD_OFFSET(CQuest_PublisherAddCommunityItemsToPlayer_Request, steamid_)>(
          reinterpret_cast<char*>(&steamid_),
          reinterpret_cast<char*>(&other->steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CQuest_PublisherAddCommunityItemsToPlayer_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gcsystemmsgs_2eproto_getter, &descriptor_table_gcsystemmsgs_2eproto_once,
      file_level_metadata_gcsystemmsgs_2eproto[4]);
}

// ===================================================================

class CQuest_PublisherAddCommunityItemsToPlayer_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CQuest_PublisherAddCommunityItemsToPlayer_Response>()._has_bits_);
  static void set_has_items_matched(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_items_granted(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CQuest_PublisherAddCommunityItemsToPlayer_Response::CQuest_PublisherAddCommunityItemsToPlayer_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CQuest_PublisherAddCommunityItemsToPlayer_Response)
}
CQuest_PublisherAddCommunityItemsToPlayer_Response::CQuest_PublisherAddCommunityItemsToPlayer_Response(const CQuest_PublisherAddCommunityItemsToPlayer_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&items_matched_, &from.items_matched_,
    static_cast<size_t>(reinterpret_cast<char*>(&items_granted_) -
    reinterpret_cast<char*>(&items_matched_)) + sizeof(items_granted_));
  // @@protoc_insertion_point(copy_constructor:CQuest_PublisherAddCommunityItemsToPlayer_Response)
}

void CQuest_PublisherAddCommunityItemsToPlayer_Response::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&items_matched_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&items_granted_) -
    reinterpret_cast<char*>(&items_matched_)) + sizeof(items_granted_));
}

CQuest_PublisherAddCommunityItemsToPlayer_Response::~CQuest_PublisherAddCommunityItemsToPlayer_Response() {
  // @@protoc_insertion_point(destructor:CQuest_PublisherAddCommunityItemsToPlayer_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CQuest_PublisherAddCommunityItemsToPlayer_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CQuest_PublisherAddCommunityItemsToPlayer_Response::ArenaDtor(void* object) {
  CQuest_PublisherAddCommunityItemsToPlayer_Response* _this = reinterpret_cast< CQuest_PublisherAddCommunityItemsToPlayer_Response* >(object);
  (void)_this;
}
void CQuest_PublisherAddCommunityItemsToPlayer_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CQuest_PublisherAddCommunityItemsToPlayer_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CQuest_PublisherAddCommunityItemsToPlayer_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CQuest_PublisherAddCommunityItemsToPlayer_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&items_matched_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&items_granted_) -
        reinterpret_cast<char*>(&items_matched_)) + sizeof(items_granted_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CQuest_PublisherAddCommunityItemsToPlayer_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 items_matched = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_items_matched(&has_bits);
          items_matched_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 items_granted = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_items_granted(&has_bits);
          items_granted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CQuest_PublisherAddCommunityItemsToPlayer_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CQuest_PublisherAddCommunityItemsToPlayer_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 items_matched = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_items_matched(), target);
  }

  // optional uint32 items_granted = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_items_granted(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CQuest_PublisherAddCommunityItemsToPlayer_Response)
  return target;
}

size_t CQuest_PublisherAddCommunityItemsToPlayer_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CQuest_PublisherAddCommunityItemsToPlayer_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 items_matched = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_items_matched());
    }

    // optional uint32 items_granted = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_items_granted());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CQuest_PublisherAddCommunityItemsToPlayer_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CQuest_PublisherAddCommunityItemsToPlayer_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CQuest_PublisherAddCommunityItemsToPlayer_Response::GetClassData() const { return &_class_data_; }

void CQuest_PublisherAddCommunityItemsToPlayer_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CQuest_PublisherAddCommunityItemsToPlayer_Response *>(to)->MergeFrom(
      static_cast<const CQuest_PublisherAddCommunityItemsToPlayer_Response &>(from));
}


void CQuest_PublisherAddCommunityItemsToPlayer_Response::MergeFrom(const CQuest_PublisherAddCommunityItemsToPlayer_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CQuest_PublisherAddCommunityItemsToPlayer_Response)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      items_matched_ = from.items_matched_;
    }
    if (cached_has_bits & 0x00000002u) {
      items_granted_ = from.items_granted_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CQuest_PublisherAddCommunityItemsToPlayer_Response::CopyFrom(const CQuest_PublisherAddCommunityItemsToPlayer_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CQuest_PublisherAddCommunityItemsToPlayer_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CQuest_PublisherAddCommunityItemsToPlayer_Response::IsInitialized() const {
  return true;
}

void CQuest_PublisherAddCommunityItemsToPlayer_Response::InternalSwap(CQuest_PublisherAddCommunityItemsToPlayer_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CQuest_PublisherAddCommunityItemsToPlayer_Response, items_granted_)
      + sizeof(CQuest_PublisherAddCommunityItemsToPlayer_Response::items_granted_)
      - PROTOBUF_FIELD_OFFSET(CQuest_PublisherAddCommunityItemsToPlayer_Response, items_matched_)>(
          reinterpret_cast<char*>(&items_matched_),
          reinterpret_cast<char*>(&other->items_matched_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CQuest_PublisherAddCommunityItemsToPlayer_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gcsystemmsgs_2eproto_getter, &descriptor_table_gcsystemmsgs_2eproto_once,
      file_level_metadata_gcsystemmsgs_2eproto[5]);
}

// ===================================================================

class CCommunity_GamePersonalDataCategoryInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CCommunity_GamePersonalDataCategoryInfo>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_localization_token(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_template_file(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CCommunity_GamePersonalDataCategoryInfo::CCommunity_GamePersonalDataCategoryInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCommunity_GamePersonalDataCategoryInfo)
}
CCommunity_GamePersonalDataCategoryInfo::CCommunity_GamePersonalDataCategoryInfo(const CCommunity_GamePersonalDataCategoryInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_type()) {
    type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_type(), 
      GetArenaForAllocation());
  }
  localization_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_localization_token()) {
    localization_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_localization_token(), 
      GetArenaForAllocation());
  }
  template_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_template_file()) {
    template_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_template_file(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CCommunity_GamePersonalDataCategoryInfo)
}

void CCommunity_GamePersonalDataCategoryInfo::SharedCtor() {
type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
localization_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
template_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CCommunity_GamePersonalDataCategoryInfo::~CCommunity_GamePersonalDataCategoryInfo() {
  // @@protoc_insertion_point(destructor:CCommunity_GamePersonalDataCategoryInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCommunity_GamePersonalDataCategoryInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  localization_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  template_file_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CCommunity_GamePersonalDataCategoryInfo::ArenaDtor(void* object) {
  CCommunity_GamePersonalDataCategoryInfo* _this = reinterpret_cast< CCommunity_GamePersonalDataCategoryInfo* >(object);
  (void)_this;
}
void CCommunity_GamePersonalDataCategoryInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCommunity_GamePersonalDataCategoryInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCommunity_GamePersonalDataCategoryInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CCommunity_GamePersonalDataCategoryInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      localization_token_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      template_file_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCommunity_GamePersonalDataCategoryInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCommunity_GamePersonalDataCategoryInfo.type");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string localization_token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_localization_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCommunity_GamePersonalDataCategoryInfo.localization_token");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string template_file = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_template_file();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCommunity_GamePersonalDataCategoryInfo.template_file");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCommunity_GamePersonalDataCategoryInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCommunity_GamePersonalDataCategoryInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCommunity_GamePersonalDataCategoryInfo.type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_type(), target);
  }

  // optional string localization_token = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_localization_token().data(), static_cast<int>(this->_internal_localization_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCommunity_GamePersonalDataCategoryInfo.localization_token");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_localization_token(), target);
  }

  // optional string template_file = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_template_file().data(), static_cast<int>(this->_internal_template_file().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCommunity_GamePersonalDataCategoryInfo.template_file");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_template_file(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCommunity_GamePersonalDataCategoryInfo)
  return target;
}

size_t CCommunity_GamePersonalDataCategoryInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCommunity_GamePersonalDataCategoryInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_type());
    }

    // optional string localization_token = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_localization_token());
    }

    // optional string template_file = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_template_file());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCommunity_GamePersonalDataCategoryInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCommunity_GamePersonalDataCategoryInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCommunity_GamePersonalDataCategoryInfo::GetClassData() const { return &_class_data_; }

void CCommunity_GamePersonalDataCategoryInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCommunity_GamePersonalDataCategoryInfo *>(to)->MergeFrom(
      static_cast<const CCommunity_GamePersonalDataCategoryInfo &>(from));
}


void CCommunity_GamePersonalDataCategoryInfo::MergeFrom(const CCommunity_GamePersonalDataCategoryInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCommunity_GamePersonalDataCategoryInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_type(from._internal_type());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_localization_token(from._internal_localization_token());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_template_file(from._internal_template_file());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCommunity_GamePersonalDataCategoryInfo::CopyFrom(const CCommunity_GamePersonalDataCategoryInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCommunity_GamePersonalDataCategoryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCommunity_GamePersonalDataCategoryInfo::IsInitialized() const {
  return true;
}

void CCommunity_GamePersonalDataCategoryInfo::InternalSwap(CCommunity_GamePersonalDataCategoryInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &type_, lhs_arena,
      &other->type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &localization_token_, lhs_arena,
      &other->localization_token_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &template_file_, lhs_arena,
      &other->template_file_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CCommunity_GamePersonalDataCategoryInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gcsystemmsgs_2eproto_getter, &descriptor_table_gcsystemmsgs_2eproto_once,
      file_level_metadata_gcsystemmsgs_2eproto[6]);
}

// ===================================================================

class CCommunity_GetGamePersonalDataCategories_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CCommunity_GetGamePersonalDataCategories_Request>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCommunity_GetGamePersonalDataCategories_Request::CCommunity_GetGamePersonalDataCategories_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCommunity_GetGamePersonalDataCategories_Request)
}
CCommunity_GetGamePersonalDataCategories_Request::CCommunity_GetGamePersonalDataCategories_Request(const CCommunity_GetGamePersonalDataCategories_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  appid_ = from.appid_;
  // @@protoc_insertion_point(copy_constructor:CCommunity_GetGamePersonalDataCategories_Request)
}

void CCommunity_GetGamePersonalDataCategories_Request::SharedCtor() {
appid_ = 0u;
}

CCommunity_GetGamePersonalDataCategories_Request::~CCommunity_GetGamePersonalDataCategories_Request() {
  // @@protoc_insertion_point(destructor:CCommunity_GetGamePersonalDataCategories_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCommunity_GetGamePersonalDataCategories_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCommunity_GetGamePersonalDataCategories_Request::ArenaDtor(void* object) {
  CCommunity_GetGamePersonalDataCategories_Request* _this = reinterpret_cast< CCommunity_GetGamePersonalDataCategories_Request* >(object);
  (void)_this;
}
void CCommunity_GetGamePersonalDataCategories_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCommunity_GetGamePersonalDataCategories_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCommunity_GetGamePersonalDataCategories_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CCommunity_GetGamePersonalDataCategories_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  appid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCommunity_GetGamePersonalDataCategories_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCommunity_GetGamePersonalDataCategories_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCommunity_GetGamePersonalDataCategories_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCommunity_GetGamePersonalDataCategories_Request)
  return target;
}

size_t CCommunity_GetGamePersonalDataCategories_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCommunity_GetGamePersonalDataCategories_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 appid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCommunity_GetGamePersonalDataCategories_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCommunity_GetGamePersonalDataCategories_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCommunity_GetGamePersonalDataCategories_Request::GetClassData() const { return &_class_data_; }

void CCommunity_GetGamePersonalDataCategories_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCommunity_GetGamePersonalDataCategories_Request *>(to)->MergeFrom(
      static_cast<const CCommunity_GetGamePersonalDataCategories_Request &>(from));
}


void CCommunity_GetGamePersonalDataCategories_Request::MergeFrom(const CCommunity_GetGamePersonalDataCategories_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCommunity_GetGamePersonalDataCategories_Request)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_appid()) {
    _internal_set_appid(from._internal_appid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCommunity_GetGamePersonalDataCategories_Request::CopyFrom(const CCommunity_GetGamePersonalDataCategories_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCommunity_GetGamePersonalDataCategories_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCommunity_GetGamePersonalDataCategories_Request::IsInitialized() const {
  return true;
}

void CCommunity_GetGamePersonalDataCategories_Request::InternalSwap(CCommunity_GetGamePersonalDataCategories_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(appid_, other->appid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCommunity_GetGamePersonalDataCategories_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gcsystemmsgs_2eproto_getter, &descriptor_table_gcsystemmsgs_2eproto_once,
      file_level_metadata_gcsystemmsgs_2eproto[7]);
}

// ===================================================================

class CCommunity_GetGamePersonalDataCategories_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CCommunity_GetGamePersonalDataCategories_Response>()._has_bits_);
  static void set_has_app_assets_basename(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCommunity_GetGamePersonalDataCategories_Response::CCommunity_GetGamePersonalDataCategories_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  categories_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCommunity_GetGamePersonalDataCategories_Response)
}
CCommunity_GetGamePersonalDataCategories_Response::CCommunity_GetGamePersonalDataCategories_Response(const CCommunity_GetGamePersonalDataCategories_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      categories_(from.categories_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  app_assets_basename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_app_assets_basename()) {
    app_assets_basename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_app_assets_basename(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CCommunity_GetGamePersonalDataCategories_Response)
}

void CCommunity_GetGamePersonalDataCategories_Response::SharedCtor() {
app_assets_basename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CCommunity_GetGamePersonalDataCategories_Response::~CCommunity_GetGamePersonalDataCategories_Response() {
  // @@protoc_insertion_point(destructor:CCommunity_GetGamePersonalDataCategories_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCommunity_GetGamePersonalDataCategories_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  app_assets_basename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CCommunity_GetGamePersonalDataCategories_Response::ArenaDtor(void* object) {
  CCommunity_GetGamePersonalDataCategories_Response* _this = reinterpret_cast< CCommunity_GetGamePersonalDataCategories_Response* >(object);
  (void)_this;
}
void CCommunity_GetGamePersonalDataCategories_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCommunity_GetGamePersonalDataCategories_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCommunity_GetGamePersonalDataCategories_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CCommunity_GetGamePersonalDataCategories_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  categories_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    app_assets_basename_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCommunity_GetGamePersonalDataCategories_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CCommunity_GamePersonalDataCategoryInfo categories = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_categories(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string app_assets_basename = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_app_assets_basename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCommunity_GetGamePersonalDataCategories_Response.app_assets_basename");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCommunity_GetGamePersonalDataCategories_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCommunity_GetGamePersonalDataCategories_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CCommunity_GamePersonalDataCategoryInfo categories = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_categories_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_categories(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional string app_assets_basename = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_app_assets_basename().data(), static_cast<int>(this->_internal_app_assets_basename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCommunity_GetGamePersonalDataCategories_Response.app_assets_basename");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_app_assets_basename(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCommunity_GetGamePersonalDataCategories_Response)
  return target;
}

size_t CCommunity_GetGamePersonalDataCategories_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCommunity_GetGamePersonalDataCategories_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CCommunity_GamePersonalDataCategoryInfo categories = 1;
  total_size += 1UL * this->_internal_categories_size();
  for (const auto& msg : this->categories_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string app_assets_basename = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_assets_basename());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCommunity_GetGamePersonalDataCategories_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCommunity_GetGamePersonalDataCategories_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCommunity_GetGamePersonalDataCategories_Response::GetClassData() const { return &_class_data_; }

void CCommunity_GetGamePersonalDataCategories_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCommunity_GetGamePersonalDataCategories_Response *>(to)->MergeFrom(
      static_cast<const CCommunity_GetGamePersonalDataCategories_Response &>(from));
}


void CCommunity_GetGamePersonalDataCategories_Response::MergeFrom(const CCommunity_GetGamePersonalDataCategories_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCommunity_GetGamePersonalDataCategories_Response)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  categories_.MergeFrom(from.categories_);
  if (from._internal_has_app_assets_basename()) {
    _internal_set_app_assets_basename(from._internal_app_assets_basename());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCommunity_GetGamePersonalDataCategories_Response::CopyFrom(const CCommunity_GetGamePersonalDataCategories_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCommunity_GetGamePersonalDataCategories_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCommunity_GetGamePersonalDataCategories_Response::IsInitialized() const {
  return true;
}

void CCommunity_GetGamePersonalDataCategories_Response::InternalSwap(CCommunity_GetGamePersonalDataCategories_Response* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  categories_.InternalSwap(&other->categories_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &app_assets_basename_, lhs_arena,
      &other->app_assets_basename_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CCommunity_GetGamePersonalDataCategories_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gcsystemmsgs_2eproto_getter, &descriptor_table_gcsystemmsgs_2eproto_once,
      file_level_metadata_gcsystemmsgs_2eproto[8]);
}

// ===================================================================

class CCommunity_GetGamePersonalDataEntries_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CCommunity_GetGamePersonalDataEntries_Request>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_continue_token(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CCommunity_GetGamePersonalDataEntries_Request::CCommunity_GetGamePersonalDataEntries_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCommunity_GetGamePersonalDataEntries_Request)
}
CCommunity_GetGamePersonalDataEntries_Request::CCommunity_GetGamePersonalDataEntries_Request(const CCommunity_GetGamePersonalDataEntries_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_type()) {
    type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_type(), 
      GetArenaForAllocation());
  }
  continue_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_continue_token()) {
    continue_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_continue_token(), 
      GetArenaForAllocation());
  }
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(appid_));
  // @@protoc_insertion_point(copy_constructor:CCommunity_GetGamePersonalDataEntries_Request)
}

void CCommunity_GetGamePersonalDataEntries_Request::SharedCtor() {
type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
continue_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steamid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(appid_));
}

CCommunity_GetGamePersonalDataEntries_Request::~CCommunity_GetGamePersonalDataEntries_Request() {
  // @@protoc_insertion_point(destructor:CCommunity_GetGamePersonalDataEntries_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCommunity_GetGamePersonalDataEntries_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  continue_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CCommunity_GetGamePersonalDataEntries_Request::ArenaDtor(void* object) {
  CCommunity_GetGamePersonalDataEntries_Request* _this = reinterpret_cast< CCommunity_GetGamePersonalDataEntries_Request* >(object);
  (void)_this;
}
void CCommunity_GetGamePersonalDataEntries_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCommunity_GetGamePersonalDataEntries_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCommunity_GetGamePersonalDataEntries_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CCommunity_GetGamePersonalDataEntries_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      continue_token_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&appid_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(appid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCommunity_GetGamePersonalDataEntries_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 steamid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCommunity_GetGamePersonalDataEntries_Request.type");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string continue_token = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_continue_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCommunity_GetGamePersonalDataEntries_Request.continue_token");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCommunity_GetGamePersonalDataEntries_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCommunity_GetGamePersonalDataEntries_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional uint64 steamid = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_steamid(), target);
  }

  // optional string type = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCommunity_GetGamePersonalDataEntries_Request.type");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_type(), target);
  }

  // optional string continue_token = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_continue_token().data(), static_cast<int>(this->_internal_continue_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCommunity_GetGamePersonalDataEntries_Request.continue_token");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_continue_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCommunity_GetGamePersonalDataEntries_Request)
  return target;
}

size_t CCommunity_GetGamePersonalDataEntries_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCommunity_GetGamePersonalDataEntries_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string type = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_type());
    }

    // optional string continue_token = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_continue_token());
    }

    // optional uint64 steamid = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_steamid());
    }

    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCommunity_GetGamePersonalDataEntries_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCommunity_GetGamePersonalDataEntries_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCommunity_GetGamePersonalDataEntries_Request::GetClassData() const { return &_class_data_; }

void CCommunity_GetGamePersonalDataEntries_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCommunity_GetGamePersonalDataEntries_Request *>(to)->MergeFrom(
      static_cast<const CCommunity_GetGamePersonalDataEntries_Request &>(from));
}


void CCommunity_GetGamePersonalDataEntries_Request::MergeFrom(const CCommunity_GetGamePersonalDataEntries_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCommunity_GetGamePersonalDataEntries_Request)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_type(from._internal_type());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_continue_token(from._internal_continue_token());
    }
    if (cached_has_bits & 0x00000004u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000008u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCommunity_GetGamePersonalDataEntries_Request::CopyFrom(const CCommunity_GetGamePersonalDataEntries_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCommunity_GetGamePersonalDataEntries_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCommunity_GetGamePersonalDataEntries_Request::IsInitialized() const {
  return true;
}

void CCommunity_GetGamePersonalDataEntries_Request::InternalSwap(CCommunity_GetGamePersonalDataEntries_Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &type_, lhs_arena,
      &other->type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &continue_token_, lhs_arena,
      &other->continue_token_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCommunity_GetGamePersonalDataEntries_Request, appid_)
      + sizeof(CCommunity_GetGamePersonalDataEntries_Request::appid_)
      - PROTOBUF_FIELD_OFFSET(CCommunity_GetGamePersonalDataEntries_Request, steamid_)>(
          reinterpret_cast<char*>(&steamid_),
          reinterpret_cast<char*>(&other->steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCommunity_GetGamePersonalDataEntries_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gcsystemmsgs_2eproto_getter, &descriptor_table_gcsystemmsgs_2eproto_once,
      file_level_metadata_gcsystemmsgs_2eproto[9]);
}

// ===================================================================

class CCommunity_GetGamePersonalDataEntries_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CCommunity_GetGamePersonalDataEntries_Response>()._has_bits_);
  static void set_has_gceresult(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_continue_token(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCommunity_GetGamePersonalDataEntries_Response::CCommunity_GetGamePersonalDataEntries_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  entries_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCommunity_GetGamePersonalDataEntries_Response)
}
CCommunity_GetGamePersonalDataEntries_Response::CCommunity_GetGamePersonalDataEntries_Response(const CCommunity_GetGamePersonalDataEntries_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  continue_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_continue_token()) {
    continue_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_continue_token(), 
      GetArenaForAllocation());
  }
  gceresult_ = from.gceresult_;
  // @@protoc_insertion_point(copy_constructor:CCommunity_GetGamePersonalDataEntries_Response)
}

void CCommunity_GetGamePersonalDataEntries_Response::SharedCtor() {
continue_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
gceresult_ = 0u;
}

CCommunity_GetGamePersonalDataEntries_Response::~CCommunity_GetGamePersonalDataEntries_Response() {
  // @@protoc_insertion_point(destructor:CCommunity_GetGamePersonalDataEntries_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCommunity_GetGamePersonalDataEntries_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  continue_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CCommunity_GetGamePersonalDataEntries_Response::ArenaDtor(void* object) {
  CCommunity_GetGamePersonalDataEntries_Response* _this = reinterpret_cast< CCommunity_GetGamePersonalDataEntries_Response* >(object);
  (void)_this;
}
void CCommunity_GetGamePersonalDataEntries_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCommunity_GetGamePersonalDataEntries_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCommunity_GetGamePersonalDataEntries_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CCommunity_GetGamePersonalDataEntries_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    continue_token_.ClearNonDefaultToEmpty();
  }
  gceresult_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCommunity_GetGamePersonalDataEntries_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 gceresult = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_gceresult(&has_bits);
          gceresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string entries = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_entries();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCommunity_GetGamePersonalDataEntries_Response.entries");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string continue_token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_continue_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCommunity_GetGamePersonalDataEntries_Response.continue_token");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCommunity_GetGamePersonalDataEntries_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCommunity_GetGamePersonalDataEntries_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 gceresult = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_gceresult(), target);
  }

  // repeated string entries = 2;
  for (int i = 0, n = this->_internal_entries_size(); i < n; i++) {
    const auto& s = this->_internal_entries(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCommunity_GetGamePersonalDataEntries_Response.entries");
    target = stream->WriteString(2, s, target);
  }

  // optional string continue_token = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_continue_token().data(), static_cast<int>(this->_internal_continue_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCommunity_GetGamePersonalDataEntries_Response.continue_token");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_continue_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCommunity_GetGamePersonalDataEntries_Response)
  return target;
}

size_t CCommunity_GetGamePersonalDataEntries_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCommunity_GetGamePersonalDataEntries_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string entries = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(entries_.size());
  for (int i = 0, n = entries_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      entries_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string continue_token = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_continue_token());
    }

    // optional uint32 gceresult = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_gceresult());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCommunity_GetGamePersonalDataEntries_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCommunity_GetGamePersonalDataEntries_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCommunity_GetGamePersonalDataEntries_Response::GetClassData() const { return &_class_data_; }

void CCommunity_GetGamePersonalDataEntries_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCommunity_GetGamePersonalDataEntries_Response *>(to)->MergeFrom(
      static_cast<const CCommunity_GetGamePersonalDataEntries_Response &>(from));
}


void CCommunity_GetGamePersonalDataEntries_Response::MergeFrom(const CCommunity_GetGamePersonalDataEntries_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCommunity_GetGamePersonalDataEntries_Response)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_continue_token(from._internal_continue_token());
    }
    if (cached_has_bits & 0x00000002u) {
      gceresult_ = from.gceresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCommunity_GetGamePersonalDataEntries_Response::CopyFrom(const CCommunity_GetGamePersonalDataEntries_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCommunity_GetGamePersonalDataEntries_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCommunity_GetGamePersonalDataEntries_Response::IsInitialized() const {
  return true;
}

void CCommunity_GetGamePersonalDataEntries_Response::InternalSwap(CCommunity_GetGamePersonalDataEntries_Response* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  entries_.InternalSwap(&other->entries_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &continue_token_, lhs_arena,
      &other->continue_token_, rhs_arena
  );
  swap(gceresult_, other->gceresult_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCommunity_GetGamePersonalDataEntries_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gcsystemmsgs_2eproto_getter, &descriptor_table_gcsystemmsgs_2eproto_once,
      file_level_metadata_gcsystemmsgs_2eproto[10]);
}

// ===================================================================

class CCommunity_TerminateGamePersonalDataEntries_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CCommunity_TerminateGamePersonalDataEntries_Request>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCommunity_TerminateGamePersonalDataEntries_Request::CCommunity_TerminateGamePersonalDataEntries_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCommunity_TerminateGamePersonalDataEntries_Request)
}
CCommunity_TerminateGamePersonalDataEntries_Request::CCommunity_TerminateGamePersonalDataEntries_Request(const CCommunity_TerminateGamePersonalDataEntries_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(appid_));
  // @@protoc_insertion_point(copy_constructor:CCommunity_TerminateGamePersonalDataEntries_Request)
}

void CCommunity_TerminateGamePersonalDataEntries_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steamid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(appid_));
}

CCommunity_TerminateGamePersonalDataEntries_Request::~CCommunity_TerminateGamePersonalDataEntries_Request() {
  // @@protoc_insertion_point(destructor:CCommunity_TerminateGamePersonalDataEntries_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCommunity_TerminateGamePersonalDataEntries_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCommunity_TerminateGamePersonalDataEntries_Request::ArenaDtor(void* object) {
  CCommunity_TerminateGamePersonalDataEntries_Request* _this = reinterpret_cast< CCommunity_TerminateGamePersonalDataEntries_Request* >(object);
  (void)_this;
}
void CCommunity_TerminateGamePersonalDataEntries_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCommunity_TerminateGamePersonalDataEntries_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCommunity_TerminateGamePersonalDataEntries_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CCommunity_TerminateGamePersonalDataEntries_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&appid_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(appid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCommunity_TerminateGamePersonalDataEntries_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 steamid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCommunity_TerminateGamePersonalDataEntries_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCommunity_TerminateGamePersonalDataEntries_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional uint64 steamid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_steamid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCommunity_TerminateGamePersonalDataEntries_Request)
  return target;
}

size_t CCommunity_TerminateGamePersonalDataEntries_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCommunity_TerminateGamePersonalDataEntries_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 steamid = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_steamid());
    }

    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCommunity_TerminateGamePersonalDataEntries_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCommunity_TerminateGamePersonalDataEntries_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCommunity_TerminateGamePersonalDataEntries_Request::GetClassData() const { return &_class_data_; }

void CCommunity_TerminateGamePersonalDataEntries_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCommunity_TerminateGamePersonalDataEntries_Request *>(to)->MergeFrom(
      static_cast<const CCommunity_TerminateGamePersonalDataEntries_Request &>(from));
}


void CCommunity_TerminateGamePersonalDataEntries_Request::MergeFrom(const CCommunity_TerminateGamePersonalDataEntries_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCommunity_TerminateGamePersonalDataEntries_Request)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCommunity_TerminateGamePersonalDataEntries_Request::CopyFrom(const CCommunity_TerminateGamePersonalDataEntries_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCommunity_TerminateGamePersonalDataEntries_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCommunity_TerminateGamePersonalDataEntries_Request::IsInitialized() const {
  return true;
}

void CCommunity_TerminateGamePersonalDataEntries_Request::InternalSwap(CCommunity_TerminateGamePersonalDataEntries_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCommunity_TerminateGamePersonalDataEntries_Request, appid_)
      + sizeof(CCommunity_TerminateGamePersonalDataEntries_Request::appid_)
      - PROTOBUF_FIELD_OFFSET(CCommunity_TerminateGamePersonalDataEntries_Request, steamid_)>(
          reinterpret_cast<char*>(&steamid_),
          reinterpret_cast<char*>(&other->steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCommunity_TerminateGamePersonalDataEntries_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gcsystemmsgs_2eproto_getter, &descriptor_table_gcsystemmsgs_2eproto_once,
      file_level_metadata_gcsystemmsgs_2eproto[11]);
}

// ===================================================================

class CCommunity_TerminateGamePersonalDataEntries_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CCommunity_TerminateGamePersonalDataEntries_Response>()._has_bits_);
  static void set_has_gceresult(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCommunity_TerminateGamePersonalDataEntries_Response::CCommunity_TerminateGamePersonalDataEntries_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCommunity_TerminateGamePersonalDataEntries_Response)
}
CCommunity_TerminateGamePersonalDataEntries_Response::CCommunity_TerminateGamePersonalDataEntries_Response(const CCommunity_TerminateGamePersonalDataEntries_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  gceresult_ = from.gceresult_;
  // @@protoc_insertion_point(copy_constructor:CCommunity_TerminateGamePersonalDataEntries_Response)
}

void CCommunity_TerminateGamePersonalDataEntries_Response::SharedCtor() {
gceresult_ = 0u;
}

CCommunity_TerminateGamePersonalDataEntries_Response::~CCommunity_TerminateGamePersonalDataEntries_Response() {
  // @@protoc_insertion_point(destructor:CCommunity_TerminateGamePersonalDataEntries_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCommunity_TerminateGamePersonalDataEntries_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCommunity_TerminateGamePersonalDataEntries_Response::ArenaDtor(void* object) {
  CCommunity_TerminateGamePersonalDataEntries_Response* _this = reinterpret_cast< CCommunity_TerminateGamePersonalDataEntries_Response* >(object);
  (void)_this;
}
void CCommunity_TerminateGamePersonalDataEntries_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCommunity_TerminateGamePersonalDataEntries_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCommunity_TerminateGamePersonalDataEntries_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CCommunity_TerminateGamePersonalDataEntries_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gceresult_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCommunity_TerminateGamePersonalDataEntries_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 gceresult = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_gceresult(&has_bits);
          gceresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCommunity_TerminateGamePersonalDataEntries_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCommunity_TerminateGamePersonalDataEntries_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 gceresult = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_gceresult(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCommunity_TerminateGamePersonalDataEntries_Response)
  return target;
}

size_t CCommunity_TerminateGamePersonalDataEntries_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCommunity_TerminateGamePersonalDataEntries_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 gceresult = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_gceresult());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCommunity_TerminateGamePersonalDataEntries_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCommunity_TerminateGamePersonalDataEntries_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCommunity_TerminateGamePersonalDataEntries_Response::GetClassData() const { return &_class_data_; }

void CCommunity_TerminateGamePersonalDataEntries_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCommunity_TerminateGamePersonalDataEntries_Response *>(to)->MergeFrom(
      static_cast<const CCommunity_TerminateGamePersonalDataEntries_Response &>(from));
}


void CCommunity_TerminateGamePersonalDataEntries_Response::MergeFrom(const CCommunity_TerminateGamePersonalDataEntries_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCommunity_TerminateGamePersonalDataEntries_Response)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_gceresult()) {
    _internal_set_gceresult(from._internal_gceresult());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCommunity_TerminateGamePersonalDataEntries_Response::CopyFrom(const CCommunity_TerminateGamePersonalDataEntries_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCommunity_TerminateGamePersonalDataEntries_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCommunity_TerminateGamePersonalDataEntries_Response::IsInitialized() const {
  return true;
}

void CCommunity_TerminateGamePersonalDataEntries_Response::InternalSwap(CCommunity_TerminateGamePersonalDataEntries_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(gceresult_, other->gceresult_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCommunity_TerminateGamePersonalDataEntries_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gcsystemmsgs_2eproto_getter, &descriptor_table_gcsystemmsgs_2eproto_once,
      file_level_metadata_gcsystemmsgs_2eproto[12]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CMsgGCHVacVerificationChange* Arena::CreateMaybeMessage< ::CMsgGCHVacVerificationChange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCHVacVerificationChange >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCHAccountPhoneNumberChange* Arena::CreateMaybeMessage< ::CMsgGCHAccountPhoneNumberChange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCHAccountPhoneNumberChange >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCHInviteUserToLobby* Arena::CreateMaybeMessage< ::CMsgGCHInviteUserToLobby >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCHInviteUserToLobby >(arena);
}
template<> PROTOBUF_NOINLINE ::CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute* Arena::CreateMaybeMessage< ::CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute >(arena);
}
template<> PROTOBUF_NOINLINE ::CQuest_PublisherAddCommunityItemsToPlayer_Request* Arena::CreateMaybeMessage< ::CQuest_PublisherAddCommunityItemsToPlayer_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CQuest_PublisherAddCommunityItemsToPlayer_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CQuest_PublisherAddCommunityItemsToPlayer_Response* Arena::CreateMaybeMessage< ::CQuest_PublisherAddCommunityItemsToPlayer_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CQuest_PublisherAddCommunityItemsToPlayer_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CCommunity_GamePersonalDataCategoryInfo* Arena::CreateMaybeMessage< ::CCommunity_GamePersonalDataCategoryInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCommunity_GamePersonalDataCategoryInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CCommunity_GetGamePersonalDataCategories_Request* Arena::CreateMaybeMessage< ::CCommunity_GetGamePersonalDataCategories_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCommunity_GetGamePersonalDataCategories_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CCommunity_GetGamePersonalDataCategories_Response* Arena::CreateMaybeMessage< ::CCommunity_GetGamePersonalDataCategories_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCommunity_GetGamePersonalDataCategories_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CCommunity_GetGamePersonalDataEntries_Request* Arena::CreateMaybeMessage< ::CCommunity_GetGamePersonalDataEntries_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCommunity_GetGamePersonalDataEntries_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CCommunity_GetGamePersonalDataEntries_Response* Arena::CreateMaybeMessage< ::CCommunity_GetGamePersonalDataEntries_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCommunity_GetGamePersonalDataEntries_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CCommunity_TerminateGamePersonalDataEntries_Request* Arena::CreateMaybeMessage< ::CCommunity_TerminateGamePersonalDataEntries_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCommunity_TerminateGamePersonalDataEntries_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CCommunity_TerminateGamePersonalDataEntries_Response* Arena::CreateMaybeMessage< ::CCommunity_TerminateGamePersonalDataEntries_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCommunity_TerminateGamePersonalDataEntries_Response >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
