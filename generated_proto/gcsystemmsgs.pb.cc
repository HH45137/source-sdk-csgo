// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gcsystemmsgs.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "gcsystemmsgs.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
class CMsgGCHVacVerificationChangeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCHVacVerificationChange> {
} _CMsgGCHVacVerificationChange_default_instance_;
class CMsgGCHAccountPhoneNumberChangeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCHAccountPhoneNumberChange> {
} _CMsgGCHAccountPhoneNumberChange_default_instance_;
class CMsgGCHInviteUserToLobbyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCHInviteUserToLobby> {
} _CMsgGCHInviteUserToLobby_default_instance_;
class CQuest_PublisherAddCommunityItemsToPlayer_Request_AttributeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute> {
} _CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute_default_instance_;
class CQuest_PublisherAddCommunityItemsToPlayer_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CQuest_PublisherAddCommunityItemsToPlayer_Request> {
} _CQuest_PublisherAddCommunityItemsToPlayer_Request_default_instance_;
class CQuest_PublisherAddCommunityItemsToPlayer_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CQuest_PublisherAddCommunityItemsToPlayer_Response> {
} _CQuest_PublisherAddCommunityItemsToPlayer_Response_default_instance_;
class CCommunity_GamePersonalDataCategoryInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CCommunity_GamePersonalDataCategoryInfo> {
} _CCommunity_GamePersonalDataCategoryInfo_default_instance_;
class CCommunity_GetGamePersonalDataCategories_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CCommunity_GetGamePersonalDataCategories_Request> {
} _CCommunity_GetGamePersonalDataCategories_Request_default_instance_;
class CCommunity_GetGamePersonalDataCategories_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CCommunity_GetGamePersonalDataCategories_Response> {
} _CCommunity_GetGamePersonalDataCategories_Response_default_instance_;
class CCommunity_GetGamePersonalDataEntries_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CCommunity_GetGamePersonalDataEntries_Request> {
} _CCommunity_GetGamePersonalDataEntries_Request_default_instance_;
class CCommunity_GetGamePersonalDataEntries_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CCommunity_GetGamePersonalDataEntries_Response> {
} _CCommunity_GetGamePersonalDataEntries_Response_default_instance_;
class CCommunity_TerminateGamePersonalDataEntries_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CCommunity_TerminateGamePersonalDataEntries_Request> {
} _CCommunity_TerminateGamePersonalDataEntries_Request_default_instance_;
class CCommunity_TerminateGamePersonalDataEntries_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CCommunity_TerminateGamePersonalDataEntries_Response> {
} _CCommunity_TerminateGamePersonalDataEntries_Response_default_instance_;

namespace protobuf_gcsystemmsgs_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[13];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[6];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCHVacVerificationChange, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCHVacVerificationChange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCHVacVerificationChange, steamid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCHVacVerificationChange, appid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCHVacVerificationChange, is_verified_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCHAccountPhoneNumberChange, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCHAccountPhoneNumberChange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCHAccountPhoneNumberChange, steamid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCHAccountPhoneNumberChange, appid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCHAccountPhoneNumberChange, phone_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCHAccountPhoneNumberChange, is_verified_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCHAccountPhoneNumberChange, is_identifying_),
  0,
  2,
  1,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCHInviteUserToLobby, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCHInviteUserToLobby, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCHInviteUserToLobby, steamid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCHInviteUserToLobby, appid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCHInviteUserToLobby, steamid_invited_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCHInviteUserToLobby, steamid_lobby_),
  0,
  3,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute, attribute_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute, value_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CQuest_PublisherAddCommunityItemsToPlayer_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CQuest_PublisherAddCommunityItemsToPlayer_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CQuest_PublisherAddCommunityItemsToPlayer_Request, steamid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CQuest_PublisherAddCommunityItemsToPlayer_Request, appid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CQuest_PublisherAddCommunityItemsToPlayer_Request, match_item_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CQuest_PublisherAddCommunityItemsToPlayer_Request, match_item_class_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CQuest_PublisherAddCommunityItemsToPlayer_Request, prefix_item_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CQuest_PublisherAddCommunityItemsToPlayer_Request, attributes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CQuest_PublisherAddCommunityItemsToPlayer_Request, note_),
  2,
  3,
  4,
  5,
  0,
  ~0u,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CQuest_PublisherAddCommunityItemsToPlayer_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CQuest_PublisherAddCommunityItemsToPlayer_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CQuest_PublisherAddCommunityItemsToPlayer_Response, items_matched_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CQuest_PublisherAddCommunityItemsToPlayer_Response, items_granted_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCommunity_GamePersonalDataCategoryInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCommunity_GamePersonalDataCategoryInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCommunity_GamePersonalDataCategoryInfo, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCommunity_GamePersonalDataCategoryInfo, localization_token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCommunity_GamePersonalDataCategoryInfo, template_file_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCommunity_GetGamePersonalDataCategories_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCommunity_GetGamePersonalDataCategories_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCommunity_GetGamePersonalDataCategories_Request, appid_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCommunity_GetGamePersonalDataCategories_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCommunity_GetGamePersonalDataCategories_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCommunity_GetGamePersonalDataCategories_Response, categories_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCommunity_GetGamePersonalDataCategories_Response, app_assets_basename_),
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCommunity_GetGamePersonalDataEntries_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCommunity_GetGamePersonalDataEntries_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCommunity_GetGamePersonalDataEntries_Request, appid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCommunity_GetGamePersonalDataEntries_Request, steamid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCommunity_GetGamePersonalDataEntries_Request, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCommunity_GetGamePersonalDataEntries_Request, continue_token_),
  3,
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCommunity_GetGamePersonalDataEntries_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCommunity_GetGamePersonalDataEntries_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCommunity_GetGamePersonalDataEntries_Response, gceresult_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCommunity_GetGamePersonalDataEntries_Response, entries_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCommunity_GetGamePersonalDataEntries_Response, continue_token_),
  1,
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCommunity_TerminateGamePersonalDataEntries_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCommunity_TerminateGamePersonalDataEntries_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCommunity_TerminateGamePersonalDataEntries_Request, appid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCommunity_TerminateGamePersonalDataEntries_Request, steamid_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCommunity_TerminateGamePersonalDataEntries_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCommunity_TerminateGamePersonalDataEntries_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCommunity_TerminateGamePersonalDataEntries_Response, gceresult_),
  0,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 7, sizeof(CMsgGCHVacVerificationChange)},
  { 10, 19, sizeof(CMsgGCHAccountPhoneNumberChange)},
  { 24, 32, sizeof(CMsgGCHInviteUserToLobby)},
  { 36, 42, sizeof(CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute)},
  { 44, 55, sizeof(CQuest_PublisherAddCommunityItemsToPlayer_Request)},
  { 62, 68, sizeof(CQuest_PublisherAddCommunityItemsToPlayer_Response)},
  { 70, 77, sizeof(CCommunity_GamePersonalDataCategoryInfo)},
  { 80, 85, sizeof(CCommunity_GetGamePersonalDataCategories_Request)},
  { 86, 92, sizeof(CCommunity_GetGamePersonalDataCategories_Response)},
  { 94, 102, sizeof(CCommunity_GetGamePersonalDataEntries_Request)},
  { 106, 113, sizeof(CCommunity_GetGamePersonalDataEntries_Response)},
  { 116, 122, sizeof(CCommunity_TerminateGamePersonalDataEntries_Request)},
  { 124, 129, sizeof(CCommunity_TerminateGamePersonalDataEntries_Response)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGCHVacVerificationChange_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGCHAccountPhoneNumberChange_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGCHInviteUserToLobby_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CQuest_PublisherAddCommunityItemsToPlayer_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CQuest_PublisherAddCommunityItemsToPlayer_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CCommunity_GamePersonalDataCategoryInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CCommunity_GetGamePersonalDataCategories_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CCommunity_GetGamePersonalDataCategories_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CCommunity_GetGamePersonalDataEntries_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CCommunity_GetGamePersonalDataEntries_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CCommunity_TerminateGamePersonalDataEntries_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CCommunity_TerminateGamePersonalDataEntries_Response_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "gcsystemmsgs.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 13);
}

}  // namespace

void TableStruct::Shutdown() {
  _CMsgGCHVacVerificationChange_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _CMsgGCHAccountPhoneNumberChange_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _CMsgGCHInviteUserToLobby_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _CQuest_PublisherAddCommunityItemsToPlayer_Request_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _CQuest_PublisherAddCommunityItemsToPlayer_Response_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _CCommunity_GamePersonalDataCategoryInfo_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _CCommunity_GetGamePersonalDataCategories_Request_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _CCommunity_GetGamePersonalDataCategories_Response_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _CCommunity_GetGamePersonalDataEntries_Request_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _CCommunity_GetGamePersonalDataEntries_Response_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _CCommunity_TerminateGamePersonalDataEntries_Request_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _CCommunity_TerminateGamePersonalDataEntries_Response_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _CMsgGCHVacVerificationChange_default_instance_.DefaultConstruct();
  _CMsgGCHAccountPhoneNumberChange_default_instance_.DefaultConstruct();
  _CMsgGCHInviteUserToLobby_default_instance_.DefaultConstruct();
  _CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute_default_instance_.DefaultConstruct();
  _CQuest_PublisherAddCommunityItemsToPlayer_Request_default_instance_.DefaultConstruct();
  _CQuest_PublisherAddCommunityItemsToPlayer_Response_default_instance_.DefaultConstruct();
  _CCommunity_GamePersonalDataCategoryInfo_default_instance_.DefaultConstruct();
  _CCommunity_GetGamePersonalDataCategories_Request_default_instance_.DefaultConstruct();
  _CCommunity_GetGamePersonalDataCategories_Response_default_instance_.DefaultConstruct();
  _CCommunity_GetGamePersonalDataEntries_Request_default_instance_.DefaultConstruct();
  _CCommunity_GetGamePersonalDataEntries_Response_default_instance_.DefaultConstruct();
  _CCommunity_TerminateGamePersonalDataEntries_Request_default_instance_.DefaultConstruct();
  _CCommunity_TerminateGamePersonalDataEntries_Response_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\022gcsystemmsgs.proto\"S\n\034CMsgGCHVacVerifi"
      "cationChange\022\017\n\007steamid\030\001 \001(\006\022\r\n\005appid\030\002"
      " \001(\r\022\023\n\013is_verified\030\003 \001(\010\"\200\001\n\037CMsgGCHAcc"
      "ountPhoneNumberChange\022\017\n\007steamid\030\001 \001(\006\022\r"
      "\n\005appid\030\002 \001(\r\022\020\n\010phone_id\030\003 \001(\004\022\023\n\013is_ve"
      "rified\030\004 \001(\010\022\026\n\016is_identifying\030\005 \001(\010\"j\n\030"
      "CMsgGCHInviteUserToLobby\022\017\n\007steamid\030\001 \001("
      "\006\022\r\n\005appid\030\002 \001(\r\022\027\n\017steamid_invited\030\003 \001("
      "\006\022\025\n\rsteamid_lobby\030\004 \001(\006\"\257\002\n1CQuest_Publ"
      "isherAddCommunityItemsToPlayer_Request\022\017"
      "\n\007steamid\030\001 \001(\004\022\r\n\005appid\030\002 \001(\r\022\027\n\017match_"
      "item_type\030\003 \001(\r\022\030\n\020match_item_class\030\004 \001("
      "\r\022\030\n\020prefix_item_name\030\005 \001(\t\022P\n\nattribute"
      "s\030\006 \003(\0132<.CQuest_PublisherAddCommunityIt"
      "emsToPlayer_Request.Attribute\022\014\n\004note\030\007 "
      "\001(\t\032-\n\tAttribute\022\021\n\tattribute\030\001 \001(\r\022\r\n\005v"
      "alue\030\002 \001(\004\"b\n2CQuest_PublisherAddCommuni"
      "tyItemsToPlayer_Response\022\025\n\ritems_matche"
      "d\030\001 \001(\r\022\025\n\ritems_granted\030\002 \001(\r\"j\n\'CCommu"
      "nity_GamePersonalDataCategoryInfo\022\014\n\004typ"
      "e\030\001 \001(\t\022\032\n\022localization_token\030\002 \001(\t\022\025\n\rt"
      "emplate_file\030\003 \001(\t\"A\n0CCommunity_GetGame"
      "PersonalDataCategories_Request\022\r\n\005appid\030"
      "\001 \001(\r\"\216\001\n1CCommunity_GetGamePersonalData"
      "Categories_Response\022<\n\ncategories\030\001 \003(\0132"
      "(.CCommunity_GamePersonalDataCategoryInf"
      "o\022\033\n\023app_assets_basename\030\002 \001(\t\"u\n-CCommu"
      "nity_GetGamePersonalDataEntries_Request\022"
      "\r\n\005appid\030\001 \001(\r\022\017\n\007steamid\030\002 \001(\004\022\014\n\004type\030"
      "\003 \001(\t\022\026\n\016continue_token\030\004 \001(\t\"l\n.CCommun"
      "ity_GetGamePersonalDataEntries_Response\022"
      "\021\n\tgceresult\030\001 \001(\r\022\017\n\007entries\030\002 \003(\t\022\026\n\016c"
      "ontinue_token\030\003 \001(\t\"U\n3CCommunity_Termin"
      "ateGamePersonalDataEntries_Request\022\r\n\005ap"
      "pid\030\001 \001(\r\022\017\n\007steamid\030\002 \001(\004\"I\n4CCommunity"
      "_TerminateGamePersonalDataEntries_Respon"
      "se\022\021\n\tgceresult\030\001 \001(\r*\306\027\n\014EGCSystemMsg\022\023"
      "\n\017k_EGCMsgInvalid\020\000\022\021\n\rk_EGCMsgMulti\020\001\022\030"
      "\n\024k_EGCMsgGenericReply\020\n\022\026\n\022k_EGCMsgSyst"
      "emBase\0202\022\036\n\032k_EGCMsgAchievementAwarded\0203"
      "\022\026\n\022k_EGCMsgConCommand\0204\022\030\n\024k_EGCMsgStar"
      "tPlaying\0205\022\027\n\023k_EGCMsgStopPlaying\0206\022\033\n\027k"
      "_EGCMsgStartGameserver\0207\022\032\n\026k_EGCMsgStop"
      "Gameserver\0208\022\025\n\021k_EGCMsgWGRequest\0209\022\026\n\022k"
      "_EGCMsgWGResponse\020:\022\"\n\036k_EGCMsgGetUserGa"
      "meStatsSchema\020;\022*\n&k_EGCMsgGetUserGameSt"
      "atsSchemaResponse\020<\022\"\n\036k_EGCMsgGetUserSt"
      "atsDEPRECATED\020=\022 \n\034k_EGCMsgGetUserStatsR"
      "esponse\020>\022\032\n\026k_EGCMsgAppInfoUpdated\020\?\022\033\n"
      "\027k_EGCMsgValidateSession\020@\022#\n\037k_EGCMsgVa"
      "lidateSessionResponse\020A\022\"\n\036k_EGCMsgLooku"
      "pAccountFromInput\020B\022\033\n\027k_EGCMsgSendHTTPR"
      "equest\020C\022#\n\037k_EGCMsgSendHTTPRequestRespo"
      "nse\020D\022\030\n\024k_EGCMsgPreTestSetup\020E\022\037\n\033k_EGC"
      "MsgRecordSupportAction\020F\022(\n$k_EGCMsgGetA"
      "ccountDetails_DEPRECATED\020G\022\"\n\036k_EGCMsgRe"
      "ceiveInterAppMessage\020I\022\030\n\024k_EGCMsgFindAc"
      "counts\020J\022\025\n\021k_EGCMsgPostAlert\020K\022\027\n\023k_EGC"
      "MsgGetLicenses\020L\022\030\n\024k_EGCMsgGetUserStats"
      "\020M\022\027\n\023k_EGCMsgGetCommands\020N\022\037\n\033k_EGCMsgG"
      "etCommandsResponse\020O\022\032\n\026k_EGCMsgAddFreeL"
      "icense\020P\022\"\n\036k_EGCMsgAddFreeLicenseRespon"
      "se\020Q\022\031\n\025k_EGCMsgGetIPLocation\020R\022!\n\035k_EGC"
      "MsgGetIPLocationResponse\020S\022\035\n\031k_EGCMsgSy"
      "stemStatsSchema\020T\022\032\n\026k_EGCMsgGetSystemSt"
      "ats\020U\022\"\n\036k_EGCMsgGetSystemStatsResponse\020"
      "V\022\025\n\021k_EGCMsgSendEmail\020W\022\035\n\031k_EGCMsgSend"
      "EmailResponse\020X\022\034\n\030k_EGCMsgGetEmailTempl"
      "ate\020Y\022$\n k_EGCMsgGetEmailTemplateRespons"
      "e\020Z\022\032\n\026k_EGCMsgGrantGuestPass\020[\022\"\n\036k_EGC"
      "MsgGrantGuestPassResponse\020\\\022\035\n\031k_EGCMsgG"
      "etAccountDetails\020]\022%\n!k_EGCMsgGetAccount"
      "DetailsResponse\020^\022\033\n\027k_EGCMsgGetPersonaN"
      "ames\020_\022#\n\037k_EGCMsgGetPersonaNamesRespons"
      "e\020`\022\030\n\024k_EGCMsgMultiplexMsg\020a\022 \n\034k_EGCMs"
      "gMultiplexMsgResponse\020b\022$\n k_EGCMsgWebAP"
      "IRegisterInterfaces\020e\022\034\n\030k_EGCMsgWebAPIJ"
      "obRequest\020f\022(\n$k_EGCMsgWebAPIJobRequestH"
      "ttpResponse\020h\022+\n\'k_EGCMsgWebAPIJobReques"
      "tForwardResponse\020i\022\031\n\024k_EGCMsgMemCachedG"
      "et\020\310\001\022!\n\034k_EGCMsgMemCachedGetResponse\020\311\001"
      "\022\031\n\024k_EGCMsgMemCachedSet\020\312\001\022\034\n\027k_EGCMsgM"
      "emCachedDelete\020\313\001\022\033\n\026k_EGCMsgMemCachedSt"
      "ats\020\314\001\022#\n\036k_EGCMsgMemCachedStatsResponse"
      "\020\315\001\022\037\n\032k_EGCMsgMasterSetDirectory\020\334\001\022\'\n\""
      "k_EGCMsgMasterSetDirectoryResponse\020\335\001\022#\n"
      "\036k_EGCMsgMasterSetWebAPIRouting\020\336\001\022+\n&k_"
      "EGCMsgMasterSetWebAPIRoutingResponse\020\337\001\022"
      "&\n!k_EGCMsgMasterSetClientMsgRouting\020\340\001\022"
      ".\n)k_EGCMsgMasterSetClientMsgRoutingResp"
      "onse\020\341\001\022\027\n\022k_EGCMsgSetOptions\020\342\001\022\037\n\032k_EG"
      "CMsgSetOptionsResponse\020\343\001\022\030\n\023k_EGCMsgSys"
      "temBase2\020\364\003\022#\n\036k_EGCMsgGetPurchaseTrustS"
      "tatus\020\365\003\022+\n&k_EGCMsgGetPurchaseTrustStat"
      "usResponse\020\366\003\022\032\n\025k_EGCMsgUpdateSession\020\367"
      "\003\022%\n k_EGCMsgGCAccountVacStatusChange\020\370\003"
      "\022\034\n\027k_EGCMsgCheckFriendship\020\371\003\022$\n\037k_EGCM"
      "sgCheckFriendshipResponse\020\372\003\022\"\n\035k_EGCMsg"
      "GetPartnerAccountLink\020\373\003\022*\n%k_EGCMsgGetP"
      "artnerAccountLinkResponse\020\374\003\022\037\n\032k_EGCMsg"
      "DPPartnerMicroTxns\020\200\004\022\'\n\"k_EGCMsgDPPartn"
      "erMicroTxnsResponse\020\201\004\022\"\n\035k_EGCMsgVacVer"
      "ificationChange\020\206\004\022%\n k_EGCMsgAccountPho"
      "neNumberChange\020\207\004\022\036\n\031k_EGCMsgInviteUserT"
      "oLobby\020\213\004\0221\n,k_EGCMsgGetGamePersonalData"
      "CategoriesRequest\020\214\004\0222\n-k_EGCMsgGetGameP"
      "ersonalDataCategoriesResponse\020\215\004\022.\n)k_EG"
      "CMsgGetGamePersonalDataEntriesRequest\020\216\004"
      "\022/\n*k_EGCMsgGetGamePersonalDataEntriesRe"
      "sponse\020\217\004\0224\n/k_EGCMsgTerminateGamePerson"
      "alDataEntriesRequest\020\220\004\0225\n0k_EGCMsgTermi"
      "nateGamePersonalDataEntriesResponse\020\221\004*\357"
      "\001\n\006ESOMsg\022\023\n\017k_ESOMsg_Create\020\025\022\023\n\017k_ESOM"
      "sg_Update\020\026\022\024\n\020k_ESOMsg_Destroy\020\027\022\034\n\030k_E"
      "SOMsg_CacheSubscribed\020\030\022\036\n\032k_ESOMsg_Cach"
      "eUnsubscribed\020\031\022\033\n\027k_ESOMsg_UpdateMultip"
      "le\020\032\022#\n\037k_ESOMsg_CacheSubscriptionCheck\020"
      "\033\022%\n!k_ESOMsg_CacheSubscriptionRefresh\020\034"
      "*\331\002\n\020EGCBaseClientMsg\022\032\n\025k_EMsgGCClientW"
      "elcome\020\244\037\022\032\n\025k_EMsgGCServerWelcome\020\245\037\022\030\n"
      "\023k_EMsgGCClientHello\020\246\037\022\030\n\023k_EMsgGCServe"
      "rHello\020\247\037\022#\n\036k_EMsgGCClientConnectionSta"
      "tus\020\251\037\022#\n\036k_EMsgGCServerConnectionStatus"
      "\020\252\037\022\037\n\032k_EMsgGCClientHelloPartner\020\253\037\022\032\n\025"
      "k_EMsgGCClientHelloPW\020\254\037\022\032\n\025k_EMsgGCClie"
      "ntHelloR2\020\255\037\022\032\n\025k_EMsgGCClientHelloR3\020\256\037"
      "\022\032\n\025k_EMsgGCClientHelloR4\020\257\037*\211\002\n\nEGCToGC"
      "Msg\022\032\n\025k_EGCToGCMsgMasterAck\020\226\001\022\"\n\035k_EGC"
      "ToGCMsgMasterAckResponse\020\227\001\022\027\n\022k_EGCToGC"
      "MsgRouted\020\230\001\022\034\n\027k_EGCToGCMsgRoutedReply\020"
      "\231\001\022\032\n\025k_EMsgUpdateSessionIP\020\232\001\022\033\n\026k_EMsg"
      "RequestSessionIP\020\233\001\022#\n\036k_EMsgRequestSess"
      "ionIPResponse\020\234\001\022&\n!k_EGCToGCMsgMasterSt"
      "artupComplete\020\235\001*\260\003\n\023ECommunityItemClass"
      "\022!\n\035k_ECommunityItemClass_Invalid\020\000\022\037\n\033k"
      "_ECommunityItemClass_Badge\020\001\022\"\n\036k_ECommu"
      "nityItemClass_GameCard\020\002\022+\n\'k_ECommunity"
      "ItemClass_ProfileBackground\020\003\022\"\n\036k_EComm"
      "unityItemClass_Emoticon\020\004\022%\n!k_ECommunit"
      "yItemClass_BoosterPack\020\005\022$\n k_ECommunity"
      "ItemClass_Consumable\020\006\022!\n\035k_ECommunityIt"
      "emClass_GameGoo\020\007\022)\n%k_ECommunityItemCla"
      "ss_ProfileModifier\020\010\022\037\n\033k_ECommunityItem"
      "Class_Scene\020\t\022$\n k_ECommunityItemClass_S"
      "alienItem\020\n*\326\003\n\027ECommunityItemAttribute\022"
      "%\n!k_ECommunityItemAttribute_Invalid\020\000\022("
      "\n$k_ECommunityItemAttribute_CardBorder\020\001"
      "\022#\n\037k_ECommunityItemAttribute_Level\020\002\022)\n"
      "%k_ECommunityItemAttribute_IssueNumber\020\003"
      "\022*\n&k_ECommunityItemAttribute_TradableTi"
      "me\020\004\022,\n(k_ECommunityItemAttribute_StoreP"
      "ackageID\020\005\0220\n,k_ECommunityItemAttribute_"
      "CommunityItemAppID\020\006\022/\n+k_ECommunityItem"
      "Attribute_CommunityItemType\020\007\0223\n/k_EComm"
      "unityItemAttribute_ProfileModiferEnabled"
      "\020\010\022(\n$k_ECommunityItemAttribute_ExpiryTi"
      "me\020\tB\005H\001\200\001\000"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 6251);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gcsystemmsgs.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_gcsystemmsgs_2eproto

const ::google::protobuf::EnumDescriptor* EGCSystemMsg_descriptor() {
  protobuf_gcsystemmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsystemmsgs_2eproto::file_level_enum_descriptors[0];
}
bool EGCSystemMsg_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 10:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 101:
    case 102:
    case 104:
    case 105:
    case 200:
    case 201:
    case 202:
    case 203:
    case 204:
    case 205:
    case 220:
    case 221:
    case 222:
    case 223:
    case 224:
    case 225:
    case 226:
    case 227:
    case 500:
    case 501:
    case 502:
    case 503:
    case 504:
    case 505:
    case 506:
    case 507:
    case 508:
    case 512:
    case 513:
    case 518:
    case 519:
    case 523:
    case 524:
    case 525:
    case 526:
    case 527:
    case 528:
    case 529:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ESOMsg_descriptor() {
  protobuf_gcsystemmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsystemmsgs_2eproto::file_level_enum_descriptors[1];
}
bool ESOMsg_IsValid(int value) {
  switch (value) {
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EGCBaseClientMsg_descriptor() {
  protobuf_gcsystemmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsystemmsgs_2eproto::file_level_enum_descriptors[2];
}
bool EGCBaseClientMsg_IsValid(int value) {
  switch (value) {
    case 4004:
    case 4005:
    case 4006:
    case 4007:
    case 4009:
    case 4010:
    case 4011:
    case 4012:
    case 4013:
    case 4014:
    case 4015:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EGCToGCMsg_descriptor() {
  protobuf_gcsystemmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsystemmsgs_2eproto::file_level_enum_descriptors[3];
}
bool EGCToGCMsg_IsValid(int value) {
  switch (value) {
    case 150:
    case 151:
    case 152:
    case 153:
    case 154:
    case 155:
    case 156:
    case 157:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ECommunityItemClass_descriptor() {
  protobuf_gcsystemmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsystemmsgs_2eproto::file_level_enum_descriptors[4];
}
bool ECommunityItemClass_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ECommunityItemAttribute_descriptor() {
  protobuf_gcsystemmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsystemmsgs_2eproto::file_level_enum_descriptors[5];
}
bool ECommunityItemAttribute_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCHVacVerificationChange::kSteamidFieldNumber;
const int CMsgGCHVacVerificationChange::kAppidFieldNumber;
const int CMsgGCHVacVerificationChange::kIsVerifiedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCHVacVerificationChange::CMsgGCHVacVerificationChange()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gcsystemmsgs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCHVacVerificationChange)
}
CMsgGCHVacVerificationChange::CMsgGCHVacVerificationChange(const CMsgGCHVacVerificationChange& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    reinterpret_cast<char*>(&is_verified_) -
    reinterpret_cast<char*>(&steamid_) + sizeof(is_verified_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCHVacVerificationChange)
}

void CMsgGCHVacVerificationChange::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&steamid_, 0, reinterpret_cast<char*>(&is_verified_) -
    reinterpret_cast<char*>(&steamid_) + sizeof(is_verified_));
}

CMsgGCHVacVerificationChange::~CMsgGCHVacVerificationChange() {
  // @@protoc_insertion_point(destructor:CMsgGCHVacVerificationChange)
  SharedDtor();
}

void CMsgGCHVacVerificationChange::SharedDtor() {
}

void CMsgGCHVacVerificationChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCHVacVerificationChange::descriptor() {
  protobuf_gcsystemmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsystemmsgs_2eproto::file_level_metadata[0].descriptor;
}

const CMsgGCHVacVerificationChange& CMsgGCHVacVerificationChange::default_instance() {
  protobuf_gcsystemmsgs_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGCHVacVerificationChange* CMsgGCHVacVerificationChange::New(::google::protobuf::Arena* arena) const {
  CMsgGCHVacVerificationChange* n = new CMsgGCHVacVerificationChange;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCHVacVerificationChange::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCHVacVerificationChange)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&steamid_, 0, reinterpret_cast<char*>(&is_verified_) -
      reinterpret_cast<char*>(&steamid_) + sizeof(is_verified_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCHVacVerificationChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCHVacVerificationChange)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (tag == 9u) {
          set_has_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 appid = 2;
      case 2: {
        if (tag == 16u) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_verified = 3;
      case 3: {
        if (tag == 24u) {
          set_has_is_verified();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_verified_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCHVacVerificationChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCHVacVerificationChange)
  return false;
#undef DO_
}

void CMsgGCHVacVerificationChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCHVacVerificationChange)
  // optional fixed64 steamid = 1;
  if (has_steamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional uint32 appid = 2;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->appid(), output);
  }

  // optional bool is_verified = 3;
  if (has_is_verified()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_verified(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCHVacVerificationChange)
}

::google::protobuf::uint8* CMsgGCHVacVerificationChange::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCHVacVerificationChange)
  // optional fixed64 steamid = 1;
  if (has_steamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional uint32 appid = 2;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->appid(), target);
  }

  // optional bool is_verified = 3;
  if (has_is_verified()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_verified(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCHVacVerificationChange)
  return target;
}

size_t CMsgGCHVacVerificationChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCHVacVerificationChange)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional fixed64 steamid = 1;
    if (has_steamid()) {
      total_size += 1 + 8;
    }

    // optional uint32 appid = 2;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional bool is_verified = 3;
    if (has_is_verified()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCHVacVerificationChange::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCHVacVerificationChange)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCHVacVerificationChange* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCHVacVerificationChange>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCHVacVerificationChange)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCHVacVerificationChange)
    MergeFrom(*source);
  }
}

void CMsgGCHVacVerificationChange::MergeFrom(const CMsgGCHVacVerificationChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCHVacVerificationChange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_steamid()) {
      set_steamid(from.steamid());
    }
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_is_verified()) {
      set_is_verified(from.is_verified());
    }
  }
}

void CMsgGCHVacVerificationChange::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCHVacVerificationChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCHVacVerificationChange::CopyFrom(const CMsgGCHVacVerificationChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCHVacVerificationChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCHVacVerificationChange::IsInitialized() const {
  return true;
}

void CMsgGCHVacVerificationChange::Swap(CMsgGCHVacVerificationChange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCHVacVerificationChange::InternalSwap(CMsgGCHVacVerificationChange* other) {
  std::swap(steamid_, other->steamid_);
  std::swap(appid_, other->appid_);
  std::swap(is_verified_, other->is_verified_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCHVacVerificationChange::GetMetadata() const {
  protobuf_gcsystemmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsystemmsgs_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCHVacVerificationChange

// optional fixed64 steamid = 1;
bool CMsgGCHVacVerificationChange::has_steamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGCHVacVerificationChange::set_has_steamid() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGCHVacVerificationChange::clear_has_steamid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGCHVacVerificationChange::clear_steamid() {
  steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid();
}
::google::protobuf::uint64 CMsgGCHVacVerificationChange::steamid() const {
  // @@protoc_insertion_point(field_get:CMsgGCHVacVerificationChange.steamid)
  return steamid_;
}
void CMsgGCHVacVerificationChange::set_steamid(::google::protobuf::uint64 value) {
  set_has_steamid();
  steamid_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCHVacVerificationChange.steamid)
}

// optional uint32 appid = 2;
bool CMsgGCHVacVerificationChange::has_appid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgGCHVacVerificationChange::set_has_appid() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgGCHVacVerificationChange::clear_has_appid() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgGCHVacVerificationChange::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
::google::protobuf::uint32 CMsgGCHVacVerificationChange::appid() const {
  // @@protoc_insertion_point(field_get:CMsgGCHVacVerificationChange.appid)
  return appid_;
}
void CMsgGCHVacVerificationChange::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCHVacVerificationChange.appid)
}

// optional bool is_verified = 3;
bool CMsgGCHVacVerificationChange::has_is_verified() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgGCHVacVerificationChange::set_has_is_verified() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgGCHVacVerificationChange::clear_has_is_verified() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgGCHVacVerificationChange::clear_is_verified() {
  is_verified_ = false;
  clear_has_is_verified();
}
bool CMsgGCHVacVerificationChange::is_verified() const {
  // @@protoc_insertion_point(field_get:CMsgGCHVacVerificationChange.is_verified)
  return is_verified_;
}
void CMsgGCHVacVerificationChange::set_is_verified(bool value) {
  set_has_is_verified();
  is_verified_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCHVacVerificationChange.is_verified)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCHAccountPhoneNumberChange::kSteamidFieldNumber;
const int CMsgGCHAccountPhoneNumberChange::kAppidFieldNumber;
const int CMsgGCHAccountPhoneNumberChange::kPhoneIdFieldNumber;
const int CMsgGCHAccountPhoneNumberChange::kIsVerifiedFieldNumber;
const int CMsgGCHAccountPhoneNumberChange::kIsIdentifyingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCHAccountPhoneNumberChange::CMsgGCHAccountPhoneNumberChange()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gcsystemmsgs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCHAccountPhoneNumberChange)
}
CMsgGCHAccountPhoneNumberChange::CMsgGCHAccountPhoneNumberChange(const CMsgGCHAccountPhoneNumberChange& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    reinterpret_cast<char*>(&is_identifying_) -
    reinterpret_cast<char*>(&steamid_) + sizeof(is_identifying_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCHAccountPhoneNumberChange)
}

void CMsgGCHAccountPhoneNumberChange::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&steamid_, 0, reinterpret_cast<char*>(&is_identifying_) -
    reinterpret_cast<char*>(&steamid_) + sizeof(is_identifying_));
}

CMsgGCHAccountPhoneNumberChange::~CMsgGCHAccountPhoneNumberChange() {
  // @@protoc_insertion_point(destructor:CMsgGCHAccountPhoneNumberChange)
  SharedDtor();
}

void CMsgGCHAccountPhoneNumberChange::SharedDtor() {
}

void CMsgGCHAccountPhoneNumberChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCHAccountPhoneNumberChange::descriptor() {
  protobuf_gcsystemmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsystemmsgs_2eproto::file_level_metadata[1].descriptor;
}

const CMsgGCHAccountPhoneNumberChange& CMsgGCHAccountPhoneNumberChange::default_instance() {
  protobuf_gcsystemmsgs_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGCHAccountPhoneNumberChange* CMsgGCHAccountPhoneNumberChange::New(::google::protobuf::Arena* arena) const {
  CMsgGCHAccountPhoneNumberChange* n = new CMsgGCHAccountPhoneNumberChange;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCHAccountPhoneNumberChange::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCHAccountPhoneNumberChange)
  if (_has_bits_[0 / 32] & 31u) {
    ::memset(&steamid_, 0, reinterpret_cast<char*>(&is_identifying_) -
      reinterpret_cast<char*>(&steamid_) + sizeof(is_identifying_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCHAccountPhoneNumberChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCHAccountPhoneNumberChange)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (tag == 9u) {
          set_has_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 appid = 2;
      case 2: {
        if (tag == 16u) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 phone_id = 3;
      case 3: {
        if (tag == 24u) {
          set_has_phone_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &phone_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_verified = 4;
      case 4: {
        if (tag == 32u) {
          set_has_is_verified();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_verified_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_identifying = 5;
      case 5: {
        if (tag == 40u) {
          set_has_is_identifying();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_identifying_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCHAccountPhoneNumberChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCHAccountPhoneNumberChange)
  return false;
#undef DO_
}

void CMsgGCHAccountPhoneNumberChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCHAccountPhoneNumberChange)
  // optional fixed64 steamid = 1;
  if (has_steamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional uint32 appid = 2;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->appid(), output);
  }

  // optional uint64 phone_id = 3;
  if (has_phone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->phone_id(), output);
  }

  // optional bool is_verified = 4;
  if (has_is_verified()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_verified(), output);
  }

  // optional bool is_identifying = 5;
  if (has_is_identifying()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_identifying(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCHAccountPhoneNumberChange)
}

::google::protobuf::uint8* CMsgGCHAccountPhoneNumberChange::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCHAccountPhoneNumberChange)
  // optional fixed64 steamid = 1;
  if (has_steamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional uint32 appid = 2;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->appid(), target);
  }

  // optional uint64 phone_id = 3;
  if (has_phone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->phone_id(), target);
  }

  // optional bool is_verified = 4;
  if (has_is_verified()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_verified(), target);
  }

  // optional bool is_identifying = 5;
  if (has_is_identifying()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_identifying(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCHAccountPhoneNumberChange)
  return target;
}

size_t CMsgGCHAccountPhoneNumberChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCHAccountPhoneNumberChange)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional fixed64 steamid = 1;
    if (has_steamid()) {
      total_size += 1 + 8;
    }

    // optional uint64 phone_id = 3;
    if (has_phone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->phone_id());
    }

    // optional uint32 appid = 2;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional bool is_verified = 4;
    if (has_is_verified()) {
      total_size += 1 + 1;
    }

    // optional bool is_identifying = 5;
    if (has_is_identifying()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCHAccountPhoneNumberChange::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCHAccountPhoneNumberChange)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCHAccountPhoneNumberChange* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCHAccountPhoneNumberChange>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCHAccountPhoneNumberChange)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCHAccountPhoneNumberChange)
    MergeFrom(*source);
  }
}

void CMsgGCHAccountPhoneNumberChange::MergeFrom(const CMsgGCHAccountPhoneNumberChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCHAccountPhoneNumberChange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 31u) {
    if (from.has_steamid()) {
      set_steamid(from.steamid());
    }
    if (from.has_phone_id()) {
      set_phone_id(from.phone_id());
    }
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_is_verified()) {
      set_is_verified(from.is_verified());
    }
    if (from.has_is_identifying()) {
      set_is_identifying(from.is_identifying());
    }
  }
}

void CMsgGCHAccountPhoneNumberChange::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCHAccountPhoneNumberChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCHAccountPhoneNumberChange::CopyFrom(const CMsgGCHAccountPhoneNumberChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCHAccountPhoneNumberChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCHAccountPhoneNumberChange::IsInitialized() const {
  return true;
}

void CMsgGCHAccountPhoneNumberChange::Swap(CMsgGCHAccountPhoneNumberChange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCHAccountPhoneNumberChange::InternalSwap(CMsgGCHAccountPhoneNumberChange* other) {
  std::swap(steamid_, other->steamid_);
  std::swap(phone_id_, other->phone_id_);
  std::swap(appid_, other->appid_);
  std::swap(is_verified_, other->is_verified_);
  std::swap(is_identifying_, other->is_identifying_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCHAccountPhoneNumberChange::GetMetadata() const {
  protobuf_gcsystemmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsystemmsgs_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCHAccountPhoneNumberChange

// optional fixed64 steamid = 1;
bool CMsgGCHAccountPhoneNumberChange::has_steamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGCHAccountPhoneNumberChange::set_has_steamid() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGCHAccountPhoneNumberChange::clear_has_steamid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGCHAccountPhoneNumberChange::clear_steamid() {
  steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid();
}
::google::protobuf::uint64 CMsgGCHAccountPhoneNumberChange::steamid() const {
  // @@protoc_insertion_point(field_get:CMsgGCHAccountPhoneNumberChange.steamid)
  return steamid_;
}
void CMsgGCHAccountPhoneNumberChange::set_steamid(::google::protobuf::uint64 value) {
  set_has_steamid();
  steamid_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCHAccountPhoneNumberChange.steamid)
}

// optional uint32 appid = 2;
bool CMsgGCHAccountPhoneNumberChange::has_appid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgGCHAccountPhoneNumberChange::set_has_appid() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgGCHAccountPhoneNumberChange::clear_has_appid() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgGCHAccountPhoneNumberChange::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
::google::protobuf::uint32 CMsgGCHAccountPhoneNumberChange::appid() const {
  // @@protoc_insertion_point(field_get:CMsgGCHAccountPhoneNumberChange.appid)
  return appid_;
}
void CMsgGCHAccountPhoneNumberChange::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCHAccountPhoneNumberChange.appid)
}

// optional uint64 phone_id = 3;
bool CMsgGCHAccountPhoneNumberChange::has_phone_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgGCHAccountPhoneNumberChange::set_has_phone_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgGCHAccountPhoneNumberChange::clear_has_phone_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgGCHAccountPhoneNumberChange::clear_phone_id() {
  phone_id_ = GOOGLE_ULONGLONG(0);
  clear_has_phone_id();
}
::google::protobuf::uint64 CMsgGCHAccountPhoneNumberChange::phone_id() const {
  // @@protoc_insertion_point(field_get:CMsgGCHAccountPhoneNumberChange.phone_id)
  return phone_id_;
}
void CMsgGCHAccountPhoneNumberChange::set_phone_id(::google::protobuf::uint64 value) {
  set_has_phone_id();
  phone_id_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCHAccountPhoneNumberChange.phone_id)
}

// optional bool is_verified = 4;
bool CMsgGCHAccountPhoneNumberChange::has_is_verified() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgGCHAccountPhoneNumberChange::set_has_is_verified() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgGCHAccountPhoneNumberChange::clear_has_is_verified() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgGCHAccountPhoneNumberChange::clear_is_verified() {
  is_verified_ = false;
  clear_has_is_verified();
}
bool CMsgGCHAccountPhoneNumberChange::is_verified() const {
  // @@protoc_insertion_point(field_get:CMsgGCHAccountPhoneNumberChange.is_verified)
  return is_verified_;
}
void CMsgGCHAccountPhoneNumberChange::set_is_verified(bool value) {
  set_has_is_verified();
  is_verified_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCHAccountPhoneNumberChange.is_verified)
}

// optional bool is_identifying = 5;
bool CMsgGCHAccountPhoneNumberChange::has_is_identifying() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgGCHAccountPhoneNumberChange::set_has_is_identifying() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgGCHAccountPhoneNumberChange::clear_has_is_identifying() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgGCHAccountPhoneNumberChange::clear_is_identifying() {
  is_identifying_ = false;
  clear_has_is_identifying();
}
bool CMsgGCHAccountPhoneNumberChange::is_identifying() const {
  // @@protoc_insertion_point(field_get:CMsgGCHAccountPhoneNumberChange.is_identifying)
  return is_identifying_;
}
void CMsgGCHAccountPhoneNumberChange::set_is_identifying(bool value) {
  set_has_is_identifying();
  is_identifying_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCHAccountPhoneNumberChange.is_identifying)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCHInviteUserToLobby::kSteamidFieldNumber;
const int CMsgGCHInviteUserToLobby::kAppidFieldNumber;
const int CMsgGCHInviteUserToLobby::kSteamidInvitedFieldNumber;
const int CMsgGCHInviteUserToLobby::kSteamidLobbyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCHInviteUserToLobby::CMsgGCHInviteUserToLobby()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gcsystemmsgs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgGCHInviteUserToLobby)
}
CMsgGCHInviteUserToLobby::CMsgGCHInviteUserToLobby(const CMsgGCHInviteUserToLobby& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&steamid_) + sizeof(appid_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCHInviteUserToLobby)
}

void CMsgGCHInviteUserToLobby::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&steamid_, 0, reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&steamid_) + sizeof(appid_));
}

CMsgGCHInviteUserToLobby::~CMsgGCHInviteUserToLobby() {
  // @@protoc_insertion_point(destructor:CMsgGCHInviteUserToLobby)
  SharedDtor();
}

void CMsgGCHInviteUserToLobby::SharedDtor() {
}

void CMsgGCHInviteUserToLobby::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCHInviteUserToLobby::descriptor() {
  protobuf_gcsystemmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsystemmsgs_2eproto::file_level_metadata[2].descriptor;
}

const CMsgGCHInviteUserToLobby& CMsgGCHInviteUserToLobby::default_instance() {
  protobuf_gcsystemmsgs_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGCHInviteUserToLobby* CMsgGCHInviteUserToLobby::New(::google::protobuf::Arena* arena) const {
  CMsgGCHInviteUserToLobby* n = new CMsgGCHInviteUserToLobby;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCHInviteUserToLobby::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCHInviteUserToLobby)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&steamid_, 0, reinterpret_cast<char*>(&appid_) -
      reinterpret_cast<char*>(&steamid_) + sizeof(appid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCHInviteUserToLobby::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgGCHInviteUserToLobby)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (tag == 9u) {
          set_has_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 appid = 2;
      case 2: {
        if (tag == 16u) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steamid_invited = 3;
      case 3: {
        if (tag == 25u) {
          set_has_steamid_invited();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_invited_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steamid_lobby = 4;
      case 4: {
        if (tag == 33u) {
          set_has_steamid_lobby();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_lobby_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgGCHInviteUserToLobby)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgGCHInviteUserToLobby)
  return false;
#undef DO_
}

void CMsgGCHInviteUserToLobby::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgGCHInviteUserToLobby)
  // optional fixed64 steamid = 1;
  if (has_steamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional uint32 appid = 2;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->appid(), output);
  }

  // optional fixed64 steamid_invited = 3;
  if (has_steamid_invited()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->steamid_invited(), output);
  }

  // optional fixed64 steamid_lobby = 4;
  if (has_steamid_lobby()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->steamid_lobby(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgGCHInviteUserToLobby)
}

::google::protobuf::uint8* CMsgGCHInviteUserToLobby::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCHInviteUserToLobby)
  // optional fixed64 steamid = 1;
  if (has_steamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional uint32 appid = 2;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->appid(), target);
  }

  // optional fixed64 steamid_invited = 3;
  if (has_steamid_invited()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->steamid_invited(), target);
  }

  // optional fixed64 steamid_lobby = 4;
  if (has_steamid_lobby()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->steamid_lobby(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCHInviteUserToLobby)
  return target;
}

size_t CMsgGCHInviteUserToLobby::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCHInviteUserToLobby)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional fixed64 steamid = 1;
    if (has_steamid()) {
      total_size += 1 + 8;
    }

    // optional fixed64 steamid_invited = 3;
    if (has_steamid_invited()) {
      total_size += 1 + 8;
    }

    // optional fixed64 steamid_lobby = 4;
    if (has_steamid_lobby()) {
      total_size += 1 + 8;
    }

    // optional uint32 appid = 2;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCHInviteUserToLobby::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCHInviteUserToLobby)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCHInviteUserToLobby* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCHInviteUserToLobby>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCHInviteUserToLobby)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCHInviteUserToLobby)
    MergeFrom(*source);
  }
}

void CMsgGCHInviteUserToLobby::MergeFrom(const CMsgGCHInviteUserToLobby& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCHInviteUserToLobby)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 15u) {
    if (from.has_steamid()) {
      set_steamid(from.steamid());
    }
    if (from.has_steamid_invited()) {
      set_steamid_invited(from.steamid_invited());
    }
    if (from.has_steamid_lobby()) {
      set_steamid_lobby(from.steamid_lobby());
    }
    if (from.has_appid()) {
      set_appid(from.appid());
    }
  }
}

void CMsgGCHInviteUserToLobby::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCHInviteUserToLobby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCHInviteUserToLobby::CopyFrom(const CMsgGCHInviteUserToLobby& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCHInviteUserToLobby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCHInviteUserToLobby::IsInitialized() const {
  return true;
}

void CMsgGCHInviteUserToLobby::Swap(CMsgGCHInviteUserToLobby* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCHInviteUserToLobby::InternalSwap(CMsgGCHInviteUserToLobby* other) {
  std::swap(steamid_, other->steamid_);
  std::swap(steamid_invited_, other->steamid_invited_);
  std::swap(steamid_lobby_, other->steamid_lobby_);
  std::swap(appid_, other->appid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCHInviteUserToLobby::GetMetadata() const {
  protobuf_gcsystemmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsystemmsgs_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCHInviteUserToLobby

// optional fixed64 steamid = 1;
bool CMsgGCHInviteUserToLobby::has_steamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGCHInviteUserToLobby::set_has_steamid() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGCHInviteUserToLobby::clear_has_steamid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGCHInviteUserToLobby::clear_steamid() {
  steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid();
}
::google::protobuf::uint64 CMsgGCHInviteUserToLobby::steamid() const {
  // @@protoc_insertion_point(field_get:CMsgGCHInviteUserToLobby.steamid)
  return steamid_;
}
void CMsgGCHInviteUserToLobby::set_steamid(::google::protobuf::uint64 value) {
  set_has_steamid();
  steamid_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCHInviteUserToLobby.steamid)
}

// optional uint32 appid = 2;
bool CMsgGCHInviteUserToLobby::has_appid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgGCHInviteUserToLobby::set_has_appid() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgGCHInviteUserToLobby::clear_has_appid() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgGCHInviteUserToLobby::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
::google::protobuf::uint32 CMsgGCHInviteUserToLobby::appid() const {
  // @@protoc_insertion_point(field_get:CMsgGCHInviteUserToLobby.appid)
  return appid_;
}
void CMsgGCHInviteUserToLobby::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCHInviteUserToLobby.appid)
}

// optional fixed64 steamid_invited = 3;
bool CMsgGCHInviteUserToLobby::has_steamid_invited() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgGCHInviteUserToLobby::set_has_steamid_invited() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgGCHInviteUserToLobby::clear_has_steamid_invited() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgGCHInviteUserToLobby::clear_steamid_invited() {
  steamid_invited_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid_invited();
}
::google::protobuf::uint64 CMsgGCHInviteUserToLobby::steamid_invited() const {
  // @@protoc_insertion_point(field_get:CMsgGCHInviteUserToLobby.steamid_invited)
  return steamid_invited_;
}
void CMsgGCHInviteUserToLobby::set_steamid_invited(::google::protobuf::uint64 value) {
  set_has_steamid_invited();
  steamid_invited_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCHInviteUserToLobby.steamid_invited)
}

// optional fixed64 steamid_lobby = 4;
bool CMsgGCHInviteUserToLobby::has_steamid_lobby() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgGCHInviteUserToLobby::set_has_steamid_lobby() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgGCHInviteUserToLobby::clear_has_steamid_lobby() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgGCHInviteUserToLobby::clear_steamid_lobby() {
  steamid_lobby_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid_lobby();
}
::google::protobuf::uint64 CMsgGCHInviteUserToLobby::steamid_lobby() const {
  // @@protoc_insertion_point(field_get:CMsgGCHInviteUserToLobby.steamid_lobby)
  return steamid_lobby_;
}
void CMsgGCHInviteUserToLobby::set_steamid_lobby(::google::protobuf::uint64 value) {
  set_has_steamid_lobby();
  steamid_lobby_ = value;
  // @@protoc_insertion_point(field_set:CMsgGCHInviteUserToLobby.steamid_lobby)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::kAttributeFieldNumber;
const int CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gcsystemmsgs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CQuest_PublisherAddCommunityItemsToPlayer_Request.Attribute)
}
CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute(const CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&value_, &from.value_,
    reinterpret_cast<char*>(&attribute_) -
    reinterpret_cast<char*>(&value_) + sizeof(attribute_));
  // @@protoc_insertion_point(copy_constructor:CQuest_PublisherAddCommunityItemsToPlayer_Request.Attribute)
}

void CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&value_, 0, reinterpret_cast<char*>(&attribute_) -
    reinterpret_cast<char*>(&value_) + sizeof(attribute_));
}

CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::~CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute() {
  // @@protoc_insertion_point(destructor:CQuest_PublisherAddCommunityItemsToPlayer_Request.Attribute)
  SharedDtor();
}

void CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::SharedDtor() {
}

void CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::descriptor() {
  protobuf_gcsystemmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsystemmsgs_2eproto::file_level_metadata[3].descriptor;
}

const CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute& CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::default_instance() {
  protobuf_gcsystemmsgs_2eproto::InitDefaults();
  return *internal_default_instance();
}

CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute* CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::New(::google::protobuf::Arena* arena) const {
  CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute* n = new CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::Clear() {
// @@protoc_insertion_point(message_clear_start:CQuest_PublisherAddCommunityItemsToPlayer_Request.Attribute)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&value_, 0, reinterpret_cast<char*>(&attribute_) -
      reinterpret_cast<char*>(&value_) + sizeof(attribute_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CQuest_PublisherAddCommunityItemsToPlayer_Request.Attribute)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 attribute = 1;
      case 1: {
        if (tag == 8u) {
          set_has_attribute();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attribute_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 value = 2;
      case 2: {
        if (tag == 16u) {
          set_has_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CQuest_PublisherAddCommunityItemsToPlayer_Request.Attribute)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CQuest_PublisherAddCommunityItemsToPlayer_Request.Attribute)
  return false;
#undef DO_
}

void CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CQuest_PublisherAddCommunityItemsToPlayer_Request.Attribute)
  // optional uint32 attribute = 1;
  if (has_attribute()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->attribute(), output);
  }

  // optional uint64 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CQuest_PublisherAddCommunityItemsToPlayer_Request.Attribute)
}

::google::protobuf::uint8* CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CQuest_PublisherAddCommunityItemsToPlayer_Request.Attribute)
  // optional uint32 attribute = 1;
  if (has_attribute()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->attribute(), target);
  }

  // optional uint64 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CQuest_PublisherAddCommunityItemsToPlayer_Request.Attribute)
  return target;
}

size_t CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CQuest_PublisherAddCommunityItemsToPlayer_Request.Attribute)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->value());
    }

    // optional uint32 attribute = 1;
    if (has_attribute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attribute());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CQuest_PublisherAddCommunityItemsToPlayer_Request.Attribute)
  GOOGLE_DCHECK_NE(&from, this);
  const CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CQuest_PublisherAddCommunityItemsToPlayer_Request.Attribute)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CQuest_PublisherAddCommunityItemsToPlayer_Request.Attribute)
    MergeFrom(*source);
  }
}

void CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::MergeFrom(const CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CQuest_PublisherAddCommunityItemsToPlayer_Request.Attribute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_attribute()) {
      set_attribute(from.attribute());
    }
  }
}

void CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CQuest_PublisherAddCommunityItemsToPlayer_Request.Attribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::CopyFrom(const CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CQuest_PublisherAddCommunityItemsToPlayer_Request.Attribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::IsInitialized() const {
  return true;
}

void CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::Swap(CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::InternalSwap(CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute* other) {
  std::swap(value_, other->value_);
  std::swap(attribute_, other->attribute_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::GetMetadata() const {
  protobuf_gcsystemmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsystemmsgs_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute

// optional uint32 attribute = 1;
bool CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::has_attribute() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::set_has_attribute() {
  _has_bits_[0] |= 0x00000002u;
}
void CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::clear_has_attribute() {
  _has_bits_[0] &= ~0x00000002u;
}
void CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::clear_attribute() {
  attribute_ = 0u;
  clear_has_attribute();
}
::google::protobuf::uint32 CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::attribute() const {
  // @@protoc_insertion_point(field_get:CQuest_PublisherAddCommunityItemsToPlayer_Request.Attribute.attribute)
  return attribute_;
}
void CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::set_attribute(::google::protobuf::uint32 value) {
  set_has_attribute();
  attribute_ = value;
  // @@protoc_insertion_point(field_set:CQuest_PublisherAddCommunityItemsToPlayer_Request.Attribute.attribute)
}

// optional uint64 value = 2;
bool CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
void CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
void CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::clear_value() {
  value_ = GOOGLE_ULONGLONG(0);
  clear_has_value();
}
::google::protobuf::uint64 CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::value() const {
  // @@protoc_insertion_point(field_get:CQuest_PublisherAddCommunityItemsToPlayer_Request.Attribute.value)
  return value_;
}
void CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::set_value(::google::protobuf::uint64 value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:CQuest_PublisherAddCommunityItemsToPlayer_Request.Attribute.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CQuest_PublisherAddCommunityItemsToPlayer_Request::kSteamidFieldNumber;
const int CQuest_PublisherAddCommunityItemsToPlayer_Request::kAppidFieldNumber;
const int CQuest_PublisherAddCommunityItemsToPlayer_Request::kMatchItemTypeFieldNumber;
const int CQuest_PublisherAddCommunityItemsToPlayer_Request::kMatchItemClassFieldNumber;
const int CQuest_PublisherAddCommunityItemsToPlayer_Request::kPrefixItemNameFieldNumber;
const int CQuest_PublisherAddCommunityItemsToPlayer_Request::kAttributesFieldNumber;
const int CQuest_PublisherAddCommunityItemsToPlayer_Request::kNoteFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CQuest_PublisherAddCommunityItemsToPlayer_Request::CQuest_PublisherAddCommunityItemsToPlayer_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gcsystemmsgs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CQuest_PublisherAddCommunityItemsToPlayer_Request)
}
CQuest_PublisherAddCommunityItemsToPlayer_Request::CQuest_PublisherAddCommunityItemsToPlayer_Request(const CQuest_PublisherAddCommunityItemsToPlayer_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      attributes_(from.attributes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  prefix_item_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_prefix_item_name()) {
    prefix_item_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prefix_item_name_);
  }
  note_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_note()) {
    note_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.note_);
  }
  ::memcpy(&steamid_, &from.steamid_,
    reinterpret_cast<char*>(&match_item_class_) -
    reinterpret_cast<char*>(&steamid_) + sizeof(match_item_class_));
  // @@protoc_insertion_point(copy_constructor:CQuest_PublisherAddCommunityItemsToPlayer_Request)
}

void CQuest_PublisherAddCommunityItemsToPlayer_Request::SharedCtor() {
  _cached_size_ = 0;
  prefix_item_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  note_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&steamid_, 0, reinterpret_cast<char*>(&match_item_class_) -
    reinterpret_cast<char*>(&steamid_) + sizeof(match_item_class_));
}

CQuest_PublisherAddCommunityItemsToPlayer_Request::~CQuest_PublisherAddCommunityItemsToPlayer_Request() {
  // @@protoc_insertion_point(destructor:CQuest_PublisherAddCommunityItemsToPlayer_Request)
  SharedDtor();
}

void CQuest_PublisherAddCommunityItemsToPlayer_Request::SharedDtor() {
  prefix_item_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  note_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CQuest_PublisherAddCommunityItemsToPlayer_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CQuest_PublisherAddCommunityItemsToPlayer_Request::descriptor() {
  protobuf_gcsystemmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsystemmsgs_2eproto::file_level_metadata[4].descriptor;
}

const CQuest_PublisherAddCommunityItemsToPlayer_Request& CQuest_PublisherAddCommunityItemsToPlayer_Request::default_instance() {
  protobuf_gcsystemmsgs_2eproto::InitDefaults();
  return *internal_default_instance();
}

CQuest_PublisherAddCommunityItemsToPlayer_Request* CQuest_PublisherAddCommunityItemsToPlayer_Request::New(::google::protobuf::Arena* arena) const {
  CQuest_PublisherAddCommunityItemsToPlayer_Request* n = new CQuest_PublisherAddCommunityItemsToPlayer_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CQuest_PublisherAddCommunityItemsToPlayer_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CQuest_PublisherAddCommunityItemsToPlayer_Request)
  attributes_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_prefix_item_name()) {
      GOOGLE_DCHECK(!prefix_item_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*prefix_item_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_note()) {
      GOOGLE_DCHECK(!note_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*note_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 60u) {
    ::memset(&steamid_, 0, reinterpret_cast<char*>(&match_item_class_) -
      reinterpret_cast<char*>(&steamid_) + sizeof(match_item_class_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CQuest_PublisherAddCommunityItemsToPlayer_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CQuest_PublisherAddCommunityItemsToPlayer_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 steamid = 1;
      case 1: {
        if (tag == 8u) {
          set_has_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 appid = 2;
      case 2: {
        if (tag == 16u) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 match_item_type = 3;
      case 3: {
        if (tag == 24u) {
          set_has_match_item_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &match_item_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 match_item_class = 4;
      case 4: {
        if (tag == 32u) {
          set_has_match_item_class();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &match_item_class_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string prefix_item_name = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_prefix_item_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->prefix_item_name().data(), this->prefix_item_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CQuest_PublisherAddCommunityItemsToPlayer_Request.prefix_item_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .CQuest_PublisherAddCommunityItemsToPlayer_Request.Attribute attributes = 6;
      case 6: {
        if (tag == 50u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_attributes()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // optional string note = 7;
      case 7: {
        if (tag == 58u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_note()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->note().data(), this->note().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CQuest_PublisherAddCommunityItemsToPlayer_Request.note");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CQuest_PublisherAddCommunityItemsToPlayer_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CQuest_PublisherAddCommunityItemsToPlayer_Request)
  return false;
#undef DO_
}

void CQuest_PublisherAddCommunityItemsToPlayer_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CQuest_PublisherAddCommunityItemsToPlayer_Request)
  // optional uint64 steamid = 1;
  if (has_steamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->steamid(), output);
  }

  // optional uint32 appid = 2;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->appid(), output);
  }

  // optional uint32 match_item_type = 3;
  if (has_match_item_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->match_item_type(), output);
  }

  // optional uint32 match_item_class = 4;
  if (has_match_item_class()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->match_item_class(), output);
  }

  // optional string prefix_item_name = 5;
  if (has_prefix_item_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->prefix_item_name().data(), this->prefix_item_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CQuest_PublisherAddCommunityItemsToPlayer_Request.prefix_item_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->prefix_item_name(), output);
  }

  // repeated .CQuest_PublisherAddCommunityItemsToPlayer_Request.Attribute attributes = 6;
  for (unsigned int i = 0, n = this->attributes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->attributes(i), output);
  }

  // optional string note = 7;
  if (has_note()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->note().data(), this->note().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CQuest_PublisherAddCommunityItemsToPlayer_Request.note");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->note(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CQuest_PublisherAddCommunityItemsToPlayer_Request)
}

::google::protobuf::uint8* CQuest_PublisherAddCommunityItemsToPlayer_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CQuest_PublisherAddCommunityItemsToPlayer_Request)
  // optional uint64 steamid = 1;
  if (has_steamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->steamid(), target);
  }

  // optional uint32 appid = 2;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->appid(), target);
  }

  // optional uint32 match_item_type = 3;
  if (has_match_item_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->match_item_type(), target);
  }

  // optional uint32 match_item_class = 4;
  if (has_match_item_class()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->match_item_class(), target);
  }

  // optional string prefix_item_name = 5;
  if (has_prefix_item_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->prefix_item_name().data(), this->prefix_item_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CQuest_PublisherAddCommunityItemsToPlayer_Request.prefix_item_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->prefix_item_name(), target);
  }

  // repeated .CQuest_PublisherAddCommunityItemsToPlayer_Request.Attribute attributes = 6;
  for (unsigned int i = 0, n = this->attributes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->attributes(i), false, target);
  }

  // optional string note = 7;
  if (has_note()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->note().data(), this->note().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CQuest_PublisherAddCommunityItemsToPlayer_Request.note");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->note(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CQuest_PublisherAddCommunityItemsToPlayer_Request)
  return target;
}

size_t CQuest_PublisherAddCommunityItemsToPlayer_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CQuest_PublisherAddCommunityItemsToPlayer_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .CQuest_PublisherAddCommunityItemsToPlayer_Request.Attribute attributes = 6;
  {
    unsigned int count = this->attributes_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attributes(i));
    }
  }

  if (_has_bits_[0 / 32] & 63u) {
    // optional string prefix_item_name = 5;
    if (has_prefix_item_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->prefix_item_name());
    }

    // optional string note = 7;
    if (has_note()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->note());
    }

    // optional uint64 steamid = 1;
    if (has_steamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->steamid());
    }

    // optional uint32 appid = 2;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional uint32 match_item_type = 3;
    if (has_match_item_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->match_item_type());
    }

    // optional uint32 match_item_class = 4;
    if (has_match_item_class()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->match_item_class());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CQuest_PublisherAddCommunityItemsToPlayer_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CQuest_PublisherAddCommunityItemsToPlayer_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CQuest_PublisherAddCommunityItemsToPlayer_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CQuest_PublisherAddCommunityItemsToPlayer_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CQuest_PublisherAddCommunityItemsToPlayer_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CQuest_PublisherAddCommunityItemsToPlayer_Request)
    MergeFrom(*source);
  }
}

void CQuest_PublisherAddCommunityItemsToPlayer_Request::MergeFrom(const CQuest_PublisherAddCommunityItemsToPlayer_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CQuest_PublisherAddCommunityItemsToPlayer_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  attributes_.MergeFrom(from.attributes_);
  if (from._has_bits_[0 / 32] & 63u) {
    if (from.has_prefix_item_name()) {
      set_has_prefix_item_name();
      prefix_item_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prefix_item_name_);
    }
    if (from.has_note()) {
      set_has_note();
      note_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.note_);
    }
    if (from.has_steamid()) {
      set_steamid(from.steamid());
    }
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_match_item_type()) {
      set_match_item_type(from.match_item_type());
    }
    if (from.has_match_item_class()) {
      set_match_item_class(from.match_item_class());
    }
  }
}

void CQuest_PublisherAddCommunityItemsToPlayer_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CQuest_PublisherAddCommunityItemsToPlayer_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CQuest_PublisherAddCommunityItemsToPlayer_Request::CopyFrom(const CQuest_PublisherAddCommunityItemsToPlayer_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CQuest_PublisherAddCommunityItemsToPlayer_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CQuest_PublisherAddCommunityItemsToPlayer_Request::IsInitialized() const {
  return true;
}

void CQuest_PublisherAddCommunityItemsToPlayer_Request::Swap(CQuest_PublisherAddCommunityItemsToPlayer_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CQuest_PublisherAddCommunityItemsToPlayer_Request::InternalSwap(CQuest_PublisherAddCommunityItemsToPlayer_Request* other) {
  attributes_.UnsafeArenaSwap(&other->attributes_);
  prefix_item_name_.Swap(&other->prefix_item_name_);
  note_.Swap(&other->note_);
  std::swap(steamid_, other->steamid_);
  std::swap(appid_, other->appid_);
  std::swap(match_item_type_, other->match_item_type_);
  std::swap(match_item_class_, other->match_item_class_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CQuest_PublisherAddCommunityItemsToPlayer_Request::GetMetadata() const {
  protobuf_gcsystemmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsystemmsgs_2eproto::file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CQuest_PublisherAddCommunityItemsToPlayer_Request

// optional uint64 steamid = 1;
bool CQuest_PublisherAddCommunityItemsToPlayer_Request::has_steamid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CQuest_PublisherAddCommunityItemsToPlayer_Request::set_has_steamid() {
  _has_bits_[0] |= 0x00000004u;
}
void CQuest_PublisherAddCommunityItemsToPlayer_Request::clear_has_steamid() {
  _has_bits_[0] &= ~0x00000004u;
}
void CQuest_PublisherAddCommunityItemsToPlayer_Request::clear_steamid() {
  steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid();
}
::google::protobuf::uint64 CQuest_PublisherAddCommunityItemsToPlayer_Request::steamid() const {
  // @@protoc_insertion_point(field_get:CQuest_PublisherAddCommunityItemsToPlayer_Request.steamid)
  return steamid_;
}
void CQuest_PublisherAddCommunityItemsToPlayer_Request::set_steamid(::google::protobuf::uint64 value) {
  set_has_steamid();
  steamid_ = value;
  // @@protoc_insertion_point(field_set:CQuest_PublisherAddCommunityItemsToPlayer_Request.steamid)
}

// optional uint32 appid = 2;
bool CQuest_PublisherAddCommunityItemsToPlayer_Request::has_appid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CQuest_PublisherAddCommunityItemsToPlayer_Request::set_has_appid() {
  _has_bits_[0] |= 0x00000008u;
}
void CQuest_PublisherAddCommunityItemsToPlayer_Request::clear_has_appid() {
  _has_bits_[0] &= ~0x00000008u;
}
void CQuest_PublisherAddCommunityItemsToPlayer_Request::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
::google::protobuf::uint32 CQuest_PublisherAddCommunityItemsToPlayer_Request::appid() const {
  // @@protoc_insertion_point(field_get:CQuest_PublisherAddCommunityItemsToPlayer_Request.appid)
  return appid_;
}
void CQuest_PublisherAddCommunityItemsToPlayer_Request::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:CQuest_PublisherAddCommunityItemsToPlayer_Request.appid)
}

// optional uint32 match_item_type = 3;
bool CQuest_PublisherAddCommunityItemsToPlayer_Request::has_match_item_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CQuest_PublisherAddCommunityItemsToPlayer_Request::set_has_match_item_type() {
  _has_bits_[0] |= 0x00000010u;
}
void CQuest_PublisherAddCommunityItemsToPlayer_Request::clear_has_match_item_type() {
  _has_bits_[0] &= ~0x00000010u;
}
void CQuest_PublisherAddCommunityItemsToPlayer_Request::clear_match_item_type() {
  match_item_type_ = 0u;
  clear_has_match_item_type();
}
::google::protobuf::uint32 CQuest_PublisherAddCommunityItemsToPlayer_Request::match_item_type() const {
  // @@protoc_insertion_point(field_get:CQuest_PublisherAddCommunityItemsToPlayer_Request.match_item_type)
  return match_item_type_;
}
void CQuest_PublisherAddCommunityItemsToPlayer_Request::set_match_item_type(::google::protobuf::uint32 value) {
  set_has_match_item_type();
  match_item_type_ = value;
  // @@protoc_insertion_point(field_set:CQuest_PublisherAddCommunityItemsToPlayer_Request.match_item_type)
}

// optional uint32 match_item_class = 4;
bool CQuest_PublisherAddCommunityItemsToPlayer_Request::has_match_item_class() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CQuest_PublisherAddCommunityItemsToPlayer_Request::set_has_match_item_class() {
  _has_bits_[0] |= 0x00000020u;
}
void CQuest_PublisherAddCommunityItemsToPlayer_Request::clear_has_match_item_class() {
  _has_bits_[0] &= ~0x00000020u;
}
void CQuest_PublisherAddCommunityItemsToPlayer_Request::clear_match_item_class() {
  match_item_class_ = 0u;
  clear_has_match_item_class();
}
::google::protobuf::uint32 CQuest_PublisherAddCommunityItemsToPlayer_Request::match_item_class() const {
  // @@protoc_insertion_point(field_get:CQuest_PublisherAddCommunityItemsToPlayer_Request.match_item_class)
  return match_item_class_;
}
void CQuest_PublisherAddCommunityItemsToPlayer_Request::set_match_item_class(::google::protobuf::uint32 value) {
  set_has_match_item_class();
  match_item_class_ = value;
  // @@protoc_insertion_point(field_set:CQuest_PublisherAddCommunityItemsToPlayer_Request.match_item_class)
}

// optional string prefix_item_name = 5;
bool CQuest_PublisherAddCommunityItemsToPlayer_Request::has_prefix_item_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CQuest_PublisherAddCommunityItemsToPlayer_Request::set_has_prefix_item_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CQuest_PublisherAddCommunityItemsToPlayer_Request::clear_has_prefix_item_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CQuest_PublisherAddCommunityItemsToPlayer_Request::clear_prefix_item_name() {
  prefix_item_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_prefix_item_name();
}
const ::std::string& CQuest_PublisherAddCommunityItemsToPlayer_Request::prefix_item_name() const {
  // @@protoc_insertion_point(field_get:CQuest_PublisherAddCommunityItemsToPlayer_Request.prefix_item_name)
  return prefix_item_name_.GetNoArena();
}
void CQuest_PublisherAddCommunityItemsToPlayer_Request::set_prefix_item_name(const ::std::string& value) {
  set_has_prefix_item_name();
  prefix_item_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CQuest_PublisherAddCommunityItemsToPlayer_Request.prefix_item_name)
}
#if LANG_CXX11
void CQuest_PublisherAddCommunityItemsToPlayer_Request::set_prefix_item_name(::std::string&& value) {
  set_has_prefix_item_name();
  prefix_item_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CQuest_PublisherAddCommunityItemsToPlayer_Request.prefix_item_name)
}
#endif
void CQuest_PublisherAddCommunityItemsToPlayer_Request::set_prefix_item_name(const char* value) {
  set_has_prefix_item_name();
  prefix_item_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CQuest_PublisherAddCommunityItemsToPlayer_Request.prefix_item_name)
}
void CQuest_PublisherAddCommunityItemsToPlayer_Request::set_prefix_item_name(const char* value, size_t size) {
  set_has_prefix_item_name();
  prefix_item_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CQuest_PublisherAddCommunityItemsToPlayer_Request.prefix_item_name)
}
::std::string* CQuest_PublisherAddCommunityItemsToPlayer_Request::mutable_prefix_item_name() {
  set_has_prefix_item_name();
  // @@protoc_insertion_point(field_mutable:CQuest_PublisherAddCommunityItemsToPlayer_Request.prefix_item_name)
  return prefix_item_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CQuest_PublisherAddCommunityItemsToPlayer_Request::release_prefix_item_name() {
  // @@protoc_insertion_point(field_release:CQuest_PublisherAddCommunityItemsToPlayer_Request.prefix_item_name)
  clear_has_prefix_item_name();
  return prefix_item_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CQuest_PublisherAddCommunityItemsToPlayer_Request::set_allocated_prefix_item_name(::std::string* prefix_item_name) {
  if (prefix_item_name != NULL) {
    set_has_prefix_item_name();
  } else {
    clear_has_prefix_item_name();
  }
  prefix_item_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), prefix_item_name);
  // @@protoc_insertion_point(field_set_allocated:CQuest_PublisherAddCommunityItemsToPlayer_Request.prefix_item_name)
}

// repeated .CQuest_PublisherAddCommunityItemsToPlayer_Request.Attribute attributes = 6;
int CQuest_PublisherAddCommunityItemsToPlayer_Request::attributes_size() const {
  return attributes_.size();
}
void CQuest_PublisherAddCommunityItemsToPlayer_Request::clear_attributes() {
  attributes_.Clear();
}
const ::CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute& CQuest_PublisherAddCommunityItemsToPlayer_Request::attributes(int index) const {
  // @@protoc_insertion_point(field_get:CQuest_PublisherAddCommunityItemsToPlayer_Request.attributes)
  return attributes_.Get(index);
}
::CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute* CQuest_PublisherAddCommunityItemsToPlayer_Request::mutable_attributes(int index) {
  // @@protoc_insertion_point(field_mutable:CQuest_PublisherAddCommunityItemsToPlayer_Request.attributes)
  return attributes_.Mutable(index);
}
::CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute* CQuest_PublisherAddCommunityItemsToPlayer_Request::add_attributes() {
  // @@protoc_insertion_point(field_add:CQuest_PublisherAddCommunityItemsToPlayer_Request.attributes)
  return attributes_.Add();
}
::google::protobuf::RepeatedPtrField< ::CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute >*
CQuest_PublisherAddCommunityItemsToPlayer_Request::mutable_attributes() {
  // @@protoc_insertion_point(field_mutable_list:CQuest_PublisherAddCommunityItemsToPlayer_Request.attributes)
  return &attributes_;
}
const ::google::protobuf::RepeatedPtrField< ::CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute >&
CQuest_PublisherAddCommunityItemsToPlayer_Request::attributes() const {
  // @@protoc_insertion_point(field_list:CQuest_PublisherAddCommunityItemsToPlayer_Request.attributes)
  return attributes_;
}

// optional string note = 7;
bool CQuest_PublisherAddCommunityItemsToPlayer_Request::has_note() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CQuest_PublisherAddCommunityItemsToPlayer_Request::set_has_note() {
  _has_bits_[0] |= 0x00000002u;
}
void CQuest_PublisherAddCommunityItemsToPlayer_Request::clear_has_note() {
  _has_bits_[0] &= ~0x00000002u;
}
void CQuest_PublisherAddCommunityItemsToPlayer_Request::clear_note() {
  note_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_note();
}
const ::std::string& CQuest_PublisherAddCommunityItemsToPlayer_Request::note() const {
  // @@protoc_insertion_point(field_get:CQuest_PublisherAddCommunityItemsToPlayer_Request.note)
  return note_.GetNoArena();
}
void CQuest_PublisherAddCommunityItemsToPlayer_Request::set_note(const ::std::string& value) {
  set_has_note();
  note_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CQuest_PublisherAddCommunityItemsToPlayer_Request.note)
}
#if LANG_CXX11
void CQuest_PublisherAddCommunityItemsToPlayer_Request::set_note(::std::string&& value) {
  set_has_note();
  note_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CQuest_PublisherAddCommunityItemsToPlayer_Request.note)
}
#endif
void CQuest_PublisherAddCommunityItemsToPlayer_Request::set_note(const char* value) {
  set_has_note();
  note_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CQuest_PublisherAddCommunityItemsToPlayer_Request.note)
}
void CQuest_PublisherAddCommunityItemsToPlayer_Request::set_note(const char* value, size_t size) {
  set_has_note();
  note_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CQuest_PublisherAddCommunityItemsToPlayer_Request.note)
}
::std::string* CQuest_PublisherAddCommunityItemsToPlayer_Request::mutable_note() {
  set_has_note();
  // @@protoc_insertion_point(field_mutable:CQuest_PublisherAddCommunityItemsToPlayer_Request.note)
  return note_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CQuest_PublisherAddCommunityItemsToPlayer_Request::release_note() {
  // @@protoc_insertion_point(field_release:CQuest_PublisherAddCommunityItemsToPlayer_Request.note)
  clear_has_note();
  return note_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CQuest_PublisherAddCommunityItemsToPlayer_Request::set_allocated_note(::std::string* note) {
  if (note != NULL) {
    set_has_note();
  } else {
    clear_has_note();
  }
  note_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), note);
  // @@protoc_insertion_point(field_set_allocated:CQuest_PublisherAddCommunityItemsToPlayer_Request.note)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CQuest_PublisherAddCommunityItemsToPlayer_Response::kItemsMatchedFieldNumber;
const int CQuest_PublisherAddCommunityItemsToPlayer_Response::kItemsGrantedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CQuest_PublisherAddCommunityItemsToPlayer_Response::CQuest_PublisherAddCommunityItemsToPlayer_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gcsystemmsgs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CQuest_PublisherAddCommunityItemsToPlayer_Response)
}
CQuest_PublisherAddCommunityItemsToPlayer_Response::CQuest_PublisherAddCommunityItemsToPlayer_Response(const CQuest_PublisherAddCommunityItemsToPlayer_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&items_matched_, &from.items_matched_,
    reinterpret_cast<char*>(&items_granted_) -
    reinterpret_cast<char*>(&items_matched_) + sizeof(items_granted_));
  // @@protoc_insertion_point(copy_constructor:CQuest_PublisherAddCommunityItemsToPlayer_Response)
}

void CQuest_PublisherAddCommunityItemsToPlayer_Response::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&items_matched_, 0, reinterpret_cast<char*>(&items_granted_) -
    reinterpret_cast<char*>(&items_matched_) + sizeof(items_granted_));
}

CQuest_PublisherAddCommunityItemsToPlayer_Response::~CQuest_PublisherAddCommunityItemsToPlayer_Response() {
  // @@protoc_insertion_point(destructor:CQuest_PublisherAddCommunityItemsToPlayer_Response)
  SharedDtor();
}

void CQuest_PublisherAddCommunityItemsToPlayer_Response::SharedDtor() {
}

void CQuest_PublisherAddCommunityItemsToPlayer_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CQuest_PublisherAddCommunityItemsToPlayer_Response::descriptor() {
  protobuf_gcsystemmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsystemmsgs_2eproto::file_level_metadata[5].descriptor;
}

const CQuest_PublisherAddCommunityItemsToPlayer_Response& CQuest_PublisherAddCommunityItemsToPlayer_Response::default_instance() {
  protobuf_gcsystemmsgs_2eproto::InitDefaults();
  return *internal_default_instance();
}

CQuest_PublisherAddCommunityItemsToPlayer_Response* CQuest_PublisherAddCommunityItemsToPlayer_Response::New(::google::protobuf::Arena* arena) const {
  CQuest_PublisherAddCommunityItemsToPlayer_Response* n = new CQuest_PublisherAddCommunityItemsToPlayer_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CQuest_PublisherAddCommunityItemsToPlayer_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CQuest_PublisherAddCommunityItemsToPlayer_Response)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&items_matched_, 0, reinterpret_cast<char*>(&items_granted_) -
      reinterpret_cast<char*>(&items_matched_) + sizeof(items_granted_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CQuest_PublisherAddCommunityItemsToPlayer_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CQuest_PublisherAddCommunityItemsToPlayer_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 items_matched = 1;
      case 1: {
        if (tag == 8u) {
          set_has_items_matched();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &items_matched_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 items_granted = 2;
      case 2: {
        if (tag == 16u) {
          set_has_items_granted();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &items_granted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CQuest_PublisherAddCommunityItemsToPlayer_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CQuest_PublisherAddCommunityItemsToPlayer_Response)
  return false;
#undef DO_
}

void CQuest_PublisherAddCommunityItemsToPlayer_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CQuest_PublisherAddCommunityItemsToPlayer_Response)
  // optional uint32 items_matched = 1;
  if (has_items_matched()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->items_matched(), output);
  }

  // optional uint32 items_granted = 2;
  if (has_items_granted()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->items_granted(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CQuest_PublisherAddCommunityItemsToPlayer_Response)
}

::google::protobuf::uint8* CQuest_PublisherAddCommunityItemsToPlayer_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CQuest_PublisherAddCommunityItemsToPlayer_Response)
  // optional uint32 items_matched = 1;
  if (has_items_matched()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->items_matched(), target);
  }

  // optional uint32 items_granted = 2;
  if (has_items_granted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->items_granted(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CQuest_PublisherAddCommunityItemsToPlayer_Response)
  return target;
}

size_t CQuest_PublisherAddCommunityItemsToPlayer_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CQuest_PublisherAddCommunityItemsToPlayer_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 items_matched = 1;
    if (has_items_matched()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->items_matched());
    }

    // optional uint32 items_granted = 2;
    if (has_items_granted()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->items_granted());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CQuest_PublisherAddCommunityItemsToPlayer_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CQuest_PublisherAddCommunityItemsToPlayer_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CQuest_PublisherAddCommunityItemsToPlayer_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CQuest_PublisherAddCommunityItemsToPlayer_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CQuest_PublisherAddCommunityItemsToPlayer_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CQuest_PublisherAddCommunityItemsToPlayer_Response)
    MergeFrom(*source);
  }
}

void CQuest_PublisherAddCommunityItemsToPlayer_Response::MergeFrom(const CQuest_PublisherAddCommunityItemsToPlayer_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CQuest_PublisherAddCommunityItemsToPlayer_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_items_matched()) {
      set_items_matched(from.items_matched());
    }
    if (from.has_items_granted()) {
      set_items_granted(from.items_granted());
    }
  }
}

void CQuest_PublisherAddCommunityItemsToPlayer_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CQuest_PublisherAddCommunityItemsToPlayer_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CQuest_PublisherAddCommunityItemsToPlayer_Response::CopyFrom(const CQuest_PublisherAddCommunityItemsToPlayer_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CQuest_PublisherAddCommunityItemsToPlayer_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CQuest_PublisherAddCommunityItemsToPlayer_Response::IsInitialized() const {
  return true;
}

void CQuest_PublisherAddCommunityItemsToPlayer_Response::Swap(CQuest_PublisherAddCommunityItemsToPlayer_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CQuest_PublisherAddCommunityItemsToPlayer_Response::InternalSwap(CQuest_PublisherAddCommunityItemsToPlayer_Response* other) {
  std::swap(items_matched_, other->items_matched_);
  std::swap(items_granted_, other->items_granted_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CQuest_PublisherAddCommunityItemsToPlayer_Response::GetMetadata() const {
  protobuf_gcsystemmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsystemmsgs_2eproto::file_level_metadata[5];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CQuest_PublisherAddCommunityItemsToPlayer_Response

// optional uint32 items_matched = 1;
bool CQuest_PublisherAddCommunityItemsToPlayer_Response::has_items_matched() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CQuest_PublisherAddCommunityItemsToPlayer_Response::set_has_items_matched() {
  _has_bits_[0] |= 0x00000001u;
}
void CQuest_PublisherAddCommunityItemsToPlayer_Response::clear_has_items_matched() {
  _has_bits_[0] &= ~0x00000001u;
}
void CQuest_PublisherAddCommunityItemsToPlayer_Response::clear_items_matched() {
  items_matched_ = 0u;
  clear_has_items_matched();
}
::google::protobuf::uint32 CQuest_PublisherAddCommunityItemsToPlayer_Response::items_matched() const {
  // @@protoc_insertion_point(field_get:CQuest_PublisherAddCommunityItemsToPlayer_Response.items_matched)
  return items_matched_;
}
void CQuest_PublisherAddCommunityItemsToPlayer_Response::set_items_matched(::google::protobuf::uint32 value) {
  set_has_items_matched();
  items_matched_ = value;
  // @@protoc_insertion_point(field_set:CQuest_PublisherAddCommunityItemsToPlayer_Response.items_matched)
}

// optional uint32 items_granted = 2;
bool CQuest_PublisherAddCommunityItemsToPlayer_Response::has_items_granted() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CQuest_PublisherAddCommunityItemsToPlayer_Response::set_has_items_granted() {
  _has_bits_[0] |= 0x00000002u;
}
void CQuest_PublisherAddCommunityItemsToPlayer_Response::clear_has_items_granted() {
  _has_bits_[0] &= ~0x00000002u;
}
void CQuest_PublisherAddCommunityItemsToPlayer_Response::clear_items_granted() {
  items_granted_ = 0u;
  clear_has_items_granted();
}
::google::protobuf::uint32 CQuest_PublisherAddCommunityItemsToPlayer_Response::items_granted() const {
  // @@protoc_insertion_point(field_get:CQuest_PublisherAddCommunityItemsToPlayer_Response.items_granted)
  return items_granted_;
}
void CQuest_PublisherAddCommunityItemsToPlayer_Response::set_items_granted(::google::protobuf::uint32 value) {
  set_has_items_granted();
  items_granted_ = value;
  // @@protoc_insertion_point(field_set:CQuest_PublisherAddCommunityItemsToPlayer_Response.items_granted)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCommunity_GamePersonalDataCategoryInfo::kTypeFieldNumber;
const int CCommunity_GamePersonalDataCategoryInfo::kLocalizationTokenFieldNumber;
const int CCommunity_GamePersonalDataCategoryInfo::kTemplateFileFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCommunity_GamePersonalDataCategoryInfo::CCommunity_GamePersonalDataCategoryInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gcsystemmsgs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CCommunity_GamePersonalDataCategoryInfo)
}
CCommunity_GamePersonalDataCategoryInfo::CCommunity_GamePersonalDataCategoryInfo(const CCommunity_GamePersonalDataCategoryInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_type()) {
    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  localization_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_localization_token()) {
    localization_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.localization_token_);
  }
  template_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_template_file()) {
    template_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.template_file_);
  }
  // @@protoc_insertion_point(copy_constructor:CCommunity_GamePersonalDataCategoryInfo)
}

void CCommunity_GamePersonalDataCategoryInfo::SharedCtor() {
  _cached_size_ = 0;
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  localization_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  template_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CCommunity_GamePersonalDataCategoryInfo::~CCommunity_GamePersonalDataCategoryInfo() {
  // @@protoc_insertion_point(destructor:CCommunity_GamePersonalDataCategoryInfo)
  SharedDtor();
}

void CCommunity_GamePersonalDataCategoryInfo::SharedDtor() {
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  localization_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  template_file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CCommunity_GamePersonalDataCategoryInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCommunity_GamePersonalDataCategoryInfo::descriptor() {
  protobuf_gcsystemmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsystemmsgs_2eproto::file_level_metadata[6].descriptor;
}

const CCommunity_GamePersonalDataCategoryInfo& CCommunity_GamePersonalDataCategoryInfo::default_instance() {
  protobuf_gcsystemmsgs_2eproto::InitDefaults();
  return *internal_default_instance();
}

CCommunity_GamePersonalDataCategoryInfo* CCommunity_GamePersonalDataCategoryInfo::New(::google::protobuf::Arena* arena) const {
  CCommunity_GamePersonalDataCategoryInfo* n = new CCommunity_GamePersonalDataCategoryInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CCommunity_GamePersonalDataCategoryInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CCommunity_GamePersonalDataCategoryInfo)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_type()) {
      GOOGLE_DCHECK(!type_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*type_.UnsafeRawStringPointer())->clear();
    }
    if (has_localization_token()) {
      GOOGLE_DCHECK(!localization_token_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*localization_token_.UnsafeRawStringPointer())->clear();
    }
    if (has_template_file()) {
      GOOGLE_DCHECK(!template_file_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*template_file_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CCommunity_GamePersonalDataCategoryInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CCommunity_GamePersonalDataCategoryInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string type = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CCommunity_GamePersonalDataCategoryInfo.type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string localization_token = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_localization_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->localization_token().data(), this->localization_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CCommunity_GamePersonalDataCategoryInfo.localization_token");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string template_file = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_template_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->template_file().data(), this->template_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CCommunity_GamePersonalDataCategoryInfo.template_file");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CCommunity_GamePersonalDataCategoryInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CCommunity_GamePersonalDataCategoryInfo)
  return false;
#undef DO_
}

void CCommunity_GamePersonalDataCategoryInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CCommunity_GamePersonalDataCategoryInfo)
  // optional string type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CCommunity_GamePersonalDataCategoryInfo.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type(), output);
  }

  // optional string localization_token = 2;
  if (has_localization_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->localization_token().data(), this->localization_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CCommunity_GamePersonalDataCategoryInfo.localization_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->localization_token(), output);
  }

  // optional string template_file = 3;
  if (has_template_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->template_file().data(), this->template_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CCommunity_GamePersonalDataCategoryInfo.template_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->template_file(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CCommunity_GamePersonalDataCategoryInfo)
}

::google::protobuf::uint8* CCommunity_GamePersonalDataCategoryInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CCommunity_GamePersonalDataCategoryInfo)
  // optional string type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CCommunity_GamePersonalDataCategoryInfo.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  // optional string localization_token = 2;
  if (has_localization_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->localization_token().data(), this->localization_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CCommunity_GamePersonalDataCategoryInfo.localization_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->localization_token(), target);
  }

  // optional string template_file = 3;
  if (has_template_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->template_file().data(), this->template_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CCommunity_GamePersonalDataCategoryInfo.template_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->template_file(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCommunity_GamePersonalDataCategoryInfo)
  return target;
}

size_t CCommunity_GamePersonalDataCategoryInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCommunity_GamePersonalDataCategoryInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional string localization_token = 2;
    if (has_localization_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->localization_token());
    }

    // optional string template_file = 3;
    if (has_template_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->template_file());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCommunity_GamePersonalDataCategoryInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCommunity_GamePersonalDataCategoryInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CCommunity_GamePersonalDataCategoryInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CCommunity_GamePersonalDataCategoryInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCommunity_GamePersonalDataCategoryInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCommunity_GamePersonalDataCategoryInfo)
    MergeFrom(*source);
  }
}

void CCommunity_GamePersonalDataCategoryInfo::MergeFrom(const CCommunity_GamePersonalDataCategoryInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCommunity_GamePersonalDataCategoryInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_type()) {
      set_has_type();
      type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
    }
    if (from.has_localization_token()) {
      set_has_localization_token();
      localization_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.localization_token_);
    }
    if (from.has_template_file()) {
      set_has_template_file();
      template_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.template_file_);
    }
  }
}

void CCommunity_GamePersonalDataCategoryInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCommunity_GamePersonalDataCategoryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCommunity_GamePersonalDataCategoryInfo::CopyFrom(const CCommunity_GamePersonalDataCategoryInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCommunity_GamePersonalDataCategoryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCommunity_GamePersonalDataCategoryInfo::IsInitialized() const {
  return true;
}

void CCommunity_GamePersonalDataCategoryInfo::Swap(CCommunity_GamePersonalDataCategoryInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCommunity_GamePersonalDataCategoryInfo::InternalSwap(CCommunity_GamePersonalDataCategoryInfo* other) {
  type_.Swap(&other->type_);
  localization_token_.Swap(&other->localization_token_);
  template_file_.Swap(&other->template_file_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CCommunity_GamePersonalDataCategoryInfo::GetMetadata() const {
  protobuf_gcsystemmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsystemmsgs_2eproto::file_level_metadata[6];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CCommunity_GamePersonalDataCategoryInfo

// optional string type = 1;
bool CCommunity_GamePersonalDataCategoryInfo::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CCommunity_GamePersonalDataCategoryInfo::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void CCommunity_GamePersonalDataCategoryInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void CCommunity_GamePersonalDataCategoryInfo::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
const ::std::string& CCommunity_GamePersonalDataCategoryInfo::type() const {
  // @@protoc_insertion_point(field_get:CCommunity_GamePersonalDataCategoryInfo.type)
  return type_.GetNoArena();
}
void CCommunity_GamePersonalDataCategoryInfo::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CCommunity_GamePersonalDataCategoryInfo.type)
}
#if LANG_CXX11
void CCommunity_GamePersonalDataCategoryInfo::set_type(::std::string&& value) {
  set_has_type();
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CCommunity_GamePersonalDataCategoryInfo.type)
}
#endif
void CCommunity_GamePersonalDataCategoryInfo::set_type(const char* value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CCommunity_GamePersonalDataCategoryInfo.type)
}
void CCommunity_GamePersonalDataCategoryInfo::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CCommunity_GamePersonalDataCategoryInfo.type)
}
::std::string* CCommunity_GamePersonalDataCategoryInfo::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:CCommunity_GamePersonalDataCategoryInfo.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CCommunity_GamePersonalDataCategoryInfo::release_type() {
  // @@protoc_insertion_point(field_release:CCommunity_GamePersonalDataCategoryInfo.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CCommunity_GamePersonalDataCategoryInfo::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:CCommunity_GamePersonalDataCategoryInfo.type)
}

// optional string localization_token = 2;
bool CCommunity_GamePersonalDataCategoryInfo::has_localization_token() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CCommunity_GamePersonalDataCategoryInfo::set_has_localization_token() {
  _has_bits_[0] |= 0x00000002u;
}
void CCommunity_GamePersonalDataCategoryInfo::clear_has_localization_token() {
  _has_bits_[0] &= ~0x00000002u;
}
void CCommunity_GamePersonalDataCategoryInfo::clear_localization_token() {
  localization_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_localization_token();
}
const ::std::string& CCommunity_GamePersonalDataCategoryInfo::localization_token() const {
  // @@protoc_insertion_point(field_get:CCommunity_GamePersonalDataCategoryInfo.localization_token)
  return localization_token_.GetNoArena();
}
void CCommunity_GamePersonalDataCategoryInfo::set_localization_token(const ::std::string& value) {
  set_has_localization_token();
  localization_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CCommunity_GamePersonalDataCategoryInfo.localization_token)
}
#if LANG_CXX11
void CCommunity_GamePersonalDataCategoryInfo::set_localization_token(::std::string&& value) {
  set_has_localization_token();
  localization_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CCommunity_GamePersonalDataCategoryInfo.localization_token)
}
#endif
void CCommunity_GamePersonalDataCategoryInfo::set_localization_token(const char* value) {
  set_has_localization_token();
  localization_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CCommunity_GamePersonalDataCategoryInfo.localization_token)
}
void CCommunity_GamePersonalDataCategoryInfo::set_localization_token(const char* value, size_t size) {
  set_has_localization_token();
  localization_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CCommunity_GamePersonalDataCategoryInfo.localization_token)
}
::std::string* CCommunity_GamePersonalDataCategoryInfo::mutable_localization_token() {
  set_has_localization_token();
  // @@protoc_insertion_point(field_mutable:CCommunity_GamePersonalDataCategoryInfo.localization_token)
  return localization_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CCommunity_GamePersonalDataCategoryInfo::release_localization_token() {
  // @@protoc_insertion_point(field_release:CCommunity_GamePersonalDataCategoryInfo.localization_token)
  clear_has_localization_token();
  return localization_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CCommunity_GamePersonalDataCategoryInfo::set_allocated_localization_token(::std::string* localization_token) {
  if (localization_token != NULL) {
    set_has_localization_token();
  } else {
    clear_has_localization_token();
  }
  localization_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), localization_token);
  // @@protoc_insertion_point(field_set_allocated:CCommunity_GamePersonalDataCategoryInfo.localization_token)
}

// optional string template_file = 3;
bool CCommunity_GamePersonalDataCategoryInfo::has_template_file() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CCommunity_GamePersonalDataCategoryInfo::set_has_template_file() {
  _has_bits_[0] |= 0x00000004u;
}
void CCommunity_GamePersonalDataCategoryInfo::clear_has_template_file() {
  _has_bits_[0] &= ~0x00000004u;
}
void CCommunity_GamePersonalDataCategoryInfo::clear_template_file() {
  template_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_template_file();
}
const ::std::string& CCommunity_GamePersonalDataCategoryInfo::template_file() const {
  // @@protoc_insertion_point(field_get:CCommunity_GamePersonalDataCategoryInfo.template_file)
  return template_file_.GetNoArena();
}
void CCommunity_GamePersonalDataCategoryInfo::set_template_file(const ::std::string& value) {
  set_has_template_file();
  template_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CCommunity_GamePersonalDataCategoryInfo.template_file)
}
#if LANG_CXX11
void CCommunity_GamePersonalDataCategoryInfo::set_template_file(::std::string&& value) {
  set_has_template_file();
  template_file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CCommunity_GamePersonalDataCategoryInfo.template_file)
}
#endif
void CCommunity_GamePersonalDataCategoryInfo::set_template_file(const char* value) {
  set_has_template_file();
  template_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CCommunity_GamePersonalDataCategoryInfo.template_file)
}
void CCommunity_GamePersonalDataCategoryInfo::set_template_file(const char* value, size_t size) {
  set_has_template_file();
  template_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CCommunity_GamePersonalDataCategoryInfo.template_file)
}
::std::string* CCommunity_GamePersonalDataCategoryInfo::mutable_template_file() {
  set_has_template_file();
  // @@protoc_insertion_point(field_mutable:CCommunity_GamePersonalDataCategoryInfo.template_file)
  return template_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CCommunity_GamePersonalDataCategoryInfo::release_template_file() {
  // @@protoc_insertion_point(field_release:CCommunity_GamePersonalDataCategoryInfo.template_file)
  clear_has_template_file();
  return template_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CCommunity_GamePersonalDataCategoryInfo::set_allocated_template_file(::std::string* template_file) {
  if (template_file != NULL) {
    set_has_template_file();
  } else {
    clear_has_template_file();
  }
  template_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), template_file);
  // @@protoc_insertion_point(field_set_allocated:CCommunity_GamePersonalDataCategoryInfo.template_file)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCommunity_GetGamePersonalDataCategories_Request::kAppidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCommunity_GetGamePersonalDataCategories_Request::CCommunity_GetGamePersonalDataCategories_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gcsystemmsgs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CCommunity_GetGamePersonalDataCategories_Request)
}
CCommunity_GetGamePersonalDataCategories_Request::CCommunity_GetGamePersonalDataCategories_Request(const CCommunity_GetGamePersonalDataCategories_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  appid_ = from.appid_;
  // @@protoc_insertion_point(copy_constructor:CCommunity_GetGamePersonalDataCategories_Request)
}

void CCommunity_GetGamePersonalDataCategories_Request::SharedCtor() {
  _cached_size_ = 0;
  appid_ = 0u;
}

CCommunity_GetGamePersonalDataCategories_Request::~CCommunity_GetGamePersonalDataCategories_Request() {
  // @@protoc_insertion_point(destructor:CCommunity_GetGamePersonalDataCategories_Request)
  SharedDtor();
}

void CCommunity_GetGamePersonalDataCategories_Request::SharedDtor() {
}

void CCommunity_GetGamePersonalDataCategories_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCommunity_GetGamePersonalDataCategories_Request::descriptor() {
  protobuf_gcsystemmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsystemmsgs_2eproto::file_level_metadata[7].descriptor;
}

const CCommunity_GetGamePersonalDataCategories_Request& CCommunity_GetGamePersonalDataCategories_Request::default_instance() {
  protobuf_gcsystemmsgs_2eproto::InitDefaults();
  return *internal_default_instance();
}

CCommunity_GetGamePersonalDataCategories_Request* CCommunity_GetGamePersonalDataCategories_Request::New(::google::protobuf::Arena* arena) const {
  CCommunity_GetGamePersonalDataCategories_Request* n = new CCommunity_GetGamePersonalDataCategories_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CCommunity_GetGamePersonalDataCategories_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CCommunity_GetGamePersonalDataCategories_Request)
  appid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CCommunity_GetGamePersonalDataCategories_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CCommunity_GetGamePersonalDataCategories_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (tag == 8u) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CCommunity_GetGamePersonalDataCategories_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CCommunity_GetGamePersonalDataCategories_Request)
  return false;
#undef DO_
}

void CCommunity_GetGamePersonalDataCategories_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CCommunity_GetGamePersonalDataCategories_Request)
  // optional uint32 appid = 1;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CCommunity_GetGamePersonalDataCategories_Request)
}

::google::protobuf::uint8* CCommunity_GetGamePersonalDataCategories_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CCommunity_GetGamePersonalDataCategories_Request)
  // optional uint32 appid = 1;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCommunity_GetGamePersonalDataCategories_Request)
  return target;
}

size_t CCommunity_GetGamePersonalDataCategories_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCommunity_GetGamePersonalDataCategories_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 appid = 1;
  if (has_appid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->appid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCommunity_GetGamePersonalDataCategories_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCommunity_GetGamePersonalDataCategories_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CCommunity_GetGamePersonalDataCategories_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CCommunity_GetGamePersonalDataCategories_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCommunity_GetGamePersonalDataCategories_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCommunity_GetGamePersonalDataCategories_Request)
    MergeFrom(*source);
  }
}

void CCommunity_GetGamePersonalDataCategories_Request::MergeFrom(const CCommunity_GetGamePersonalDataCategories_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCommunity_GetGamePersonalDataCategories_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_appid()) {
    set_appid(from.appid());
  }
}

void CCommunity_GetGamePersonalDataCategories_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCommunity_GetGamePersonalDataCategories_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCommunity_GetGamePersonalDataCategories_Request::CopyFrom(const CCommunity_GetGamePersonalDataCategories_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCommunity_GetGamePersonalDataCategories_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCommunity_GetGamePersonalDataCategories_Request::IsInitialized() const {
  return true;
}

void CCommunity_GetGamePersonalDataCategories_Request::Swap(CCommunity_GetGamePersonalDataCategories_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCommunity_GetGamePersonalDataCategories_Request::InternalSwap(CCommunity_GetGamePersonalDataCategories_Request* other) {
  std::swap(appid_, other->appid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CCommunity_GetGamePersonalDataCategories_Request::GetMetadata() const {
  protobuf_gcsystemmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsystemmsgs_2eproto::file_level_metadata[7];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CCommunity_GetGamePersonalDataCategories_Request

// optional uint32 appid = 1;
bool CCommunity_GetGamePersonalDataCategories_Request::has_appid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CCommunity_GetGamePersonalDataCategories_Request::set_has_appid() {
  _has_bits_[0] |= 0x00000001u;
}
void CCommunity_GetGamePersonalDataCategories_Request::clear_has_appid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CCommunity_GetGamePersonalDataCategories_Request::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
::google::protobuf::uint32 CCommunity_GetGamePersonalDataCategories_Request::appid() const {
  // @@protoc_insertion_point(field_get:CCommunity_GetGamePersonalDataCategories_Request.appid)
  return appid_;
}
void CCommunity_GetGamePersonalDataCategories_Request::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:CCommunity_GetGamePersonalDataCategories_Request.appid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCommunity_GetGamePersonalDataCategories_Response::kCategoriesFieldNumber;
const int CCommunity_GetGamePersonalDataCategories_Response::kAppAssetsBasenameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCommunity_GetGamePersonalDataCategories_Response::CCommunity_GetGamePersonalDataCategories_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gcsystemmsgs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CCommunity_GetGamePersonalDataCategories_Response)
}
CCommunity_GetGamePersonalDataCategories_Response::CCommunity_GetGamePersonalDataCategories_Response(const CCommunity_GetGamePersonalDataCategories_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      categories_(from.categories_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  app_assets_basename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_app_assets_basename()) {
    app_assets_basename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.app_assets_basename_);
  }
  // @@protoc_insertion_point(copy_constructor:CCommunity_GetGamePersonalDataCategories_Response)
}

void CCommunity_GetGamePersonalDataCategories_Response::SharedCtor() {
  _cached_size_ = 0;
  app_assets_basename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CCommunity_GetGamePersonalDataCategories_Response::~CCommunity_GetGamePersonalDataCategories_Response() {
  // @@protoc_insertion_point(destructor:CCommunity_GetGamePersonalDataCategories_Response)
  SharedDtor();
}

void CCommunity_GetGamePersonalDataCategories_Response::SharedDtor() {
  app_assets_basename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CCommunity_GetGamePersonalDataCategories_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCommunity_GetGamePersonalDataCategories_Response::descriptor() {
  protobuf_gcsystemmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsystemmsgs_2eproto::file_level_metadata[8].descriptor;
}

const CCommunity_GetGamePersonalDataCategories_Response& CCommunity_GetGamePersonalDataCategories_Response::default_instance() {
  protobuf_gcsystemmsgs_2eproto::InitDefaults();
  return *internal_default_instance();
}

CCommunity_GetGamePersonalDataCategories_Response* CCommunity_GetGamePersonalDataCategories_Response::New(::google::protobuf::Arena* arena) const {
  CCommunity_GetGamePersonalDataCategories_Response* n = new CCommunity_GetGamePersonalDataCategories_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CCommunity_GetGamePersonalDataCategories_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CCommunity_GetGamePersonalDataCategories_Response)
  categories_.Clear();
  if (has_app_assets_basename()) {
    GOOGLE_DCHECK(!app_assets_basename_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*app_assets_basename_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CCommunity_GetGamePersonalDataCategories_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CCommunity_GetGamePersonalDataCategories_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CCommunity_GamePersonalDataCategoryInfo categories = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_categories()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // optional string app_assets_basename = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_app_assets_basename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->app_assets_basename().data(), this->app_assets_basename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CCommunity_GetGamePersonalDataCategories_Response.app_assets_basename");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CCommunity_GetGamePersonalDataCategories_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CCommunity_GetGamePersonalDataCategories_Response)
  return false;
#undef DO_
}

void CCommunity_GetGamePersonalDataCategories_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CCommunity_GetGamePersonalDataCategories_Response)
  // repeated .CCommunity_GamePersonalDataCategoryInfo categories = 1;
  for (unsigned int i = 0, n = this->categories_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->categories(i), output);
  }

  // optional string app_assets_basename = 2;
  if (has_app_assets_basename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->app_assets_basename().data(), this->app_assets_basename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CCommunity_GetGamePersonalDataCategories_Response.app_assets_basename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->app_assets_basename(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CCommunity_GetGamePersonalDataCategories_Response)
}

::google::protobuf::uint8* CCommunity_GetGamePersonalDataCategories_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CCommunity_GetGamePersonalDataCategories_Response)
  // repeated .CCommunity_GamePersonalDataCategoryInfo categories = 1;
  for (unsigned int i = 0, n = this->categories_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->categories(i), false, target);
  }

  // optional string app_assets_basename = 2;
  if (has_app_assets_basename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->app_assets_basename().data(), this->app_assets_basename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CCommunity_GetGamePersonalDataCategories_Response.app_assets_basename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->app_assets_basename(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCommunity_GetGamePersonalDataCategories_Response)
  return target;
}

size_t CCommunity_GetGamePersonalDataCategories_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCommunity_GetGamePersonalDataCategories_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .CCommunity_GamePersonalDataCategoryInfo categories = 1;
  {
    unsigned int count = this->categories_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->categories(i));
    }
  }

  // optional string app_assets_basename = 2;
  if (has_app_assets_basename()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->app_assets_basename());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCommunity_GetGamePersonalDataCategories_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCommunity_GetGamePersonalDataCategories_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CCommunity_GetGamePersonalDataCategories_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CCommunity_GetGamePersonalDataCategories_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCommunity_GetGamePersonalDataCategories_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCommunity_GetGamePersonalDataCategories_Response)
    MergeFrom(*source);
  }
}

void CCommunity_GetGamePersonalDataCategories_Response::MergeFrom(const CCommunity_GetGamePersonalDataCategories_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCommunity_GetGamePersonalDataCategories_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  categories_.MergeFrom(from.categories_);
  if (from.has_app_assets_basename()) {
    set_has_app_assets_basename();
    app_assets_basename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.app_assets_basename_);
  }
}

void CCommunity_GetGamePersonalDataCategories_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCommunity_GetGamePersonalDataCategories_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCommunity_GetGamePersonalDataCategories_Response::CopyFrom(const CCommunity_GetGamePersonalDataCategories_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCommunity_GetGamePersonalDataCategories_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCommunity_GetGamePersonalDataCategories_Response::IsInitialized() const {
  return true;
}

void CCommunity_GetGamePersonalDataCategories_Response::Swap(CCommunity_GetGamePersonalDataCategories_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCommunity_GetGamePersonalDataCategories_Response::InternalSwap(CCommunity_GetGamePersonalDataCategories_Response* other) {
  categories_.UnsafeArenaSwap(&other->categories_);
  app_assets_basename_.Swap(&other->app_assets_basename_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CCommunity_GetGamePersonalDataCategories_Response::GetMetadata() const {
  protobuf_gcsystemmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsystemmsgs_2eproto::file_level_metadata[8];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CCommunity_GetGamePersonalDataCategories_Response

// repeated .CCommunity_GamePersonalDataCategoryInfo categories = 1;
int CCommunity_GetGamePersonalDataCategories_Response::categories_size() const {
  return categories_.size();
}
void CCommunity_GetGamePersonalDataCategories_Response::clear_categories() {
  categories_.Clear();
}
const ::CCommunity_GamePersonalDataCategoryInfo& CCommunity_GetGamePersonalDataCategories_Response::categories(int index) const {
  // @@protoc_insertion_point(field_get:CCommunity_GetGamePersonalDataCategories_Response.categories)
  return categories_.Get(index);
}
::CCommunity_GamePersonalDataCategoryInfo* CCommunity_GetGamePersonalDataCategories_Response::mutable_categories(int index) {
  // @@protoc_insertion_point(field_mutable:CCommunity_GetGamePersonalDataCategories_Response.categories)
  return categories_.Mutable(index);
}
::CCommunity_GamePersonalDataCategoryInfo* CCommunity_GetGamePersonalDataCategories_Response::add_categories() {
  // @@protoc_insertion_point(field_add:CCommunity_GetGamePersonalDataCategories_Response.categories)
  return categories_.Add();
}
::google::protobuf::RepeatedPtrField< ::CCommunity_GamePersonalDataCategoryInfo >*
CCommunity_GetGamePersonalDataCategories_Response::mutable_categories() {
  // @@protoc_insertion_point(field_mutable_list:CCommunity_GetGamePersonalDataCategories_Response.categories)
  return &categories_;
}
const ::google::protobuf::RepeatedPtrField< ::CCommunity_GamePersonalDataCategoryInfo >&
CCommunity_GetGamePersonalDataCategories_Response::categories() const {
  // @@protoc_insertion_point(field_list:CCommunity_GetGamePersonalDataCategories_Response.categories)
  return categories_;
}

// optional string app_assets_basename = 2;
bool CCommunity_GetGamePersonalDataCategories_Response::has_app_assets_basename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CCommunity_GetGamePersonalDataCategories_Response::set_has_app_assets_basename() {
  _has_bits_[0] |= 0x00000001u;
}
void CCommunity_GetGamePersonalDataCategories_Response::clear_has_app_assets_basename() {
  _has_bits_[0] &= ~0x00000001u;
}
void CCommunity_GetGamePersonalDataCategories_Response::clear_app_assets_basename() {
  app_assets_basename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_app_assets_basename();
}
const ::std::string& CCommunity_GetGamePersonalDataCategories_Response::app_assets_basename() const {
  // @@protoc_insertion_point(field_get:CCommunity_GetGamePersonalDataCategories_Response.app_assets_basename)
  return app_assets_basename_.GetNoArena();
}
void CCommunity_GetGamePersonalDataCategories_Response::set_app_assets_basename(const ::std::string& value) {
  set_has_app_assets_basename();
  app_assets_basename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CCommunity_GetGamePersonalDataCategories_Response.app_assets_basename)
}
#if LANG_CXX11
void CCommunity_GetGamePersonalDataCategories_Response::set_app_assets_basename(::std::string&& value) {
  set_has_app_assets_basename();
  app_assets_basename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CCommunity_GetGamePersonalDataCategories_Response.app_assets_basename)
}
#endif
void CCommunity_GetGamePersonalDataCategories_Response::set_app_assets_basename(const char* value) {
  set_has_app_assets_basename();
  app_assets_basename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CCommunity_GetGamePersonalDataCategories_Response.app_assets_basename)
}
void CCommunity_GetGamePersonalDataCategories_Response::set_app_assets_basename(const char* value, size_t size) {
  set_has_app_assets_basename();
  app_assets_basename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CCommunity_GetGamePersonalDataCategories_Response.app_assets_basename)
}
::std::string* CCommunity_GetGamePersonalDataCategories_Response::mutable_app_assets_basename() {
  set_has_app_assets_basename();
  // @@protoc_insertion_point(field_mutable:CCommunity_GetGamePersonalDataCategories_Response.app_assets_basename)
  return app_assets_basename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CCommunity_GetGamePersonalDataCategories_Response::release_app_assets_basename() {
  // @@protoc_insertion_point(field_release:CCommunity_GetGamePersonalDataCategories_Response.app_assets_basename)
  clear_has_app_assets_basename();
  return app_assets_basename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CCommunity_GetGamePersonalDataCategories_Response::set_allocated_app_assets_basename(::std::string* app_assets_basename) {
  if (app_assets_basename != NULL) {
    set_has_app_assets_basename();
  } else {
    clear_has_app_assets_basename();
  }
  app_assets_basename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), app_assets_basename);
  // @@protoc_insertion_point(field_set_allocated:CCommunity_GetGamePersonalDataCategories_Response.app_assets_basename)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCommunity_GetGamePersonalDataEntries_Request::kAppidFieldNumber;
const int CCommunity_GetGamePersonalDataEntries_Request::kSteamidFieldNumber;
const int CCommunity_GetGamePersonalDataEntries_Request::kTypeFieldNumber;
const int CCommunity_GetGamePersonalDataEntries_Request::kContinueTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCommunity_GetGamePersonalDataEntries_Request::CCommunity_GetGamePersonalDataEntries_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gcsystemmsgs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CCommunity_GetGamePersonalDataEntries_Request)
}
CCommunity_GetGamePersonalDataEntries_Request::CCommunity_GetGamePersonalDataEntries_Request(const CCommunity_GetGamePersonalDataEntries_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_type()) {
    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  continue_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_continue_token()) {
    continue_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.continue_token_);
  }
  ::memcpy(&steamid_, &from.steamid_,
    reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&steamid_) + sizeof(appid_));
  // @@protoc_insertion_point(copy_constructor:CCommunity_GetGamePersonalDataEntries_Request)
}

void CCommunity_GetGamePersonalDataEntries_Request::SharedCtor() {
  _cached_size_ = 0;
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  continue_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&steamid_, 0, reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&steamid_) + sizeof(appid_));
}

CCommunity_GetGamePersonalDataEntries_Request::~CCommunity_GetGamePersonalDataEntries_Request() {
  // @@protoc_insertion_point(destructor:CCommunity_GetGamePersonalDataEntries_Request)
  SharedDtor();
}

void CCommunity_GetGamePersonalDataEntries_Request::SharedDtor() {
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  continue_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CCommunity_GetGamePersonalDataEntries_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCommunity_GetGamePersonalDataEntries_Request::descriptor() {
  protobuf_gcsystemmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsystemmsgs_2eproto::file_level_metadata[9].descriptor;
}

const CCommunity_GetGamePersonalDataEntries_Request& CCommunity_GetGamePersonalDataEntries_Request::default_instance() {
  protobuf_gcsystemmsgs_2eproto::InitDefaults();
  return *internal_default_instance();
}

CCommunity_GetGamePersonalDataEntries_Request* CCommunity_GetGamePersonalDataEntries_Request::New(::google::protobuf::Arena* arena) const {
  CCommunity_GetGamePersonalDataEntries_Request* n = new CCommunity_GetGamePersonalDataEntries_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CCommunity_GetGamePersonalDataEntries_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CCommunity_GetGamePersonalDataEntries_Request)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_type()) {
      GOOGLE_DCHECK(!type_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*type_.UnsafeRawStringPointer())->clear();
    }
    if (has_continue_token()) {
      GOOGLE_DCHECK(!continue_token_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*continue_token_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 12u) {
    ::memset(&steamid_, 0, reinterpret_cast<char*>(&appid_) -
      reinterpret_cast<char*>(&steamid_) + sizeof(appid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CCommunity_GetGamePersonalDataEntries_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CCommunity_GetGamePersonalDataEntries_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (tag == 8u) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 steamid = 2;
      case 2: {
        if (tag == 16u) {
          set_has_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string type = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CCommunity_GetGamePersonalDataEntries_Request.type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string continue_token = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_continue_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->continue_token().data(), this->continue_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CCommunity_GetGamePersonalDataEntries_Request.continue_token");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CCommunity_GetGamePersonalDataEntries_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CCommunity_GetGamePersonalDataEntries_Request)
  return false;
#undef DO_
}

void CCommunity_GetGamePersonalDataEntries_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CCommunity_GetGamePersonalDataEntries_Request)
  // optional uint32 appid = 1;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional uint64 steamid = 2;
  if (has_steamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->steamid(), output);
  }

  // optional string type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CCommunity_GetGamePersonalDataEntries_Request.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->type(), output);
  }

  // optional string continue_token = 4;
  if (has_continue_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->continue_token().data(), this->continue_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CCommunity_GetGamePersonalDataEntries_Request.continue_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->continue_token(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CCommunity_GetGamePersonalDataEntries_Request)
}

::google::protobuf::uint8* CCommunity_GetGamePersonalDataEntries_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CCommunity_GetGamePersonalDataEntries_Request)
  // optional uint32 appid = 1;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional uint64 steamid = 2;
  if (has_steamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->steamid(), target);
  }

  // optional string type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CCommunity_GetGamePersonalDataEntries_Request.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->type(), target);
  }

  // optional string continue_token = 4;
  if (has_continue_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->continue_token().data(), this->continue_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CCommunity_GetGamePersonalDataEntries_Request.continue_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->continue_token(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCommunity_GetGamePersonalDataEntries_Request)
  return target;
}

size_t CCommunity_GetGamePersonalDataEntries_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCommunity_GetGamePersonalDataEntries_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional string continue_token = 4;
    if (has_continue_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->continue_token());
    }

    // optional uint64 steamid = 2;
    if (has_steamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->steamid());
    }

    // optional uint32 appid = 1;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCommunity_GetGamePersonalDataEntries_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCommunity_GetGamePersonalDataEntries_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CCommunity_GetGamePersonalDataEntries_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CCommunity_GetGamePersonalDataEntries_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCommunity_GetGamePersonalDataEntries_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCommunity_GetGamePersonalDataEntries_Request)
    MergeFrom(*source);
  }
}

void CCommunity_GetGamePersonalDataEntries_Request::MergeFrom(const CCommunity_GetGamePersonalDataEntries_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCommunity_GetGamePersonalDataEntries_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 15u) {
    if (from.has_type()) {
      set_has_type();
      type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
    }
    if (from.has_continue_token()) {
      set_has_continue_token();
      continue_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.continue_token_);
    }
    if (from.has_steamid()) {
      set_steamid(from.steamid());
    }
    if (from.has_appid()) {
      set_appid(from.appid());
    }
  }
}

void CCommunity_GetGamePersonalDataEntries_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCommunity_GetGamePersonalDataEntries_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCommunity_GetGamePersonalDataEntries_Request::CopyFrom(const CCommunity_GetGamePersonalDataEntries_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCommunity_GetGamePersonalDataEntries_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCommunity_GetGamePersonalDataEntries_Request::IsInitialized() const {
  return true;
}

void CCommunity_GetGamePersonalDataEntries_Request::Swap(CCommunity_GetGamePersonalDataEntries_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCommunity_GetGamePersonalDataEntries_Request::InternalSwap(CCommunity_GetGamePersonalDataEntries_Request* other) {
  type_.Swap(&other->type_);
  continue_token_.Swap(&other->continue_token_);
  std::swap(steamid_, other->steamid_);
  std::swap(appid_, other->appid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CCommunity_GetGamePersonalDataEntries_Request::GetMetadata() const {
  protobuf_gcsystemmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsystemmsgs_2eproto::file_level_metadata[9];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CCommunity_GetGamePersonalDataEntries_Request

// optional uint32 appid = 1;
bool CCommunity_GetGamePersonalDataEntries_Request::has_appid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CCommunity_GetGamePersonalDataEntries_Request::set_has_appid() {
  _has_bits_[0] |= 0x00000008u;
}
void CCommunity_GetGamePersonalDataEntries_Request::clear_has_appid() {
  _has_bits_[0] &= ~0x00000008u;
}
void CCommunity_GetGamePersonalDataEntries_Request::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
::google::protobuf::uint32 CCommunity_GetGamePersonalDataEntries_Request::appid() const {
  // @@protoc_insertion_point(field_get:CCommunity_GetGamePersonalDataEntries_Request.appid)
  return appid_;
}
void CCommunity_GetGamePersonalDataEntries_Request::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:CCommunity_GetGamePersonalDataEntries_Request.appid)
}

// optional uint64 steamid = 2;
bool CCommunity_GetGamePersonalDataEntries_Request::has_steamid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CCommunity_GetGamePersonalDataEntries_Request::set_has_steamid() {
  _has_bits_[0] |= 0x00000004u;
}
void CCommunity_GetGamePersonalDataEntries_Request::clear_has_steamid() {
  _has_bits_[0] &= ~0x00000004u;
}
void CCommunity_GetGamePersonalDataEntries_Request::clear_steamid() {
  steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid();
}
::google::protobuf::uint64 CCommunity_GetGamePersonalDataEntries_Request::steamid() const {
  // @@protoc_insertion_point(field_get:CCommunity_GetGamePersonalDataEntries_Request.steamid)
  return steamid_;
}
void CCommunity_GetGamePersonalDataEntries_Request::set_steamid(::google::protobuf::uint64 value) {
  set_has_steamid();
  steamid_ = value;
  // @@protoc_insertion_point(field_set:CCommunity_GetGamePersonalDataEntries_Request.steamid)
}

// optional string type = 3;
bool CCommunity_GetGamePersonalDataEntries_Request::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CCommunity_GetGamePersonalDataEntries_Request::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void CCommunity_GetGamePersonalDataEntries_Request::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void CCommunity_GetGamePersonalDataEntries_Request::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
const ::std::string& CCommunity_GetGamePersonalDataEntries_Request::type() const {
  // @@protoc_insertion_point(field_get:CCommunity_GetGamePersonalDataEntries_Request.type)
  return type_.GetNoArena();
}
void CCommunity_GetGamePersonalDataEntries_Request::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CCommunity_GetGamePersonalDataEntries_Request.type)
}
#if LANG_CXX11
void CCommunity_GetGamePersonalDataEntries_Request::set_type(::std::string&& value) {
  set_has_type();
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CCommunity_GetGamePersonalDataEntries_Request.type)
}
#endif
void CCommunity_GetGamePersonalDataEntries_Request::set_type(const char* value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CCommunity_GetGamePersonalDataEntries_Request.type)
}
void CCommunity_GetGamePersonalDataEntries_Request::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CCommunity_GetGamePersonalDataEntries_Request.type)
}
::std::string* CCommunity_GetGamePersonalDataEntries_Request::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:CCommunity_GetGamePersonalDataEntries_Request.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CCommunity_GetGamePersonalDataEntries_Request::release_type() {
  // @@protoc_insertion_point(field_release:CCommunity_GetGamePersonalDataEntries_Request.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CCommunity_GetGamePersonalDataEntries_Request::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:CCommunity_GetGamePersonalDataEntries_Request.type)
}

// optional string continue_token = 4;
bool CCommunity_GetGamePersonalDataEntries_Request::has_continue_token() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CCommunity_GetGamePersonalDataEntries_Request::set_has_continue_token() {
  _has_bits_[0] |= 0x00000002u;
}
void CCommunity_GetGamePersonalDataEntries_Request::clear_has_continue_token() {
  _has_bits_[0] &= ~0x00000002u;
}
void CCommunity_GetGamePersonalDataEntries_Request::clear_continue_token() {
  continue_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_continue_token();
}
const ::std::string& CCommunity_GetGamePersonalDataEntries_Request::continue_token() const {
  // @@protoc_insertion_point(field_get:CCommunity_GetGamePersonalDataEntries_Request.continue_token)
  return continue_token_.GetNoArena();
}
void CCommunity_GetGamePersonalDataEntries_Request::set_continue_token(const ::std::string& value) {
  set_has_continue_token();
  continue_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CCommunity_GetGamePersonalDataEntries_Request.continue_token)
}
#if LANG_CXX11
void CCommunity_GetGamePersonalDataEntries_Request::set_continue_token(::std::string&& value) {
  set_has_continue_token();
  continue_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CCommunity_GetGamePersonalDataEntries_Request.continue_token)
}
#endif
void CCommunity_GetGamePersonalDataEntries_Request::set_continue_token(const char* value) {
  set_has_continue_token();
  continue_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CCommunity_GetGamePersonalDataEntries_Request.continue_token)
}
void CCommunity_GetGamePersonalDataEntries_Request::set_continue_token(const char* value, size_t size) {
  set_has_continue_token();
  continue_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CCommunity_GetGamePersonalDataEntries_Request.continue_token)
}
::std::string* CCommunity_GetGamePersonalDataEntries_Request::mutable_continue_token() {
  set_has_continue_token();
  // @@protoc_insertion_point(field_mutable:CCommunity_GetGamePersonalDataEntries_Request.continue_token)
  return continue_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CCommunity_GetGamePersonalDataEntries_Request::release_continue_token() {
  // @@protoc_insertion_point(field_release:CCommunity_GetGamePersonalDataEntries_Request.continue_token)
  clear_has_continue_token();
  return continue_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CCommunity_GetGamePersonalDataEntries_Request::set_allocated_continue_token(::std::string* continue_token) {
  if (continue_token != NULL) {
    set_has_continue_token();
  } else {
    clear_has_continue_token();
  }
  continue_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), continue_token);
  // @@protoc_insertion_point(field_set_allocated:CCommunity_GetGamePersonalDataEntries_Request.continue_token)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCommunity_GetGamePersonalDataEntries_Response::kGceresultFieldNumber;
const int CCommunity_GetGamePersonalDataEntries_Response::kEntriesFieldNumber;
const int CCommunity_GetGamePersonalDataEntries_Response::kContinueTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCommunity_GetGamePersonalDataEntries_Response::CCommunity_GetGamePersonalDataEntries_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gcsystemmsgs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CCommunity_GetGamePersonalDataEntries_Response)
}
CCommunity_GetGamePersonalDataEntries_Response::CCommunity_GetGamePersonalDataEntries_Response(const CCommunity_GetGamePersonalDataEntries_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  continue_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_continue_token()) {
    continue_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.continue_token_);
  }
  gceresult_ = from.gceresult_;
  // @@protoc_insertion_point(copy_constructor:CCommunity_GetGamePersonalDataEntries_Response)
}

void CCommunity_GetGamePersonalDataEntries_Response::SharedCtor() {
  _cached_size_ = 0;
  continue_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gceresult_ = 0u;
}

CCommunity_GetGamePersonalDataEntries_Response::~CCommunity_GetGamePersonalDataEntries_Response() {
  // @@protoc_insertion_point(destructor:CCommunity_GetGamePersonalDataEntries_Response)
  SharedDtor();
}

void CCommunity_GetGamePersonalDataEntries_Response::SharedDtor() {
  continue_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CCommunity_GetGamePersonalDataEntries_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCommunity_GetGamePersonalDataEntries_Response::descriptor() {
  protobuf_gcsystemmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsystemmsgs_2eproto::file_level_metadata[10].descriptor;
}

const CCommunity_GetGamePersonalDataEntries_Response& CCommunity_GetGamePersonalDataEntries_Response::default_instance() {
  protobuf_gcsystemmsgs_2eproto::InitDefaults();
  return *internal_default_instance();
}

CCommunity_GetGamePersonalDataEntries_Response* CCommunity_GetGamePersonalDataEntries_Response::New(::google::protobuf::Arena* arena) const {
  CCommunity_GetGamePersonalDataEntries_Response* n = new CCommunity_GetGamePersonalDataEntries_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CCommunity_GetGamePersonalDataEntries_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CCommunity_GetGamePersonalDataEntries_Response)
  entries_.Clear();
  if (has_continue_token()) {
    GOOGLE_DCHECK(!continue_token_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*continue_token_.UnsafeRawStringPointer())->clear();
  }
  gceresult_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CCommunity_GetGamePersonalDataEntries_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CCommunity_GetGamePersonalDataEntries_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 gceresult = 1;
      case 1: {
        if (tag == 8u) {
          set_has_gceresult();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gceresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string entries = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_entries()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->entries(this->entries_size() - 1).data(),
            this->entries(this->entries_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CCommunity_GetGamePersonalDataEntries_Response.entries");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string continue_token = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_continue_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->continue_token().data(), this->continue_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CCommunity_GetGamePersonalDataEntries_Response.continue_token");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CCommunity_GetGamePersonalDataEntries_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CCommunity_GetGamePersonalDataEntries_Response)
  return false;
#undef DO_
}

void CCommunity_GetGamePersonalDataEntries_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CCommunity_GetGamePersonalDataEntries_Response)
  // optional uint32 gceresult = 1;
  if (has_gceresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gceresult(), output);
  }

  // repeated string entries = 2;
  for (int i = 0; i < this->entries_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->entries(i).data(), this->entries(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CCommunity_GetGamePersonalDataEntries_Response.entries");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->entries(i), output);
  }

  // optional string continue_token = 3;
  if (has_continue_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->continue_token().data(), this->continue_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CCommunity_GetGamePersonalDataEntries_Response.continue_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->continue_token(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CCommunity_GetGamePersonalDataEntries_Response)
}

::google::protobuf::uint8* CCommunity_GetGamePersonalDataEntries_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CCommunity_GetGamePersonalDataEntries_Response)
  // optional uint32 gceresult = 1;
  if (has_gceresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gceresult(), target);
  }

  // repeated string entries = 2;
  for (int i = 0; i < this->entries_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->entries(i).data(), this->entries(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CCommunity_GetGamePersonalDataEntries_Response.entries");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->entries(i), target);
  }

  // optional string continue_token = 3;
  if (has_continue_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->continue_token().data(), this->continue_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CCommunity_GetGamePersonalDataEntries_Response.continue_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->continue_token(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCommunity_GetGamePersonalDataEntries_Response)
  return target;
}

size_t CCommunity_GetGamePersonalDataEntries_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCommunity_GetGamePersonalDataEntries_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated string entries = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->entries_size());
  for (int i = 0; i < this->entries_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->entries(i));
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional string continue_token = 3;
    if (has_continue_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->continue_token());
    }

    // optional uint32 gceresult = 1;
    if (has_gceresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gceresult());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCommunity_GetGamePersonalDataEntries_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCommunity_GetGamePersonalDataEntries_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CCommunity_GetGamePersonalDataEntries_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CCommunity_GetGamePersonalDataEntries_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCommunity_GetGamePersonalDataEntries_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCommunity_GetGamePersonalDataEntries_Response)
    MergeFrom(*source);
  }
}

void CCommunity_GetGamePersonalDataEntries_Response::MergeFrom(const CCommunity_GetGamePersonalDataEntries_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCommunity_GetGamePersonalDataEntries_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  entries_.MergeFrom(from.entries_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_continue_token()) {
      set_has_continue_token();
      continue_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.continue_token_);
    }
    if (from.has_gceresult()) {
      set_gceresult(from.gceresult());
    }
  }
}

void CCommunity_GetGamePersonalDataEntries_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCommunity_GetGamePersonalDataEntries_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCommunity_GetGamePersonalDataEntries_Response::CopyFrom(const CCommunity_GetGamePersonalDataEntries_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCommunity_GetGamePersonalDataEntries_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCommunity_GetGamePersonalDataEntries_Response::IsInitialized() const {
  return true;
}

void CCommunity_GetGamePersonalDataEntries_Response::Swap(CCommunity_GetGamePersonalDataEntries_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCommunity_GetGamePersonalDataEntries_Response::InternalSwap(CCommunity_GetGamePersonalDataEntries_Response* other) {
  entries_.UnsafeArenaSwap(&other->entries_);
  continue_token_.Swap(&other->continue_token_);
  std::swap(gceresult_, other->gceresult_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CCommunity_GetGamePersonalDataEntries_Response::GetMetadata() const {
  protobuf_gcsystemmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsystemmsgs_2eproto::file_level_metadata[10];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CCommunity_GetGamePersonalDataEntries_Response

// optional uint32 gceresult = 1;
bool CCommunity_GetGamePersonalDataEntries_Response::has_gceresult() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CCommunity_GetGamePersonalDataEntries_Response::set_has_gceresult() {
  _has_bits_[0] |= 0x00000002u;
}
void CCommunity_GetGamePersonalDataEntries_Response::clear_has_gceresult() {
  _has_bits_[0] &= ~0x00000002u;
}
void CCommunity_GetGamePersonalDataEntries_Response::clear_gceresult() {
  gceresult_ = 0u;
  clear_has_gceresult();
}
::google::protobuf::uint32 CCommunity_GetGamePersonalDataEntries_Response::gceresult() const {
  // @@protoc_insertion_point(field_get:CCommunity_GetGamePersonalDataEntries_Response.gceresult)
  return gceresult_;
}
void CCommunity_GetGamePersonalDataEntries_Response::set_gceresult(::google::protobuf::uint32 value) {
  set_has_gceresult();
  gceresult_ = value;
  // @@protoc_insertion_point(field_set:CCommunity_GetGamePersonalDataEntries_Response.gceresult)
}

// repeated string entries = 2;
int CCommunity_GetGamePersonalDataEntries_Response::entries_size() const {
  return entries_.size();
}
void CCommunity_GetGamePersonalDataEntries_Response::clear_entries() {
  entries_.Clear();
}
const ::std::string& CCommunity_GetGamePersonalDataEntries_Response::entries(int index) const {
  // @@protoc_insertion_point(field_get:CCommunity_GetGamePersonalDataEntries_Response.entries)
  return entries_.Get(index);
}
::std::string* CCommunity_GetGamePersonalDataEntries_Response::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:CCommunity_GetGamePersonalDataEntries_Response.entries)
  return entries_.Mutable(index);
}
void CCommunity_GetGamePersonalDataEntries_Response::set_entries(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:CCommunity_GetGamePersonalDataEntries_Response.entries)
  entries_.Mutable(index)->assign(value);
}
void CCommunity_GetGamePersonalDataEntries_Response::set_entries(int index, const char* value) {
  entries_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CCommunity_GetGamePersonalDataEntries_Response.entries)
}
void CCommunity_GetGamePersonalDataEntries_Response::set_entries(int index, const char* value, size_t size) {
  entries_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CCommunity_GetGamePersonalDataEntries_Response.entries)
}
::std::string* CCommunity_GetGamePersonalDataEntries_Response::add_entries() {
  // @@protoc_insertion_point(field_add_mutable:CCommunity_GetGamePersonalDataEntries_Response.entries)
  return entries_.Add();
}
void CCommunity_GetGamePersonalDataEntries_Response::add_entries(const ::std::string& value) {
  entries_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CCommunity_GetGamePersonalDataEntries_Response.entries)
}
void CCommunity_GetGamePersonalDataEntries_Response::add_entries(const char* value) {
  entries_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CCommunity_GetGamePersonalDataEntries_Response.entries)
}
void CCommunity_GetGamePersonalDataEntries_Response::add_entries(const char* value, size_t size) {
  entries_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CCommunity_GetGamePersonalDataEntries_Response.entries)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
CCommunity_GetGamePersonalDataEntries_Response::entries() const {
  // @@protoc_insertion_point(field_list:CCommunity_GetGamePersonalDataEntries_Response.entries)
  return entries_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
CCommunity_GetGamePersonalDataEntries_Response::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:CCommunity_GetGamePersonalDataEntries_Response.entries)
  return &entries_;
}

// optional string continue_token = 3;
bool CCommunity_GetGamePersonalDataEntries_Response::has_continue_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CCommunity_GetGamePersonalDataEntries_Response::set_has_continue_token() {
  _has_bits_[0] |= 0x00000001u;
}
void CCommunity_GetGamePersonalDataEntries_Response::clear_has_continue_token() {
  _has_bits_[0] &= ~0x00000001u;
}
void CCommunity_GetGamePersonalDataEntries_Response::clear_continue_token() {
  continue_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_continue_token();
}
const ::std::string& CCommunity_GetGamePersonalDataEntries_Response::continue_token() const {
  // @@protoc_insertion_point(field_get:CCommunity_GetGamePersonalDataEntries_Response.continue_token)
  return continue_token_.GetNoArena();
}
void CCommunity_GetGamePersonalDataEntries_Response::set_continue_token(const ::std::string& value) {
  set_has_continue_token();
  continue_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CCommunity_GetGamePersonalDataEntries_Response.continue_token)
}
#if LANG_CXX11
void CCommunity_GetGamePersonalDataEntries_Response::set_continue_token(::std::string&& value) {
  set_has_continue_token();
  continue_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CCommunity_GetGamePersonalDataEntries_Response.continue_token)
}
#endif
void CCommunity_GetGamePersonalDataEntries_Response::set_continue_token(const char* value) {
  set_has_continue_token();
  continue_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CCommunity_GetGamePersonalDataEntries_Response.continue_token)
}
void CCommunity_GetGamePersonalDataEntries_Response::set_continue_token(const char* value, size_t size) {
  set_has_continue_token();
  continue_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CCommunity_GetGamePersonalDataEntries_Response.continue_token)
}
::std::string* CCommunity_GetGamePersonalDataEntries_Response::mutable_continue_token() {
  set_has_continue_token();
  // @@protoc_insertion_point(field_mutable:CCommunity_GetGamePersonalDataEntries_Response.continue_token)
  return continue_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CCommunity_GetGamePersonalDataEntries_Response::release_continue_token() {
  // @@protoc_insertion_point(field_release:CCommunity_GetGamePersonalDataEntries_Response.continue_token)
  clear_has_continue_token();
  return continue_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CCommunity_GetGamePersonalDataEntries_Response::set_allocated_continue_token(::std::string* continue_token) {
  if (continue_token != NULL) {
    set_has_continue_token();
  } else {
    clear_has_continue_token();
  }
  continue_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), continue_token);
  // @@protoc_insertion_point(field_set_allocated:CCommunity_GetGamePersonalDataEntries_Response.continue_token)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCommunity_TerminateGamePersonalDataEntries_Request::kAppidFieldNumber;
const int CCommunity_TerminateGamePersonalDataEntries_Request::kSteamidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCommunity_TerminateGamePersonalDataEntries_Request::CCommunity_TerminateGamePersonalDataEntries_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gcsystemmsgs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CCommunity_TerminateGamePersonalDataEntries_Request)
}
CCommunity_TerminateGamePersonalDataEntries_Request::CCommunity_TerminateGamePersonalDataEntries_Request(const CCommunity_TerminateGamePersonalDataEntries_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&steamid_) + sizeof(appid_));
  // @@protoc_insertion_point(copy_constructor:CCommunity_TerminateGamePersonalDataEntries_Request)
}

void CCommunity_TerminateGamePersonalDataEntries_Request::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&steamid_, 0, reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&steamid_) + sizeof(appid_));
}

CCommunity_TerminateGamePersonalDataEntries_Request::~CCommunity_TerminateGamePersonalDataEntries_Request() {
  // @@protoc_insertion_point(destructor:CCommunity_TerminateGamePersonalDataEntries_Request)
  SharedDtor();
}

void CCommunity_TerminateGamePersonalDataEntries_Request::SharedDtor() {
}

void CCommunity_TerminateGamePersonalDataEntries_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCommunity_TerminateGamePersonalDataEntries_Request::descriptor() {
  protobuf_gcsystemmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsystemmsgs_2eproto::file_level_metadata[11].descriptor;
}

const CCommunity_TerminateGamePersonalDataEntries_Request& CCommunity_TerminateGamePersonalDataEntries_Request::default_instance() {
  protobuf_gcsystemmsgs_2eproto::InitDefaults();
  return *internal_default_instance();
}

CCommunity_TerminateGamePersonalDataEntries_Request* CCommunity_TerminateGamePersonalDataEntries_Request::New(::google::protobuf::Arena* arena) const {
  CCommunity_TerminateGamePersonalDataEntries_Request* n = new CCommunity_TerminateGamePersonalDataEntries_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CCommunity_TerminateGamePersonalDataEntries_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CCommunity_TerminateGamePersonalDataEntries_Request)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&steamid_, 0, reinterpret_cast<char*>(&appid_) -
      reinterpret_cast<char*>(&steamid_) + sizeof(appid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CCommunity_TerminateGamePersonalDataEntries_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CCommunity_TerminateGamePersonalDataEntries_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (tag == 8u) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 steamid = 2;
      case 2: {
        if (tag == 16u) {
          set_has_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CCommunity_TerminateGamePersonalDataEntries_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CCommunity_TerminateGamePersonalDataEntries_Request)
  return false;
#undef DO_
}

void CCommunity_TerminateGamePersonalDataEntries_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CCommunity_TerminateGamePersonalDataEntries_Request)
  // optional uint32 appid = 1;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional uint64 steamid = 2;
  if (has_steamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->steamid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CCommunity_TerminateGamePersonalDataEntries_Request)
}

::google::protobuf::uint8* CCommunity_TerminateGamePersonalDataEntries_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CCommunity_TerminateGamePersonalDataEntries_Request)
  // optional uint32 appid = 1;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional uint64 steamid = 2;
  if (has_steamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->steamid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCommunity_TerminateGamePersonalDataEntries_Request)
  return target;
}

size_t CCommunity_TerminateGamePersonalDataEntries_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCommunity_TerminateGamePersonalDataEntries_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 steamid = 2;
    if (has_steamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->steamid());
    }

    // optional uint32 appid = 1;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCommunity_TerminateGamePersonalDataEntries_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCommunity_TerminateGamePersonalDataEntries_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CCommunity_TerminateGamePersonalDataEntries_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CCommunity_TerminateGamePersonalDataEntries_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCommunity_TerminateGamePersonalDataEntries_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCommunity_TerminateGamePersonalDataEntries_Request)
    MergeFrom(*source);
  }
}

void CCommunity_TerminateGamePersonalDataEntries_Request::MergeFrom(const CCommunity_TerminateGamePersonalDataEntries_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCommunity_TerminateGamePersonalDataEntries_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_steamid()) {
      set_steamid(from.steamid());
    }
    if (from.has_appid()) {
      set_appid(from.appid());
    }
  }
}

void CCommunity_TerminateGamePersonalDataEntries_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCommunity_TerminateGamePersonalDataEntries_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCommunity_TerminateGamePersonalDataEntries_Request::CopyFrom(const CCommunity_TerminateGamePersonalDataEntries_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCommunity_TerminateGamePersonalDataEntries_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCommunity_TerminateGamePersonalDataEntries_Request::IsInitialized() const {
  return true;
}

void CCommunity_TerminateGamePersonalDataEntries_Request::Swap(CCommunity_TerminateGamePersonalDataEntries_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCommunity_TerminateGamePersonalDataEntries_Request::InternalSwap(CCommunity_TerminateGamePersonalDataEntries_Request* other) {
  std::swap(steamid_, other->steamid_);
  std::swap(appid_, other->appid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CCommunity_TerminateGamePersonalDataEntries_Request::GetMetadata() const {
  protobuf_gcsystemmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsystemmsgs_2eproto::file_level_metadata[11];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CCommunity_TerminateGamePersonalDataEntries_Request

// optional uint32 appid = 1;
bool CCommunity_TerminateGamePersonalDataEntries_Request::has_appid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CCommunity_TerminateGamePersonalDataEntries_Request::set_has_appid() {
  _has_bits_[0] |= 0x00000002u;
}
void CCommunity_TerminateGamePersonalDataEntries_Request::clear_has_appid() {
  _has_bits_[0] &= ~0x00000002u;
}
void CCommunity_TerminateGamePersonalDataEntries_Request::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
::google::protobuf::uint32 CCommunity_TerminateGamePersonalDataEntries_Request::appid() const {
  // @@protoc_insertion_point(field_get:CCommunity_TerminateGamePersonalDataEntries_Request.appid)
  return appid_;
}
void CCommunity_TerminateGamePersonalDataEntries_Request::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:CCommunity_TerminateGamePersonalDataEntries_Request.appid)
}

// optional uint64 steamid = 2;
bool CCommunity_TerminateGamePersonalDataEntries_Request::has_steamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CCommunity_TerminateGamePersonalDataEntries_Request::set_has_steamid() {
  _has_bits_[0] |= 0x00000001u;
}
void CCommunity_TerminateGamePersonalDataEntries_Request::clear_has_steamid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CCommunity_TerminateGamePersonalDataEntries_Request::clear_steamid() {
  steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid();
}
::google::protobuf::uint64 CCommunity_TerminateGamePersonalDataEntries_Request::steamid() const {
  // @@protoc_insertion_point(field_get:CCommunity_TerminateGamePersonalDataEntries_Request.steamid)
  return steamid_;
}
void CCommunity_TerminateGamePersonalDataEntries_Request::set_steamid(::google::protobuf::uint64 value) {
  set_has_steamid();
  steamid_ = value;
  // @@protoc_insertion_point(field_set:CCommunity_TerminateGamePersonalDataEntries_Request.steamid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCommunity_TerminateGamePersonalDataEntries_Response::kGceresultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCommunity_TerminateGamePersonalDataEntries_Response::CCommunity_TerminateGamePersonalDataEntries_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gcsystemmsgs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CCommunity_TerminateGamePersonalDataEntries_Response)
}
CCommunity_TerminateGamePersonalDataEntries_Response::CCommunity_TerminateGamePersonalDataEntries_Response(const CCommunity_TerminateGamePersonalDataEntries_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gceresult_ = from.gceresult_;
  // @@protoc_insertion_point(copy_constructor:CCommunity_TerminateGamePersonalDataEntries_Response)
}

void CCommunity_TerminateGamePersonalDataEntries_Response::SharedCtor() {
  _cached_size_ = 0;
  gceresult_ = 0u;
}

CCommunity_TerminateGamePersonalDataEntries_Response::~CCommunity_TerminateGamePersonalDataEntries_Response() {
  // @@protoc_insertion_point(destructor:CCommunity_TerminateGamePersonalDataEntries_Response)
  SharedDtor();
}

void CCommunity_TerminateGamePersonalDataEntries_Response::SharedDtor() {
}

void CCommunity_TerminateGamePersonalDataEntries_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCommunity_TerminateGamePersonalDataEntries_Response::descriptor() {
  protobuf_gcsystemmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsystemmsgs_2eproto::file_level_metadata[12].descriptor;
}

const CCommunity_TerminateGamePersonalDataEntries_Response& CCommunity_TerminateGamePersonalDataEntries_Response::default_instance() {
  protobuf_gcsystemmsgs_2eproto::InitDefaults();
  return *internal_default_instance();
}

CCommunity_TerminateGamePersonalDataEntries_Response* CCommunity_TerminateGamePersonalDataEntries_Response::New(::google::protobuf::Arena* arena) const {
  CCommunity_TerminateGamePersonalDataEntries_Response* n = new CCommunity_TerminateGamePersonalDataEntries_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CCommunity_TerminateGamePersonalDataEntries_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CCommunity_TerminateGamePersonalDataEntries_Response)
  gceresult_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CCommunity_TerminateGamePersonalDataEntries_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CCommunity_TerminateGamePersonalDataEntries_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 gceresult = 1;
      case 1: {
        if (tag == 8u) {
          set_has_gceresult();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gceresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CCommunity_TerminateGamePersonalDataEntries_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CCommunity_TerminateGamePersonalDataEntries_Response)
  return false;
#undef DO_
}

void CCommunity_TerminateGamePersonalDataEntries_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CCommunity_TerminateGamePersonalDataEntries_Response)
  // optional uint32 gceresult = 1;
  if (has_gceresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gceresult(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CCommunity_TerminateGamePersonalDataEntries_Response)
}

::google::protobuf::uint8* CCommunity_TerminateGamePersonalDataEntries_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CCommunity_TerminateGamePersonalDataEntries_Response)
  // optional uint32 gceresult = 1;
  if (has_gceresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gceresult(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCommunity_TerminateGamePersonalDataEntries_Response)
  return target;
}

size_t CCommunity_TerminateGamePersonalDataEntries_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCommunity_TerminateGamePersonalDataEntries_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 gceresult = 1;
  if (has_gceresult()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gceresult());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCommunity_TerminateGamePersonalDataEntries_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCommunity_TerminateGamePersonalDataEntries_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CCommunity_TerminateGamePersonalDataEntries_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CCommunity_TerminateGamePersonalDataEntries_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCommunity_TerminateGamePersonalDataEntries_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCommunity_TerminateGamePersonalDataEntries_Response)
    MergeFrom(*source);
  }
}

void CCommunity_TerminateGamePersonalDataEntries_Response::MergeFrom(const CCommunity_TerminateGamePersonalDataEntries_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCommunity_TerminateGamePersonalDataEntries_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_gceresult()) {
    set_gceresult(from.gceresult());
  }
}

void CCommunity_TerminateGamePersonalDataEntries_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCommunity_TerminateGamePersonalDataEntries_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCommunity_TerminateGamePersonalDataEntries_Response::CopyFrom(const CCommunity_TerminateGamePersonalDataEntries_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCommunity_TerminateGamePersonalDataEntries_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCommunity_TerminateGamePersonalDataEntries_Response::IsInitialized() const {
  return true;
}

void CCommunity_TerminateGamePersonalDataEntries_Response::Swap(CCommunity_TerminateGamePersonalDataEntries_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCommunity_TerminateGamePersonalDataEntries_Response::InternalSwap(CCommunity_TerminateGamePersonalDataEntries_Response* other) {
  std::swap(gceresult_, other->gceresult_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CCommunity_TerminateGamePersonalDataEntries_Response::GetMetadata() const {
  protobuf_gcsystemmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gcsystemmsgs_2eproto::file_level_metadata[12];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CCommunity_TerminateGamePersonalDataEntries_Response

// optional uint32 gceresult = 1;
bool CCommunity_TerminateGamePersonalDataEntries_Response::has_gceresult() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CCommunity_TerminateGamePersonalDataEntries_Response::set_has_gceresult() {
  _has_bits_[0] |= 0x00000001u;
}
void CCommunity_TerminateGamePersonalDataEntries_Response::clear_has_gceresult() {
  _has_bits_[0] &= ~0x00000001u;
}
void CCommunity_TerminateGamePersonalDataEntries_Response::clear_gceresult() {
  gceresult_ = 0u;
  clear_has_gceresult();
}
::google::protobuf::uint32 CCommunity_TerminateGamePersonalDataEntries_Response::gceresult() const {
  // @@protoc_insertion_point(field_get:CCommunity_TerminateGamePersonalDataEntries_Response.gceresult)
  return gceresult_;
}
void CCommunity_TerminateGamePersonalDataEntries_Response::set_gceresult(::google::protobuf::uint32 value) {
  set_has_gceresult();
  gceresult_ = value;
  // @@protoc_insertion_point(field_set:CCommunity_TerminateGamePersonalDataEntries_Response.gceresult)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
