// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net.proto

#ifndef PROTOBUF_net_2eproto__INCLUDED
#define PROTOBUF_net_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>
#include <google/protobuf/map_field_lite.h>
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
class Announce;
class AnnounceDefaultTypeInternal;
extern AnnounceDefaultTypeInternal _Announce_default_instance_;
class Announce_Other_Peers;
class Announce_Other_PeersDefaultTypeInternal;
extern Announce_Other_PeersDefaultTypeInternal _Announce_Other_Peers_default_instance_;
class Auth_Ticket;
class Auth_TicketDefaultTypeInternal;
extern Auth_TicketDefaultTypeInternal _Auth_Ticket_default_instance_;
class Common_Message;
class Common_MessageDefaultTypeInternal;
extern Common_MessageDefaultTypeInternal _Common_Message_default_instance_;
class Friend;
class FriendDefaultTypeInternal;
extern FriendDefaultTypeInternal _Friend_default_instance_;
class Friend_Messages;
class Friend_MessagesDefaultTypeInternal;
extern Friend_MessagesDefaultTypeInternal _Friend_Messages_default_instance_;
class Gameserver;
class GameserverDefaultTypeInternal;
extern GameserverDefaultTypeInternal _Gameserver_default_instance_;
class Lobby;
class LobbyDefaultTypeInternal;
extern LobbyDefaultTypeInternal _Lobby_default_instance_;
class Lobby_Gameserver;
class Lobby_GameserverDefaultTypeInternal;
extern Lobby_GameserverDefaultTypeInternal _Lobby_Gameserver_default_instance_;
class Lobby_Member;
class Lobby_MemberDefaultTypeInternal;
extern Lobby_MemberDefaultTypeInternal _Lobby_Member_default_instance_;
class Lobby_Messages;
class Lobby_MessagesDefaultTypeInternal;
extern Lobby_MessagesDefaultTypeInternal _Lobby_Messages_default_instance_;
class Low_Level;
class Low_LevelDefaultTypeInternal;
extern Low_LevelDefaultTypeInternal _Low_Level_default_instance_;
class Network;
class NetworkDefaultTypeInternal;
extern NetworkDefaultTypeInternal _Network_default_instance_;
class Network_Old;
class Network_OldDefaultTypeInternal;
extern Network_OldDefaultTypeInternal _Network_Old_default_instance_;
class Networking_Sockets;
class Networking_SocketsDefaultTypeInternal;
extern Networking_SocketsDefaultTypeInternal _Networking_Sockets_default_instance_;

namespace protobuf_net_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_net_2eproto

enum Announce_Types {
  Announce_Types_PING = 0,
  Announce_Types_PONG = 1,
  Announce_Types_Announce_Types_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Announce_Types_Announce_Types_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Announce_Types_IsValid(int value);
const Announce_Types Announce_Types_Types_MIN = Announce_Types_PING;
const Announce_Types Announce_Types_Types_MAX = Announce_Types_PONG;
const int Announce_Types_Types_ARRAYSIZE = Announce_Types_Types_MAX + 1;

enum Lobby_Messages_Types {
  Lobby_Messages_Types_JOIN = 0,
  Lobby_Messages_Types_LEAVE = 1,
  Lobby_Messages_Types_CHANGE_OWNER = 2,
  Lobby_Messages_Types_MEMBER_DATA = 3,
  Lobby_Messages_Types_CHAT_MESSAGE = 4,
  Lobby_Messages_Types_Lobby_Messages_Types_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Lobby_Messages_Types_Lobby_Messages_Types_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Lobby_Messages_Types_IsValid(int value);
const Lobby_Messages_Types Lobby_Messages_Types_Types_MIN = Lobby_Messages_Types_JOIN;
const Lobby_Messages_Types Lobby_Messages_Types_Types_MAX = Lobby_Messages_Types_CHAT_MESSAGE;
const int Lobby_Messages_Types_Types_ARRAYSIZE = Lobby_Messages_Types_Types_MAX + 1;

enum Low_Level_Types {
  Low_Level_Types_HEARTBEAT = 0,
  Low_Level_Types_CONNECT = 1,
  Low_Level_Types_DISCONNECT = 2,
  Low_Level_Types_Low_Level_Types_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Low_Level_Types_Low_Level_Types_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Low_Level_Types_IsValid(int value);
const Low_Level_Types Low_Level_Types_Types_MIN = Low_Level_Types_HEARTBEAT;
const Low_Level_Types Low_Level_Types_Types_MAX = Low_Level_Types_DISCONNECT;
const int Low_Level_Types_Types_ARRAYSIZE = Low_Level_Types_Types_MAX + 1;

enum Network_Types {
  Network_Types_DATA = 0,
  Network_Types_NEW_CONNECTION = 1,
  Network_Types_Network_Types_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Network_Types_Network_Types_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Network_Types_IsValid(int value);
const Network_Types Network_Types_Types_MIN = Network_Types_DATA;
const Network_Types Network_Types_Types_MAX = Network_Types_NEW_CONNECTION;
const int Network_Types_Types_ARRAYSIZE = Network_Types_Types_MAX + 1;

enum Network_Old_Types {
  Network_Old_Types_CONNECTION_REQUEST_IP = 0,
  Network_Old_Types_CONNECTION_REQUEST_STEAMID = 1,
  Network_Old_Types_CONNECTION_ACCEPTED = 2,
  Network_Old_Types_CONNECTION_END = 3,
  Network_Old_Types_DATA = 4,
  Network_Old_Types_Network_Old_Types_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Network_Old_Types_Network_Old_Types_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Network_Old_Types_IsValid(int value);
const Network_Old_Types Network_Old_Types_Types_MIN = Network_Old_Types_CONNECTION_REQUEST_IP;
const Network_Old_Types Network_Old_Types_Types_MAX = Network_Old_Types_DATA;
const int Network_Old_Types_Types_ARRAYSIZE = Network_Old_Types_Types_MAX + 1;

enum Networking_Sockets_Types {
  Networking_Sockets_Types_CONNECTION_REQUEST = 0,
  Networking_Sockets_Types_CONNECTION_ACCEPTED = 2,
  Networking_Sockets_Types_CONNECTION_END = 3,
  Networking_Sockets_Types_DATA = 4,
  Networking_Sockets_Types_Networking_Sockets_Types_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Networking_Sockets_Types_Networking_Sockets_Types_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Networking_Sockets_Types_IsValid(int value);
const Networking_Sockets_Types Networking_Sockets_Types_Types_MIN = Networking_Sockets_Types_CONNECTION_REQUEST;
const Networking_Sockets_Types Networking_Sockets_Types_Types_MAX = Networking_Sockets_Types_DATA;
const int Networking_Sockets_Types_Types_ARRAYSIZE = Networking_Sockets_Types_Types_MAX + 1;

enum Auth_Ticket_Types {
  Auth_Ticket_Types_CANCEL = 0,
  Auth_Ticket_Types_Auth_Ticket_Types_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Auth_Ticket_Types_Auth_Ticket_Types_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Auth_Ticket_Types_IsValid(int value);
const Auth_Ticket_Types Auth_Ticket_Types_Types_MIN = Auth_Ticket_Types_CANCEL;
const Auth_Ticket_Types Auth_Ticket_Types_Types_MAX = Auth_Ticket_Types_CANCEL;
const int Auth_Ticket_Types_Types_ARRAYSIZE = Auth_Ticket_Types_Types_MAX + 1;

enum Friend_Messages_Types {
  Friend_Messages_Types_LOBBY_INVITE = 0,
  Friend_Messages_Types_GAME_INVITE = 1,
  Friend_Messages_Types_Friend_Messages_Types_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Friend_Messages_Types_Friend_Messages_Types_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Friend_Messages_Types_IsValid(int value);
const Friend_Messages_Types Friend_Messages_Types_Types_MIN = Friend_Messages_Types_LOBBY_INVITE;
const Friend_Messages_Types Friend_Messages_Types_Types_MAX = Friend_Messages_Types_GAME_INVITE;
const int Friend_Messages_Types_Types_ARRAYSIZE = Friend_Messages_Types_Types_MAX + 1;

// ===================================================================

class Announce_Other_Peers : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:Announce.Other_Peers) */ {
 public:
  Announce_Other_Peers();
  virtual ~Announce_Other_Peers();

  Announce_Other_Peers(const Announce_Other_Peers& from);

  inline Announce_Other_Peers& operator=(const Announce_Other_Peers& from) {
    CopyFrom(from);
    return *this;
  }

  static const Announce_Other_Peers& default_instance();

  static inline const Announce_Other_Peers* internal_default_instance() {
    return reinterpret_cast<const Announce_Other_Peers*>(
               &_Announce_Other_Peers_default_instance_);
  }

  void Swap(Announce_Other_Peers* other);

  // implements Message ----------------------------------------------

  inline Announce_Other_Peers* New() const PROTOBUF_FINAL { return New(NULL); }

  Announce_Other_Peers* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Announce_Other_Peers& from);
  void MergeFrom(const Announce_Other_Peers& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Announce_Other_Peers* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // uint32 ip = 2;
  void clear_ip();
  static const int kIpFieldNumber = 2;
  ::google::protobuf::uint32 ip() const;
  void set_ip(::google::protobuf::uint32 value);

  // uint32 udp_port = 3;
  void clear_udp_port();
  static const int kUdpPortFieldNumber = 3;
  ::google::protobuf::uint32 udp_port() const;
  void set_udp_port(::google::protobuf::uint32 value);

  // uint32 appid = 4;
  void clear_appid();
  static const int kAppidFieldNumber = 4;
  ::google::protobuf::uint32 appid() const;
  void set_appid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Announce.Other_Peers)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint32 ip_;
  ::google::protobuf::uint32 udp_port_;
  ::google::protobuf::uint32 appid_;
  mutable int _cached_size_;
  friend struct  protobuf_net_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Announce : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:Announce) */ {
 public:
  Announce();
  virtual ~Announce();

  Announce(const Announce& from);

  inline Announce& operator=(const Announce& from) {
    CopyFrom(from);
    return *this;
  }

  static const Announce& default_instance();

  static inline const Announce* internal_default_instance() {
    return reinterpret_cast<const Announce*>(
               &_Announce_default_instance_);
  }

  void Swap(Announce* other);

  // implements Message ----------------------------------------------

  inline Announce* New() const PROTOBUF_FINAL { return New(NULL); }

  Announce* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Announce& from);
  void MergeFrom(const Announce& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Announce* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Announce_Other_Peers Other_Peers;

  typedef Announce_Types Types;
  static const Types PING =
    Announce_Types_PING;
  static const Types PONG =
    Announce_Types_PONG;
  static inline bool Types_IsValid(int value) {
    return Announce_Types_IsValid(value);
  }
  static const Types Types_MIN =
    Announce_Types_Types_MIN;
  static const Types Types_MAX =
    Announce_Types_Types_MAX;
  static const int Types_ARRAYSIZE =
    Announce_Types_Types_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // repeated uint64 ids = 2;
  int ids_size() const;
  void clear_ids();
  static const int kIdsFieldNumber = 2;
  ::google::protobuf::uint64 ids(int index) const;
  void set_ids(int index, ::google::protobuf::uint64 value);
  void add_ids(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_ids();

  // repeated .Announce.Other_Peers peers = 4;
  int peers_size() const;
  void clear_peers();
  static const int kPeersFieldNumber = 4;
  const ::Announce_Other_Peers& peers(int index) const;
  ::Announce_Other_Peers* mutable_peers(int index);
  ::Announce_Other_Peers* add_peers();
  ::google::protobuf::RepeatedPtrField< ::Announce_Other_Peers >*
      mutable_peers();
  const ::google::protobuf::RepeatedPtrField< ::Announce_Other_Peers >&
      peers() const;

  // .Announce.Types type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::Announce_Types type() const;
  void set_type(::Announce_Types value);

  // uint32 tcp_port = 3;
  void clear_tcp_port();
  static const int kTcpPortFieldNumber = 3;
  ::google::protobuf::uint32 tcp_port() const;
  void set_tcp_port(::google::protobuf::uint32 value);

  // uint32 appid = 5;
  void clear_appid();
  static const int kAppidFieldNumber = 5;
  ::google::protobuf::uint32 appid() const;
  void set_appid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Announce)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > ids_;
  mutable int _ids_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::Announce_Other_Peers > peers_;
  int type_;
  ::google::protobuf::uint32 tcp_port_;
  ::google::protobuf::uint32 appid_;
  mutable int _cached_size_;
  friend struct  protobuf_net_2eproto::TableStruct;
};
// -------------------------------------------------------------------


// -------------------------------------------------------------------


// -------------------------------------------------------------------

class Lobby_Member : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:Lobby.Member) */ {
 public:
  Lobby_Member();
  virtual ~Lobby_Member();

  Lobby_Member(const Lobby_Member& from);

  inline Lobby_Member& operator=(const Lobby_Member& from) {
    CopyFrom(from);
    return *this;
  }

  static const Lobby_Member& default_instance();

  static inline const Lobby_Member* internal_default_instance() {
    return reinterpret_cast<const Lobby_Member*>(
               &_Lobby_Member_default_instance_);
  }

  void Swap(Lobby_Member* other);

  // implements Message ----------------------------------------------

  inline Lobby_Member* New() const PROTOBUF_FINAL { return New(NULL); }

  Lobby_Member* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Lobby_Member& from);
  void MergeFrom(const Lobby_Member& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Lobby_Member* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, bytes> values = 2;
  int values_size() const;
  void clear_values();
  static const int kValuesFieldNumber = 2;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      values() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_values();

  // uint64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Lobby.Member)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_BYTES,
      0 >
      Lobby_Member_ValuesEntry;
  ::google::protobuf::internal::MapFieldLite<
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_BYTES,
      0 > values_;
  ::google::protobuf::uint64 id_;
  mutable int _cached_size_;
  friend struct  protobuf_net_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Lobby_Gameserver : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:Lobby.Gameserver) */ {
 public:
  Lobby_Gameserver();
  virtual ~Lobby_Gameserver();

  Lobby_Gameserver(const Lobby_Gameserver& from);

  inline Lobby_Gameserver& operator=(const Lobby_Gameserver& from) {
    CopyFrom(from);
    return *this;
  }

  static const Lobby_Gameserver& default_instance();

  static inline const Lobby_Gameserver* internal_default_instance() {
    return reinterpret_cast<const Lobby_Gameserver*>(
               &_Lobby_Gameserver_default_instance_);
  }

  void Swap(Lobby_Gameserver* other);

  // implements Message ----------------------------------------------

  inline Lobby_Gameserver* New() const PROTOBUF_FINAL { return New(NULL); }

  Lobby_Gameserver* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Lobby_Gameserver& from);
  void MergeFrom(const Lobby_Gameserver& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Lobby_Gameserver* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // uint32 ip = 2;
  void clear_ip();
  static const int kIpFieldNumber = 2;
  ::google::protobuf::uint32 ip() const;
  void set_ip(::google::protobuf::uint32 value);

  // uint32 port = 3;
  void clear_port();
  static const int kPortFieldNumber = 3;
  ::google::protobuf::uint32 port() const;
  void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Lobby.Gameserver)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint32 ip_;
  ::google::protobuf::uint32 port_;
  mutable int _cached_size_;
  friend struct  protobuf_net_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Lobby : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:Lobby) */ {
 public:
  Lobby();
  virtual ~Lobby();

  Lobby(const Lobby& from);

  inline Lobby& operator=(const Lobby& from) {
    CopyFrom(from);
    return *this;
  }

  static const Lobby& default_instance();

  static inline const Lobby* internal_default_instance() {
    return reinterpret_cast<const Lobby*>(
               &_Lobby_default_instance_);
  }

  void Swap(Lobby* other);

  // implements Message ----------------------------------------------

  inline Lobby* New() const PROTOBUF_FINAL { return New(NULL); }

  Lobby* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Lobby& from);
  void MergeFrom(const Lobby& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Lobby* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Lobby_Member Member;
  typedef Lobby_Gameserver Gameserver;

  // accessors -------------------------------------------------------

  // map<string, bytes> values = 3;
  int values_size() const;
  void clear_values();
  static const int kValuesFieldNumber = 3;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      values() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_values();

  // repeated .Lobby.Member members = 4;
  int members_size() const;
  void clear_members();
  static const int kMembersFieldNumber = 4;
  const ::Lobby_Member& members(int index) const;
  ::Lobby_Member* mutable_members(int index);
  ::Lobby_Member* add_members();
  ::google::protobuf::RepeatedPtrField< ::Lobby_Member >*
      mutable_members();
  const ::google::protobuf::RepeatedPtrField< ::Lobby_Member >&
      members() const;

  // .Lobby.Gameserver gameserver = 5;
  bool has_gameserver() const;
  void clear_gameserver();
  static const int kGameserverFieldNumber = 5;
  const ::Lobby_Gameserver& gameserver() const;
  ::Lobby_Gameserver* mutable_gameserver();
  ::Lobby_Gameserver* release_gameserver();
  void set_allocated_gameserver(::Lobby_Gameserver* gameserver);

  // uint64 room_id = 1;
  void clear_room_id();
  static const int kRoomIdFieldNumber = 1;
  ::google::protobuf::uint64 room_id() const;
  void set_room_id(::google::protobuf::uint64 value);

  // uint64 owner = 2;
  void clear_owner();
  static const int kOwnerFieldNumber = 2;
  ::google::protobuf::uint64 owner() const;
  void set_owner(::google::protobuf::uint64 value);

  // uint32 member_limit = 6;
  void clear_member_limit();
  static const int kMemberLimitFieldNumber = 6;
  ::google::protobuf::uint32 member_limit() const;
  void set_member_limit(::google::protobuf::uint32 value);

  // uint32 type = 7;
  void clear_type();
  static const int kTypeFieldNumber = 7;
  ::google::protobuf::uint32 type() const;
  void set_type(::google::protobuf::uint32 value);

  // uint32 appid = 9;
  void clear_appid();
  static const int kAppidFieldNumber = 9;
  ::google::protobuf::uint32 appid() const;
  void set_appid(::google::protobuf::uint32 value);

  // bool joinable = 8;
  void clear_joinable();
  static const int kJoinableFieldNumber = 8;
  bool joinable() const;
  void set_joinable(bool value);

  // bool deleted = 32;
  void clear_deleted();
  static const int kDeletedFieldNumber = 32;
  bool deleted() const;
  void set_deleted(bool value);

  // uint64 time_deleted = 33;
  void clear_time_deleted();
  static const int kTimeDeletedFieldNumber = 33;
  ::google::protobuf::uint64 time_deleted() const;
  void set_time_deleted(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Lobby)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_BYTES,
      0 >
      Lobby_ValuesEntry;
  ::google::protobuf::internal::MapFieldLite<
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_BYTES,
      0 > values_;
  ::google::protobuf::RepeatedPtrField< ::Lobby_Member > members_;
  ::Lobby_Gameserver* gameserver_;
  ::google::protobuf::uint64 room_id_;
  ::google::protobuf::uint64 owner_;
  ::google::protobuf::uint32 member_limit_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 appid_;
  bool joinable_;
  bool deleted_;
  ::google::protobuf::uint64 time_deleted_;
  mutable int _cached_size_;
  friend struct  protobuf_net_2eproto::TableStruct;
};
// -------------------------------------------------------------------


// -------------------------------------------------------------------

class Lobby_Messages : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:Lobby_Messages) */ {
 public:
  Lobby_Messages();
  virtual ~Lobby_Messages();

  Lobby_Messages(const Lobby_Messages& from);

  inline Lobby_Messages& operator=(const Lobby_Messages& from) {
    CopyFrom(from);
    return *this;
  }

  static const Lobby_Messages& default_instance();

  static inline const Lobby_Messages* internal_default_instance() {
    return reinterpret_cast<const Lobby_Messages*>(
               &_Lobby_Messages_default_instance_);
  }

  void Swap(Lobby_Messages* other);

  // implements Message ----------------------------------------------

  inline Lobby_Messages* New() const PROTOBUF_FINAL { return New(NULL); }

  Lobby_Messages* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Lobby_Messages& from);
  void MergeFrom(const Lobby_Messages& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Lobby_Messages* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  typedef Lobby_Messages_Types Types;
  static const Types JOIN =
    Lobby_Messages_Types_JOIN;
  static const Types LEAVE =
    Lobby_Messages_Types_LEAVE;
  static const Types CHANGE_OWNER =
    Lobby_Messages_Types_CHANGE_OWNER;
  static const Types MEMBER_DATA =
    Lobby_Messages_Types_MEMBER_DATA;
  static const Types CHAT_MESSAGE =
    Lobby_Messages_Types_CHAT_MESSAGE;
  static inline bool Types_IsValid(int value) {
    return Lobby_Messages_Types_IsValid(value);
  }
  static const Types Types_MIN =
    Lobby_Messages_Types_Types_MIN;
  static const Types Types_MAX =
    Lobby_Messages_Types_Types_MAX;
  static const int Types_ARRAYSIZE =
    Lobby_Messages_Types_Types_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // map<string, bytes> map = 5;
  int map_size() const;
  void clear_map();
  static const int kMapFieldNumber = 5;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      map() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_map();

  // bytes bdata = 4;
  void clear_bdata();
  static const int kBdataFieldNumber = 4;
  const ::std::string& bdata() const;
  void set_bdata(const ::std::string& value);
  #if LANG_CXX11
  void set_bdata(::std::string&& value);
  #endif
  void set_bdata(const char* value);
  void set_bdata(const void* value, size_t size);
  ::std::string* mutable_bdata();
  ::std::string* release_bdata();
  void set_allocated_bdata(::std::string* bdata);

  // uint64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // uint64 idata = 3;
  void clear_idata();
  static const int kIdataFieldNumber = 3;
  ::google::protobuf::uint64 idata() const;
  void set_idata(::google::protobuf::uint64 value);

  // .Lobby_Messages.Types type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::Lobby_Messages_Types type() const;
  void set_type(::Lobby_Messages_Types value);

  // @@protoc_insertion_point(class_scope:Lobby_Messages)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_BYTES,
      0 >
      Lobby_Messages_MapEntry;
  ::google::protobuf::internal::MapFieldLite<
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_BYTES,
      0 > map_;
  ::google::protobuf::internal::ArenaStringPtr bdata_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint64 idata_;
  int type_;
  mutable int _cached_size_;
  friend struct  protobuf_net_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Low_Level : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:Low_Level) */ {
 public:
  Low_Level();
  virtual ~Low_Level();

  Low_Level(const Low_Level& from);

  inline Low_Level& operator=(const Low_Level& from) {
    CopyFrom(from);
    return *this;
  }

  static const Low_Level& default_instance();

  static inline const Low_Level* internal_default_instance() {
    return reinterpret_cast<const Low_Level*>(
               &_Low_Level_default_instance_);
  }

  void Swap(Low_Level* other);

  // implements Message ----------------------------------------------

  inline Low_Level* New() const PROTOBUF_FINAL { return New(NULL); }

  Low_Level* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Low_Level& from);
  void MergeFrom(const Low_Level& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Low_Level* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Low_Level_Types Types;
  static const Types HEARTBEAT =
    Low_Level_Types_HEARTBEAT;
  static const Types CONNECT =
    Low_Level_Types_CONNECT;
  static const Types DISCONNECT =
    Low_Level_Types_DISCONNECT;
  static inline bool Types_IsValid(int value) {
    return Low_Level_Types_IsValid(value);
  }
  static const Types Types_MIN =
    Low_Level_Types_Types_MIN;
  static const Types Types_MAX =
    Low_Level_Types_Types_MAX;
  static const int Types_ARRAYSIZE =
    Low_Level_Types_Types_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // .Low_Level.Types type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::Low_Level_Types type() const;
  void set_type(::Low_Level_Types value);

  // @@protoc_insertion_point(class_scope:Low_Level)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  int type_;
  mutable int _cached_size_;
  friend struct  protobuf_net_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Network : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:Network) */ {
 public:
  Network();
  virtual ~Network();

  Network(const Network& from);

  inline Network& operator=(const Network& from) {
    CopyFrom(from);
    return *this;
  }

  static const Network& default_instance();

  static inline const Network* internal_default_instance() {
    return reinterpret_cast<const Network*>(
               &_Network_default_instance_);
  }

  void Swap(Network* other);

  // implements Message ----------------------------------------------

  inline Network* New() const PROTOBUF_FINAL { return New(NULL); }

  Network* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Network& from);
  void MergeFrom(const Network& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Network* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Network_Types Types;
  static const Types DATA =
    Network_Types_DATA;
  static const Types NEW_CONNECTION =
    Network_Types_NEW_CONNECTION;
  static inline bool Types_IsValid(int value) {
    return Network_Types_IsValid(value);
  }
  static const Types Types_MIN =
    Network_Types_Types_MIN;
  static const Types Types_MAX =
    Network_Types_Types_MAX;
  static const int Types_ARRAYSIZE =
    Network_Types_Types_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // bytes data = 2;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // uint32 channel = 1;
  void clear_channel();
  static const int kChannelFieldNumber = 1;
  ::google::protobuf::uint32 channel() const;
  void set_channel(::google::protobuf::uint32 value);

  // .Network.Types type = 3;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::Network_Types type() const;
  void set_type(::Network_Types value);

  // uint64 time_processed = 129;
  void clear_time_processed();
  static const int kTimeProcessedFieldNumber = 129;
  ::google::protobuf::uint64 time_processed() const;
  void set_time_processed(::google::protobuf::uint64 value);

  // bool processed = 128;
  void clear_processed();
  static const int kProcessedFieldNumber = 128;
  bool processed() const;
  void set_processed(bool value);

  // @@protoc_insertion_point(class_scope:Network)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::uint32 channel_;
  int type_;
  ::google::protobuf::uint64 time_processed_;
  bool processed_;
  mutable int _cached_size_;
  friend struct  protobuf_net_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Network_Old : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:Network_Old) */ {
 public:
  Network_Old();
  virtual ~Network_Old();

  Network_Old(const Network_Old& from);

  inline Network_Old& operator=(const Network_Old& from) {
    CopyFrom(from);
    return *this;
  }

  static const Network_Old& default_instance();

  static inline const Network_Old* internal_default_instance() {
    return reinterpret_cast<const Network_Old*>(
               &_Network_Old_default_instance_);
  }

  void Swap(Network_Old* other);

  // implements Message ----------------------------------------------

  inline Network_Old* New() const PROTOBUF_FINAL { return New(NULL); }

  Network_Old* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Network_Old& from);
  void MergeFrom(const Network_Old& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Network_Old* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Network_Old_Types Types;
  static const Types CONNECTION_REQUEST_IP =
    Network_Old_Types_CONNECTION_REQUEST_IP;
  static const Types CONNECTION_REQUEST_STEAMID =
    Network_Old_Types_CONNECTION_REQUEST_STEAMID;
  static const Types CONNECTION_ACCEPTED =
    Network_Old_Types_CONNECTION_ACCEPTED;
  static const Types CONNECTION_END =
    Network_Old_Types_CONNECTION_END;
  static const Types DATA =
    Network_Old_Types_DATA;
  static inline bool Types_IsValid(int value) {
    return Network_Old_Types_IsValid(value);
  }
  static const Types Types_MIN =
    Network_Old_Types_Types_MIN;
  static const Types Types_MAX =
    Network_Old_Types_Types_MAX;
  static const int Types_ARRAYSIZE =
    Network_Old_Types_Types_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // bytes data = 5;
  void clear_data();
  static const int kDataFieldNumber = 5;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // uint64 connection_id = 2;
  void clear_connection_id();
  static const int kConnectionIdFieldNumber = 2;
  ::google::protobuf::uint64 connection_id() const;
  void set_connection_id(::google::protobuf::uint64 value);

  // .Network_Old.Types type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::Network_Old_Types type() const;
  void set_type(::Network_Old_Types value);

  // uint32 port = 4;
  void clear_port();
  static const int kPortFieldNumber = 4;
  ::google::protobuf::uint32 port() const;
  void set_port(::google::protobuf::uint32 value);

  // uint64 connection_id_from = 3;
  void clear_connection_id_from();
  static const int kConnectionIdFromFieldNumber = 3;
  ::google::protobuf::uint64 connection_id_from() const;
  void set_connection_id_from(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Network_Old)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::uint64 connection_id_;
  int type_;
  ::google::protobuf::uint32 port_;
  ::google::protobuf::uint64 connection_id_from_;
  mutable int _cached_size_;
  friend struct  protobuf_net_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Networking_Sockets : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:Networking_Sockets) */ {
 public:
  Networking_Sockets();
  virtual ~Networking_Sockets();

  Networking_Sockets(const Networking_Sockets& from);

  inline Networking_Sockets& operator=(const Networking_Sockets& from) {
    CopyFrom(from);
    return *this;
  }

  static const Networking_Sockets& default_instance();

  static inline const Networking_Sockets* internal_default_instance() {
    return reinterpret_cast<const Networking_Sockets*>(
               &_Networking_Sockets_default_instance_);
  }

  void Swap(Networking_Sockets* other);

  // implements Message ----------------------------------------------

  inline Networking_Sockets* New() const PROTOBUF_FINAL { return New(NULL); }

  Networking_Sockets* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Networking_Sockets& from);
  void MergeFrom(const Networking_Sockets& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Networking_Sockets* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Networking_Sockets_Types Types;
  static const Types CONNECTION_REQUEST =
    Networking_Sockets_Types_CONNECTION_REQUEST;
  static const Types CONNECTION_ACCEPTED =
    Networking_Sockets_Types_CONNECTION_ACCEPTED;
  static const Types CONNECTION_END =
    Networking_Sockets_Types_CONNECTION_END;
  static const Types DATA =
    Networking_Sockets_Types_DATA;
  static inline bool Types_IsValid(int value) {
    return Networking_Sockets_Types_IsValid(value);
  }
  static const Types Types_MIN =
    Networking_Sockets_Types_Types_MIN;
  static const Types Types_MAX =
    Networking_Sockets_Types_Types_MAX;
  static const int Types_ARRAYSIZE =
    Networking_Sockets_Types_Types_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // bytes data = 5;
  void clear_data();
  static const int kDataFieldNumber = 5;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // .Networking_Sockets.Types type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::Networking_Sockets_Types type() const;
  void set_type(::Networking_Sockets_Types value);

  // uint32 port = 2;
  void clear_port();
  static const int kPortFieldNumber = 2;
  ::google::protobuf::uint32 port() const;
  void set_port(::google::protobuf::uint32 value);

  // uint64 connection_id = 3;
  void clear_connection_id();
  static const int kConnectionIdFieldNumber = 3;
  ::google::protobuf::uint64 connection_id() const;
  void set_connection_id(::google::protobuf::uint64 value);

  // uint64 connection_id_from = 4;
  void clear_connection_id_from();
  static const int kConnectionIdFromFieldNumber = 4;
  ::google::protobuf::uint64 connection_id_from() const;
  void set_connection_id_from(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Networking_Sockets)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  int type_;
  ::google::protobuf::uint32 port_;
  ::google::protobuf::uint64 connection_id_;
  ::google::protobuf::uint64 connection_id_from_;
  mutable int _cached_size_;
  friend struct  protobuf_net_2eproto::TableStruct;
};
// -------------------------------------------------------------------


// -------------------------------------------------------------------

class Gameserver : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:Gameserver) */ {
 public:
  Gameserver();
  virtual ~Gameserver();

  Gameserver(const Gameserver& from);

  inline Gameserver& operator=(const Gameserver& from) {
    CopyFrom(from);
    return *this;
  }

  static const Gameserver& default_instance();

  static inline const Gameserver* internal_default_instance() {
    return reinterpret_cast<const Gameserver*>(
               &_Gameserver_default_instance_);
  }

  void Swap(Gameserver* other);

  // implements Message ----------------------------------------------

  inline Gameserver* New() const PROTOBUF_FINAL { return New(NULL); }

  Gameserver* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Gameserver& from);
  void MergeFrom(const Gameserver& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Gameserver* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, bytes> values = 12;
  int values_size() const;
  void clear_values();
  static const int kValuesFieldNumber = 12;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      values() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_values();

  // bytes game_description = 2;
  void clear_game_description();
  static const int kGameDescriptionFieldNumber = 2;
  const ::std::string& game_description() const;
  void set_game_description(const ::std::string& value);
  #if LANG_CXX11
  void set_game_description(::std::string&& value);
  #endif
  void set_game_description(const char* value);
  void set_game_description(const void* value, size_t size);
  ::std::string* mutable_game_description();
  ::std::string* release_game_description();
  void set_allocated_game_description(::std::string* game_description);

  // bytes mod_dir = 3;
  void clear_mod_dir();
  static const int kModDirFieldNumber = 3;
  const ::std::string& mod_dir() const;
  void set_mod_dir(const ::std::string& value);
  #if LANG_CXX11
  void set_mod_dir(::std::string&& value);
  #endif
  void set_mod_dir(const char* value);
  void set_mod_dir(const void* value, size_t size);
  ::std::string* mutable_mod_dir();
  ::std::string* release_mod_dir();
  void set_allocated_mod_dir(::std::string* mod_dir);

  // bytes server_name = 7;
  void clear_server_name();
  static const int kServerNameFieldNumber = 7;
  const ::std::string& server_name() const;
  void set_server_name(const ::std::string& value);
  #if LANG_CXX11
  void set_server_name(::std::string&& value);
  #endif
  void set_server_name(const char* value);
  void set_server_name(const void* value, size_t size);
  ::std::string* mutable_server_name();
  ::std::string* release_server_name();
  void set_allocated_server_name(::std::string* server_name);

  // bytes map_name = 8;
  void clear_map_name();
  static const int kMapNameFieldNumber = 8;
  const ::std::string& map_name() const;
  void set_map_name(const ::std::string& value);
  #if LANG_CXX11
  void set_map_name(::std::string&& value);
  #endif
  void set_map_name(const char* value);
  void set_map_name(const void* value, size_t size);
  ::std::string* mutable_map_name();
  ::std::string* release_map_name();
  void set_allocated_map_name(::std::string* map_name);

  // bytes spectator_server_name = 11;
  void clear_spectator_server_name();
  static const int kSpectatorServerNameFieldNumber = 11;
  const ::std::string& spectator_server_name() const;
  void set_spectator_server_name(const ::std::string& value);
  #if LANG_CXX11
  void set_spectator_server_name(::std::string&& value);
  #endif
  void set_spectator_server_name(const char* value);
  void set_spectator_server_name(const void* value, size_t size);
  ::std::string* mutable_spectator_server_name();
  ::std::string* release_spectator_server_name();
  void set_allocated_spectator_server_name(::std::string* spectator_server_name);

  // bytes tags = 13;
  void clear_tags();
  static const int kTagsFieldNumber = 13;
  const ::std::string& tags() const;
  void set_tags(const ::std::string& value);
  #if LANG_CXX11
  void set_tags(::std::string&& value);
  #endif
  void set_tags(const char* value);
  void set_tags(const void* value, size_t size);
  ::std::string* mutable_tags();
  ::std::string* release_tags();
  void set_allocated_tags(::std::string* tags);

  // bytes gamedata = 14;
  void clear_gamedata();
  static const int kGamedataFieldNumber = 14;
  const ::std::string& gamedata() const;
  void set_gamedata(const ::std::string& value);
  #if LANG_CXX11
  void set_gamedata(::std::string&& value);
  #endif
  void set_gamedata(const char* value);
  void set_gamedata(const void* value, size_t size);
  ::std::string* mutable_gamedata();
  ::std::string* release_gamedata();
  void set_allocated_gamedata(::std::string* gamedata);

  // bytes region = 15;
  void clear_region();
  static const int kRegionFieldNumber = 15;
  const ::std::string& region() const;
  void set_region(const ::std::string& value);
  #if LANG_CXX11
  void set_region(::std::string&& value);
  #endif
  void set_region(const char* value);
  void set_region(const void* value, size_t size);
  ::std::string* mutable_region();
  ::std::string* release_region();
  void set_allocated_region(::std::string* region);

  // bytes product = 16;
  void clear_product();
  static const int kProductFieldNumber = 16;
  const ::std::string& product() const;
  void set_product(const ::std::string& value);
  #if LANG_CXX11
  void set_product(::std::string&& value);
  #endif
  void set_product(const char* value);
  void set_product(const void* value, size_t size);
  ::std::string* mutable_product();
  ::std::string* release_product();
  void set_allocated_product(::std::string* product);

  // uint64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // uint32 max_player_count = 5;
  void clear_max_player_count();
  static const int kMaxPlayerCountFieldNumber = 5;
  ::google::protobuf::uint32 max_player_count() const;
  void set_max_player_count(::google::protobuf::uint32 value);

  // uint32 bot_player_count = 6;
  void clear_bot_player_count();
  static const int kBotPlayerCountFieldNumber = 6;
  ::google::protobuf::uint32 bot_player_count() const;
  void set_bot_player_count(::google::protobuf::uint32 value);

  // uint32 spectator_port = 10;
  void clear_spectator_port();
  static const int kSpectatorPortFieldNumber = 10;
  ::google::protobuf::uint32 spectator_port() const;
  void set_spectator_port(::google::protobuf::uint32 value);

  // bool dedicated_server = 4;
  void clear_dedicated_server();
  static const int kDedicatedServerFieldNumber = 4;
  bool dedicated_server() const;
  void set_dedicated_server(bool value);

  // bool password_protected = 9;
  void clear_password_protected();
  static const int kPasswordProtectedFieldNumber = 9;
  bool password_protected() const;
  void set_password_protected(bool value);

  // bool secure = 17;
  void clear_secure();
  static const int kSecureFieldNumber = 17;
  bool secure() const;
  void set_secure(bool value);

  // bool offline = 48;
  void clear_offline();
  static const int kOfflineFieldNumber = 48;
  bool offline() const;
  void set_offline(bool value);

  // uint32 num_players = 18;
  void clear_num_players();
  static const int kNumPlayersFieldNumber = 18;
  ::google::protobuf::uint32 num_players() const;
  void set_num_players(::google::protobuf::uint32 value);

  // uint32 version = 19;
  void clear_version();
  static const int kVersionFieldNumber = 19;
  ::google::protobuf::uint32 version() const;
  void set_version(::google::protobuf::uint32 value);

  // uint32 ip = 32;
  void clear_ip();
  static const int kIpFieldNumber = 32;
  ::google::protobuf::uint32 ip() const;
  void set_ip(::google::protobuf::uint32 value);

  // uint32 port = 33;
  void clear_port();
  static const int kPortFieldNumber = 33;
  ::google::protobuf::uint32 port() const;
  void set_port(::google::protobuf::uint32 value);

  // uint32 query_port = 34;
  void clear_query_port();
  static const int kQueryPortFieldNumber = 34;
  ::google::protobuf::uint32 query_port() const;
  void set_query_port(::google::protobuf::uint32 value);

  // uint32 appid = 35;
  void clear_appid();
  static const int kAppidFieldNumber = 35;
  ::google::protobuf::uint32 appid() const;
  void set_appid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Gameserver)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_BYTES,
      0 >
      Gameserver_ValuesEntry;
  ::google::protobuf::internal::MapFieldLite<
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_BYTES,
      0 > values_;
  ::google::protobuf::internal::ArenaStringPtr game_description_;
  ::google::protobuf::internal::ArenaStringPtr mod_dir_;
  ::google::protobuf::internal::ArenaStringPtr server_name_;
  ::google::protobuf::internal::ArenaStringPtr map_name_;
  ::google::protobuf::internal::ArenaStringPtr spectator_server_name_;
  ::google::protobuf::internal::ArenaStringPtr tags_;
  ::google::protobuf::internal::ArenaStringPtr gamedata_;
  ::google::protobuf::internal::ArenaStringPtr region_;
  ::google::protobuf::internal::ArenaStringPtr product_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint32 max_player_count_;
  ::google::protobuf::uint32 bot_player_count_;
  ::google::protobuf::uint32 spectator_port_;
  bool dedicated_server_;
  bool password_protected_;
  bool secure_;
  bool offline_;
  ::google::protobuf::uint32 num_players_;
  ::google::protobuf::uint32 version_;
  ::google::protobuf::uint32 ip_;
  ::google::protobuf::uint32 port_;
  ::google::protobuf::uint32 query_port_;
  ::google::protobuf::uint32 appid_;
  mutable int _cached_size_;
  friend struct  protobuf_net_2eproto::TableStruct;
};
// -------------------------------------------------------------------


// -------------------------------------------------------------------

class Friend : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:Friend) */ {
 public:
  Friend();
  virtual ~Friend();

  Friend(const Friend& from);

  inline Friend& operator=(const Friend& from) {
    CopyFrom(from);
    return *this;
  }

  static const Friend& default_instance();

  static inline const Friend* internal_default_instance() {
    return reinterpret_cast<const Friend*>(
               &_Friend_default_instance_);
  }

  void Swap(Friend* other);

  // implements Message ----------------------------------------------

  inline Friend* New() const PROTOBUF_FINAL { return New(NULL); }

  Friend* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Friend& from);
  void MergeFrom(const Friend& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Friend* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, bytes> rich_presence = 3;
  int rich_presence_size() const;
  void clear_rich_presence();
  static const int kRichPresenceFieldNumber = 3;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      rich_presence() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_rich_presence();

  // bytes name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // uint64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // uint64 lobby_id = 5;
  void clear_lobby_id();
  static const int kLobbyIdFieldNumber = 5;
  ::google::protobuf::uint64 lobby_id() const;
  void set_lobby_id(::google::protobuf::uint64 value);

  // uint32 appid = 4;
  void clear_appid();
  static const int kAppidFieldNumber = 4;
  ::google::protobuf::uint32 appid() const;
  void set_appid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Friend)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_BYTES,
      0 >
      Friend_RichPresenceEntry;
  ::google::protobuf::internal::MapFieldLite<
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_BYTES,
      0 > rich_presence_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint64 lobby_id_;
  ::google::protobuf::uint32 appid_;
  mutable int _cached_size_;
  friend struct  protobuf_net_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Auth_Ticket : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:Auth_Ticket) */ {
 public:
  Auth_Ticket();
  virtual ~Auth_Ticket();

  Auth_Ticket(const Auth_Ticket& from);

  inline Auth_Ticket& operator=(const Auth_Ticket& from) {
    CopyFrom(from);
    return *this;
  }

  static const Auth_Ticket& default_instance();

  static inline const Auth_Ticket* internal_default_instance() {
    return reinterpret_cast<const Auth_Ticket*>(
               &_Auth_Ticket_default_instance_);
  }

  void Swap(Auth_Ticket* other);

  // implements Message ----------------------------------------------

  inline Auth_Ticket* New() const PROTOBUF_FINAL { return New(NULL); }

  Auth_Ticket* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Auth_Ticket& from);
  void MergeFrom(const Auth_Ticket& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Auth_Ticket* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Auth_Ticket_Types Types;
  static const Types CANCEL =
    Auth_Ticket_Types_CANCEL;
  static inline bool Types_IsValid(int value) {
    return Auth_Ticket_Types_IsValid(value);
  }
  static const Types Types_MIN =
    Auth_Ticket_Types_Types_MIN;
  static const Types Types_MAX =
    Auth_Ticket_Types_Types_MAX;
  static const int Types_ARRAYSIZE =
    Auth_Ticket_Types_Types_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // uint32 number = 1;
  void clear_number();
  static const int kNumberFieldNumber = 1;
  ::google::protobuf::uint32 number() const;
  void set_number(::google::protobuf::uint32 value);

  // .Auth_Ticket.Types type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::Auth_Ticket_Types type() const;
  void set_type(::Auth_Ticket_Types value);

  // @@protoc_insertion_point(class_scope:Auth_Ticket)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::uint32 number_;
  int type_;
  mutable int _cached_size_;
  friend struct  protobuf_net_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Friend_Messages : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:Friend_Messages) */ {
 public:
  Friend_Messages();
  virtual ~Friend_Messages();

  Friend_Messages(const Friend_Messages& from);

  inline Friend_Messages& operator=(const Friend_Messages& from) {
    CopyFrom(from);
    return *this;
  }

  static const Friend_Messages& default_instance();

  enum InviteDataCase {
    kLobbyId = 2,
    kConnectStr = 3,
    INVITE_DATA_NOT_SET = 0,
  };

  static inline const Friend_Messages* internal_default_instance() {
    return reinterpret_cast<const Friend_Messages*>(
               &_Friend_Messages_default_instance_);
  }

  void Swap(Friend_Messages* other);

  // implements Message ----------------------------------------------

  inline Friend_Messages* New() const PROTOBUF_FINAL { return New(NULL); }

  Friend_Messages* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Friend_Messages& from);
  void MergeFrom(const Friend_Messages& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Friend_Messages* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Friend_Messages_Types Types;
  static const Types LOBBY_INVITE =
    Friend_Messages_Types_LOBBY_INVITE;
  static const Types GAME_INVITE =
    Friend_Messages_Types_GAME_INVITE;
  static inline bool Types_IsValid(int value) {
    return Friend_Messages_Types_IsValid(value);
  }
  static const Types Types_MIN =
    Friend_Messages_Types_Types_MIN;
  static const Types Types_MAX =
    Friend_Messages_Types_Types_MAX;
  static const int Types_ARRAYSIZE =
    Friend_Messages_Types_Types_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // .Friend_Messages.Types type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::Friend_Messages_Types type() const;
  void set_type(::Friend_Messages_Types value);

  // uint64 lobby_id = 2;
  private:
  bool has_lobby_id() const;
  public:
  void clear_lobby_id();
  static const int kLobbyIdFieldNumber = 2;
  ::google::protobuf::uint64 lobby_id() const;
  void set_lobby_id(::google::protobuf::uint64 value);

  // bytes connect_str = 3;
  private:
  bool has_connect_str() const;
  public:
  void clear_connect_str();
  static const int kConnectStrFieldNumber = 3;
  const ::std::string& connect_str() const;
  void set_connect_str(const ::std::string& value);
  #if LANG_CXX11
  void set_connect_str(::std::string&& value);
  #endif
  void set_connect_str(const char* value);
  void set_connect_str(const void* value, size_t size);
  ::std::string* mutable_connect_str();
  ::std::string* release_connect_str();
  void set_allocated_connect_str(::std::string* connect_str);

  InviteDataCase invite_data_case() const;
  // @@protoc_insertion_point(class_scope:Friend_Messages)
 private:
  void set_has_lobby_id();
  void set_has_connect_str();

  inline bool has_invite_data() const;
  void clear_invite_data();
  inline void clear_has_invite_data();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  int type_;
  union InviteDataUnion {
    InviteDataUnion() {}
    ::google::protobuf::uint64 lobby_id_;
    ::google::protobuf::internal::ArenaStringPtr connect_str_;
  } invite_data_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct  protobuf_net_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Common_Message : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:Common_Message) */ {
 public:
  Common_Message();
  virtual ~Common_Message();

  Common_Message(const Common_Message& from);

  inline Common_Message& operator=(const Common_Message& from) {
    CopyFrom(from);
    return *this;
  }

  static const Common_Message& default_instance();

  enum MessagesCase {
    kAnnounce = 3,
    kLowLevel = 4,
    kLobby = 5,
    kLobbyMessages = 6,
    kNetwork = 7,
    kGameserver = 8,
    kFriend = 9,
    kAuthTicket = 10,
    kFriendMessages = 11,
    kNetworkOld = 12,
    kNetworkingSockets = 13,
    MESSAGES_NOT_SET = 0,
  };

  static inline const Common_Message* internal_default_instance() {
    return reinterpret_cast<const Common_Message*>(
               &_Common_Message_default_instance_);
  }

  void Swap(Common_Message* other);

  // implements Message ----------------------------------------------

  inline Common_Message* New() const PROTOBUF_FINAL { return New(NULL); }

  Common_Message* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Common_Message& from);
  void MergeFrom(const Common_Message& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Common_Message* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 source_id = 1;
  void clear_source_id();
  static const int kSourceIdFieldNumber = 1;
  ::google::protobuf::uint64 source_id() const;
  void set_source_id(::google::protobuf::uint64 value);

  // uint64 dest_id = 2;
  void clear_dest_id();
  static const int kDestIdFieldNumber = 2;
  ::google::protobuf::uint64 dest_id() const;
  void set_dest_id(::google::protobuf::uint64 value);

  // uint32 source_ip = 128;
  void clear_source_ip();
  static const int kSourceIpFieldNumber = 128;
  ::google::protobuf::uint32 source_ip() const;
  void set_source_ip(::google::protobuf::uint32 value);

  // uint32 source_port = 129;
  void clear_source_port();
  static const int kSourcePortFieldNumber = 129;
  ::google::protobuf::uint32 source_port() const;
  void set_source_port(::google::protobuf::uint32 value);

  // .Announce announce = 3;
  bool has_announce() const;
  void clear_announce();
  static const int kAnnounceFieldNumber = 3;
  const ::Announce& announce() const;
  ::Announce* mutable_announce();
  ::Announce* release_announce();
  void set_allocated_announce(::Announce* announce);

  // .Low_Level low_level = 4;
  bool has_low_level() const;
  void clear_low_level();
  static const int kLowLevelFieldNumber = 4;
  const ::Low_Level& low_level() const;
  ::Low_Level* mutable_low_level();
  ::Low_Level* release_low_level();
  void set_allocated_low_level(::Low_Level* low_level);

  // .Lobby lobby = 5;
  bool has_lobby() const;
  void clear_lobby();
  static const int kLobbyFieldNumber = 5;
  const ::Lobby& lobby() const;
  ::Lobby* mutable_lobby();
  ::Lobby* release_lobby();
  void set_allocated_lobby(::Lobby* lobby);

  // .Lobby_Messages lobby_messages = 6;
  bool has_lobby_messages() const;
  void clear_lobby_messages();
  static const int kLobbyMessagesFieldNumber = 6;
  const ::Lobby_Messages& lobby_messages() const;
  ::Lobby_Messages* mutable_lobby_messages();
  ::Lobby_Messages* release_lobby_messages();
  void set_allocated_lobby_messages(::Lobby_Messages* lobby_messages);

  // .Network network = 7;
  bool has_network() const;
  void clear_network();
  static const int kNetworkFieldNumber = 7;
  const ::Network& network() const;
  ::Network* mutable_network();
  ::Network* release_network();
  void set_allocated_network(::Network* network);

  // .Gameserver gameserver = 8;
  bool has_gameserver() const;
  void clear_gameserver();
  static const int kGameserverFieldNumber = 8;
  const ::Gameserver& gameserver() const;
  ::Gameserver* mutable_gameserver();
  ::Gameserver* release_gameserver();
  void set_allocated_gameserver(::Gameserver* gameserver);

  // .Friend friend = 9;
  bool has_friend_() const;
  void clear_friend_();
  static const int kFriendFieldNumber = 9;
  const ::Friend& friend_() const;
  ::Friend* mutable_friend_();
  ::Friend* release_friend_();
  void set_allocated_friend_(::Friend* friend_);

  // .Auth_Ticket auth_ticket = 10;
  bool has_auth_ticket() const;
  void clear_auth_ticket();
  static const int kAuthTicketFieldNumber = 10;
  const ::Auth_Ticket& auth_ticket() const;
  ::Auth_Ticket* mutable_auth_ticket();
  ::Auth_Ticket* release_auth_ticket();
  void set_allocated_auth_ticket(::Auth_Ticket* auth_ticket);

  // .Friend_Messages friend_messages = 11;
  bool has_friend_messages() const;
  void clear_friend_messages();
  static const int kFriendMessagesFieldNumber = 11;
  const ::Friend_Messages& friend_messages() const;
  ::Friend_Messages* mutable_friend_messages();
  ::Friend_Messages* release_friend_messages();
  void set_allocated_friend_messages(::Friend_Messages* friend_messages);

  // .Network_Old network_old = 12;
  bool has_network_old() const;
  void clear_network_old();
  static const int kNetworkOldFieldNumber = 12;
  const ::Network_Old& network_old() const;
  ::Network_Old* mutable_network_old();
  ::Network_Old* release_network_old();
  void set_allocated_network_old(::Network_Old* network_old);

  // .Networking_Sockets networking_sockets = 13;
  bool has_networking_sockets() const;
  void clear_networking_sockets();
  static const int kNetworkingSocketsFieldNumber = 13;
  const ::Networking_Sockets& networking_sockets() const;
  ::Networking_Sockets* mutable_networking_sockets();
  ::Networking_Sockets* release_networking_sockets();
  void set_allocated_networking_sockets(::Networking_Sockets* networking_sockets);

  MessagesCase messages_case() const;
  // @@protoc_insertion_point(class_scope:Common_Message)
 private:
  void set_has_announce();
  void set_has_low_level();
  void set_has_lobby();
  void set_has_lobby_messages();
  void set_has_network();
  void set_has_gameserver();
  void set_has_friend_();
  void set_has_auth_ticket();
  void set_has_friend_messages();
  void set_has_network_old();
  void set_has_networking_sockets();

  inline bool has_messages() const;
  void clear_messages();
  inline void clear_has_messages();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::uint64 source_id_;
  ::google::protobuf::uint64 dest_id_;
  ::google::protobuf::uint32 source_ip_;
  ::google::protobuf::uint32 source_port_;
  union MessagesUnion {
    MessagesUnion() {}
    ::Announce* announce_;
    ::Low_Level* low_level_;
    ::Lobby* lobby_;
    ::Lobby_Messages* lobby_messages_;
    ::Network* network_;
    ::Gameserver* gameserver_;
    ::Friend* friend__;
    ::Auth_Ticket* auth_ticket_;
    ::Friend_Messages* friend_messages_;
    ::Network_Old* network_old_;
    ::Networking_Sockets* networking_sockets_;
  } messages_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct  protobuf_net_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Announce_Other_Peers

// uint64 id = 1;
inline void Announce_Other_Peers::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Announce_Other_Peers::id() const {
  // @@protoc_insertion_point(field_get:Announce.Other_Peers.id)
  return id_;
}
inline void Announce_Other_Peers::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:Announce.Other_Peers.id)
}

// uint32 ip = 2;
inline void Announce_Other_Peers::clear_ip() {
  ip_ = 0u;
}
inline ::google::protobuf::uint32 Announce_Other_Peers::ip() const {
  // @@protoc_insertion_point(field_get:Announce.Other_Peers.ip)
  return ip_;
}
inline void Announce_Other_Peers::set_ip(::google::protobuf::uint32 value) {
  
  ip_ = value;
  // @@protoc_insertion_point(field_set:Announce.Other_Peers.ip)
}

// uint32 udp_port = 3;
inline void Announce_Other_Peers::clear_udp_port() {
  udp_port_ = 0u;
}
inline ::google::protobuf::uint32 Announce_Other_Peers::udp_port() const {
  // @@protoc_insertion_point(field_get:Announce.Other_Peers.udp_port)
  return udp_port_;
}
inline void Announce_Other_Peers::set_udp_port(::google::protobuf::uint32 value) {
  
  udp_port_ = value;
  // @@protoc_insertion_point(field_set:Announce.Other_Peers.udp_port)
}

// uint32 appid = 4;
inline void Announce_Other_Peers::clear_appid() {
  appid_ = 0u;
}
inline ::google::protobuf::uint32 Announce_Other_Peers::appid() const {
  // @@protoc_insertion_point(field_get:Announce.Other_Peers.appid)
  return appid_;
}
inline void Announce_Other_Peers::set_appid(::google::protobuf::uint32 value) {
  
  appid_ = value;
  // @@protoc_insertion_point(field_set:Announce.Other_Peers.appid)
}

// -------------------------------------------------------------------

// Announce

// .Announce.Types type = 1;
inline void Announce::clear_type() {
  type_ = 0;
}
inline ::Announce_Types Announce::type() const {
  // @@protoc_insertion_point(field_get:Announce.type)
  return static_cast< ::Announce_Types >(type_);
}
inline void Announce::set_type(::Announce_Types value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:Announce.type)
}

// repeated uint64 ids = 2;
inline int Announce::ids_size() const {
  return ids_.size();
}
inline void Announce::clear_ids() {
  ids_.Clear();
}
inline ::google::protobuf::uint64 Announce::ids(int index) const {
  // @@protoc_insertion_point(field_get:Announce.ids)
  return ids_.Get(index);
}
inline void Announce::set_ids(int index, ::google::protobuf::uint64 value) {
  ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:Announce.ids)
}
inline void Announce::add_ids(::google::protobuf::uint64 value) {
  ids_.Add(value);
  // @@protoc_insertion_point(field_add:Announce.ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
Announce::ids() const {
  // @@protoc_insertion_point(field_list:Announce.ids)
  return ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
Announce::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:Announce.ids)
  return &ids_;
}

// uint32 tcp_port = 3;
inline void Announce::clear_tcp_port() {
  tcp_port_ = 0u;
}
inline ::google::protobuf::uint32 Announce::tcp_port() const {
  // @@protoc_insertion_point(field_get:Announce.tcp_port)
  return tcp_port_;
}
inline void Announce::set_tcp_port(::google::protobuf::uint32 value) {
  
  tcp_port_ = value;
  // @@protoc_insertion_point(field_set:Announce.tcp_port)
}

// repeated .Announce.Other_Peers peers = 4;
inline int Announce::peers_size() const {
  return peers_.size();
}
inline void Announce::clear_peers() {
  peers_.Clear();
}
inline const ::Announce_Other_Peers& Announce::peers(int index) const {
  // @@protoc_insertion_point(field_get:Announce.peers)
  return peers_.Get(index);
}
inline ::Announce_Other_Peers* Announce::mutable_peers(int index) {
  // @@protoc_insertion_point(field_mutable:Announce.peers)
  return peers_.Mutable(index);
}
inline ::Announce_Other_Peers* Announce::add_peers() {
  // @@protoc_insertion_point(field_add:Announce.peers)
  return peers_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Announce_Other_Peers >*
Announce::mutable_peers() {
  // @@protoc_insertion_point(field_mutable_list:Announce.peers)
  return &peers_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Announce_Other_Peers >&
Announce::peers() const {
  // @@protoc_insertion_point(field_list:Announce.peers)
  return peers_;
}

// uint32 appid = 5;
inline void Announce::clear_appid() {
  appid_ = 0u;
}
inline ::google::protobuf::uint32 Announce::appid() const {
  // @@protoc_insertion_point(field_get:Announce.appid)
  return appid_;
}
inline void Announce::set_appid(::google::protobuf::uint32 value) {
  
  appid_ = value;
  // @@protoc_insertion_point(field_set:Announce.appid)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Lobby_Member

// uint64 id = 1;
inline void Lobby_Member::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Lobby_Member::id() const {
  // @@protoc_insertion_point(field_get:Lobby.Member.id)
  return id_;
}
inline void Lobby_Member::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:Lobby.Member.id)
}

// map<string, bytes> values = 2;
inline int Lobby_Member::values_size() const {
  return values_.size();
}
inline void Lobby_Member::clear_values() {
  values_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
Lobby_Member::values() const {
  // @@protoc_insertion_point(field_map:Lobby.Member.values)
  return values_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
Lobby_Member::mutable_values() {
  // @@protoc_insertion_point(field_mutable_map:Lobby.Member.values)
  return values_.MutableMap();
}

// -------------------------------------------------------------------

// Lobby_Gameserver

// uint64 id = 1;
inline void Lobby_Gameserver::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Lobby_Gameserver::id() const {
  // @@protoc_insertion_point(field_get:Lobby.Gameserver.id)
  return id_;
}
inline void Lobby_Gameserver::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:Lobby.Gameserver.id)
}

// uint32 ip = 2;
inline void Lobby_Gameserver::clear_ip() {
  ip_ = 0u;
}
inline ::google::protobuf::uint32 Lobby_Gameserver::ip() const {
  // @@protoc_insertion_point(field_get:Lobby.Gameserver.ip)
  return ip_;
}
inline void Lobby_Gameserver::set_ip(::google::protobuf::uint32 value) {
  
  ip_ = value;
  // @@protoc_insertion_point(field_set:Lobby.Gameserver.ip)
}

// uint32 port = 3;
inline void Lobby_Gameserver::clear_port() {
  port_ = 0u;
}
inline ::google::protobuf::uint32 Lobby_Gameserver::port() const {
  // @@protoc_insertion_point(field_get:Lobby.Gameserver.port)
  return port_;
}
inline void Lobby_Gameserver::set_port(::google::protobuf::uint32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:Lobby.Gameserver.port)
}

// -------------------------------------------------------------------

// Lobby

// uint64 room_id = 1;
inline void Lobby::clear_room_id() {
  room_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Lobby::room_id() const {
  // @@protoc_insertion_point(field_get:Lobby.room_id)
  return room_id_;
}
inline void Lobby::set_room_id(::google::protobuf::uint64 value) {
  
  room_id_ = value;
  // @@protoc_insertion_point(field_set:Lobby.room_id)
}

// uint64 owner = 2;
inline void Lobby::clear_owner() {
  owner_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Lobby::owner() const {
  // @@protoc_insertion_point(field_get:Lobby.owner)
  return owner_;
}
inline void Lobby::set_owner(::google::protobuf::uint64 value) {
  
  owner_ = value;
  // @@protoc_insertion_point(field_set:Lobby.owner)
}

// map<string, bytes> values = 3;
inline int Lobby::values_size() const {
  return values_.size();
}
inline void Lobby::clear_values() {
  values_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
Lobby::values() const {
  // @@protoc_insertion_point(field_map:Lobby.values)
  return values_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
Lobby::mutable_values() {
  // @@protoc_insertion_point(field_mutable_map:Lobby.values)
  return values_.MutableMap();
}

// repeated .Lobby.Member members = 4;
inline int Lobby::members_size() const {
  return members_.size();
}
inline void Lobby::clear_members() {
  members_.Clear();
}
inline const ::Lobby_Member& Lobby::members(int index) const {
  // @@protoc_insertion_point(field_get:Lobby.members)
  return members_.Get(index);
}
inline ::Lobby_Member* Lobby::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:Lobby.members)
  return members_.Mutable(index);
}
inline ::Lobby_Member* Lobby::add_members() {
  // @@protoc_insertion_point(field_add:Lobby.members)
  return members_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Lobby_Member >*
Lobby::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:Lobby.members)
  return &members_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Lobby_Member >&
Lobby::members() const {
  // @@protoc_insertion_point(field_list:Lobby.members)
  return members_;
}

// .Lobby.Gameserver gameserver = 5;
inline bool Lobby::has_gameserver() const {
  return this != internal_default_instance() && gameserver_ != NULL;
}
inline void Lobby::clear_gameserver() {
  if (GetArenaNoVirtual() == NULL && gameserver_ != NULL) delete gameserver_;
  gameserver_ = NULL;
}
inline const ::Lobby_Gameserver& Lobby::gameserver() const {
  // @@protoc_insertion_point(field_get:Lobby.gameserver)
  return gameserver_ != NULL ? *gameserver_
                         : *::Lobby_Gameserver::internal_default_instance();
}
inline ::Lobby_Gameserver* Lobby::mutable_gameserver() {
  
  if (gameserver_ == NULL) {
    gameserver_ = new ::Lobby_Gameserver;
  }
  // @@protoc_insertion_point(field_mutable:Lobby.gameserver)
  return gameserver_;
}
inline ::Lobby_Gameserver* Lobby::release_gameserver() {
  // @@protoc_insertion_point(field_release:Lobby.gameserver)
  
  ::Lobby_Gameserver* temp = gameserver_;
  gameserver_ = NULL;
  return temp;
}
inline void Lobby::set_allocated_gameserver(::Lobby_Gameserver* gameserver) {
  delete gameserver_;
  gameserver_ = gameserver;
  if (gameserver) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Lobby.gameserver)
}

// uint32 member_limit = 6;
inline void Lobby::clear_member_limit() {
  member_limit_ = 0u;
}
inline ::google::protobuf::uint32 Lobby::member_limit() const {
  // @@protoc_insertion_point(field_get:Lobby.member_limit)
  return member_limit_;
}
inline void Lobby::set_member_limit(::google::protobuf::uint32 value) {
  
  member_limit_ = value;
  // @@protoc_insertion_point(field_set:Lobby.member_limit)
}

// uint32 type = 7;
inline void Lobby::clear_type() {
  type_ = 0u;
}
inline ::google::protobuf::uint32 Lobby::type() const {
  // @@protoc_insertion_point(field_get:Lobby.type)
  return type_;
}
inline void Lobby::set_type(::google::protobuf::uint32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:Lobby.type)
}

// bool joinable = 8;
inline void Lobby::clear_joinable() {
  joinable_ = false;
}
inline bool Lobby::joinable() const {
  // @@protoc_insertion_point(field_get:Lobby.joinable)
  return joinable_;
}
inline void Lobby::set_joinable(bool value) {
  
  joinable_ = value;
  // @@protoc_insertion_point(field_set:Lobby.joinable)
}

// uint32 appid = 9;
inline void Lobby::clear_appid() {
  appid_ = 0u;
}
inline ::google::protobuf::uint32 Lobby::appid() const {
  // @@protoc_insertion_point(field_get:Lobby.appid)
  return appid_;
}
inline void Lobby::set_appid(::google::protobuf::uint32 value) {
  
  appid_ = value;
  // @@protoc_insertion_point(field_set:Lobby.appid)
}

// bool deleted = 32;
inline void Lobby::clear_deleted() {
  deleted_ = false;
}
inline bool Lobby::deleted() const {
  // @@protoc_insertion_point(field_get:Lobby.deleted)
  return deleted_;
}
inline void Lobby::set_deleted(bool value) {
  
  deleted_ = value;
  // @@protoc_insertion_point(field_set:Lobby.deleted)
}

// uint64 time_deleted = 33;
inline void Lobby::clear_time_deleted() {
  time_deleted_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Lobby::time_deleted() const {
  // @@protoc_insertion_point(field_get:Lobby.time_deleted)
  return time_deleted_;
}
inline void Lobby::set_time_deleted(::google::protobuf::uint64 value) {
  
  time_deleted_ = value;
  // @@protoc_insertion_point(field_set:Lobby.time_deleted)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Lobby_Messages

// uint64 id = 1;
inline void Lobby_Messages::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Lobby_Messages::id() const {
  // @@protoc_insertion_point(field_get:Lobby_Messages.id)
  return id_;
}
inline void Lobby_Messages::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:Lobby_Messages.id)
}

// .Lobby_Messages.Types type = 2;
inline void Lobby_Messages::clear_type() {
  type_ = 0;
}
inline ::Lobby_Messages_Types Lobby_Messages::type() const {
  // @@protoc_insertion_point(field_get:Lobby_Messages.type)
  return static_cast< ::Lobby_Messages_Types >(type_);
}
inline void Lobby_Messages::set_type(::Lobby_Messages_Types value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:Lobby_Messages.type)
}

// uint64 idata = 3;
inline void Lobby_Messages::clear_idata() {
  idata_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Lobby_Messages::idata() const {
  // @@protoc_insertion_point(field_get:Lobby_Messages.idata)
  return idata_;
}
inline void Lobby_Messages::set_idata(::google::protobuf::uint64 value) {
  
  idata_ = value;
  // @@protoc_insertion_point(field_set:Lobby_Messages.idata)
}

// bytes bdata = 4;
inline void Lobby_Messages::clear_bdata() {
  bdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Lobby_Messages::bdata() const {
  // @@protoc_insertion_point(field_get:Lobby_Messages.bdata)
  return bdata_.GetNoArena();
}
inline void Lobby_Messages::set_bdata(const ::std::string& value) {
  
  bdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Lobby_Messages.bdata)
}
#if LANG_CXX11
inline void Lobby_Messages::set_bdata(::std::string&& value) {
  
  bdata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Lobby_Messages.bdata)
}
#endif
inline void Lobby_Messages::set_bdata(const char* value) {
  
  bdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Lobby_Messages.bdata)
}
inline void Lobby_Messages::set_bdata(const void* value, size_t size) {
  
  bdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Lobby_Messages.bdata)
}
inline ::std::string* Lobby_Messages::mutable_bdata() {
  
  // @@protoc_insertion_point(field_mutable:Lobby_Messages.bdata)
  return bdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Lobby_Messages::release_bdata() {
  // @@protoc_insertion_point(field_release:Lobby_Messages.bdata)
  
  return bdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Lobby_Messages::set_allocated_bdata(::std::string* bdata) {
  if (bdata != NULL) {
    
  } else {
    
  }
  bdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bdata);
  // @@protoc_insertion_point(field_set_allocated:Lobby_Messages.bdata)
}

// map<string, bytes> map = 5;
inline int Lobby_Messages::map_size() const {
  return map_.size();
}
inline void Lobby_Messages::clear_map() {
  map_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
Lobby_Messages::map() const {
  // @@protoc_insertion_point(field_map:Lobby_Messages.map)
  return map_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
Lobby_Messages::mutable_map() {
  // @@protoc_insertion_point(field_mutable_map:Lobby_Messages.map)
  return map_.MutableMap();
}

// -------------------------------------------------------------------

// Low_Level

// .Low_Level.Types type = 1;
inline void Low_Level::clear_type() {
  type_ = 0;
}
inline ::Low_Level_Types Low_Level::type() const {
  // @@protoc_insertion_point(field_get:Low_Level.type)
  return static_cast< ::Low_Level_Types >(type_);
}
inline void Low_Level::set_type(::Low_Level_Types value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:Low_Level.type)
}

// -------------------------------------------------------------------

// Network

// uint32 channel = 1;
inline void Network::clear_channel() {
  channel_ = 0u;
}
inline ::google::protobuf::uint32 Network::channel() const {
  // @@protoc_insertion_point(field_get:Network.channel)
  return channel_;
}
inline void Network::set_channel(::google::protobuf::uint32 value) {
  
  channel_ = value;
  // @@protoc_insertion_point(field_set:Network.channel)
}

// bytes data = 2;
inline void Network::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Network::data() const {
  // @@protoc_insertion_point(field_get:Network.data)
  return data_.GetNoArena();
}
inline void Network::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Network.data)
}
#if LANG_CXX11
inline void Network::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Network.data)
}
#endif
inline void Network::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Network.data)
}
inline void Network::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Network.data)
}
inline ::std::string* Network::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:Network.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Network::release_data() {
  // @@protoc_insertion_point(field_release:Network.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Network::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:Network.data)
}

// .Network.Types type = 3;
inline void Network::clear_type() {
  type_ = 0;
}
inline ::Network_Types Network::type() const {
  // @@protoc_insertion_point(field_get:Network.type)
  return static_cast< ::Network_Types >(type_);
}
inline void Network::set_type(::Network_Types value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:Network.type)
}

// bool processed = 128;
inline void Network::clear_processed() {
  processed_ = false;
}
inline bool Network::processed() const {
  // @@protoc_insertion_point(field_get:Network.processed)
  return processed_;
}
inline void Network::set_processed(bool value) {
  
  processed_ = value;
  // @@protoc_insertion_point(field_set:Network.processed)
}

// uint64 time_processed = 129;
inline void Network::clear_time_processed() {
  time_processed_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Network::time_processed() const {
  // @@protoc_insertion_point(field_get:Network.time_processed)
  return time_processed_;
}
inline void Network::set_time_processed(::google::protobuf::uint64 value) {
  
  time_processed_ = value;
  // @@protoc_insertion_point(field_set:Network.time_processed)
}

// -------------------------------------------------------------------

// Network_Old

// .Network_Old.Types type = 1;
inline void Network_Old::clear_type() {
  type_ = 0;
}
inline ::Network_Old_Types Network_Old::type() const {
  // @@protoc_insertion_point(field_get:Network_Old.type)
  return static_cast< ::Network_Old_Types >(type_);
}
inline void Network_Old::set_type(::Network_Old_Types value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:Network_Old.type)
}

// uint64 connection_id = 2;
inline void Network_Old::clear_connection_id() {
  connection_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Network_Old::connection_id() const {
  // @@protoc_insertion_point(field_get:Network_Old.connection_id)
  return connection_id_;
}
inline void Network_Old::set_connection_id(::google::protobuf::uint64 value) {
  
  connection_id_ = value;
  // @@protoc_insertion_point(field_set:Network_Old.connection_id)
}

// uint64 connection_id_from = 3;
inline void Network_Old::clear_connection_id_from() {
  connection_id_from_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Network_Old::connection_id_from() const {
  // @@protoc_insertion_point(field_get:Network_Old.connection_id_from)
  return connection_id_from_;
}
inline void Network_Old::set_connection_id_from(::google::protobuf::uint64 value) {
  
  connection_id_from_ = value;
  // @@protoc_insertion_point(field_set:Network_Old.connection_id_from)
}

// uint32 port = 4;
inline void Network_Old::clear_port() {
  port_ = 0u;
}
inline ::google::protobuf::uint32 Network_Old::port() const {
  // @@protoc_insertion_point(field_get:Network_Old.port)
  return port_;
}
inline void Network_Old::set_port(::google::protobuf::uint32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:Network_Old.port)
}

// bytes data = 5;
inline void Network_Old::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Network_Old::data() const {
  // @@protoc_insertion_point(field_get:Network_Old.data)
  return data_.GetNoArena();
}
inline void Network_Old::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Network_Old.data)
}
#if LANG_CXX11
inline void Network_Old::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Network_Old.data)
}
#endif
inline void Network_Old::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Network_Old.data)
}
inline void Network_Old::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Network_Old.data)
}
inline ::std::string* Network_Old::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:Network_Old.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Network_Old::release_data() {
  // @@protoc_insertion_point(field_release:Network_Old.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Network_Old::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:Network_Old.data)
}

// -------------------------------------------------------------------

// Networking_Sockets

// .Networking_Sockets.Types type = 1;
inline void Networking_Sockets::clear_type() {
  type_ = 0;
}
inline ::Networking_Sockets_Types Networking_Sockets::type() const {
  // @@protoc_insertion_point(field_get:Networking_Sockets.type)
  return static_cast< ::Networking_Sockets_Types >(type_);
}
inline void Networking_Sockets::set_type(::Networking_Sockets_Types value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:Networking_Sockets.type)
}

// uint32 port = 2;
inline void Networking_Sockets::clear_port() {
  port_ = 0u;
}
inline ::google::protobuf::uint32 Networking_Sockets::port() const {
  // @@protoc_insertion_point(field_get:Networking_Sockets.port)
  return port_;
}
inline void Networking_Sockets::set_port(::google::protobuf::uint32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:Networking_Sockets.port)
}

// uint64 connection_id = 3;
inline void Networking_Sockets::clear_connection_id() {
  connection_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Networking_Sockets::connection_id() const {
  // @@protoc_insertion_point(field_get:Networking_Sockets.connection_id)
  return connection_id_;
}
inline void Networking_Sockets::set_connection_id(::google::protobuf::uint64 value) {
  
  connection_id_ = value;
  // @@protoc_insertion_point(field_set:Networking_Sockets.connection_id)
}

// uint64 connection_id_from = 4;
inline void Networking_Sockets::clear_connection_id_from() {
  connection_id_from_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Networking_Sockets::connection_id_from() const {
  // @@protoc_insertion_point(field_get:Networking_Sockets.connection_id_from)
  return connection_id_from_;
}
inline void Networking_Sockets::set_connection_id_from(::google::protobuf::uint64 value) {
  
  connection_id_from_ = value;
  // @@protoc_insertion_point(field_set:Networking_Sockets.connection_id_from)
}

// bytes data = 5;
inline void Networking_Sockets::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Networking_Sockets::data() const {
  // @@protoc_insertion_point(field_get:Networking_Sockets.data)
  return data_.GetNoArena();
}
inline void Networking_Sockets::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Networking_Sockets.data)
}
#if LANG_CXX11
inline void Networking_Sockets::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Networking_Sockets.data)
}
#endif
inline void Networking_Sockets::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Networking_Sockets.data)
}
inline void Networking_Sockets::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Networking_Sockets.data)
}
inline ::std::string* Networking_Sockets::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:Networking_Sockets.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Networking_Sockets::release_data() {
  // @@protoc_insertion_point(field_release:Networking_Sockets.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Networking_Sockets::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:Networking_Sockets.data)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Gameserver

// uint64 id = 1;
inline void Gameserver::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Gameserver::id() const {
  // @@protoc_insertion_point(field_get:Gameserver.id)
  return id_;
}
inline void Gameserver::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:Gameserver.id)
}

// bytes game_description = 2;
inline void Gameserver::clear_game_description() {
  game_description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Gameserver::game_description() const {
  // @@protoc_insertion_point(field_get:Gameserver.game_description)
  return game_description_.GetNoArena();
}
inline void Gameserver::set_game_description(const ::std::string& value) {
  
  game_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Gameserver.game_description)
}
#if LANG_CXX11
inline void Gameserver::set_game_description(::std::string&& value) {
  
  game_description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Gameserver.game_description)
}
#endif
inline void Gameserver::set_game_description(const char* value) {
  
  game_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Gameserver.game_description)
}
inline void Gameserver::set_game_description(const void* value, size_t size) {
  
  game_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Gameserver.game_description)
}
inline ::std::string* Gameserver::mutable_game_description() {
  
  // @@protoc_insertion_point(field_mutable:Gameserver.game_description)
  return game_description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Gameserver::release_game_description() {
  // @@protoc_insertion_point(field_release:Gameserver.game_description)
  
  return game_description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Gameserver::set_allocated_game_description(::std::string* game_description) {
  if (game_description != NULL) {
    
  } else {
    
  }
  game_description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), game_description);
  // @@protoc_insertion_point(field_set_allocated:Gameserver.game_description)
}

// bytes mod_dir = 3;
inline void Gameserver::clear_mod_dir() {
  mod_dir_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Gameserver::mod_dir() const {
  // @@protoc_insertion_point(field_get:Gameserver.mod_dir)
  return mod_dir_.GetNoArena();
}
inline void Gameserver::set_mod_dir(const ::std::string& value) {
  
  mod_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Gameserver.mod_dir)
}
#if LANG_CXX11
inline void Gameserver::set_mod_dir(::std::string&& value) {
  
  mod_dir_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Gameserver.mod_dir)
}
#endif
inline void Gameserver::set_mod_dir(const char* value) {
  
  mod_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Gameserver.mod_dir)
}
inline void Gameserver::set_mod_dir(const void* value, size_t size) {
  
  mod_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Gameserver.mod_dir)
}
inline ::std::string* Gameserver::mutable_mod_dir() {
  
  // @@protoc_insertion_point(field_mutable:Gameserver.mod_dir)
  return mod_dir_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Gameserver::release_mod_dir() {
  // @@protoc_insertion_point(field_release:Gameserver.mod_dir)
  
  return mod_dir_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Gameserver::set_allocated_mod_dir(::std::string* mod_dir) {
  if (mod_dir != NULL) {
    
  } else {
    
  }
  mod_dir_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mod_dir);
  // @@protoc_insertion_point(field_set_allocated:Gameserver.mod_dir)
}

// bool dedicated_server = 4;
inline void Gameserver::clear_dedicated_server() {
  dedicated_server_ = false;
}
inline bool Gameserver::dedicated_server() const {
  // @@protoc_insertion_point(field_get:Gameserver.dedicated_server)
  return dedicated_server_;
}
inline void Gameserver::set_dedicated_server(bool value) {
  
  dedicated_server_ = value;
  // @@protoc_insertion_point(field_set:Gameserver.dedicated_server)
}

// uint32 max_player_count = 5;
inline void Gameserver::clear_max_player_count() {
  max_player_count_ = 0u;
}
inline ::google::protobuf::uint32 Gameserver::max_player_count() const {
  // @@protoc_insertion_point(field_get:Gameserver.max_player_count)
  return max_player_count_;
}
inline void Gameserver::set_max_player_count(::google::protobuf::uint32 value) {
  
  max_player_count_ = value;
  // @@protoc_insertion_point(field_set:Gameserver.max_player_count)
}

// uint32 bot_player_count = 6;
inline void Gameserver::clear_bot_player_count() {
  bot_player_count_ = 0u;
}
inline ::google::protobuf::uint32 Gameserver::bot_player_count() const {
  // @@protoc_insertion_point(field_get:Gameserver.bot_player_count)
  return bot_player_count_;
}
inline void Gameserver::set_bot_player_count(::google::protobuf::uint32 value) {
  
  bot_player_count_ = value;
  // @@protoc_insertion_point(field_set:Gameserver.bot_player_count)
}

// bytes server_name = 7;
inline void Gameserver::clear_server_name() {
  server_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Gameserver::server_name() const {
  // @@protoc_insertion_point(field_get:Gameserver.server_name)
  return server_name_.GetNoArena();
}
inline void Gameserver::set_server_name(const ::std::string& value) {
  
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Gameserver.server_name)
}
#if LANG_CXX11
inline void Gameserver::set_server_name(::std::string&& value) {
  
  server_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Gameserver.server_name)
}
#endif
inline void Gameserver::set_server_name(const char* value) {
  
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Gameserver.server_name)
}
inline void Gameserver::set_server_name(const void* value, size_t size) {
  
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Gameserver.server_name)
}
inline ::std::string* Gameserver::mutable_server_name() {
  
  // @@protoc_insertion_point(field_mutable:Gameserver.server_name)
  return server_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Gameserver::release_server_name() {
  // @@protoc_insertion_point(field_release:Gameserver.server_name)
  
  return server_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Gameserver::set_allocated_server_name(::std::string* server_name) {
  if (server_name != NULL) {
    
  } else {
    
  }
  server_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_name);
  // @@protoc_insertion_point(field_set_allocated:Gameserver.server_name)
}

// bytes map_name = 8;
inline void Gameserver::clear_map_name() {
  map_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Gameserver::map_name() const {
  // @@protoc_insertion_point(field_get:Gameserver.map_name)
  return map_name_.GetNoArena();
}
inline void Gameserver::set_map_name(const ::std::string& value) {
  
  map_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Gameserver.map_name)
}
#if LANG_CXX11
inline void Gameserver::set_map_name(::std::string&& value) {
  
  map_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Gameserver.map_name)
}
#endif
inline void Gameserver::set_map_name(const char* value) {
  
  map_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Gameserver.map_name)
}
inline void Gameserver::set_map_name(const void* value, size_t size) {
  
  map_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Gameserver.map_name)
}
inline ::std::string* Gameserver::mutable_map_name() {
  
  // @@protoc_insertion_point(field_mutable:Gameserver.map_name)
  return map_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Gameserver::release_map_name() {
  // @@protoc_insertion_point(field_release:Gameserver.map_name)
  
  return map_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Gameserver::set_allocated_map_name(::std::string* map_name) {
  if (map_name != NULL) {
    
  } else {
    
  }
  map_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), map_name);
  // @@protoc_insertion_point(field_set_allocated:Gameserver.map_name)
}

// bool password_protected = 9;
inline void Gameserver::clear_password_protected() {
  password_protected_ = false;
}
inline bool Gameserver::password_protected() const {
  // @@protoc_insertion_point(field_get:Gameserver.password_protected)
  return password_protected_;
}
inline void Gameserver::set_password_protected(bool value) {
  
  password_protected_ = value;
  // @@protoc_insertion_point(field_set:Gameserver.password_protected)
}

// uint32 spectator_port = 10;
inline void Gameserver::clear_spectator_port() {
  spectator_port_ = 0u;
}
inline ::google::protobuf::uint32 Gameserver::spectator_port() const {
  // @@protoc_insertion_point(field_get:Gameserver.spectator_port)
  return spectator_port_;
}
inline void Gameserver::set_spectator_port(::google::protobuf::uint32 value) {
  
  spectator_port_ = value;
  // @@protoc_insertion_point(field_set:Gameserver.spectator_port)
}

// bytes spectator_server_name = 11;
inline void Gameserver::clear_spectator_server_name() {
  spectator_server_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Gameserver::spectator_server_name() const {
  // @@protoc_insertion_point(field_get:Gameserver.spectator_server_name)
  return spectator_server_name_.GetNoArena();
}
inline void Gameserver::set_spectator_server_name(const ::std::string& value) {
  
  spectator_server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Gameserver.spectator_server_name)
}
#if LANG_CXX11
inline void Gameserver::set_spectator_server_name(::std::string&& value) {
  
  spectator_server_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Gameserver.spectator_server_name)
}
#endif
inline void Gameserver::set_spectator_server_name(const char* value) {
  
  spectator_server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Gameserver.spectator_server_name)
}
inline void Gameserver::set_spectator_server_name(const void* value, size_t size) {
  
  spectator_server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Gameserver.spectator_server_name)
}
inline ::std::string* Gameserver::mutable_spectator_server_name() {
  
  // @@protoc_insertion_point(field_mutable:Gameserver.spectator_server_name)
  return spectator_server_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Gameserver::release_spectator_server_name() {
  // @@protoc_insertion_point(field_release:Gameserver.spectator_server_name)
  
  return spectator_server_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Gameserver::set_allocated_spectator_server_name(::std::string* spectator_server_name) {
  if (spectator_server_name != NULL) {
    
  } else {
    
  }
  spectator_server_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), spectator_server_name);
  // @@protoc_insertion_point(field_set_allocated:Gameserver.spectator_server_name)
}

// map<string, bytes> values = 12;
inline int Gameserver::values_size() const {
  return values_.size();
}
inline void Gameserver::clear_values() {
  values_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
Gameserver::values() const {
  // @@protoc_insertion_point(field_map:Gameserver.values)
  return values_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
Gameserver::mutable_values() {
  // @@protoc_insertion_point(field_mutable_map:Gameserver.values)
  return values_.MutableMap();
}

// bytes tags = 13;
inline void Gameserver::clear_tags() {
  tags_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Gameserver::tags() const {
  // @@protoc_insertion_point(field_get:Gameserver.tags)
  return tags_.GetNoArena();
}
inline void Gameserver::set_tags(const ::std::string& value) {
  
  tags_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Gameserver.tags)
}
#if LANG_CXX11
inline void Gameserver::set_tags(::std::string&& value) {
  
  tags_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Gameserver.tags)
}
#endif
inline void Gameserver::set_tags(const char* value) {
  
  tags_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Gameserver.tags)
}
inline void Gameserver::set_tags(const void* value, size_t size) {
  
  tags_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Gameserver.tags)
}
inline ::std::string* Gameserver::mutable_tags() {
  
  // @@protoc_insertion_point(field_mutable:Gameserver.tags)
  return tags_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Gameserver::release_tags() {
  // @@protoc_insertion_point(field_release:Gameserver.tags)
  
  return tags_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Gameserver::set_allocated_tags(::std::string* tags) {
  if (tags != NULL) {
    
  } else {
    
  }
  tags_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tags);
  // @@protoc_insertion_point(field_set_allocated:Gameserver.tags)
}

// bytes gamedata = 14;
inline void Gameserver::clear_gamedata() {
  gamedata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Gameserver::gamedata() const {
  // @@protoc_insertion_point(field_get:Gameserver.gamedata)
  return gamedata_.GetNoArena();
}
inline void Gameserver::set_gamedata(const ::std::string& value) {
  
  gamedata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Gameserver.gamedata)
}
#if LANG_CXX11
inline void Gameserver::set_gamedata(::std::string&& value) {
  
  gamedata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Gameserver.gamedata)
}
#endif
inline void Gameserver::set_gamedata(const char* value) {
  
  gamedata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Gameserver.gamedata)
}
inline void Gameserver::set_gamedata(const void* value, size_t size) {
  
  gamedata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Gameserver.gamedata)
}
inline ::std::string* Gameserver::mutable_gamedata() {
  
  // @@protoc_insertion_point(field_mutable:Gameserver.gamedata)
  return gamedata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Gameserver::release_gamedata() {
  // @@protoc_insertion_point(field_release:Gameserver.gamedata)
  
  return gamedata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Gameserver::set_allocated_gamedata(::std::string* gamedata) {
  if (gamedata != NULL) {
    
  } else {
    
  }
  gamedata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gamedata);
  // @@protoc_insertion_point(field_set_allocated:Gameserver.gamedata)
}

// bytes region = 15;
inline void Gameserver::clear_region() {
  region_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Gameserver::region() const {
  // @@protoc_insertion_point(field_get:Gameserver.region)
  return region_.GetNoArena();
}
inline void Gameserver::set_region(const ::std::string& value) {
  
  region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Gameserver.region)
}
#if LANG_CXX11
inline void Gameserver::set_region(::std::string&& value) {
  
  region_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Gameserver.region)
}
#endif
inline void Gameserver::set_region(const char* value) {
  
  region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Gameserver.region)
}
inline void Gameserver::set_region(const void* value, size_t size) {
  
  region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Gameserver.region)
}
inline ::std::string* Gameserver::mutable_region() {
  
  // @@protoc_insertion_point(field_mutable:Gameserver.region)
  return region_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Gameserver::release_region() {
  // @@protoc_insertion_point(field_release:Gameserver.region)
  
  return region_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Gameserver::set_allocated_region(::std::string* region) {
  if (region != NULL) {
    
  } else {
    
  }
  region_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), region);
  // @@protoc_insertion_point(field_set_allocated:Gameserver.region)
}

// bytes product = 16;
inline void Gameserver::clear_product() {
  product_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Gameserver::product() const {
  // @@protoc_insertion_point(field_get:Gameserver.product)
  return product_.GetNoArena();
}
inline void Gameserver::set_product(const ::std::string& value) {
  
  product_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Gameserver.product)
}
#if LANG_CXX11
inline void Gameserver::set_product(::std::string&& value) {
  
  product_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Gameserver.product)
}
#endif
inline void Gameserver::set_product(const char* value) {
  
  product_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Gameserver.product)
}
inline void Gameserver::set_product(const void* value, size_t size) {
  
  product_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Gameserver.product)
}
inline ::std::string* Gameserver::mutable_product() {
  
  // @@protoc_insertion_point(field_mutable:Gameserver.product)
  return product_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Gameserver::release_product() {
  // @@protoc_insertion_point(field_release:Gameserver.product)
  
  return product_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Gameserver::set_allocated_product(::std::string* product) {
  if (product != NULL) {
    
  } else {
    
  }
  product_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), product);
  // @@protoc_insertion_point(field_set_allocated:Gameserver.product)
}

// bool secure = 17;
inline void Gameserver::clear_secure() {
  secure_ = false;
}
inline bool Gameserver::secure() const {
  // @@protoc_insertion_point(field_get:Gameserver.secure)
  return secure_;
}
inline void Gameserver::set_secure(bool value) {
  
  secure_ = value;
  // @@protoc_insertion_point(field_set:Gameserver.secure)
}

// uint32 num_players = 18;
inline void Gameserver::clear_num_players() {
  num_players_ = 0u;
}
inline ::google::protobuf::uint32 Gameserver::num_players() const {
  // @@protoc_insertion_point(field_get:Gameserver.num_players)
  return num_players_;
}
inline void Gameserver::set_num_players(::google::protobuf::uint32 value) {
  
  num_players_ = value;
  // @@protoc_insertion_point(field_set:Gameserver.num_players)
}

// uint32 version = 19;
inline void Gameserver::clear_version() {
  version_ = 0u;
}
inline ::google::protobuf::uint32 Gameserver::version() const {
  // @@protoc_insertion_point(field_get:Gameserver.version)
  return version_;
}
inline void Gameserver::set_version(::google::protobuf::uint32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:Gameserver.version)
}

// uint32 ip = 32;
inline void Gameserver::clear_ip() {
  ip_ = 0u;
}
inline ::google::protobuf::uint32 Gameserver::ip() const {
  // @@protoc_insertion_point(field_get:Gameserver.ip)
  return ip_;
}
inline void Gameserver::set_ip(::google::protobuf::uint32 value) {
  
  ip_ = value;
  // @@protoc_insertion_point(field_set:Gameserver.ip)
}

// uint32 port = 33;
inline void Gameserver::clear_port() {
  port_ = 0u;
}
inline ::google::protobuf::uint32 Gameserver::port() const {
  // @@protoc_insertion_point(field_get:Gameserver.port)
  return port_;
}
inline void Gameserver::set_port(::google::protobuf::uint32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:Gameserver.port)
}

// uint32 query_port = 34;
inline void Gameserver::clear_query_port() {
  query_port_ = 0u;
}
inline ::google::protobuf::uint32 Gameserver::query_port() const {
  // @@protoc_insertion_point(field_get:Gameserver.query_port)
  return query_port_;
}
inline void Gameserver::set_query_port(::google::protobuf::uint32 value) {
  
  query_port_ = value;
  // @@protoc_insertion_point(field_set:Gameserver.query_port)
}

// uint32 appid = 35;
inline void Gameserver::clear_appid() {
  appid_ = 0u;
}
inline ::google::protobuf::uint32 Gameserver::appid() const {
  // @@protoc_insertion_point(field_get:Gameserver.appid)
  return appid_;
}
inline void Gameserver::set_appid(::google::protobuf::uint32 value) {
  
  appid_ = value;
  // @@protoc_insertion_point(field_set:Gameserver.appid)
}

// bool offline = 48;
inline void Gameserver::clear_offline() {
  offline_ = false;
}
inline bool Gameserver::offline() const {
  // @@protoc_insertion_point(field_get:Gameserver.offline)
  return offline_;
}
inline void Gameserver::set_offline(bool value) {
  
  offline_ = value;
  // @@protoc_insertion_point(field_set:Gameserver.offline)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Friend

// uint64 id = 1;
inline void Friend::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Friend::id() const {
  // @@protoc_insertion_point(field_get:Friend.id)
  return id_;
}
inline void Friend::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:Friend.id)
}

// bytes name = 2;
inline void Friend::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Friend::name() const {
  // @@protoc_insertion_point(field_get:Friend.name)
  return name_.GetNoArena();
}
inline void Friend::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Friend.name)
}
#if LANG_CXX11
inline void Friend::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Friend.name)
}
#endif
inline void Friend::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Friend.name)
}
inline void Friend::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Friend.name)
}
inline ::std::string* Friend::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Friend.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Friend::release_name() {
  // @@protoc_insertion_point(field_release:Friend.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Friend::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Friend.name)
}

// map<string, bytes> rich_presence = 3;
inline int Friend::rich_presence_size() const {
  return rich_presence_.size();
}
inline void Friend::clear_rich_presence() {
  rich_presence_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
Friend::rich_presence() const {
  // @@protoc_insertion_point(field_map:Friend.rich_presence)
  return rich_presence_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
Friend::mutable_rich_presence() {
  // @@protoc_insertion_point(field_mutable_map:Friend.rich_presence)
  return rich_presence_.MutableMap();
}

// uint32 appid = 4;
inline void Friend::clear_appid() {
  appid_ = 0u;
}
inline ::google::protobuf::uint32 Friend::appid() const {
  // @@protoc_insertion_point(field_get:Friend.appid)
  return appid_;
}
inline void Friend::set_appid(::google::protobuf::uint32 value) {
  
  appid_ = value;
  // @@protoc_insertion_point(field_set:Friend.appid)
}

// uint64 lobby_id = 5;
inline void Friend::clear_lobby_id() {
  lobby_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Friend::lobby_id() const {
  // @@protoc_insertion_point(field_get:Friend.lobby_id)
  return lobby_id_;
}
inline void Friend::set_lobby_id(::google::protobuf::uint64 value) {
  
  lobby_id_ = value;
  // @@protoc_insertion_point(field_set:Friend.lobby_id)
}

// -------------------------------------------------------------------

// Auth_Ticket

// uint32 number = 1;
inline void Auth_Ticket::clear_number() {
  number_ = 0u;
}
inline ::google::protobuf::uint32 Auth_Ticket::number() const {
  // @@protoc_insertion_point(field_get:Auth_Ticket.number)
  return number_;
}
inline void Auth_Ticket::set_number(::google::protobuf::uint32 value) {
  
  number_ = value;
  // @@protoc_insertion_point(field_set:Auth_Ticket.number)
}

// .Auth_Ticket.Types type = 2;
inline void Auth_Ticket::clear_type() {
  type_ = 0;
}
inline ::Auth_Ticket_Types Auth_Ticket::type() const {
  // @@protoc_insertion_point(field_get:Auth_Ticket.type)
  return static_cast< ::Auth_Ticket_Types >(type_);
}
inline void Auth_Ticket::set_type(::Auth_Ticket_Types value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:Auth_Ticket.type)
}

// -------------------------------------------------------------------

// Friend_Messages

// .Friend_Messages.Types type = 1;
inline void Friend_Messages::clear_type() {
  type_ = 0;
}
inline ::Friend_Messages_Types Friend_Messages::type() const {
  // @@protoc_insertion_point(field_get:Friend_Messages.type)
  return static_cast< ::Friend_Messages_Types >(type_);
}
inline void Friend_Messages::set_type(::Friend_Messages_Types value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:Friend_Messages.type)
}

// uint64 lobby_id = 2;
inline bool Friend_Messages::has_lobby_id() const {
  return invite_data_case() == kLobbyId;
}
inline void Friend_Messages::set_has_lobby_id() {
  _oneof_case_[0] = kLobbyId;
}
inline void Friend_Messages::clear_lobby_id() {
  if (has_lobby_id()) {
    invite_data_.lobby_id_ = GOOGLE_ULONGLONG(0);
    clear_has_invite_data();
  }
}
inline ::google::protobuf::uint64 Friend_Messages::lobby_id() const {
  // @@protoc_insertion_point(field_get:Friend_Messages.lobby_id)
  if (has_lobby_id()) {
    return invite_data_.lobby_id_;
  }
  return GOOGLE_ULONGLONG(0);
}
inline void Friend_Messages::set_lobby_id(::google::protobuf::uint64 value) {
  if (!has_lobby_id()) {
    clear_invite_data();
    set_has_lobby_id();
  }
  invite_data_.lobby_id_ = value;
  // @@protoc_insertion_point(field_set:Friend_Messages.lobby_id)
}

// bytes connect_str = 3;
inline bool Friend_Messages::has_connect_str() const {
  return invite_data_case() == kConnectStr;
}
inline void Friend_Messages::set_has_connect_str() {
  _oneof_case_[0] = kConnectStr;
}
inline void Friend_Messages::clear_connect_str() {
  if (has_connect_str()) {
    invite_data_.connect_str_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_invite_data();
  }
}
inline const ::std::string& Friend_Messages::connect_str() const {
  // @@protoc_insertion_point(field_get:Friend_Messages.connect_str)
  if (has_connect_str()) {
    return invite_data_.connect_str_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void Friend_Messages::set_connect_str(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Friend_Messages.connect_str)
  if (!has_connect_str()) {
    clear_invite_data();
    set_has_connect_str();
    invite_data_.connect_str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  invite_data_.connect_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Friend_Messages.connect_str)
}
#if LANG_CXX11
inline void Friend_Messages::set_connect_str(::std::string&& value) {
  // @@protoc_insertion_point(field_set:Friend_Messages.connect_str)
  if (!has_connect_str()) {
    clear_invite_data();
    set_has_connect_str();
    invite_data_.connect_str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  invite_data_.connect_str_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Friend_Messages.connect_str)
}
#endif
inline void Friend_Messages::set_connect_str(const char* value) {
  if (!has_connect_str()) {
    clear_invite_data();
    set_has_connect_str();
    invite_data_.connect_str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  invite_data_.connect_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Friend_Messages.connect_str)
}
inline void Friend_Messages::set_connect_str(const void* value, size_t size) {
  if (!has_connect_str()) {
    clear_invite_data();
    set_has_connect_str();
    invite_data_.connect_str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  invite_data_.connect_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Friend_Messages.connect_str)
}
inline ::std::string* Friend_Messages::mutable_connect_str() {
  if (!has_connect_str()) {
    clear_invite_data();
    set_has_connect_str();
    invite_data_.connect_str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:Friend_Messages.connect_str)
  return invite_data_.connect_str_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Friend_Messages::release_connect_str() {
  // @@protoc_insertion_point(field_release:Friend_Messages.connect_str)
  if (has_connect_str()) {
    clear_has_invite_data();
    return invite_data_.connect_str_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void Friend_Messages::set_allocated_connect_str(::std::string* connect_str) {
  if (!has_connect_str()) {
    invite_data_.connect_str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_invite_data();
  if (connect_str != NULL) {
    set_has_connect_str();
    invite_data_.connect_str_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        connect_str);
  }
  // @@protoc_insertion_point(field_set_allocated:Friend_Messages.connect_str)
}

inline bool Friend_Messages::has_invite_data() const {
  return invite_data_case() != INVITE_DATA_NOT_SET;
}
inline void Friend_Messages::clear_has_invite_data() {
  _oneof_case_[0] = INVITE_DATA_NOT_SET;
}
inline Friend_Messages::InviteDataCase Friend_Messages::invite_data_case() const {
  return Friend_Messages::InviteDataCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Common_Message

// uint64 source_id = 1;
inline void Common_Message::clear_source_id() {
  source_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Common_Message::source_id() const {
  // @@protoc_insertion_point(field_get:Common_Message.source_id)
  return source_id_;
}
inline void Common_Message::set_source_id(::google::protobuf::uint64 value) {
  
  source_id_ = value;
  // @@protoc_insertion_point(field_set:Common_Message.source_id)
}

// uint64 dest_id = 2;
inline void Common_Message::clear_dest_id() {
  dest_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Common_Message::dest_id() const {
  // @@protoc_insertion_point(field_get:Common_Message.dest_id)
  return dest_id_;
}
inline void Common_Message::set_dest_id(::google::protobuf::uint64 value) {
  
  dest_id_ = value;
  // @@protoc_insertion_point(field_set:Common_Message.dest_id)
}

// .Announce announce = 3;
inline bool Common_Message::has_announce() const {
  return messages_case() == kAnnounce;
}
inline void Common_Message::set_has_announce() {
  _oneof_case_[0] = kAnnounce;
}
inline void Common_Message::clear_announce() {
  if (has_announce()) {
    delete messages_.announce_;
    clear_has_messages();
  }
}
inline  const ::Announce& Common_Message::announce() const {
  // @@protoc_insertion_point(field_get:Common_Message.announce)
  return has_announce()
      ? *messages_.announce_
      : ::Announce::default_instance();
}
inline ::Announce* Common_Message::mutable_announce() {
  if (!has_announce()) {
    clear_messages();
    set_has_announce();
    messages_.announce_ = new ::Announce;
  }
  // @@protoc_insertion_point(field_mutable:Common_Message.announce)
  return messages_.announce_;
}
inline ::Announce* Common_Message::release_announce() {
  // @@protoc_insertion_point(field_release:Common_Message.announce)
  if (has_announce()) {
    clear_has_messages();
    ::Announce* temp = messages_.announce_;
    messages_.announce_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Common_Message::set_allocated_announce(::Announce* announce) {
  clear_messages();
  if (announce) {
    set_has_announce();
    messages_.announce_ = announce;
  }
  // @@protoc_insertion_point(field_set_allocated:Common_Message.announce)
}

// .Low_Level low_level = 4;
inline bool Common_Message::has_low_level() const {
  return messages_case() == kLowLevel;
}
inline void Common_Message::set_has_low_level() {
  _oneof_case_[0] = kLowLevel;
}
inline void Common_Message::clear_low_level() {
  if (has_low_level()) {
    delete messages_.low_level_;
    clear_has_messages();
  }
}
inline  const ::Low_Level& Common_Message::low_level() const {
  // @@protoc_insertion_point(field_get:Common_Message.low_level)
  return has_low_level()
      ? *messages_.low_level_
      : ::Low_Level::default_instance();
}
inline ::Low_Level* Common_Message::mutable_low_level() {
  if (!has_low_level()) {
    clear_messages();
    set_has_low_level();
    messages_.low_level_ = new ::Low_Level;
  }
  // @@protoc_insertion_point(field_mutable:Common_Message.low_level)
  return messages_.low_level_;
}
inline ::Low_Level* Common_Message::release_low_level() {
  // @@protoc_insertion_point(field_release:Common_Message.low_level)
  if (has_low_level()) {
    clear_has_messages();
    ::Low_Level* temp = messages_.low_level_;
    messages_.low_level_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Common_Message::set_allocated_low_level(::Low_Level* low_level) {
  clear_messages();
  if (low_level) {
    set_has_low_level();
    messages_.low_level_ = low_level;
  }
  // @@protoc_insertion_point(field_set_allocated:Common_Message.low_level)
}

// .Lobby lobby = 5;
inline bool Common_Message::has_lobby() const {
  return messages_case() == kLobby;
}
inline void Common_Message::set_has_lobby() {
  _oneof_case_[0] = kLobby;
}
inline void Common_Message::clear_lobby() {
  if (has_lobby()) {
    delete messages_.lobby_;
    clear_has_messages();
  }
}
inline  const ::Lobby& Common_Message::lobby() const {
  // @@protoc_insertion_point(field_get:Common_Message.lobby)
  return has_lobby()
      ? *messages_.lobby_
      : ::Lobby::default_instance();
}
inline ::Lobby* Common_Message::mutable_lobby() {
  if (!has_lobby()) {
    clear_messages();
    set_has_lobby();
    messages_.lobby_ = new ::Lobby;
  }
  // @@protoc_insertion_point(field_mutable:Common_Message.lobby)
  return messages_.lobby_;
}
inline ::Lobby* Common_Message::release_lobby() {
  // @@protoc_insertion_point(field_release:Common_Message.lobby)
  if (has_lobby()) {
    clear_has_messages();
    ::Lobby* temp = messages_.lobby_;
    messages_.lobby_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Common_Message::set_allocated_lobby(::Lobby* lobby) {
  clear_messages();
  if (lobby) {
    set_has_lobby();
    messages_.lobby_ = lobby;
  }
  // @@protoc_insertion_point(field_set_allocated:Common_Message.lobby)
}

// .Lobby_Messages lobby_messages = 6;
inline bool Common_Message::has_lobby_messages() const {
  return messages_case() == kLobbyMessages;
}
inline void Common_Message::set_has_lobby_messages() {
  _oneof_case_[0] = kLobbyMessages;
}
inline void Common_Message::clear_lobby_messages() {
  if (has_lobby_messages()) {
    delete messages_.lobby_messages_;
    clear_has_messages();
  }
}
inline  const ::Lobby_Messages& Common_Message::lobby_messages() const {
  // @@protoc_insertion_point(field_get:Common_Message.lobby_messages)
  return has_lobby_messages()
      ? *messages_.lobby_messages_
      : ::Lobby_Messages::default_instance();
}
inline ::Lobby_Messages* Common_Message::mutable_lobby_messages() {
  if (!has_lobby_messages()) {
    clear_messages();
    set_has_lobby_messages();
    messages_.lobby_messages_ = new ::Lobby_Messages;
  }
  // @@protoc_insertion_point(field_mutable:Common_Message.lobby_messages)
  return messages_.lobby_messages_;
}
inline ::Lobby_Messages* Common_Message::release_lobby_messages() {
  // @@protoc_insertion_point(field_release:Common_Message.lobby_messages)
  if (has_lobby_messages()) {
    clear_has_messages();
    ::Lobby_Messages* temp = messages_.lobby_messages_;
    messages_.lobby_messages_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Common_Message::set_allocated_lobby_messages(::Lobby_Messages* lobby_messages) {
  clear_messages();
  if (lobby_messages) {
    set_has_lobby_messages();
    messages_.lobby_messages_ = lobby_messages;
  }
  // @@protoc_insertion_point(field_set_allocated:Common_Message.lobby_messages)
}

// .Network network = 7;
inline bool Common_Message::has_network() const {
  return messages_case() == kNetwork;
}
inline void Common_Message::set_has_network() {
  _oneof_case_[0] = kNetwork;
}
inline void Common_Message::clear_network() {
  if (has_network()) {
    delete messages_.network_;
    clear_has_messages();
  }
}
inline  const ::Network& Common_Message::network() const {
  // @@protoc_insertion_point(field_get:Common_Message.network)
  return has_network()
      ? *messages_.network_
      : ::Network::default_instance();
}
inline ::Network* Common_Message::mutable_network() {
  if (!has_network()) {
    clear_messages();
    set_has_network();
    messages_.network_ = new ::Network;
  }
  // @@protoc_insertion_point(field_mutable:Common_Message.network)
  return messages_.network_;
}
inline ::Network* Common_Message::release_network() {
  // @@protoc_insertion_point(field_release:Common_Message.network)
  if (has_network()) {
    clear_has_messages();
    ::Network* temp = messages_.network_;
    messages_.network_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Common_Message::set_allocated_network(::Network* network) {
  clear_messages();
  if (network) {
    set_has_network();
    messages_.network_ = network;
  }
  // @@protoc_insertion_point(field_set_allocated:Common_Message.network)
}

// .Gameserver gameserver = 8;
inline bool Common_Message::has_gameserver() const {
  return messages_case() == kGameserver;
}
inline void Common_Message::set_has_gameserver() {
  _oneof_case_[0] = kGameserver;
}
inline void Common_Message::clear_gameserver() {
  if (has_gameserver()) {
    delete messages_.gameserver_;
    clear_has_messages();
  }
}
inline  const ::Gameserver& Common_Message::gameserver() const {
  // @@protoc_insertion_point(field_get:Common_Message.gameserver)
  return has_gameserver()
      ? *messages_.gameserver_
      : ::Gameserver::default_instance();
}
inline ::Gameserver* Common_Message::mutable_gameserver() {
  if (!has_gameserver()) {
    clear_messages();
    set_has_gameserver();
    messages_.gameserver_ = new ::Gameserver;
  }
  // @@protoc_insertion_point(field_mutable:Common_Message.gameserver)
  return messages_.gameserver_;
}
inline ::Gameserver* Common_Message::release_gameserver() {
  // @@protoc_insertion_point(field_release:Common_Message.gameserver)
  if (has_gameserver()) {
    clear_has_messages();
    ::Gameserver* temp = messages_.gameserver_;
    messages_.gameserver_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Common_Message::set_allocated_gameserver(::Gameserver* gameserver) {
  clear_messages();
  if (gameserver) {
    set_has_gameserver();
    messages_.gameserver_ = gameserver;
  }
  // @@protoc_insertion_point(field_set_allocated:Common_Message.gameserver)
}

// .Friend friend = 9;
inline bool Common_Message::has_friend_() const {
  return messages_case() == kFriend;
}
inline void Common_Message::set_has_friend_() {
  _oneof_case_[0] = kFriend;
}
inline void Common_Message::clear_friend_() {
  if (has_friend_()) {
    delete messages_.friend__;
    clear_has_messages();
  }
}
inline  const ::Friend& Common_Message::friend_() const {
  // @@protoc_insertion_point(field_get:Common_Message.friend)
  return has_friend_()
      ? *messages_.friend__
      : ::Friend::default_instance();
}
inline ::Friend* Common_Message::mutable_friend_() {
  if (!has_friend_()) {
    clear_messages();
    set_has_friend_();
    messages_.friend__ = new ::Friend;
  }
  // @@protoc_insertion_point(field_mutable:Common_Message.friend)
  return messages_.friend__;
}
inline ::Friend* Common_Message::release_friend_() {
  // @@protoc_insertion_point(field_release:Common_Message.friend)
  if (has_friend_()) {
    clear_has_messages();
    ::Friend* temp = messages_.friend__;
    messages_.friend__ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Common_Message::set_allocated_friend_(::Friend* friend_) {
  clear_messages();
  if (friend_) {
    set_has_friend_();
    messages_.friend__ = friend_;
  }
  // @@protoc_insertion_point(field_set_allocated:Common_Message.friend)
}

// .Auth_Ticket auth_ticket = 10;
inline bool Common_Message::has_auth_ticket() const {
  return messages_case() == kAuthTicket;
}
inline void Common_Message::set_has_auth_ticket() {
  _oneof_case_[0] = kAuthTicket;
}
inline void Common_Message::clear_auth_ticket() {
  if (has_auth_ticket()) {
    delete messages_.auth_ticket_;
    clear_has_messages();
  }
}
inline  const ::Auth_Ticket& Common_Message::auth_ticket() const {
  // @@protoc_insertion_point(field_get:Common_Message.auth_ticket)
  return has_auth_ticket()
      ? *messages_.auth_ticket_
      : ::Auth_Ticket::default_instance();
}
inline ::Auth_Ticket* Common_Message::mutable_auth_ticket() {
  if (!has_auth_ticket()) {
    clear_messages();
    set_has_auth_ticket();
    messages_.auth_ticket_ = new ::Auth_Ticket;
  }
  // @@protoc_insertion_point(field_mutable:Common_Message.auth_ticket)
  return messages_.auth_ticket_;
}
inline ::Auth_Ticket* Common_Message::release_auth_ticket() {
  // @@protoc_insertion_point(field_release:Common_Message.auth_ticket)
  if (has_auth_ticket()) {
    clear_has_messages();
    ::Auth_Ticket* temp = messages_.auth_ticket_;
    messages_.auth_ticket_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Common_Message::set_allocated_auth_ticket(::Auth_Ticket* auth_ticket) {
  clear_messages();
  if (auth_ticket) {
    set_has_auth_ticket();
    messages_.auth_ticket_ = auth_ticket;
  }
  // @@protoc_insertion_point(field_set_allocated:Common_Message.auth_ticket)
}

// .Friend_Messages friend_messages = 11;
inline bool Common_Message::has_friend_messages() const {
  return messages_case() == kFriendMessages;
}
inline void Common_Message::set_has_friend_messages() {
  _oneof_case_[0] = kFriendMessages;
}
inline void Common_Message::clear_friend_messages() {
  if (has_friend_messages()) {
    delete messages_.friend_messages_;
    clear_has_messages();
  }
}
inline  const ::Friend_Messages& Common_Message::friend_messages() const {
  // @@protoc_insertion_point(field_get:Common_Message.friend_messages)
  return has_friend_messages()
      ? *messages_.friend_messages_
      : ::Friend_Messages::default_instance();
}
inline ::Friend_Messages* Common_Message::mutable_friend_messages() {
  if (!has_friend_messages()) {
    clear_messages();
    set_has_friend_messages();
    messages_.friend_messages_ = new ::Friend_Messages;
  }
  // @@protoc_insertion_point(field_mutable:Common_Message.friend_messages)
  return messages_.friend_messages_;
}
inline ::Friend_Messages* Common_Message::release_friend_messages() {
  // @@protoc_insertion_point(field_release:Common_Message.friend_messages)
  if (has_friend_messages()) {
    clear_has_messages();
    ::Friend_Messages* temp = messages_.friend_messages_;
    messages_.friend_messages_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Common_Message::set_allocated_friend_messages(::Friend_Messages* friend_messages) {
  clear_messages();
  if (friend_messages) {
    set_has_friend_messages();
    messages_.friend_messages_ = friend_messages;
  }
  // @@protoc_insertion_point(field_set_allocated:Common_Message.friend_messages)
}

// .Network_Old network_old = 12;
inline bool Common_Message::has_network_old() const {
  return messages_case() == kNetworkOld;
}
inline void Common_Message::set_has_network_old() {
  _oneof_case_[0] = kNetworkOld;
}
inline void Common_Message::clear_network_old() {
  if (has_network_old()) {
    delete messages_.network_old_;
    clear_has_messages();
  }
}
inline  const ::Network_Old& Common_Message::network_old() const {
  // @@protoc_insertion_point(field_get:Common_Message.network_old)
  return has_network_old()
      ? *messages_.network_old_
      : ::Network_Old::default_instance();
}
inline ::Network_Old* Common_Message::mutable_network_old() {
  if (!has_network_old()) {
    clear_messages();
    set_has_network_old();
    messages_.network_old_ = new ::Network_Old;
  }
  // @@protoc_insertion_point(field_mutable:Common_Message.network_old)
  return messages_.network_old_;
}
inline ::Network_Old* Common_Message::release_network_old() {
  // @@protoc_insertion_point(field_release:Common_Message.network_old)
  if (has_network_old()) {
    clear_has_messages();
    ::Network_Old* temp = messages_.network_old_;
    messages_.network_old_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Common_Message::set_allocated_network_old(::Network_Old* network_old) {
  clear_messages();
  if (network_old) {
    set_has_network_old();
    messages_.network_old_ = network_old;
  }
  // @@protoc_insertion_point(field_set_allocated:Common_Message.network_old)
}

// .Networking_Sockets networking_sockets = 13;
inline bool Common_Message::has_networking_sockets() const {
  return messages_case() == kNetworkingSockets;
}
inline void Common_Message::set_has_networking_sockets() {
  _oneof_case_[0] = kNetworkingSockets;
}
inline void Common_Message::clear_networking_sockets() {
  if (has_networking_sockets()) {
    delete messages_.networking_sockets_;
    clear_has_messages();
  }
}
inline  const ::Networking_Sockets& Common_Message::networking_sockets() const {
  // @@protoc_insertion_point(field_get:Common_Message.networking_sockets)
  return has_networking_sockets()
      ? *messages_.networking_sockets_
      : ::Networking_Sockets::default_instance();
}
inline ::Networking_Sockets* Common_Message::mutable_networking_sockets() {
  if (!has_networking_sockets()) {
    clear_messages();
    set_has_networking_sockets();
    messages_.networking_sockets_ = new ::Networking_Sockets;
  }
  // @@protoc_insertion_point(field_mutable:Common_Message.networking_sockets)
  return messages_.networking_sockets_;
}
inline ::Networking_Sockets* Common_Message::release_networking_sockets() {
  // @@protoc_insertion_point(field_release:Common_Message.networking_sockets)
  if (has_networking_sockets()) {
    clear_has_messages();
    ::Networking_Sockets* temp = messages_.networking_sockets_;
    messages_.networking_sockets_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Common_Message::set_allocated_networking_sockets(::Networking_Sockets* networking_sockets) {
  clear_messages();
  if (networking_sockets) {
    set_has_networking_sockets();
    messages_.networking_sockets_ = networking_sockets;
  }
  // @@protoc_insertion_point(field_set_allocated:Common_Message.networking_sockets)
}

// uint32 source_ip = 128;
inline void Common_Message::clear_source_ip() {
  source_ip_ = 0u;
}
inline ::google::protobuf::uint32 Common_Message::source_ip() const {
  // @@protoc_insertion_point(field_get:Common_Message.source_ip)
  return source_ip_;
}
inline void Common_Message::set_source_ip(::google::protobuf::uint32 value) {
  
  source_ip_ = value;
  // @@protoc_insertion_point(field_set:Common_Message.source_ip)
}

// uint32 source_port = 129;
inline void Common_Message::clear_source_port() {
  source_port_ = 0u;
}
inline ::google::protobuf::uint32 Common_Message::source_port() const {
  // @@protoc_insertion_point(field_get:Common_Message.source_port)
  return source_port_;
}
inline void Common_Message::set_source_port(::google::protobuf::uint32 value) {
  
  source_port_ = value;
  // @@protoc_insertion_point(field_set:Common_Message.source_port)
}

inline bool Common_Message::has_messages() const {
  return messages_case() != MESSAGES_NOT_SET;
}
inline void Common_Message::clear_has_messages() {
  _oneof_case_[0] = MESSAGES_NOT_SET;
}
inline Common_Message::MessagesCase Common_Message::messages_case() const {
  return Common_Message::MessagesCase(_oneof_case_[0]);
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Announce_Types> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::Lobby_Messages_Types> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::Low_Level_Types> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::Network_Types> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::Network_Old_Types> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::Networking_Sockets_Types> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::Auth_Ticket_Types> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::Friend_Messages_Types> : ::google::protobuf::internal::true_type {};

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2eproto__INCLUDED
