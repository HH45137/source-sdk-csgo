// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
class Announce_Other_PeersDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Announce_Other_Peers> {
} _Announce_Other_Peers_default_instance_;
class AnnounceDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Announce> {
} _Announce_default_instance_;
class Lobby_MemberDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Lobby_Member> {
} _Lobby_Member_default_instance_;
class Lobby_GameserverDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Lobby_Gameserver> {
} _Lobby_Gameserver_default_instance_;
class LobbyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Lobby> {
} _Lobby_default_instance_;
class Lobby_MessagesDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Lobby_Messages> {
} _Lobby_Messages_default_instance_;
class Low_LevelDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Low_Level> {
} _Low_Level_default_instance_;
class NetworkDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Network> {
} _Network_default_instance_;
class Network_OldDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Network_Old> {
} _Network_Old_default_instance_;
class Networking_SocketsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Networking_Sockets> {
} _Networking_Sockets_default_instance_;
class GameserverDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Gameserver> {
} _Gameserver_default_instance_;
class FriendDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Friend> {
} _Friend_default_instance_;
class Auth_TicketDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Auth_Ticket> {
} _Auth_Ticket_default_instance_;
class Friend_MessagesDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Friend_Messages> {
  public:
  ::google::protobuf::uint64 lobby_id_;
  ::google::protobuf::internal::ArenaStringPtr connect_str_;
} _Friend_Messages_default_instance_;
class Common_MessageDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Common_Message> {
  public:
  const ::Announce* announce_;
  const ::Low_Level* low_level_;
  const ::Lobby* lobby_;
  const ::Lobby_Messages* lobby_messages_;
  const ::Network* network_;
  const ::Gameserver* gameserver_;
  const ::Friend* friend__;
  const ::Auth_Ticket* auth_ticket_;
  const ::Friend_Messages* friend_messages_;
  const ::Network_Old* network_old_;
  const ::Networking_Sockets* networking_sockets_;
} _Common_Message_default_instance_;

namespace protobuf_net_2eproto {


void TableStruct::Shutdown() {
  _Announce_Other_Peers_default_instance_.Shutdown();
  _Announce_default_instance_.Shutdown();
  _Lobby_Member_default_instance_.Shutdown();
  _Lobby_Gameserver_default_instance_.Shutdown();
  _Lobby_default_instance_.Shutdown();
  _Lobby_Messages_default_instance_.Shutdown();
  _Low_Level_default_instance_.Shutdown();
  _Network_default_instance_.Shutdown();
  _Network_Old_default_instance_.Shutdown();
  _Networking_Sockets_default_instance_.Shutdown();
  _Gameserver_default_instance_.Shutdown();
  _Friend_default_instance_.Shutdown();
  _Auth_Ticket_default_instance_.Shutdown();
  _Friend_Messages_default_instance_.Shutdown();
  _Common_Message_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Announce_Other_Peers_default_instance_.DefaultConstruct();
  _Announce_default_instance_.DefaultConstruct();
  _Lobby_Member_default_instance_.DefaultConstruct();
  _Lobby_Gameserver_default_instance_.DefaultConstruct();
  _Lobby_default_instance_.DefaultConstruct();
  _Lobby_Messages_default_instance_.DefaultConstruct();
  _Low_Level_default_instance_.DefaultConstruct();
  _Network_default_instance_.DefaultConstruct();
  _Network_Old_default_instance_.DefaultConstruct();
  _Networking_Sockets_default_instance_.DefaultConstruct();
  _Gameserver_default_instance_.DefaultConstruct();
  _Friend_default_instance_.DefaultConstruct();
  _Auth_Ticket_default_instance_.DefaultConstruct();
  _Friend_Messages_default_instance_.DefaultConstruct();
  _Common_Message_default_instance_.DefaultConstruct();
  _Lobby_default_instance_.get_mutable()->gameserver_ = const_cast< ::Lobby_Gameserver*>(
      ::Lobby_Gameserver::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER

}  // namespace protobuf_net_2eproto

bool Announce_Types_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Announce_Types Announce::PING;
const Announce_Types Announce::PONG;
const Announce_Types Announce::Types_MIN;
const Announce_Types Announce::Types_MAX;
const int Announce::Types_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Lobby_Messages_Types_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Lobby_Messages_Types Lobby_Messages::JOIN;
const Lobby_Messages_Types Lobby_Messages::LEAVE;
const Lobby_Messages_Types Lobby_Messages::CHANGE_OWNER;
const Lobby_Messages_Types Lobby_Messages::MEMBER_DATA;
const Lobby_Messages_Types Lobby_Messages::CHAT_MESSAGE;
const Lobby_Messages_Types Lobby_Messages::Types_MIN;
const Lobby_Messages_Types Lobby_Messages::Types_MAX;
const int Lobby_Messages::Types_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Low_Level_Types_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Low_Level_Types Low_Level::HEARTBEAT;
const Low_Level_Types Low_Level::CONNECT;
const Low_Level_Types Low_Level::DISCONNECT;
const Low_Level_Types Low_Level::Types_MIN;
const Low_Level_Types Low_Level::Types_MAX;
const int Low_Level::Types_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Network_Types_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Network_Types Network::DATA;
const Network_Types Network::NEW_CONNECTION;
const Network_Types Network::Types_MIN;
const Network_Types Network::Types_MAX;
const int Network::Types_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Network_Old_Types_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Network_Old_Types Network_Old::CONNECTION_REQUEST_IP;
const Network_Old_Types Network_Old::CONNECTION_REQUEST_STEAMID;
const Network_Old_Types Network_Old::CONNECTION_ACCEPTED;
const Network_Old_Types Network_Old::CONNECTION_END;
const Network_Old_Types Network_Old::DATA;
const Network_Old_Types Network_Old::Types_MIN;
const Network_Old_Types Network_Old::Types_MAX;
const int Network_Old::Types_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Networking_Sockets_Types_IsValid(int value) {
  switch (value) {
    case 0:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Networking_Sockets_Types Networking_Sockets::CONNECTION_REQUEST;
const Networking_Sockets_Types Networking_Sockets::CONNECTION_ACCEPTED;
const Networking_Sockets_Types Networking_Sockets::CONNECTION_END;
const Networking_Sockets_Types Networking_Sockets::DATA;
const Networking_Sockets_Types Networking_Sockets::Types_MIN;
const Networking_Sockets_Types Networking_Sockets::Types_MAX;
const int Networking_Sockets::Types_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Auth_Ticket_Types_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Auth_Ticket_Types Auth_Ticket::CANCEL;
const Auth_Ticket_Types Auth_Ticket::Types_MIN;
const Auth_Ticket_Types Auth_Ticket::Types_MAX;
const int Auth_Ticket::Types_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Friend_Messages_Types_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Friend_Messages_Types Friend_Messages::LOBBY_INVITE;
const Friend_Messages_Types Friend_Messages::GAME_INVITE;
const Friend_Messages_Types Friend_Messages::Types_MIN;
const Friend_Messages_Types Friend_Messages::Types_MAX;
const int Friend_Messages::Types_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Announce_Other_Peers::kIdFieldNumber;
const int Announce_Other_Peers::kIpFieldNumber;
const int Announce_Other_Peers::kUdpPortFieldNumber;
const int Announce_Other_Peers::kAppidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Announce_Other_Peers::Announce_Other_Peers()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_net_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Announce.Other_Peers)
}
Announce_Other_Peers::Announce_Other_Peers(const Announce_Other_Peers& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&id_) + sizeof(appid_));
  // @@protoc_insertion_point(copy_constructor:Announce.Other_Peers)
}

void Announce_Other_Peers::SharedCtor() {
  ::memset(&id_, 0, reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&id_) + sizeof(appid_));
  _cached_size_ = 0;
}

Announce_Other_Peers::~Announce_Other_Peers() {
  // @@protoc_insertion_point(destructor:Announce.Other_Peers)
  SharedDtor();
}

void Announce_Other_Peers::SharedDtor() {
}

void Announce_Other_Peers::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Announce_Other_Peers& Announce_Other_Peers::default_instance() {
  protobuf_net_2eproto::InitDefaults();
  return *internal_default_instance();
}

Announce_Other_Peers* Announce_Other_Peers::New(::google::protobuf::Arena* arena) const {
  Announce_Other_Peers* n = new Announce_Other_Peers;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Announce_Other_Peers::Clear() {
// @@protoc_insertion_point(message_clear_start:Announce.Other_Peers)
  ::memset(&id_, 0, reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&id_) + sizeof(appid_));
}

bool Announce_Other_Peers::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Announce.Other_Peers)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 id = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 ip = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 udp_port = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &udp_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 appid = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Announce.Other_Peers)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Announce.Other_Peers)
  return false;
#undef DO_
}

void Announce_Other_Peers::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Announce.Other_Peers)
  // uint64 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // uint32 ip = 2;
  if (this->ip() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ip(), output);
  }

  // uint32 udp_port = 3;
  if (this->udp_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->udp_port(), output);
  }

  // uint32 appid = 4;
  if (this->appid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->appid(), output);
  }

  // @@protoc_insertion_point(serialize_end:Announce.Other_Peers)
}

size_t Announce_Other_Peers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Announce.Other_Peers)
  size_t total_size = 0;

  // uint64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());
  }

  // uint32 ip = 2;
  if (this->ip() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ip());
  }

  // uint32 udp_port = 3;
  if (this->udp_port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->udp_port());
  }

  // uint32 appid = 4;
  if (this->appid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->appid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Announce_Other_Peers::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Announce_Other_Peers*>(&from));
}

void Announce_Other_Peers::MergeFrom(const Announce_Other_Peers& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Announce.Other_Peers)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.ip() != 0) {
    set_ip(from.ip());
  }
  if (from.udp_port() != 0) {
    set_udp_port(from.udp_port());
  }
  if (from.appid() != 0) {
    set_appid(from.appid());
  }
}

void Announce_Other_Peers::CopyFrom(const Announce_Other_Peers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Announce.Other_Peers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Announce_Other_Peers::IsInitialized() const {
  return true;
}

void Announce_Other_Peers::Swap(Announce_Other_Peers* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Announce_Other_Peers::InternalSwap(Announce_Other_Peers* other) {
  std::swap(id_, other->id_);
  std::swap(ip_, other->ip_);
  std::swap(udp_port_, other->udp_port_);
  std::swap(appid_, other->appid_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Announce_Other_Peers::GetTypeName() const {
  return "Announce.Other_Peers";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Announce_Other_Peers

// uint64 id = 1;
void Announce_Other_Peers::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Announce_Other_Peers::id() const {
  // @@protoc_insertion_point(field_get:Announce.Other_Peers.id)
  return id_;
}
void Announce_Other_Peers::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:Announce.Other_Peers.id)
}

// uint32 ip = 2;
void Announce_Other_Peers::clear_ip() {
  ip_ = 0u;
}
::google::protobuf::uint32 Announce_Other_Peers::ip() const {
  // @@protoc_insertion_point(field_get:Announce.Other_Peers.ip)
  return ip_;
}
void Announce_Other_Peers::set_ip(::google::protobuf::uint32 value) {
  
  ip_ = value;
  // @@protoc_insertion_point(field_set:Announce.Other_Peers.ip)
}

// uint32 udp_port = 3;
void Announce_Other_Peers::clear_udp_port() {
  udp_port_ = 0u;
}
::google::protobuf::uint32 Announce_Other_Peers::udp_port() const {
  // @@protoc_insertion_point(field_get:Announce.Other_Peers.udp_port)
  return udp_port_;
}
void Announce_Other_Peers::set_udp_port(::google::protobuf::uint32 value) {
  
  udp_port_ = value;
  // @@protoc_insertion_point(field_set:Announce.Other_Peers.udp_port)
}

// uint32 appid = 4;
void Announce_Other_Peers::clear_appid() {
  appid_ = 0u;
}
::google::protobuf::uint32 Announce_Other_Peers::appid() const {
  // @@protoc_insertion_point(field_get:Announce.Other_Peers.appid)
  return appid_;
}
void Announce_Other_Peers::set_appid(::google::protobuf::uint32 value) {
  
  appid_ = value;
  // @@protoc_insertion_point(field_set:Announce.Other_Peers.appid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Announce::kTypeFieldNumber;
const int Announce::kIdsFieldNumber;
const int Announce::kTcpPortFieldNumber;
const int Announce::kPeersFieldNumber;
const int Announce::kAppidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Announce::Announce()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_net_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Announce)
}
Announce::Announce(const Announce& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      ids_(from.ids_),
      peers_(from.peers_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&type_) + sizeof(appid_));
  // @@protoc_insertion_point(copy_constructor:Announce)
}

void Announce::SharedCtor() {
  ::memset(&type_, 0, reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&type_) + sizeof(appid_));
  _cached_size_ = 0;
}

Announce::~Announce() {
  // @@protoc_insertion_point(destructor:Announce)
  SharedDtor();
}

void Announce::SharedDtor() {
}

void Announce::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Announce& Announce::default_instance() {
  protobuf_net_2eproto::InitDefaults();
  return *internal_default_instance();
}

Announce* Announce::New(::google::protobuf::Arena* arena) const {
  Announce* n = new Announce;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Announce::Clear() {
// @@protoc_insertion_point(message_clear_start:Announce)
  ids_.Clear();
  peers_.Clear();
  ::memset(&type_, 0, reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&type_) + sizeof(appid_));
}

bool Announce::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Announce)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Announce.Types type = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::Announce_Types >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 ids = 2;
      case 2: {
        if (tag == 18u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_ids())));
        } else if (tag == 16u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 18u, input, this->mutable_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 tcp_port = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tcp_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Announce.Other_Peers peers = 4;
      case 4: {
        if (tag == 34u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_peers()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // uint32 appid = 5;
      case 5: {
        if (tag == 40u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Announce)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Announce)
  return false;
#undef DO_
}

void Announce::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Announce)
  // .Announce.Types type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // repeated uint64 ids = 2;
  if (this->ids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_ids_cached_byte_size_);
  }
  for (int i = 0; i < this->ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->ids(i), output);
  }

  // uint32 tcp_port = 3;
  if (this->tcp_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->tcp_port(), output);
  }

  // repeated .Announce.Other_Peers peers = 4;
  for (unsigned int i = 0, n = this->peers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->peers(i), output);
  }

  // uint32 appid = 5;
  if (this->appid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->appid(), output);
  }

  // @@protoc_insertion_point(serialize_end:Announce)
}

size_t Announce::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Announce)
  size_t total_size = 0;

  // repeated uint64 ids = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _ids_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .Announce.Other_Peers peers = 4;
  {
    unsigned int count = this->peers_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->peers(i));
    }
  }

  // .Announce.Types type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // uint32 tcp_port = 3;
  if (this->tcp_port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tcp_port());
  }

  // uint32 appid = 5;
  if (this->appid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->appid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Announce::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Announce*>(&from));
}

void Announce::MergeFrom(const Announce& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Announce)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ids_.MergeFrom(from.ids_);
  peers_.MergeFrom(from.peers_);
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.tcp_port() != 0) {
    set_tcp_port(from.tcp_port());
  }
  if (from.appid() != 0) {
    set_appid(from.appid());
  }
}

void Announce::CopyFrom(const Announce& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Announce)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Announce::IsInitialized() const {
  return true;
}

void Announce::Swap(Announce* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Announce::InternalSwap(Announce* other) {
  ids_.UnsafeArenaSwap(&other->ids_);
  peers_.UnsafeArenaSwap(&other->peers_);
  std::swap(type_, other->type_);
  std::swap(tcp_port_, other->tcp_port_);
  std::swap(appid_, other->appid_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Announce::GetTypeName() const {
  return "Announce";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Announce

// .Announce.Types type = 1;
void Announce::clear_type() {
  type_ = 0;
}
::Announce_Types Announce::type() const {
  // @@protoc_insertion_point(field_get:Announce.type)
  return static_cast< ::Announce_Types >(type_);
}
void Announce::set_type(::Announce_Types value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:Announce.type)
}

// repeated uint64 ids = 2;
int Announce::ids_size() const {
  return ids_.size();
}
void Announce::clear_ids() {
  ids_.Clear();
}
::google::protobuf::uint64 Announce::ids(int index) const {
  // @@protoc_insertion_point(field_get:Announce.ids)
  return ids_.Get(index);
}
void Announce::set_ids(int index, ::google::protobuf::uint64 value) {
  ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:Announce.ids)
}
void Announce::add_ids(::google::protobuf::uint64 value) {
  ids_.Add(value);
  // @@protoc_insertion_point(field_add:Announce.ids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
Announce::ids() const {
  // @@protoc_insertion_point(field_list:Announce.ids)
  return ids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
Announce::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:Announce.ids)
  return &ids_;
}

// uint32 tcp_port = 3;
void Announce::clear_tcp_port() {
  tcp_port_ = 0u;
}
::google::protobuf::uint32 Announce::tcp_port() const {
  // @@protoc_insertion_point(field_get:Announce.tcp_port)
  return tcp_port_;
}
void Announce::set_tcp_port(::google::protobuf::uint32 value) {
  
  tcp_port_ = value;
  // @@protoc_insertion_point(field_set:Announce.tcp_port)
}

// repeated .Announce.Other_Peers peers = 4;
int Announce::peers_size() const {
  return peers_.size();
}
void Announce::clear_peers() {
  peers_.Clear();
}
const ::Announce_Other_Peers& Announce::peers(int index) const {
  // @@protoc_insertion_point(field_get:Announce.peers)
  return peers_.Get(index);
}
::Announce_Other_Peers* Announce::mutable_peers(int index) {
  // @@protoc_insertion_point(field_mutable:Announce.peers)
  return peers_.Mutable(index);
}
::Announce_Other_Peers* Announce::add_peers() {
  // @@protoc_insertion_point(field_add:Announce.peers)
  return peers_.Add();
}
::google::protobuf::RepeatedPtrField< ::Announce_Other_Peers >*
Announce::mutable_peers() {
  // @@protoc_insertion_point(field_mutable_list:Announce.peers)
  return &peers_;
}
const ::google::protobuf::RepeatedPtrField< ::Announce_Other_Peers >&
Announce::peers() const {
  // @@protoc_insertion_point(field_list:Announce.peers)
  return peers_;
}

// uint32 appid = 5;
void Announce::clear_appid() {
  appid_ = 0u;
}
::google::protobuf::uint32 Announce::appid() const {
  // @@protoc_insertion_point(field_get:Announce.appid)
  return appid_;
}
void Announce::set_appid(::google::protobuf::uint32 value) {
  
  appid_ = value;
  // @@protoc_insertion_point(field_set:Announce.appid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Lobby_Member::kIdFieldNumber;
const int Lobby_Member::kValuesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Lobby_Member::Lobby_Member()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_net_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Lobby.Member)
}
Lobby_Member::Lobby_Member(const Lobby_Member& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  values_.MergeFrom(from.values_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:Lobby.Member)
}

void Lobby_Member::SharedCtor() {
  id_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

Lobby_Member::~Lobby_Member() {
  // @@protoc_insertion_point(destructor:Lobby.Member)
  SharedDtor();
}

void Lobby_Member::SharedDtor() {
}

void Lobby_Member::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Lobby_Member& Lobby_Member::default_instance() {
  protobuf_net_2eproto::InitDefaults();
  return *internal_default_instance();
}

Lobby_Member* Lobby_Member::New(::google::protobuf::Arena* arena) const {
  Lobby_Member* n = new Lobby_Member;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Lobby_Member::Clear() {
// @@protoc_insertion_point(message_clear_start:Lobby.Member)
  values_.Clear();
  id_ = GOOGLE_ULONGLONG(0);
}

bool Lobby_Member::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Lobby.Member)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 id = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, bytes> values = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          Lobby_Member_ValuesEntry::Parser< ::google::protobuf::internal::MapFieldLite<
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_BYTES,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&values_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Lobby.Member.ValuesEntry.key"));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Lobby.Member)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Lobby.Member)
  return false;
#undef DO_
}

void Lobby_Member::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Lobby.Member)
  // uint64 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // map<string, bytes> values = 2;
  if (!this->values().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "Lobby.Member.ValuesEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->values().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->values().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->values().begin();
          it != this->values().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Lobby_Member_ValuesEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(values_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            2, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Lobby_Member_ValuesEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->values().begin();
          it != this->values().end(); ++it) {
        entry.reset(values_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            2, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_end:Lobby.Member)
}

size_t Lobby_Member::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Lobby.Member)
  size_t total_size = 0;

  // map<string, bytes> values = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->values_size());
  {
    ::google::protobuf::scoped_ptr<Lobby_Member_ValuesEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->values().begin();
        it != this->values().end(); ++it) {
      entry.reset(values_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // uint64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Lobby_Member::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Lobby_Member*>(&from));
}

void Lobby_Member::MergeFrom(const Lobby_Member& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Lobby.Member)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  values_.MergeFrom(from.values_);
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void Lobby_Member::CopyFrom(const Lobby_Member& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Lobby.Member)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lobby_Member::IsInitialized() const {
  return true;
}

void Lobby_Member::Swap(Lobby_Member* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Lobby_Member::InternalSwap(Lobby_Member* other) {
  values_.Swap(&other->values_);
  std::swap(id_, other->id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Lobby_Member::GetTypeName() const {
  return "Lobby.Member";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Lobby_Member

// uint64 id = 1;
void Lobby_Member::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Lobby_Member::id() const {
  // @@protoc_insertion_point(field_get:Lobby.Member.id)
  return id_;
}
void Lobby_Member::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:Lobby.Member.id)
}

// map<string, bytes> values = 2;
int Lobby_Member::values_size() const {
  return values_.size();
}
void Lobby_Member::clear_values() {
  values_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::std::string >&
Lobby_Member::values() const {
  // @@protoc_insertion_point(field_map:Lobby.Member.values)
  return values_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::std::string >*
Lobby_Member::mutable_values() {
  // @@protoc_insertion_point(field_mutable_map:Lobby.Member.values)
  return values_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Lobby_Gameserver::kIdFieldNumber;
const int Lobby_Gameserver::kIpFieldNumber;
const int Lobby_Gameserver::kPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Lobby_Gameserver::Lobby_Gameserver()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_net_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Lobby.Gameserver)
}
Lobby_Gameserver::Lobby_Gameserver(const Lobby_Gameserver& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&id_) + sizeof(port_));
  // @@protoc_insertion_point(copy_constructor:Lobby.Gameserver)
}

void Lobby_Gameserver::SharedCtor() {
  ::memset(&id_, 0, reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&id_) + sizeof(port_));
  _cached_size_ = 0;
}

Lobby_Gameserver::~Lobby_Gameserver() {
  // @@protoc_insertion_point(destructor:Lobby.Gameserver)
  SharedDtor();
}

void Lobby_Gameserver::SharedDtor() {
}

void Lobby_Gameserver::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Lobby_Gameserver& Lobby_Gameserver::default_instance() {
  protobuf_net_2eproto::InitDefaults();
  return *internal_default_instance();
}

Lobby_Gameserver* Lobby_Gameserver::New(::google::protobuf::Arena* arena) const {
  Lobby_Gameserver* n = new Lobby_Gameserver;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Lobby_Gameserver::Clear() {
// @@protoc_insertion_point(message_clear_start:Lobby.Gameserver)
  ::memset(&id_, 0, reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&id_) + sizeof(port_));
}

bool Lobby_Gameserver::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Lobby.Gameserver)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 id = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 ip = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 port = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Lobby.Gameserver)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Lobby.Gameserver)
  return false;
#undef DO_
}

void Lobby_Gameserver::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Lobby.Gameserver)
  // uint64 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // uint32 ip = 2;
  if (this->ip() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ip(), output);
  }

  // uint32 port = 3;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->port(), output);
  }

  // @@protoc_insertion_point(serialize_end:Lobby.Gameserver)
}

size_t Lobby_Gameserver::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Lobby.Gameserver)
  size_t total_size = 0;

  // uint64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());
  }

  // uint32 ip = 2;
  if (this->ip() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ip());
  }

  // uint32 port = 3;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->port());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Lobby_Gameserver::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Lobby_Gameserver*>(&from));
}

void Lobby_Gameserver::MergeFrom(const Lobby_Gameserver& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Lobby.Gameserver)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.ip() != 0) {
    set_ip(from.ip());
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
}

void Lobby_Gameserver::CopyFrom(const Lobby_Gameserver& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Lobby.Gameserver)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lobby_Gameserver::IsInitialized() const {
  return true;
}

void Lobby_Gameserver::Swap(Lobby_Gameserver* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Lobby_Gameserver::InternalSwap(Lobby_Gameserver* other) {
  std::swap(id_, other->id_);
  std::swap(ip_, other->ip_);
  std::swap(port_, other->port_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Lobby_Gameserver::GetTypeName() const {
  return "Lobby.Gameserver";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Lobby_Gameserver

// uint64 id = 1;
void Lobby_Gameserver::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Lobby_Gameserver::id() const {
  // @@protoc_insertion_point(field_get:Lobby.Gameserver.id)
  return id_;
}
void Lobby_Gameserver::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:Lobby.Gameserver.id)
}

// uint32 ip = 2;
void Lobby_Gameserver::clear_ip() {
  ip_ = 0u;
}
::google::protobuf::uint32 Lobby_Gameserver::ip() const {
  // @@protoc_insertion_point(field_get:Lobby.Gameserver.ip)
  return ip_;
}
void Lobby_Gameserver::set_ip(::google::protobuf::uint32 value) {
  
  ip_ = value;
  // @@protoc_insertion_point(field_set:Lobby.Gameserver.ip)
}

// uint32 port = 3;
void Lobby_Gameserver::clear_port() {
  port_ = 0u;
}
::google::protobuf::uint32 Lobby_Gameserver::port() const {
  // @@protoc_insertion_point(field_get:Lobby.Gameserver.port)
  return port_;
}
void Lobby_Gameserver::set_port(::google::protobuf::uint32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:Lobby.Gameserver.port)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Lobby::kRoomIdFieldNumber;
const int Lobby::kOwnerFieldNumber;
const int Lobby::kValuesFieldNumber;
const int Lobby::kMembersFieldNumber;
const int Lobby::kGameserverFieldNumber;
const int Lobby::kMemberLimitFieldNumber;
const int Lobby::kTypeFieldNumber;
const int Lobby::kJoinableFieldNumber;
const int Lobby::kAppidFieldNumber;
const int Lobby::kDeletedFieldNumber;
const int Lobby::kTimeDeletedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Lobby::Lobby()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_net_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Lobby)
}
Lobby::Lobby(const Lobby& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      members_(from.members_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  values_.MergeFrom(from.values_);
  if (from.has_gameserver()) {
    gameserver_ = new ::Lobby_Gameserver(*from.gameserver_);
  } else {
    gameserver_ = NULL;
  }
  ::memcpy(&room_id_, &from.room_id_,
    reinterpret_cast<char*>(&time_deleted_) -
    reinterpret_cast<char*>(&room_id_) + sizeof(time_deleted_));
  // @@protoc_insertion_point(copy_constructor:Lobby)
}

void Lobby::SharedCtor() {
  ::memset(&gameserver_, 0, reinterpret_cast<char*>(&time_deleted_) -
    reinterpret_cast<char*>(&gameserver_) + sizeof(time_deleted_));
  _cached_size_ = 0;
}

Lobby::~Lobby() {
  // @@protoc_insertion_point(destructor:Lobby)
  SharedDtor();
}

void Lobby::SharedDtor() {
  if (this != internal_default_instance()) {
    delete gameserver_;
  }
}

void Lobby::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Lobby& Lobby::default_instance() {
  protobuf_net_2eproto::InitDefaults();
  return *internal_default_instance();
}

Lobby* Lobby::New(::google::protobuf::Arena* arena) const {
  Lobby* n = new Lobby;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Lobby::Clear() {
// @@protoc_insertion_point(message_clear_start:Lobby)
  values_.Clear();
  members_.Clear();
  if (GetArenaNoVirtual() == NULL && gameserver_ != NULL) {
    delete gameserver_;
  }
  gameserver_ = NULL;
  ::memset(&room_id_, 0, reinterpret_cast<char*>(&time_deleted_) -
    reinterpret_cast<char*>(&room_id_) + sizeof(time_deleted_));
}

bool Lobby::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Lobby)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 room_id = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &room_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 owner = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &owner_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, bytes> values = 3;
      case 3: {
        if (tag == 26u) {
          DO_(input->IncrementRecursionDepth());
          Lobby_ValuesEntry::Parser< ::google::protobuf::internal::MapFieldLite<
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_BYTES,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&values_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Lobby.ValuesEntry.key"));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .Lobby.Member members = 4;
      case 4: {
        if (tag == 34u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_members()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // .Lobby.Gameserver gameserver = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gameserver()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 member_limit = 6;
      case 6: {
        if (tag == 48u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &member_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 type = 7;
      case 7: {
        if (tag == 56u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool joinable = 8;
      case 8: {
        if (tag == 64u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &joinable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 appid = 9;
      case 9: {
        if (tag == 72u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool deleted = 32;
      case 32: {
        if (tag == 256u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &deleted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 time_deleted = 33;
      case 33: {
        if (tag == 264u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_deleted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Lobby)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Lobby)
  return false;
#undef DO_
}

void Lobby::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Lobby)
  // uint64 room_id = 1;
  if (this->room_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->room_id(), output);
  }

  // uint64 owner = 2;
  if (this->owner() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->owner(), output);
  }

  // map<string, bytes> values = 3;
  if (!this->values().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "Lobby.ValuesEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->values().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->values().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->values().begin();
          it != this->values().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Lobby_ValuesEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(values_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            3, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Lobby_ValuesEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->values().begin();
          it != this->values().end(); ++it) {
        entry.reset(values_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            3, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // repeated .Lobby.Member members = 4;
  for (unsigned int i = 0, n = this->members_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->members(i), output);
  }

  // .Lobby.Gameserver gameserver = 5;
  if (this->has_gameserver()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, *this->gameserver_, output);
  }

  // uint32 member_limit = 6;
  if (this->member_limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->member_limit(), output);
  }

  // uint32 type = 7;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->type(), output);
  }

  // bool joinable = 8;
  if (this->joinable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->joinable(), output);
  }

  // uint32 appid = 9;
  if (this->appid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->appid(), output);
  }

  // bool deleted = 32;
  if (this->deleted() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(32, this->deleted(), output);
  }

  // uint64 time_deleted = 33;
  if (this->time_deleted() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(33, this->time_deleted(), output);
  }

  // @@protoc_insertion_point(serialize_end:Lobby)
}

size_t Lobby::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Lobby)
  size_t total_size = 0;

  // map<string, bytes> values = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->values_size());
  {
    ::google::protobuf::scoped_ptr<Lobby_ValuesEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->values().begin();
        it != this->values().end(); ++it) {
      entry.reset(values_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // repeated .Lobby.Member members = 4;
  {
    unsigned int count = this->members_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->members(i));
    }
  }

  // .Lobby.Gameserver gameserver = 5;
  if (this->has_gameserver()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->gameserver_);
  }

  // uint64 room_id = 1;
  if (this->room_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->room_id());
  }

  // uint64 owner = 2;
  if (this->owner() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->owner());
  }

  // uint32 member_limit = 6;
  if (this->member_limit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->member_limit());
  }

  // uint32 type = 7;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  // uint32 appid = 9;
  if (this->appid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->appid());
  }

  // bool joinable = 8;
  if (this->joinable() != 0) {
    total_size += 1 + 1;
  }

  // bool deleted = 32;
  if (this->deleted() != 0) {
    total_size += 2 + 1;
  }

  // uint64 time_deleted = 33;
  if (this->time_deleted() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time_deleted());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Lobby::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Lobby*>(&from));
}

void Lobby::MergeFrom(const Lobby& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Lobby)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  values_.MergeFrom(from.values_);
  members_.MergeFrom(from.members_);
  if (from.has_gameserver()) {
    mutable_gameserver()->::Lobby_Gameserver::MergeFrom(from.gameserver());
  }
  if (from.room_id() != 0) {
    set_room_id(from.room_id());
  }
  if (from.owner() != 0) {
    set_owner(from.owner());
  }
  if (from.member_limit() != 0) {
    set_member_limit(from.member_limit());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.appid() != 0) {
    set_appid(from.appid());
  }
  if (from.joinable() != 0) {
    set_joinable(from.joinable());
  }
  if (from.deleted() != 0) {
    set_deleted(from.deleted());
  }
  if (from.time_deleted() != 0) {
    set_time_deleted(from.time_deleted());
  }
}

void Lobby::CopyFrom(const Lobby& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Lobby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lobby::IsInitialized() const {
  return true;
}

void Lobby::Swap(Lobby* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Lobby::InternalSwap(Lobby* other) {
  values_.Swap(&other->values_);
  members_.UnsafeArenaSwap(&other->members_);
  std::swap(gameserver_, other->gameserver_);
  std::swap(room_id_, other->room_id_);
  std::swap(owner_, other->owner_);
  std::swap(member_limit_, other->member_limit_);
  std::swap(type_, other->type_);
  std::swap(appid_, other->appid_);
  std::swap(joinable_, other->joinable_);
  std::swap(deleted_, other->deleted_);
  std::swap(time_deleted_, other->time_deleted_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Lobby::GetTypeName() const {
  return "Lobby";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Lobby

// uint64 room_id = 1;
void Lobby::clear_room_id() {
  room_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Lobby::room_id() const {
  // @@protoc_insertion_point(field_get:Lobby.room_id)
  return room_id_;
}
void Lobby::set_room_id(::google::protobuf::uint64 value) {
  
  room_id_ = value;
  // @@protoc_insertion_point(field_set:Lobby.room_id)
}

// uint64 owner = 2;
void Lobby::clear_owner() {
  owner_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Lobby::owner() const {
  // @@protoc_insertion_point(field_get:Lobby.owner)
  return owner_;
}
void Lobby::set_owner(::google::protobuf::uint64 value) {
  
  owner_ = value;
  // @@protoc_insertion_point(field_set:Lobby.owner)
}

// map<string, bytes> values = 3;
int Lobby::values_size() const {
  return values_.size();
}
void Lobby::clear_values() {
  values_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::std::string >&
Lobby::values() const {
  // @@protoc_insertion_point(field_map:Lobby.values)
  return values_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::std::string >*
Lobby::mutable_values() {
  // @@protoc_insertion_point(field_mutable_map:Lobby.values)
  return values_.MutableMap();
}

// repeated .Lobby.Member members = 4;
int Lobby::members_size() const {
  return members_.size();
}
void Lobby::clear_members() {
  members_.Clear();
}
const ::Lobby_Member& Lobby::members(int index) const {
  // @@protoc_insertion_point(field_get:Lobby.members)
  return members_.Get(index);
}
::Lobby_Member* Lobby::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:Lobby.members)
  return members_.Mutable(index);
}
::Lobby_Member* Lobby::add_members() {
  // @@protoc_insertion_point(field_add:Lobby.members)
  return members_.Add();
}
::google::protobuf::RepeatedPtrField< ::Lobby_Member >*
Lobby::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:Lobby.members)
  return &members_;
}
const ::google::protobuf::RepeatedPtrField< ::Lobby_Member >&
Lobby::members() const {
  // @@protoc_insertion_point(field_list:Lobby.members)
  return members_;
}

// .Lobby.Gameserver gameserver = 5;
bool Lobby::has_gameserver() const {
  return this != internal_default_instance() && gameserver_ != NULL;
}
void Lobby::clear_gameserver() {
  if (GetArenaNoVirtual() == NULL && gameserver_ != NULL) delete gameserver_;
  gameserver_ = NULL;
}
const ::Lobby_Gameserver& Lobby::gameserver() const {
  // @@protoc_insertion_point(field_get:Lobby.gameserver)
  return gameserver_ != NULL ? *gameserver_
                         : *::Lobby_Gameserver::internal_default_instance();
}
::Lobby_Gameserver* Lobby::mutable_gameserver() {
  
  if (gameserver_ == NULL) {
    gameserver_ = new ::Lobby_Gameserver;
  }
  // @@protoc_insertion_point(field_mutable:Lobby.gameserver)
  return gameserver_;
}
::Lobby_Gameserver* Lobby::release_gameserver() {
  // @@protoc_insertion_point(field_release:Lobby.gameserver)
  
  ::Lobby_Gameserver* temp = gameserver_;
  gameserver_ = NULL;
  return temp;
}
void Lobby::set_allocated_gameserver(::Lobby_Gameserver* gameserver) {
  delete gameserver_;
  gameserver_ = gameserver;
  if (gameserver) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Lobby.gameserver)
}

// uint32 member_limit = 6;
void Lobby::clear_member_limit() {
  member_limit_ = 0u;
}
::google::protobuf::uint32 Lobby::member_limit() const {
  // @@protoc_insertion_point(field_get:Lobby.member_limit)
  return member_limit_;
}
void Lobby::set_member_limit(::google::protobuf::uint32 value) {
  
  member_limit_ = value;
  // @@protoc_insertion_point(field_set:Lobby.member_limit)
}

// uint32 type = 7;
void Lobby::clear_type() {
  type_ = 0u;
}
::google::protobuf::uint32 Lobby::type() const {
  // @@protoc_insertion_point(field_get:Lobby.type)
  return type_;
}
void Lobby::set_type(::google::protobuf::uint32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:Lobby.type)
}

// bool joinable = 8;
void Lobby::clear_joinable() {
  joinable_ = false;
}
bool Lobby::joinable() const {
  // @@protoc_insertion_point(field_get:Lobby.joinable)
  return joinable_;
}
void Lobby::set_joinable(bool value) {
  
  joinable_ = value;
  // @@protoc_insertion_point(field_set:Lobby.joinable)
}

// uint32 appid = 9;
void Lobby::clear_appid() {
  appid_ = 0u;
}
::google::protobuf::uint32 Lobby::appid() const {
  // @@protoc_insertion_point(field_get:Lobby.appid)
  return appid_;
}
void Lobby::set_appid(::google::protobuf::uint32 value) {
  
  appid_ = value;
  // @@protoc_insertion_point(field_set:Lobby.appid)
}

// bool deleted = 32;
void Lobby::clear_deleted() {
  deleted_ = false;
}
bool Lobby::deleted() const {
  // @@protoc_insertion_point(field_get:Lobby.deleted)
  return deleted_;
}
void Lobby::set_deleted(bool value) {
  
  deleted_ = value;
  // @@protoc_insertion_point(field_set:Lobby.deleted)
}

// uint64 time_deleted = 33;
void Lobby::clear_time_deleted() {
  time_deleted_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Lobby::time_deleted() const {
  // @@protoc_insertion_point(field_get:Lobby.time_deleted)
  return time_deleted_;
}
void Lobby::set_time_deleted(::google::protobuf::uint64 value) {
  
  time_deleted_ = value;
  // @@protoc_insertion_point(field_set:Lobby.time_deleted)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Lobby_Messages::kIdFieldNumber;
const int Lobby_Messages::kTypeFieldNumber;
const int Lobby_Messages::kIdataFieldNumber;
const int Lobby_Messages::kBdataFieldNumber;
const int Lobby_Messages::kMapFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Lobby_Messages::Lobby_Messages()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_net_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Lobby_Messages)
}
Lobby_Messages::Lobby_Messages(const Lobby_Messages& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  map_.MergeFrom(from.map_);
  bdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.bdata().size() > 0) {
    bdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bdata_);
  }
  ::memcpy(&id_, &from.id_,
    reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&id_) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:Lobby_Messages)
}

void Lobby_Messages::SharedCtor() {
  bdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&id_) + sizeof(type_));
  _cached_size_ = 0;
}

Lobby_Messages::~Lobby_Messages() {
  // @@protoc_insertion_point(destructor:Lobby_Messages)
  SharedDtor();
}

void Lobby_Messages::SharedDtor() {
  bdata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Lobby_Messages::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Lobby_Messages& Lobby_Messages::default_instance() {
  protobuf_net_2eproto::InitDefaults();
  return *internal_default_instance();
}

Lobby_Messages* Lobby_Messages::New(::google::protobuf::Arena* arena) const {
  Lobby_Messages* n = new Lobby_Messages;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Lobby_Messages::Clear() {
// @@protoc_insertion_point(message_clear_start:Lobby_Messages)
  map_.Clear();
  bdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&id_) + sizeof(type_));
}

bool Lobby_Messages::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Lobby_Messages)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 id = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Lobby_Messages.Types type = 2;
      case 2: {
        if (tag == 16u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::Lobby_Messages_Types >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 idata = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &idata_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes bdata = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, bytes> map = 5;
      case 5: {
        if (tag == 42u) {
          DO_(input->IncrementRecursionDepth());
          Lobby_Messages_MapEntry::Parser< ::google::protobuf::internal::MapFieldLite<
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_BYTES,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&map_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Lobby_Messages.MapEntry.key"));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Lobby_Messages)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Lobby_Messages)
  return false;
#undef DO_
}

void Lobby_Messages::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Lobby_Messages)
  // uint64 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // .Lobby_Messages.Types type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // uint64 idata = 3;
  if (this->idata() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->idata(), output);
  }

  // bytes bdata = 4;
  if (this->bdata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->bdata(), output);
  }

  // map<string, bytes> map = 5;
  if (!this->map().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "Lobby_Messages.MapEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->map().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->map().begin();
          it != this->map().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Lobby_Messages_MapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(map_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            5, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Lobby_Messages_MapEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->map().begin();
          it != this->map().end(); ++it) {
        entry.reset(map_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            5, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_end:Lobby_Messages)
}

size_t Lobby_Messages::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Lobby_Messages)
  size_t total_size = 0;

  // map<string, bytes> map = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->map_size());
  {
    ::google::protobuf::scoped_ptr<Lobby_Messages_MapEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->map().begin();
        it != this->map().end(); ++it) {
      entry.reset(map_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // bytes bdata = 4;
  if (this->bdata().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->bdata());
  }

  // uint64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());
  }

  // uint64 idata = 3;
  if (this->idata() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->idata());
  }

  // .Lobby_Messages.Types type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Lobby_Messages::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Lobby_Messages*>(&from));
}

void Lobby_Messages::MergeFrom(const Lobby_Messages& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Lobby_Messages)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  map_.MergeFrom(from.map_);
  if (from.bdata().size() > 0) {

    bdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bdata_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.idata() != 0) {
    set_idata(from.idata());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void Lobby_Messages::CopyFrom(const Lobby_Messages& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Lobby_Messages)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lobby_Messages::IsInitialized() const {
  return true;
}

void Lobby_Messages::Swap(Lobby_Messages* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Lobby_Messages::InternalSwap(Lobby_Messages* other) {
  map_.Swap(&other->map_);
  bdata_.Swap(&other->bdata_);
  std::swap(id_, other->id_);
  std::swap(idata_, other->idata_);
  std::swap(type_, other->type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Lobby_Messages::GetTypeName() const {
  return "Lobby_Messages";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Lobby_Messages

// uint64 id = 1;
void Lobby_Messages::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Lobby_Messages::id() const {
  // @@protoc_insertion_point(field_get:Lobby_Messages.id)
  return id_;
}
void Lobby_Messages::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:Lobby_Messages.id)
}

// .Lobby_Messages.Types type = 2;
void Lobby_Messages::clear_type() {
  type_ = 0;
}
::Lobby_Messages_Types Lobby_Messages::type() const {
  // @@protoc_insertion_point(field_get:Lobby_Messages.type)
  return static_cast< ::Lobby_Messages_Types >(type_);
}
void Lobby_Messages::set_type(::Lobby_Messages_Types value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:Lobby_Messages.type)
}

// uint64 idata = 3;
void Lobby_Messages::clear_idata() {
  idata_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Lobby_Messages::idata() const {
  // @@protoc_insertion_point(field_get:Lobby_Messages.idata)
  return idata_;
}
void Lobby_Messages::set_idata(::google::protobuf::uint64 value) {
  
  idata_ = value;
  // @@protoc_insertion_point(field_set:Lobby_Messages.idata)
}

// bytes bdata = 4;
void Lobby_Messages::clear_bdata() {
  bdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Lobby_Messages::bdata() const {
  // @@protoc_insertion_point(field_get:Lobby_Messages.bdata)
  return bdata_.GetNoArena();
}
void Lobby_Messages::set_bdata(const ::std::string& value) {
  
  bdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Lobby_Messages.bdata)
}
#if LANG_CXX11
void Lobby_Messages::set_bdata(::std::string&& value) {
  
  bdata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Lobby_Messages.bdata)
}
#endif
void Lobby_Messages::set_bdata(const char* value) {
  
  bdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Lobby_Messages.bdata)
}
void Lobby_Messages::set_bdata(const void* value, size_t size) {
  
  bdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Lobby_Messages.bdata)
}
::std::string* Lobby_Messages::mutable_bdata() {
  
  // @@protoc_insertion_point(field_mutable:Lobby_Messages.bdata)
  return bdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Lobby_Messages::release_bdata() {
  // @@protoc_insertion_point(field_release:Lobby_Messages.bdata)
  
  return bdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Lobby_Messages::set_allocated_bdata(::std::string* bdata) {
  if (bdata != NULL) {
    
  } else {
    
  }
  bdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bdata);
  // @@protoc_insertion_point(field_set_allocated:Lobby_Messages.bdata)
}

// map<string, bytes> map = 5;
int Lobby_Messages::map_size() const {
  return map_.size();
}
void Lobby_Messages::clear_map() {
  map_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::std::string >&
Lobby_Messages::map() const {
  // @@protoc_insertion_point(field_map:Lobby_Messages.map)
  return map_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::std::string >*
Lobby_Messages::mutable_map() {
  // @@protoc_insertion_point(field_mutable_map:Lobby_Messages.map)
  return map_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Low_Level::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Low_Level::Low_Level()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_net_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Low_Level)
}
Low_Level::Low_Level(const Low_Level& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:Low_Level)
}

void Low_Level::SharedCtor() {
  type_ = 0;
  _cached_size_ = 0;
}

Low_Level::~Low_Level() {
  // @@protoc_insertion_point(destructor:Low_Level)
  SharedDtor();
}

void Low_Level::SharedDtor() {
}

void Low_Level::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Low_Level& Low_Level::default_instance() {
  protobuf_net_2eproto::InitDefaults();
  return *internal_default_instance();
}

Low_Level* Low_Level::New(::google::protobuf::Arena* arena) const {
  Low_Level* n = new Low_Level;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Low_Level::Clear() {
// @@protoc_insertion_point(message_clear_start:Low_Level)
  type_ = 0;
}

bool Low_Level::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Low_Level)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Low_Level.Types type = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::Low_Level_Types >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Low_Level)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Low_Level)
  return false;
#undef DO_
}

void Low_Level::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Low_Level)
  // .Low_Level.Types type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // @@protoc_insertion_point(serialize_end:Low_Level)
}

size_t Low_Level::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Low_Level)
  size_t total_size = 0;

  // .Low_Level.Types type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Low_Level::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Low_Level*>(&from));
}

void Low_Level::MergeFrom(const Low_Level& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Low_Level)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void Low_Level::CopyFrom(const Low_Level& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Low_Level)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Low_Level::IsInitialized() const {
  return true;
}

void Low_Level::Swap(Low_Level* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Low_Level::InternalSwap(Low_Level* other) {
  std::swap(type_, other->type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Low_Level::GetTypeName() const {
  return "Low_Level";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Low_Level

// .Low_Level.Types type = 1;
void Low_Level::clear_type() {
  type_ = 0;
}
::Low_Level_Types Low_Level::type() const {
  // @@protoc_insertion_point(field_get:Low_Level.type)
  return static_cast< ::Low_Level_Types >(type_);
}
void Low_Level::set_type(::Low_Level_Types value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:Low_Level.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Network::kChannelFieldNumber;
const int Network::kDataFieldNumber;
const int Network::kTypeFieldNumber;
const int Network::kProcessedFieldNumber;
const int Network::kTimeProcessedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Network::Network()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_net_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Network)
}
Network::Network(const Network& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  ::memcpy(&channel_, &from.channel_,
    reinterpret_cast<char*>(&processed_) -
    reinterpret_cast<char*>(&channel_) + sizeof(processed_));
  // @@protoc_insertion_point(copy_constructor:Network)
}

void Network::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&channel_, 0, reinterpret_cast<char*>(&processed_) -
    reinterpret_cast<char*>(&channel_) + sizeof(processed_));
  _cached_size_ = 0;
}

Network::~Network() {
  // @@protoc_insertion_point(destructor:Network)
  SharedDtor();
}

void Network::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Network::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Network& Network::default_instance() {
  protobuf_net_2eproto::InitDefaults();
  return *internal_default_instance();
}

Network* Network::New(::google::protobuf::Arena* arena) const {
  Network* n = new Network;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Network::Clear() {
// @@protoc_insertion_point(message_clear_start:Network)
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&channel_, 0, reinterpret_cast<char*>(&processed_) -
    reinterpret_cast<char*>(&channel_) + sizeof(processed_));
}

bool Network::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Network)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 channel = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes data = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Network.Types type = 3;
      case 3: {
        if (tag == 24u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::Network_Types >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool processed = 128;
      case 128: {
        if (tag == 1024u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &processed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 time_processed = 129;
      case 129: {
        if (tag == 1032u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_processed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Network)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Network)
  return false;
#undef DO_
}

void Network::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Network)
  // uint32 channel = 1;
  if (this->channel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->channel(), output);
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  // .Network.Types type = 3;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // bool processed = 128;
  if (this->processed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(128, this->processed(), output);
  }

  // uint64 time_processed = 129;
  if (this->time_processed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(129, this->time_processed(), output);
  }

  // @@protoc_insertion_point(serialize_end:Network)
}

size_t Network::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Network)
  size_t total_size = 0;

  // bytes data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // uint32 channel = 1;
  if (this->channel() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->channel());
  }

  // .Network.Types type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // uint64 time_processed = 129;
  if (this->time_processed() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time_processed());
  }

  // bool processed = 128;
  if (this->processed() != 0) {
    total_size += 2 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Network::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Network*>(&from));
}

void Network::MergeFrom(const Network& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Network)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.channel() != 0) {
    set_channel(from.channel());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.time_processed() != 0) {
    set_time_processed(from.time_processed());
  }
  if (from.processed() != 0) {
    set_processed(from.processed());
  }
}

void Network::CopyFrom(const Network& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Network)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Network::IsInitialized() const {
  return true;
}

void Network::Swap(Network* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Network::InternalSwap(Network* other) {
  data_.Swap(&other->data_);
  std::swap(channel_, other->channel_);
  std::swap(type_, other->type_);
  std::swap(time_processed_, other->time_processed_);
  std::swap(processed_, other->processed_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Network::GetTypeName() const {
  return "Network";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Network

// uint32 channel = 1;
void Network::clear_channel() {
  channel_ = 0u;
}
::google::protobuf::uint32 Network::channel() const {
  // @@protoc_insertion_point(field_get:Network.channel)
  return channel_;
}
void Network::set_channel(::google::protobuf::uint32 value) {
  
  channel_ = value;
  // @@protoc_insertion_point(field_set:Network.channel)
}

// bytes data = 2;
void Network::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Network::data() const {
  // @@protoc_insertion_point(field_get:Network.data)
  return data_.GetNoArena();
}
void Network::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Network.data)
}
#if LANG_CXX11
void Network::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Network.data)
}
#endif
void Network::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Network.data)
}
void Network::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Network.data)
}
::std::string* Network::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:Network.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Network::release_data() {
  // @@protoc_insertion_point(field_release:Network.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Network::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:Network.data)
}

// .Network.Types type = 3;
void Network::clear_type() {
  type_ = 0;
}
::Network_Types Network::type() const {
  // @@protoc_insertion_point(field_get:Network.type)
  return static_cast< ::Network_Types >(type_);
}
void Network::set_type(::Network_Types value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:Network.type)
}

// bool processed = 128;
void Network::clear_processed() {
  processed_ = false;
}
bool Network::processed() const {
  // @@protoc_insertion_point(field_get:Network.processed)
  return processed_;
}
void Network::set_processed(bool value) {
  
  processed_ = value;
  // @@protoc_insertion_point(field_set:Network.processed)
}

// uint64 time_processed = 129;
void Network::clear_time_processed() {
  time_processed_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Network::time_processed() const {
  // @@protoc_insertion_point(field_get:Network.time_processed)
  return time_processed_;
}
void Network::set_time_processed(::google::protobuf::uint64 value) {
  
  time_processed_ = value;
  // @@protoc_insertion_point(field_set:Network.time_processed)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Network_Old::kTypeFieldNumber;
const int Network_Old::kConnectionIdFieldNumber;
const int Network_Old::kConnectionIdFromFieldNumber;
const int Network_Old::kPortFieldNumber;
const int Network_Old::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Network_Old::Network_Old()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_net_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Network_Old)
}
Network_Old::Network_Old(const Network_Old& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  ::memcpy(&connection_id_, &from.connection_id_,
    reinterpret_cast<char*>(&connection_id_from_) -
    reinterpret_cast<char*>(&connection_id_) + sizeof(connection_id_from_));
  // @@protoc_insertion_point(copy_constructor:Network_Old)
}

void Network_Old::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&connection_id_, 0, reinterpret_cast<char*>(&connection_id_from_) -
    reinterpret_cast<char*>(&connection_id_) + sizeof(connection_id_from_));
  _cached_size_ = 0;
}

Network_Old::~Network_Old() {
  // @@protoc_insertion_point(destructor:Network_Old)
  SharedDtor();
}

void Network_Old::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Network_Old::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Network_Old& Network_Old::default_instance() {
  protobuf_net_2eproto::InitDefaults();
  return *internal_default_instance();
}

Network_Old* Network_Old::New(::google::protobuf::Arena* arena) const {
  Network_Old* n = new Network_Old;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Network_Old::Clear() {
// @@protoc_insertion_point(message_clear_start:Network_Old)
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&connection_id_, 0, reinterpret_cast<char*>(&connection_id_from_) -
    reinterpret_cast<char*>(&connection_id_) + sizeof(connection_id_from_));
}

bool Network_Old::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Network_Old)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Network_Old.Types type = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::Network_Old_Types >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 connection_id = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &connection_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 connection_id_from = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &connection_id_from_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 port = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes data = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Network_Old)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Network_Old)
  return false;
#undef DO_
}

void Network_Old::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Network_Old)
  // .Network_Old.Types type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // uint64 connection_id = 2;
  if (this->connection_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->connection_id(), output);
  }

  // uint64 connection_id_from = 3;
  if (this->connection_id_from() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->connection_id_from(), output);
  }

  // uint32 port = 4;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->port(), output);
  }

  // bytes data = 5;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->data(), output);
  }

  // @@protoc_insertion_point(serialize_end:Network_Old)
}

size_t Network_Old::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Network_Old)
  size_t total_size = 0;

  // bytes data = 5;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // uint64 connection_id = 2;
  if (this->connection_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->connection_id());
  }

  // .Network_Old.Types type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // uint32 port = 4;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->port());
  }

  // uint64 connection_id_from = 3;
  if (this->connection_id_from() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->connection_id_from());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Network_Old::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Network_Old*>(&from));
}

void Network_Old::MergeFrom(const Network_Old& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Network_Old)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.connection_id() != 0) {
    set_connection_id(from.connection_id());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
  if (from.connection_id_from() != 0) {
    set_connection_id_from(from.connection_id_from());
  }
}

void Network_Old::CopyFrom(const Network_Old& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Network_Old)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Network_Old::IsInitialized() const {
  return true;
}

void Network_Old::Swap(Network_Old* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Network_Old::InternalSwap(Network_Old* other) {
  data_.Swap(&other->data_);
  std::swap(connection_id_, other->connection_id_);
  std::swap(type_, other->type_);
  std::swap(port_, other->port_);
  std::swap(connection_id_from_, other->connection_id_from_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Network_Old::GetTypeName() const {
  return "Network_Old";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Network_Old

// .Network_Old.Types type = 1;
void Network_Old::clear_type() {
  type_ = 0;
}
::Network_Old_Types Network_Old::type() const {
  // @@protoc_insertion_point(field_get:Network_Old.type)
  return static_cast< ::Network_Old_Types >(type_);
}
void Network_Old::set_type(::Network_Old_Types value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:Network_Old.type)
}

// uint64 connection_id = 2;
void Network_Old::clear_connection_id() {
  connection_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Network_Old::connection_id() const {
  // @@protoc_insertion_point(field_get:Network_Old.connection_id)
  return connection_id_;
}
void Network_Old::set_connection_id(::google::protobuf::uint64 value) {
  
  connection_id_ = value;
  // @@protoc_insertion_point(field_set:Network_Old.connection_id)
}

// uint64 connection_id_from = 3;
void Network_Old::clear_connection_id_from() {
  connection_id_from_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Network_Old::connection_id_from() const {
  // @@protoc_insertion_point(field_get:Network_Old.connection_id_from)
  return connection_id_from_;
}
void Network_Old::set_connection_id_from(::google::protobuf::uint64 value) {
  
  connection_id_from_ = value;
  // @@protoc_insertion_point(field_set:Network_Old.connection_id_from)
}

// uint32 port = 4;
void Network_Old::clear_port() {
  port_ = 0u;
}
::google::protobuf::uint32 Network_Old::port() const {
  // @@protoc_insertion_point(field_get:Network_Old.port)
  return port_;
}
void Network_Old::set_port(::google::protobuf::uint32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:Network_Old.port)
}

// bytes data = 5;
void Network_Old::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Network_Old::data() const {
  // @@protoc_insertion_point(field_get:Network_Old.data)
  return data_.GetNoArena();
}
void Network_Old::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Network_Old.data)
}
#if LANG_CXX11
void Network_Old::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Network_Old.data)
}
#endif
void Network_Old::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Network_Old.data)
}
void Network_Old::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Network_Old.data)
}
::std::string* Network_Old::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:Network_Old.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Network_Old::release_data() {
  // @@protoc_insertion_point(field_release:Network_Old.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Network_Old::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:Network_Old.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Networking_Sockets::kTypeFieldNumber;
const int Networking_Sockets::kPortFieldNumber;
const int Networking_Sockets::kConnectionIdFieldNumber;
const int Networking_Sockets::kConnectionIdFromFieldNumber;
const int Networking_Sockets::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Networking_Sockets::Networking_Sockets()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_net_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Networking_Sockets)
}
Networking_Sockets::Networking_Sockets(const Networking_Sockets& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  ::memcpy(&type_, &from.type_,
    reinterpret_cast<char*>(&connection_id_from_) -
    reinterpret_cast<char*>(&type_) + sizeof(connection_id_from_));
  // @@protoc_insertion_point(copy_constructor:Networking_Sockets)
}

void Networking_Sockets::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, reinterpret_cast<char*>(&connection_id_from_) -
    reinterpret_cast<char*>(&type_) + sizeof(connection_id_from_));
  _cached_size_ = 0;
}

Networking_Sockets::~Networking_Sockets() {
  // @@protoc_insertion_point(destructor:Networking_Sockets)
  SharedDtor();
}

void Networking_Sockets::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Networking_Sockets::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Networking_Sockets& Networking_Sockets::default_instance() {
  protobuf_net_2eproto::InitDefaults();
  return *internal_default_instance();
}

Networking_Sockets* Networking_Sockets::New(::google::protobuf::Arena* arena) const {
  Networking_Sockets* n = new Networking_Sockets;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Networking_Sockets::Clear() {
// @@protoc_insertion_point(message_clear_start:Networking_Sockets)
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, reinterpret_cast<char*>(&connection_id_from_) -
    reinterpret_cast<char*>(&type_) + sizeof(connection_id_from_));
}

bool Networking_Sockets::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Networking_Sockets)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Networking_Sockets.Types type = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::Networking_Sockets_Types >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 port = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 connection_id = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &connection_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 connection_id_from = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &connection_id_from_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes data = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Networking_Sockets)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Networking_Sockets)
  return false;
#undef DO_
}

void Networking_Sockets::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Networking_Sockets)
  // .Networking_Sockets.Types type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // uint32 port = 2;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->port(), output);
  }

  // uint64 connection_id = 3;
  if (this->connection_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->connection_id(), output);
  }

  // uint64 connection_id_from = 4;
  if (this->connection_id_from() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->connection_id_from(), output);
  }

  // bytes data = 5;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->data(), output);
  }

  // @@protoc_insertion_point(serialize_end:Networking_Sockets)
}

size_t Networking_Sockets::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Networking_Sockets)
  size_t total_size = 0;

  // bytes data = 5;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // .Networking_Sockets.Types type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // uint32 port = 2;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->port());
  }

  // uint64 connection_id = 3;
  if (this->connection_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->connection_id());
  }

  // uint64 connection_id_from = 4;
  if (this->connection_id_from() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->connection_id_from());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Networking_Sockets::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Networking_Sockets*>(&from));
}

void Networking_Sockets::MergeFrom(const Networking_Sockets& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Networking_Sockets)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
  if (from.connection_id() != 0) {
    set_connection_id(from.connection_id());
  }
  if (from.connection_id_from() != 0) {
    set_connection_id_from(from.connection_id_from());
  }
}

void Networking_Sockets::CopyFrom(const Networking_Sockets& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Networking_Sockets)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Networking_Sockets::IsInitialized() const {
  return true;
}

void Networking_Sockets::Swap(Networking_Sockets* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Networking_Sockets::InternalSwap(Networking_Sockets* other) {
  data_.Swap(&other->data_);
  std::swap(type_, other->type_);
  std::swap(port_, other->port_);
  std::swap(connection_id_, other->connection_id_);
  std::swap(connection_id_from_, other->connection_id_from_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Networking_Sockets::GetTypeName() const {
  return "Networking_Sockets";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Networking_Sockets

// .Networking_Sockets.Types type = 1;
void Networking_Sockets::clear_type() {
  type_ = 0;
}
::Networking_Sockets_Types Networking_Sockets::type() const {
  // @@protoc_insertion_point(field_get:Networking_Sockets.type)
  return static_cast< ::Networking_Sockets_Types >(type_);
}
void Networking_Sockets::set_type(::Networking_Sockets_Types value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:Networking_Sockets.type)
}

// uint32 port = 2;
void Networking_Sockets::clear_port() {
  port_ = 0u;
}
::google::protobuf::uint32 Networking_Sockets::port() const {
  // @@protoc_insertion_point(field_get:Networking_Sockets.port)
  return port_;
}
void Networking_Sockets::set_port(::google::protobuf::uint32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:Networking_Sockets.port)
}

// uint64 connection_id = 3;
void Networking_Sockets::clear_connection_id() {
  connection_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Networking_Sockets::connection_id() const {
  // @@protoc_insertion_point(field_get:Networking_Sockets.connection_id)
  return connection_id_;
}
void Networking_Sockets::set_connection_id(::google::protobuf::uint64 value) {
  
  connection_id_ = value;
  // @@protoc_insertion_point(field_set:Networking_Sockets.connection_id)
}

// uint64 connection_id_from = 4;
void Networking_Sockets::clear_connection_id_from() {
  connection_id_from_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Networking_Sockets::connection_id_from() const {
  // @@protoc_insertion_point(field_get:Networking_Sockets.connection_id_from)
  return connection_id_from_;
}
void Networking_Sockets::set_connection_id_from(::google::protobuf::uint64 value) {
  
  connection_id_from_ = value;
  // @@protoc_insertion_point(field_set:Networking_Sockets.connection_id_from)
}

// bytes data = 5;
void Networking_Sockets::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Networking_Sockets::data() const {
  // @@protoc_insertion_point(field_get:Networking_Sockets.data)
  return data_.GetNoArena();
}
void Networking_Sockets::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Networking_Sockets.data)
}
#if LANG_CXX11
void Networking_Sockets::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Networking_Sockets.data)
}
#endif
void Networking_Sockets::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Networking_Sockets.data)
}
void Networking_Sockets::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Networking_Sockets.data)
}
::std::string* Networking_Sockets::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:Networking_Sockets.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Networking_Sockets::release_data() {
  // @@protoc_insertion_point(field_release:Networking_Sockets.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Networking_Sockets::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:Networking_Sockets.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Gameserver::kIdFieldNumber;
const int Gameserver::kGameDescriptionFieldNumber;
const int Gameserver::kModDirFieldNumber;
const int Gameserver::kDedicatedServerFieldNumber;
const int Gameserver::kMaxPlayerCountFieldNumber;
const int Gameserver::kBotPlayerCountFieldNumber;
const int Gameserver::kServerNameFieldNumber;
const int Gameserver::kMapNameFieldNumber;
const int Gameserver::kPasswordProtectedFieldNumber;
const int Gameserver::kSpectatorPortFieldNumber;
const int Gameserver::kSpectatorServerNameFieldNumber;
const int Gameserver::kValuesFieldNumber;
const int Gameserver::kTagsFieldNumber;
const int Gameserver::kGamedataFieldNumber;
const int Gameserver::kRegionFieldNumber;
const int Gameserver::kProductFieldNumber;
const int Gameserver::kSecureFieldNumber;
const int Gameserver::kNumPlayersFieldNumber;
const int Gameserver::kVersionFieldNumber;
const int Gameserver::kIpFieldNumber;
const int Gameserver::kPortFieldNumber;
const int Gameserver::kQueryPortFieldNumber;
const int Gameserver::kAppidFieldNumber;
const int Gameserver::kOfflineFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Gameserver::Gameserver()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_net_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Gameserver)
}
Gameserver::Gameserver(const Gameserver& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  values_.MergeFrom(from.values_);
  game_description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.game_description().size() > 0) {
    game_description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_description_);
  }
  mod_dir_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.mod_dir().size() > 0) {
    mod_dir_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mod_dir_);
  }
  server_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.server_name().size() > 0) {
    server_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_name_);
  }
  map_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.map_name().size() > 0) {
    map_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_name_);
  }
  spectator_server_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.spectator_server_name().size() > 0) {
    spectator_server_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.spectator_server_name_);
  }
  tags_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tags().size() > 0) {
    tags_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tags_);
  }
  gamedata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.gamedata().size() > 0) {
    gamedata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gamedata_);
  }
  region_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.region().size() > 0) {
    region_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.region_);
  }
  product_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.product().size() > 0) {
    product_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.product_);
  }
  ::memcpy(&id_, &from.id_,
    reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&id_) + sizeof(appid_));
  // @@protoc_insertion_point(copy_constructor:Gameserver)
}

void Gameserver::SharedCtor() {
  game_description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mod_dir_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  map_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  spectator_server_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tags_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gamedata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  region_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  product_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&id_) + sizeof(appid_));
  _cached_size_ = 0;
}

Gameserver::~Gameserver() {
  // @@protoc_insertion_point(destructor:Gameserver)
  SharedDtor();
}

void Gameserver::SharedDtor() {
  game_description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mod_dir_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  map_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  spectator_server_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tags_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gamedata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  region_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  product_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Gameserver::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Gameserver& Gameserver::default_instance() {
  protobuf_net_2eproto::InitDefaults();
  return *internal_default_instance();
}

Gameserver* Gameserver::New(::google::protobuf::Arena* arena) const {
  Gameserver* n = new Gameserver;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Gameserver::Clear() {
// @@protoc_insertion_point(message_clear_start:Gameserver)
  values_.Clear();
  game_description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mod_dir_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  map_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  spectator_server_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tags_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gamedata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  region_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  product_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&id_) + sizeof(appid_));
}

bool Gameserver::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Gameserver)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 id = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes game_description = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_game_description()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes mod_dir = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_mod_dir()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool dedicated_server = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dedicated_server_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 max_player_count = 5;
      case 5: {
        if (tag == 40u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_player_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 bot_player_count = 6;
      case 6: {
        if (tag == 48u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bot_player_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes server_name = 7;
      case 7: {
        if (tag == 58u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_server_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes map_name = 8;
      case 8: {
        if (tag == 66u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_map_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool password_protected = 9;
      case 9: {
        if (tag == 72u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &password_protected_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 spectator_port = 10;
      case 10: {
        if (tag == 80u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &spectator_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes spectator_server_name = 11;
      case 11: {
        if (tag == 90u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_spectator_server_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, bytes> values = 12;
      case 12: {
        if (tag == 98u) {
          DO_(input->IncrementRecursionDepth());
          Gameserver_ValuesEntry::Parser< ::google::protobuf::internal::MapFieldLite<
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_BYTES,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&values_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Gameserver.ValuesEntry.key"));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // bytes tags = 13;
      case 13: {
        if (tag == 106u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_tags()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes gamedata = 14;
      case 14: {
        if (tag == 114u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_gamedata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes region = 15;
      case 15: {
        if (tag == 122u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_region()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes product = 16;
      case 16: {
        if (tag == 130u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_product()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool secure = 17;
      case 17: {
        if (tag == 136u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &secure_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 num_players = 18;
      case 18: {
        if (tag == 144u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_players_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 version = 19;
      case 19: {
        if (tag == 152u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 ip = 32;
      case 32: {
        if (tag == 256u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 port = 33;
      case 33: {
        if (tag == 264u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 query_port = 34;
      case 34: {
        if (tag == 272u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &query_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 appid = 35;
      case 35: {
        if (tag == 280u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool offline = 48;
      case 48: {
        if (tag == 384u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &offline_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Gameserver)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Gameserver)
  return false;
#undef DO_
}

void Gameserver::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Gameserver)
  // uint64 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // bytes game_description = 2;
  if (this->game_description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->game_description(), output);
  }

  // bytes mod_dir = 3;
  if (this->mod_dir().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->mod_dir(), output);
  }

  // bool dedicated_server = 4;
  if (this->dedicated_server() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->dedicated_server(), output);
  }

  // uint32 max_player_count = 5;
  if (this->max_player_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->max_player_count(), output);
  }

  // uint32 bot_player_count = 6;
  if (this->bot_player_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->bot_player_count(), output);
  }

  // bytes server_name = 7;
  if (this->server_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->server_name(), output);
  }

  // bytes map_name = 8;
  if (this->map_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->map_name(), output);
  }

  // bool password_protected = 9;
  if (this->password_protected() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->password_protected(), output);
  }

  // uint32 spectator_port = 10;
  if (this->spectator_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->spectator_port(), output);
  }

  // bytes spectator_server_name = 11;
  if (this->spectator_server_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      11, this->spectator_server_name(), output);
  }

  // map<string, bytes> values = 12;
  if (!this->values().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "Gameserver.ValuesEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->values().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->values().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->values().begin();
          it != this->values().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Gameserver_ValuesEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(values_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            12, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Gameserver_ValuesEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->values().begin();
          it != this->values().end(); ++it) {
        entry.reset(values_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            12, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // bytes tags = 13;
  if (this->tags().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      13, this->tags(), output);
  }

  // bytes gamedata = 14;
  if (this->gamedata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      14, this->gamedata(), output);
  }

  // bytes region = 15;
  if (this->region().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      15, this->region(), output);
  }

  // bytes product = 16;
  if (this->product().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      16, this->product(), output);
  }

  // bool secure = 17;
  if (this->secure() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->secure(), output);
  }

  // uint32 num_players = 18;
  if (this->num_players() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->num_players(), output);
  }

  // uint32 version = 19;
  if (this->version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->version(), output);
  }

  // uint32 ip = 32;
  if (this->ip() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(32, this->ip(), output);
  }

  // uint32 port = 33;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(33, this->port(), output);
  }

  // uint32 query_port = 34;
  if (this->query_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(34, this->query_port(), output);
  }

  // uint32 appid = 35;
  if (this->appid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(35, this->appid(), output);
  }

  // bool offline = 48;
  if (this->offline() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(48, this->offline(), output);
  }

  // @@protoc_insertion_point(serialize_end:Gameserver)
}

size_t Gameserver::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Gameserver)
  size_t total_size = 0;

  // map<string, bytes> values = 12;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->values_size());
  {
    ::google::protobuf::scoped_ptr<Gameserver_ValuesEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->values().begin();
        it != this->values().end(); ++it) {
      entry.reset(values_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // bytes game_description = 2;
  if (this->game_description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->game_description());
  }

  // bytes mod_dir = 3;
  if (this->mod_dir().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->mod_dir());
  }

  // bytes server_name = 7;
  if (this->server_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->server_name());
  }

  // bytes map_name = 8;
  if (this->map_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->map_name());
  }

  // bytes spectator_server_name = 11;
  if (this->spectator_server_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->spectator_server_name());
  }

  // bytes tags = 13;
  if (this->tags().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->tags());
  }

  // bytes gamedata = 14;
  if (this->gamedata().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->gamedata());
  }

  // bytes region = 15;
  if (this->region().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->region());
  }

  // bytes product = 16;
  if (this->product().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->product());
  }

  // uint64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());
  }

  // uint32 max_player_count = 5;
  if (this->max_player_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->max_player_count());
  }

  // uint32 bot_player_count = 6;
  if (this->bot_player_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->bot_player_count());
  }

  // uint32 spectator_port = 10;
  if (this->spectator_port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->spectator_port());
  }

  // bool dedicated_server = 4;
  if (this->dedicated_server() != 0) {
    total_size += 1 + 1;
  }

  // bool password_protected = 9;
  if (this->password_protected() != 0) {
    total_size += 1 + 1;
  }

  // bool secure = 17;
  if (this->secure() != 0) {
    total_size += 2 + 1;
  }

  // bool offline = 48;
  if (this->offline() != 0) {
    total_size += 2 + 1;
  }

  // uint32 num_players = 18;
  if (this->num_players() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->num_players());
  }

  // uint32 version = 19;
  if (this->version() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->version());
  }

  // uint32 ip = 32;
  if (this->ip() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ip());
  }

  // uint32 port = 33;
  if (this->port() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->port());
  }

  // uint32 query_port = 34;
  if (this->query_port() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->query_port());
  }

  // uint32 appid = 35;
  if (this->appid() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->appid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Gameserver::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Gameserver*>(&from));
}

void Gameserver::MergeFrom(const Gameserver& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Gameserver)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  values_.MergeFrom(from.values_);
  if (from.game_description().size() > 0) {

    game_description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_description_);
  }
  if (from.mod_dir().size() > 0) {

    mod_dir_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mod_dir_);
  }
  if (from.server_name().size() > 0) {

    server_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_name_);
  }
  if (from.map_name().size() > 0) {

    map_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_name_);
  }
  if (from.spectator_server_name().size() > 0) {

    spectator_server_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.spectator_server_name_);
  }
  if (from.tags().size() > 0) {

    tags_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tags_);
  }
  if (from.gamedata().size() > 0) {

    gamedata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gamedata_);
  }
  if (from.region().size() > 0) {

    region_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.region_);
  }
  if (from.product().size() > 0) {

    product_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.product_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.max_player_count() != 0) {
    set_max_player_count(from.max_player_count());
  }
  if (from.bot_player_count() != 0) {
    set_bot_player_count(from.bot_player_count());
  }
  if (from.spectator_port() != 0) {
    set_spectator_port(from.spectator_port());
  }
  if (from.dedicated_server() != 0) {
    set_dedicated_server(from.dedicated_server());
  }
  if (from.password_protected() != 0) {
    set_password_protected(from.password_protected());
  }
  if (from.secure() != 0) {
    set_secure(from.secure());
  }
  if (from.offline() != 0) {
    set_offline(from.offline());
  }
  if (from.num_players() != 0) {
    set_num_players(from.num_players());
  }
  if (from.version() != 0) {
    set_version(from.version());
  }
  if (from.ip() != 0) {
    set_ip(from.ip());
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
  if (from.query_port() != 0) {
    set_query_port(from.query_port());
  }
  if (from.appid() != 0) {
    set_appid(from.appid());
  }
}

void Gameserver::CopyFrom(const Gameserver& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Gameserver)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gameserver::IsInitialized() const {
  return true;
}

void Gameserver::Swap(Gameserver* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Gameserver::InternalSwap(Gameserver* other) {
  values_.Swap(&other->values_);
  game_description_.Swap(&other->game_description_);
  mod_dir_.Swap(&other->mod_dir_);
  server_name_.Swap(&other->server_name_);
  map_name_.Swap(&other->map_name_);
  spectator_server_name_.Swap(&other->spectator_server_name_);
  tags_.Swap(&other->tags_);
  gamedata_.Swap(&other->gamedata_);
  region_.Swap(&other->region_);
  product_.Swap(&other->product_);
  std::swap(id_, other->id_);
  std::swap(max_player_count_, other->max_player_count_);
  std::swap(bot_player_count_, other->bot_player_count_);
  std::swap(spectator_port_, other->spectator_port_);
  std::swap(dedicated_server_, other->dedicated_server_);
  std::swap(password_protected_, other->password_protected_);
  std::swap(secure_, other->secure_);
  std::swap(offline_, other->offline_);
  std::swap(num_players_, other->num_players_);
  std::swap(version_, other->version_);
  std::swap(ip_, other->ip_);
  std::swap(port_, other->port_);
  std::swap(query_port_, other->query_port_);
  std::swap(appid_, other->appid_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Gameserver::GetTypeName() const {
  return "Gameserver";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Gameserver

// uint64 id = 1;
void Gameserver::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Gameserver::id() const {
  // @@protoc_insertion_point(field_get:Gameserver.id)
  return id_;
}
void Gameserver::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:Gameserver.id)
}

// bytes game_description = 2;
void Gameserver::clear_game_description() {
  game_description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Gameserver::game_description() const {
  // @@protoc_insertion_point(field_get:Gameserver.game_description)
  return game_description_.GetNoArena();
}
void Gameserver::set_game_description(const ::std::string& value) {
  
  game_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Gameserver.game_description)
}
#if LANG_CXX11
void Gameserver::set_game_description(::std::string&& value) {
  
  game_description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Gameserver.game_description)
}
#endif
void Gameserver::set_game_description(const char* value) {
  
  game_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Gameserver.game_description)
}
void Gameserver::set_game_description(const void* value, size_t size) {
  
  game_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Gameserver.game_description)
}
::std::string* Gameserver::mutable_game_description() {
  
  // @@protoc_insertion_point(field_mutable:Gameserver.game_description)
  return game_description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Gameserver::release_game_description() {
  // @@protoc_insertion_point(field_release:Gameserver.game_description)
  
  return game_description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Gameserver::set_allocated_game_description(::std::string* game_description) {
  if (game_description != NULL) {
    
  } else {
    
  }
  game_description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), game_description);
  // @@protoc_insertion_point(field_set_allocated:Gameserver.game_description)
}

// bytes mod_dir = 3;
void Gameserver::clear_mod_dir() {
  mod_dir_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Gameserver::mod_dir() const {
  // @@protoc_insertion_point(field_get:Gameserver.mod_dir)
  return mod_dir_.GetNoArena();
}
void Gameserver::set_mod_dir(const ::std::string& value) {
  
  mod_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Gameserver.mod_dir)
}
#if LANG_CXX11
void Gameserver::set_mod_dir(::std::string&& value) {
  
  mod_dir_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Gameserver.mod_dir)
}
#endif
void Gameserver::set_mod_dir(const char* value) {
  
  mod_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Gameserver.mod_dir)
}
void Gameserver::set_mod_dir(const void* value, size_t size) {
  
  mod_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Gameserver.mod_dir)
}
::std::string* Gameserver::mutable_mod_dir() {
  
  // @@protoc_insertion_point(field_mutable:Gameserver.mod_dir)
  return mod_dir_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Gameserver::release_mod_dir() {
  // @@protoc_insertion_point(field_release:Gameserver.mod_dir)
  
  return mod_dir_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Gameserver::set_allocated_mod_dir(::std::string* mod_dir) {
  if (mod_dir != NULL) {
    
  } else {
    
  }
  mod_dir_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mod_dir);
  // @@protoc_insertion_point(field_set_allocated:Gameserver.mod_dir)
}

// bool dedicated_server = 4;
void Gameserver::clear_dedicated_server() {
  dedicated_server_ = false;
}
bool Gameserver::dedicated_server() const {
  // @@protoc_insertion_point(field_get:Gameserver.dedicated_server)
  return dedicated_server_;
}
void Gameserver::set_dedicated_server(bool value) {
  
  dedicated_server_ = value;
  // @@protoc_insertion_point(field_set:Gameserver.dedicated_server)
}

// uint32 max_player_count = 5;
void Gameserver::clear_max_player_count() {
  max_player_count_ = 0u;
}
::google::protobuf::uint32 Gameserver::max_player_count() const {
  // @@protoc_insertion_point(field_get:Gameserver.max_player_count)
  return max_player_count_;
}
void Gameserver::set_max_player_count(::google::protobuf::uint32 value) {
  
  max_player_count_ = value;
  // @@protoc_insertion_point(field_set:Gameserver.max_player_count)
}

// uint32 bot_player_count = 6;
void Gameserver::clear_bot_player_count() {
  bot_player_count_ = 0u;
}
::google::protobuf::uint32 Gameserver::bot_player_count() const {
  // @@protoc_insertion_point(field_get:Gameserver.bot_player_count)
  return bot_player_count_;
}
void Gameserver::set_bot_player_count(::google::protobuf::uint32 value) {
  
  bot_player_count_ = value;
  // @@protoc_insertion_point(field_set:Gameserver.bot_player_count)
}

// bytes server_name = 7;
void Gameserver::clear_server_name() {
  server_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Gameserver::server_name() const {
  // @@protoc_insertion_point(field_get:Gameserver.server_name)
  return server_name_.GetNoArena();
}
void Gameserver::set_server_name(const ::std::string& value) {
  
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Gameserver.server_name)
}
#if LANG_CXX11
void Gameserver::set_server_name(::std::string&& value) {
  
  server_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Gameserver.server_name)
}
#endif
void Gameserver::set_server_name(const char* value) {
  
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Gameserver.server_name)
}
void Gameserver::set_server_name(const void* value, size_t size) {
  
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Gameserver.server_name)
}
::std::string* Gameserver::mutable_server_name() {
  
  // @@protoc_insertion_point(field_mutable:Gameserver.server_name)
  return server_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Gameserver::release_server_name() {
  // @@protoc_insertion_point(field_release:Gameserver.server_name)
  
  return server_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Gameserver::set_allocated_server_name(::std::string* server_name) {
  if (server_name != NULL) {
    
  } else {
    
  }
  server_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_name);
  // @@protoc_insertion_point(field_set_allocated:Gameserver.server_name)
}

// bytes map_name = 8;
void Gameserver::clear_map_name() {
  map_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Gameserver::map_name() const {
  // @@protoc_insertion_point(field_get:Gameserver.map_name)
  return map_name_.GetNoArena();
}
void Gameserver::set_map_name(const ::std::string& value) {
  
  map_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Gameserver.map_name)
}
#if LANG_CXX11
void Gameserver::set_map_name(::std::string&& value) {
  
  map_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Gameserver.map_name)
}
#endif
void Gameserver::set_map_name(const char* value) {
  
  map_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Gameserver.map_name)
}
void Gameserver::set_map_name(const void* value, size_t size) {
  
  map_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Gameserver.map_name)
}
::std::string* Gameserver::mutable_map_name() {
  
  // @@protoc_insertion_point(field_mutable:Gameserver.map_name)
  return map_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Gameserver::release_map_name() {
  // @@protoc_insertion_point(field_release:Gameserver.map_name)
  
  return map_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Gameserver::set_allocated_map_name(::std::string* map_name) {
  if (map_name != NULL) {
    
  } else {
    
  }
  map_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), map_name);
  // @@protoc_insertion_point(field_set_allocated:Gameserver.map_name)
}

// bool password_protected = 9;
void Gameserver::clear_password_protected() {
  password_protected_ = false;
}
bool Gameserver::password_protected() const {
  // @@protoc_insertion_point(field_get:Gameserver.password_protected)
  return password_protected_;
}
void Gameserver::set_password_protected(bool value) {
  
  password_protected_ = value;
  // @@protoc_insertion_point(field_set:Gameserver.password_protected)
}

// uint32 spectator_port = 10;
void Gameserver::clear_spectator_port() {
  spectator_port_ = 0u;
}
::google::protobuf::uint32 Gameserver::spectator_port() const {
  // @@protoc_insertion_point(field_get:Gameserver.spectator_port)
  return spectator_port_;
}
void Gameserver::set_spectator_port(::google::protobuf::uint32 value) {
  
  spectator_port_ = value;
  // @@protoc_insertion_point(field_set:Gameserver.spectator_port)
}

// bytes spectator_server_name = 11;
void Gameserver::clear_spectator_server_name() {
  spectator_server_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Gameserver::spectator_server_name() const {
  // @@protoc_insertion_point(field_get:Gameserver.spectator_server_name)
  return spectator_server_name_.GetNoArena();
}
void Gameserver::set_spectator_server_name(const ::std::string& value) {
  
  spectator_server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Gameserver.spectator_server_name)
}
#if LANG_CXX11
void Gameserver::set_spectator_server_name(::std::string&& value) {
  
  spectator_server_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Gameserver.spectator_server_name)
}
#endif
void Gameserver::set_spectator_server_name(const char* value) {
  
  spectator_server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Gameserver.spectator_server_name)
}
void Gameserver::set_spectator_server_name(const void* value, size_t size) {
  
  spectator_server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Gameserver.spectator_server_name)
}
::std::string* Gameserver::mutable_spectator_server_name() {
  
  // @@protoc_insertion_point(field_mutable:Gameserver.spectator_server_name)
  return spectator_server_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Gameserver::release_spectator_server_name() {
  // @@protoc_insertion_point(field_release:Gameserver.spectator_server_name)
  
  return spectator_server_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Gameserver::set_allocated_spectator_server_name(::std::string* spectator_server_name) {
  if (spectator_server_name != NULL) {
    
  } else {
    
  }
  spectator_server_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), spectator_server_name);
  // @@protoc_insertion_point(field_set_allocated:Gameserver.spectator_server_name)
}

// map<string, bytes> values = 12;
int Gameserver::values_size() const {
  return values_.size();
}
void Gameserver::clear_values() {
  values_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::std::string >&
Gameserver::values() const {
  // @@protoc_insertion_point(field_map:Gameserver.values)
  return values_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::std::string >*
Gameserver::mutable_values() {
  // @@protoc_insertion_point(field_mutable_map:Gameserver.values)
  return values_.MutableMap();
}

// bytes tags = 13;
void Gameserver::clear_tags() {
  tags_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Gameserver::tags() const {
  // @@protoc_insertion_point(field_get:Gameserver.tags)
  return tags_.GetNoArena();
}
void Gameserver::set_tags(const ::std::string& value) {
  
  tags_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Gameserver.tags)
}
#if LANG_CXX11
void Gameserver::set_tags(::std::string&& value) {
  
  tags_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Gameserver.tags)
}
#endif
void Gameserver::set_tags(const char* value) {
  
  tags_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Gameserver.tags)
}
void Gameserver::set_tags(const void* value, size_t size) {
  
  tags_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Gameserver.tags)
}
::std::string* Gameserver::mutable_tags() {
  
  // @@protoc_insertion_point(field_mutable:Gameserver.tags)
  return tags_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Gameserver::release_tags() {
  // @@protoc_insertion_point(field_release:Gameserver.tags)
  
  return tags_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Gameserver::set_allocated_tags(::std::string* tags) {
  if (tags != NULL) {
    
  } else {
    
  }
  tags_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tags);
  // @@protoc_insertion_point(field_set_allocated:Gameserver.tags)
}

// bytes gamedata = 14;
void Gameserver::clear_gamedata() {
  gamedata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Gameserver::gamedata() const {
  // @@protoc_insertion_point(field_get:Gameserver.gamedata)
  return gamedata_.GetNoArena();
}
void Gameserver::set_gamedata(const ::std::string& value) {
  
  gamedata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Gameserver.gamedata)
}
#if LANG_CXX11
void Gameserver::set_gamedata(::std::string&& value) {
  
  gamedata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Gameserver.gamedata)
}
#endif
void Gameserver::set_gamedata(const char* value) {
  
  gamedata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Gameserver.gamedata)
}
void Gameserver::set_gamedata(const void* value, size_t size) {
  
  gamedata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Gameserver.gamedata)
}
::std::string* Gameserver::mutable_gamedata() {
  
  // @@protoc_insertion_point(field_mutable:Gameserver.gamedata)
  return gamedata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Gameserver::release_gamedata() {
  // @@protoc_insertion_point(field_release:Gameserver.gamedata)
  
  return gamedata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Gameserver::set_allocated_gamedata(::std::string* gamedata) {
  if (gamedata != NULL) {
    
  } else {
    
  }
  gamedata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gamedata);
  // @@protoc_insertion_point(field_set_allocated:Gameserver.gamedata)
}

// bytes region = 15;
void Gameserver::clear_region() {
  region_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Gameserver::region() const {
  // @@protoc_insertion_point(field_get:Gameserver.region)
  return region_.GetNoArena();
}
void Gameserver::set_region(const ::std::string& value) {
  
  region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Gameserver.region)
}
#if LANG_CXX11
void Gameserver::set_region(::std::string&& value) {
  
  region_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Gameserver.region)
}
#endif
void Gameserver::set_region(const char* value) {
  
  region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Gameserver.region)
}
void Gameserver::set_region(const void* value, size_t size) {
  
  region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Gameserver.region)
}
::std::string* Gameserver::mutable_region() {
  
  // @@protoc_insertion_point(field_mutable:Gameserver.region)
  return region_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Gameserver::release_region() {
  // @@protoc_insertion_point(field_release:Gameserver.region)
  
  return region_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Gameserver::set_allocated_region(::std::string* region) {
  if (region != NULL) {
    
  } else {
    
  }
  region_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), region);
  // @@protoc_insertion_point(field_set_allocated:Gameserver.region)
}

// bytes product = 16;
void Gameserver::clear_product() {
  product_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Gameserver::product() const {
  // @@protoc_insertion_point(field_get:Gameserver.product)
  return product_.GetNoArena();
}
void Gameserver::set_product(const ::std::string& value) {
  
  product_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Gameserver.product)
}
#if LANG_CXX11
void Gameserver::set_product(::std::string&& value) {
  
  product_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Gameserver.product)
}
#endif
void Gameserver::set_product(const char* value) {
  
  product_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Gameserver.product)
}
void Gameserver::set_product(const void* value, size_t size) {
  
  product_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Gameserver.product)
}
::std::string* Gameserver::mutable_product() {
  
  // @@protoc_insertion_point(field_mutable:Gameserver.product)
  return product_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Gameserver::release_product() {
  // @@protoc_insertion_point(field_release:Gameserver.product)
  
  return product_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Gameserver::set_allocated_product(::std::string* product) {
  if (product != NULL) {
    
  } else {
    
  }
  product_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), product);
  // @@protoc_insertion_point(field_set_allocated:Gameserver.product)
}

// bool secure = 17;
void Gameserver::clear_secure() {
  secure_ = false;
}
bool Gameserver::secure() const {
  // @@protoc_insertion_point(field_get:Gameserver.secure)
  return secure_;
}
void Gameserver::set_secure(bool value) {
  
  secure_ = value;
  // @@protoc_insertion_point(field_set:Gameserver.secure)
}

// uint32 num_players = 18;
void Gameserver::clear_num_players() {
  num_players_ = 0u;
}
::google::protobuf::uint32 Gameserver::num_players() const {
  // @@protoc_insertion_point(field_get:Gameserver.num_players)
  return num_players_;
}
void Gameserver::set_num_players(::google::protobuf::uint32 value) {
  
  num_players_ = value;
  // @@protoc_insertion_point(field_set:Gameserver.num_players)
}

// uint32 version = 19;
void Gameserver::clear_version() {
  version_ = 0u;
}
::google::protobuf::uint32 Gameserver::version() const {
  // @@protoc_insertion_point(field_get:Gameserver.version)
  return version_;
}
void Gameserver::set_version(::google::protobuf::uint32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:Gameserver.version)
}

// uint32 ip = 32;
void Gameserver::clear_ip() {
  ip_ = 0u;
}
::google::protobuf::uint32 Gameserver::ip() const {
  // @@protoc_insertion_point(field_get:Gameserver.ip)
  return ip_;
}
void Gameserver::set_ip(::google::protobuf::uint32 value) {
  
  ip_ = value;
  // @@protoc_insertion_point(field_set:Gameserver.ip)
}

// uint32 port = 33;
void Gameserver::clear_port() {
  port_ = 0u;
}
::google::protobuf::uint32 Gameserver::port() const {
  // @@protoc_insertion_point(field_get:Gameserver.port)
  return port_;
}
void Gameserver::set_port(::google::protobuf::uint32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:Gameserver.port)
}

// uint32 query_port = 34;
void Gameserver::clear_query_port() {
  query_port_ = 0u;
}
::google::protobuf::uint32 Gameserver::query_port() const {
  // @@protoc_insertion_point(field_get:Gameserver.query_port)
  return query_port_;
}
void Gameserver::set_query_port(::google::protobuf::uint32 value) {
  
  query_port_ = value;
  // @@protoc_insertion_point(field_set:Gameserver.query_port)
}

// uint32 appid = 35;
void Gameserver::clear_appid() {
  appid_ = 0u;
}
::google::protobuf::uint32 Gameserver::appid() const {
  // @@protoc_insertion_point(field_get:Gameserver.appid)
  return appid_;
}
void Gameserver::set_appid(::google::protobuf::uint32 value) {
  
  appid_ = value;
  // @@protoc_insertion_point(field_set:Gameserver.appid)
}

// bool offline = 48;
void Gameserver::clear_offline() {
  offline_ = false;
}
bool Gameserver::offline() const {
  // @@protoc_insertion_point(field_get:Gameserver.offline)
  return offline_;
}
void Gameserver::set_offline(bool value) {
  
  offline_ = value;
  // @@protoc_insertion_point(field_set:Gameserver.offline)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Friend::kIdFieldNumber;
const int Friend::kNameFieldNumber;
const int Friend::kRichPresenceFieldNumber;
const int Friend::kAppidFieldNumber;
const int Friend::kLobbyIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Friend::Friend()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_net_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Friend)
}
Friend::Friend(const Friend& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rich_presence_.MergeFrom(from.rich_presence_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&id_, &from.id_,
    reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&id_) + sizeof(appid_));
  // @@protoc_insertion_point(copy_constructor:Friend)
}

void Friend::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&id_) + sizeof(appid_));
  _cached_size_ = 0;
}

Friend::~Friend() {
  // @@protoc_insertion_point(destructor:Friend)
  SharedDtor();
}

void Friend::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Friend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Friend& Friend::default_instance() {
  protobuf_net_2eproto::InitDefaults();
  return *internal_default_instance();
}

Friend* Friend::New(::google::protobuf::Arena* arena) const {
  Friend* n = new Friend;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Friend::Clear() {
// @@protoc_insertion_point(message_clear_start:Friend)
  rich_presence_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&id_) + sizeof(appid_));
}

bool Friend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Friend)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 id = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes name = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, bytes> rich_presence = 3;
      case 3: {
        if (tag == 26u) {
          DO_(input->IncrementRecursionDepth());
          Friend_RichPresenceEntry::Parser< ::google::protobuf::internal::MapFieldLite<
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_BYTES,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&rich_presence_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Friend.RichPresenceEntry.key"));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // uint32 appid = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 lobby_id = 5;
      case 5: {
        if (tag == 40u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lobby_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Friend)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Friend)
  return false;
#undef DO_
}

void Friend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Friend)
  // uint64 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // bytes name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->name(), output);
  }

  // map<string, bytes> rich_presence = 3;
  if (!this->rich_presence().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "Friend.RichPresenceEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->rich_presence().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->rich_presence().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->rich_presence().begin();
          it != this->rich_presence().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Friend_RichPresenceEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(rich_presence_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            3, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Friend_RichPresenceEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->rich_presence().begin();
          it != this->rich_presence().end(); ++it) {
        entry.reset(rich_presence_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            3, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // uint32 appid = 4;
  if (this->appid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->appid(), output);
  }

  // uint64 lobby_id = 5;
  if (this->lobby_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->lobby_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:Friend)
}

size_t Friend::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Friend)
  size_t total_size = 0;

  // map<string, bytes> rich_presence = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->rich_presence_size());
  {
    ::google::protobuf::scoped_ptr<Friend_RichPresenceEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->rich_presence().begin();
        it != this->rich_presence().end(); ++it) {
      entry.reset(rich_presence_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // bytes name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->name());
  }

  // uint64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());
  }

  // uint64 lobby_id = 5;
  if (this->lobby_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->lobby_id());
  }

  // uint32 appid = 4;
  if (this->appid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->appid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Friend::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Friend*>(&from));
}

void Friend::MergeFrom(const Friend& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Friend)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rich_presence_.MergeFrom(from.rich_presence_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.lobby_id() != 0) {
    set_lobby_id(from.lobby_id());
  }
  if (from.appid() != 0) {
    set_appid(from.appid());
  }
}

void Friend::CopyFrom(const Friend& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Friend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Friend::IsInitialized() const {
  return true;
}

void Friend::Swap(Friend* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Friend::InternalSwap(Friend* other) {
  rich_presence_.Swap(&other->rich_presence_);
  name_.Swap(&other->name_);
  std::swap(id_, other->id_);
  std::swap(lobby_id_, other->lobby_id_);
  std::swap(appid_, other->appid_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Friend::GetTypeName() const {
  return "Friend";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Friend

// uint64 id = 1;
void Friend::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Friend::id() const {
  // @@protoc_insertion_point(field_get:Friend.id)
  return id_;
}
void Friend::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:Friend.id)
}

// bytes name = 2;
void Friend::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Friend::name() const {
  // @@protoc_insertion_point(field_get:Friend.name)
  return name_.GetNoArena();
}
void Friend::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Friend.name)
}
#if LANG_CXX11
void Friend::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Friend.name)
}
#endif
void Friend::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Friend.name)
}
void Friend::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Friend.name)
}
::std::string* Friend::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Friend.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Friend::release_name() {
  // @@protoc_insertion_point(field_release:Friend.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Friend::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Friend.name)
}

// map<string, bytes> rich_presence = 3;
int Friend::rich_presence_size() const {
  return rich_presence_.size();
}
void Friend::clear_rich_presence() {
  rich_presence_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::std::string >&
Friend::rich_presence() const {
  // @@protoc_insertion_point(field_map:Friend.rich_presence)
  return rich_presence_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::std::string >*
Friend::mutable_rich_presence() {
  // @@protoc_insertion_point(field_mutable_map:Friend.rich_presence)
  return rich_presence_.MutableMap();
}

// uint32 appid = 4;
void Friend::clear_appid() {
  appid_ = 0u;
}
::google::protobuf::uint32 Friend::appid() const {
  // @@protoc_insertion_point(field_get:Friend.appid)
  return appid_;
}
void Friend::set_appid(::google::protobuf::uint32 value) {
  
  appid_ = value;
  // @@protoc_insertion_point(field_set:Friend.appid)
}

// uint64 lobby_id = 5;
void Friend::clear_lobby_id() {
  lobby_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Friend::lobby_id() const {
  // @@protoc_insertion_point(field_get:Friend.lobby_id)
  return lobby_id_;
}
void Friend::set_lobby_id(::google::protobuf::uint64 value) {
  
  lobby_id_ = value;
  // @@protoc_insertion_point(field_set:Friend.lobby_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Auth_Ticket::kNumberFieldNumber;
const int Auth_Ticket::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Auth_Ticket::Auth_Ticket()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_net_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Auth_Ticket)
}
Auth_Ticket::Auth_Ticket(const Auth_Ticket& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&number_, &from.number_,
    reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&number_) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:Auth_Ticket)
}

void Auth_Ticket::SharedCtor() {
  ::memset(&number_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&number_) + sizeof(type_));
  _cached_size_ = 0;
}

Auth_Ticket::~Auth_Ticket() {
  // @@protoc_insertion_point(destructor:Auth_Ticket)
  SharedDtor();
}

void Auth_Ticket::SharedDtor() {
}

void Auth_Ticket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Auth_Ticket& Auth_Ticket::default_instance() {
  protobuf_net_2eproto::InitDefaults();
  return *internal_default_instance();
}

Auth_Ticket* Auth_Ticket::New(::google::protobuf::Arena* arena) const {
  Auth_Ticket* n = new Auth_Ticket;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Auth_Ticket::Clear() {
// @@protoc_insertion_point(message_clear_start:Auth_Ticket)
  ::memset(&number_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&number_) + sizeof(type_));
}

bool Auth_Ticket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Auth_Ticket)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 number = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Auth_Ticket.Types type = 2;
      case 2: {
        if (tag == 16u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::Auth_Ticket_Types >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Auth_Ticket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Auth_Ticket)
  return false;
#undef DO_
}

void Auth_Ticket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Auth_Ticket)
  // uint32 number = 1;
  if (this->number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->number(), output);
  }

  // .Auth_Ticket.Types type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // @@protoc_insertion_point(serialize_end:Auth_Ticket)
}

size_t Auth_Ticket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Auth_Ticket)
  size_t total_size = 0;

  // uint32 number = 1;
  if (this->number() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->number());
  }

  // .Auth_Ticket.Types type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Auth_Ticket::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Auth_Ticket*>(&from));
}

void Auth_Ticket::MergeFrom(const Auth_Ticket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Auth_Ticket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.number() != 0) {
    set_number(from.number());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void Auth_Ticket::CopyFrom(const Auth_Ticket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Auth_Ticket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Auth_Ticket::IsInitialized() const {
  return true;
}

void Auth_Ticket::Swap(Auth_Ticket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Auth_Ticket::InternalSwap(Auth_Ticket* other) {
  std::swap(number_, other->number_);
  std::swap(type_, other->type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Auth_Ticket::GetTypeName() const {
  return "Auth_Ticket";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Auth_Ticket

// uint32 number = 1;
void Auth_Ticket::clear_number() {
  number_ = 0u;
}
::google::protobuf::uint32 Auth_Ticket::number() const {
  // @@protoc_insertion_point(field_get:Auth_Ticket.number)
  return number_;
}
void Auth_Ticket::set_number(::google::protobuf::uint32 value) {
  
  number_ = value;
  // @@protoc_insertion_point(field_set:Auth_Ticket.number)
}

// .Auth_Ticket.Types type = 2;
void Auth_Ticket::clear_type() {
  type_ = 0;
}
::Auth_Ticket_Types Auth_Ticket::type() const {
  // @@protoc_insertion_point(field_get:Auth_Ticket.type)
  return static_cast< ::Auth_Ticket_Types >(type_);
}
void Auth_Ticket::set_type(::Auth_Ticket_Types value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:Auth_Ticket.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Friend_Messages::kTypeFieldNumber;
const int Friend_Messages::kLobbyIdFieldNumber;
const int Friend_Messages::kConnectStrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Friend_Messages::Friend_Messages()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_net_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Friend_Messages)
}
Friend_Messages::Friend_Messages(const Friend_Messages& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  clear_has_invite_data();
  switch (from.invite_data_case()) {
    case kLobbyId: {
      set_lobby_id(from.lobby_id());
      break;
    }
    case kConnectStr: {
      set_connect_str(from.connect_str());
      break;
    }
    case INVITE_DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:Friend_Messages)
}

void Friend_Messages::SharedCtor() {
  type_ = 0;
  clear_has_invite_data();
  _cached_size_ = 0;
}

Friend_Messages::~Friend_Messages() {
  // @@protoc_insertion_point(destructor:Friend_Messages)
  SharedDtor();
}

void Friend_Messages::SharedDtor() {
  if (has_invite_data()) {
    clear_invite_data();
  }
}

void Friend_Messages::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Friend_Messages& Friend_Messages::default_instance() {
  protobuf_net_2eproto::InitDefaults();
  return *internal_default_instance();
}

Friend_Messages* Friend_Messages::New(::google::protobuf::Arena* arena) const {
  Friend_Messages* n = new Friend_Messages;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Friend_Messages::clear_invite_data() {
// @@protoc_insertion_point(one_of_clear_start:Friend_Messages)
  switch (invite_data_case()) {
    case kLobbyId: {
      // No need to clear
      break;
    }
    case kConnectStr: {
      invite_data_.connect_str_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case INVITE_DATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = INVITE_DATA_NOT_SET;
}


void Friend_Messages::Clear() {
// @@protoc_insertion_point(message_clear_start:Friend_Messages)
  type_ = 0;
  clear_invite_data();
}

bool Friend_Messages::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Friend_Messages)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Friend_Messages.Types type = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::Friend_Messages_Types >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 lobby_id = 2;
      case 2: {
        if (tag == 16u) {
          clear_invite_data();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &invite_data_.lobby_id_)));
          set_has_lobby_id();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes connect_str = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_connect_str()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Friend_Messages)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Friend_Messages)
  return false;
#undef DO_
}

void Friend_Messages::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Friend_Messages)
  // .Friend_Messages.Types type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // uint64 lobby_id = 2;
  if (has_lobby_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->lobby_id(), output);
  }

  // bytes connect_str = 3;
  if (has_connect_str()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->connect_str(), output);
  }

  // @@protoc_insertion_point(serialize_end:Friend_Messages)
}

size_t Friend_Messages::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Friend_Messages)
  size_t total_size = 0;

  // .Friend_Messages.Types type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  switch (invite_data_case()) {
    // uint64 lobby_id = 2;
    case kLobbyId: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lobby_id());
      break;
    }
    // bytes connect_str = 3;
    case kConnectStr: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->connect_str());
      break;
    }
    case INVITE_DATA_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Friend_Messages::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Friend_Messages*>(&from));
}

void Friend_Messages::MergeFrom(const Friend_Messages& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Friend_Messages)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.type() != 0) {
    set_type(from.type());
  }
  switch (from.invite_data_case()) {
    case kLobbyId: {
      set_lobby_id(from.lobby_id());
      break;
    }
    case kConnectStr: {
      set_connect_str(from.connect_str());
      break;
    }
    case INVITE_DATA_NOT_SET: {
      break;
    }
  }
}

void Friend_Messages::CopyFrom(const Friend_Messages& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Friend_Messages)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Friend_Messages::IsInitialized() const {
  return true;
}

void Friend_Messages::Swap(Friend_Messages* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Friend_Messages::InternalSwap(Friend_Messages* other) {
  std::swap(type_, other->type_);
  std::swap(invite_data_, other->invite_data_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Friend_Messages::GetTypeName() const {
  return "Friend_Messages";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Friend_Messages

// .Friend_Messages.Types type = 1;
void Friend_Messages::clear_type() {
  type_ = 0;
}
::Friend_Messages_Types Friend_Messages::type() const {
  // @@protoc_insertion_point(field_get:Friend_Messages.type)
  return static_cast< ::Friend_Messages_Types >(type_);
}
void Friend_Messages::set_type(::Friend_Messages_Types value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:Friend_Messages.type)
}

// uint64 lobby_id = 2;
bool Friend_Messages::has_lobby_id() const {
  return invite_data_case() == kLobbyId;
}
void Friend_Messages::set_has_lobby_id() {
  _oneof_case_[0] = kLobbyId;
}
void Friend_Messages::clear_lobby_id() {
  if (has_lobby_id()) {
    invite_data_.lobby_id_ = GOOGLE_ULONGLONG(0);
    clear_has_invite_data();
  }
}
::google::protobuf::uint64 Friend_Messages::lobby_id() const {
  // @@protoc_insertion_point(field_get:Friend_Messages.lobby_id)
  if (has_lobby_id()) {
    return invite_data_.lobby_id_;
  }
  return GOOGLE_ULONGLONG(0);
}
void Friend_Messages::set_lobby_id(::google::protobuf::uint64 value) {
  if (!has_lobby_id()) {
    clear_invite_data();
    set_has_lobby_id();
  }
  invite_data_.lobby_id_ = value;
  // @@protoc_insertion_point(field_set:Friend_Messages.lobby_id)
}

// bytes connect_str = 3;
bool Friend_Messages::has_connect_str() const {
  return invite_data_case() == kConnectStr;
}
void Friend_Messages::set_has_connect_str() {
  _oneof_case_[0] = kConnectStr;
}
void Friend_Messages::clear_connect_str() {
  if (has_connect_str()) {
    invite_data_.connect_str_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_invite_data();
  }
}
const ::std::string& Friend_Messages::connect_str() const {
  // @@protoc_insertion_point(field_get:Friend_Messages.connect_str)
  if (has_connect_str()) {
    return invite_data_.connect_str_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void Friend_Messages::set_connect_str(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Friend_Messages.connect_str)
  if (!has_connect_str()) {
    clear_invite_data();
    set_has_connect_str();
    invite_data_.connect_str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  invite_data_.connect_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Friend_Messages.connect_str)
}
#if LANG_CXX11
void Friend_Messages::set_connect_str(::std::string&& value) {
  // @@protoc_insertion_point(field_set:Friend_Messages.connect_str)
  if (!has_connect_str()) {
    clear_invite_data();
    set_has_connect_str();
    invite_data_.connect_str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  invite_data_.connect_str_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Friend_Messages.connect_str)
}
#endif
void Friend_Messages::set_connect_str(const char* value) {
  if (!has_connect_str()) {
    clear_invite_data();
    set_has_connect_str();
    invite_data_.connect_str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  invite_data_.connect_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Friend_Messages.connect_str)
}
void Friend_Messages::set_connect_str(const void* value, size_t size) {
  if (!has_connect_str()) {
    clear_invite_data();
    set_has_connect_str();
    invite_data_.connect_str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  invite_data_.connect_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Friend_Messages.connect_str)
}
::std::string* Friend_Messages::mutable_connect_str() {
  if (!has_connect_str()) {
    clear_invite_data();
    set_has_connect_str();
    invite_data_.connect_str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:Friend_Messages.connect_str)
  return invite_data_.connect_str_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Friend_Messages::release_connect_str() {
  // @@protoc_insertion_point(field_release:Friend_Messages.connect_str)
  if (has_connect_str()) {
    clear_has_invite_data();
    return invite_data_.connect_str_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void Friend_Messages::set_allocated_connect_str(::std::string* connect_str) {
  if (!has_connect_str()) {
    invite_data_.connect_str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_invite_data();
  if (connect_str != NULL) {
    set_has_connect_str();
    invite_data_.connect_str_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        connect_str);
  }
  // @@protoc_insertion_point(field_set_allocated:Friend_Messages.connect_str)
}

bool Friend_Messages::has_invite_data() const {
  return invite_data_case() != INVITE_DATA_NOT_SET;
}
void Friend_Messages::clear_has_invite_data() {
  _oneof_case_[0] = INVITE_DATA_NOT_SET;
}
Friend_Messages::InviteDataCase Friend_Messages::invite_data_case() const {
  return Friend_Messages::InviteDataCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Common_Message::kSourceIdFieldNumber;
const int Common_Message::kDestIdFieldNumber;
const int Common_Message::kAnnounceFieldNumber;
const int Common_Message::kLowLevelFieldNumber;
const int Common_Message::kLobbyFieldNumber;
const int Common_Message::kLobbyMessagesFieldNumber;
const int Common_Message::kNetworkFieldNumber;
const int Common_Message::kGameserverFieldNumber;
const int Common_Message::kFriendFieldNumber;
const int Common_Message::kAuthTicketFieldNumber;
const int Common_Message::kFriendMessagesFieldNumber;
const int Common_Message::kNetworkOldFieldNumber;
const int Common_Message::kNetworkingSocketsFieldNumber;
const int Common_Message::kSourceIpFieldNumber;
const int Common_Message::kSourcePortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Common_Message::Common_Message()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_net_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Common_Message)
}
Common_Message::Common_Message(const Common_Message& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&source_id_, &from.source_id_,
    reinterpret_cast<char*>(&source_port_) -
    reinterpret_cast<char*>(&source_id_) + sizeof(source_port_));
  clear_has_messages();
  switch (from.messages_case()) {
    case kAnnounce: {
      mutable_announce()->::Announce::MergeFrom(from.announce());
      break;
    }
    case kLowLevel: {
      mutable_low_level()->::Low_Level::MergeFrom(from.low_level());
      break;
    }
    case kLobby: {
      mutable_lobby()->::Lobby::MergeFrom(from.lobby());
      break;
    }
    case kLobbyMessages: {
      mutable_lobby_messages()->::Lobby_Messages::MergeFrom(from.lobby_messages());
      break;
    }
    case kNetwork: {
      mutable_network()->::Network::MergeFrom(from.network());
      break;
    }
    case kGameserver: {
      mutable_gameserver()->::Gameserver::MergeFrom(from.gameserver());
      break;
    }
    case kFriend: {
      mutable_friend_()->::Friend::MergeFrom(from.friend_());
      break;
    }
    case kAuthTicket: {
      mutable_auth_ticket()->::Auth_Ticket::MergeFrom(from.auth_ticket());
      break;
    }
    case kFriendMessages: {
      mutable_friend_messages()->::Friend_Messages::MergeFrom(from.friend_messages());
      break;
    }
    case kNetworkOld: {
      mutable_network_old()->::Network_Old::MergeFrom(from.network_old());
      break;
    }
    case kNetworkingSockets: {
      mutable_networking_sockets()->::Networking_Sockets::MergeFrom(from.networking_sockets());
      break;
    }
    case MESSAGES_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:Common_Message)
}

void Common_Message::SharedCtor() {
  ::memset(&source_id_, 0, reinterpret_cast<char*>(&source_port_) -
    reinterpret_cast<char*>(&source_id_) + sizeof(source_port_));
  clear_has_messages();
  _cached_size_ = 0;
}

Common_Message::~Common_Message() {
  // @@protoc_insertion_point(destructor:Common_Message)
  SharedDtor();
}

void Common_Message::SharedDtor() {
  if (has_messages()) {
    clear_messages();
  }
}

void Common_Message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Common_Message& Common_Message::default_instance() {
  protobuf_net_2eproto::InitDefaults();
  return *internal_default_instance();
}

Common_Message* Common_Message::New(::google::protobuf::Arena* arena) const {
  Common_Message* n = new Common_Message;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Common_Message::clear_messages() {
// @@protoc_insertion_point(one_of_clear_start:Common_Message)
  switch (messages_case()) {
    case kAnnounce: {
      delete messages_.announce_;
      break;
    }
    case kLowLevel: {
      delete messages_.low_level_;
      break;
    }
    case kLobby: {
      delete messages_.lobby_;
      break;
    }
    case kLobbyMessages: {
      delete messages_.lobby_messages_;
      break;
    }
    case kNetwork: {
      delete messages_.network_;
      break;
    }
    case kGameserver: {
      delete messages_.gameserver_;
      break;
    }
    case kFriend: {
      delete messages_.friend__;
      break;
    }
    case kAuthTicket: {
      delete messages_.auth_ticket_;
      break;
    }
    case kFriendMessages: {
      delete messages_.friend_messages_;
      break;
    }
    case kNetworkOld: {
      delete messages_.network_old_;
      break;
    }
    case kNetworkingSockets: {
      delete messages_.networking_sockets_;
      break;
    }
    case MESSAGES_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MESSAGES_NOT_SET;
}


void Common_Message::Clear() {
// @@protoc_insertion_point(message_clear_start:Common_Message)
  ::memset(&source_id_, 0, reinterpret_cast<char*>(&source_port_) -
    reinterpret_cast<char*>(&source_id_) + sizeof(source_port_));
  clear_messages();
}

bool Common_Message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Common_Message)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 source_id = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &source_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 dest_id = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dest_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Announce announce = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_announce()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Low_Level low_level = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_low_level()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Lobby lobby = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lobby()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Lobby_Messages lobby_messages = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lobby_messages()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Network network = 7;
      case 7: {
        if (tag == 58u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_network()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Gameserver gameserver = 8;
      case 8: {
        if (tag == 66u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gameserver()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Friend friend = 9;
      case 9: {
        if (tag == 74u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_friend_()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Auth_Ticket auth_ticket = 10;
      case 10: {
        if (tag == 82u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_auth_ticket()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Friend_Messages friend_messages = 11;
      case 11: {
        if (tag == 90u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_friend_messages()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Network_Old network_old = 12;
      case 12: {
        if (tag == 98u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_network_old()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Networking_Sockets networking_sockets = 13;
      case 13: {
        if (tag == 106u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_networking_sockets()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 source_ip = 128;
      case 128: {
        if (tag == 1024u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 source_port = 129;
      case 129: {
        if (tag == 1032u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Common_Message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Common_Message)
  return false;
#undef DO_
}

void Common_Message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Common_Message)
  // uint64 source_id = 1;
  if (this->source_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->source_id(), output);
  }

  // uint64 dest_id = 2;
  if (this->dest_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->dest_id(), output);
  }

  // .Announce announce = 3;
  if (has_announce()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *messages_.announce_, output);
  }

  // .Low_Level low_level = 4;
  if (has_low_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, *messages_.low_level_, output);
  }

  // .Lobby lobby = 5;
  if (has_lobby()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, *messages_.lobby_, output);
  }

  // .Lobby_Messages lobby_messages = 6;
  if (has_lobby_messages()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, *messages_.lobby_messages_, output);
  }

  // .Network network = 7;
  if (has_network()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, *messages_.network_, output);
  }

  // .Gameserver gameserver = 8;
  if (has_gameserver()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, *messages_.gameserver_, output);
  }

  // .Friend friend = 9;
  if (has_friend_()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, *messages_.friend__, output);
  }

  // .Auth_Ticket auth_ticket = 10;
  if (has_auth_ticket()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, *messages_.auth_ticket_, output);
  }

  // .Friend_Messages friend_messages = 11;
  if (has_friend_messages()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11, *messages_.friend_messages_, output);
  }

  // .Network_Old network_old = 12;
  if (has_network_old()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      12, *messages_.network_old_, output);
  }

  // .Networking_Sockets networking_sockets = 13;
  if (has_networking_sockets()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      13, *messages_.networking_sockets_, output);
  }

  // uint32 source_ip = 128;
  if (this->source_ip() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(128, this->source_ip(), output);
  }

  // uint32 source_port = 129;
  if (this->source_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(129, this->source_port(), output);
  }

  // @@protoc_insertion_point(serialize_end:Common_Message)
}

size_t Common_Message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Common_Message)
  size_t total_size = 0;

  // uint64 source_id = 1;
  if (this->source_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->source_id());
  }

  // uint64 dest_id = 2;
  if (this->dest_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->dest_id());
  }

  // uint32 source_ip = 128;
  if (this->source_ip() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->source_ip());
  }

  // uint32 source_port = 129;
  if (this->source_port() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->source_port());
  }

  switch (messages_case()) {
    // .Announce announce = 3;
    case kAnnounce: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *messages_.announce_);
      break;
    }
    // .Low_Level low_level = 4;
    case kLowLevel: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *messages_.low_level_);
      break;
    }
    // .Lobby lobby = 5;
    case kLobby: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *messages_.lobby_);
      break;
    }
    // .Lobby_Messages lobby_messages = 6;
    case kLobbyMessages: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *messages_.lobby_messages_);
      break;
    }
    // .Network network = 7;
    case kNetwork: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *messages_.network_);
      break;
    }
    // .Gameserver gameserver = 8;
    case kGameserver: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *messages_.gameserver_);
      break;
    }
    // .Friend friend = 9;
    case kFriend: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *messages_.friend__);
      break;
    }
    // .Auth_Ticket auth_ticket = 10;
    case kAuthTicket: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *messages_.auth_ticket_);
      break;
    }
    // .Friend_Messages friend_messages = 11;
    case kFriendMessages: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *messages_.friend_messages_);
      break;
    }
    // .Network_Old network_old = 12;
    case kNetworkOld: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *messages_.network_old_);
      break;
    }
    // .Networking_Sockets networking_sockets = 13;
    case kNetworkingSockets: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *messages_.networking_sockets_);
      break;
    }
    case MESSAGES_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Common_Message::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Common_Message*>(&from));
}

void Common_Message::MergeFrom(const Common_Message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Common_Message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.source_id() != 0) {
    set_source_id(from.source_id());
  }
  if (from.dest_id() != 0) {
    set_dest_id(from.dest_id());
  }
  if (from.source_ip() != 0) {
    set_source_ip(from.source_ip());
  }
  if (from.source_port() != 0) {
    set_source_port(from.source_port());
  }
  switch (from.messages_case()) {
    case kAnnounce: {
      mutable_announce()->::Announce::MergeFrom(from.announce());
      break;
    }
    case kLowLevel: {
      mutable_low_level()->::Low_Level::MergeFrom(from.low_level());
      break;
    }
    case kLobby: {
      mutable_lobby()->::Lobby::MergeFrom(from.lobby());
      break;
    }
    case kLobbyMessages: {
      mutable_lobby_messages()->::Lobby_Messages::MergeFrom(from.lobby_messages());
      break;
    }
    case kNetwork: {
      mutable_network()->::Network::MergeFrom(from.network());
      break;
    }
    case kGameserver: {
      mutable_gameserver()->::Gameserver::MergeFrom(from.gameserver());
      break;
    }
    case kFriend: {
      mutable_friend_()->::Friend::MergeFrom(from.friend_());
      break;
    }
    case kAuthTicket: {
      mutable_auth_ticket()->::Auth_Ticket::MergeFrom(from.auth_ticket());
      break;
    }
    case kFriendMessages: {
      mutable_friend_messages()->::Friend_Messages::MergeFrom(from.friend_messages());
      break;
    }
    case kNetworkOld: {
      mutable_network_old()->::Network_Old::MergeFrom(from.network_old());
      break;
    }
    case kNetworkingSockets: {
      mutable_networking_sockets()->::Networking_Sockets::MergeFrom(from.networking_sockets());
      break;
    }
    case MESSAGES_NOT_SET: {
      break;
    }
  }
}

void Common_Message::CopyFrom(const Common_Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Common_Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Common_Message::IsInitialized() const {
  return true;
}

void Common_Message::Swap(Common_Message* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Common_Message::InternalSwap(Common_Message* other) {
  std::swap(source_id_, other->source_id_);
  std::swap(dest_id_, other->dest_id_);
  std::swap(source_ip_, other->source_ip_);
  std::swap(source_port_, other->source_port_);
  std::swap(messages_, other->messages_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Common_Message::GetTypeName() const {
  return "Common_Message";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Common_Message

// uint64 source_id = 1;
void Common_Message::clear_source_id() {
  source_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Common_Message::source_id() const {
  // @@protoc_insertion_point(field_get:Common_Message.source_id)
  return source_id_;
}
void Common_Message::set_source_id(::google::protobuf::uint64 value) {
  
  source_id_ = value;
  // @@protoc_insertion_point(field_set:Common_Message.source_id)
}

// uint64 dest_id = 2;
void Common_Message::clear_dest_id() {
  dest_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Common_Message::dest_id() const {
  // @@protoc_insertion_point(field_get:Common_Message.dest_id)
  return dest_id_;
}
void Common_Message::set_dest_id(::google::protobuf::uint64 value) {
  
  dest_id_ = value;
  // @@protoc_insertion_point(field_set:Common_Message.dest_id)
}

// .Announce announce = 3;
bool Common_Message::has_announce() const {
  return messages_case() == kAnnounce;
}
void Common_Message::set_has_announce() {
  _oneof_case_[0] = kAnnounce;
}
void Common_Message::clear_announce() {
  if (has_announce()) {
    delete messages_.announce_;
    clear_has_messages();
  }
}
 const ::Announce& Common_Message::announce() const {
  // @@protoc_insertion_point(field_get:Common_Message.announce)
  return has_announce()
      ? *messages_.announce_
      : ::Announce::default_instance();
}
::Announce* Common_Message::mutable_announce() {
  if (!has_announce()) {
    clear_messages();
    set_has_announce();
    messages_.announce_ = new ::Announce;
  }
  // @@protoc_insertion_point(field_mutable:Common_Message.announce)
  return messages_.announce_;
}
::Announce* Common_Message::release_announce() {
  // @@protoc_insertion_point(field_release:Common_Message.announce)
  if (has_announce()) {
    clear_has_messages();
    ::Announce* temp = messages_.announce_;
    messages_.announce_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Common_Message::set_allocated_announce(::Announce* announce) {
  clear_messages();
  if (announce) {
    set_has_announce();
    messages_.announce_ = announce;
  }
  // @@protoc_insertion_point(field_set_allocated:Common_Message.announce)
}

// .Low_Level low_level = 4;
bool Common_Message::has_low_level() const {
  return messages_case() == kLowLevel;
}
void Common_Message::set_has_low_level() {
  _oneof_case_[0] = kLowLevel;
}
void Common_Message::clear_low_level() {
  if (has_low_level()) {
    delete messages_.low_level_;
    clear_has_messages();
  }
}
 const ::Low_Level& Common_Message::low_level() const {
  // @@protoc_insertion_point(field_get:Common_Message.low_level)
  return has_low_level()
      ? *messages_.low_level_
      : ::Low_Level::default_instance();
}
::Low_Level* Common_Message::mutable_low_level() {
  if (!has_low_level()) {
    clear_messages();
    set_has_low_level();
    messages_.low_level_ = new ::Low_Level;
  }
  // @@protoc_insertion_point(field_mutable:Common_Message.low_level)
  return messages_.low_level_;
}
::Low_Level* Common_Message::release_low_level() {
  // @@protoc_insertion_point(field_release:Common_Message.low_level)
  if (has_low_level()) {
    clear_has_messages();
    ::Low_Level* temp = messages_.low_level_;
    messages_.low_level_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Common_Message::set_allocated_low_level(::Low_Level* low_level) {
  clear_messages();
  if (low_level) {
    set_has_low_level();
    messages_.low_level_ = low_level;
  }
  // @@protoc_insertion_point(field_set_allocated:Common_Message.low_level)
}

// .Lobby lobby = 5;
bool Common_Message::has_lobby() const {
  return messages_case() == kLobby;
}
void Common_Message::set_has_lobby() {
  _oneof_case_[0] = kLobby;
}
void Common_Message::clear_lobby() {
  if (has_lobby()) {
    delete messages_.lobby_;
    clear_has_messages();
  }
}
 const ::Lobby& Common_Message::lobby() const {
  // @@protoc_insertion_point(field_get:Common_Message.lobby)
  return has_lobby()
      ? *messages_.lobby_
      : ::Lobby::default_instance();
}
::Lobby* Common_Message::mutable_lobby() {
  if (!has_lobby()) {
    clear_messages();
    set_has_lobby();
    messages_.lobby_ = new ::Lobby;
  }
  // @@protoc_insertion_point(field_mutable:Common_Message.lobby)
  return messages_.lobby_;
}
::Lobby* Common_Message::release_lobby() {
  // @@protoc_insertion_point(field_release:Common_Message.lobby)
  if (has_lobby()) {
    clear_has_messages();
    ::Lobby* temp = messages_.lobby_;
    messages_.lobby_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Common_Message::set_allocated_lobby(::Lobby* lobby) {
  clear_messages();
  if (lobby) {
    set_has_lobby();
    messages_.lobby_ = lobby;
  }
  // @@protoc_insertion_point(field_set_allocated:Common_Message.lobby)
}

// .Lobby_Messages lobby_messages = 6;
bool Common_Message::has_lobby_messages() const {
  return messages_case() == kLobbyMessages;
}
void Common_Message::set_has_lobby_messages() {
  _oneof_case_[0] = kLobbyMessages;
}
void Common_Message::clear_lobby_messages() {
  if (has_lobby_messages()) {
    delete messages_.lobby_messages_;
    clear_has_messages();
  }
}
 const ::Lobby_Messages& Common_Message::lobby_messages() const {
  // @@protoc_insertion_point(field_get:Common_Message.lobby_messages)
  return has_lobby_messages()
      ? *messages_.lobby_messages_
      : ::Lobby_Messages::default_instance();
}
::Lobby_Messages* Common_Message::mutable_lobby_messages() {
  if (!has_lobby_messages()) {
    clear_messages();
    set_has_lobby_messages();
    messages_.lobby_messages_ = new ::Lobby_Messages;
  }
  // @@protoc_insertion_point(field_mutable:Common_Message.lobby_messages)
  return messages_.lobby_messages_;
}
::Lobby_Messages* Common_Message::release_lobby_messages() {
  // @@protoc_insertion_point(field_release:Common_Message.lobby_messages)
  if (has_lobby_messages()) {
    clear_has_messages();
    ::Lobby_Messages* temp = messages_.lobby_messages_;
    messages_.lobby_messages_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Common_Message::set_allocated_lobby_messages(::Lobby_Messages* lobby_messages) {
  clear_messages();
  if (lobby_messages) {
    set_has_lobby_messages();
    messages_.lobby_messages_ = lobby_messages;
  }
  // @@protoc_insertion_point(field_set_allocated:Common_Message.lobby_messages)
}

// .Network network = 7;
bool Common_Message::has_network() const {
  return messages_case() == kNetwork;
}
void Common_Message::set_has_network() {
  _oneof_case_[0] = kNetwork;
}
void Common_Message::clear_network() {
  if (has_network()) {
    delete messages_.network_;
    clear_has_messages();
  }
}
 const ::Network& Common_Message::network() const {
  // @@protoc_insertion_point(field_get:Common_Message.network)
  return has_network()
      ? *messages_.network_
      : ::Network::default_instance();
}
::Network* Common_Message::mutable_network() {
  if (!has_network()) {
    clear_messages();
    set_has_network();
    messages_.network_ = new ::Network;
  }
  // @@protoc_insertion_point(field_mutable:Common_Message.network)
  return messages_.network_;
}
::Network* Common_Message::release_network() {
  // @@protoc_insertion_point(field_release:Common_Message.network)
  if (has_network()) {
    clear_has_messages();
    ::Network* temp = messages_.network_;
    messages_.network_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Common_Message::set_allocated_network(::Network* network) {
  clear_messages();
  if (network) {
    set_has_network();
    messages_.network_ = network;
  }
  // @@protoc_insertion_point(field_set_allocated:Common_Message.network)
}

// .Gameserver gameserver = 8;
bool Common_Message::has_gameserver() const {
  return messages_case() == kGameserver;
}
void Common_Message::set_has_gameserver() {
  _oneof_case_[0] = kGameserver;
}
void Common_Message::clear_gameserver() {
  if (has_gameserver()) {
    delete messages_.gameserver_;
    clear_has_messages();
  }
}
 const ::Gameserver& Common_Message::gameserver() const {
  // @@protoc_insertion_point(field_get:Common_Message.gameserver)
  return has_gameserver()
      ? *messages_.gameserver_
      : ::Gameserver::default_instance();
}
::Gameserver* Common_Message::mutable_gameserver() {
  if (!has_gameserver()) {
    clear_messages();
    set_has_gameserver();
    messages_.gameserver_ = new ::Gameserver;
  }
  // @@protoc_insertion_point(field_mutable:Common_Message.gameserver)
  return messages_.gameserver_;
}
::Gameserver* Common_Message::release_gameserver() {
  // @@protoc_insertion_point(field_release:Common_Message.gameserver)
  if (has_gameserver()) {
    clear_has_messages();
    ::Gameserver* temp = messages_.gameserver_;
    messages_.gameserver_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Common_Message::set_allocated_gameserver(::Gameserver* gameserver) {
  clear_messages();
  if (gameserver) {
    set_has_gameserver();
    messages_.gameserver_ = gameserver;
  }
  // @@protoc_insertion_point(field_set_allocated:Common_Message.gameserver)
}

// .Friend friend = 9;
bool Common_Message::has_friend_() const {
  return messages_case() == kFriend;
}
void Common_Message::set_has_friend_() {
  _oneof_case_[0] = kFriend;
}
void Common_Message::clear_friend_() {
  if (has_friend_()) {
    delete messages_.friend__;
    clear_has_messages();
  }
}
 const ::Friend& Common_Message::friend_() const {
  // @@protoc_insertion_point(field_get:Common_Message.friend)
  return has_friend_()
      ? *messages_.friend__
      : ::Friend::default_instance();
}
::Friend* Common_Message::mutable_friend_() {
  if (!has_friend_()) {
    clear_messages();
    set_has_friend_();
    messages_.friend__ = new ::Friend;
  }
  // @@protoc_insertion_point(field_mutable:Common_Message.friend)
  return messages_.friend__;
}
::Friend* Common_Message::release_friend_() {
  // @@protoc_insertion_point(field_release:Common_Message.friend)
  if (has_friend_()) {
    clear_has_messages();
    ::Friend* temp = messages_.friend__;
    messages_.friend__ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Common_Message::set_allocated_friend_(::Friend* friend_) {
  clear_messages();
  if (friend_) {
    set_has_friend_();
    messages_.friend__ = friend_;
  }
  // @@protoc_insertion_point(field_set_allocated:Common_Message.friend)
}

// .Auth_Ticket auth_ticket = 10;
bool Common_Message::has_auth_ticket() const {
  return messages_case() == kAuthTicket;
}
void Common_Message::set_has_auth_ticket() {
  _oneof_case_[0] = kAuthTicket;
}
void Common_Message::clear_auth_ticket() {
  if (has_auth_ticket()) {
    delete messages_.auth_ticket_;
    clear_has_messages();
  }
}
 const ::Auth_Ticket& Common_Message::auth_ticket() const {
  // @@protoc_insertion_point(field_get:Common_Message.auth_ticket)
  return has_auth_ticket()
      ? *messages_.auth_ticket_
      : ::Auth_Ticket::default_instance();
}
::Auth_Ticket* Common_Message::mutable_auth_ticket() {
  if (!has_auth_ticket()) {
    clear_messages();
    set_has_auth_ticket();
    messages_.auth_ticket_ = new ::Auth_Ticket;
  }
  // @@protoc_insertion_point(field_mutable:Common_Message.auth_ticket)
  return messages_.auth_ticket_;
}
::Auth_Ticket* Common_Message::release_auth_ticket() {
  // @@protoc_insertion_point(field_release:Common_Message.auth_ticket)
  if (has_auth_ticket()) {
    clear_has_messages();
    ::Auth_Ticket* temp = messages_.auth_ticket_;
    messages_.auth_ticket_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Common_Message::set_allocated_auth_ticket(::Auth_Ticket* auth_ticket) {
  clear_messages();
  if (auth_ticket) {
    set_has_auth_ticket();
    messages_.auth_ticket_ = auth_ticket;
  }
  // @@protoc_insertion_point(field_set_allocated:Common_Message.auth_ticket)
}

// .Friend_Messages friend_messages = 11;
bool Common_Message::has_friend_messages() const {
  return messages_case() == kFriendMessages;
}
void Common_Message::set_has_friend_messages() {
  _oneof_case_[0] = kFriendMessages;
}
void Common_Message::clear_friend_messages() {
  if (has_friend_messages()) {
    delete messages_.friend_messages_;
    clear_has_messages();
  }
}
 const ::Friend_Messages& Common_Message::friend_messages() const {
  // @@protoc_insertion_point(field_get:Common_Message.friend_messages)
  return has_friend_messages()
      ? *messages_.friend_messages_
      : ::Friend_Messages::default_instance();
}
::Friend_Messages* Common_Message::mutable_friend_messages() {
  if (!has_friend_messages()) {
    clear_messages();
    set_has_friend_messages();
    messages_.friend_messages_ = new ::Friend_Messages;
  }
  // @@protoc_insertion_point(field_mutable:Common_Message.friend_messages)
  return messages_.friend_messages_;
}
::Friend_Messages* Common_Message::release_friend_messages() {
  // @@protoc_insertion_point(field_release:Common_Message.friend_messages)
  if (has_friend_messages()) {
    clear_has_messages();
    ::Friend_Messages* temp = messages_.friend_messages_;
    messages_.friend_messages_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Common_Message::set_allocated_friend_messages(::Friend_Messages* friend_messages) {
  clear_messages();
  if (friend_messages) {
    set_has_friend_messages();
    messages_.friend_messages_ = friend_messages;
  }
  // @@protoc_insertion_point(field_set_allocated:Common_Message.friend_messages)
}

// .Network_Old network_old = 12;
bool Common_Message::has_network_old() const {
  return messages_case() == kNetworkOld;
}
void Common_Message::set_has_network_old() {
  _oneof_case_[0] = kNetworkOld;
}
void Common_Message::clear_network_old() {
  if (has_network_old()) {
    delete messages_.network_old_;
    clear_has_messages();
  }
}
 const ::Network_Old& Common_Message::network_old() const {
  // @@protoc_insertion_point(field_get:Common_Message.network_old)
  return has_network_old()
      ? *messages_.network_old_
      : ::Network_Old::default_instance();
}
::Network_Old* Common_Message::mutable_network_old() {
  if (!has_network_old()) {
    clear_messages();
    set_has_network_old();
    messages_.network_old_ = new ::Network_Old;
  }
  // @@protoc_insertion_point(field_mutable:Common_Message.network_old)
  return messages_.network_old_;
}
::Network_Old* Common_Message::release_network_old() {
  // @@protoc_insertion_point(field_release:Common_Message.network_old)
  if (has_network_old()) {
    clear_has_messages();
    ::Network_Old* temp = messages_.network_old_;
    messages_.network_old_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Common_Message::set_allocated_network_old(::Network_Old* network_old) {
  clear_messages();
  if (network_old) {
    set_has_network_old();
    messages_.network_old_ = network_old;
  }
  // @@protoc_insertion_point(field_set_allocated:Common_Message.network_old)
}

// .Networking_Sockets networking_sockets = 13;
bool Common_Message::has_networking_sockets() const {
  return messages_case() == kNetworkingSockets;
}
void Common_Message::set_has_networking_sockets() {
  _oneof_case_[0] = kNetworkingSockets;
}
void Common_Message::clear_networking_sockets() {
  if (has_networking_sockets()) {
    delete messages_.networking_sockets_;
    clear_has_messages();
  }
}
 const ::Networking_Sockets& Common_Message::networking_sockets() const {
  // @@protoc_insertion_point(field_get:Common_Message.networking_sockets)
  return has_networking_sockets()
      ? *messages_.networking_sockets_
      : ::Networking_Sockets::default_instance();
}
::Networking_Sockets* Common_Message::mutable_networking_sockets() {
  if (!has_networking_sockets()) {
    clear_messages();
    set_has_networking_sockets();
    messages_.networking_sockets_ = new ::Networking_Sockets;
  }
  // @@protoc_insertion_point(field_mutable:Common_Message.networking_sockets)
  return messages_.networking_sockets_;
}
::Networking_Sockets* Common_Message::release_networking_sockets() {
  // @@protoc_insertion_point(field_release:Common_Message.networking_sockets)
  if (has_networking_sockets()) {
    clear_has_messages();
    ::Networking_Sockets* temp = messages_.networking_sockets_;
    messages_.networking_sockets_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Common_Message::set_allocated_networking_sockets(::Networking_Sockets* networking_sockets) {
  clear_messages();
  if (networking_sockets) {
    set_has_networking_sockets();
    messages_.networking_sockets_ = networking_sockets;
  }
  // @@protoc_insertion_point(field_set_allocated:Common_Message.networking_sockets)
}

// uint32 source_ip = 128;
void Common_Message::clear_source_ip() {
  source_ip_ = 0u;
}
::google::protobuf::uint32 Common_Message::source_ip() const {
  // @@protoc_insertion_point(field_get:Common_Message.source_ip)
  return source_ip_;
}
void Common_Message::set_source_ip(::google::protobuf::uint32 value) {
  
  source_ip_ = value;
  // @@protoc_insertion_point(field_set:Common_Message.source_ip)
}

// uint32 source_port = 129;
void Common_Message::clear_source_port() {
  source_port_ = 0u;
}
::google::protobuf::uint32 Common_Message::source_port() const {
  // @@protoc_insertion_point(field_get:Common_Message.source_port)
  return source_port_;
}
void Common_Message::set_source_port(::google::protobuf::uint32 value) {
  
  source_port_ = value;
  // @@protoc_insertion_point(field_set:Common_Message.source_port)
}

bool Common_Message::has_messages() const {
  return messages_case() != MESSAGES_NOT_SET;
}
void Common_Message::clear_has_messages() {
  _oneof_case_[0] = MESSAGES_NOT_SET;
}
Common_Message::MessagesCase Common_Message::messages_case() const {
  return Common_Message::MessagesCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
